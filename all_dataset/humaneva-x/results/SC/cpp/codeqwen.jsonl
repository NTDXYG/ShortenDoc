{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    for(char c : paren_string){\n        if(c == '('){\n            balance++;\n        }else if(c == ')'){\n            balance--;\n        }\n        current_group += c;\n        if(balance == 0){\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integerPart;\n    float decimalPart;\n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad /= numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(c == ')'){\n            current_depth--;\n        }else if(c == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n            }\n            max_depth = 0;\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0,product=1;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    ''> make_palindrome('dog\n    'dogod' make_palindrome('dogodog' */\n    ''> make_palindrome('race\n    'racecar' make_palindrome('racecarracecar' */\n    ''> make_palindrome('hello\n    'helloolleh' make_palindrome('helloollehhelloolleh' */\n    ''> make_palindrome('world\n    'worlddlrow' make_palindrome('worlddlrowworlddlrow' */\n    ''> make_palindrome('abcd\n    'abcdcba' make_palindrome('abcdcbaabcdcba' */\n    ''> make_palindrome('abcde\n    'abcdeedcba' make_palindrome('abcdeedcbaabcdeedcba' */\n    ''> make_palindrome('abcdef\n    'abcdefedcba' make_palindrome('abcdefedcbaabcdefedcba' */\n    ''> make_palindrome('abcdefg\n    'abcdefgfedcba' make_palindrome('abcdefgfedcbaabcdefgfedcba' */\n    ''> make_palindrome('abcdefgh\n    'abcdefghghba' make_palindrome('abcdefghghbaabcdefghghba' */\n    ''> make_palindrome('abcdefghi\n    'abcdefghiihgba' make_palindrome('abcdefghiihgbaabcdefghiihgba' */\n    ''> make_palindrome('abcdefghij\n    'abcdefghijjihgba' make_palindrome('abcdefghijjihgbaabcdefghijjihgba' */\n    ''> make_palindrome('abcdefghijk\n    'abcdefghijkjihgba' make_palindrome('abcdefghijkjihgbaabcdefghijkjihgba' */\n    ''> make_palindrome('abcdefghijkl\n    'abcdefghijkljhgba' make_palindrome('abcdefghijkljhg"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return NULL;\n    string longest_str = strings[0];\n    for(int i=1;i<strings.size();i++){\n        if(strings[i].length()>longest_str.length()){\n            longest_str = strings[i];\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b,a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0, i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 0; i <= n; i++){\n        result += to_string(i);\n        if(i < n){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        str[i]=tolower(str[i]);\n    }\n    for(int i=0;i<str.length();i++){\n        if(find(v.begin(),v.end(),str[i])==v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0;i<music_string.length();i++){\n        if(music_string[i]=='o'){\n            if(music_string[i+1]=='|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(4);\n            }\n        }\n        else if(music_string[i]=='.'){\n            beats.push_back(1);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0;\n    int j=0;\n    int n=str.length();\n    int m=substring.length();\n    while(i<n){\n        if(str[i]==substring[j]){\n            j++;\n            if(j==m){\n                count++;\n                j=0;\n            }\n        }\n        else{\n            j=0;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string s=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]==' '){\n            s+=temp;\n            temp=\"\";\n        }\n        else{\n            temp+=numbers[i];\n        }\n    }\n    s+=temp;\n    temp=\"\";\n    for(int i=0;i<s.length();i++){\n        for(int j=i+1;j<s.length();j++){\n            if(m[s.substr(i,s.substr(i,j).length())]>m[s.substr(j,s.substr(j,j).length())]){\n                temp=s.substr(i,s.substr(i,j).length());\n                s.erase(i,s.substr(i,j).length());\n                s.insert(i,temp);\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 100000;\n    float min_num1 = 0;\n    float min_num2 = 0;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n            }\n        }\n    }\n    if(min_num1 < min_num2){\n        return {min_num1, min_num2};\n    }\n    else{\n        return {min_num2, min_num1};\n    }\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=1;i<numbers.size();i++){\n        if(numbers[i]<min){\n            min = numbers[i];\n        }\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n    }\n    vector<float> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back((numbers[i]-min)/(max-min));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;str[i]!='\\0';i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n/2;i>=1;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n    return 1;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i*i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(count(result.begin(),result.end(),numbers[i])==0){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double a = xs[0];\n    double b = xs[1];\n    double c = xs[2];\n    double d = xs[3];\n    double e = xs[4];\n    double f = xs[5];\n    double g = xs[6];\n    double h = xs[7];\n    double i = xs[8];\n    double j = xs[9];\n    double k = xs[10];\n    double l = xs[11];\n    double m = xs[12];\n    double n = xs[13];\n    double o = xs[14];\n    double p = xs[15];\n    double q = xs[16];\n    double r = xs[17];\n    double s = xs[18];\n    double t = xs[19];\n    double u = xs[20];\n    double v = xs[21];\n    double w = xs[22];\n    double x = xs[23];\n    double y = xs[24];\n    double z = xs[25];\n    double aa = xs[26];\n    double ab = xs[27];\n    double ac = xs[28];\n    double ad = xs[29];\n    double ae = xs[30];\n    double af = xs[31];\n    double ag = xs[32];\n    double ah = xs[33];\n    double ai = xs[34];\n    double aj = xs[35];\n    double ak = xs[36];\n    double al = xs[37];\n    double am = xs[38];\n    double an = xs[39];\n    double ao = xs[40];\n    double ap = xs[41];\n    double aq = xs[42];\n    double ar = xs[43];\n    double as"}
{"task_id": "CPP/33", "generation": "\n    vector<int> res;\n    vector<int> temp;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            temp.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(),temp.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            res.push_back(temp[j]);\n            j++;\n        }\n        else{\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int>::iterator it = unique(l.begin(), l.end());\n    l.resize(distance(l.begin(), it));\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp!=0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=1;i<l.size();i+=2){\n        even.push_back(l[i]);\n    }\n    sort(even.begin(),even.end());\n    for(int i=1,j=0;i<l.size();i+=2,j++){\n        l[i]=even[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring decode_cyclic(string encoded) {\n    string decoded = \"\";\n    int len = encoded.length();\n    for (int i = 0; i < len; i++) {\n        char c = encoded[i];\n        if (c >= 'a' && c <= 'z') {\n            // decode lowercase letters\n            c = 'a' + (c - 'a' - 3 + 26) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // decode uppercase letters\n            c = 'A' + (c - 'A' - 3 + 26) % 26;\n        }\n        decoded += c;\n    }\n    return decoded;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0,count=0;\n    while(count<n){\n        c=a+b;\n        a=b;\n        b=c;\n        int i=2;\n        for(i=2;i<c;i++){\n            if(c%i==0){\n                break;\n            }\n        }\n        if(i==c){\n            count++;\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n=l.size();\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result=\"\";\n    while(x>0){\n        result=(char)(x%base+'0')+result;\n        x/=base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0) return 0;\n    if(n==1 || n==2) return 2;\n    if(n==3) return 0;\n    int a=0,b=2,c=2,d=0,e;\n    for(int i=4;i<=n;i++){\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n    return 1;\n    else{\n        int x=modp(n/2,p);\n        if(n%2==0)\n        return (x*x)%p;\n        else\n        return (x*x*2)%p;\n    }\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += char(int(s[i] - 97 - 3 + 26) % 26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += char(int(s[i] - 65 - 3 + 26) % 26 + 65);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&vowels](char c){ return vowels.find(c) != string::npos; }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n    return n;\n    else\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc=true, dec=true;\n    for(int i=1; i<l.size(); i++){\n        if(l[i]>l[i-1]) dec=false;\n        if(l[i]<l[i-1]) inc=false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    auto last = unique(result.begin(),result.end());\n    result.erase(last,result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i, max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    if(n==1)\n    return 1;\n    else\n    return n+sum_to_n(n-1);\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 1;\n    int a=0,b=1,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int n=s.length();\n    if(shift>n)\n    {\n        for(int i=0;i<n;i++)\n        {\n            s[i]=s[n-1-i];\n        }\n    }\n    else\n    {\n        for(int i=0;i<shift;i++)\n        {\n            char temp=s[n-1];\n            for(int j=n-1;j>0;j--)\n            {\n                s[j]=s[j-1];\n            }\n            s[0]=temp;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples,oranges;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=100000;\n    int index=-1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0 && arr[i]<min){\n            min=arr[i];\n            index=i;\n        }\n    }\n    if(index==-1){\n        return {};\n    }\n    return {min,index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j])\n                count++;\n        }\n        if(count>lst[i]&&count>max)\n            max=count;\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    sort(lst.begin(), lst.end());\n    while(!lst.empty()){\n        res.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()) res.push_back(lst.back());\n        lst.pop_back();\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s,area;\n    if(a+b>c && a+c>b && b+c>a){\n        s=(a+b+c)/2;\n        area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w)return false;\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-i-1])return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    int i=0;\n    int j=arr.size()-1;\n    while(i<j){\n        if(arr[i]!=arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst1[i].size();j++){\n            sum1+=lst1[i][j];\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        for(int j=0;j<lst2[i].size();j++){\n            sum2+=lst2[i][j];\n        }\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n    return true;\n    if(n==1)\n    return x==1;\n    double y=log(x)/log(n);\n    return floor(y)==y;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=round(pow(abs(a),1.0/3.0));\n    return b*b*b==abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"\";\n    while(decimal>0){\n        binary=(decimal%2==0?\"0\":\"1\")+binary;\n        decimal/=2;\n    }\n    return \"db\"+binary+\"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0){\n            letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i]>3.7){\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]>3.3){\n            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i]>3.0){\n            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i]>2.7){\n            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i]>2.3){\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]>2.0){\n            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i]>1.7){\n            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i]>1.3){\n            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i]>1.0){\n            letter_grades.push_back(\"D+\");\n        }\n        else if(grades[i]>0.7){\n            letter_grades.push_back(\"D\");\n        }\n        else if(grades[i]>0.0){\n            letter_grades.push_back(\"D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1)\n    return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 19;\n    if(n==3) return 180;\n    if(n==4) return 1800;\n    if(n==5) return 18000;\n    if(n==6) return 180000;\n    if(n==7) return 1800000;\n    if(n==8) return 18000000;\n    if(n==9) return 180000000;\n    if(n==10) return 1800000000;\n    return 0;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    string binary=\"\";\n    while(sum>0){\n        binary=(sum%2==0?\"0\":\"1\")+binary;\n        sum/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string res=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            res+=word;\n            res+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    sort(word.begin(),word.end());\n    res+=word;\n    return res;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                vector<int> temp;\n                temp.push_back(i);\n                temp.push_back(j);\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size()==0) return array;\n    int sum=array[0]+array[array.size()-1];\n    if(sum%2==0){\n        sort(array.begin(),array.end());\n    }\n    else{\n        sort(array.rbegin(),array.rend());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            encrypted+=(char)(((s[i]-'a')+4)%26+'a');\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            encrypted+=(char)(((s[i]-'A')+4)%26+'A');\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int i,count=0;\n    for(i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            if(S[i-1]=='I'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==int(a) && b==int(b) && c==int(c)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels=\"aeiou\";\n    for(int i=0;i<message.length();i++){\n        if(isalpha(message[i])){\n            if(islower(message[i])){\n                message[i]=toupper(message[i]);\n            }\n            else{\n                message[i]=tolower(message[i]);\n            }\n            if(vowels.find(message[i])!=-1){\n                int pos=vowels.find(message[i]);\n                message[i]=vowels[(pos+2)%vowels.length()];\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum=sum+max%10;\n        max=max/10;\n    }\n    return sum;\n}\nbool isPrime(int n) {\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n}\nint sumOfDigits(vector<int> lst) {\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(isPrime(lst[i])&&lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum=sum+max%10;\n        max=max/10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool lower=true,upper=true;\n    for(auto i:dict){\n        if(i.first.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\")!=string::npos) lower=false;\n        if(i.first.find_first_not_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")!=string::npos) upper=false;\n    }\n    return lower || upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        bool isPrime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                isPrime=false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int x=a%10;\n    int y=b%10;\n    int z=x*y;\n    return z;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i+=2){\n        if(s[i]>='A'&&s[i]<='Z'){\n            if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;\n    int sum=0;\n    int sum1=0;\n    int sum2=0;\n    int sum3=0;\n    int sum4=0;\n    int sum5=0;\n    int sum6=0;\n    int sum7=0;\n    int sum8=0;\n    int sum9=0;\n    int sum10=0;\n    int sum11=0;\n    int sum12=0;\n    int sum13=0;\n    int sum14=0;\n    int sum15=0;\n    int sum16=0;\n    int sum17=0;\n    int sum18=0;\n    int sum19=0;\n    int sum20=0;\n    int sum21=0;\n    int sum22=0;\n    int sum23=0;\n    int sum24=0;\n    int sum25=0;\n    int sum26=0;\n    int sum27=0;\n    int sum28=0;\n    int sum29=0;\n    int sum30=0;\n    int sum31=0;\n    int sum32=0;\n    int sum33=0;\n    int sum34=0;\n    int sum35=0;\n    int sum36=0;\n    int sum37=0;\n    int sum38=0;\n    int sum39=0;\n    int sum40=0;\n    int sum41=0;\n    int sum42=0;\n    int sum43=0;\n    int sum44=0;\n    int sum45=0;"}
{"task_id": "CPP/100", "generation": "\n    vector<int>v;\n    int i=0;\n    while(i<n){\n        v.push_back(n);\n        if(n%2==0){\n            n=n+2;\n        }\n        else{\n            n=n+2;\n        }\n        i++;\n    }\n    return v;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=y;i>=x;i--){\n        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m)\n        return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++)\n        sum+=i;\n    int avg=round(sum/(m-n+1.0));\n    string binary=\"0b\";\n    while(avg>0){\n        binary=(avg%2==0?\"0\":\"1\")+binary;\n        avg/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if(temp%2==0){\n                result.push_back(x[i]);\n                break;\n            }\n            temp=temp/10;\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push_back(m[arr[i]]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            int factorial=1;\n            for(int j=1;j<=i;j++){\n                factorial*=j;\n            }\n            result.push_back(factorial);\n        }\n        else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2,0);\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        string r=s;\n        reverse(r.begin(),r.end());\n        if(s==r){\n            if(i%2==0) result[0]++;\n            else result[1]++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n        }\n        while(num>0){\n            int digit=num%10;\n            sum=sum+digit;\n            num=num/10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.size()==0) return true;\n    int count=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>arr[i+1]) count++;\n    }\n    if(count<=1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1=0,even2=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0)odd1++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0)even2++;\n    }\n    if(odd1<=even2)return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max=0;\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            result[test[i]]++;\n            if(result[test[i]]>max){\n                max=result[test[i]];\n            }\n        }\n    }\n    map<char,int> final;\n    for(auto i:result){\n        if(i.second==max){\n            final[i.first]=i.second;\n        }\n    }\n    return final;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(find(c.begin(),c.end(),s[i])==c.end())\n            res+=s[i];\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=res==rev;\n    return {res,pal};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0){\n                count++;\n            }\n        }\n        string s=\"the number \"+to_string(count)+\"n the str\"+to_string(count)+\"ng \"+to_string(count)+\" of the \"+to_string(count)+\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            count+=grid[i][j];\n        }\n    }\n    return count/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> res;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int temp=arr[i];\n        while(temp!=0){\n            if(temp%2==1) count++;\n            temp=temp/2;\n        }\n        res.push_back(count);\n    }\n    sort(arr.begin(),arr.end());\n    vector<int> res1;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int temp=arr[i];\n        while(temp!=0){\n            if(temp%2==1) count++;\n            temp=temp/2;\n        }\n        res1.push_back(arr[i]);\n    }\n    vector<int> res2;\n    for(int i=0;i<res.size();i++){\n        for(int j=0;j<res1.size();j++){\n            int count=0;\n            int temp=res1[j];\n            while(temp!=0){\n                if(temp%2==1) count++;\n                temp=temp/2;\n            }\n            if(res[i]==count) res2.push_back(res1[j]);\n        }\n    }\n    return res2;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string>v;\n    string word=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(word.size()==n){\n                v.push_back(word);\n            }\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.size()==n){\n        v.push_back(word);\n    }\n    return v;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    for(int i=word.size()-2;i>0;i--){\n        if(vowels.find(word[i])!=-1&&vowels.find(word[i+1])==-1&&vowels.find(word[i-1])==-1){\n            return string(1,word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int count=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(') count++;\n            else count--;\n            if(count<0) break;\n        }\n        if(count<0) break;\n    }\n    if(count==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> ans;\n    for(int i=arr.size()-k;i<arr.size();i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2!=0){\n            v.push_back(n);\n        }\n        n=n%2==0?n/2:3*n+1;\n    }\n    v.push_back(1);\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day;\n    if(date.size()!=5) return false;\n    if(date[2]!='-') return false;\n    month=date[0]-'0';\n    day=date[3]-'0';\n    if(month<1 || month>12) return false;\n    if(day<1 || day>31) return false;\n    if(month==2 && day>29) return false;\n    if(month==4 || month==6 || month==9 || month==11 && day>30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else if(txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\nint count_odd_letters(string txt){\n    int count = 0;\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            if((txt[i] - 'a') % 2 == 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else if(txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\nint count_odd_letters(string txt){\n    int count = 0;\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){"}
{"task_id": "CPP/126", "generation": "\n    int count=0;\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n        if(lst[i]==lst[i+1]){\n            count++;\n        }\n    }\n    if(count>1){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start=max(interval1[0],interval2[0]);\n    int end=min(interval1[1],interval2[1]);\n    if(start>end)\n    return \"NO\";\n    int length=end-start+1;\n    if(length==1)\n    return \"NO\";\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0)\n        return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return 0;\n    int prod=1,sum=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==0) return 0;\n        if(arr[i]<0) prod*=-1;\n        sum+=abs(arr[i]);\n    }\n    return prod*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    \n    // Initialize the dp array\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            dp[i][j] = 1e9;\n        }\n    }\n    \n    // Start from each cell\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            dfs(grid, dp, visited, dir, i, j, k, grid[i][j]);\n        }\n    }\n    \n    // Find the minimum path\n    int minVal = 1e9;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(dp[i][j] < minVal){\n                minVal = dp[i][j];\n            }\n        }\n    }\n    \n    // Backtrack to find the path\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(dp[i][j] == minVal){\n                backtrack(grid, dp, visited, dir, i, j, k, res);\n                break;\n            }\n        }\n    }\n    \n    return res;\n}\n\nvoid dfs(vector<vector<int>>& grid, vector<vector<int>>& dp, vector<vector<bool>>& visited, vector<vector<int>>& dir, int i, int j, int k, int val){\n    if(k == 0){\n        dp[i][j] = min(dp[i][j], val);\n        return"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    res.push_back(1);\n    res.push_back(3);\n    for(int i = 2; i <= n; i++){\n        if(i % 2 == 0){\n            res.push_back(res[i - 1] + res[i - 2] + res[i - 3]);\n        }else{\n            res.push_back(res[i - 1] - res[i - 2] + res[i - 3]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    while(n>0){\n        int digit=n%10;\n        if(digit%2!=0){\n            product*=digit;\n        }\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count!=0){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0) return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z'){\n        if(txt.length()==1) return true;\n        if(txt[txt.length()-2]==' ') return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n=arr.size();\n    int max_index=-1;\n    for(int i=n-1;i>0;i--){\n        if(arr[i]<arr[i-1]){\n            max_index=i;\n            break;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = -1000000000, min_pos = 1000000000;\n    bool neg = false, pos = false;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > max_neg){\n            max_neg = lst[i];\n            neg = true;\n        }\n        if(lst[i] > 0 && lst[i] < min_pos){\n            min_pos = lst[i];\n            pos = true;\n        }\n    }\n    vector<int> result;\n    if(neg) result.push_back(max_neg);\n    else result.push_back(0);\n    if(pos) result.push_back(min_pos);\n    else result.push_back(0);\n    return result;\n}\n"}
{"task_id": "CPP/137", "generation": "\n    string s1,s2;\n    float f1,f2;\n    if(a.type()==typeid(string)){\n        s1=boost::any_cast<string>(a);\n        replace(s1.begin(),s1.end(),',','.');\n        f1=stof(s1);\n    }\n    else if(a.type()==typeid(float)){\n        f1=boost::any_cast<float>(a);\n    }\n    else if(a.type()==typeid(int)){\n        f1=boost::any_cast<int>(a);\n    }\n    if(b.type()==typeid(string)){\n        s2=boost::any_cast<string>(b);\n        replace(s2.begin(),s2.end(),',','.');\n        f2=stof(s2);\n    }\n    else if(b.type()==typeid(float)){\n        f2=boost::any_cast<float>(b);\n    }\n    else if(b.type()==typeid(int)){\n        f2=boost::any_cast<int>(b);\n    }\n    if(f1==f2) return boost::any();\n    else if(f1>f2) return b;\n    else return a;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact=fact*i;\n    }\n    return fact;\n}\nlong long brazilian_factorial(int n){\n    long long brazilian_fact=1;\n    for(int i=1;i<=n;i++){\n        brazilian_fact=brazilian_fact*special_factorial(i);\n    }\n    return brazilian_fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n        }else{\n            if(count == 1){\n                res += '_';\n            }else if(count > 2){\n                res += '-';\n            }\n            count = 0;\n            res += text[i];\n        }\n    }\n    if(count == 1){\n        res += '_';\n    }else if(count > 2){\n        res += '-';\n    }\n    return res;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    else{\n        int dot=0;\n        for(int i=0;i<file_name.length();i++){\n            if(file_name[i]=='.'){\n                dot++;\n            }\n        }\n        if(dot==1){\n            int a=0;\n            for(int i=0;i<file_name.length();i++){\n                if(file_name[i]>='a'&&file_name[i]<='z'){\n                    a++;\n                }\n                else if(file_name[i]>='A'&&file_name[i]<='Z'){\n                    a++;\n                }\n            }\n            if(a==0){\n                return \"No\";\n            }\n            else{\n                int b=0;\n                for(int i=0;i<file_name.length();i++){\n                    if(file_name[i]=='.'){\n                        b++;\n                    }\n                }\n                if(b==1){\n                    int c=0;\n                    for(int i=0;i<file_name.length();i++){\n                        if(file_name[i]=='.'){\n                            c++;\n                        }\n                    }\n                    if(c==1){\n                        int d=0;\n                        for(int i=0;i<file_name.length();i++){\n                            if(file_name[i]=='.'){\n                                d++;\n                            }\n                        }\n                        if(d==1){\n                            int e=0;\n                            for(int i=0;i<file_name.length();i++){\n                                if(file_name[i"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            if(word.length()>0 && isPrime(word.length())){\n                if(result.length()>0){\n                    result+=\" \";\n                }\n                result+=word;\n            }\n            word=\"\";\n        }else{\n            word+=sentence[i];\n        }\n    }\n    if(word.length()>0 && isPrime(word.length())){\n        if(result.length()>0){\n            result+=\" \";\n        }\n        result+=word;\n    }\n    return result;\n}\nbool isPrime(int n){\n    if(n<=1){\n        return false;\n    }\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    int a=x1*n2;\n    int b=x2*n1;\n    if(a%b==0) return true;\n    else return false;\n}\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    int a=x1*n2;\n    int b=x2*n1;\n    if(a%b==0) return true;\n    else return false;\n}\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    int a=x1*n2;\n    int b=x2*n1;\n    if(a%b==0) return true;\n    else return false;\n}\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    int a=x1*n2;\n    int b=x2"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    vector<int> temp;\n    int sum;\n    for(int i=0;i<nums.size();i++){\n        sum=0;\n        temp.push_back(nums[i]);\n        while(nums[i]!=0){\n            sum+=abs(nums[i]%10);\n            nums[i]/=10;\n        }\n        temp.push_back(sum);\n    }\n    for(int i=0;i<temp.size();i+=2){\n        for(int j=i+2;j<temp.size();j+=2){\n            if(temp[j+1]<temp[i+1]){\n                int t=temp[i];\n                temp[i]=temp[j];\n                temp[j]=t;\n                t=temp[i+1];\n                temp[i+1]=temp[j+1];\n                temp[j+1]=t;\n            }\n        }\n    }\n    for(int i=0;i<temp.size();i+=2){\n        result.push_back(temp[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        string s=to_string(abs(nums[i]));\n        if(s.length()>1){\n            if(s[0]=='1'||s[0]=='3'||s[0]=='5'||s[0]=='7'||s[0]=='9'){\n                if(s[s.length()-1]=='1'||s[s.length()-1]=='3'||s[s.length()-1]=='5'||s[s.length()-1]=='7'||s[s.length()-1]=='9'){\n                    if(nums[i]>10){\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int index1=-1,index2=-1;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1) index1=i;\n        if(planets[i]==planet2) index2=i;\n    }\n    if(index1==-1 || index2==-1) return result;\n    if(index1>index2){\n        int temp=index1;\n        index1=index2;\n        index2=temp;\n    }\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2!=0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0 && lst[i]==floor(lst[i]) && lst[i]%2!=0){\n            sum+=pow(lst[i],2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> ans;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]) ans.push_back(0);\n        else ans.push_back(abs(game[i]-guess[i]));\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max=0,cap,sm;\n    string s;\n    for(int i=0;i<extensions.size();i++){\n        cap=0;sm=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(extensions[i][j]>='A'&&extensions[i][j]<='Z')cap++;\n            else if(extensions[i][j]>='a'&&extensions[i][j]<='z')sm++;\n        }\n        if(cap-sm>max){\n            max=cap-sm;\n            s=extensions[i];\n        }\n    }\n    return class_name+\".\"+s;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string c=a+a;\n    for(int i=0;i<b.length();i++){\n        string d=b.substr(i,b.length());\n        string e=d+d;\n        if(e.find(a)!=-1)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even=0,count_odd=0;\n    while(num!=0){\n        int digit=num%10;\n        if(digit%2==0){\n            count_even++;\n        }\n        else{\n            count_odd++;\n        }\n        num=num/10;\n    }\n    vector<int> result;\n    result.push_back(count_even);\n    result.push_back(count_odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    vector<string> romans = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += romans[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float x,y,z;\n    x=a*a;\n    y=b*b;\n    z=c*c;\n    if(x==y+z || y==x+z || z==x+y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    for(string word : words){\n        vector<bool> char_seen(26, false);\n        int unique_chars = 0;\n        for(char c : word){\n            if(!char_seen[c - 'a']){\n                char_seen[c - 'a'] = true;\n                unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars || (unique_chars == max_unique_chars && word < max_word)){\n            max_word = word;\n            max_unique_chars = unique_chars;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total=number;\n    int left=remaining;\n    if(need<=remaining){\n        total=number+need;\n        left=remaining-need;\n    }\n    else{\n        total=number+remaining;\n        left=0;\n    }\n    vector<int> result;\n    result.push_back(total);\n    result.push_back(left);\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int result = operand[0];\n    for(i=0;i<operato.size();i++){\n        if(operato[i]==\"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i]==\"//\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i]==\"**\"){\n            result = pow(result,operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int>v;\n    if(a>b){\n        int temp=a;\n        a=b;\n        b=temp;\n    }\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\n"}
