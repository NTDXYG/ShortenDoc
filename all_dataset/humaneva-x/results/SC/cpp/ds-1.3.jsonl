{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_braces = 0;\n    string current_group;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if(open_braces == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - (float)integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    float mean = 0.0;\n    int n = numbers.size();\n    for(int i=0; i<n; i++){\n        sum += numbers[i];\n    }\n    mean = sum/n;\n    float mad = 0.0;\n    for(int i=0; i<n; i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad/n;\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        printf(\"%d \", numbers[i]);\n    }\n    printf(\"%d\\n\", delimeter);\n    return numbers;\n}\n\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int level = 0;\n    int max_level = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            level++;\n            if(level > max_level)\n                max_level = level;\n        }\n        else if(paren_string[i] == ')'){\n            level--;\n        }\n        levels.push_back(level);\n    }\n    return levels;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return make_pair(sum, product);\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    'catacatacat') make_palindrome('catacatacatac') make_palindrome('catacatacatacat') make_palindrome('catacatacatacatacat') make_palindrome('catacatacatacatacatacat') make_palindrome('catacatacatacatacatacatacatacat') make_palindrome('catacatacatacatacatacatacatacatacatacat') make_palindrome('catacatacatacatacatacatacatacatacatacatacatacat') make_palindrome('catacatacatacatacatacatacatacatacatacatacatacatacatacat') make_palindrome('catacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacatacat"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty())\n        return NULL;\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].size() > longest.size()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 0; i <= n; i++){\n        result += to_string(i);\n        if(i < n)\n            result += \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n        if(find(distinct_chars.begin(), distinct_chars.end(), str[i]) == distinct_chars.end()){\n            distinct_chars.push_back(str[i]);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.length(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beats.push_back(4);\n                break;\n            case 'o|':\n                beats.push_back(2);\n                break;\n            case '.|':\n                beats.push_back(1);\n                break;\n        }\n    }\n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    int len_str = str.length();\n    int len_sub = substring.length();\n    for(int i=0; i<=len_str-len_sub; i++){\n        int j;\n        for(j=0; j<len_sub; j++)\n            if(str[i+j] != substring[j])\n                break;\n        if(j == len_sub)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] == ' '){\n            num_map[word] = stoi(word);\n            result += word + \" \";\n            word = \"\";\n        }\n        else{\n            word += numbers[i];\n        }\n    }\n    num_map[word] = stoi(word);\n    result += word;\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    vector<float> result;\n    if(numbers.size()<2){\n        return result;\n    }\n    float min_diff = FLT_MAX;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = numbers[i] - numbers[j];\n            if(diff<min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/21", "generation": "\n    float min_val = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_val)\n            min_val = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = numbers[i] - min_val;\n    }\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = numbers[i]/sum;\n    }\n    return numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> integers;\n    for(auto value : values){\n        if(boost::any_cast<int>(&value) != NULL){\n            integers.push_back(boost::any_cast<int>(&value));\n        }\n    }\n    return integers;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n/2; i>=1; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    result.push_back(numbers[0]);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; str[i] != '\\0'; i++){\n        if(str[i] >= 'a' && str[i] <= 'z'){\n            str[i] = str[i] - 32;\n        }\n        else if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        for(int j=0; j<l[i].size(); j++){\n            if(l[i][j]>0){\n                positive_numbers.push_back(l[i][j]);\n            }\n        }\n    }\n    return positive_numbers;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    if(n == 2)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    for(long long i = 3; i * i <= n; i += 2){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double result = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0)\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    res.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0)\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\nfunction decode_cyclic(encoded_string) {\n  // split the string into an array of characters\n  let chars = encoded_string.split('');\n\n  // find the length of the array\n  let length = chars.length;\n\n  // create an array to hold the decoded characters\n  let decoded_chars = [];\n\n  // loop through the array\n  for (let i = 0; i < length; i++) {\n    // if the character is a number, add it to the decoded array\n    if (!isNaN(chars[i])) {\n      decoded_chars.push(chars[i]);\n    }\n    // if the character is a letter, add it to the decoded array\n    else if (chars[i].match(/[a-z]/i)) {\n      decoded_chars.push(chars[i]);\n    }\n  }\n\n  // join the array into a string\n  let decoded_string = decoded_chars.join('');\n\n  // return the decoded string\n  return decoded_string;\n}\n\nconsole.log(decode_cyclic('123abc')); // Output: abc\nconsole.log(decode_cyclic('123abc456def')); // Output: abcdef\nconsole.log(decode_cyclic('abc123def456')); // Output: abcdef\nconsole.log(decode_cyclic('1a2b3c4d5e6f7g8h9i10')); // Output: abcdefghijklmnopqrstuvwxyz\nconsole.log(decode_cyclic('1a2b3c4d5e6f7g8h9i10jklmno')); // Output: abcdefghijklmnopqrstuvwxyz\nconsole.log(decode_cyclic('123abc456def789')); // Output: abcdefghijklmnopqrstuvwxyz\nconsole.log(decode_cyclic('123abcdefghijklmnopqrstuvwxyz')); // Output"}
{"task_id": "CPP/39", "generation": "\n    int i, j, count = 0, fib[1000] = {0, 1};\n    for(i = 2; count < n; i++){\n        for(j = 0; j < i; j++){\n            fib[i] += fib[j];\n        }\n        if(fib[i] > 1 && is_prime(fib[i])){\n            count++;\n        }\n    }\n    return fib[i-1];\n}\n\nbool is_prime(int n){\n    if(n <= 1)\n        return false;\n    for(int i = 2; i*i <= n; i++){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        int a = l[i];\n        int start = i+1;\n        int end = n-1;\n        while(start < end){\n            if(a + l[start] + l[end] == 0){\n                return true;\n            }\n            else if(a + l[start] + l[end] < 0){\n                start += 1;\n            }\n            else{\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(i<j){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    // Create a set to store the elements\n    set<int> s;\n    for(int i=0; i<l.size(); i++){\n        // If the set contains the negative of the current element, return true\n        if(s.find(-l[i]) != s.end()){\n            return true;\n        }\n        // Otherwise, add the current element to the set\n        s.insert(l[i]);\n    }\n    // If we've gone through the entire list without finding a pair that sums to zero, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x>0){\n        result = to_string(x%base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 2;\n    else if(n==2)\n        return 0;\n    else if(n==3)\n        return 2;\n    else{\n        int a=0, b=2, c=0, d=2;\n        for(int i=4; i<=n; i++){\n            int e=a+b+c+d;\n            a=b;\n            b=c;\n            c=d;\n            d=e;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 != 0)\n        return (float)l[n/2];\n    else\n        return (float)(l[(n-1)/2] + l[n/2])/2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i = 0;\n    int j = text.length() - 1;\n    while(i < j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else\n        return (((n%p) * modp(n/p,p))%p);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            encoded_string += ' ';\n        }\n        else if(s[i] >= 'a' && s[i] <= 'z'){\n            encoded_string += char(int(s[i]) + 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            encoded_string += char(int(s[i]) + 3);\n        }\n    }\n    return encoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0) return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n<2) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++){\n        if(l[i] < l[i-1]) increasing = false;\n        if(l[i] > l[i-1]) decreasing = false;\n        if(!increasing && !decreasing) return false;\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while(n % 2 == 0){\n        max_prime = 2;\n        n /= 2;\n    }\n    for(int i = 3; i * i <= n; i += 2){\n        while(n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        max_prime = n;\n    }\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    for(int i=1; i<xs.size(); i++){\n        xs[i-1] = xs[i]*i;\n    }\n    xs.pop_back();\n    return xs;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        int a=0, b=0, c=1, d;\n        for(int i=3; i<=n; i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || (s[i]=='y' && i==s.length()-1)){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    int n = str.size();\n    shift = shift % n;\n    str = str.substr(shift) + str.substr(0, shift);\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0, mango = 0;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n    mango = n - (apples + oranges);\n    return mango;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> res;\n    int min_val = INT_MAX;\n    int min_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]%2 == 0 && arr[i]<=min_val){\n            min_val = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index != -1)\n        res.push_back(min_val);\n        res.push_back(min_index);\n    return res;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int n = lst.size();\n    for(int i=n-1; i>=0; i--){\n        int count = 0;\n        for(int j=0; j<n; j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count > lst[i]){\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            result.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a + b > c && a + c > b && b + c > a){\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count = 0;\n    int n = arr.size();\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0, sum2=0;\n    for(int i=0; i<lst1.size(); i++)\n        sum1 += lst1[i].size();\n    for(int i=0; i<lst2.size(); i++)\n        sum2 += lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else if(sum1>sum2)\n        return lst2;\n    else{\n        for(int i=0; i<lst1.size(); i++)\n            if(lst1[i].size()<lst2[i].size())\n                return lst1;\n            else if(lst1[i].size()>lst2[i].size())\n                return lst2;\n            else{\n                if(lst1[i]<lst2[i])\n                    return lst1;\n                else\n                    return lst2;\n            }\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    if(a<100){\n        return false;\n    }\n    int i;\n    for(i=2; i<=a/2; i++){\n        if(a%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    if(n==1)\n        return false;\n    if(x<1)\n        return false;\n    int p=log(x)/log(n);\n    if(floor(p)==p)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = sqrt(a);\n    if(cubeRoot*cubeRoot*cubeRoot == a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i]=='2' || num[i]=='3' || num[i]=='5' || num[i]=='7')\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() != 3)\n        return false;\n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i] == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i] > 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grades[i] > 3.3 && grades[i] <= 3.7)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i] > 2.7 && grades[i] <= 3.3)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i] > 2.0 && grades[i] <= 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grades[i] > 1.7 && grades[i] <= 2.0)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i] > 1.0 && grades[i] <= 1.7)\n            letter_grades.push_back(\"C+\");\n        else if(grades[i] > 0.0 && grades[i] <= 1.0)\n            letter_grades.push_back(\"C\");\n        else if(grades[i] > 0.0 && grades[i] <= 0.7)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if(length < 2)\n        return false;\n    for(int i = 2; i * i <= length; i++)\n        if(length % i == 0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 10;\n    else\n        return 9*pow(10,n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N>0){\n        sum += N%2;\n        N /= 2;\n    }\n    return to_string(sum);\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word;\n            result += \" \";\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    for(int i=0; i<res.size(); i++){\n        for(int j=0; j<res[i].size(); j++){\n            if(j%2 != 0){\n                swap(res[i][j], res[i][j+1]);\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum = 0;\n    for(int i = 0; i < array.size(); i++){\n        sum += array[i];\n    }\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end());\n    }\n    else{\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = s[i] + 2;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2){\n        return NULL;\n    }\n    sort(lst.begin(), lst.end());\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i]>lst[0]){\n            return lst[i];\n        }\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!' ){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(isalpha(message[i])){\n            if(tolower(message[i])=='a') message[i]='c';\n            else if(tolower(message[i])=='e') message[i]='g';\n            else if(tolower(message[i])=='i') message[i]='k';\n            else if(tolower(message[i])=='o') message[i]='q';\n            else if(tolower(message[i])=='u') message[i]='w';\n            else message[i]=tolower(message[i])+1;\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_prime = -1;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>1){\n            int flag = 0;\n            for(int j=2; j*j<=lst[i]; j++){\n                if(lst[i]%j==0){\n                    flag = 1;\n                    break;\n                }\n            }\n            if(flag==0){\n                max_prime = max(max_prime, lst[i]);\n            }\n        }\n    }\n    int sum = 0;\n    while(max_prime>0){\n        sum += max_prime%10;\n        max_prime /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n\n    bool is_lower = true, is_upper = true;\n\n    for(auto i = dict.begin(); i != dict.end(); i++){\n        string key = i->first;\n        if(!islower(key[0]))\n            is_lower = false;\n        if(!isupper(key[0]))\n            is_upper = false;\n    }\n\n    return is_lower || is_upper;\n}\n\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool isPrime = true;\n        for(int j = 2; j * j <= i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = a % 10;\n    int unit_digit_b = b % 10;\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    if(num>=0){\n        return (int)ceil(num);\n    }\n    else{\n        return (int)floor(num);\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0){\n            result.push_back(n+2);\n        }\n        else{\n            result.push_back(n+1);\n        }\n        n++;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ',' && s[i] != ' '){\n            word += s[i];\n        }\n        else{\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    for(int i=y;i>=x;i-=2){\n        if(i%2==0)\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m)\n        return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++)\n        sum+=i;\n    double avg=(double)sum/((m-n)+1);\n    int rounded_avg=round(avg);\n    string binary=\"0b\";\n    for(int i=31;i>=0;i--){\n        int k=rounded_avg>>i;\n        if(k&1)\n            binary+='1';\n        else\n            binary+='0';\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num%2 != 0){\n            num = num/2;\n        }\n        if(num == x[i]/2*2){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    vector<int> one_to_nine = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    vector<int> one_to_nineteen = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19};\n    vector<int> twenty_to_ninety = {20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            if(arr[i]"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        if(i%2==0)\n            result.push_back(factorial(i));\n        else\n            result.push_back(sum(i));\n    }\n    return result;\n}\n\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\n\nint sum(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++)\n        sum += i;\n    return sum;\n}\n\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i=1; i<=n; i++){\n        string str = to_string(i);\n        string rev = str;\n        reverse(rev.begin(), rev.end());\n        if(str == rev) {\n            if(i%2 == 0)\n                even_count++;\n            else\n                odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] < 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.empty())\n        return true;\n    int n=arr.size();\n    for(int i=0;i<n;i++){\n        if(i<n-1 && arr[i]>arr[i+1])\n            continue;\n        if(i>0 && arr[i]<arr[i-1])\n            continue;\n        int j=i;\n        while(j<n-1 && arr[j]>arr[j+1])\n            j++;\n        if(j-i+1>1)\n            return false;\n        if(j-i+1==1 && arr[j]<arr[0])\n            return false;\n        int k=j;\n        while(k<n-1 && arr[k]<arr[k+1])\n            k++;\n        if(k-j+1>1)\n            return false;\n        if(k-j+1==1 && arr[k]>arr[n-1])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count = 0;\n    for(int i=0; i<lst1.size(); i++){\n        if(lst1[i]%2 != 0){\n            count++;\n        }\n    }\n    for(int i=0; i<lst2.size(); i++){\n        if(lst2[i]%2 == 0){\n            count++;\n        }\n    }\n    if(count == 0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0; i<test.length(); i++){\n        if(result.find(test[i])==result.end()){\n            result[test[i]] = 1;\n        }\n        else{\n            result[test[i]] += 1;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==c[0]){\n            continue;\n        }\n        res+=s[i];\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    if(res==rev){\n        return {res,\"True\"};\n    }\n    else{\n        return {res,\"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] - '0' % 2 != 0)\n                count++;\n        }\n        char buffer[256];\n        sprintf(buffer, \"the number odd elements in the string %d of the input.\", count);\n        result.push_back(buffer);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long cur_sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        cur_sum = min(cur_sum + nums[i], nums[i]);\n        min_sum = min(min_sum, cur_sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count = 0;\n    while(1){\n        int filled = 0;\n        for(int i=0;i<grid.size();i++){\n            int j=0;\n            while(j<grid[i].size()){\n                if(grid[i][j]==1){\n                    filled++;\n                }\n                j++;\n            }\n        }\n        if(filled<=0) break;\n        count++;\n        for(int i=0;i<grid.size();i++){\n            int j=0;\n            while(j<grid[i].size()){\n                if(grid[i][j]==1){\n                    grid[i][j]=0;\n                }\n                j++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    // Your code here\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_ones_a = count_ones(a);\n        int count_ones_b = count_ones(b);\n        if (count_ones_a == count_ones_b)\n            return a < b;\n        return count_ones_a < count_ones_b;\n    });\n    return arr;\n}\nint count_ones(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    int consonants = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            if(word.length() == n){\n                consonants = 0;\n                for(int j=0; j<word.length(); j++){\n                    if(word[j] >= 'a' && word[j] <= 'z'){\n                        consonants++;\n                    }\n                }\n                if(consonants == n){\n                    result.push_back(word);\n                }\n            }\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word.length() == n){\n                consonants = 0;\n                for(int j=0; j<word.length(); j++){\n                    if(word[j] >= 'a' && word[j] <= 'z'){\n                        consonants++;\n                    }\n                }\n                if(consonants == n){\n                    result.push_back(word);\n                }\n            }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=word.length()-1; i>=2; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos && vowels.find(word[i-2]) == string::npos){\n            return word.substr(i,1);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s = lst[0] + lst[1];\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '(') count++;\n        else if(s[i] == ')') count--;\n        if(count < 0) return \"No\";\n    }\n    if(count == 0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(), arr.end());\n    vector<int> res;\n    for(int i=0; i<k; i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0){\n            collatz.push_back(n);\n        }\n        n = n % 2 ? 3*n + 1 : n/2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    // your code here\n}\n\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> result;\n    size_t start = 0, end = txt.find(' ');\n    while(start < txt.size()){\n        if(end == string::npos){\n            result.push_back(txt.substr(start));\n            break;\n        }\n        else{\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n            end = txt.find(' ', start);\n        }\n    }\n    return result;\n}\n\nint count_odd_lowercase_letters(string txt){\n    int count = 0;\n    for(char c : txt){\n        if(islower(c) && isalpha(c) && (c - 'a') % 2 == 1){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size()==0)\n        return true;\n    int count=0;\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]==lst[i+1])\n            count++;\n        if(count>1)\n            return false;\n    }\n    sort(lst.begin(), lst.end());\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]==lst[i+1])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    else if(start == end)\n        return \"YES\";\n    else\n        return \"NO\";\n}\nbool isPrime(int n) {\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int product=1;\n    int sum=0;\n    for(int i=0;i<arr.size();i++){\n        product*=arr[i];\n        sum+=abs(arr[i]);\n    }\n    return product*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n, vector<int>(m, -1));\n    vector<int> dir = {0, 1, 0, -1, 0};\n    function<int(int, int, int)> dfs = [&](int x, int y, int k) -> int {\n        if(k == 0) return grid[x][y];\n        if(dp[x][y] != -1) return dp[x][y];\n        dp[x][y] = -2;\n        for(int i = 0; i < 4; i++) {\n            int nx = x + dir[i], ny = y + dir[i+1];\n            if(nx >= 0 && nx < n && ny >= 0 && ny < m) {\n                dp[x][y] = max(dp[x][y], dfs(nx, ny, k-1));\n            }\n        }\n        return dp[x][y];\n    };\n    int ans = -1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            ans = max(ans, dfs(i, j, k-1));\n        }\n    }\n    vector<int> res;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(dp[i][j] == ans) {\n                res.push_back(grid[i][j]);\n                ans -= 1;\n                break;\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result(n+1);\n    result[0] = 1;\n    if(n>0){\n        result[1] = 3;\n        if(n>1){\n            result[2] = 2;\n            for(int i=3; i<=n; i++){\n                if(i%2==0)\n                    result[i] = result[i-1] + result[i-2] + result[i-3];\n                else\n                    result[i] = result[i-1] - result[i-2] + result[i-3];\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n>0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '[') count++;\n        else if(str[i] == ']') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]*lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    char last_char = txt[txt.length()-1];\n    if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z'))\n        return true;\n    else if(last_char == ' ')\n        return false;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    for(int i = arr.size()-1; i > 0; i--){\n        if(arr[i] > arr[i-1])\n            return i-1;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = -1000000000;\n    int min_pos = 1000000000;\n    int max_neg_lst, min_pos_lst;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>max_neg){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && lst[i]<min_pos){\n            min_pos = lst[i];\n        }\n    }\n    if(max_neg != -1000000000){\n        max_neg_lst = max_neg;\n    }else{\n        max_neg_lst = NULL;\n    }\n    if(min_pos != 1000000000){\n        min_pos_lst = min_pos;\n    }else{\n        min_pos_lst = NULL;\n    }\n    return {max_neg_lst, min_pos_lst};\n}\n\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return boost::any();\n    }\n    if(a.type() == typeid(int) || a.type() == typeid(float)){\n        if(a.type() == typeid(int)){\n            int a1 = boost::any_cast<int>(a);\n            int b1 = boost::any_cast<int>(b);\n            if(a1 > b1) return a;\n            else if(a1 < b1) return b;\n            else return boost::any();\n        }\n        else{\n            float a1 = boost::any_cast<float>(a);\n            float b1 = boost::any_cast<float>(b);\n            if(a1 > b1) return a;\n            else if(a1 < b1) return b;\n            else return boost::any();\n        }\n    }\n    else if(a.type() == typeid(string)){\n        string a1 = boost::any_cast<string>(a);\n        string b1 = boost::any_cast<string>(b);\n        if(a1 > b1) return a;\n        else if(a1 < b1) return b;\n        else return boost::any();\n    }\n    return boost::any();\n}\n\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2 != 0)\n        return false;\n    int count = 0;\n    for(int i=2; i<=n; i+=2){\n        if(n%i == 0)\n            count++;\n    }\n    if(count == 4)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i--;\n        }\n        else if(text[i] == ' ' && text[i+1] == ' ' && text[i+2] == ' '){\n            for(int j=i; j<text.length(); j++){\n                if(text[j] != ' ')\n                    text[i] = text[j];\n                else\n                    break;\n            }\n            text.erase(i+1, 1);\n            i--;\n        }\n    }\n    return text;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]=='.'){\n            count++;\n        }\n    }\n    if(count==1 && count<=3 && file_name[0]>='a' && file_name[0]<='z' && file_name[0]>='A' && file_name[0]<='Z'){\n        for(int i=file_name.length()-1;i>=0;i--){\n            if(file_name[i]=='.'){\n                if(file_name.substr(0,i).length()<=3 && file_name.substr(0,i).find_first_not_of(\"a-zA-Z\")==string::npos){\n                    return \"Yes\";\n                }\n            }\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0)\n            sum += lst[i]*lst[i];\n        else if(i%4 == 0)\n            sum += lst[i]*lst[i]*lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            count++;\n        }\n    }\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' ' || i == sentence.length()-1){\n            if(is_prime(count)){\n                result += sentence[i];\n            }\n            if(i == sentence.length()-1)\n                break;\n            count = 0;\n        }\n        else{\n            count++;\n        }\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n <= 1)\n        return false;\n    for(int i=2; i*i<=n; i++){\n        if(n%i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    // Your code here\n}\n"}
{"task_id": "CPP/145", "generation": "\n    for(int i=0; i<nums.size(); i++){\n        int sum = 0;\n        int temp = nums[i];\n        while(temp){\n            sum += abs(temp%10);\n            temp /= 10;\n        }\n        nums[i] = sum;\n    }\n    sort(nums.begin(), nums.end());\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        int num = abs(nums[i]);\n        string str = to_string(num);\n        if(str[0] == '1' || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9'){\n            if(num > 10 && (num % 10) > 10){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if(a[i] + a[j] + a[k] % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    string temp;\n    int pos1, pos2;\n    for(int i=0; i<8; i++){\n        if(planets[i] == planet1){\n            pos1 = i;\n        }\n        if(planets[i] == planet2){\n            pos2 = i;\n        }\n    }\n    if(pos1 > pos2){\n        temp = planet1;\n        planet1 = planet2;\n        planet2 = temp;\n    }\n    for(int i=pos1+1; i<pos2; i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].size()%2 != 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1;\n    string strongest_extension = \"\";\n    for(int i=0;i<extensions.size();i++){\n        int CAP = 0, SM = 0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(isupper(extensions[i][j])){\n                CAP++;\n            }\n            if(islower(extensions[i][j])){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    if(n==m){\n        return (a==b);\n    }\n    else{\n        for(int i=0;i<m;i++){\n            char c=b[i];\n            string temp=b.substr(i,m-i)+b.substr(0,i);\n            if(a.find(temp)!=string::npos){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    while(num){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    string result = \"\";\n\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(int i=0; i<words.size(); i++){\n        int unique_count = 0;\n        vector<char> chars(256, -1);\n        for(int j=0; j<words[i].length(); j++){\n            if(chars[words[i][j]] == -1){\n                unique_count++;\n                chars[words[i][j]] = 0;\n            }\n        }\n        if(unique_count > max_unique){\n            max_unique = unique_count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(need>remaining){\n        number+=remaining;\n        remaining=0;\n    }\n    else{\n        number+=need;\n        remaining-=need;\n    }\n    return {number,remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\"){\n            operand[i]=operand[i]+operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            operand[i]=operand[i]-operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            operand[i]=operand[i]*operand[i+1];\n        }\n        else if(operato[i]==\"/\"){\n            operand[i]=floor(operand[i]/operand[i+1]);\n        }\n    }\n    return operand[0];\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>='A' && s[i]<='Z'){\n            s[i] = s[i] + 32;\n        }\n        else if(s[i]>='a' && s[i]<='z'){\n            s[i] = s[i] - 32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty())\n        return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    sprintf(mdString, \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\",\n            digest[0], digest[1], digest[2], digest[3],\n            digest[4], digest[5], digest[6], digest[7],\n            digest[8], digest[9], digest[10], digest[11],\n            digest[12], digest[13], digest[14], digest[15]);\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
