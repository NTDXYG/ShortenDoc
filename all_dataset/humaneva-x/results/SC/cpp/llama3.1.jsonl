{"task_id": "CPP/0", "generation": "\n    for (int i = 0; i < numbers.size(); i++){\n        for (int j = i + 1; j < numbers.size(); j++){\n            if (abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> groups;\n    string current_group = \"\";\n    int open_count = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_count++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_count--;\n            current_group += paren_string[i];\n            if(open_count == 0){\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n        else{\n            current_group += paren_string[i];\n        }\n    }\n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        if(operations[i] == True){\n            continue;\n        }\n        balance += operations[i];\n        if(balance < 0){\n            return True;\n        }\n    }\n    return False;\n}  // returns True if at any point the balance falls below zero, False otherwise\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        } else if (paren_string[i] == ')'){\n            current_depth--;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for (int i = 0; i < strings.size(); i++){\n        if (strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> maxs;\n    int max = numbers[0];\n    maxs.push_back(max);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        maxs.push_back(max);\n    }\n    return maxs;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    def make_palindrome(s):\n        def is_palindrome(s):\n            return s == s[::-1]\n\n        def longest_palindrome(s):\n            for i in range(len(s), 0, -1):\n                for j in range(len(s) - i + 1):\n                    if is_palindrome(s[j:j+i]):\n                        return s[j:j+i]\n            return ''\n\n        palindromic_suffix = longest_palindrome(s)\n        prefix = s[:len(s) - len(palindromic_suffix)]\n        return palindromic_suffix + prefix[::-1]\n\n# Test the function\nprint(make_palindrome(''))  # Output: ''\nprint(make_palindrome('cat'))  # Output: 'catac'\nprint(make_palindrome('catacatac'))  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac'  # Output: 'catacatac"}
{"task_id": "CPP/11", "generation": "\n    string result;\n    for(int i=0;i<a.size();i++){\n        if(a[i]=='1' && b[i]=='1') result+='0';\n        else if(a[i]=='0' && b[i]=='0') result+='0';\n        else result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size() == 0){\n        return \"\";\n    }\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n} */\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string longest(const std::vector<std::string>& strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    return *std::max_element(strings.begin(), strings.end(),\n        [](const std::string& a, const std::string& b) {\n            return a.length() < b.length();\n        });\n}\n\n"}
{"task_id": "CPP/13", "generation": "\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        string prefix = str.substr(0,i+1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s;\n    for(int i=0;i<=n;i++){\n        s+=to_string(i)+\" \";\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        char c=str[i];\n        if(isalpha(c)){\n            c=toupper(c);\n            if(find(v.begin(),v.end(),c)==v.end()){\n                v.push_back(c);\n            }\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    for(int i = 0; i < music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n        }else if(music_string[i] == '|'){\n            if(music_string[i-1] == 'o'){\n                result.push_back(2);\n            }else if(music_string[i-1] == '.'){\n                result.push_back(1);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int len=str.length();\n    int len2=substring.length();\n    for(int i=0;i<len;i++){\n        if(str.substr(i,len2)==substring){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_dict;\n    string temp;\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            num_dict[temp] = i;\n            temp = \"\";\n        }\n        else{\n            temp += numbers[i];\n        }\n    }\n    num_dict[temp] = numbers.length();\n    string sorted_numbers;\n    for(int i = 0; i < 10; i++){\n        string num = to_string(i);\n        if(num_dict[num] != 0){\n            sorted_numbers += num + \" \";\n            num_dict.erase(num);\n        }\n    }\n    return sorted_numbers;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    float num1, num2;\n    for(int i = 0; i < numbers.size()-1; i++){\n        for(int j = i+1; j < numbers.size(); j++){\n            float diff = abs(numbers[i]-numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                num1 = numbers[i];\n                num2 = numbers[j];\n            }\n        }\n    }\n    vector<float> result;\n    result.push_back(num1);\n    result.push_back(num2);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / (numbers[numbers.size() - 1] - min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for (auto value : values){\n        if (boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    int i = 2;\n    while(i*i <= n){\n        int count = 0;\n        while(n % i == 0){\n            n /= i;\n            count++;\n        }\n        if(count > 0){\n            factors.push_back(i);\n            for(int j = 0; j < count; j++){\n                factors.push_back(i);\n            }\n        }\n        i++;\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for (int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for (int i = 0; i < strings.size(); i++){\n        if (strings[i].find(prefix) == 0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    for(long long i=2;i*i<=n;i++)\n        if(n%i==0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        res = res * x + xs[i];\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double a = xs[0];\n    double b = xs[1];\n    double c = xs[2];\n    double d = xs[3];\n    double e = xs[4];\n    double f = xs[5];\n    double g = xs[6];\n    double h = xs[7];\n    double i = xs[8];\n    double j = xs[9];\n    double k = xs[10];\n    double l = xs[11];\n    double m = xs[12];\n    double n = xs[13];\n    double o = xs[14];\n    double p = xs[15];\n    double q = xs[16];\n    double r = xs[17];\n    double s = xs[18];\n    double t = xs[19];\n    double u = xs[20];\n    double v = xs[21];\n    double w = xs[22];\n    double x = xs[23];\n    double y = xs[24];\n    double z = xs[25];\n    double aa = xs[26];\n    double bb = xs[27];\n    double cc = xs[28];\n    double dd = xs[29];\n    double ee = xs[30];\n    double ff = xs[31];\n    double gg = xs[32];\n    double hh = xs[33];\n    double ii = xs[34];\n    double jj = xs[35];\n    double kk = xs[36];\n    double ll = xs[37];\n    double mm = xs[38];\n    double nn = xs[39];\n    double oo = xs[40];\n    double pp = xs[41];\n    double qq = xs[42];\n    double rr = xs[43];\n    double ss = xs[44];\n    double tt = xs[45];\n    double uu = xs[46];\n    double vv = xs[47];\n    double ww = xs[48];\n    double xx = xs[49];\n    double yy = xs[50];\n    double zz = xs[51];\n    double aaa = xs[52];\n    double bbb = xs[53];\n    double ccc = xs[54];\n    double ddd = xs[55];\n    double eee = xs[56];\n    double fff"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l2;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0){\n            l2.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n            sort(l2.begin()+i, l2.begin()+i+1);\n        }\n    }\n    return l2;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> result;\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i] != l[i-1]){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l2;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0){\n            l2.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(), l2.end());\n    return l2;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decode_cyclic(encoded) {\n    let decoded = \"\";\n    for (let i = 0; i < encoded.length; i++) {\n        let charCode = encoded.charCodeAt(i);\n        let decodedCharCode = charCode - 3;\n        if (decodedCharCode < 97) {\n            decodedCharCode = 122 - (97 - decodedCharCode);\n        }\n        decoded += String.fromCharCode(decodedCharCode);\n    }\n    return decoded;\n}\n\n// Example usage:\nlet encoded = encode_cyclic(\"hello\");\nconsole.log(encoded); // Output: \"khoor\"\nlet decoded = decode_cyclic(encoded);\nconsole.log(decoded); // Output: \"hello\" */</script>\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=1;\n    int i=1;\n    while(i<n){\n        a=b;\n        b=c;\n        c=a+b;\n        i++;\n    }\n    if(c%2==0){\n        return c+1;\n    }\n    else{\n        return c;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            for(int k = j + 1; k < l.size(); k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision = 0;\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n            if(i != j && (i + j) % (n + 1) == 0){\n                collision++;\n            }\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    vector<int> s;\n    for(int i=0;i<l.size();i++){\n        if(s.size()==0){\n            s.push_back(l[i]);\n        }\n        else{\n            int sum=0;\n            for(int j=0;j<s.size();j++){\n                sum=s[j]+l[i];\n                if(sum==0){\n                    return true;\n                }\n            }\n            s.push_back(l[i]);\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string s;\n    while(x>0){\n        s=to_string(x%base)+s;\n        x/=base;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n<=1) return n;\n    int a=0,b=2,c;\n    for(int i=2;i<=n;i++){\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i = 0;\n    int j = text.length() - 1;\n    while (i < j){\n        if (text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    while(n){\n        if(n&1) res=(res*p)%p;\n        n>>=1;\n        p=(p*p)%p;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i])){\n                decoded_string += char(((s[i] - 'A' + 3) % 26) + 'A');\n            }\n            else{\n                decoded_string += char(((s[i] - 'a' + 3) % 26) + 'a');\n            }\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++){\n        if(vowels.find(text[i]) == string::npos){\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size() - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> l3;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]==l2[j]){\n            l3.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    sort(l3.begin(),l3.end());\n    l3.erase(unique(l3.begin(),l3.end()),l3.end());\n    return l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i*i<=n;i++){\n        if(n%i==0){\n            n/=i;\n            i--;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '('){\n            count++;\n        }else if(brackets[i] == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    if(xs.size() == 1){\n        result.push_back(0);\n    }else{\n        for(int i = 1; i < xs.size(); i++){\n            result.push_back(i*xs[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else\n        return fibfib(n-1)+fibfib(n-2);\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.size();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\n            if(i==s.size()-1&&s[i]=='y'){\n                continue;\n            }\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    shift=shift%s.length();\n    string s1=s.substr(0,shift);\n    string s2=s.substr(shift,s.length()-shift);\n    return s2+s1;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isupper(s[i])){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i<s.length()){\n        if(s[i]=='0'){\n            j = i;\n            break;\n        }\n        i++;\n    }\n    while(j<s.length()){\n        if(s[j]==' '){\n            k = j;\n            break;\n        }\n        j++;\n    }\n    while(k<s.length()){\n        if(s[k]==' '){\n            count++;\n            k = k+1;\n        }\n        else{\n            k++;\n        }\n    }\n    return n-count;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min = 1000000;\n    int min_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index == -1){\n        return {};\n    }\n    return {min, min_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max && lst.count(lst[i]) >= lst[i]){\n            max = lst[i];\n        }\n    }\n    if(max == 0){\n        return -1;\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> res;\n    int i = 0, j = lst.size() - 1;\n    while(i <= j){\n        res.push_back(lst[i]);\n        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    // Check if the list is a palindrome\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-1-i]){\n            return false;\n        }\n    }\n    // Check if the sum of the list is less than the maximum possible weight\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    if(a<100){\n        return false;\n    }\n    int i=2;\n    while(i*i<=a){\n        if(a%i==0){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    double y=pow(n,log(x)/log(n));\n    if(y==int(y)) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = round(pow(a, 1.0/3));\n    return pow(b, 3) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary;\n    while(decimal>0){\n        binary=to_string(decimal%2)+binary;\n        decimal/=2;\n    }\n    string result=\"db\";\n    for(int i=0;i<binary.length();i++){\n        result+=binary[i];\n        result+=\"db\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<=3) return true;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] == 4.0){\n            letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i] > 1.7){\n            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i] > 1.3){\n            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i] > 0.7){\n            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i] > 0.0){\n            letter_grades.push_back(\"D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= length / 2; i++)\n        if (length % i == 0) return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1){\n        return 1;\n    }\n    else{\n        return 9*starts_one_ends(n-1)+starts_one_ends(n-2);\n    }\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N>0){\n        binary = to_string(N%2) + binary;\n        N = N/2;\n    }\n    int sum = 0;\n    for(int i = 0; i < binary.length(); i++){\n        sum += binary[i] - '0';\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            s.insert(i,' ');\n            i++;\n        }\n        else word+=s[i];\n    }\n    sort(word.begin(),word.end());\n    s.replace(s.find(word),word.length(),word);\n    return s;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    for(int i = 0; i < res.size(); i++){\n        sort(res[i].begin(), res[i].end(), greater<int>());\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    int sum = array[0] + array[array.size() - 1];\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end());\n    }else{\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += (char)(s[i] + 2 * 2);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += (char)(s[i] + 2 * 2);\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size() < 2) return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] != lst[i-1]) return lst[i];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string word = \"\";\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(word != \"\"){\n                word = \"\";\n            }\n            count++;\n        }\n        else{\n            word += S[i];\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if (a==b+c || b==a+c || c==a+b && a==floor(a) && b==floor(b) && c==floor(c))\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(vowels.find(message[i]) != string::npos){\n            int index = vowels.find(message[i]);\n            result += vowels[index+2];\n        } else {\n            result += toupper(message[i]) == message[i] ? tolower(message[i]) : toupper(message[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    int sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first[0] != toupper(it->first[0])) return false;\n        for(int i=1;i<it->first.length();i++){\n            if(it->first[i] != toupper(it->first[i])) return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool is_prime = true;\n        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a=a%10;\n    int unit_digit_b=b%10;\n    int unit_digit_product=unit_digit_a*unit_digit_b;\n    return unit_digit_product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(i % 2 == 0 && isupper(s[i]) && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int integer = round(num);\n    if (num - integer == 0.5){\n        if (num > 0){\n            return integer + 1;\n        }\n        else{\n            return integer - 1;\n        }\n    }\n    else{\n        return integer;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> ans;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            ans.push_back(i+1);\n        }\n        else{\n            ans.push_back(i-1);\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','||s[i]==' '){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x%2==0 && x<=y){\n        return x;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    double avg=(double)sum/(m-n+1);\n    int avg1=(int)round(avg);\n    string s=bitset<32>(avg1).to_string();\n    int i=0;\n    while(s[i]=='0') i++;\n    return s.substr(i);\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        bool flag=true;\n        while(temp>0){\n            if(temp%10%2==0){\n                flag=false;\n                break;\n            }\n            temp/=10;\n        }\n        if(flag){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            string s = m[arr[i]];\n            if(s.size() > 1){\n                for(int j = 0; j < s.size(); j++){\n                    res.push_back(s[j]);\n                }\n            }else{\n                res.push_back(s);\n            }\n        }\n    }\n    return res;\n}\nvector<string> sortAndReplace(vector<int> arr){\n    vector<int> temp;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            temp.push_back(arr[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    reverse(temp.begin(), temp.end());\n    return by_length(temp);\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res(n);\n    for(int i = 0; i < n; i++){\n        if(i % 2 == 0){\n            int fact = 1;\n            for(int j = 1; j <= i; j++){\n                fact *= j;\n            }\n            res[i] = fact;\n        }else{\n            int sum = 0;\n            for(int j = i; j > 0; j--){\n                sum += j;\n            }\n            res[i] = sum;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2,0);\n    for(int i=1;i<=n;i++){\n        string str = to_string(i);\n        string rev = str;\n        reverse(rev.begin(),rev.end());\n        if(str == rev){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int num = abs(n[i]);\n        int sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}  // O(n) time complexity\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            for(int j=0;j<lst2.size();j++){\n                if(lst2[j]%2==0){\n                    lst1[i]=lst2[j];\n                    lst2[j]=lst1[i];\n                    break;\n                }\n            }\n        }\n    }\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0;i<test.length();i++){\n        if(result.find(test[i])!=result.end()){\n            result[test[i]]++;\n        }\n        else{\n            result[test[i]]=1;\n        }\n    }\n    int max=0;\n    for(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n        if(it->second>max){\n            max=it->second;\n        }\n    }\n    map<char,int> result2;\n    for(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n        if(it->second==max){\n            result2[it->first]=it->second;\n        }\n    }\n    return result2;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> result;\n    string temp;\n    for(int i=0;i<s.size();i++){\n        bool flag=false;\n        for(int j=0;j<c.size();j++){\n            if(s[i]==c[j]){\n                flag=true;\n                break;\n            }\n        }\n        if(!flag){\n            temp+=s[i];\n        }\n    }\n    string reversed=temp;\n    reverse(reversed.begin(),reversed.end());\n    result.push_back(temp);\n    result.push_back(reversed);\n    return result;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> res;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]-'0'%2==1){\n                count++;\n            }\n        }\n        string s=\"the number \";\n        s+=to_string(count);\n        s+=\"n the string \";\n        s+=to_string(i+1);\n        s+=\" of the input.\";\n        res.push_back(s);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = 1000000000;\n    long long sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill = 0;\n    for(int i = 0; i < grid.size(); i++){\n        int fill = 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            fill += grid[i][j];\n        }\n        max_fill = max(max_fill,fill);\n    }\n    return max_fill;\n}\nint min_buckets(vector<vector<int>> grid,int capacity){\n    int max_fill = max_fill(grid,capacity);\n    return max_fill/capacity + (max_fill%capacity != 0);\n}\n"}
{"task_id": "CPP/116", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            int a = arr[i];\n            int b = arr[j];\n            int count_a = 0;\n            int count_b = 0;\n            while(a > 0){\n                if(a % 2 == 1){\n                    count_a++;\n                }\n                a = a / 2;\n            }\n            while(b > 0){\n                if(b % 2 == 1){\n                    count_b++;\n                }\n                b = b / 2;\n            }\n            if(count_a > count_b){\n                swap(arr[i], arr[j]);\n            }\n            else if(count_a == count_b){\n                if(arr[i] > arr[j]){\n                    swap(arr[i], arr[j]);\n                }\n            }\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n        }\n        else{\n            if(word.length()>0){\n                int count=0;\n                for(int j=0;j<word.length();j++){\n                    if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                        count++;\n                    }\n                }\n                if(count==n){\n                    result.push_back(word);\n                }\n                word=\"\";\n            }\n        }\n    }\n    if(word.length()>0){\n        int count=0;\n        for(int j=0;j<word.length();j++){\n            if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                count++;\n            }\n        }\n        if(count==n){\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiou\";\n    int n = word.size();\n    for(int i = n-1; i >= 0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(i == n-1 || (i != n-1 && vowels.find(word[i+1]) == string::npos)){\n                return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    int close = 0;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == '('){\n                open++;\n            }else{\n                close++;\n            }\n        }\n    }\n    if(open == close){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> result(arr.begin(),arr.begin()+k);\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 != 0 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> odd_collatz;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n        }\n        else{\n            n=3*n+1;\n        }\n        if(n%2!=0){\n            odd_collatz.push_back(n);\n        }\n    }\n    odd_collatz.push_back(1);\n    sort(odd_collatz.begin(),odd_collatz.end());\n    return odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    if(date.length() == 10){\n        month = (date[0] - '0') * 10 + (date[1] - '0');\n        day = (date[3] - '0') * 10 + (date[4] - '0');\n        year = (date[6] - '0') * 1000 + (date[7] - '0') * 100 + (date[8] - '0') * 10 + (date[9] - '0');\n    }\n    else if(date.length() == 5){\n        month = (date[0] - '0') * 10 + (date[1] - '0');\n        day = (date[2] - '0') * 10 + (date[3] - '0');\n        year = (date[4] - '0');\n    }\n    else{\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<txt.length();i++){\n        if(txt[i]==' '){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }else if(txt[i]==','){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }else{\n            word+=txt[i];\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    vector<int> odd;\n    for(int i=0;i<words.size();i++){\n        for(int j=0;j<words[i].length();j++){\n            if(islower(words[i][j])){\n                odd.push_back(ord(words[i][j])-ord('a'));\n            }\n        }\n    }\n    sort(odd.begin(),odd.end());\n    int count=0;\n    for(int i=0;i<odd.size();i++){\n        if(odd[i]%2==1){\n            count++;\n        }\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n        if(lst[i] == lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end){\n        return \"NO\";\n    }\n    int length = end-start+1;\n    int count = 0;\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0){\n            count++;\n        }\n    }\n    if(count==0){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size() == 0) return 0;\n    int sign = 1;\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] == 0) return 0;\n        if(arr[i] < 0) sign *= -1;\n        sum += abs(arr[i]);\n    }\n    return sign * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, 1e9));\n    vector<vector<int>> visited(n, vector<int>(n, 0));\n    vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    vector<int> ans;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(visited[i][j] == 0){\n                vector<int> path;\n                int curr = 0;\n                dfs(grid, i, j, k, visited, directions, dp, path, curr);\n                if(curr < dp[i][j]){\n                    dp[i][j] = curr;\n                    ans = path;\n                }\n            }\n        }\n    }\n    return ans;\n}\nvoid dfs(vector<vector<int>> grid, int i, int j, int k, vector<vector<int>> &visited, vector<vector<int>> &directions, vector<vector<int>> &dp, vector<int> &path, int &curr){\n    if(k == 0){\n        return;\n    }\n    visited[i][j] = 1;\n    path.push_back(grid[i][j]);\n    curr = min(curr, grid[i][j]);\n    for(auto &dir : directions){\n        int x = i + dir[0];\n        int y = j + dir[1];\n        if(x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size() && visited[x][y] == 0){\n            dfs(grid, x, y, k - 1, visited, directions, dp, path, curr);\n        }\n    }\n    visited[i][j] = 0;\n    path.pop_back();\n} \n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    res.push_back(3);\n    res.push_back(1);\n    res.push_back(2);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            res.push_back(res[i-1] + res[i-2]);\n        }else{\n            res.push_back(res[i-1] + res[i-2] + res[i-3]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n>0){\n        int digit = n%10;\n        if(digit%2!=0){\n            product *= digit;\n        }\n        n = n/10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += (int)lst[i] * (int)lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0) return false;\n    if(isalpha(txt[txt.length()-1]) && txt[txt.length()-1] != ' ') return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max = -1;\n    for(int i = 1; i < n; i++){\n        if(arr[i] > arr[i-1]){\n            max = i-1;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max = -1000000;\n    int min = 1000000;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0){\n            if(lst[i] > max){\n                max = lst[i];\n            }\n        }\n        else if(lst[i] < 0){\n            if(lst[i] < min){\n                min = lst[i];\n            }\n        }\n    }\n    if(max == -1000000){\n        max = NULL;\n    }\n    if(min == 1000000){\n        min = NULL;\n    }\n    return {min, max};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() == b.type()){\n        if(a.type() == typeid(int)){\n            if((int)a > (int)b){\n                return a;\n            }else if((int)a < (int)b){\n                return b;\n            }else{\n                return boost::any();\n            }\n        }else if(a.type() == typeid(float)){\n            if((float)a > (float)b){\n                return a;\n            }else if((float)a < (float)b){\n                return b;\n            }else{\n                return boost::any();\n            }\n        }else if(a.type() == typeid(string)){\n            if((string)a > (string)b){\n                return a;\n            }else if((string)a < (string)b){\n                return b;\n            }else{\n                return boost::any();\n            }\n        }\n    }else{\n        return boost::any();\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2!=0){\n        return false;\n    }\n    for(int i=0;i<=n/2;i++){\n        for(int j=i+1;j<=n/2;j++){\n            for(int k=j+1;k<=n/2;k++){\n                for(int l=k+1;l<=n/2;l++){\n                    if(i+j+k+l==n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1){\n                result += '_';\n            }else if(count == 2){\n                result += '-';\n                count = 0;\n            }\n        }else{\n            result += text[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    bool flag=false;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n        if(file_name[i]=='.'){\n            flag=true;\n        }\n    }\n    if(count>3||!flag){\n        return \"No\";\n    }\n    if(file_name[0]>='0'&&file_name[0]<='9'){\n        return \"No\";\n    }\n    if(file_name.find('.')==file_name.length()-1){\n        return \"No\";\n    }\n    string ext=file_name.substr(file_name.find_last_of('.')+1);\n    if(ext==\"txt\"||ext==\"exe\"||ext==\"dll\"){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0 && i % 4 != 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string res;\n    int i = 0;\n    while(i < sentence.length()){\n        int j = i;\n        while(j < sentence.length() && sentence[j] != ' ') j++;\n        string word = sentence.substr(i, j - i);\n        int len = word.length();\n        bool is_prime = true;\n        if(len == 1) is_prime = true;\n        else if(len == 2) is_prime = true;\n        else if(len == 3) is_prime = true;\n        else if(len == 5) is_prime = true;\n        else if(len == 7) is_prime = true;\n        else{\n            for(int k = 2; k < len; k++){\n                if(len % k == 0){\n                    is_prime = false;\n                    break;\n                }\n            }\n        }\n        if(is_prime) res += word + \" \";\n        i = j + 1;\n    }\n    return res.substr(0, res.length() - 1);\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    int g = __gcd(a,b);\n    int h = __gcd(c,d);\n    a = a/g;\n    b = b/g;\n    c = c/h;\n    d = d/h;\n    return a*c == b*d;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int n=nums[i];\n        while(n!=0){\n            sum+=n%10;\n            n/=10;\n        }\n        points.push_back(make_pair(sum,i));\n    }\n    sort(points.begin(),points.end());\n    vector<int> result;\n    for(int i=0;i<points.size();i++){\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 != 0 && (nums[i] / 10) % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1 || planets[i]==planet2){\n            continue;\n        }\n        if(i<planets.size()-1 && (planets[i]<planet1 && planet1<planets[i+1]) || (planets[i]<planet2 && planet2<planets[i+1])){\n            result.push_back(planets[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> odd_lst;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i].length() % 2 != 0){\n            odd_lst.push_back(lst[i]);\n        }\n    }\n    sort(odd_lst.begin(), odd_lst.end(), [](const string &a, const string &b){\n        if (a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return odd_lst;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i] > 0 && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n} \n\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(guess[i]==game[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(guess[i]-game[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1;\n    string strongest_extension;\n    for(string extension : extensions){\n        int cap = 0,sm = 0;\n        for(char c : extension){\n            if(isupper(c)) cap++;\n            else if(islower(c)) sm++;\n        }\n        int strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string c=b;\n    for(int i=0;i<b.length();i++){\n        c=c.substr(1)+c[0];\n        if(a.find(c)!=-1){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int last_digit = num % 10;\n        if(last_digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<string> roman_numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        if(pow(a,2)+pow(b,2)==pow(c,2) || pow(a,2)+pow(c,2)==pow(b,2) || pow(b,2)+pow(c,2)==pow(a,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = words[0];\n    for(int i = 1; i < words.size(); i++){\n        int max_unique = 0;\n        for(int j = 0; j < words[i].size(); j++){\n            bool unique = true;\n            for(int k = 0; k < words[i].size(); k++){\n                if(words[i][j] == words[i][k] && j != k){\n                    unique = false;\n                    break;\n                }\n            }\n            if(unique){\n                max_unique++;\n            }\n        }\n        if(max_unique > 0 && max_unique > max_word.size() - max_word.erase(unique(max_word)).size()){\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    int left = remaining - (total - number);\n    return {total,left};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                res += toupper(s[i]);\n            }else{\n                res += tolower(s[i]);\n            }\n        }else{\n            res += s[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\nif(text.empty())return NULL;\nunsigned char md5[16];\nMD5((unsigned char*)text.c_str(),text.length(),md5);\nstring md5_string;\nfor(int i=0;i<16;i++){\nchar hex[3];\nsprintf(hex,\"%02x\",md5[i]);\nmd5_string+=hex;\n}\nreturn md5_string;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
