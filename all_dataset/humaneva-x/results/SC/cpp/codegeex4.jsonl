{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> paren_groups;\n    string current_group = \"\";\n    int open_braces = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if (paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if (open_braces == 0){\n                paren_groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return paren_groups;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i!=numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            current_depth++;\n            if (current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }\n        else if (paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if (paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0,product=1;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1;i<numbers.size();i++){\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    public static String make_palindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        int n = s.length();\n        int[] p = new int[n];\n        int j = 0;\n        for (int i = 1; i < n; i++) {\n            while (j > 0 && s.charAt(i) != s.charAt(j)) {\n                j = p[j - 1];\n            }\n            if (s.charAt(i) == s.charAt(j)) {\n                j++;\n            }\n            p[i] = j;\n        }\n        String postfix = s.substring(p[n - 1]);\n        String prefix = s.substring(0, n - p[n - 1]);\n        return postfix + new StringBuilder(prefix).reverse().toString();\n    }\n\n    /* Find the shortest palindrome that begins a supplied string. Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome. - Append to the end the string reverse of a string prefix that comes the palindromic suffix >>> make_palindrome('')\n    ''> make_palindrome('cat\n    'catac' make_palindrome('catacatac */\n    public static String make_palindrome2(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        int n = s.length();\n        int[] p = new int[n];\n        int j = 0;\n        for (int i = 1; i < n; i++) {\n            while (j > 0 && s.charAt(i) != s.charAt(j)) {\n                j = p[j - 1];\n            }\n            if (s.charAt(i) == s.charAt(j)) {\n                j++;\n            }\n            p[i] = j;\n        }\n        String postfix = s.substring(p[n - 1]);\n        String prefix = s.substring(0, n - p[n - 1]);\n        return postfix + new StringBuilder(prefix).reverse().toString();\n    }\n\n    /* Find the shortest palindrome that begins a supplied string. Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome. - Append to the end the string reverse of a string prefix that comes the palindromic suffix >>> make_palindrome('')\n    ''> make_palindrome('cat\n    'catac' make_palindrome('catacatac */\n    public static String make_palindrome3(String s) {\n        if ("}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    int i=0;\n    while(a[i]!='\\0' && b[i]!='\\0'){\n        if(a[i]==b[i]){\n            result+='0';\n        }\n        else{\n            result+='1';\n        }\n        i++;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0) return a;\n    else return greatest_common_divisor(b,a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}"}
{"task_id": "CPP/15", "generation": "\n    string s=\"\";\n    for(int i=0;i<=n;i++){\n        s=s+to_string(i)+\" \";\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        char c=str[i];\n        if(find(distinct_chars.begin(),distinct_chars.end(),c)==distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    int i=0;\n    while(i<music_string.length()){\n        if(music_string[i]=='o'){\n            result.push_back(4);\n            i+=2;\n        }\n        else if(music_string[i]=='o' && music_string[i+1]=='|'){\n            result.push_back(2);\n            i+=3;\n        }\n        else if(music_string[i]=='.'){\n            result.push_back(1);\n            i+=3;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]==substring[0]){\n            int j=0;\n            int k=i;\n            while(str[k]==substring[j]&&k<str.length()&&j<substring.length()){\n                k++;\n                j++;\n            }\n            if(j==substring.length()){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string result=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]==' '){\n            result+=temp+' ';\n            temp=\"\";\n        }\n        else{\n            temp+=numbers[i];\n        }\n    }\n    result+=temp;\n    string temp2=\"\";\n    for(int i=0;i<result.length();i++){\n        if(result[i]==' '){\n            if(temp2==\"\"){\n                temp2=result.substr(0,i);\n            }\n            else{\n                if(m[temp2]>m[temp]){\n                    string temp3=temp2;\n                    temp2=temp;\n                    temp=temp3;\n                }\n                temp2+=result.substr(i+1,result.length()-i-1);\n            }\n        }\n        else{\n            temp+=result[i];\n        }\n    }\n    if(temp2==\"\"){\n        temp2=temp;\n    }\n    else{\n        if(m[temp2]>m[temp]){\n            string temp3=temp2;\n            temp2=temp;\n            temp=temp3;\n        }\n        temp2+=temp;\n    }\n    return temp2;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000000;\n    vector<float> result;\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            float diff = abs(numbers[i]-numbers[j]);\n            if(diff<min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0;i<numbers.size();i++){\n        if(numbers[i]<min){\n            min = numbers[i];\n        }\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n    }\n    for(int i=0;i<numbers.size();i++){\n        numbers[i] = (numbers[i]-min)/(max-min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); it++){\n        if(it->type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int len = 0;\n    for(int i = 0; i < str.length(); i++){\n        len++;\n    }\n    return len;\n}"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>0;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n=n/i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>=65 && str[i]<=90){\n            str[i]=str[i]+32;\n        }\n        else if(str[i]>=97 && str[i]<=122){\n            str[i]=str[i]-32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)==0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n==1) return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double sum = 0;\n    for(int i = 0; i < xs.size(); i++){\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\ndouble find_zero(vector<double> xs){\n    /* \n    Finds zero of polynomial with coefficients xs. return x such that poly(x, xs) = 0. find_zero takes list xs having even number coefficients and largest non zero coefficient as it guarantees\n    a solution. >>> round(find_zero([1 2) # f(x = 1 + 2x\n    -0.5\n     round(find_zero([-6 11, -6 1 (x - 1 * 2 * 3 = -6 + 11x - 6x^2 + x^3\n    1.0 */\n    double x = 0;\n    double y = poly(xs, x);\n    while(y != 0){\n        x += 0.01;\n        y = poly(xs, x);\n    }\n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l1;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l1.push_back(l[i]);\n        }\n    }\n    sort(l1.begin(),l1.end());\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l[i]=l1[i/3];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i] != l[i-1]){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0||i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l1;\n    vector<float> l2;\n    for(int i=0;i<l.size();i++){\n        if(i%2==0){\n            l1.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l1.begin(),l1.end());\n    for(int i=0;i<l1.size();i++){\n        l[i]=l1[i];\n    }\n    for(int i=0;i<l2.size();i++){\n        l[i+1]=l2[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nchar *decode_cyclic(char *str) {\n    int len = strlen(str);\n    char *decoded = malloc(len + 1);\n    int i;\n    for (i = 0; i < len; i++) {\n        decoded[i] = str[i] - 1;\n    }\n    decoded[len] = '\\0';\n    return decoded;\n}\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0;\n    int i=0;\n    while(i<n){\n        c=a+b;\n        a=b;\n        b=c;\n        if(c%2!=0){\n            int j=3;\n            for(;j*j<=c;j+=2){\n                if(c%j==0){\n                    break;\n                }\n            }\n            if(j*j>c){\n                i++;\n            }\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            for(int k=j+1;k<l.size();k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int i, j, count = 0;\n    int cars[n];\n    for(i = 0; i < n; i++){\n        scanf(\"%d\", &cars[i]);\n    }\n    for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            if(cars[i] > cars[j]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]+=1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=char(x%base+'0')+s;\n        x=x/base;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    int a[100];\n    a[0]=0;\n    a[1]=2;\n    a[2]=0;\n    for(int i=3;i<=n;i++){\n        a[i]=a[i-1]+a[i-2]+a[i-3];\n    }\n    return a[n];\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    }else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0;\n    int j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0) return 1;\n    if(n==1) return p;\n    int x=modp(n/2,p);\n    if(n%2==0) return (x*x)%p;\n    else return ((x*x)%p*p)%p;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += (s[i] - 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += (s[i] - 3);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\nstring encode_caesar(string s){\n    /* takes as input string encoded encode_caesar function Returns decoded string */\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += (s[i] - 1);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += (s[i] - 1);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\nstring encode_vigenere(string s, string key){\n    /* takes as input string encoded encode_vigenere function Returns decoded string */\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += (s[i] - key[i % key.length()]);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += (s[i] - key[i % key.length()]);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U'){\n            continue;\n        }\n        else{\n            result+=text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<') count++;\n        else count--;\n        if(count<0) return false;\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> l3;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                l3.push_back(l1[i]);\n                break;\n            }\n        }\n    }\n    sort(l3.begin(),l3.end());\n    l3.erase(unique(l3.begin(),l3.end()),l3.end());\n    return l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            n=n/i;\n            i--;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int len=brackets.length();\n    int i=0;\n    int count=0;\n    while(i<len){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n        i++;\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 1;\n    int a=0,b=1,c=1;\n    for(int i=2;i<=n;i++){\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=s+(char)(x%10+'0');\n        x=x/10;\n    }\n    if(shift>s.length()){\n        reverse(s.begin(),s.end());\n        return s;\n    }\n    string s1=s.substr(s.length()-shift);\n    string s2=s.substr(0,s.length()-shift);\n    return s1+s2;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a=0,o=0,m=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            a=0;\n            while(s[i]!=' '){\n                a=a*10+(s[i]-'0');\n                i++;\n            }\n        }\n        if(s[i]=='o'){\n            o=0;\n            while(s[i]!=' '){\n                o=o*10+(s[i]-'0');\n                i++;\n            }\n        }\n    }\n    m=n-a-o;\n    return m;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=INT_MAX;\n    int index=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0 && arr[i]<min){\n            min=arr[i];\n            index=i;\n        }\n    }\n    if(min==INT_MAX){\n        return {};\n    }\n    return {min,index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j]){\n                count++;\n            }\n        }\n        if(count>max){\n            max=count;\n        }\n    }\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    while(lst.size()>0){\n        int min=lst[0];\n        int max=lst[0];\n        int min_index=0;\n        int max_index=0;\n        for(int i=0;i<lst.size();i++){\n            if(lst[i]<min){\n                min=lst[i];\n                min_index=i;\n            }\n            if(lst[i]>max){\n                max=lst[i];\n                max_index=i;\n            }\n        }\n        if(min_index<max_index){\n            res.push_back(min);\n            lst.erase(lst.begin()+min_index);\n            res.push_back(max);\n            lst.erase(lst.begin()+max_index);\n        }\n        else{\n            res.push_back(max);\n            lst.erase(lst.begin()+max_index);\n            res.push_back(min);\n            lst.erase(lst.begin()+min_index);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(area==0)\n        return -1;\n    else\n        return area;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    int max=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n        if(q[i]>max) max=q[i];\n    }\n    if(sum-max>w) return false;\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-1-i]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int i = 0, j = n-1;\n    int count = 0;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].length();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].length();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<=a;i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    int i=0;\n    while(pow(n,i)<x){\n        i++;\n    }\n    if(pow(n,i)==x){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/77", "generation": "\n    if(a<0){\n        a=-a;\n    }\n    int i=1;\n    while(i*i*i<=a){\n        if(i*i*i==a){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()!=3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0){\n            letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i]>3.7){\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]>3.3){\n            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i]>2.7){\n            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i]>2.0){\n            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i]>1.7){\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]>1.0){\n            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i]>0.7){\n            letter_grades.push_back(\"D-\");\n        }\n        else if(grades[i]>0.0){\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len == 1) return true;\n    for(int i = 2; i < len; i++){\n        if(len % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 2;\n    int a[n+1];\n    a[1]=1;\n    a[2]=2;\n    for(int i=3;i<=n;i++){\n        a[i]=a[i-1]+a[i-2];\n    }\n    return a[n];\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string s=\"\";\n    int sum=0;\n    while(N>0){\n        sum+=N%2;\n        N/=2;\n    }\n    while(sum>0){\n        s+=sum%2+'0';\n        sum/=2;\n    }\n    reverse(s.begin(),s.end());\n    return s;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string ans=\"\";\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(temp.begin(),temp.end());\n            ans+=temp;\n            ans+=s[i];\n            temp=\"\";\n        }\n        else{\n            temp+=s[i];\n        }\n    }\n    sort(temp.begin(),temp.end());\n    ans+=temp;\n    return ans;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                result.push_back({i,j});\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum=0;\n    for(int i=0;i<array.size();i++){\n        sum+=array[i];\n    }\n    if(sum%2==0){\n        sort(array.begin(),array.end());\n    }\n    else{\n        sort(array.begin(),array.end(),greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            encrypted+=((s[i]+4)%26)+65;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            encrypted+=((s[i]+4)%26)+97;\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    sort(lst.begin(),lst.end());\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]!=lst[i+1]){\n            return lst[i+1];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==int(a)&&b==int(b)&&c==int(c)){\n        if(a==b+c||b==a+c||c==a+b){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string encoded_message;\n    for(int i=0;i<message.length();i++){\n        if(message[i]>=65 && message[i]<=90){\n            if(message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n                encoded_message+=message[i]+2;\n            }\n            else{\n                encoded_message+=message[i]+32;\n            }\n        }\n        else if(message[i]>=97 && message[i]<=122){\n            if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n                encoded_message+=message[i]+2;\n            }\n            else{\n                encoded_message+=message[i]-32;\n            }\n        }\n        else{\n            encoded_message+=message[i];\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    string s=to_string(max);\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        sum+=s[i]-'0';\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        if(isupper(it->first[0])){\n            is_lower = false;\n        }\n        if(islower(it->first[0])){\n            is_upper = false;\n        }\n    }\n    if(is_upper || is_lower) return true;\n    return false;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    for(int i=2;i<n;i++){\n        bool is_prime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                is_prime=false;\n                break;\n            }\n        }\n        if(is_prime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int a1=a%10;\n    int b1=b%10;\n    return a1*b1;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(i%2==0){\n            if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int i1=0;\n    int j1=0;\n    int k1=0;\n    int l1=0;\n    int m1=0;\n    int n1=0;\n    int o1=0;\n    int p1=0;\n    int q1=0;\n    int r1=0;\n    int s1=0;\n    int t1=0;\n    int u1=0;\n    int v1=0;\n    int w1=0;\n    int x1=0;\n    int y1=0;\n    int z1=0;\n    int a1=0;\n    int b1=0;\n    int c1=0;\n    int d1=0;\n    int e1=0;\n    int f1=0;\n    int g1=0;\n    int h1=0;\n    int i2=0;\n    int j2=0;\n    int k2=0;\n    int l2=0;\n    int m2=0;\n    int n2=0;\n    int o2=0;\n    int p2=0;\n    int q2=0;\n    int r2=0;\n    int s2=0;\n    int t2=0;\n    int u2=0;\n    int v2=0;\n    int w2=0;\n    int x2=0;\n    int y2=0;\n    int z2=0;\n    int a2=0;\n    int b2=0;\n    int c2=0;\n    int d2=0;\n    int e2=0;\n    int f2=0;\n    int g2=0"}
{"task_id": "CPP/100", "generation": "\n    vector<int> v;\n    int i=0;\n    while(i<n){\n        v.push_back(n);\n        if(n%2==0){\n            n+=2;\n        }\n        else{\n            n+=1;\n        }\n        i++;\n    }\n    return v;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> v;\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','){\n            v.push_back(temp);\n            temp=\"\";\n        }\n        else if(s[i]==' '){\n            if(temp.length()>0){\n                v.push_back(temp);\n                temp=\"\";\n            }\n        }\n        else{\n            temp+=s[i];\n        }\n    }\n    if(temp.length()>0){\n        v.push_back(temp);\n    }\n    return v;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=x;i<=y;i++){\n        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m){\n        return \"-1\";\n    }\n    int sum=0;\n    int count=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n        count++;\n    }\n    int avg=round((double)sum/count);\n    string binary=\"0b\";\n    while(avg>0){\n        binary=(char)(avg%2+'0')+binary;\n        avg/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> y;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        int flag=0;\n        while(temp>0){\n            int rem=temp%10;\n            if(rem%2==0){\n                flag=1;\n                break;\n            }\n            temp=temp/10;\n        }\n        if(flag==1){\n            y.push_back(x[i]);\n        }\n    }\n    sort(y.begin(),y.end());\n    return y;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int,vector<int>> m;\n    for(int i=0;i<arr.size();i++){\n        m[arr[i]].push_back(arr[i]);\n    }\n    vector<string> res;\n    for(auto it=m.begin();it!=m.end();it++){\n        string s=\"\";\n        for(int i=0;i<it->second.size();i++){\n            s+=to_string(it->second[i]);\n        }\n        res.push_back(s);\n    }\n    return res;\n}\nvector<string> sort_replace(vector<int> arr){\n    sort(arr.begin(),arr.end());\n    reverse(arr.begin(),arr.end());\n    map<int,string> m;\n    m[1]=\"One\";\n    m[2]=\"Two\";\n    m[3]=\"Three\";\n    m[4]=\"Four\";\n    m[5]=\"Five\";\n    m[6]=\"Six\";\n    m[7]=\"Seven\";\n    m[8]=\"Eight\";\n    m[9]=\"Nine\";\n    vector<string> res;\n    for(int i=0;i<arr.size();i++){\n        if(m.find(arr[i])!=m.end()){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    return res;\n}\nvector<string> sort_replace2(vector<int> arr){\n    sort(arr.begin(),arr.end());\n    reverse(arr.begin(),arr.end());\n    map<int,string> m;\n    m[1]=\"One\";\n    m[2]=\"Two\";\n    m[3]=\"Three\";\n    m[4]=\"Four\";\n    m[5]=\"Five\";\n    m[6]=\"Six\";\n    m[7]=\"Seven\";\n    m[8]=\"Eight\";\n    m[9]=\"Nine\";\n    vector<string> res;\n    for(int i=0;i<arr.size();i++){\n        if(m.find(arr[i])!=m.end()){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> v;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            int fact=1;\n            for(int j=1;j<=i;j++){\n                fact*=j;\n            }\n            v.push_back(fact);\n        }\n        else{\n            int sum=0;\n            for(int j=i;j>=1;j--){\n                sum+=j;\n            }\n            v.push_back(sum);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even=0,odd=0;\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        string rev(s.rbegin(),s.rend());\n        if(s==rev){\n            if(i%2==0) even++;\n            else odd++;\n        }\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n            while(num>0){\n                sum+=num%10;\n                num=num/10;\n            }\n            if(sum>0){\n                count++;\n            }\n        }\n        else{\n            while(num>0){\n                sum+=num%10;\n                num=num/10;\n            }\n            if(sum>0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n=arr.size();\n    if(n==0) return true;\n    int count=0;\n    for(int i=0;i<n;i++){\n        if(arr[i]>arr[(i+1)%n]) count++;\n    }\n    return count<=1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            odd++;\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0){\n            odd--;\n        }\n    }\n    if(odd<=0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> hist;\n    for(int i=0;i<test.length();i++){\n        hist[test[i]]++;\n    }\n    return hist;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string result=\"\";\n    for(int i=0;i<s.length();i++){\n        bool flag=true;\n        for(int j=0;j<c.length();j++){\n            if(s[i]==c[j]){\n                flag=false;\n                break;\n            }\n        }\n        if(flag){\n            result+=s[i];\n        }\n    }\n    bool check=true;\n    for(int i=0;i<result.length()/2;i++){\n        if(result[i]!=result[result.length()-1-i]){\n            check=false;\n            break;\n        }\n    }\n    return {result,check};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> out;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2==1){\n                count++;\n            }\n        }\n        string s=\"the number odd elements in the string \"+to_string(i)+\" of the input.\";\n        s=s.replace(s.find(\"4\"),1,to_string(count));\n        out.push_back(s);\n    }\n    return out;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        if(sum < 0){\n            sum = nums[i];\n        }else{\n            sum += nums[i];\n        }\n        if(sum < minSum){\n            minSum = sum;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                if(max<grid[i][j]){\n                    max=grid[i][j];\n                }\n            }\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> ones;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int num=arr[i];\n        while(num>0){\n            if(num%2==1){\n                count++;\n            }\n            num=num/2;\n        }\n        ones.push_back(count);\n    }\n    for(int i=0;i<arr.size();i++){\n        for(int j=0;j<arr.size()-1;j++){\n            if(ones[j]>ones[j+1]){\n                int temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n                temp=ones[j];\n                ones[j]=ones[j+1];\n                ones[j+1]=temp;\n            }\n            else if(ones[j]==ones[j+1]){\n                if(arr[j]>arr[j+1]){\n                    int temp=arr[j];\n                    arr[j]=arr[j+1];\n                    arr[j+1]=temp;\n                    temp=ones[j];\n                    ones[j]=ones[j+1];\n                    ones[j+1]=temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            if(count==n){\n                res.push_back(temp);\n            }\n            temp=\"\";\n            count=0;\n        }\n        else if(s[i]>='a'&&s[i]<='z'){\n            if(s[i]!='a'&&s[i]!='e'&&s[i]!='i'&&s[i]!='o'&&s[i]!='u'){\n                count++;\n            }\n            temp+=s[i];\n        }\n    }\n    if(count==n){\n        res.push_back(temp);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=word.length()-1;i>0;i--){\n        if(vowels.find(word[i])!=string::npos && vowels.find(word[i-1])!=string::npos){\n            result=word[i];\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s1=lst[0];\n    string s2=lst[1];\n    string s3=s1+s2;\n    int count1=0,count2=0,count3=0;\n    for(int i=0;i<s1.length();i++){\n        if(s1[i]=='(') count1++;\n        else count1--;\n    }\n    for(int i=0;i<s2.length();i++){\n        if(s2[i]=='(') count2++;\n        else count2--;\n    }\n    for(int i=0;i<s3.length();i++){\n        if(s3[i]=='(') count3++;\n        else count3--;\n    }\n    if(count1==0 && count2==0 && count3==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<10){\n            sum+=arr[i];\n        }\n        else{\n            sum+=arr[i]%10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n        }\n        else{\n            v.push_back(n);\n            n=3*n+1;\n        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day > 29) return false;\n        if (day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n    }\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    for(int i=0;i<txt.length();i++){\n        if(txt[i]==' '){\n            res.push_back(temp);\n            temp=\"\";\n        }\n        else if(txt[i]==','){\n            res.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=txt[i];\n        }\n    }\n    if(temp.length()>0){\n        res.push_back(temp);\n    }\n    return res;\n}\nint count_odd_letters(string txt){\n    int count=0;\n    for(int i=0;i<txt.length();i++){\n        if(txt[i]>='a' && txt[i]<='z'){\n            if((txt[i]-'a')%2==1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size()<=1) return true;\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n    return true;\n}\nbool is_sorted2(vector<int> lst){\n    if(lst.size()<=1) return true;\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]==lst[i+1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end) return \"NO\";\n    int length = end-start+1;\n    if(length==1) return \"NO\";\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 0){\n            product *= -1;\n        }\n        else if(arr[i] == 0){\n            return 0;\n        }\n        sum += abs(arr[i]);\n    }\n    return product * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n, vector<int>(m, 0));\n    vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            dp[i][j] = grid[i][j];\n            for(int d = 0; d < 4; d++){\n                int ni = i + dir[d][0];\n                int nj = j + dir[d][1];\n                if(ni >= 0 && ni < n && nj >= 0 && nj < m){\n                    dp[i][j] = min(dp[i][j], dp[ni][nj] + grid[i][j]);\n                }\n            }\n        }\n    }\n    int minVal = INT_MAX;\n    int minI = -1, minJ = -1;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(dp[i][j] < minVal){\n                minVal = dp[i][j];\n                minI = i;\n                minJ = j;\n            }\n        }\n    }\n    vector<int> res;\n    res.push_back(grid[minI][minJ]);\n    k--;\n    while(k > 0){\n        for(int d = 0; d < 4; d++){\n            int ni = minI + dir[d][0];\n            int nj = minJ + dir[d][1];\n            if(ni >= 0 && ni < n && nj >= 0 && nj < m){\n                if(dp[ni][nj] + grid[minI][minJ] == dp[minI][minJ]){\n                    res.push_back(grid[ni][nj]);\n                    minI = ni;\n                    minJ = nj;\n                    k--;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> v;\n    v.push_back(0);\n    v.push_back(0);\n    v.push_back(1);\n    for(int i=3;i<=n;i++){\n        if(i%2==0){\n            v.push_back(v[i-1]+v[i-2]+v[i-3]);\n        }\n        else{\n            v.push_back(v[i-1]+v[i-2]+v[i-3]+v[i-4]);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    string s=to_string(n);\n    for(int i=0;i<s.length();i++){\n        if(s[i]%2!=0){\n            product*=s[i]-48;\n        }\n    }\n    if(product==1){\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z'||txt[txt.length()-1]>='A'&&txt[txt.length()-1]<='Z'){\n        if(txt[txt.length()-1]!=' '){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int max=arr[0];\n    int index=-1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]>max){\n            max=arr[i];\n            index=i;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max=0,min=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<0){\n            if(lst[i]<min){\n                min=lst[i];\n            }\n        }\n        else{\n            if(lst[i]>max){\n                max=lst[i];\n            }\n        }\n    }\n    if(min==0){\n        min=0;\n    }\n    if(max==0){\n        max=0;\n    }\n    vector<int> ans;\n    ans.push_back(min);\n    ans.push_back(max);\n    return ans;\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==b.type()){\n        if(a.type()==typeid(int)){\n            int x=boost::any_cast<int>(a);\n            int y=boost::any_cast<int>(b);\n            if(x==y) return boost::any();\n            else return x>y?a:b;\n        }\n        else if(a.type()==typeid(float)){\n            float x=boost::any_cast<float>(a);\n            float y=boost::any_cast<float>(b);\n            if(x==y) return boost::any();\n            else return x>y?a:b;\n        }\n        else if(a.type()==typeid(string)){\n            string x=boost::any_cast<string>(a);\n            string y=boost::any_cast<string>(b);\n            if(x==y) return boost::any();\n            else return x>y?a:b;\n        }\n    }\n    else{\n        if(a.type()==typeid(int)){\n            int x=boost::any_cast<int>(a);\n            if(b.type()==typeid(float)){\n                float y=boost::any_cast<float>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n            else if(b.type()==typeid(string)){\n                string y=boost::any_cast<string>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n        }\n        else if(a.type()==typeid(float)){\n            float x=boost::any_cast<float>(a);\n            if(b.type()==typeid(int)){\n                int y=boost::any_cast<int>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n            else if(b.type()==typeid(string)){\n                string y=boost::any_cast<string>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n        }\n        else if(a.type()==typeid(string)){\n            string x=boost::any_cast<string>(a);\n            if(b.type()==typeid(int)){\n                int y=boost::any_cast<int>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n            else if(b.type()==typeid(float)){\n                float y=boost::any_cast<float>(b);\n                if(x==y) return boost::any();\n                else return x>y?a:b;\n            }\n        }\n    }\n    return boost::any();\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0 && n>=8){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result=\"\";\n    int count=0;\n    for(int i=0;i<text.length();i++){\n        if(text[i]==' '){\n            count++;\n            if(count==1){\n                result+='_';\n            }\n            else if(count==2){\n                result+='-';\n            }\n        }\n        else{\n            if(count==1){\n                result+='_';\n            }\n            else if(count==2){\n                result+='-';\n            }\n            else if(count>2){\n                result+='-';\n            }\n            result+=text[i];\n            count=0;\n        }\n    }\n    if(count==1){\n        result+='_';\n    }\n    else if(count==2){\n        result+='-';\n    }\n    else if(count>2){\n        result+='-';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>=48 && file_name[i]<=57){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    if(file_name.find('.')==string::npos){\n        return \"No\";\n    }\n    if(file_name[0]>=48 && file_name[0]<=57){\n        return \"No\";\n    }\n    if(file_name[0]>=65 && file_name[0]<=90){\n        return \"No\";\n    }\n    if(file_name[0]>=97 && file_name[0]<=122){\n        return \"No\";\n    }\n    if(file_name.find('.')!=string::npos){\n        string s=file_name.substr(file_name.find('.')+1,file_name.length());\n        if(s==\"txt\" || s==\"exe\" || s==\"dll\"){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            if(is_prime(word.length())){\n                result+=word;\n                result+=\" \";\n            }\n            word=\"\";\n        }\n        else{\n            word+=sentence[i];\n        }\n    }\n    if(is_prime(word.length())){\n        result+=word;\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n==1){\n        return false;\n    }\n    for(int i=2;i<n;i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    if(a*d==b*c)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum = 0;\n        int temp = nums[i];\n        while(temp != 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        result.push_back(sum);\n    }\n    for(int i = 0; i < result.size(); i++){\n        for(int j = i + 1; j < result.size(); j++){\n            if(result[i] > result[j]){\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n            }\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            string num = to_string(nums[i]);\n            if(num[0] % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> v;\n    if(planet1==\"Mercury\" && planet2==\"Venus\"){\n        v.push_back(\"Earth\");\n        v.push_back(\"Mars\");\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Venus\" && planet2==\"Earth\"){\n        v.push_back(\"Mars\");\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Earth\" && planet2==\"Mars\"){\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Mars\" && planet2==\"Jupiter\"){\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Jupiter\" && planet2==\"Saturn\"){\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Saturn\" && planet2==\"Uranus\"){\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Uranus\" && planet2==\"Neptune\"){\n        v.push_back(\"Neptune\");\n    }\n    else{\n        v.clear();\n    }\n    return v;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2!=0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end(),[](string a,string b){\n        if(a.length()==b.length()){\n            return a<b;\n        }\n        return a.length()<b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max=0;\n    string max_name=\"\";\n    for(int i=0;i<extensions.size();i++){\n        int cap=0,sm=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(extensions[i][j]>=65 && extensions[i][j]<=90){\n                cap++;\n            }\n            else if(extensions[i][j]>=97 && extensions[i][j]<=122){\n                sm++;\n            }\n        }\n        if(cap-sm>max){\n            max=cap-sm;\n            max_name=extensions[i];\n        }\n    }\n    return class_name+'.'+max_name;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    for(int i=0;i<n;i++){\n        string temp=\"\";\n        for(int j=i;j<n;j++){\n            temp+=a[j];\n        }\n        for(int j=0;j<n;j++){\n            temp+=a[j];\n        }\n        if(temp.find(b)!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even=0,odd=0;\n    string s=to_string(abs(num));\n    for(int i=0;i<s.length();i++){\n        if(s[i]%2==0) even++;\n        else odd++;\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    string result = \"\";\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            result += symbols[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(area==0)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word=\"\";\n    int max_unique=0;\n    for(int i=0;i<words.size();i++){\n        int unique=0;\n        string temp=words[i];\n        sort(temp.begin(),temp.end());\n        for(int j=0;j<temp.size()-1;j++){\n            if(temp[j]!=temp[j+1]){\n                unique++;\n            }\n        }\n        if(unique>max_unique){\n            max_unique=unique;\n            max_word=words[i];\n        }\n        else if(unique==max_unique){\n            if(words[i]<max_word){\n                max_word=words[i];\n            }\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(need>remaining){\n        result.push_back(number+remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number+need);\n        result.push_back(remaining-need);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            s[i]+=32;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            s[i]-=32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return mdString;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> v;\n    for(int i=a;i<=b;i++){\n        int x=i;\n        while(x>0){\n            int r=x%10;\n            if(r%2==0){\n                v.push_back(r);\n            }\n            x=x/10;\n        }\n    }\n    return v;\n}\n"}
