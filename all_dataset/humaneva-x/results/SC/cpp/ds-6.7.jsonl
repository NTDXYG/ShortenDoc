{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            count++;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            count--;\n            temp += paren_string[i];\n            if(count == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n        else{\n            temp += paren_string[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum/numbers.size();\n    float mad = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += fabs(numbers[i] - mean);\n    }\n    return mad/numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }\n        else if(c == ')'){\n            current_depth--;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(string s: strings){\n        if(s.find(substring) != string::npos){\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    'catacatac'\n    */\n\nfunction make_palindrome(s) {\n    let reversed = s.split('').reverse().join('');\n    let combined = s + reversed;\n    let len = s.length;\n    for (let i = len; i >= 0; i--) {\n        if (s.substr(0, i) === reversed.substr(len - i)) {\n            return combined.substr(0, len - i) + s;\n        }\n    }\n    return combined;\n}\n\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('catacatac')); // 'catacatac'\nconsole.log(make_palindrome('')); // ''\nconsole.log(make_palindrome('a')); // 'a'\nconsole.log(make_palindrome('aa')); // 'aa'\nconsole.log(make_palindrome('aba')); // 'aba'\nconsole.log(make_palindrome('abba')); // 'abba'\nconsole.log(make_palindrome('abcba')); // 'abcba'\nconsole.log(make_palindrome('abcd')); // 'adcbad'\nconsole.log(make_palindrome('abcde')); // 'edcbabc'\nconsole.log(make_palindrome('abcabc')); // 'abcabc'\nconsole.log(make_palindrome('abcabca')); // 'abcabca'\nconsole.log(make_palindrome('abcabcab')); // 'abcabcab'\nconsole.log(make_palindrome('abcabcabc')); // 'abcabcabc'\nconsole.log(make_palindrome('abcabcabcd')); // 'abcabcabcdcba'\nconsole.log(make_palindrome('abcabcabcab')); // 'abcabcabcab'\nconsole.log(make_palindrome('abcabcabcabc')); // 'abcabcabcabc'\nconsole.log(make_palindrome('abcabcabcabcd')); // 'abcabcabcabcdcba'\nconsole.log(make_palindrome('abcabcabcabcab'));"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    string prefix = \"\";\n    for(int i=0; i<str.size(); i++){\n        prefix += str[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i);\n        if(i<n)\n            result += \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; str[i]; i++)\n        count[tolower(str[i])]++;\n    int total=0;\n    for(int i=0; i<256; i++)\n        if(count[i]>0)\n            total++;\n    return total;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.size(); i++){\n        switch(music_string[i]){\n            case 'o': beats.push_back(4); break;\n            case 'o': if(music_string[i+1] == '|'){ beats.push_back(2); i++; } break;\n            case '.': if(music_string[i+1] == '|'){ beats.push_back(1); i++; } break;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    size_t found = str.find(substring);\n    while(found != string::npos){\n        count++;\n        found = str.find(substring, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> dict;\n    dict[\"zero\"] = 0;\n    dict[\"one\"] = 1;\n    dict[\"two\"] = 2;\n    dict[\"three\"] = 3;\n    dict[\"four\"] = 4;\n    dict[\"five\"] = 5;\n    dict[\"six\"] = 6;\n    dict[\"seven\"] = 7;\n    dict[\"eight\"] = 8;\n    dict[\"nine\"] = 9;\n\n    string word = \"\";\n    string result = \"\";\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(dict[word]) + \" \";\n            word = \"\";\n        } else {\n            word += numbers[i];\n        }\n    }\n    result += to_string(dict[word]);\n\n    sort(result.begin(), result.end());\n\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = fabs(numbers[1] - numbers[0]);\n    float diff;\n    vector<float> closest_numbers;\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i+1; j < numbers.size(); j++){\n            diff = fabs(numbers[j] - numbers[i]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_numbers.clear();\n                closest_numbers.push_back(numbers[i]);\n                closest_numbers.push_back(numbers[j]);\n            }\n        }\n    }\n    return closest_numbers;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]<min) min = numbers[i];\n        if(numbers[i]>max) max = numbers[i];\n    }\n    float range = max - min;\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        if(boost::any_cast<int>(&*it) != nullptr){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; n != 1; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size(); i++){\n        if(i==0 || numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble find_zero(vector<double> xs, double start, double end){\n    /* \n    Finds a zero of a polynomial with coefficients xs in the interval [start, end].\n    *//* xs are coefficients a polynomial. find_zero find x such poly(x 0. find_zero returns only only zero point, even there many. Moreover find_zero only takes list xs having even number coefficients\n    and largest non zero coefficient as it guarantees\n    a solution. >>> round(find_zero([1 2) # f(x = 1 + 2x\n    -0.5\n     round(find_zero([-6 11, -6 1 (x - 1 * 2 * 3 = -6 + 11x - 6x^2 + x^3\n    1.0 */\n    double mid = (start + end) / 2;\n    if(abs(poly(xs, mid)) < 1e-6){\n        return mid;\n    }\n    else if(poly(xs, mid) * poly(xs, start) < 0){\n        return find_zero(xs, start, mid);\n    }\n    else{\n        return find_zero(xs, mid, end);\n    }\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> third;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3==0) third.push_back(l[i]);\n    }\n    sort(third.begin(), third.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if((i+1)%3==0) l[i]=third[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    vector<int> unique_list;\n    sort(l.begin(), l.end());\n    unique_list.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1]){\n            unique_list.push_back(l[i]);\n        }\n    }\n    return unique_list;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = -INFINITY;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            char buffer[50];\n            sprintf(buffer, \"%d\", i);\n            for(char *p=buffer; *p; p++){\n                if(*p == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0; i<l.size(); i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0, j=0; i<l.size(); i+=2, ++j){\n        l[i] = even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define ALPHABET_SIZE 26\n\nchar *decode_cyclic(char *encoded) {\n    int length = strlen(encoded);\n    char *decoded = malloc(length + 1);\n    for (int i = 0; i < length; i++) {\n        decoded[i] = (encoded[i] - 'a' - 3) % ALPHABET_SIZE + 'a';\n    }\n    decoded[length] = '\\0';\n    return decoded;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int a = 0, b = 1, c = a + b;\n    int count = 0, i = 2;\n    while (count < n){\n        if (c % 2 != 0){\n            a = b;\n            b = c;\n            c = a + b;\n            count++;\n            if (count == n){\n                return c;\n            }\n        }\n        else{\n            a = b;\n            b = c;\n            c = a + b;\n        }\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n<3) return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        if(i>0 && l[i]==l[i-1]) continue;\n        int j=i+1, k=n-1;\n        while(j<k){\n            if(l[i]+l[j]+l[k]==0){\n                return true;\n            }\n            else if(l[i]+l[j]+l[k]<0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++)\n        l[i]++;\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result=\"\";\n    while(x>0){\n        result=to_string(x%base)+result;\n        x/=base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    int fib[4] = {0, 2, 0, 0};\n    if(n<4)\n        return fib[n];\n    for(int i=3; i<n; i++){\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4];\n    }\n    return fib[(n-1)%4];\n}\n"}
{"task_id": "CPP/47", "generation": "\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while (start < end){\n        if (text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    if(n%2==0)\n        return modp((n/2)%p,p*p)%p;\n    else\n        return ((2%p)*modp((n-1)/2,p*p)%p)%p;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            if(s[i] >= 'a' && s[i] <= 'c'){\n                decoded_string += 'z';\n            }\n            else{\n                decoded_string += (char)(s[i] - 3);\n            }\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            if(s[i] >= 'A' && s[i] <= 'C'){\n                decoded_string += 'Z';\n            }\n            else{\n                decoded_string += (char)(s[i] - 3);\n            }\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n==0 || n==1) return true;\n    if(l[0]<=l[n-1]){\n        for(int i=0; i<n-1; i++){\n            if(l[i]>l[i+1]) return false;\n        }\n    }\n    else{\n        for(int i=0; i<n-1; i++){\n            if(l[i]<l[i+1]) return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i = 2;\n    while(i <= n){\n        if(n % i == 0){\n            n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '('){\n            count++;\n        }\n        else if(brackets[i] == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=0;\n    fib[2]=1;\n    for(int i=3;i<=n;i++)\n        fib[i]=fib[i-1]+fib[i-2]+fib[i-3];\n    return fib[n];\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    string vowels=\"aeiou\";\n    transform(s.begin(),s.end(),s.begin(),::tolower);\n    for(int i=0;i<s.length();i++){\n        if(vowels.find(s[i]) != string::npos)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.size();\n    if(shift>=n)\n        return s;\n    else{\n        string res = s.substr(n-shift,shift) + s.substr(0,n-shift);\n        return res;\n    }\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += (int)s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0, mangoes = 0;\n    sscanf(s.c_str(),\"%d apples and %d oranges %d\",&apples,&oranges,&mangoes);\n    return mangoes - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even = INT_MAX;\n    int smallest_even_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] < smallest_even && arr[i] % 2 == 0){\n            smallest_even = arr[i];\n            smallest_even_index = i;\n        }\n    }\n    if(smallest_even == INT_MAX) return {};\n    return {smallest_even, smallest_even_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int n = lst.size();\n    int max_val = -1;\n    vector<int> freq(n+1, 0);\n    for(int i=0; i<n; i++){\n        freq[lst[i]]++;\n        if(lst[i] > max_val)\n            max_val = lst[i];\n    }\n    for(int i=max_val; i>0; i--){\n        if(freq[i] >= i)\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()){\n            result.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    int l=0,r=q.size()-1;\n    while(l<=r){\n        if(q[l]==q[r]){\n            l++;\n            r--;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    vector<int> lps(n);\n    int len = 0;\n    for(int i=1; i<n; ){\n        if(arr[i] == arr[len]){\n            len++;\n            lps[i] = len;\n            i++;\n        }\n        else{\n            if(len != 0){\n                len = lps[len-1];\n            }\n            else{\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    int changes = n - lps[n-1];\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            while(a % i == 0){\n                a /= i;\n                count++;\n            }\n            if(i != 2 && i != 3 && i != 5){\n                return false;\n            }\n        }\n    }\n    if(count == 3){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    int i=2;\n    while(i<=sqrt(x)){\n        if(pow(n,i)==x)\n            return true;\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n = cbrt(a);\n    return n*n*n == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() != 3)\n        return false;\n    if(s[0] == s[1] || s[1] == s[2] || s[2] == s[0])\n        return false;\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i]>3.7)\n            letter_grades.push_back(\"A\");\n        else if(grades[i]>3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i]>2.7)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i]>1.7)\n            letter_grades.push_back(\"B\");\n        else if(grades[i]>0.7)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i]>0.0)\n            letter_grades.push_back(\"C-\");\n        else if(grades[i]>-0.7)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n = str.length();\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return 2*starts_one_ends(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N%2;\n        N /= 2;\n    }\n    return to_string(sum);\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || i == s.length() - 1){\n            if(i == s.length() - 1)\n                temp += s[i];\n            sort(temp.begin(), temp.end());\n            result += temp;\n            if(i != s.length() - 1)\n                result += ' ';\n            temp = \"\";\n        }else{\n            temp += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int,int>> coordinates;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                coordinates.push_back(make_pair(i,j));\n            }\n        }\n    }\n    sort(coordinates.begin(), coordinates.end());\n    return coordinates;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum = array[0] + array[array.size() - 1];\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end());\n    }else{\n        sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            result += char(int(s[i]+4-65)%26 +65);\n        }\n        else{\n            result += char(int(s[i]+4-97)%26 +97);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(), lst.end());\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i]>lst[0]) return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i=0; i<S.size(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!' ){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==(int)a && b==(int)b && c==(int)c){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<message.size(); i++){\n        if(vowels.find(message[i]) != string::npos){\n            if(islower(message[i])){\n                message[i] = 'A' + (message[i] - 'a' + 2) % 26;\n            }\n            else{\n                message[i] = 'a' + (message[i] - 'A' + 2) % 26;\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int prime[1000000] = {0, 0};\n    for(int i = 2; i*i <= 1000000; i++){\n        if(prime[i] == 0){\n            for(int j = i*i; j <= 1000000; j += i){\n                prime[j] = 1;\n            }\n        }\n    }\n    int max_prime = -1;\n    for(int i = 0; i < lst.size(); i++){\n        if(prime[lst[i]] == 0 && lst[i] > max_prime){\n            max_prime = lst[i];\n        }\n    }\n    if(max_prime == -1){\n        return -1;\n    }\n    int sum = 0;\n    while(max_prime){\n        sum += max_prime%10;\n        max_prime /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n    bool lower = true, upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        for(auto c : it->first){\n            if(islower(c))\n                upper = false;\n            else\n                lower = false;\n        }\n    }\n    return lower || upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i%j==0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a,unit_digit_b,product;\n    unit_digit_a=abs(a%10);\n    unit_digit_b=abs(b%10);\n    product=unit_digit_a*unit_digit_b;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.size(); i+=2){\n        if(s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int rounded = (int)round(num);\n    if(fabs(num - rounded) < 0.5){\n        if(num > 0)\n            return rounded;\n        else\n            return rounded - 1;\n    }\n    else{\n        if(num > 0)\n            return rounded + 1;\n        else\n            return rounded;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    int stones = n;\n    result.push_back(stones);\n    for(int i=1; i<n; i++){\n        if(n%2==0) stones += i*2;\n        else stones += (i*2)+1;\n        result.push_back(stones);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    for(int i=x;i<=y;i++){\n        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int avg=(n+m)/2;\n    int rounded_avg=round(avg);\n    string binary=\"\";\n    while(rounded_avg){\n        binary=to_string(rounded_avg%2)+binary;\n        rounded_avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        bool isEvenDigit = false;\n        while(num > 0){\n            int digit = num % 10;\n            if(digit % 2 == 0){\n                isEvenDigit = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(isEvenDigit){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> names = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    map<int, string> m;\n    for(int i=1; i<=9; i++)\n        m[i] = names[i];\n    vector<int> sorted;\n    for(int i=0; i<arr.size(); i++)\n        if(m.count(arr[i]))\n            sorted.push_back(arr[i]);\n    sort(sorted.begin(), sorted.end());\n    reverse(sorted.begin(), sorted.end());\n    vector<string> res;\n    for(int i=0; i<sorted.size(); i++)\n        res.push_back(m[sorted[i]]);\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result(n);\n    for(int i=1; i<=n; i++){\n        if(i%2==0){\n            int fact = 1;\n            for(int j=1; j<=i; j++){\n                fact *= j;\n            }\n            result[i-1] = fact;\n        }\n        else{\n            int sum = 0;\n            for(int j=i; j>=1; j--){\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string r = string(s.rbegin(), s.rend());\n        if(s == r){\n            if(s.size() % 2 == 0) even_count++;\n            else odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int sum = 0;\n        if(n[i] < 0){\n            int num = n[i]*-1;\n            while(num){\n                sum += num%10;\n                num /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n        else{\n            int num = n[i];\n            while(num){\n                sum += num%10;\n                num /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n==0) return true;\n    int count = 0;\n    for(int i=0;i<n-1;i++){\n        if(arr[i]>arr[i+1]) count++;\n    }\n    if(arr[n-1]>arr[0]) count++;\n    return count<=1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1=0,odd2=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==1)\n            odd1++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==1)\n            odd2++;\n    }\n    if(odd1>odd2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> count;\n    int max = 0;\n    for(char& c : test){\n        if(c != ' '){\n            count[c]++;\n            if(count[c] > max){\n                max = count[c];\n            }\n        }\n    }\n    map<char,int> result;\n    for(auto& it : count){\n        if(it.second == max){\n            result[it.first] = it.second;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    int flag=0;\n    for(int i=0;i<s.size();i++){\n        if(c.find(s[i])==string::npos){\n            res+=s[i];\n        }\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    if(res==rev){\n        flag=1;\n    }\n    return {res,flag};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> res;\n    for(auto &s: lst){\n        int count = 0;\n        for(char c: s){\n            if((c-'0')%2 != 0) count++;\n        }\n        string temp = \"the number of odd elements in the string \" + to_string(count) + \" of the input.\";\n        res.push_back(temp);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long cur_sum = nums[0];\n    for(int i=1; i<nums.size(); i++){\n        cur_sum = min(nums[i], cur_sum+nums[i]);\n        min_sum = min(min_sum, cur_sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size();\n    int m=grid[0].size();\n    int total_water=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            total_water+=grid[i][j];\n        }\n    }\n    return (total_water+capacity-1)/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<pair<int,int>> vec;\n    for(int i=0;i<arr.size();i++){\n        int count=0,num=arr[i];\n        while(num){\n            count+=num%2;\n            num/=2;\n        }\n        vec.push_back(make_pair(count,arr[i]));\n    }\n    sort(vec.begin(),vec.end());\n    vector<int> res;\n    for(int i=0;i<vec.size();i++)\n        res.push_back(vec[i].second);\n    return res;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    vector<string> result;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] != ' '){\n            word += s[i];\n        }\n        else{\n            words.push_back(word);\n            word = \"\";\n        }\n    }\n    words.push_back(word);\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n        for(int j=0;j<words[i].length();j++){\n            char c = tolower(words[i][j]);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c >= 'a' && c <= 'z'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.size()-2; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && \n           vowels.find(word[i-1]) == string::npos && \n           vowels.find(word[i+1]) == string::npos)\n            return string(1, word[i]);\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int count = 0;\n    for(auto &s : lst){\n        for(char &c : s){\n            if(c == '(') count++;\n            else if(c == ')') count--;\n            if(count < 0) return \"No\";\n        }\n    }\n    return count == 0 ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2==1)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        while(arr[i]>9){\n            arr[i]/=10;\n        }\n        sum+=arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0){\n            collatz.push_back(n);\n        }\n        n = n % 2 ? n*3 + 1 : n / 2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())\n        return false;\n    if(date.length() != 5)\n        return false;\n    if(date[2] != '-')\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>31)\n        return false;\n    if(month==4 || month==6 || month==9 || month==11)\n        return day<=30;\n    if(month==2){\n        if(day>29)\n            return false;\n    }\n    else{\n        if(day>31)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<txt.length(); i++){\n        if(txt[i] == ' ' || txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\nint count_odd_letters(string word){\n    int count = 0;\n    for(int i=0; i<word.length(); i++){\n        if(islower(word[i]) && (word[i] - 'a') % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    int n = lst.size();\n    if(n == 0 || n == 1) return true;\n    int prev = lst[0];\n    bool flag = lst[0] < lst[1];\n    for(int i = 1; i < n - 1; i++){\n        if(lst[i] == lst[i+1]) return false;\n        if(flag != (lst[i] < lst[i+1])) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int len = end - start;\n    if(len < 2)\n        return \"NO\";\n    for(int i = 2; i * i <= len; i++){\n        if(len % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int sum=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<0) sum+=abs(arr[i]);\n        else if(arr[i]>0) sum-=abs(arr[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<n; i++){\n        res.push_back(grid[i][0]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n+1, 0);\n    res[1] = 3;\n    if(n>1) res[2] = 2;\n    for(int i=3; i<=n; i++){\n        if(i%2==0) res[i] = res[i-1] + res[i-2] + res[i-3];\n        else res[i] = res[i-2] + res[i-3] + 1;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n%10;\n        if(digit%2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else{\n            if(count>0){\n                count--;\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return count>0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty()) return false;\n    char last_char = txt[txt.length()-1];\n    if(!isalpha(last_char)) return false;\n    if(txt.length()==1) return true;\n    char second_last_char = txt[txt.length()-2];\n    if(isalpha(second_last_char)) return false;\n    return true;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_index = -1;\n    for(int i=n-1; i>0; i--){\n        if(arr[i] > arr[i-1]){\n            max_index = i;\n            break;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int largest = INT_MIN;\n    int smallest = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>0){\n            if(lst[i]>largest)\n                largest = lst[i];\n            if(lst[i]<smallest)\n                smallest = lst[i];\n        }\n    }\n    if(largest==INT_MIN && smallest==INT_MAX)\n        return {None, None};\n    else\n        return {largest, smallest};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return max(a, b);\n    }\n    if(a.type() == typeid(int)){\n        if(boost::any_cast<int>(a) > boost::any_cast<int>(b)){\n            return a;\n        }\n        else if(boost::any_cast<int>(a) < boost::any_cast<int>(b)){\n            return b;\n        }\n    }\n    else if(a.type() == typeid(float)){\n        if(boost::any_cast<float>(a) > boost::any_cast<float>(b)){\n            return a;\n        }\n        else if(boost::any_cast<float>(a) < boost::any_cast<float>(b)){\n            return b;\n        }\n    }\n    else if(a.type() == typeid(string)){\n        if(boost::any_cast<string>(a) > boost::any_cast<string>(b)){\n            return a;\n        }\n        else if(boost::any_cast<string>(a) < boost::any_cast<string>(b)){\n            return b;\n        }\n    }\n    return boost::any();\n}\n"}
{"task_id": "CPP/138", "generation": "\n    int count = 0;\n    for(int i=2; i<=n; i+=2){\n        for(int j=i+2; j<=n; j+=2){\n            for(int k=j+2; k<=n; k+=2){\n                for(int l=k+2; l<=n; l+=2){\n                    if(i+j+k+l == n){\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    if(count > 0){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result;\n    int count = 0;\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1){\n                result += '_';\n            }\n            else if(count > 2){\n                result += '-';\n            }\n        }\n        else{\n            result += text[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count = 0;\n    for(int i=0; file_name[i] != '.'; i++){\n        if(isdigit(file_name[i])) count++;\n    }\n    if(count > 3) return \"No\";\n    for(int i=0; file_name[i] != '.'; i++){\n        if(!isalpha(file_name[i])) return \"No\";\n    }\n    string extension = file_name.substr(file_name.find('.')+1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\") return \"No\";\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0 && i%4 != 0)\n            sum += lst[i]*lst[i];\n        else if(i%4 == 0 && i%3 != 0)\n            sum += lst[i]*lst[i]*lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string words[100];\n    string result = \"\";\n    int j = 0;\n    for(int i = 0; i < sentence.length(); i++){\n        string temp = \"\";\n        while(sentence[i] != ' ' && i < sentence.length()){\n            temp += sentence[i];\n            i++;\n        }\n        words[j] = temp;\n        j++;\n    }\n    for(int i = 0; i < j; i++){\n        int count = 0;\n        for(int k = 1; k <= words[i].length(); k++){\n            if(words[i].length() % k == 0)\n                count++;\n        }\n        if(count == 2)\n            result += words[i] + \" \";\n    }\n    return result.substr(0, result.length() - 1);\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1 = stoi(x.substr(0,x.find('/')));\n    int den1 = stoi(x.substr(x.find('/')+1));\n    int num2 = stoi(n.substr(0,n.find('/')));\n    int den2 = stoi(n.substr(n.find('/')+1));\n    if((num1*num2)%(den1*den2)==0)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int num=abs(nums[i]);\n        while(num>0){\n            sum+=num%10;\n            num/=10;\n        }\n        points.push_back(make_pair(sum,nums[i]));\n    }\n    sort(points.begin(),points.end());\n    vector<int> res;\n    for(int i=0;i<points.size();i++){\n        res.push_back(points[i].second);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i] > 10){\n            int firstDigit = abs(nums[i]) / 10;\n            if(firstDigit % 2 != 0) count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        a[i-1] = i*i - i + 1;\n        if(a[i-1] % 3 == 0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1 = -1, index2 = -1;\n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1) index1 = i;\n        if(planets[i] == planet2) index2 = i;\n    }\n    if(index1 == -1 || index2 == -1) return result;\n    if(index1 > index2){\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for(int i=index1+1; i<index2; i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> odd_length;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].length() % 2 != 0)\n            odd_length.push_back(lst[i]);\n    }\n    sort(odd_length.begin(), odd_length.end());\n    return odd_length;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<=n-1;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    if(i==n){\n        return x;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow((int)lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength=0;\n    string strongest_extension=\"\";\n    for(auto extension:extensions){\n        int cap=0,sm=0;\n        for(auto ch:extension){\n            if(isupper(ch)) cap++;\n            if(islower(ch)) sm++;\n        }\n        int strength=cap-sm;\n        if(strength>max_strength){\n            max_strength=strength;\n            strongest_extension=extension;\n        }\n    }\n    return class_name+\".\"+strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n = a.size();\n    int m = b.size();\n    for(int i=0;i<m;i++){\n        string temp = b.substr(i)+b.substr(0,i);\n        if(a.find(temp)!=string::npos)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    num = abs(num);\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n        num = num / 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            res += roman[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side,square_sum;\n    //find the maximum side\n    if(a>b && a>c)\n        max_side=a;\n    else if(b>c)\n        max_side=b;\n    else\n        max_side=c;\n    //calculate the square sum of the other two sides\n    square_sum=(a*a+b*b+c*c)-max_side*max_side;\n    //check if the square of the maximum side is equal to the sum of the squares of the other two sides\n    if(max_side*max_side==square_sum)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(string word: words){\n        int unique =0;\n        vector<int> count(26,0);\n        for(char c: word){\n            if(++count[c-'a']==1){\n                unique++;\n            }\n        }\n        if(unique>max_unique || (unique==max_unique && word<max_word)){\n            max_unique = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    if(total <= remaining){\n        return {total, remaining - total};\n    }else{\n        return {remaining, 0};\n    }\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = floor(result / operand[i+1]);\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0;i<s.length();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            }\n            else{\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return NULL;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<16; i++){\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    }\n    return string(md5string);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        int temp=a;\n        a=b;\n        b=temp;\n    }\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
