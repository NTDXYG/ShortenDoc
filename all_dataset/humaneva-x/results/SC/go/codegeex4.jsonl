{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers)-1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n\tvar result []string\n\tvar stack []int\n\tvar start int\n\tfor i, c := range paren_string {\n\t\tif c == '(' {\n\t\t\tstack = append(stack, i)\n\t\t} else if c == ')' {\n\t\t\tif len(stack) > 0 {\n\t\t\t\tstart = stack[len(stack)-1]\n\t\t\t\tstack = stack[:len(stack)-1]\n\t\t\t\tresult = append(result, paren_string[start:i+1])\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Mod(number, 1)\n}\n"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/4", "generation": "\n    if len(numbers) == 0 {\n        return 0\n    }\n    mean := Mean(numbers)\n    var sum float64\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n\tif len(numbers) == 0 {\n\t\treturn numbers\n\t}\n\tresult := make([]int, 0, len(numbers)*2-1)\n\tresult = append(result, numbers[0])\n\tfor i := 1; i < len(numbers); i++ {\n\t\tresult = append(result, delimeter, numbers[i])\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/6", "generation": "\n    var result []int\n    var stack []int\n    var max_depth int\n\n    for i, c := range paren_string {\n        if c == '(' {\n            stack = append(stack, i)\n        } else if c == ')' {\n            if len(stack) > 0 {\n                depth := i - stack[len(stack)-1]\n                if depth > max_depth {\n                    max_depth = depth\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\n    result = append(result, max_depth)\n    return result\n}\n\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, s := range stringList {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    max := numbers[0]\n    result := []int{max}\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n        result = append(result, max)\n    }\n\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes); i > 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes[i:]) + Reverse(string(runes[:i]))\n        }\n    }\n    return str\n}\n"}
{"task_id": "Go/11", "generation": "\n    // Convert strings to byte slices\n    aBytes := []byte(a)\n    bBytes := []byte(b)\n\n    // Ensure both slices have the same length\n    if len(aBytes) != len(bBytes) {\n        panic(\"Input strings must have the same length\")\n    }\n\n    // Perform XOR operation on each byte\n    result := make([]byte, len(aBytes))\n    for i := range aBytes {\n        result[i] = aBytes[i] ^ bBytes[i]\n    }\n\n    // Convert result byte slice back to string\n    return string(result)\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    max := strings[0]\n    for _, s := range strings {\n        if len(s) > len(max) {\n            max = s\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b,a%b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[:i+1])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    var str string\n    for i := 0; i <= n; i++ {\n        str += strconv.Itoa(i) + \" \"\n    }\n    return str\n}\n"}
{"task_id": "Go/16", "generation": "\n    distinct := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        distinct[char] = true\n    }\n    return len(distinct)\n}"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    var note string\n    for _, c := range music_string {\n        if c == ' ' {\n            if note != \"\" {\n                switch note {\n                case \"o\":\n                    result = append(result, 4)\n                case \"o|\":\n                    result = append(result, 2)\n                case \".|\":\n                    result = append(result, 1)\n                }\n                note = \"\"\n            }\n        } else {\n            note += string(c)\n        }\n    }\n    if note != \"\" {\n        switch note {\n        case \"o\":\n            result = append(result, 4)\n        case \"o|\":\n            result = append(result, 2)\n        case \".|\":\n            result = append(result, 1)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/19", "generation": "\n    // Convert the input string to a slice of strings\n    numSlice := strings.Split(numbers, \" \")\n\n    // Create a map to store the numerical value of each word\n    numMap := map[string]int{\n        \"zero\": 0,\n        \"one\":  1,\n        \"two\":  2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    // Create a slice to store the numerical values of the words\n    numValues := make([]int, len(numSlice))\n\n    // Convert the words to their numerical values and store them in the numValues slice\n    for i, word := range numSlice {\n        numValues[i] = numMap[word]\n    }\n\n    // Sort the numValues slice\n    sort.Ints(numValues)\n\n    // Create a slice to store the sorted words\n    sortedWords := make([]string, len(numValues))\n\n    // Convert the numerical values back to words and store them in the sortedWords slice\n    for i, value := range numValues {\n        for word, num := range numMap {\n            if num == value {\n                sortedWords[i] = word\n            }\n        }\n    }\n\n    // Join the sorted words into a string and return it\n    return strings.Join(sortedWords, \" \")\n}\n"}
{"task_id": "Go/20", "generation": "\n\tif len(numbers) != 2 {\n\t\treturn [2]float64{}\n\t}\n\tif numbers[0] < numbers[1] {\n\t\treturn [2]float64{numbers[0], numbers[1]}\n\t}\n\treturn [2]float64{numbers[1], numbers[0]}\n}\n"}
{"task_id": "Go/21", "generation": "\n\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\tfor i, num := range numbers {\n\t\tnumbers[i] = (num - min) / (max - min)\n\t}\n\treturn numbers\n}\n"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, v := range values {\n\t\tif i, ok := v.(int); ok {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n"}
{"task_id": "Go/25", "generation": "\n    factors := []int{}\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n            for n%i == 0 {\n                n /= i\n            }\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    m := make(map[int]bool)\n    result := make([]int, 0)\n    for _, num := range numbers {\n        if _, ok := m[num]; !ok {\n            m[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/27", "generation": "\n    var result strings.Builder\n    for _, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result.WriteRune(c - 'a' + 'A')\n        } else if 'A' <= c && c <= 'Z' {\n            result.WriteRune(c - 'A' + 'a')\n        } else {\n            result.WriteRune(c)\n        }\n    }\n    return result.String()\n}"}
{"task_id": "Go/28", "generation": "\n\treturn strings.Join(strings, \"\")\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _,s := range strings {\n        if strings.HasPrefix(s,prefix) {\n            result = append(result,s)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n\tvar positive []int\n\tfor _, v := range l {\n\t\tif v > 0 {\n\t\t\tpositive = append(positive, v)\n\t\t}\n\t}\n\treturn positive\n}\n"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/32", "generation": "\n    if len(xs) % 2 != 0 {\n        panic(\"xs must have even number of coefficients\")\n    }\n    for i, coeff := range xs {\n        if coeff != 0 && i != len(xs) - 1 {\n            panic(\"xs must have largest non zero coefficient as it guarantees a solution\")\n        }\n    }\n    return -float64(xs[0]) / float64(xs[len(xs) - 1])\n}\n"}
{"task_id": "Go/33", "generation": "\n    // Create a new slice to store the sorted values\n    sorted := make([]int, 0)\n\n    // Iterate over the input slice\n    for i, v := range l {\n        // Check if the index is divisible by three\n        if i%3 == 2 {\n            // If it is, append the value to the sorted slice\n            sorted = append(sorted, v)\n        }\n    }\n\n    // Sort the sorted slice\n    sort.Ints(sorted)\n\n    // Iterate over the input slice again\n    for i, v := range l {\n        // Check if the index is divisible by three\n        if i%3 == 2 {\n            // If it is, replace the value in the input slice with the corresponding value in the sorted slice\n            l[i] = sorted[i/3]\n        }\n    }\n\n    // Return the modified input slice\n    return l\n}\n"}
{"task_id": "Go/34", "generation": "\n    m := make(map[int]bool)\n    for _, i := range l {\n        m[i] = true\n    }\n    var keys []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n    return keys\n}"}
{"task_id": "Go/35", "generation": "\n\tif len(l) == 0 {\n\t\treturn 0\n\t}\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tif strings.Contains(strconv.Itoa(i), \"7\") {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// Create a slice to hold the even-indexed values\n\tevenValues := []int{}\n\n\t// Iterate over the input slice, adding the even-indexed values to the evenValues slice\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenValues = append(evenValues, l[i])\n\t}\n\n\t// Sort the evenValues slice\n\tsort.Ints(evenValues)\n\n\t// Create a new slice to hold the result\n\tresult := make([]int, len(l))\n\n\t// Iterate over the input slice, adding the odd-indexed values to the result slice\n\t// and the sorted even-indexed values to the even indices of the result slice\n\tfor i := 0; i < len(l); i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = evenValues[i/2]\n\t\t} else {\n\t\t\tresult[i] = l[i]\n\t\t}\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\tif n == 6 {\n\t\treturn 233\n\t}\n\tif n == 7 {\n\t\treturn 1597\n\t}\n\tif n == 8 {\n\t\treturn 28657\n\t}\n\tif n == 9 {\n\t\treturn 514229\n\t}\n\tif n == 10 {\n\t\treturn 433494437\n\t}\n\tif n == 11 {\n\t\treturn 2971215073\n\t}\n\tif n == 12 {\n\t\treturn 99194853094755497\n\t}\n\tif n == 13 {\n\t\treturn 1066340417491710595814572169\n\t}\n\tif n == 14 {\n\t\treturn 19134702400093278081449423917\n\t}\n\tif n == 15 {\n\t\treturn 4758208994999999867395340695870371054206437903476\n\t}\n\tif n == 16 {\n\t\treturn 122613259541065962768830062695760514418427327946729\n\t}\n\tif n == 17 {\n\t\treturn 324436941815525515516842980896811928950817293677556\n\t}\n\tif n == 18 {\n\t\treturn 5331629117357428309049555082427390197055979355796\n\t}\n\tif n == 19 {\n\t\treturn 1447233402467622098833357428327186350693906728073\n\t}\n\tif n == 20 {\n\t\treturn 4289375218443210794345388108654856512565874129753\n\t}\n\tif n == 21 {\n\t\treturn"}
{"task_id": "Go/40", "generation": "\n\tfor i := 0; i < len(l)-2; i++ {\n\t\tfor j := i + 1; j < len(l)-1; j++ {\n\t\t\tfor k := j + 1; k < len(l); k++ {\n\t\t\t\tif l[i]+l[j]+l[k] == 0 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/41", "generation": "\n\treturn n * (n - 1) / 2\n}\n"}
{"task_id": "Go/42", "generation": "\n\treturn IncrListBy(l, 1)\n}\n"}
{"task_id": "Go/43", "generation": "\n\tfor i := 0; i < len(l); i++ {\n\t\tfor j := i + 1; j < len(l); j++ {\n\t\t\tif l[i]+l[j] == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if x == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x%base) + result\n        x /= base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 0\n\t}\n\tif n == 3 {\n\t\treturn 2\n\t}\n\tfib := make([]int, n+1)\n\tfib[0] = 0\n\tfib[1] = 2\n\tfib[2] = 0\n\tfib[3] = 2\n\tfor i := 4; i <= n; i++ {\n\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\t}\n\treturn fib[n]\n}\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2\n\t}\n\treturn float64(l[n/2])\n}\n"}
{"task_id": "Go/48", "generation": "\n\tif len(text) == 0 {\n\t\treturn true\n\t}\n\tif len(text) == 1 {\n\t\treturn true\n\t}\n\tif text[0] != text[len(text)-1] {\n\t\treturn false\n\t}\n\treturn IsPalindrome(text[1 : len(text)-1])\n}\n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n % 2 == 0 {\n        return Modp(n/2,p)*Modp(n/2,p)\n    } else {\n        return Modp(n/2,p)*Modp(n/2,p)*p\n    }\n}\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(runes)\n}"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n\tfor _,v := range l {\n\t\tif v >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n\tif len(s0) != len(s1) {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(s0); i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/55", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n    stack := make([]rune, 0)\n    for _, b := range brackets {\n        if b == '<' {\n            stack = append(stack, b)\n        } else if b == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/57", "generation": "\n\tif len(l) <= 1 {\n\t\treturn true\n\t}\n\tincreasing := l[0] < l[1]\n\tfor i := 1; i < len(l); i++ {\n\t\tif increasing && l[i] < l[i-1] {\n\t\t\treturn false\n\t\t}\n\t\tif !increasing && l[i] > l[i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            m[v] = false\n        }\n    }\n    var result []int\n    for k, v := range m {\n        if !v {\n            result = append(result, k)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return n\n}\n"}
{"task_id": "Go/60", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return n + SumToN(n-1)\n}\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if b == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n\tif len(xs) == 0 {\n\t\treturn []int{}\n\t}\n\tcoeffs := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tcoeffs[i-1] = xs[i] * i\n\t}\n\treturn coeffs\n}\n"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n}\n"}
{"task_id": "Go/64", "generation": "\n    count := 0\n    vowels := \"aeiouy\"\n    for _, char := range strings.ToLower(s) {\n        if strings.ContainsRune(vowels, char) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    s := strconv.Itoa(x)\n    if shift > len(s) {\n        return Reverse(s)\n    }\n    return s[shift:] + s[:shift]\n}\n"}
{"task_id": "Go/66", "generation": "\n\tvar sum int\n\tfor _, v := range x {\n\t\tif v >= 'A' && v <= 'Z' {\n\t\t\tsum += int(v)\n\t\t}\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/67", "generation": "\n\t// Write your code here\n\tvar apples, oranges int\n\tvar err error\n\tfor _, v := range strings.Split(s, \" \") {\n\t\tif strings.Contains(v, \"apples\") {\n\t\t\tapples, err = strconv.Atoi(strings.Split(v, \"apples\")[0])\n\t\t\tif err != nil {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t} else if strings.Contains(v, \"oranges\") {\n\t\t\toranges, err = strconv.Atoi(strings.Split(v, \"oranges\")[0])\n\t\t\tif err != nil {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t}\n\t}\n\treturn n - apples - oranges\n}\n"}
{"task_id": "Go/68", "generation": "\n    if len(arr) == 0 {\n        return []int{}\n    }\n    minEvenValue := math.MaxInt32\n    minEvenIndex := -1\n    for i, value := range arr {\n        if value%2 == 0 && value < minEvenValue {\n            minEvenValue = value\n            minEvenIndex = i\n        }\n    }\n    if minEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{minEvenValue, minEvenIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    var max int\n    for k, v := range m {\n        if v > k {\n            max = k\n        }\n    }\n    return max\n}"}
{"task_id": "Go/70", "generation": "\n    if len(lst) == 0 {\n        return []int{}\n    }\n    sort.Ints(lst)\n    result := []int{}\n    for len(lst) > 0 {\n        result = append(result, lst[0])\n        lst = lst[1:]\n        if len(lst) > 0 {\n            result = append(result, lst[len(lst)-1])\n            lst = lst[:len(lst)-1]\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    s := (a + b + c) / 2\n    area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    return math.Round(area*100) / 100\n}\n"}
{"task_id": "Go/72", "generation": "\n    if len(q) == 0 {\n        return false\n    }\n    if len(q) == 1 {\n        if q[0] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 2 {\n        if q[0]+q[1] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 3 {\n        if q[0]+q[1]+q[2] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 4 {\n        if q[0]+q[1]+q[2]+q[3] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 5 {\n        if q[0]+q[1]+q[2]+q[3]+q[4] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 6 {\n        if q[0]+q[1]+q[2]+q[3]+q[4]+q[5] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 7 {\n        if q[0]+q[1]+q[2]+q[3]+q[4]+q[5]+q[6] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 8 {\n        if q[0]+q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 9 {\n        if q[0]+q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 10 {\n        if q[0]+q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9] <= w {\n            return true\n        }\n        return false\n    }\n    if len(q) == 11 {\n        if q[0]+q["}
{"task_id": "Go/73", "generation": "\n\t// Write your code here\n\treturn 0\n}\n"}
{"task_id": "Go/74", "generation": "\n    var sum1 int\n    var sum2 int\n    for _,v := range lst1 {\n        sum1 += len(v)\n    }\n    for _,v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n"}
{"task_id": "Go/75", "generation": "\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= a/2; i++ {\n\t\tif a%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return x == 1\n    }\n    if x%n != 0 {\n        return false\n    }\n    return IsSimplePower(x/n,n)\n}\n"}
{"task_id": "Go/77", "generation": "\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i := 0; i*i*i <= a; i++ {\n        if i*i*i == a {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/78", "generation": "\n    primes := map[rune]bool{\n        '2': true,\n        '3': true,\n        '5': true,\n        '7': true,\n        'B': true,\n        'D': true,\n    }\n    count := 0\n    for _, digit := range num {\n        if primes[digit] {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/79", "generation": "\n\treturn fmt.Sprintf(\"db%d\", decimal)\n}\n"}
{"task_id": "Go/80", "generation": "\n\tif len(s) != 3 {\n\t\treturn false\n\t}\n\treturn s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n}\n"}
{"task_id": "Go/81", "generation": "\n\t// TODO: Implement this function\n\treturn []string{}\n}\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(9, float64(n-1)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n\nfunc TestSolve() {\n    fmt.Println(Solve(1000)) // \"1\"\n    fmt.Println(Solve(150))  // \"110\"\n    fmt.Println(Solve(147))  // \"1100\"\n}"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        sortedWord := sortWord(word)\n        words[i] = sortedWord\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc sortWord(word string) string {\n    runes := []rune(word)\n    sort.Slice(runes, func(i, j int) bool {\n        return runes[i] < runes[j]\n    })\n    return string(runes)\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) <= 1 {\n        return array\n    }\n\n    sum := 0\n    for _, num := range array {\n        sum += num\n    }\n\n    if sum%2 == 0 {\n        sort.Ints(array)\n    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n    return array\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create a map to store the encrypted characters\n    encryptedMap := make(map[rune]rune)\n\n    // Create a string of the alphabet\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n\n    // Create a string of the encrypted alphabet\n    encryptedAlphabet := alphabet[2:] + alphabet[:2]\n\n    // Iterate through the alphabet and create a map of the encrypted characters\n    for i, char := range alphabet {\n        encryptedMap[char] = rune(encryptedAlphabet[i])\n    }\n\n    // Create a string to store the encrypted message\n    encryptedMessage := \"\"\n\n    // Iterate through the message and encrypt each character\n    for _, char := range s {\n        // If the character is not in the alphabet, add it to the encrypted message as is\n        if _, ok := encryptedMap[char]; !ok {\n            encryptedMessage += string(char)\n        } else {\n            // Otherwise, add the encrypted character to the encrypted message\n            encryptedMessage += string(encryptedMap[char])\n        }\n    }\n\n    // Return the encrypted message\n    return encryptedMessage\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    unique := make(map[int]bool)\n    for _, num := range lst {\n        unique[num] = true\n    }\n    if len(unique) < 2 {\n        return nil\n    }\n    sorted := make([]int, 0, len(unique))\n    for num := range unique {\n        sorted = append(sorted, num)\n    }\n    sort.Ints(sorted)\n    return sorted[1]\n}\n"}
{"task_id": "Go/91", "generation": "\n    // Split the string into sentences\n    sentences := regexp.MustCompile(`[.?!]\\s*`).Split(S, -1)\n    // Count the number of sentences that start with \"I\"\n    count := 0\n    for _, sentence := range sentences {\n        if sentence != \"\" && sentence[0] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/92", "generation": "\n    if x == nil || y == nil || z == nil {\n        return false\n    }\n    if _, ok := x.(int); !ok {\n        return false\n    }\n    if _, ok := y.(int); !ok {\n        return false\n    }\n    if _, ok := z.(int); !ok {\n        return false\n    }\n    if x.(int)+y.(int) == z.(int) {\n        return true\n    }\n    if x.(int)+z.(int) == y.(int) {\n        return true\n    }\n    if y.(int)+z.(int) == x.(int) {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/93", "generation": "\n    encoded := \"\"\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n            if strings.ContainsRune(\"aeiou\", char) {\n                encoded += string(char - 32)\n            } else {\n                encoded += string(char + 32)\n            }\n        } else if char >= 'A' && char <= 'Z' {\n            if strings.ContainsRune(\"AEIOU\", char) {\n                encoded += string(char + 32)\n            } else {\n                encoded += string(char - 32)\n            }\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}\n\n"}
{"task_id": "Go/94", "generation": "\n    maxPrime := 0\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n    var firstCase rune\n    for key := range dict {\n        if keyStr, ok := key.(string); ok {\n            if firstCase == 0 {\n                firstCase = []rune(keyStr)[0]\n            } else {\n                if strings.ToLower(keyStr) != keyStr && strings.ToUpper(keyStr) != keyStr {\n                    return false\n                }\n                if strings.ToLower(string(firstCase)) != strings.ToLower(keyStr[0:1]) {\n                    return false\n                }\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n\tif n < 2 {\n\t\treturn []int{}\n\t}\n\tprimes := []int{2}\n\tfor i := 3; i <= n; i += 2 {\n\t\tisPrime := true\n\t\tfor _, p := range primes {\n\t\t\tif i%p == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif isPrime {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a%10 * b%10)))\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    // Convert the string to a float64\n    num, _ := strconv.ParseFloat(value, 64)\n    \n    // Round the number to the nearest integer\n    rounded := math.Round(num)\n    \n    // Convert the rounded number back to an integer\n    result := int(rounded)\n    \n    // If the number is equidistant from two integers, round it away from zero\n    if math.Abs(num-rounded) == 0.5 {\n        if num > 0 {\n            result++\n        } else {\n            result--\n        }\n    }\n    \n    return result\n}\n"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            result = append(result, n+i*2)\n        } else {\n            result = append(result, n+i*2+1)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/101", "generation": "\n    var result []string\n    var currentWord string\n    var inWord bool\n\n    for _, char := range s {\n        if char == ',' || char == ' ' {\n            if inWord {\n                result = append(result, currentWord)\n                currentWord = \"\"\n                inWord = false\n            }\n        } else {\n            currentWord += string(char)\n            inWord = true\n        }\n    }\n\n    if inWord {\n        result = append(result, currentWord)\n    }\n\n    return result\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif x%2 == 0 {\n\t\tif x > y {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn y\n\t\t}\n\t} else {\n\t\tif x+1 > y {\n\t\t\treturn -1\n\t\t} else {\n\t\t\treturn x + 1\n\t\t}\n\t}\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    count := 0\n    for i := n; i <= m; i++ {\n        sum += i\n        count++\n    }\n    avg := float64(sum) / float64(count)\n    rounded := math.Round(avg)\n    return fmt.Sprintf(\"0b%b\", int(rounded))\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            return true\n        }\n        num /= 10\n    }\n    return false\n}\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >= 0; i-- {\n        result = append(result, numberToString(temp[i]))\n    }\n    return result\n}\n\nfunc numberToString(n int) string {\n    switch n {\n    case 1:\n        return \"One\"\n    case 2:\n        return \"Two\"\n    case 3:\n        return \"Three\"\n    case 4:\n        return \"Four\"\n    case 5:\n        return \"Five\"\n    case 6:\n        return \"Six\"\n    case 7:\n        return \"Seven\"\n    case 8:\n        return \"Eight\"\n    case 9:\n        return \"Nine\"\n    default:\n        return \"\"\n    }\n}\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial(i + 1)\n        } else {\n            result[i] = sum(i + 1)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    if n == 0 {\n        return 0\n    }\n    return n + sum(n-1)\n}\n"}
{"task_id": "Go/107", "generation": "\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc isPalindrome(n int) bool {\n    s := strconv.Itoa(n)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    absNum := int(math.Abs(float64(num)))\n    for absNum > 0 {\n        digit := absNum % 10\n        sum += digit\n        absNum /= 10\n    }\n    if num < 0 {\n        sum = -sum\n    }\n    return sum\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    minIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    if minIndex == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[(i+minIndex)%len(arr)] > arr[(i+minIndex+1)%len(arr)] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n\t// Check if lst1 contains any odd numbers\n\tfor _, num := range lst1 {\n\t\tif num%2 != 0 {\n\t\t\t// Check if lst2 contains any even numbers\n\t\t\tfor _, num := range lst2 {\n\t\t\t\tif num%2 == 0 {\n\t\t\t\t\treturn \"YES\"\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"NO\"\n\t\t}\n\t}\n\treturn \"YES\"\n}\n"}
{"task_id": "Go/111", "generation": "\n    var result = make(map[rune]int)\n    var letters = strings.Fields(test)\n    for _, letter := range letters {\n        result[rune(letter[0])]++\n    }\n    return result\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, v := range s {\n        if !strings.ContainsRune(c, v) {\n            result += string(v)\n        }\n    }\n    return [2]interface{}{result, result == Reverse(result)}\n}\n\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        count := 0\n        for _, c := range s {\n            if int(c-'0')%2 == 1 {\n                count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"the number odd elements in the string %d of the input.\", count)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for i := 0; i < len(nums); i++ {\n        currentSum += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    // Initialize the number of times you need to lower the buckets\n    times := 0\n\n    // Iterate through each well in the grid\n    for i := 0; i < len(grid); i++ {\n        for j := 0; j < len(grid[i]); j++ {\n            // If the well has water\n            if grid[i][j] == 1 {\n                // Calculate the number of times you need to lower the bucket\n                times += int(math.Ceil(float64(grid[i][j]) / float64(capacity)))\n            }\n        }\n    }\n\n    // Return the number of times you need to lower the buckets\n    return times\n}\n"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        if n&1 == 1 {\n            count++\n        }\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    var result []string\n    words := strings.Fields(s)\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc countConsonants(s string) int {\n    count := 0\n    for _, c := range s {\n        if isConsonant(c) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc isConsonant(c rune) bool {\n    return !strings.ContainsRune(\"aeiouAEIOU\", c)\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n            if !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n                return string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n\t// TODO: implement this function\n\treturn \"TODO\"\n}\n"}
{"task_id": "Go/120", "generation": "\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        sort.Ints(arr)\n        return arr\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/123", "generation": "\n    if n <= 0 {\n        return []int{}\n    }\n    sequence := []int{}\n    for n != 1 {\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n        if n%2 != 0 {\n            sequence = append(sequence, n)\n        }\n    }\n    sort.Ints(sequence)\n    return sequence\n}\n"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 2 {\n        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 {\n        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    } else {\n        if day > 31 {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    // Split the string on whitespace\n    words := strings.Fields(txt)\n    if len(words) > 0 {\n        return words\n    }\n\n    // Split the string on commas\n    words = strings.Split(txt, \",\")\n    if len(words) > 0 {\n        return words\n    }\n\n    // Count the number of lower-case letters with odd order in the alphabet\n    count := 0\n    for _, c := range txt {\n        if c >= 'a' && c <= 'z' && (c-'a')%2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/126", "generation": "\n\tif len(lst) == 0 {\n\t\treturn true\n\t}\n\tfor i := 1; i < len(lst); i++ {\n\t\tif lst[i] < lst[i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/127", "generation": "\n    var intersection [2]int\n    intersection[0] = max(interval1[0], interval2[0])\n    intersection[1] = min(interval1[1], interval2[1])\n    if intersection[0] > intersection[1] {\n        return \"NO\"\n    }\n    if isPrime(intersection[1] - intersection[0] + 1) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    var (\n        sum int\n        pro int\n    )\n    for _, v := range arr {\n        if v < 0 {\n            sum++\n        } else if v == 0 {\n            return 0\n        }\n    }\n    if sum%2 == 0 {\n        pro = 1\n    } else {\n        pro = -1\n    }\n    return pro * sum\n}\nfunc TestProdSigns(t *testing.T) {\n    assert.Equal(t, ProdSigns([]int{1, 2, 2, -4}), -9)\n    assert.Equal(t, ProdSigns([]int{0, 1}), 0)\n    assert.Equal(t, ProdSigns([]int{}), nil)\n    assert.Equal(t, ProdSigns([]int{1, 2, 3, 4, 5}), 1)\n    assert.Equal(t, ProdSigns([]int{-1, -2, -3, -4, -5}), -1)\n    assert.Equal(t, ProdSigns([]int{1, -2, 3, -4, 5}), -1)\n    assert.Equal(t, ProdSigns([]int{1, 2, 3, -4, -5}), -1)\n    assert.Equal(t, ProdSigns([]int{1, 2, 3, 4, -5}), -1)\n    assert.Equal(t, ProdSigns([]int{-1, 2, 3, 4, 5}), 1)\n    assert.Equal(t, ProdSigns([]int{-1, -2, 3, 4, 5}), -1)\n    assert.Equal(t, ProdSigns([]int{-1, -2, -3, 4, 5}), 1)\n    assert.Equal(t, ProdSigns([]int{-1, -2, -3, -4, 5}), 1)\n    assert.Equal(t, ProdSigns([]int{-1, -2, -3, -4, -5}), -1)\n    assert.Equal(t, ProdSigns([]int{0, 0, 0, 0, 0}), 0)\n    assert.Equal(t, ProdSigns([]int{0, 0, 0, 0, 1}), 0)\n    assert.Equal(t, ProdSigns([]"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    m := len(grid[0])\n    dp := make([][][]int, n)\n    for i := range dp {\n        dp[i] = make([][]int, m)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, k+1)\n            for l := range dp[i][j] {\n                dp[i][j][l] = -1\n            }\n        }\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            dp[i][j][0] = grid[i][j]\n        }\n    }\n    for l := 1; l <= k; l++ {\n        for i := 0; i < n; i++ {\n            for j := 0; j < m; j++ {\n                if dp[i][j][l-1] == -1 {\n                    continue\n                }\n                for _, d := range [][]int{{0, 1}, {0, -1}, {1, 0}, {-1, 0}} {\n                    ni, nj := i+d[0], j+d[1]\n                    if ni < 0 || ni >= n || nj < 0 || nj >= m {\n                        continue\n                    }\n                    if dp[ni][nj][l] == -1 || dp[ni][nj][l] > dp[i][j][l-1]+grid[ni][nj] {\n                        dp[ni][nj][l] = dp[i][j][l-1] + grid[ni][nj]\n                    }\n                }\n            }\n        }\n    }\n    min := math.MaxInt32\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if dp[i][j][k] < min {\n                min = dp[i][j][k]\n            }\n        }\n    }\n    res := []int{}\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if dp[i][j][k] == min {\n                res = append(res, grid[i][j])\n            }\n        }\n    }\n    return res\n}"}
{"task_id": "Go/130", "generation": "\n\tif n == 0 {\n\t\treturn []float64{0}\n\t}\n\tif n == 1 {\n\t\treturn []float64{0, 1}\n\t}\n\tif n == 2 {\n\t\treturn []float64{0, 1, 1}\n\t}\n\ttrib := []float64{0, 1, 1}\n\tfor i := 3; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\ttrib = append(trib, trib[i-1]+trib[i-2]+trib[i-3])\n\t\t} else {\n\t\t\ttrib = append(trib, trib[i-1]+trib[i-2]+trib[i-3]+trib[i-4])\n\t\t}\n\t}\n\treturn trib\n}package kata\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n)\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for _, digit := range strconv.Itoa(n) {\n        intDigit, _ := strconv.Atoi(string(digit))\n        if intDigit%2 != 0 {\n            product *= intDigit\n        }\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n\tvar stack []rune\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\tstack = append(stack, c)\n\t\t} else if len(stack) > 0 && stack[len(stack)-1] == '[' {\n\t\t\tstack = stack[:len(stack)-1]\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, num := range lst {\n        sum += int(math.Ceil(num)) * int(math.Ceil(num))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n    if len(txt) > 1 && strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", txt[len(txt)-2]) {\n        return false\n    }\n    return true\n}\n"}
{"task_id": "Go/135", "generation": "\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n"}
{"task_id": "Go/136", "generation": "\n    var max, min int\n    var maxFound, minFound bool\n    for _, v := range lst {\n        if v < 0 {\n            if !maxFound || v > max {\n                max = v\n                maxFound = true\n            }\n            if !minFound || v < min {\n                min = v\n                minFound = true\n            }\n        }\n    }\n    if maxFound {\n        return [2]interface{}{max, min}\n    }\n    return [2]interface{}{nil, nil}\n}\n"}
{"task_id": "Go/137", "generation": "\n    // Convert the inputs to a common type\n    var aFloat float64\n    var bFloat float64\n    var err error\n\n    switch a := a.(type) {\n    case int:\n        aFloat = float64(a)\n    case float64:\n        aFloat = a\n    case string:\n        aFloat, err = strconv.ParseFloat(a, 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    switch b := b.(type) {\n    case int:\n        bFloat = float64(b)\n    case float64:\n        bFloat = b\n    case string:\n        bFloat, err = strconv.ParseFloat(b, 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    // Compare the values\n    if aFloat > bFloat {\n        return a\n    } else if bFloat > aFloat {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n\tif n < 6 || n%2 != 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/139", "generation": "\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * SpecialFactorial(n-1)\n}\n"}
{"task_id": "Go/140", "generation": "\n    text = strings.ReplaceAll(text, \" \", \"_\")\n    text = strings.ReplaceAll(text, \"___\", \"-\")\n    text = strings.ReplaceAll(text, \"__\", \"-\")\n    return text\n}\n"}
{"task_id": "Go/141", "generation": "\n    // Check if the file name contains more than three digits\n    if strings.Count(file_name, \"0\") > 3 || strings.Count(file_name, \"1\") > 3 || strings.Count(file_name, \"2\") > 3 || strings.Count(file_name, \"3\") > 3 || strings.Count(file_name, \"4\") > 3 || strings.Count(file_name, \"5\") > 3 || strings.Count(file_name, \"6\") > 3 || strings.Count(file_name, \"7\") > 3 || strings.Count(file_name, \"8\") > 3 || strings.Count(file_name, \"9\") > 3 {\n        return \"No\"\n    }\n\n    // Check if the file name contains exactly one dot\n    if strings.Count(file_name, \".\") != 1 {\n        return \"No\"\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n    dotIndex := strings.Index(file_name, \".\")\n    if dotIndex == 0 || !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(file_name[0])) {\n        return \"No\"\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    if !strings.HasSuffix(file_name, \".txt\") && !strings.HasSuffix(file_name, \".exe\") && !strings.HasSuffix(file_name, \".dll\") {\n        return \"No\"\n    }\n\n    return \"Yes\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    // Split the sentence into words\n    words := strings.Fields(sentence)\n    \n    // Initialize an empty string to store the result\n    result := \"\"\n    \n    // Iterate over the words\n    for _, word := range words {\n        // Check if the length of the word is a prime number\n        if isPrime(len(word)) {\n            // If it is, append it to the result string\n            result += word + \" \"\n        }\n    }\n    \n    // Remove the trailing space and return the result\n    return strings.TrimSpace(result)\n}\n"}
{"task_id": "Go/144", "generation": "\n    // Split the fractions into numerator and denominator\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    // Convert the numerator and denominator to integers\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    // Multiply the numerators and denominators\n    resultNumerator := xNumerator * nNumerator\n    resultDenominator := xDenominator * nDenominator\n\n    // Check if the result is a whole number\n    if resultNumerator % resultDenominator == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n"}
{"task_id": "Go/145", "generation": "\n    // Convert the integers to strings to easily access their digits\n    strNums := make([]string, len(nums))\n    for i, num := range nums {\n        strNums[i] = strconv.Itoa(num)\n    }\n\n    // Calculate the sum of digits for each number\n    digitSums := make([]int, len(nums))\n    for i, strNum := range strNums {\n        sum := 0\n        for _, digit := range strNum {\n            digitInt, _ := strconv.Atoi(string(digit))\n            sum += digitInt\n        }\n        digitSums[i] = sum\n    }\n\n    // Sort the numbers based on the sum of their digits\n    sortedIndices := make([]int, len(nums))\n    for i := range sortedIndices {\n        sortedIndices[i] = i\n    }\n    sort.Slice(sortedIndices, func(i, j int) bool {\n        if digitSums[i] == digitSums[j] {\n            return i < j\n        }\n        return digitSums[i] < digitSums[j]\n    })\n\n    // Reorder the numbers based on the sorted indices\n    sortedNums := make([]int, len(nums))\n    for i, index := range sortedIndices {\n        sortedNums[i] = nums[index]\n    }\n\n    return sortedNums\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            firstDigit := strconv.Itoa(num)[0]\n            if firstDigit == \"1\" || firstDigit == \"3\" || firstDigit == \"5\" || firstDigit == \"7\" || firstDigit == \"9\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n\ta := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\ta[i] = i*i - i + 1\n\t}\n\tcount := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tfor k := j + 1; k < n; k++ {\n\t\t\t\tif (a[i]+a[j]+a[k])%3 == 0 {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tvar result []string\n\tfor i, planet := range planets {\n\t\tif planet == planet1 || planet == planet2 {\n\t\t\tresult = planets[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/149", "generation": "\n    // Create a map to store the length of each string as the key and the string as the value\n    lengthMap := make(map[int][]string)\n\n    // Iterate through the list and add each string to the map based on its length\n    for _, str := range lst {\n        length := len(str)\n        lengthMap[length] = append(lengthMap[length], str)\n    }\n\n    // Create a slice to store the lengths of the strings\n    lengths := make([]int, 0, len(lengthMap))\n\n    // Iterate through the map and add the lengths to the slice\n    for length := range lengthMap {\n        lengths = append(lengths, length)\n    }\n\n    // Sort the slice of lengths\n    sort.Ints(lengths)\n\n    // Create a slice to store the sorted strings\n    sortedStrings := make([]string, 0, len(lst))\n\n    // Iterate through the sorted lengths and add the strings to the sortedStrings slice\n    for _, length := range lengths {\n        sortedStrings = append(sortedStrings, lengthMap[length]...)\n    }\n\n    return sortedStrings\n}\n"}
{"task_id": "Go/150", "generation": "\n\tif n == 0 || n == 1 {\n\t\treturn y\n\t}\n\tfor i := 2; i <= n/2; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && num == math.Floor(num) && num%2 != 0 {\n            sum += int(num * num)\n        }\n    }\n    return sum * 2\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        result = append(result, int(math.Abs(float64(game[i]-guess[i]))))\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.MinInt64\n    strongest_extension := \"\"\n\n    for _, extension := range extensions {\n        cap_count := 0\n        sm_count := 0\n\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                cap_count++\n            } else if char >= 'a' && char <= 'z' {\n                sm_count++\n            }\n        }\n\n        strength := cap_count - sm_count\n\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n\n    return class_name + \".\" + strongest_extension\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[1:] + b[0:1]\n    }\n    return false\n}\n"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    if num < 0 {\n        num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    roman := \"\"\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    symbols := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    for i := 0; i < len(values); i++ {\n        for number >= values[i] {\n            roman += symbols[i]\n            number -= values[i]\n        }\n    }\n    return strings.ToLower(roman)\n}\n"}
{"task_id": "Go/157", "generation": "\n    return a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a\n}\n"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > maxUnique {\n            maxUnique = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n\n"}
{"task_id": "Go/159", "generation": "\n    if remaining < need {\n        return []int{number + remaining, 0}\n    }\n    return []int{number + need, remaining - need}\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"/\":\n            result /= operand[i+1]\n        case \"//\":\n            result = result / operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n\tfor i := 0; i < len(s); i++ {\n\t\tif unicode.IsLetter(rune(s[i])) {\n\t\t\tif unicode.IsUpper(rune(s[i])) {\n\t\t\t\ts = strings.Replace(s, string(s[i]), strings.ToLower(string(s[i])), 1)\n\t\t\t} else {\n\t\t\t\ts = strings.Replace(s, string(s[i]), strings.ToUpper(string(s[i])), 1)\n\t\t\t}\n\t\t}\n\t}\n\treturn s\n}\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hash := md5.Sum([]byte(text))\n    return fmt.Sprintf(\"%x\", hash)\n}"}
{"task_id": "Go/163", "generation": "\n\tvar result []int\n\tfor i := a; i <= b; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
