{"task_id": "Go/0", "generation": "\n    for i, num1 := range numbers {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(num1-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    ignore_spaces := strings.Replace(paren_string, \" \", \"\", -1)\n    for _, char := range ignore_spaces {\n        if char == '(' {\n            stack = append(stack, char)\n        } else if char == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                if len(stack) == 0 {\n                    result = append(result, string(stack))\n                    stack = nil\n                }\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/4", "generation": "\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\n    mad := 0.0\n    for _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n    mad /= float64(len(numbers))\n\n    return mad\n}\n"}
{"task_id": "Go/5", "generation": "\n    var result []int\n    for i, num := range numbers {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    maxLevel := 0\n    currentLevel := 0\n    openParens := 0\n\n    for _, char := range strings.Split(paren_string, \" \") {\n        if char == \"(\" {\n            openParens++\n            if openParens > maxLevel {\n                maxLevel = openParens\n            }\n        } else if char == \")\" {\n            openParens--\n        }\n        currentLevel = int(math.Max(float64(currentLevel), float64(openParens)))\n        levels = append(levels, currentLevel)\n    }\n\n    return levels\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum += num\n        product *= num\n    }\n    return [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    rollingMax := make([]int, len(numbers))\n\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        rollingMax[i] = max\n    }\n\n    return rollingMax\n}\n\n"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes) - 1; i >= 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes) + string(runes[0:i])\n        }\n    }\n    return str\n}\n"}
{"task_id": "Go/11", "generation": "\n    var res string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n            res += \"1\"\n        }\n    }\n    return res\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}\n\n"}
{"task_id": "Go/13", "generation": "\n    if b==0{\n        return a\n    }\n    return GreatestCommonDivisor(b,a%b)\n}\n\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 1; i <= len(str); i++ {\n        prefixes = append(prefixes, str[0:i])\n    }\n    return prefixes\n}\n\n"}
{"task_id": "Go/15", "generation": "\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove the last space\n}\n"}
{"task_id": "Go/16", "generation": "\n    distinct_chars := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        if _, ok := distinct_chars[char]; !ok {\n            distinct_chars[char] = true\n        }\n    }\n    return len(distinct_chars)\n}\n\n"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    for _, note := range strings.Split(music_string, \" \") {\n        switch note {\n        case \"o\":\n            result = append(result, 4)\n        case \"o|\":\n            result = append(result, 2)\n        case \".|\":\n            result = append(result, 1)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if strings.HasPrefix(str[i:], substring) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    numberMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numberList := strings.Split(numbers, \" \")\n    sort.Slice(numberList, func(i, j int) bool {\n        return numberMap[numberList[i]] < numberMap[numberList[j]]\n    })\n\n    return strings.Join(numberList, \" \")\n}\n\n"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    minDiff := numbers[1] - numbers[0]\n    minPair := [2]float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)-1; i++ {\n        if diff := numbers[i+1] - numbers[i]; diff < minDiff {\n            minDiff = diff\n            minPair = [2]float64{numbers[i], numbers[i+1]}\n        }\n    }\n    return minPair\n}\n\n"}
{"task_id": "Go/21", "generation": "\n    min := numbers[0]\n    max := numbers[0]\n\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n        if number > max {\n            max = number\n        }\n    }\n\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\n    return numbers\n}\n"}
{"task_id": "Go/22", "generation": "\n    var integers []int\n    for _, value := range values {\n        if integer, ok := value.(int); ok {\n            integers = append(integers, integer)\n        }\n    }\n    return integers\n}\n"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n\n"}
{"task_id": "Go/26", "generation": "\n    uniqueNumbers := make([]int, 0)\n    seen := make(map[int]bool)\n\n    for _, number := range numbers {\n        if !seen[number] {\n            uniqueNumbers = append(uniqueNumbers, number)\n            seen[number] = true\n        }\n    }\n\n    return uniqueNumbers\n}\n"}
{"task_id": "Go/27", "generation": "\n    result := make([]rune, len(str))\n    for i, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result[i] = c - 'a' + 'A'\n        } else if 'A' <= c && c <= 'Z' {\n            result[i] = c + 'a' - 'A'\n        } else {\n            result[i] = c\n        }\n    }\n    return string(result)\n}\n\n"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}\n\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/30", "generation": "\n    var pos []int\n    for _, num := range l {\n        if num > 0 {\n            pos = append(pos, num)\n        }\n    }\n    return pos\n}\n\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    for i := 0; i < len(xs); i += 2 {\n        if xs[i] != 0 {\n            return -float64(xs[i+1]) / float64(xs[i])\n        }\n    }\n    return 0\n}\n"}
{"task_id": "Go/33", "generation": "\n    var third []int\n    for i, v := range l {\n        if i%3 == 0 {\n            third = append(third, v)\n        }\n    }\n    sort.Ints(third)\n\n    j := 0\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = third[j]\n            j++\n        }\n    }\n    return l\n}\n"}
{"task_id": "Go/34", "generation": "\n    keys := make(map[int]bool)\n    list := []int{}\n    for _, entry := range l {\n        if _, value := keys[entry]; !value {\n            keys[entry] = true\n            list = append(list, entry)\n        }\n    }\n    sort.Ints(list)\n    return list\n}\n\n"}
{"task_id": "Go/35", "generation": "\n\tmax := l[0]\n\tfor _, value := range l {\n\t\tif value > max {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}\n\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/37", "generation": "\n\tevenIndices := []int{}\n\toddIndices := []int{}\n\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tevenIndices = append(evenIndices, v)\n\t\t} else {\n\t\t\toddIndices = append(oddIndices, v)\n\t\t}\n\t}\n\n\tsort.Ints(evenIndices)\n\n\tj := 0\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tl[i] = evenIndices[j]\n\t\t\tj++\n\t\t}\n\t}\n\n\treturn l\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tcount := 0\n\tfor count < n {\n\t\ti, j = j, i+j\n\t\tif isPrime(i) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn i\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tsqrtn := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrtn; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/40", "generation": "\n    sort.Ints(l)\n    for i := 0; i < len(l)-2; i++ {\n        left, right := i+1, len(l)-1\n        for left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/41", "generation": "\n    return n - 1\n}\n\n"}
{"task_id": "Go/42", "generation": "\n    for i := 0; i < len(l); i++ {\n        l[i]++\n    }\n    return l\n}\n\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[-num]; ok {\n            return true\n        }\n        m[num] = true\n    }\n    return false\n}\n\n"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return strconv.Itoa(x)\n    } else {\n        return change_base(x/base, base) + strconv.Itoa(x%base)\n    }\n}\n\n"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 || n == 2 {\n\t\treturn 2\n\t} else if n == 3 {\n\t\treturn 0\n\t} else {\n\t\ta, b, c, d := 0, 2, 0, 4\n\t\tfor n-4 > 0 {\n\t\t\ta, b, c, d = b, c, d, a+b+c+d\n\t\t\tn--\n\t\t}\n\t\treturn d\n\t}\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}\n\n"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/49", "generation": "\n    return PowMod(2,n,p)\n}\n\nfunc PowMod(a int, b int, p int) int {\n    if b == 0 {\n        return 1\n    }\n    if b%2 == 0 {\n        return PowMod(a*a%p, b/2, p)\n    }\n    return a * PowMod(a*a%p, (b-1)/2, p) % p\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    reg, _ := regexp.Compile(\"[aeiouAEIOU]\")\n    return reg.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n\n"}
{"task_id": "Go/54", "generation": "\n    m0 := make(map[rune]bool)\n    m1 := make(map[rune]bool)\n\n    for _, c := range s0 {\n        m0[c] = true\n    }\n\n    for _, c := range s1 {\n        m1[c] = true\n    }\n\n    return reflect.DeepEqual(m0, m1)\n}\n\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}\n"}
{"task_id": "Go/56", "generation": "\n    var stack []rune\n    for _, c := range brackets {\n        switch c {\n        case '<':\n            stack = append(stack, c)\n        case '>':\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    increase := true\n    decrease := true\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decrease = false\n        }\n        if l[i] < l[i-1] {\n            increase = false\n        }\n    }\n\n    return increase || decrease\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m1 := make(map[int]bool)\n    for _, item := range l1 {\n        m1[item] = true\n    }\n\n    common := make([]int, 0)\n    for _, item := range l2 {\n        if _, ok := m1[item]; ok {\n            common = append(common, item)\n            delete(m1, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}\n\n"}
{"task_id": "Go/59", "generation": "\n    factor := 2\n    for factor * factor <= n {\n        if n % factor != 0 {\n            factor++\n        } else {\n            n /= factor\n        }\n    }\n    return n\n}\n\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    openBrackets := 0\n    for _, char := range brackets {\n        if string(char) == \"(\" {\n            openBrackets++\n        } else if string(char) == \")\" {\n            if openBrackets == 0 {\n                return false\n            }\n            openBrackets--\n        }\n    }\n    return openBrackets == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\treturn 1\n\t}\n\n\ta, b, c := 0, 0, 1\n\tfor i := 3; i <= n; i++ {\n\t\ta, b, c = b, c, a+b+c\n\t}\n\n\treturn c\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    length := len(str)\n    if shift > length {\n        reverse := reverseString(str)\n        return reverse\n    }\n    return str[length-shift:] + str[:length-shift]\n}\n\nfunc reverseString(input string) (result string) {\n    for _, v := range input {\n        result = string(v) + result\n    }\n    return\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif 'A' <= c && c <= 'Z' {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tarr := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(arr[0])\n\toranges, _ := strconv.Atoi(arr[2])\n\ttotal := apples + oranges\n\treturn total - n\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEven := math.MaxInt64\n    smallestIndex := math.MaxInt64\n    smallestValue := math.MaxInt64\n    for index, value := range arr {\n        if value % 2 == 0 && value < smallestEven {\n            smallestEven = value\n            smallestIndex = index\n            smallestValue = value\n        } else if value % 2 == 0 && value == smallestEven {\n            if index < smallestIndex {\n                smallestIndex = index\n            }\n        }\n    }\n    if smallestEven == math.MaxInt64 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n\n    maxFreq := 0\n    maxVal := -1\n    for k, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n            maxVal = k\n        }\n    }\n\n    return maxVal\n}\n"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    var res []int\n    for len(lst) > 0 {\n        res = append(res, lst[0])\n        lst = lst[1:]\n        if len(lst) > 0 {\n            res = append(res, lst[len(lst)-1])\n            lst = lst[:len(lst)-1]\n        }\n    }\n    return res\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        // calculate the semi-perimeter\n        s := (a + b + c) / 2\n        // calculate the area using Heron's formula\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}\n"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    if isPalindrome(q) && sum < w {\n        return true\n    }\n    return false\n}\n\nfunc isPalindrome(q []int) bool {\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/73", "generation": "\n    count := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/74", "generation": "\n    var res []string\n    var count1, count2 int\n    for _, v := range lst1 {\n        count1 += len(v)\n    }\n    for _, v := range lst2 {\n        count2 += len(v)\n    }\n    if count1 < count2 {\n        res = lst1\n    } else if count1 > count2 {\n        res = lst2\n    } else {\n        res = lst1\n    }\n    return res\n}\n"}
{"task_id": "Go/75", "generation": "\n\tisPrime := func(n int) bool {\n\t\tif n < 2 {\n\t\t\treturn false\n\t\t}\n\t\tfor i := 2; i*i <= n; i++ {\n\t\t\tif n%i == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tprimes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\n\tfor _, prime := range primes {\n\t\tif prime*prime > a {\n\t\t\tbreak\n\t\t}\n\t\tif a%prime == 0 && isPrime(a/prime) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if x < n {\n        return false\n    }\n    for i := 2; i <= n; i++ {\n        if x == i {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/77", "generation": "\n    a = int(math.Abs(float64(a)))\n    n := int(math.Cbrt(float64(a)))\n    return n*n*n == a\n}\n\n"}
{"task_id": "Go/78", "generation": "\n\tprimes := []int{2, 3, 5, 7}\n\tcount := 0\n\tfor _, c := range num {\n\t\tswitch c {\n\t\tcase 'A', 'B', 'D', 'E', 'F':\n\t\t\tcount++\n\t\tcase '1', '2', '3', '4', '5', '6', '7', '8', '9', '0':\n\t\t\tfor _, v := range primes {\n\t\t\t\tif int(c-'0') == v {\n\t\t\t\t\tcount++\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/79", "generation": "\n    binary := \"\"\n    for decimal > 0 {\n        remainder := decimal % 2\n        decimal = decimal / 2\n        binary = fmt.Sprintf(\"%d%s\", remainder, binary)\n    }\n    return \"db\" + binary + \"db\"\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) != 3 {\n        return false\n    }\n    m := make(map[rune]bool)\n    for i := 0; i < len(s); i++ {\n        if _, ok := m[rune(s[i])]; ok {\n            return false\n        }\n        m[rune(s[i])] = true\n        if i+2 < len(s) && s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var letterGrades []string\n    for _, grade := range grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades, \"A-\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades, \"B\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades, \"B-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades, \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades, \"C\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades, \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i * i <= length; i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 10\n    }\n\n    if n == 2 {\n        return 90\n    }\n\n    if n == 3 {\n        return 720\n    }\n\n    if n == 4 {\n        return 40320\n    }\n\n    if n == 5 {\n        return 168000\n    }\n\n    if n == 6 {\n        return 5040000\n    }\n\n    if n == 7 {\n        return 72960000\n    }\n\n    if n == 8 {\n        return 590490000\n    }\n\n    if n == 9 {\n        return 3628800000\n    }\n\n    return 0\n}\n"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.Itoa(sum)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        chars := strings.Split(word, \"\")\n        sort.Strings(chars)\n        words[i] = strings.Join(chars, \"\")\n    }\n    return strings.Join(words, \" \")\n}\n\n"}
{"task_id": "Go/87", "generation": "\n    var res [] [2]int\n    for i, row := range lst {\n        for j, num := range row {\n            if num == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}\n"}
{"task_id": "Go/88", "generation": "\n    sum := array[0] + array[len(array)-1]\n    if sum%2 == 0 {\n        sort.Ints(array)\n    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i] < array[j]\n        })\n    }\n    return array\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create a map to hold the encrypted characters\n    encrypted := make(map[rune]rune)\n\n    // Create a map to hold the original characters\n    original := make(map[rune]rune)\n\n    // Create a string builder to hold the encrypted characters\n    encryptedStr := \"\"\n\n    // Loop through the string\n    for _, c := range s {\n        // If the character is a letter\n        if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n            // If the character is uppercase\n            if strings.ContainsRune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n                // Encrypt the character\n                encrypted[c] = rune(int(c) + 2*2)\n                original[c] = c\n            } else {\n                // Encrypt the character\n                encrypted[c] = rune(int(c) + 2)\n                original[c] = c\n            }\n        } else {\n            // If the character is not a letter, add it to the encrypted string\n            encryptedStr += string(c)\n        }\n    }\n\n    // Loop through the encrypted string\n    for i, c := range encryptedStr {\n        // If the character is a letter\n        if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n            // If the character is uppercase\n            if strings.ContainsRune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n                // Add the encrypted character to the string\n                encryptedStr = encryptedStr[:i] + string(encrypted[c]) + encryptedStr[i+1:]\n            } else {\n                // Add the encrypted character to the string\n                encryptedStr = encryptedStr[:i] + string(encrypted[c]) + encryptedStr[i+1:]\n            }\n        }\n    }\n\n    // Return the encrypted string\n    return encryptedStr\n}\n\n//"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > lst[0] {\n            return lst[i]\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`[.?!]`)\n    sentences := re.Split(S, -1)\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) > 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/92", "generation": "\n\tswitch x := x.(type) {\n\tcase int:\n\t\tswitch y := y.(type) {\n\t\tcase int:\n\t\t\tswitch z := z.(type) {\n\t\t\tcase int:\n\t\t\t\treturn x == y || x == z || y == z\n\t\t\tdefault:\n\t\t\t\treturn false\n\t\t\t}\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\tdefault:\n\t\treturn false\n\t}\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encodedMessage := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            if char == 'a' || char == 'A' {\n                encodedMessage += \"4\"\n            } else if char == 'e' || char == 'E' {\n                encodedMessage += \"3\"\n            } else if char == 'i' || char == 'I' {\n                encodedMessage += \"1\"\n            } else if char == 'o' || char == 'O' {\n                encodedMessage += \"0\"\n            } else if char == 'u' || char == 'U' {\n                encodedMessage += \"|\"\n            }\n        } else {\n            encodedMessage += string(char)\n        }\n    }\n    return encodedMessage\n}\n\n"}
{"task_id": "Go/94", "generation": "\n    var maxPrime int\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumOfDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumOfDigits(n int) int {\n    str := strconv.Itoa(n)\n    sum := 0\n    for _, digit := range str {\n        digitInt, _ := strconv.Atoi(string(digit))\n        sum += digitInt\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    allLower := true\n    allUpper := true\n\n    for _, value := range dict {\n        key, ok := value.(string)\n        if !ok {\n            allUpper = false\n        } else {\n            if !strings.ToLower(key) == key {\n                allLower = false\n            }\n            if !strings.ToUpper(key) == key {\n                allUpper = false\n            }\n        }\n    }\n\n    return allLower || allUpper\n}\n"}
{"task_id": "Go/96", "generation": "\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/97", "generation": "\n    product := a * b\n    digits := make([]int, 0)\n    for product > 0 {\n        digit := product % 10\n        digits = append(digits, digit)\n        product = product / 10\n    }\n    result := 1\n    for _, digit := range digits {\n        result *= digit\n    }\n    return result\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if strings.Contains(\"AEIOU\", string(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(math.Round(num))\n    }\n    return int(math.Ceil(num))\n}\n\n"}
{"task_id": "Go/100", "generation": "\n    var res []int\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n            res = append(res, n+2*i)\n        } else {\n            res = append(res, n+2*i)\n        }\n    }\n    return res\n}\n\n"}
{"task_id": "Go/101", "generation": "\n    words := strings.Split(s, \",\")\n    for i, word := range words {\n        words[i] = strings.TrimSpace(word)\n    }\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n    for i := y; i >= x; i -= 2 {\n        if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := int(math.Round(float64(sum) / float64(m-n+1)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var res []int\n    for _, num := range x {\n        if num%2 == 0 {\n            res = append(res, num)\n        }\n    }\n    sort.Ints(res)\n    return res\n}\n"}
{"task_id": "Go/105", "generation": "\n    var res []string\n    var one, two, four, five, eight []int\n    for _, num := range arr {\n        switch num {\n        case 1: one = append(one, num)\n        case 2: two = append(two, num)\n        case 4: four = append(four, num)\n        case 5: five = append(five, num)\n        case 8: eight = append(eight, num)\n        }\n    }\n    sort.Ints(one)\n    sort.Ints(two)\n    sort.Ints(four)\n    sort.Ints(five)\n    sort.Ints(eight)\n    res = append(res, convert(one, \"One\"))\n    res = append(res, convert(two, \"Two\"))\n    res = append(res, convert(four, \"Four\"))\n    res = append(res, convert(five, \"Five\"))\n    res = append(res, convert(eight, \"Eight\"))\n    return res\n}\n\nfunc convert(arr []int, s string) string {\n    var res string\n    for _, num := range arr {\n        res += s\n    }\n    return res\n}\n\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial(i)\n        } else {\n            result[i] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n"}
{"task_id": "Go/107", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for i := 1; i <= n; i++ {\n        str := strconv.Itoa(i)\n        if str == reverseString(str) {\n            if i % 2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num < 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i+1)%len(arr)] {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n    for _, v := range lst1 {\n        if v%2 != 0 {\n            for _, v2 := range lst2 {\n                if v2%2 == 0 {\n                    return \"YES\"\n                }\n            }\n        }\n    }\n    return \"NO\"\n}\n"}
{"task_id": "Go/111", "generation": "\n    counts := make(map[rune]int)\n    for _, char := range test {\n        if char != ' ' {\n            counts[char]++\n        }\n    }\n    return counts\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result [2]interface{}\n    var str string\n    var isPalindrome bool\n\n    for _, char := range s {\n        if string(char) != c {\n            str += string(char)\n        }\n    }\n\n    isPalindrome = isPalindromeCheck(str)\n\n    result[0] = str\n    result[1] = isPalindrome\n\n    return result\n}\n\nfunc isPalindromeCheck(s string) bool {\n    s = strings.ToLower(s)\n    length := len(s)\n\n    for i := 0; i < length/2; i++ {\n        if s[i] != s[length-i-1] {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/113", "generation": "\n    var res []string\n    for i, str := range lst {\n        count := 0\n        for _, c := range str {\n            if int(c-'0')%2 != 0 {\n                count++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"the number %dn the string %d of the input.\", count, i+1))\n    }\n    return res\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt64\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    count := 0\n    for _, row := range grid {\n        for _, well := range row {\n            if well == 1 {\n                count++\n            }\n        }\n    }\n    return count / capacity\n}\n"}
{"task_id": "Go/116", "generation": "\n    var res []int\n    var ones, zeros, twos []int\n    for _, num := range arr {\n        if num == 0 {\n            zeros = append(zeros, num)\n        } else if num == 1 {\n            ones = append(ones, num)\n        } else if num == 2 {\n            twos = append(twos, num)\n        }\n    }\n    sort.Ints(ones)\n    sort.Ints(twos)\n    res = append(res, ones...)\n    res = append(res, twos...)\n    res = append(res, zeros...)\n    return res\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc countConsonants(word string) int {\n    vowels := \"aeiouAEIOU\"\n    count := 0\n    for _, letter := range word {\n        if strings.ContainsRune(vowels, letter) {\n            continue\n        }\n        count++\n    }\n    return count\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 2; i-- {\n        if word[i] in vowels && word[i-1] != ' ' && word[i-2] != ' ' {\n            for j := i - 1; j >= 1; j-- {\n                if word[j] in vowels {\n                    return string(word[j])\n                }\n            }\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n    for _, str := range lst {\n        stack := []rune{}\n        for _, ch := range str {\n            if ch == '(' {\n                stack = append(stack, ch)\n            } else if ch == ')' {\n                if len(stack) == 0 {\n                    return \"No\"\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n        if len(stack) != 0 {\n            return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[:k]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/123", "generation": "\n    var sequence []int\n    for n != 1 {\n        if n % 2 != 0 {\n            sequence = append(sequence, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        }\n        if n % 2 != 0 {\n            n = 3*n + 1\n        }\n    }\n    sequence = append(sequence, 1)\n    sort.Ints(sequence)\n    return sequence\n}\n"}
{"task_id": "Go/124", "generation": "\n    dateParts := strings.Split(date, \"\")\n    if len(dateParts) != 10 {\n        return false\n    }\n\n    month, _ := strconv.Atoi(dateParts[2:4])\n    day, _ := strconv.Atoi(dateParts[4:6])\n    year, _ := strconv.Atoi(dateParts[6:10])\n\n    if month < 1 || month > 12 || day < 1 || year < 1 {\n        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false\n        }\n    } else {\n        return false\n    }\n\n    return true\n}\n\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return getOddLowerCaseLetters(txt)\n    }\n}\n\nfunc getOddLowerCaseLetters(txt string) []string {\n    var result []string\n    for _, c := range txt {\n        if 'a' <= c && c <= 'z' && int(c)%2 != 0 {\n            result = append(result, string(c))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n\n    prev := lst[0]\n    duplicates := 0\n\n    for _, num := range lst {\n        if num == prev {\n            duplicates++\n            if duplicates > 1 {\n                return false\n            }\n        } else {\n            prev = num\n            duplicates = 0\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n\n    if start > end {\n        return \"NO\"\n    }\n\n    length := end - start\n\n    if length < 2 {\n        return \"NO\"\n    }\n\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return \"NO\"\n        }\n    }\n\n    return \"YES\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    product := 1\n    sum := 0\n\n    for _, num := range arr {\n        product *= num\n        sum += int(math.Abs(float64(num)))\n    }\n\n    return product * sum\n}\n\n"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    m := len(grid[0])\n    visited := make([][]bool, n)\n    for i := range visited {\n        visited[i] = make([]bool, m)\n    }\n    type cell struct {\n        x, y, k int\n    }\n    pq := []cell{}\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if grid[i][j] == 1 {\n                pq = append(pq, cell{x: i, y: j, k: 0})\n                visited[i][j] = true\n            }\n        }\n    }\n    sort.Slice(pq, func(i, j int) bool {\n        return pq[i].k < pq[j].k\n    })\n    res := []int{}\n    for len(pq) != 0 {\n        cur := pq[0]\n        pq = pq[1:]\n        res = append(res, grid[cur.x][cur.y])\n        for _, nxt := range [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}} {\n            nx, ny := cur.x+nxt[0], cur.y+nxt[1]\n            if nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny] {\n                pq = append(pq, cell{x: nx, y: ny, k: cur.k + 1})\n                visited[nx][ny] = true\n            }\n        }\n        sort.Slice(pq, func(i, j int) bool {\n            return pq[i].k < pq[j].k\n        })\n    }\n    return res\n}\n"}
{"task_id": "Go/130", "generation": "\n    var res = make([]float64, n+1)\n    res[0] = 3\n    if n > 0 {\n        res[1] = 1\n        if n > 1 {\n            res[2] = 2\n            for i := 3; i <= n; i++ {\n                if i%2 == 0 {\n                    res[i] = res[i-1] + res[i-2] + res[i-3]\n                } else {\n                    res[i] = res[i-1] - res[i-2] + res[i-3]\n                }\n            }\n        }\n    }\n    return res\n}\n\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    return product\n}\n\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        num = math.Ceil(num)\n        sum += num * num\n    }\n    return int(sum)\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt)-1]\n\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n\n    if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) &&\n        !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar-1) {\n        return true\n    }\n\n    return false\n}\n"}
{"task_id": "Go/135", "generation": "\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            for j := i + 2; j < len(arr); j++ {\n                if arr[j] <= arr[i] {\n                    return j\n                }\n            }\n            return -1\n        }\n    }\n    return -1\n}\n"}
{"task_id": "Go/136", "generation": "\n    var maxNeg, minPos int\n    maxNeg, minPos = math.MinInt64, math.MaxInt64\n    hasNeg, hasPos := false, false\n    for _, num := range lst {\n        if num < minPos {\n            minPos = num\n            hasPos = true\n        }\n        if num > maxNeg {\n            maxNeg = num\n            hasNeg = true\n        }\n    }\n    if !hasNeg {\n        return [2]interface{}{nil, minPos}\n    }\n    if !hasPos {\n        return [2]interface{}{maxNeg, nil}\n    }\n    return [2]interface{}{maxNeg, minPos}\n}\n"}
{"task_id": "Go/137", "generation": "\n    var result interface{} = nil\n\n    switch a := a.(type) {\n    case int:\n        if b, ok := b.(int); ok {\n            if a > b {\n                result = a\n            }\n        }\n    case float64:\n        if b, ok := b.(float64); ok {\n            if a > b {\n                result = a\n            }\n        }\n    case string:\n        if b, ok := b.(string); ok {\n            if a > b {\n                result = a\n            }\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n    }\n    return sum == n\n}\n"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n    }\n\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/140", "generation": "\n    var newText string\n    var lastCharWasSpace bool = false\n    for _, c := range text {\n        if c == ' ' {\n            if !lastCharWasSpace {\n                newText += \"_\"\n                lastCharWasSpace = true\n            } else {\n                newText += \"-\"\n            }\n        } else {\n            newText += string(c)\n            lastCharWasSpace = false\n        }\n    }\n    return newText\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if len(file_name) > 3 && file_name[len(file_name)-3:len(file_name)] == \".txt\" &&\n    len(strings.Fields(file_name)) > 1 && strings.Fields(file_name)[0][0] >= 'a' && strings.Fields(file_name)[0][0] <= 'z' &&\n    strings.Fields(file_name)[0][len(strings.Fields(file_name)[0])-1] >= 'A' && strings.Fields(file_name)[0][len(strings.Fields(file_name)[0])-1] <= 'Z' {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var primeWords []string\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n\n    return strings.Join(primeWords, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    if x == \"True\" {\n        return true\n    }\n    if n == \"False\" {\n        return false\n    }\n\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    if len(xParts) != 2 || len(nParts) != 2 {\n        return false\n    }\n\n    xNumerator, err := strconv.Atoi(xParts[0])\n    if err != nil {\n        return false\n    }\n\n    nNumerator, err := strconv.Atoi(nParts[0])\n    if err != nil {\n        return false\n    }\n\n    nDenominator, err := strconv.Atoi(nParts[1])\n    if err != nil {\n        return false\n    }\n\n    if nDenominator == 0 {\n        return false\n    }\n\n    return xNumerator * nNumerator % nDenominator == 0\n}\n\n"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        num int\n        sum int\n    }\n\n    pairs := make([]pair, len(nums))\n    for i, num := range nums {\n        pairs[i] = pair{num, sumDigits(num)}\n    }\n\n    sort.Slice(pairs, func(i, j int) bool {\n        if pairs[i].sum == pairs[j].sum {\n            return pairs[i].num < pairs[j].num\n        }\n        return pairs[i].sum < pairs[j].sum\n    })\n\n    sortedNums := make([]int, len(nums))\n    for i, pair := range pairs {\n        sortedNums[i] = pair.num\n    }\n\n    return sortedNums\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    for num != 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        str := strconv.Itoa(num)\n        if num > 10 && (str[0] == '1' || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9') {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i*i - i + i\n    }\n    return n - countMultiplesOf3(a)\n}\n\nfunc countMultiplesOf3(a []int) int {\n    count := 0\n    for _, v := range a {\n        if v%3 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/148", "generation": "\n    var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n\n    pos1, pos2 := -1, -1\n\n    for i, planet := range planets {\n        if planet == planet1 {\n            pos1 = i\n        }\n        if planet == planet2 {\n            pos2 = i\n        }\n    }\n\n    if pos1 == -1 || pos2 == -1 {\n        return result\n    }\n\n    if pos1 < pos2 {\n        result = planets[pos1+1 : pos2]\n    } else {\n        result = planets[pos2+1 : pos1]\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/149", "generation": "\n    var oddLst []string\n    for _, v := range lst {\n        if len(v)%2 != 0 {\n            oddLst = append(oddLst, v)\n        }\n    }\n    sort.Slice(oddLst, func(i, j int) bool {\n        return len(oddLst[i]) < len(oddLst[j])\n    })\n    return oddLst\n}\n"}
{"task_id": "Go/150", "generation": "\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        if int(num) % 2 != 0 {\n            sum += math.Pow(num, 2)\n        }\n    }\n    return int(sum)\n}\n\n"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i,v := range game {\n        result[i] = int(math.Abs(float64(v - guess[i])))\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    strongestExtension := \"\"\n    strongestStrength := math.MinInt64\n\n    for _, extension := range extensions {\n        capCount := 0\n        smCount := 0\n        for _, char := range extension {\n            if unicode.IsUpper(char) {\n                capCount++\n            }\n            if unicode.IsLower(char) {\n                smCount++\n            }\n        }\n        strength := capCount - smCount\n        if strength > strongestStrength {\n            strongestStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    if strongestExtension == \"\" {\n        return fmt.Sprintf(\"%s.%s\", class_name, \"StrongestExtensionName\")\n    }\n\n    return fmt.Sprintf(\"%s.%s\", class_name, strongestExtension)\n}\n"}
{"task_id": "Go/154", "generation": "\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[1:] + string(b[0])\n    }\n    return false\n}\n\n"}
{"task_id": "Go/155", "generation": "\n    even := 0\n    odd := 0\n    for num != 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num = num / 10\n    }\n    return [2]int{even, odd}\n}\n\n"}
{"task_id": "Go/156", "generation": "\n    val := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    syb := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    roman := \"\"\n    for i := 0; i < len(val); i++ {\n        for number >= val[i] {\n            number -= val[i]\n            roman += syb[i]\n        }\n    }\n    return strings.ToLower(roman)\n}\n"}
{"task_id": "Go/157", "generation": "\n    if a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueCount := len(uniqueCharacters(word))\n        if uniqueCount > maxUnique {\n            maxUnique = uniqueCount\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc uniqueCharacters(word string) map[rune]bool {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return unique\n}\n"}
{"task_id": "Go/159", "generation": "\n    if need > remaining {\n        number += remaining\n        remaining = 0\n    } else {\n        number += need\n        remaining -= need\n    }\n    return []int{number, remaining}\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"//\":\n            result = int(math.Floor(float64(result) / float64(operand[i])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n    var res []rune\n    for _, c := range s {\n        if unicode.IsLetter(c) {\n            if unicode.IsLower(c) {\n                res = append(res, unicode.ToUpper(c))\n            } else {\n                res = append(res, unicode.ToLower(c))\n            }\n        } else {\n            res = append(res, c)\n        }\n    }\n    if len(res) == 0 {\n        return reverse(s)\n    }\n    return string(res)\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"}
