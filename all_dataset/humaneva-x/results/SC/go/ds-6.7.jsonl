{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) <= threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    stack := []rune{}\n    result := []string{}\n    current_string := \"\"\n    for _, char := range paren_string {\n        if char == '(' {\n            stack = append(stack, char)\n            current_string += string(char)\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n            current_string += string(char)\n            if len(stack) == 0 {\n                result = append(result, current_string)\n                current_string = \"\"\n            }\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/2", "generation": "\n    return number - math.Floor(number)\n}\n"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    sum := 0.0\n    for _, n := range numbers {\n        sum += math.Abs(n - mean)\n    }\n    return sum / float64(len(numbers))\n}\n"}
{"task_id": "Go/5", "generation": "\n\tresult := make([]int, 0, len(numbers)*2-1)\n\tif len(numbers) > 0 {\n\t\tresult = append(result, numbers[0])\n\t\tfor _, num := range numbers[1:] {\n\t\t\tresult = append(result, delimeter)\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/6", "generation": "\n    max_depths := make([]int, 0)\n    for _, group := range strings.Split(paren_string, \" \") {\n        current_depth := 0\n        max_depth := 0\n        for _, char := range group {\n            if string(char) == \"(\" {\n                current_depth += 1\n                if current_depth > max_depth {\n                    max_depth = current_depth\n                }\n            } else if string(char) == \")\" {\n                current_depth -= 1\n            }\n        }\n        max_depths = append(max_depths, max_depth)\n    }\n    return max_depths\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, number := range numbers {\n\t\tsum += number\n\t\tproduct *= number\n\t}\n\treturn [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        result[i] = max\n    }\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    runes := []rune(str)\n    for i := len(runes); i >= 0; i-- {\n        if IsPalindrome(string(runes[0:i])) {\n            suffix := runes[i:]\n            reversedSuffix := make([]rune, 0)\n            for j := len(suffix) - 1; j >= 0; j-- {\n                reversedSuffix = append(reversedSuffix, suffix[j])\n            }\n            return str + string(reversedSuffix)\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/11", "generation": "\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    longest := \"\"\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    if longest == \"\" {\n        return nil\n    }\n    return longest\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    prefixes := make([]string, 0)\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[0:i])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1]\n}\n"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    m := make(map[rune]bool)\n    for _, char := range str {\n        m[char] = true\n    }\n    return len(m)\n}\n"}
{"task_id": "Go/17", "generation": "\n    notes := strings.Split(music_string, \" \")\n    beats := make([]int, len(notes))\n    for i, note := range notes {\n        switch note {\n        case \"o\":\n            beats[i] = 4\n        case \"o|\":\n            beats[i] = 2\n        case \".|\":\n            beats[i] = 1\n        }\n    }\n    return beats\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    nums := strings.Split(numbers, \" \")\n    sort.Slice(nums, func(i, j int) bool {\n        return numeralMap[nums[i]] < numeralMap[nums[j]]\n    })\n    return strings.Join(nums, \" \")\n}\n\nvar numeralMap = map[string]int{\n    \"zero\":  0,\n    \"one\":   1,\n    \"two\":   2,\n    \"three\": 3,\n    \"four\":  4,\n    \"five\":  5,\n    \"six\":   6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\":  9,\n}\n\nvar numeralMapReverse = map[int]string{\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\",\n}\n"}
{"task_id": "Go/20", "generation": "\n\tsort.Float64s(numbers)\n\tminDiff := math.MaxFloat64\n\tvar closestNumbers [2]float64\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tif diff := numbers[i+1] - numbers[i]; diff < minDiff {\n\t\t\tminDiff = diff\n\t\t\tclosestNumbers[0] = numbers[i]\n\t\t\tclosestNumbers[1] = numbers[i+1]\n\t\t}\n\t}\n\treturn closestNumbers\n}\n"}
{"task_id": "Go/21", "generation": "\n\tmin := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t}\n\n\trescaled := make([]float64, len(numbers))\n\tfor i, num := range numbers {\n\t\trescaled[i] = (num - min)\n\t}\n\n\tmax := rescaled[0]\n\tfor _, num := range rescaled {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\n\tfor i, num := range rescaled {\n\t\trescaled[i] = num / max\n\t}\n\n\treturn rescaled\n}\n"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, value := range values {\n\t\tif val, ok := value.(int); ok {\n\t\t\tresult = append(result, val)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n\tfor i := n / 2; i > 0; i-- {\n\t\tif n%i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}\n"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n\tresult := make([]int, 0)\n\tcounts := make(map[int]int)\n\n\tfor _, num := range numbers {\n\t\tcounts[num]++\n\t\tif counts[num] == 1 {\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\n\treturn result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result []rune\n    for _, char := range str {\n        if char >= 'a' && char <= 'z' {\n            result = append(result, char-32)\n        } else if char >= 'A' && char <= 'Z' {\n            result = append(result, char+32)\n        } else {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n"}
{"task_id": "Go/28", "generation": "\n\tvar result string\n\tfor _, str := range strings {\n\t\tresult += str\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/30", "generation": "\n\tvar positive []int\n\tfor _, num := range l {\n\t\tif num > 0 {\n\t\t\tpositive = append(positive, num)\n\t\t}\n\t}\n\treturn positive\n}\n"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/32", "generation": "\n    // find largest non zero coefficient\n    max_coeff := 0\n    for _, coeff := range xs {\n        if coeff > max_coeff {\n            max_coeff = coeff\n        }\n    }\n    // find zero of polynomial\n    for x := 0.0; x <= 1.0; x += 0.01 {\n        if Poly(xs, x) == 0.0 {\n            return x\n        }\n    }\n    return 0.0\n}\n"}
{"task_id": "Go/33", "generation": "\n    var divisibleByThree []int\n    for i, v := range l {\n        if i%3 == 0 {\n            divisibleByThree = append(divisibleByThree, v)\n        }\n    }\n    sort.Ints(divisibleByThree)\n    j := 0\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = divisibleByThree[j]\n            j++\n        } else {\n            l[i] = v\n        }\n    }\n    return l\n}\n"}
{"task_id": "Go/34", "generation": "\n    uniqueMap := make(map[int]bool)\n    for _, v := range l {\n        uniqueMap[v] = true\n    }\n\n    result := make([]int, len(uniqueMap))\n    i := 0\n    for key := range uniqueMap {\n        result[i] = key\n        i++\n    }\n\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/35", "generation": "\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\tevenIndices := make([]int, 0)\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tj := 0\n\tfor i := 0; i < len(l); i += 2 {\n\t\tl[i] = evenIndices[j]\n\t\tj++\n\t}\n\treturn l\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[2]}, runes[0:2]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tcount := 0\n\tfor count < n {\n\t\ti, j = j, i+j\n\t\tif isPrime(j) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn j\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrt; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/40", "generation": "\n\tsort.Ints(l)\n\tfor i := 0; i < len(l)-2; i++ {\n\t\tleft := i + 1\n\t\tright := len(l) - 1\n\t\tfor left < right {\n\t\t\tsum := l[i] + l[left] + l[right]\n\t\t\tif sum == 0 {\n\t\t\t\treturn true\n\t\t\t} else if sum < 0 {\n\t\t\t\tleft += 1\n\t\t\t} else {\n\t\t\t\tright -= 1\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}\n\n"}
{"task_id": "Go/42", "generation": "\n\tfor i := range l {\n\t\tl[i]++\n\t}\n\treturn l\n}\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\n"}
{"task_id": "Go/44", "generation": "\n    return strconv.FormatInt(int64(x), base)\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n\tif n < 2 {\n\t\treturn n\n\t}\n\ta, b, c, d := 0, 2, 0, 0\n\tfor i := 3; i <= n; i++ {\n\t\ta, b, c, d = b, c, d, (a+b+c)%10\n\t}\n\treturn d\n}\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1] + l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}\n"}
{"task_id": "Go/48", "generation": "\n\ttext = strings.ToLower(text)\n\ttext = strings.ReplaceAll(text, \" \", \"\")\n\ttext = strings.ReplaceAll(text, \",\", \"\")\n\ttext = strings.ReplaceAll(text, \".\", \"\")\n\ttext = strings.ReplaceAll(text, \":\", \"\")\n\ttext = strings.ReplaceAll(text, \";\", \"\")\n\ttext = strings.ReplaceAll(text, \"?\", \"\")\n\ttext = strings.ReplaceAll(text, \"\u00bf\", \"\")\n\ttext = strings.ReplaceAll(text, \"\u00a1\", \"\")\n\ttext = strings.ReplaceAll(text, \"\u00e4\", \"a\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"o\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"u\")\n\ttext = strings.ReplaceAll(text, \"\u00df\", \"ss\")\n\ttext = strings.ReplaceAll(text, \"\u00e8\", \"e\")\n\ttext = strings.ReplaceAll(text, \"\u00e9\", \"e\")\n\ttext = strings.ReplaceAll(text, \"\u00ea\", \"e\")\n\ttext = strings.ReplaceAll(text, \"\u00eb\", \"e\")\n\ttext = strings.ReplaceAll(text, \"\u00ec\", \"i\")\n\ttext = strings.ReplaceAll(text, \"\u00ed\", \"i\")\n\ttext = strings.ReplaceAll(text, \"\u00ee\", \"i\")\n\ttext = strings.ReplaceAll(text, \"\u00ef\", \"i\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"u\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"u\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"u\")\n\ttext = strings.ReplaceAll(text, \"\ufffd\", \"u\")\n\ttext = strings.ReplaceAll(text, \"\u00b4\", \"\")\n\ttext = strings.ReplaceAll(text, \"`\", \"\")\n\ttext = strings.ReplaceAll(text, \"~\", \"\")\n\ttext = strings.ReplaceAll(text, \"^\", \"\")\n\ttext = strings.ReplaceAll(text, \"*\", \"\")\n\ttext = strings.ReplaceAll(text, \"+\", \"\")\n\ttext = strings.Replace"}
{"task_id": "Go/49", "generation": "\n    var res int = 1\n    for i := 0; i < n; i++ {\n        res = (res * 2) % p\n    }\n    return res\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a'+26)%26+'a')\n    }\n    return string(newRunes)\n}\n\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"(?i)[aeiou]\")\n    return re.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _, num := range l {\n        if num >= t {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n    if len(s0) != len(s1) {\n        return false\n    }\n    m := make(map[rune]int)\n    for _, c := range s0 {\n        m[c]++\n    }\n    for _, c := range s1 {\n        if _, ok := m[c]; !ok {\n            return false\n        }\n        m[c]--\n        if m[c] < 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/55", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\n\ta, b := 0, 1\n\tfor i := 2; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\treturn b\n}\n"}
{"task_id": "Go/56", "generation": "\n\tstack := []rune{}\n\tfor _, b := range brackets {\n\t\tswitch b {\n\t\tcase '<':\n\t\t\tstack = append(stack, b)\n\t\tcase '>':\n\t\t\tif len(stack) == 0 || stack[len(stack)-1] != '<' {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n"}
{"task_id": "Go/57", "generation": "\n\tincreasing := true\n\tdecreasing := true\n\n\tfor i := 0; i < len(l)-1; i++ {\n\t\tif l[i] > l[i+1] {\n\t\t\tincreasing = false\n\t\t}\n\t\tif l[i] < l[i+1] {\n\t\t\tdecreasing = false\n\t\t}\n\t}\n\n\treturn increasing || decreasing\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l1 {\n        m[item] = true\n    }\n\n    common := []int{}\n    for _, item := range l2 {\n        if _, ok := m[item]; ok {\n            // ensures that each value only gets added once\n            delete(m, item)\n            common = append(common, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}\n"}
{"task_id": "Go/59", "generation": "\n\tmaxPrime := -1\n\n\tfor n%2 == 0 {\n\t\tmaxPrime = 2\n\t\tn >>= 1\n\t}\n\n\tfor i := 3; i <= int(math.Sqrt(float64(n))); i += 2 {\n\t\tfor n%i == 0 {\n\t\t\tmaxPrime = i\n\t\t\tn = n / i\n\t\t}\n\t}\n\n\tif n > 2 {\n\t\tmaxPrime = n\n\t}\n\n\treturn maxPrime\n}\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if b == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n\tderivative := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tderivative[i-1] = xs[i] * i\n\t}\n\treturn derivative\n}\n\n"}
{"task_id": "Go/63", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\n\ta, b := 0, 1\n\tfor i := 2; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\n\treturn b\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    count := 0\n    for _, c := range strings.ToLower(s) {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    if shift > len(str) {\n        return reverse(str)\n    }\n    return str[len(str)-shift:] + str[:len(str)-shift]\n}\n\nfunc reverse(input string) string {\n    runes := []rune(input)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif 'A' <= c && c <= 'Z' {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tstr := strings.Fields(s)\n\tapples, _ := strconv.Atoi(str[0])\n\toranges, _ := strconv.Atoi(str[2])\n\treturn n - apples - oranges\n}\n"}
{"task_id": "Go/68", "generation": "\n    smallestEvenValue := math.MaxInt64\n    smallestEvenIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < smallestEvenValue {\n            smallestEvenValue = v\n            smallestEvenIndex = i\n        }\n    }\n    if smallestEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{smallestEvenValue, smallestEvenIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n        if k <= v && k > max {\n            max = k\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    result := make([]int, len(lst))\n    for i, j, k := 0, len(lst)-1, 0; i <= j; i, j = i+1, j-1 {\n        result[k] = lst[i]\n        k++\n        if i < j {\n            result[k] = lst[j]\n            k++\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        // calculate semi-perimeter\n        s := (a + b + c) / 2\n        // calculate area using Heron's formula\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    } else {\n        return -1\n    }\n}\n"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    max := 0\n    for _, v := range q {\n        sum += v\n        if v > max {\n            max = v\n        }\n    }\n    return sum - max < max && sum <= w\n}\n\n"}
{"task_id": "Go/73", "generation": "\n\tn := len(arr)\n\tchanges := 0\n\tfor i := 0; i < n/2; i++ {\n\t\tif arr[i] != arr[n-i-1] {\n\t\t\tchanges++\n\t\t}\n\t}\n\treturn changes\n}\n"}
{"task_id": "Go/74", "generation": "\n    var count1, count2 int\n    for _, v := range lst1 {\n        count1 += len(v)\n    }\n    for _, v := range lst2 {\n        count2 += len(v)\n    }\n    if count1 < count2 {\n        return lst1\n    }\n    return lst2\n}\n\n"}
{"task_id": "Go/75", "generation": "\n\tprimes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tfor _, prime := range primes {\n\t\tif a%prime == 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n < 2 || x < 1 {\n        return false\n    }\n    for i := 2; i <= x/2; i++ {\n        if math.Pow(float64(n), float64(i)) == float64(x) {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/77", "generation": "\n    x := int(math.Round(math.Pow(float64(a), (1. / 3.))))\n    return x*x*x == a\n}\n"}
{"task_id": "Go/78", "generation": "\n\tprimeDigits := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\tcount := 0\n\tfor _, digit := range num {\n\t\tif contains(primeDigits, string(digit)) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc contains(slice []string, item string) bool {\n\tfor _, a := range slice {\n\t\tif a == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tbinary = fmt.Sprintf(\"%d%s\", decimal%2, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn \"db\" + binary + \"db\"\n}\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) != 3 {\n        return false\n    }\n    if s[0] == s[1] || s[1] == s[2] || s[0] == s[2] {\n        return false\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n\tletterGrades := make([]string, len(grades))\n\tfor i, grade := range grades {\n\t\tswitch {\n\t\tcase grade == 4.0:\n\t\t\tletterGrades[i] = \"A+\"\n\t\tcase grade > 3.7:\n\t\t\tletterGrades[i] = \"A\"\n\t\tcase grade > 3.3:\n\t\t\tletterGrades[i] = \"A-\"\n\t\tcase grade > 2.7:\n\t\t\tletterGrades[i] = \"B+\"\n\t\tcase grade > 2.0:\n\t\t\tletterGrades[i] = \"B\"\n\t\tcase grade > 1.7:\n\t\t\tletterGrades[i] = \"B-\"\n\t\tcase grade > 1.0:\n\t\t\tletterGrades[i] = \"C\"\n\t\tcase grade > 0.7:\n\t\t\tletterGrades[i] = \"C-\"\n\t\tcase grade > 0.0:\n\t\t\tletterGrades[i] = \"D-\"\n\t\tdefault:\n\t\t\tletterGrades[i] = \"E\"\n\t\t}\n\t}\n\treturn letterGrades\n}\n"}
{"task_id": "Go/82", "generation": "\n\tlength := len(s)\n\tif length < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= length; i++ {\n\t\tif length%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow10(n-1))\n}\n"}
{"task_id": "Go/84", "generation": "\n    binary := strconv.FormatInt(int64(N), 2)\n    sum := 0\n    for _, v := range binary {\n        digit, _ := strconv.Atoi(string(v))\n        sum += digit\n    }\n    return fmt.Sprintf(\"%b\", sum)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n\tsum := 0\n\tfor i := 1; i < len(lst); i += 2 {\n\t\tif lst[i]%2 == 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        sorted := []rune(word)\n        sort.Slice(sorted, func(i, j int) bool {\n            return sorted[i] < sorted[j]\n        })\n        words[i] = string(sorted)\n    }\n    return strings.Join(words, \" \")\n}\n"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, col := range row {\n            if col == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n\n    sum := array[0] + array[len(array)-1]\n    if sum%2 == 0 {\n        sort.Ints(array)\n    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n    return array\n}\n"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result += string((c-'a'+2*2)%26 + 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            result += string((c-'A'+2*2)%26 + 'A')\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    smallest := lst[0]\n    for _, v := range lst {\n        if v > smallest {\n            return v\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`[.|?|!]`)\n    split := re.Split(S, -1)\n    return len(split)\n}\n\n"}
{"task_id": "Go/92", "generation": "\n\txi, yi, zi := x.(int), y.(int), z.(int)\n\txv, yv, zv := x.(float64), y.(float64), z.(float64)\n\n\tif (xi || xv) && (yi || yv) && (zi || zv) {\n\t\tif (float64(xi)+float64(yi) == float64(zi)) || (float64(xi)+float64(zi) == float64(yi)) || (float64(zi)+float64(yi) == float64(xi)) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encoded := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, unicode.ToLower(char)) {\n            switch unicode.ToLower(char) {\n            case 'a':\n                encoded += \"e\"\n            case 'e':\n                encoded += \"i\"\n            case 'i':\n                encoded += \"o\"\n            case 'o':\n                encoded += \"u\"\n            case 'u':\n                encoded += \"a\"\n            }\n            if unicode.IsUpper(char) {\n                encoded = strings.ToUpper(encoded)\n            }\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}\n"}
{"task_id": "Go/94", "generation": "\n    max := math.MinInt64\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    return sumOfDigits(max)\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n    var lower, upper bool\n    for key := range dict {\n        if keyStr, ok := key.(string); ok {\n            if strings.ToLower(keyStr) == keyStr {\n                lower = true\n            }\n            if strings.ToUpper(keyStr) == keyStr {\n                upper = true\n            }\n        } else {\n            return false\n        }\n    }\n    return lower && upper\n}\n\n"}
{"task_id": "Go/96", "generation": "\n\tvar primes []int\n\tfor i := 2; i < n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n\nfunc isPrime(n int) bool {\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n > 1\n}\n"}
{"task_id": "Go/97", "generation": "\n    a = int(math.Abs(float64(a % 10)))\n    b = int(math.Abs(float64(b % 10)))\n    return a * b\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if strings.ContainsRune(\"AEIOU\", rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    floatValue, _ := strconv.ParseFloat(value, 64)\n    if floatValue > 0 {\n        return int(floatValue + 0.5)\n    }\n    return int(floatValue - 0.5)\n}\n"}
{"task_id": "Go/100", "generation": "\n\tres := make([]int, n)\n\tres[0] = n\n\tfor i := 1; i < n; i++ {\n\t\tif res[i-1]%2 == 0 {\n\t\t\tres[i] = res[i-1] + 2\n\t\t} else {\n\t\t\tres[i] = res[i-1] + 2\n\t\t}\n\t}\n\treturn res\n}\n"}
{"task_id": "Go/101", "generation": "\n    s = strings.Replace(s, \",\", \" \", -1)\n    s = strings.Replace(s, \"Onetwofour\", \" \", -1)\n    s = strings.Replace(s, \"five\", \" \", -1)\n    return strings.Fields(s)\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif x%2 == 0 {\n\t\treturn x\n\t}\n\tif y%2 == 0 {\n\t\treturn y\n\t}\n\treturn -1\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    count := 0\n    for i := n; i <= m; i++ {\n        sum += i\n        count++\n    }\n    avg := int(math.Round(float64(sum) / float64(count)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    digits := strconv.Itoa(num)\n    for _, digit := range digits {\n        num, _ := strconv.Atoi(string(digit))\n        if num%2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var validNums []int\n    names := []string{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            validNums = append(validNums, num)\n        }\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(validNums)))\n\n    for _, num := range validNums {\n        result = append(result, names[num])\n    }\n\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/106", "generation": "\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = factorial(i)\n\t\t} else {\n\t\t\tresult[i] = sum(i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc factorial(n int) int {\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc sum(n int) int {\n\tresult := 0\n\tfor i := 1; i <= n; i++ {\n\t\tresult += i\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/107", "generation": "\n    var even, odd int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i % 2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc isPalindrome(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumOfDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumOfDigits(num int) int {\n    sum := 0\n    str := strconv.Itoa(num)\n    for _, ch := range str {\n        digit, _ := strconv.Atoi(string(ch))\n        sum += digit\n    }\n    return sum\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n\n    for i := range arr {\n        if isNonDecreasing(arr, sortedArr, i) {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc isNonDecreasing(arr, sortedArr []int, shift int) bool {\n    for i := range arr {\n        if arr[(i+shift)%len(arr)] != sortedArr[i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n\toddCount := 0\n\tfor _, v := range lst1 {\n\t\tif v%2 != 0 {\n\t\t\toddCount++\n\t\t}\n\t}\n\tfor _, v := range lst2 {\n\t\tif v%2 != 0 {\n\t\t\toddCount--\n\t\t}\n\t}\n\tif oddCount < 0 {\n\t\treturn \"NO\"\n\t}\n\treturn \"YES\"\n}\n"}
{"task_id": "Go/111", "generation": "\n    histogram := make(map[rune]int)\n    for _, letter := range strings.Fields(test) {\n        histogram[rune(letter[0])]++\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    for _,v := range c {\n        s = strings.ReplaceAll(s, string(v), \"\")\n    }\n    r := []rune(s)\n    for i := 0; i < len(r)/2; i++ {\n        if r[i] != r[len(r)-1-i] {\n            return [2]interface{}{s, false}\n        }\n    }\n    return [2]interface{}{s, true}\n}\n"}
{"task_id": "Go/113", "generation": "\n    var res []string\n    for i, str := range lst {\n        count := 0\n        for _, c := range str {\n            if int(c-'0') % 2 != 0 {\n                count++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"the number of odd elements in the string %d of the input.\", count))\n    }\n    return res\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    min := math.MaxInt64\n    sum := 0\n    for _, num := range nums {\n        sum += num\n        if sum < min {\n            min = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n"}
{"task_id": "Go/115", "generation": "\n    var total int\n    for _, row := range grid {\n        for _, cell := range row {\n            total += cell\n        }\n    }\n    return int(math.Ceil(float64(total) / float64(capacity)))\n}\n"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        // count the number of ones in the binary representation of each number\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n\n        // if the number of ones is the same, sort based on the decimal value\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n\n        // sort based on the number of ones in the binary representation\n        return countI < countJ\n    })\n\n    return arr\n}\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        count := 0\n        for _, letter := range word {\n            if bytes.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", letter) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := []byte{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i := len(word) - 1; i > 0; i-- {\n        if bytes.Contains(vowels, []byte{word[i]}) && !bytes.Contains(vowels, []byte{word[i-1]}) && !bytes.Contains(vowels, []byte{word[i+1]}) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n\tstack := []rune{}\n\tstr := strings.Join(lst, \"\")\n\tfor _, ch := range str {\n\t\tif ch == '(' {\n\t\t\tstack = append(stack, ch)\n\t\t} else if ch == ')' {\n\t\t\tif len(stack) == 0 || stack[len(stack)-1] != '(' {\n\t\t\t\treturn \"No\"\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\tif len(stack) == 0 {\n\t\treturn \"Yes\"\n\t}\n\treturn \"No\"\n}\n"}
{"task_id": "Go/120", "generation": "\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr[:k]\n}\n"}
{"task_id": "Go/121", "generation": "\n\tsum := 0\n\tfor i := 0; i < len(lst); i += 2 {\n\t\tif lst[i]%2 != 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    sort.Ints(collatz)\n    return collatz\n}\n"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 2 || len(parts[0]) != 2 || len(parts[1]) != 2 {\n        return false\n    }\n    month, err1 := strconv.Atoi(parts[0])\n    day, err2 := strconv.Atoi(parts[1])\n    if err1 != nil || err2 != nil || month < 1 || month > 12 || day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 && (day < 1 || day > 29) {\n        return false\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if 'a' <= c && c <= 'z' {\n                if int(c-'a')%2 == 1 {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst) == 1 {\n        return true\n    }\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    if start > end {\n        return \"NO\"\n    }\n    length := end - start + 1\n    if length < 2 || !isPrime(length) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc isPrime(n int) bool {\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return n > 1\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    sum := 0\n    for _, num := range arr {\n        if num < 0 {\n            sum += -1\n        } else if num > 0 {\n            sum += 1\n        }\n    }\n\n    return int(math.Pow(2, float64(sum)))\n}\n"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    dp := make([][][]int, n)\n    for i := range dp {\n        dp[i] = make([][]int, n)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, k+1)\n            for l := range dp[i][j] {\n                dp[i][j][l] = math.MaxInt32\n            }\n        }\n    }\n    dp[0][0][0] = grid[0][0]\n    for l := 1; l <= k; l++ {\n        for _, p := range getPaths(n*n, l) {\n            x, y := p/n, p%n\n            for _, d := range directions {\n                nx, ny := x+d[0], y+d[1]\n                if nx >= 0 && nx < n && ny >= 0 && ny < n {\n                    dp[nx][ny][l] = min(dp[nx][ny][l], dp[x][y][l-1]+grid[nx][ny])\n                }\n            }\n        }\n    }\n    res := dp[n-1][n-1][k]\n    if res == math.MaxInt32 {\n        return []int{}\n    }\n    return []int{res}\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc getPaths(n, k int) []int {\n    res := make([]int, 0)\n    for i := 0; i < n; i++ {\n        if i%k == 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\nvar directions = [][]int{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}\n"}
{"task_id": "Go/130", "generation": "\n\tres := make([]float64, n+1)\n\tres[0] = 1\n\tif n > 0 {\n\t\tres[1] = 3\n\t}\n\tif n > 1 {\n\t\tres[2] = 2\n\t}\n\tfor i := 3; i <= n; i++ {\n\t\tres[i] = res[i-1] + res[i-2] + res[i-3]\n\t}\n\treturn res\n}\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    if product == 1 {\n        return 0\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) != 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        sum += math.Pow(math.Ceil(num), 2)\n    }\n    return int(sum)\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z') {\n        if len(txt) == 1 || !strings.Contains(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", string(txt[len(txt)-2])) {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/135", "generation": "\n\tsort.Ints(arr)\n\tfor i := len(arr) - 1; i > 0; i-- {\n\t\tif arr[i] != arr[i-1]+1 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n"}
{"task_id": "Go/136", "generation": "\n    var largest, smallest interface{} = nil, nil\n    for _, v := range lst {\n        if v > 0 {\n            if largest == nil || v > largest.(int) {\n                largest = v\n            }\n            if smallest == nil || v < smallest.(int) {\n                smallest = v\n            }\n        }\n    }\n    return [2]interface{}{largest, smallest}\n}\n\n"}
{"task_id": "Go/137", "generation": "\n    var aFloat, bFloat float64\n    var err error\n\n    switch a := a.(type) {\n    case int:\n        aFloat = float64(a)\n    case float64:\n        aFloat = a\n    case string:\n        aFloat, err = strconv.ParseFloat(strings.Replace(a, \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Printf(\"Error: %v\\n\", err)\n            return nil\n        }\n    default:\n        fmt.Printf(\"Unsupported type: %T\\n\", a)\n        return nil\n    }\n\n    switch b := b.(type) {\n    case int:\n        bFloat = float64(b)\n    case float64:\n        bFloat = b\n    case string:\n        bFloat, err = strconv.ParseFloat(strings.Replace(b, \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Printf(\"Error: %v\\n\", err)\n            return nil\n        }\n    default:\n        fmt.Printf(\"Unsupported type: %T\\n\", b)\n        return nil\n    }\n\n    if aFloat > bFloat {\n        return a\n    } else if aFloat < bFloat {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n\tif n < 4 || n%2 != 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    return n * SpecialFactorial(n-1)\n}\n\n"}
{"task_id": "Go/140", "generation": "\n\tres := \"\"\n\tspaceCount := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tspaceCount++\n\t\t\tif spaceCount == 1 {\n\t\t\t\tres += \"_\"\n\t\t\t} else if spaceCount > 2 {\n\t\t\t\tres += \"-\"\n\t\t\t}\n\t\t} else {\n\t\t\tres += string(c)\n\t\t\tspaceCount = 0\n\t\t}\n\t}\n\treturn res\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if strings.Count(file_name, \".\") > 1 {\n        return \"No\"\n    }\n    split_name := strings.Split(file_name, \".\")\n    if len(split_name[0]) == 0 {\n        return \"No\"\n    }\n    if len(split_name) != 2 {\n        return \"No\"\n    }\n    if len(split_name[1]) != 3 {\n        return \"No\"\n    }\n    if !(split_name[1] == \"txt\" || split_name[1] == \"exe\" || split_name[1] == \"dll\") {\n        return \"No\"\n    }\n    if !(split_name[0][0] >= 'a' && split_name[0][0] <= 'z' || split_name[0][0] >= 'A' && split_name[0][0] <= 'Z') {\n        return \"No\"\n    }\n    for i := 1; i < len(split_name[0]); i++ {\n        if split_name[0][i] >= '0' && split_name[0][i] <= '9' {\n            return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 && i%4 != 0 {\n            sum += int(math.Pow(float64(v), 2))\n        } else if i%4 == 0 && i%3 != 0 {\n            sum += int(math.Pow(float64(v), 3))\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    result := []string{}\n\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    xn := strings.Split(x, \"/\")\n    xNum, _ := strconv.Atoi(xn[0])\n    xDen, _ := strconv.Atoi(xn[1])\n\n    nn := strings.Split(n, \"/\")\n    nNum, _ := strconv.Atoi(nn[0])\n    nDen, _ := strconv.Atoi(nn[1])\n\n    xnNum := xNum * nNum\n    xnDen := xDen * nDen\n\n    for i := 2; i <= xnNum && i <= xnDen; i++ {\n        if xnNum%i == 0 && xnDen%i == 0 {\n            xnNum /= i\n            xnDen /= i\n            i--\n        }\n    }\n\n    return xnNum == xnDen\n}\n"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        num, sum, idx int\n    }\n\n    var arr []pair\n    for i, num := range nums {\n        sum := 0\n        if num < 0 {\n            num = -num\n        }\n        for num > 0 {\n            digit := num % 10\n            sum += digit\n            num /= 10\n        }\n        arr = append(arr, pair{nums[i], sum, i})\n    }\n\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i].sum != arr[j].sum {\n            return arr[i].sum < arr[j].sum\n        }\n        return arr[i].idx < arr[j].idx\n    })\n\n    for i := range arr {\n        nums[i] = arr[i].num\n    }\n    return nums\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 && num%2 != 0 {\n            str := strconv.Itoa(num)\n            firstDigit, _ := strconv.Atoi(string(str[0]))\n            if firstDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i*i - i + 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tplanet1_index := -1\n\tplanet2_index := -1\n\tfor i, planet := range planets {\n\t\tif planet == planet1 {\n\t\t\tplanet1_index = i\n\t\t}\n\t\tif planet == planet2 {\n\t\t\tplanet2_index = i\n\t\t}\n\t}\n\tif planet1_index == -1 || planet2_index == -1 {\n\t\treturn []string{}\n\t}\n\tif planet1_index > planet2_index {\n\t\tplanet1_index, planet2_index = planet2_index, planet1_index\n\t}\n\treturn planets[planet1_index+1 : planet2_index]\n}\n"}
{"task_id": "Go/149", "generation": "\n    var oddLengthWords []string\n    for _, word := range lst {\n        if len(word)%2 != 0 {\n            oddLengthWords = append(oddLengthWords, word)\n        }\n    }\n    sort.Strings(oddLengthWords)\n    return oddLengthWords\n}\n"}
{"task_id": "Go/150", "generation": "\n\tif isPrime(n) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] < 0 || lst[i] != float64(int(lst[i])) {\n            continue\n        }\n        if int(lst[i]) % 2 != 0 {\n            sum += math.Pow(lst[i], 2)\n        }\n    }\n    return int(sum)\n}\n"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i := range game {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.MinInt64\n    strongest_extension := \"\"\n\n    for _, extension := range extensions {\n        strength := getStrength(extension)\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n\n    if strongest_extension == \"\" {\n        return class_name\n    } else {\n        return class_name + \".\" + strongest_extension\n    }\n}\n\nfunc getStrength(extension string) int {\n    upper, lower := 0, 0\n    for _, char := range extension {\n        if char >= 'A' && char <= 'Z' {\n            upper++\n        } else if char >= 'a' && char <= 'z' {\n            lower++\n        }\n    }\n    return upper - lower\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(b) > len(a) {\n        return false\n    }\n    for _, _ = range b {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[len(b)-1:] + b[:len(b)-1]\n    }\n    return false\n}\n\n"}
{"task_id": "Go/155", "generation": "\n    var count [2]int\n    strNum := strconv.Itoa(num)\n    for _, v := range strNum {\n        digit, _ := strconv.Atoi(string(v))\n        if digit%2 == 0 {\n            count[0]++\n        } else {\n            count[1]++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/156", "generation": "\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    symbols := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    roman := \"\"\n    for i := 0; i < len(values); i++ {\n        for number >= values[i] {\n            number -= values[i]\n            roman += symbols[i]\n        }\n    }\n    return strings.ToLower(roman)\n}\n"}
{"task_id": "Go/157", "generation": "\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n    return math.Pow(float64(sides[0]), 2) + math.Pow(float64(sides[1]), 2) == math.Pow(float64(sides[2]), 2)\n}\n"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        unique := countUnique(word)\n        if unique > maxUnique {\n            maxUnique = unique\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc countUnique(word string) int {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return len(unique)\n}\n\n//"}
{"task_id": "Go/159", "generation": "\n    if need <= remaining {\n        return []int{number + need, remaining - need}\n    } else {\n        return []int{number + remaining, 0}\n    }\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n\tresult := []rune(s)\n\tfor i := 0; i < len(s); i++ {\n\t\tif unicode.IsLetter(rune(s[i])) {\n\t\t\tif unicode.IsLower(rune(s[i])) {\n\t\t\t\tresult[i] = unicode.ToUpper(rune(s[i]))\n\t\t\t} else {\n\t\t\t\tresult[i] = unicode.ToLower(rune(s[i]))\n\t\t\t}\n\t\t}\n\t}\n\treturn string(result)\n}\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n\n"}
{"task_id": "Go/163", "generation": "\n\tvar result []int\n\n\tif a > b {\n\t\ta, b = b, a\n\t}\n\n\tfor i := a; i <= b; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\n\treturn result\n}\n"}
