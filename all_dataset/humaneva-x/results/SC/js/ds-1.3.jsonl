{"task_id": "JavaScript/0", "generation": "\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n    let stack = [];\n    let result = [];\n    let temp = '';\n    for(let i = 0; i < paren_string.length; i++) {\n        if(paren_string[i] === '(') {\n            stack.push(temp);\n            temp = '';\n        } else if(paren_string[i] === ')') {\n            temp += ')';\n            stack.push(temp);\n            temp = '';\n            result.push(stack.pop());\n        } else {\n            temp += paren_string[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n    return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if(balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const differences = numbers.map((number) => Math.abs(number - mean));\n  const mad = differences.reduce((a, b) => a + b, 0) / numbers.length;\n  return mad;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const levels = [];\n\n  groups.forEach((group) => {\n    let level = 0;\n    let maxLevel = 0;\n\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        level++;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      } else if (group[i] === ')') {\n        level--;\n      }\n    }\n\n    levels.push(maxLevel);\n  });\n\n  return levels;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n    let max = numbers[0];\n    const result = [max];\n\n    for(let i = 1; i < numbers.length; i++) {\n        if(numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n    let reverseString = string.split('').reverse().join('');\n    for(let i = string.length; i >= 0; i--){\n        if(string.substring(0,i) === reverseString.substring(string.length - i, string.length)){\n            return string + reverseString.substring(0,i);\n        }\n    }\n}"}
{"task_id": "JavaScript/11", "generation": "\n    let xor = '';\n    for(let i = 0; i < a.length; i++) {\n        xor += (a[i] == b[i]) ? '0' : '1';\n    }\n    return xor;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\nconsole.log(longest(['a', 'a', 'bbccc']))"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n    let result = '';\n    for (let i = 0; i <= n; i++) {\n        result += i + ' ';\n    }\n    return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n    let distinctChars = new Set(string.toLowerCase());\n    return distinctChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n    let note_lengths = music_string.split(' ').map(note => {\n        switch(note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n        }\n    });\n    return note_lengths;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n    const numberMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    return numbers.split(' ').sort((a, b) => numberMap[a] - numberMap[b]).join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n    if (numbers.length !== 2) {\n        throw new Error('Input should be a list of two numbers');\n    }\n\n    return numbers.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n    let count = 0;\n    for(let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n    for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n    let result = [];\n    let seen = {};\n    for(let i = 0; i < numbers.length; i++) {\n        if(!seen[numbers[i]]) {\n            seen[numbers[i]] = true;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/27", "generation": "\n    return string.toUpperCase().split('').reverse().join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n    return l.reduce((acc, val) => {\n        if (Array.isArray(val)) {\n            acc.push(...getPositive(val));\n        } else if (val > 0) {\n            acc.push(val);\n        }\n        return acc;\n    }, []);\n}"}
{"task_id": "JavaScript/31", "generation": "\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const degree = xs.length - 1;\n  const coeffs = xs.slice(1);\n  const roots = [];\n\n  for (let i = 0; i <= degree; i++) {\n    const newCoeffs = coeffs.map((c, j) => c * ((degree - i) + j));\n    const root = -(coeffs[0] / newCoeffs[0]);\n    roots.push(root);\n  }\n\n  return roots;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  let third = l.filter((_, i) => i % 3 === 0);\n  return l.map((v, i) => (i % 3 === 0 ? third.shift() : v)).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/34", "generation": "\n    return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n};"}
{"task_id": "JavaScript/36", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            count += i.toString().split('7').length - 1;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v)).reverse();\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    result += s[i + 1] + s[i + 2] + s[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  let count = 0;\n  let i = 1;\n  while (count < n) {\n    let fib = fibonacci(i);\n    if (isPrime(fib)) {\n      count++;\n    }\n    i++;\n  }\n  return i - 1;\n};\n\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    // The number of collisions is equal to the number of cars minus 1.\n    return n - 1;\n}"}
{"task_id": "JavaScript/42", "generation": "\n    return l.map(x => Array.isArray(x) ? incrList(x) : x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  let set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n    return x.toString(base);\n}"}
{"task_id": "JavaScript/45", "generation": "\n    return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 0;\n    } else if (n === 3) {\n        return 2;\n    } else {\n        let a = 0;\n        let b = 2;\n        let c = 0;\n        let d = 2;\n        for (let i = 4; i <= n; i++) {\n            let e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return d;\n    }\n}"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    let mid = Math.floor(l.length / 2);\n\n    if (l.length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n};"}
{"task_id": "JavaScript/48", "generation": "\n    const reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n    return (Math.pow(2, n) % p);\n}"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      let code = s.charCodeAt(i);\n      if ((code >= 65 && code <= 90) || (code >= 97 && code <= 122)) {\n        if (code >= 65 && code <= 74) {\n          result += String.fromCharCode(code + 5);\n        } else if (code >= 97 && code <= 102) {\n          result += String.fromCharCode(code - 21);\n        } else {\n          result += String.fromCharCode(code - 5);\n        }\n      } else {\n        result += s[i];\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};"}
{"task_id": "JavaScript/52", "generation": "\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n    return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n    const map = new Map();\n    for (let c of s0) {\n        map.set(c, (map.get(c) || 0) + 1);\n    }\n    for (let c of s1) {\n        if (!map.get(c)) {\n            return false;\n        } else {\n            map.set(c, map.get(c) - 1);\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 0) {\n    return \"Input should be positive integer.\";\n  }\n  else if (n === 1) {\n    return 0;\n  }\n  else if (n === 2) {\n    return 1;\n  }\n  else {\n    let a = 0;\n    let b = 1;\n    for (let i = 3; i <= n; i++) {\n      let c = a + b;\n      a = b;\n      b = c;\n    }\n    return b;\n  }\n}"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push('<');\n    } else {\n      if (stack.length === 0 || stack.pop() !== '<') {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n    if (l.length < 2) return true;\n    let isIncreasing = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1] !== isIncreasing) return false;\n    }\n    return true;\n}"}
{"task_id": "JavaScript/58", "generation": "\n    let commonElements = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j] && !commonElements.includes(l1[i])){\n                commonElements.push(l1[i]);\n            }\n        }\n    }\n    return commonElements.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n /= 2;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        let a = 0;\n        let b = 0;\n        let c = 1;\n        for (let i = 3; i <= n; i++) {\n            let d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n}"}
{"task_id": "JavaScript/64", "generation": "\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('').reverse();\n  const length = digits.length;\n  const result = [];\n\n  for (let i = 0; i < length; i++) {\n    const newIndex = (i + shift) % length;\n    result.push(digits[newIndex]);\n  }\n\n  return result.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n    let sum = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n    const [apples, oranges, ...fruits] = s.split(' ');\n    let mangoFruits = 0;\n    fruits.forEach(fruit => {\n        if(fruit.endsWith('apples') || fruit.endsWith('mango')) {\n            mangoFruits += parseInt(fruit.split(' ').shift());\n        } else if(fruit.endsWith('oranges')) {\n            mangoFruits += parseInt(fruit.split(' ').shift());\n        }\n    });\n    return mangoFruits;\n}"}
{"task_id": "JavaScript/68", "generation": "\n    let smallestEven = Infinity;\n    let smallestIndex = Infinity;\n    let result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < smallestEven && arr[i] % 2 === 0) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n\n    if (smallestEven < Infinity) {\n        result.push(smallestEven, smallestIndex);\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/69", "generation": "\n    let freq = {};\n    for(let i = 0; i < lst.length; i++) {\n        if(freq[lst[i]]) {\n            freq[lst[i]]++;\n        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n\n    for(let i = lst.length - 1; i >= 0; i--) {\n        if(freq[lst[i]] > lst[i]) {\n            return lst[i];\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while (lst.length) {\n        result.push(lst.pop());\n        if (lst.length) {\n            result.push(lst.shift());\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "JavaScript/72", "generation": "\n    if (q.length === 0) return false;\n    if (q.length === 1) return true;\n    if (q[0] + q[1] > w) return false;\n    if (q[0] + q[1] === w) return true;\n    if (q[0] + q[1] < w) return true;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n    const sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n    const sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}"}
{"task_id": "JavaScript/75", "generation": "\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < primes.length; i++) {\n        if (a % primes[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/76", "generation": "\n    if (n === 1) {\n        return false;\n    }\n    for (let i = 2; i <= n; i++) {\n        if (x % i !== 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.cbrt(a);\n    return cubeRoot === Math.floor(cubeRoot);\n}"}
{"task_id": "JavaScript/78", "generation": "\n    const hexPrimes = ['2', '3', '5', '7'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}"}
{"task_id": "JavaScript/80", "generation": "\n    if (s.length % 3 !== 0) return false;\n    for (let i = 0; i < s.length - 2; i += 3) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n    return grades.map(grade => {\n        if (grade[0] === 4.0) return 'A+';\n        else if (grade[0] > 3.7) return 'A';\n        else if (grade[0] > 3.3) return 'A-';\n        else if (grade[0] > 2.7) return 'B+';\n        else if (grade[0] > 2.0) return 'B';\n        else if (grade[0] > 1.7) return 'B-';\n        else if (grade[0] > 1.0) return 'C+';\n        else if (grade[0] > 0.7) return 'C';\n        else if (grade[0] > 0.0) return 'D-';\n        else return 'E';\n    });\n}"}
{"task_id": "JavaScript/82", "generation": "\n    if (string.length % 2 === 0) {\n        return false;\n    }\n    for (let i = 2, sqrt = Math.sqrt(string.length); i <= sqrt; i++) {\n        if (string.length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 10;\n    if (n === 2) return 90;\n    if (n === 3) return 720;\n    if (n === 4) return 40320;\n    if (n === 5) return 168000;\n    if (n === 6) return 583200;\n    if (n === 7) return 1433600;\n    if (n === 8) return 3628800;\n    if (n === 9) return 8474240;\n    if (n === 10) return 20358400;\n    return 0;\n}"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n    let words = s.split(' ');\n    let result = [];\n    for (let word of words) {\n        let sortedWord = word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n        result.push(sortedWord);\n    }\n    return result.join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}"}
{"task_id": "JavaScript/88", "generation": "\n    if (array.length === 0) return array;\n    const mid = Math.floor(array.length / 2);\n    const left = array.slice(0, mid);\n    const right = array.slice(mid);\n    return merge(sortArray(left), sortArray(right));\n};\n\nconst merge = (left, right) => {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < left.length && j < right.length) {\n        if (sum(left[i], right[j]) % 2 === 0) {\n            result.push(left[i]);\n            i++;\n        } else {\n            result.push(right[j]);\n            j++;\n        }\n    }\n    while (i < left.length) {\n        result.push(left[i]);\n        i++;\n    }\n    while (j < right.length) {\n        result.push(right[j]);\n        j++;\n    }\n    return result;\n};\n\nconst sum = (a, b) => a + b;"}
{"task_id": "JavaScript/89", "generation": "\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            let charCode = s[i].charCodeAt(0);\n            if (charCode >= 65 && charCode <= 90) {\n                encrypted += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n            } else if (charCode >= 97 && charCode <= 122) {\n                encrypted += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n            }\n        } else {\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) {\n        return null;\n    }\n    let smallest = Math.min(...lst);\n    lst.splice(lst.indexOf(smallest), 1);\n    if (lst.length < 2) {\n        return null;\n    }\n    let secondSmallest = Math.min(...lst);\n    return secondSmallest;\n}"}
{"task_id": "JavaScript/91", "generation": "\n    let count = 0;\n    let words = S.split('.');\n    for(let i = 0; i < words.length; i++){\n        words[i] = words[i].trim();\n        if(words[i].length > 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x === y + z || y === x + z || z === x + y) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "JavaScript/93", "generation": "\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let charCode = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            // uppercase letter\n            encodedMessage += String.fromCharCode(charCode + 32);\n        } else if (charCode >= 97 && charCode <= 122) {\n            // lowercase letter\n            encodedMessage += String.fromCharCode(charCode - 32);\n        } else if (charCode >= 48 && charCode <= 57) {\n            // digit\n            encodedMessage += String.fromCharCode(charCode);\n        } else {\n            // special character\n            encodedMessage += message.charAt(i);\n        }\n    }\n    return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n    let maxPrime = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n        }\n    }\n    return sumOfDigits(maxPrime);\n}\n\nconst isPrime = (num) => {\n    if(num < 2) return false;\n    for(let i = 2; i <= Math.sqrt(num); i++){\n        if(num % i === 0) return false;\n    }\n    return true;\n}\n\nconst sumOfDigits = (num) => {\n    let sum = 0;\n    while(num > 0){\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allStrings = true;\n    let allCaps = true;\n\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            allStrings = false;\n        }\n        if (key !== key.toUpperCase() && key !== key.toLowerCase()) {\n            allCaps = false;\n        }\n    }\n\n    return allStrings || allCaps;\n}"}
{"task_id": "JavaScript/96", "generation": "\n    const primes = [];\n    for(let i = 2; i < n; i++) {\n        if(isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\nconst isPrime = (num) => {\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}"}
{"task_id": "JavaScript/97", "generation": "\n    let product = a * b;\n    return product % 10;\n}"}
{"task_id": "JavaScript/98", "generation": "\n  let vowels = ['A', 'E', 'I', 'O', 'U'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n    const num = parseFloat(value);\n    return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n    let stones = [];\n    for(let i = 0; i < n; i++) {\n        stones.push(n + (2 * i));\n    }\n    return stones;\n}"}
{"task_id": "JavaScript/101", "generation": "\n    return s.split(/,| /);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  let maxEvenNum = y;\n  while (maxEvenNum > x) {\n    if (maxEvenNum % 2 !== 0) {\n      maxEvenNum--;\n    } else {\n      break;\n    }\n  }\n  if (maxEvenNum <= x) {\n    return -1;\n  } else {\n    return maxEvenNum;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n    let result = [];\n    for(let i = 0; i < x.length; i++) {\n        if(x[i] % 2 === 0) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const one = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const result = [];\n  const temp = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      temp.push(one[arr[i] - 1]);\n    }\n  }\n  temp.sort((a, b) => a.length - b.length);\n  for (let i = 0; i < temp.length; i++) {\n    result.push(temp[i].split(' ').reverse().join(' '));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n\nconst factorial = (n) => {\n    let fact = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nconst sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/107", "generation": "\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++){\n        let str = i.toString();\n        if(str[0] === str[str.length - 1]){\n            if(i % 2 === 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}"}
{"task_id": "JavaScript/108", "generation": "\n    let count = 0;\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n    if(arr.length === 0) return true;\n    let flag = false;\n    for(let i = 0; i < arr.length; i++) {\n        let temp = arr.slice(i, i+1);\n        let sortedArr = [...arr.slice(0, i), ...arr.slice(i+1)];\n        sortedArr.sort((a, b) => a - b);\n        if(JSON.stringify(temp) === JSON.stringify(sortedArr)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}"}
{"task_id": "JavaScript/110", "generation": "\n    let evenCount1 = lst1.filter(num => num % 2 === 0).length;\n    let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n    if (evenCount1 > evenCount2) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}"}
{"task_id": "JavaScript/111", "generation": "\n    let words = test.split(' ');\n    let dict = {};\n    let max = 0;\n    let result = {};\n\n    for (let i = 0; i < words.length; i++) {\n        if (dict[words[i]] !== undefined) {\n            dict[words[i]]++;\n        } else {\n            dict[words[i]] = 1;\n        }\n        if (dict[words[i]] > max) {\n            max = dict[words[i]];\n        }\n    }\n\n    for (let key in dict) {\n        if (dict[key] === max) {\n            result[key] = max;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] !== c) {\n            result = s[i] + result;\n        }\n    }\n    let isPalindrome = result.split('').reverse().join('') === result;\n    return (result, isPalindrome);\n}"}
{"task_id": "JavaScript/113", "generation": "\n  let result = [];\n  for(let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for(let j = 0; j < lst[i].length; j++) {\n      if(lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(`the number odd elements in the string ${i+1} of the input. ${count}`);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/114", "generation": "\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for(let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for(let i = 0; i < grid.length; i++) {\n        for(let j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] === 0) {\n                count++;\n            }\n        }\n    }\n    return count / capacity;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.map(num => {\n    const binary = num.toString(2);\n    const ones = binary.split('1').length - 1;\n    return [ones, num];\n  }).sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  }).map(subArr => subArr[1]);\n}"}
{"task_id": "JavaScript/117", "generation": "\n    const words = s.split(' ');\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    const result = [];\n\n    for (let word of words) {\n        let count = 0;\n        for (let char of word) {\n            if (consonants.includes(char)) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(word);\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let lastVowel = '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      if (lastVowel && vowels.includes(lastVowel) && i - lastVowel > 1) {\n        return word[i];\n      }\n      lastVowel = word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let stack = [];\n    let result = 'Yes';\n\n    for(let i = 0; i < str1.length; i++) {\n        if(str1[i] === '(') {\n            stack.push('(');\n        } else {\n            if(stack.length === 0) {\n                result = 'No';\n                break;\n            }\n            stack.pop();\n        }\n    }\n\n    for(let i = 0; i < str2.length; i++) {\n        if(str2[i] === '(') {\n            stack.push('(');\n        } else {\n            if(stack.length === 0) {\n                result = 'No';\n                break;\n            }\n            stack.pop();\n        }\n    }\n\n    if(stack.length !== 0) {\n        result = 'No';\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/120", "generation": "\n    // sort the array in descending order\n    arr.sort((a, b) => b - a);\n\n    // return the first k elements of the sorted array\n    return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for(let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n    let sequence = [n];\n    while (n != 1) {\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        sequence.push(n);\n    }\n    return sequence.filter(num => num % 2 != 0);\n}"}
{"task_id": "JavaScript/124", "generation": "\n    const dateParts = date.split('-');\n    if (dateParts.length !== 3) {\n        return false;\n    }\n    const month = parseInt(dateParts[0], 10);\n    const day = parseInt(dateParts[1], 10);\n    const year = parseInt(dateParts[2], 10);\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1) {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n        }\n    } else if ([4, 6, 9, 11].includes(month) && day > 30) {\n        return false;\n    }\n    return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        let sum = 0;\n        for (let i = 0; i < txt.length; i++) {\n            if (txt[i].charCodeAt(0) >= 97 && txt[i].charCodeAt(0) <= 122) {\n                if ((i + 1) % 2 !== 0) {\n                    sum++;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "JavaScript/126", "generation": "\n    let count = 0;\n    for(let i = 0; i < lst.length - 1; i++) {\n        if(lst[i] == lst[i + 1]) {\n            count++;\n            if(count > 1) {\n                return false;\n            }\n        } else if(lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  const intersectionStart = Math.max(start1, start2);\n  const intersectionEnd = Math.min(end1, end2);\n\n  const intersectionLength = intersectionEnd - intersectionStart;\n\n  if (intersectionLength < 1) {\n    return \"NO\";\n  }\n\n  if (intersectionLength === 1) {\n    return \"NO\";\n  }\n\n  for (let i = 2, sqrt = Math.sqrt(intersectionLength); i <= sqrt; i++) {\n    if (intersectionLength % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n    if (arr.length === 0) return null;\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        sum += Math.abs(arr[i]);\n    }\n    return product * sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n    const m = grid.length;\n    const n = grid[0].length;\n    const visited = new Array(m).fill(0).map(() => new Array(n).fill(false));\n    let res = [];\n    let min = Infinity;\n    let minPath = [];\n\n    const dfs = (x, y, path) => {\n        if (path.length === k) {\n            if (path[0].join() < min.join()) {\n                min = path.slice().join();\n                res = path.slice();\n            }\n            return;\n        }\n        if (x < 0 || y < 0 || x >= m || y >= n || visited[x][y]) {\n            return;\n        }\n        visited[x][y] = true;\n        path.push([x, y]);\n        dfs(x - 1, y, path.slice());\n        dfs(x + 1, y, path.slice());\n        dfs(x, y - 1, path.slice());\n        dfs(x, y + 1, path.slice());\n        visited[x][y] = false;\n    }\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            visited[i][j] = true;\n            dfs(i, j, [])\n            visited[i][j] = false;\n        }\n    }\n\n    return res;\n}"}
{"task_id": "JavaScript/130", "generation": "\n    let arr = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n        } else {\n            arr.push(arr[i - 1] - arr[i - 2] - arr[i - 3]);\n        }\n    }\n    return arr;\n}\nconsole.log(tri(3)); // [1, 3, 2, 8]\nconsole.log(tri(4)); // [1, 3, 2, 8, 12]\nconsole.log(tri(5)); // [1, 3, 2, 8, 12, 19]\nconsole.log(tri(6)); // [1, 3, 2, 8, 12, 19, 32]\nconsole.log(tri(7)); // [1, 3, 2, 8, 12, 19, 32, 54]\nconsole.log(tri(8)); // [1, 3, 2, 8, 12, 19, 32, 54, 88]\nconsole.log(tri(9)); // [1, 3, 2, 8, 12, 19, 32, 54, 88, 144]\nconsole.log(tri(10)); // [1, 3, 2, 8, 12, 19, 32, 54, 88, 144, 233]\nconsole.log(tri(11)); // [1, 3, 2, 8, 12, 19, 32, 54, 88, 144, 233, 377]\nconsole.log(tri(12)); // [1, 3, 2, 8, 12, 19, 32, 54, 88, 14"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let str = n.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 !== 0) {\n      product *= str[i];\n    }\n  }\n  return product;\n};"}
{"task_id": "JavaScript/132", "generation": "\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        let num = Math.ceil(lst[i]);\n        sum += num * num;\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n    const lastChar = txt[txt.length - 1];\n    return /[a-zA-Z]/.test(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n    for(let i = arr.length - 2; i >= 0; i--) {\n        if(arr[i] < arr[i+1]) {\n            for(let j = i+1; j < arr.length; j++) {\n                if(arr[j] > arr[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    }\n    return -1;\n}"}
{"task_id": "JavaScript/136", "generation": "\n    let negatives = lst.filter(num => num < 0).sort((a, b) => b - a);\n    let positives = lst.filter(num => num > 0).sort((a, b) => a - b);\n    return [negatives[0] || null, positives[0] || null];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.replace(/,/g, '').replace(/ /g, '') > b.replace(/,/g, '').replace(/ /g, '') ? b : a;\n  }\n  if (typeof a === 'string') {\n    return compareOne(parseFloat(a.replace(/,/g, '')), b);\n  }\n  if (typeof b === 'string') {\n    return compareOne(a, parseFloat(b.replace(/,/g, '')).toFixed(2));\n  }\n  return a > b ? b : null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n    if (n < 0) {\n        return false;\n    }\n    let count = 0;\n    for (let i = 0; i <= n; i += 2) {\n        if (i % 2 === 0) {\n            count++;\n        }\n        if (count === 4) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n    let result = 1;\n    for(let i = n; i > 0; i--) {\n        result *= brazilianFactorial(i);\n    }\n    return result;\n}\n\nconst brazilianFactorial = (n) => {\n    let result = 1;\n    for(let i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n    let newText = text.replace(/\\s+/g, '-');\n    newText = newText.replace(/ /g, '-');\n    return newText;\n}"}
{"task_id": "JavaScript/141", "generation": "\n    const fileNameArray = file_name.split('.');\n    if (fileNameArray.length !== 2) {\n        return 'No';\n    }\n    const [fileName, fileExtension] = fileNameArray;\n    if (fileName.length > 3 || fileName[0] === '0' || !/[a-zA-Z]/.test(fileName[0])) {\n        return 'No';\n    }\n    if (!['txt', 'exe', 'dll'].includes(fileExtension)) {\n        return 'No';\n    }\n    return 'Yes';\n}"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n    let words = sentence.split(\" \");\n    let primeWords = words.filter(word => {\n        let length = word.length;\n        for(let i = 2; i < length; i++)\n            if(length % i === 0) return false;\n        return length > 1;\n    });\n    return primeWords.join(\"\");\n}"}
{"task_id": "JavaScript/144", "generation": "\n  if (typeof x !== 'string' || typeof n !== 'string') {\n    return false;\n  }\n\n  const xParts = x.split('/');\n  const nParts = n.split('/');\n\n  if (xParts.length !== 2 || nParts.length !== 2) {\n    return false;\n  }\n\n  const xNumerator = parseInt(xParts[0], 10);\n  const xDenominator = parseInt(xParts[1], 10);\n  const nNumerator = parseInt(nParts[0], 10);\n  const nDenominator = parseInt(nParts[1], 10);\n\n  if (nDenominator === 0) {\n    return false;\n  }\n\n  const gcd = (a, b) => {\n    if (!b) {\n      return a;\n    }\n    return gcd(b, a % b);\n  };\n\n  const numerator = xNumerator * nNumerator;\n  const denominator = xDenominator * nDenominator;\n\n  const simplifiedNumerator = numerator / gcd(numerator, denominator);\n  const simplifiedDenominator = denominator / gcd(numerator, denominator);\n\n  return `${simplifiedNumerator}/${simplifiedDenominator}`;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = Array.from(String(Math.abs(a)), Number).reduce((a, b) => a + b, 0);\n    const sumB = Array.from(String(Math.abs(b)), Number).reduce((a, b) => a + b, 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for(let i = 0; i < nums.length; i++) {\n        let str = nums[i].toString();\n        if(str[0] % 2 !== 0 && str[1] % 2 !== 0 && str[2] % 2 !== 0 && nums[i] > 10) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n    let a = [];\n    for(let i = 1; i <= n; i++) {\n        a.push(i * i - i);\n    }\n    return a.filter(num => num % 3 === 0).length;\n}"}
{"task_id": "JavaScript/148", "generation": "\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    if (index1 < 0 || index2 < 0) {\n        return () => {};\n    }\n\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n\n    return planets.slice(index1 + 1, index2).sort();\n};"}
{"task_id": "JavaScript/149", "generation": "\n    let oddStrings = lst.filter(s => s.length % 2 !== 0);\n    oddStrings.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return oddStrings;\n}\nconsole.log(sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]))\n\n// The function should return a list sorted that rule If two words have the same length sort the list\n\n// The function should return a list strings in sorted order\n\n// You may assume all words will have the same length.\n\n// For example:\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd\", \"cdc\"]) => [\"a\", \"ab\", \"cd\", \"cdc\"]\n\n// sortedListSum([\"aaa\", \"a\", \"ab\", \"cd"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/151", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i][0] % 2 !== 0 && lst[i][0] > 0) {\n            sum += lst[i][0] * lst[i][0];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else if (game[i] > guess[i]) {\n      result.push(game[i] - guess[i]);\n    } else {\n      result.push(guess[i] - game[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/153", "generation": "\n    let strongest = {\n        name: '',\n        strength: -Infinity\n    };\n\n    for (let extension of extensions) {\n        let cap = extension.match(/[A-Z]/g) ? extension.match(/[A-Z]/g).length : 0;\n        let sm = extension.match(/[a-z]/g) ? extension.match(/[a-z]/g).length : 0;\n        let strength = cap - sm;\n\n        if (strength > strongest.strength) {\n            strongest = {\n                name: extension,\n                strength: strength\n            };\n        }\n    }\n\n    return `${class_name}.${strongest.name}`;\n}"}
{"task_id": "JavaScript/154", "generation": "\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    let numStr = num.toString();\n\n    for(let i = 0; i < numStr.length; i++) {\n        if(numStr[i] % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n\n    return (even, odd);\n}"}
{"task_id": "JavaScript/156", "generation": "\n    const miniRoman = [\n        {value: 1000, symbol: 'm'},\n        {value: 900, symbol: 'cm'},\n        {value: 500, symbol: 'd'},\n        {value: 400, symbol: 'cd'},\n        {value: 100, symbol: 'c'},\n        {value: 90, symbol: 'xc'},\n        {value: 50, symbol: 'l'},\n        {value: 40, symbol: 'xl'},\n        {value: 10, symbol: 'x'},\n        {value: 9, symbol: 'ix'},\n        {value: 5, symbol: 'v'},\n        {value: 4, symbol: 'iv'},\n        {value: 1, symbol: 'i'}\n    ];\n\n    let result = '';\n\n    miniRoman.forEach(({value, symbol}) => {\n        while(number >= value) {\n            number -= value;\n            result += symbol;\n        }\n    });\n\n    return result;\n}"}
{"task_id": "JavaScript/157", "generation": "\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/158", "generation": "\n    let maxUnique = 0;\n    let maxWord = '';\n    for(let word of words){\n        let uniqueCount = new Set(word).size;\n        if(uniqueCount > maxUnique){\n            maxUnique = uniqueCount;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}"}
{"task_id": "JavaScript/159", "generation": "\n    if(remaining >= need) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n};"}
{"task_id": "JavaScript/160", "generation": "\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++) {\n        switch(operator[i-1]) {\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '/':\n                result /= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') return null;\n  const md5 = crypto.createHash('md5');\n  return md5.update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n    let result = [];\n    for(let i = a; i <= b; i++) {\n        if(i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}"}
