{"task_id": "JavaScript/0", "generation": "\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n    let result = [];\n    let stack = [];\n    let current = '';\n\n    for (let char of paren_string) {\n        if (char === '(') {\n            stack.push(char);\n            current += char;\n        } else if (char === ')' && stack.length > 0) {\n            stack.pop();\n            current += char;\n            if (stack.length === 0) {\n                result.push(current);\n                current = '';\n            }\n        }\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n    return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  const absoluteDeviations = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDeviations.reduce((acc, val) => acc + val, 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n    if (numbers.length === 0) {\n        return [];\n    }\n    let result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n    let maxDepth = 0;\n    let currentDepth = 0;\n    let result = [];\n\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            currentDepth++;\n            if (currentDepth > maxDepth) {\n                maxDepth = currentDepth;\n            }\n        } else if (paren_string[i] === ')') {\n            currentDepth--;\n        } else if (paren_string[i] === ' ') {\n            if (maxDepth > 0) {\n                result.push(maxDepth);\n                maxDepth = 0;\n            }\n        }\n    }\n\n    if (maxDepth > 0) {\n        result.push(maxDepth);\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/7", "generation": "\n    return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\nconsole.log(sumProduct([])); // [0, 1]\nconsole.log(sumProduct([1, 10, 24])); // [35, 720]\nconsole.log(sumProduct([2, 3, 4])); // [9, 24]\nconsole.log(sumProduct([5, 6, 7])); // [18, 210]\nconsole.log(sumProduct([8, 9, 10])); // [27, 720]\nconsole.log(sumProduct([11, 12, 13])); // [36, 1008]\nconsole.log(sumProduct([14, 15, 16])); // [45, 17280]\nconsole.log(sumProduct([17, 18, 19])); // [54, 27648]\nconsole.log(sumProduct([20, 21, 22])); // [65, 46080]\nconsole.log(sumProduct([23, 24, 25])); // [78, 69120]\nconsole.log(sumProduct([26, 27, 28])); // [91, 9261]\nconsole.log(sumProduct([29, 30, 31])); // [104, 1307674368000]\nconsole.log(sumProduct([32, 33, 34])); // [117, 17511264000]\nconsole.log(sumProduct([35, 36, 37])); // [130, 2625374128000]\nconsole.log(sumProduct([38, 39, 40])); // [143, 3518437208000]\nconsole.log(sumProduct([41, 42, 43])); // [156, 4697620480000]\nconsole.log(sumProduct([44, 45, 46])); // [169, 6291452240000]\nconsole.log(sumProduct([47, 48, 49])); // ["}
{"task_id": "JavaScript/9", "generation": "\n    let maxSoFar = numbers[0];\n    return numbers.map(num => {\n        maxSoFar = Math.max(maxSoFar, num);\n        return maxSoFar;\n    });\n};"}
{"task_id": "JavaScript/10", "generation": "\n    if (string.length === 0) {\n        return '';\n    }\n    let reverse = string.split('').reverse().join('');\n    for (let i = 0; i < string.length; i++) {\n        if (string.substring(i) === reverse.substring(0, string.length - i)) {\n            return string + reverse.substring(string.length - i);\n        }\n    }\n    return string + reverse.substring(1);\n};"}
{"task_id": "JavaScript/11", "generation": "\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};"}
{"task_id": "JavaScript/14", "generation": "\n    let result = [];\n    for (let i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n    return result;\n};"}
{"task_id": "JavaScript/15", "generation": "\n    let result = '';\n    for (let i = 0; i <= n; i++) {\n        result += i + ' ';\n    }\n    return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n    let distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n    const notes = music_string.split(' ');\n    const beats = notes.map(note => {\n        switch (note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n            default:\n                return 0;\n        }\n    });\n    return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n    if (substring.length === 0) return 0;\n    let count = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(howManyTimes('', 'a')); // 0\nconsole.log(howManyTimes('aaaa', 'a')); // 4\nconsole.log(howManyTimes('aaaaaa', 'aa')); // 3\nconsole.log(howManyTimes('aaaaaa', 'a')); // 6\nconsole.log(howManyTimes('abababab', 'ab')); // 4\nconsole.log(howManyTimes('abababab', 'aba')); // 2\nconsole.log(howManyTimes('abababab', 'abab')); // 2\nconsole.log(howManyTimes('abababab', 'ababa')); // 1\nconsole.log(howManyTimes('abababab', 'abababa')); // 1\nconsole.log(howManyTimes('abababab', 'abababab')); // 1\nconsole.log(howManyTimes('abababab', 'ababababa')); // 1\nconsole.log(howManyTimes('abababab', 'ababababab')); // 1\nconsole.log(howManyTimes('abababab', 'abababababa')); // 1\nconsole.log(howManyTimes('abababab', 'abababababab')); // 1\nconsole.log(howManyTimes('abababab', 'ababababababa')); // 1\nconsole.log(howManyTimes('abababab', 'ababababababab')); // 1\nconsole.log(howManyTimes('abababab', 'abababababababa')); // 1\nconsole.log(howManyTimes('abababab', 'abababababababab')); // 1\nconsole.log(howManyTimes('abababab', 'ababababababababa')); // 1\nconsole"}
{"task_id": "JavaScript/19", "generation": "\n    const numArray = numbers.split(' ');\n    const numMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const sortedArray = numArray.sort((a, b) => numMap[a] - numMap[b]);\n    return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n    let min = Infinity;\n    let closestPair = [];\n\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n                min = diff;\n                closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n\n    return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}\nconsole.log(strlen('abc3 */')); // 6\n\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nconst strlen = (string) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}\nconsole.log(strlen('')); // 0\nconsole.log(strlen('abc')); // 3\n\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nconst strlen = (string) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}\nconsole.log(strlen('')); // 0\nconsole.log(strlen('abc')); // 3\n\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nconst strlen = (string) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}\nconsole.log(strlen('')); // 0\nconsole.log(strlen('abc')); // 3\n\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nconst strlen = (string) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n}\nconsole.log(strlen('')); // 0\nconsole.log(strlen('abc')); // 3\n\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nconst str"}
{"task_id": "JavaScript/24", "generation": "\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1;\n};"}
{"task_id": "JavaScript/25", "generation": "\n    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n    let count = {};\n    let result = [];\n\n    // Count occurrences of each number\n    for (let num of numbers) {\n        count[num] = (count[num] || 0) + 1;\n    }\n\n    // Add numbers that occur only once to the result array\n    for (let num of numbers) {\n        if (count[num] === 1) {\n            result.push(num);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            result += string[i].toLowerCase();\n        } else {\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n    return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n    return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let x = 0;\n  let dx = 1e-6;\n  let f = (x) => {\n    let y = 0;\n    for (let i = 0; i < xs.length; i++) {\n      y += xs[i] * Math.pow(x, i);\n    }\n    return y;\n  };\n  while (Math.abs(f(x)) > 1e-6) {\n    x -= f(x) / (f(x + dx) - f(x)) * dx;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/33", "generation": "\n    let result = [...l];\n    let thirdIndices = [];\n    for (let i = 0; i < l.length; i += 3) {\n        thirdIndices.push(l[i]);\n    }\n    thirdIndices.sort((a, b) => a - b);\n    for (let i = 0, j = 0; i < l.length; i += 3, j++) {\n        result[i] = thirdIndices[j];\n    }\n    return result;\n};"}
{"task_id": "JavaScript/34", "generation": "\n    let uniqueList = [];\n    for (let i = 0; i < l.length; i++) {\n        if (!uniqueList.includes(l[i])) {\n            uniqueList.push(l[i]);\n        }\n    }\n    return uniqueList.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "JavaScript/36", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n            count += i.toString().split('').filter(digit => digit === '7').length;\n        }\n    }\n    return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n    let evenIndices = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenIndices.push(l[i]);\n    }\n    evenIndices.sort((a, b) => a - b);\n    let lPrime = [];\n    for (let i = 0, j = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            lPrime.push(evenIndices[j++]);\n        } else {\n            lPrime.push(l[i]);\n        }\n    }\n    return lPrime;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      const [a, b, c] = group.split('');\n      decoded += `${c}${a}${b}`;\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;"}
{"task_id": "JavaScript/39", "generation": "\n    let fib = [0, 1];\n    let i = 2;\n    while (true) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        if (isPrime(fib[i])) {\n            n--;\n            if (n === 0) {\n                return fib[i];\n            }\n        }\n        i++;\n    }\n};\n\nconst isPrime = (num) => {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    return n * n;\n}"}
{"task_id": "JavaScript/42", "generation": "\n    return l.map(x => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n    let seen = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (seen.has(-l[i])) {\n            return true;\n        }\n        seen.add(l[i]);\n    }\n    return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n    let result = '';\n    while (x > 0) {\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n    return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n    if (n === 0) return 0;\n    if (n === 1 || n === 2) return 2;\n    if (n === 3) return 0;\n\n    let a = 0, b = 2, c = 2, d = 0, e;\n    for (let i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    const mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n};"}
{"task_id": "JavaScript/48", "generation": "\n    return text === text.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/49", "generation": "\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s.charAt(i);\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n    const countChars = (s) => {\n        const charCount = {};\n        for (let char of s) {\n            charCount[char] = (charCount[char] || 0) + 1;\n        }\n        return charCount;\n    };\n\n    const s0Count = countChars(s0);\n    const s1Count = countChars(s1);\n\n    for (let char in s0Count) {\n        if (s0Count[char] !== s1Count[char]) {\n            return false;\n        }\n    }\n\n    for (let char in s1Count) {\n        if (!s0Count[char]) {\n            return false;\n        }\n    }\n\n    return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === '>') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/57", "generation": "\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            dec = false;\n        } else if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n    }\n    return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    return [...intersection].sort((a, b) => a - b);\n}\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "JavaScript/59", "generation": "\n    let factor = 2;\n    let lastFactor = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n            lastFactor = factor;\n            n /= factor;\n            while (n % factor === 0) {\n                n /= factor;\n            }\n        }\n        factor = factor === 2 ? 3 : factor + 2;\n    }\n    return lastFactor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n    let result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "JavaScript/63", "generation": "\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 1;\n    if (n === 3) return 2;\n    let a = 0, b = 1, c = 1, d = 2, e = 0;\n    for (let i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}"}
{"task_id": "JavaScript/64", "generation": "\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n    if (s[s.length - 1].toLowerCase() === 'y') {\n        count++;\n    }\n    return count;\n}\nconsole.log(vowelsCount(\"abcde\")); // 2\nconsole.log(vowelsCount(\"ACEDY\")); // 3\nconsole.log(vowelsCount(\"rhythm\")); // 0\nconsole.log(vowelsCount(\"SYZYGY\")); // 1\nconsole.log(vowelsCount(\"encyclopedia\")); // 6\nconsole.log(vowelsCount(\"Y\")); // 1\nconsole.log(vowelsCount(\"quickly\")); // 2\nconsole.log(vowelsCount(\"brightly\")); // 2\nconsole.log(vowelsCount(\"slowly\")); // 1\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"loudly\")); // 1\nconsole.log(vowelsCount(\"softly\")); // 1\nconsole.log(vowelsCount(\"quiet\")); // 2\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"quietly\")); // 3\nconsole.log(vowelsCount(\"qu"}
{"task_id": "JavaScript/65", "generation": "\n    let str = x.toString();\n    let len = str.length;\n    if (shift > len) {\n        return str.split('').reverse().join('');\n    } else {\n        let shiftMod = shift % len;\n        return str.slice(-shiftMod) + str.slice(0, len - shiftMod);\n    }\n};"}
{"task_id": "JavaScript/66", "generation": "\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"abAB 131\")); // 131\nconsole.log(digitSum(\"abcCd 67\")); // 67\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"woArBld 131\")); // 131\nconsole.log(digitSum(\"aAaaaXa\")); // 153"}
{"task_id": "JavaScript/67", "generation": "\n    let apples = s.match(/\\d+(?= apples)/);\n    let oranges = s.match(/\\d+(?= oranges)/);\n    return n - apples - oranges;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\nconsole.log(fruitDistribution(\"0 apples 1 oranges\", 3, 100, 1, \"oranges\", 120, 100, 1, 19)); // 8\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120)); // 19\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 50)); // 45\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 80)); // 19\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 10)); // 5\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 110)); // 9\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 200)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 210)); // 9\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 300)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 310)); // 9\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 400)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 410)); // 9\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 500)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 510)); // 9\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 600)); // 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 610)); // 9\nconsole.log(fruitDistribution(\"2 apples"}
{"task_id": "JavaScript/68", "generation": "\n    let smallestEven = Infinity;\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n    return index !== -1 ? [smallestEven, index] : [];\n};"}
{"task_id": "JavaScript/69", "generation": "\n    let freq = {};\n    lst.forEach(num => {\n        freq[num] = (freq[num] || 0) + 1;\n    });\n    let result = -1;\n    for (let num in freq) {\n        if (num <= freq[num] && num > result) {\n            result = num;\n        }\n    }\n    return result;\n}\nconsole.log(search([4, 1, 2, 2, 1])); // 2\nconsole.log(search([1, 2, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1"}
{"task_id": "JavaScript/70", "generation": "\n    let result = [];\n    while (lst.length > 0) {\n        result.push(Math.min(...lst));\n        lst.splice(lst.indexOf(Math.min(...lst)), 1);\n        if (lst.length > 0) {\n            result.push(Math.max(...lst));\n            lst.splice(lst.indexOf(Math.max(...lst)), 1);\n        }\n    }\n    return result;\n}\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // []\nconsole.log(strangeSortList([1, 2, 3, 4, 5])); // [1, 5, 2, 4, 3]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6])); // [1, 6, 2, 5, 3, 4]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7])); // [1, 7, 2, 6, 3, 5, 4]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])); // [1, 8, 2, 7, 3, 6, 4, 5]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [1, 9, 2, 8, 3, 7, 4, 6, 5]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\nconsole.log(strange"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area.toFixed(2);\n    } else {\n        return -1;\n    }\n}\nconsole.log(triangleArea(3, 4)); // 6.00\nconsole.log(triangleArea(10, 10, 10)); // 43.30\nconsole.log(triangleArea(10, 2, 2)); // -1\nconsole.log(triangleArea(5, 5, 5)); // 10.83\nconsole.log(triangleArea(5, 5, 8)); // 12.00\nconsole.log(triangleArea(5, 5, 10)); // -1\nconsole.log(triangleArea(5, 5, 12)); // -1\nconsole.log(triangleArea(5, 5, 13)); // -1\nconsole.log(triangleArea(5, 5, 14)); // -1\nconsole.log(triangleArea(5, 5, 15)); // -1\nconsole.log(triangleArea(5, 5, 16)); // -1\nconsole.log(triangleArea(5, 5, 17)); // -1\nconsole.log(triangleArea(5, 5, 18)); // -1\nconsole.log(triangleArea(5, 5, 19)); // -1\nconsole.log(triangleArea(5, 5, 20)); // -1\nconsole.log(triangleArea(5, 5, 21)); // -1\nconsole.log(triangleArea(5, 5, 22)); // -1\nconsole.log(triangleArea(5, 5, 23)); // -1\nconsole.log(triangleArea(5, 5, 24)); // -1\nconsole.log(triangleArea(5, 5, 25)); // -1\nconsole.log(triangleArea(5, 5, 26)); // -1\nconsole.log(triangleArea(5, 5, 27"}
{"task_id": "JavaScript/72", "generation": "\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    if(sum > w) return false;\n    for(let i = 0; i < q.length / 2; i++){\n        if(q[i] !== q[q.length - 1 - i]) return false;\n    }\n    return true;\n}\nconsole.log(willItFly([1, 5, 3, 2, 1], 9)); // false\nconsole.log(willItFly([3, 2, 1], 9)); // false\nconsole.log(willItFly([3, 2], 9)); // true\nconsole.log(willItFly([3], 9)); // true\nconsole.log(willItFly([3, 5], 9)); // true\nconsole.log(willItFly([3, 5, 3], 9)); // true\nconsole.log(willItFly([3, 5, 3, 2], 9)); // true\nconsole.log(willItFly([3, 5, 3, 2, 1], 9)); // true\nconsole.log(willItFly([3, 5, 3, 2, 1, 2, 3], 9)); // true\nconsole.log(willItFly([3, 5, 3, 2, 1, 2, 3, 4], 9)); // false\nconsole.log(willItFly([3, 5, 3, 2, 1, 2, 3, 4, 5], 9)); // false\nconsole.log(willItFly([3, 5, 3, 2, 1, 2, 3, 4, 5, 6], 9)); // false\nconsole.log(willItFly([3, 5, 3, 2, 1, 2, 3, 4, 5, 6, 7], 9)); // false\nconsole.log(willItFly([3, 5, 3"}
{"task_id": "JavaScript/73", "generation": "\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}"}
{"task_id": "JavaScript/74", "generation": "\n    let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return count1 < count2 ? lst1 : count1 === count2 ? lst1 : lst2;\n}"}
{"task_id": "JavaScript/75", "generation": "\n    if (a < 2) return false;\n    for (let i = 2; i * i <= a; i++) {\n        if (a % i === 0) return false;\n    }\n    return true;\n}\n\nconst isMultiplyOfThreePrime = (a) => {\n    let count = 0;\n    for (let i = 2; i <= a; i++) {\n        if (a % i === 0 && isMultiplyPrime(i)) {\n            count++;\n        }\n    }\n    return count === 3;\n}"}
{"task_id": "JavaScript/76", "generation": "\n    if (n === 1) {\n        return x === 1;\n    }\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power === x;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n    return Math.pow(cubeRoot, 3) === Math.abs(a);\n}\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // true\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\nconsole.log(iscube(125)); // true\nconsole.log(iscube(26)); // false\nconsole.log(iscube(27)); // true\nconsole.log(iscube(28)); // false\nconsole.log(iscube(29)); // false\nconsole.log(iscube(30)); // false\nconsole.log(iscube(31)); // false\nconsole.log(iscube(32)); // false\nconsole.log(iscube(33)); // false\nconsole.log(iscube(34)); // false\nconsole.log(iscube(35)); // false\nconsole.log(iscube(36)); // false\nconsole.log(iscube(37)); // false\nconsole.log(iscube(38)); // false\nconsole.log(iscube(39)); // false\nconsole.log(iscube(40)); // false\nconsole.log(iscube(41)); // false\nconsole.log(iscube(42)); // false\nconsole.log(iscube(43)); // false\nconsole.log(iscube(44)); // false\nconsole.log(iscube(45)); // false\nconsole.log(iscube(46)); // false\nconsole.log(iscube(47)); // false\nconsole.log(iscube(48)); // false\nconsole.log(iscube(49)); // false\nconsole.log(iscube(50)); // false\nconsole.log(iscube(51)); // false\nconsole.log(iscube(52)); // false\nconsole.log(iscube(53)); // false\nconsole.log(iscube(54)); // false\nconsole.log(iscube(55)); // false\nconsole.log(iscube(56)); // false\nconsole.log(iscube(57"}
{"task_id": "JavaScript/78", "generation": "\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D') {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hexKey(\"AB\")); // 1\nconsole.log(hexKey(\"1077E\")); // 2\nconsole.log(hexKey(\"ABED1A33\")); // 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // 6\nconsole.log(hexKey(\"2020\")); // 2\n// The function hexKey receives a string num and counts the number of prime hexadecimal digits in it. It iterates through the string, checking each character against the prime hexadecimal digits (2, 3, 5, 7, B, D). If a match is found, the count is incremented. Finally, the function returns the total count of prime hexadecimal digits found in the input string."}
{"task_id": "JavaScript/79", "generation": "\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A+';\n        if (grade > 3.7) return 'A';\n        if (grade > 3.3) return 'A-';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.7) return 'B';\n        if (grade > 2.3) return 'B-';\n        if (grade > 2.0) return 'C+';\n        if (grade > 1.7) return 'C';\n        if (grade > 1.3) return 'C-';\n        if (grade > 1.0) return 'D+';\n        if (grade > 0.7) return 'D';\n        if (grade > 0.0) return 'D-';\n        return 'E';\n    });\n}"}
{"task_id": "JavaScript/82", "generation": "\n    const length = string.length;\n    if (length < 2) return false;\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) return false;\n    }\n    return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 1;\n    return 18 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"110\"\nconsole.log(solve(147)); // \"1100\"\n/*\n    The function solve takes a positive integer N as input. It initializes a variable sum to 0. Then, it enters a loop that continues until N becomes 0. In each iteration of the loop, it adds the last digit of N to sum using the modulo operator %, and then it removes the last digit from N using the floor division operator /. After the loop finishes, it returns the sum converted to a binary string using the toString(2) method.\n*/"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n    // Split the string into words\n    let words = s.split(' ');\n    // Iterate over each word\n    for (let i = 0; i < words.length; i++) {\n        // Sort the characters of the word in ascending order\n        words[i] = words[i].split('').sort().join('');\n    }\n    // Join the sorted words back into a string\n    return words.join(' ');\n}\nconsole.log(antiShuffle('Hi')); // 'Hi'\nconsole.log(antiShuffle('helloehllo World!!!Wdlor')); // 'ehllo !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!')); // 'Hello !!!Wdlor'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); // 'Hello !!!Wdlor helloe'\nconsole.log(antiShuffle('Hello World!!!Wdlor')); //"}
{"task_id": "JavaScript/87", "generation": "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result.map(coord => `(${coord[0]} ${coord[1]})`);\n};"}
{"task_id": "JavaScript/88", "generation": "\n    if (array.length === 0) {\n        return [];\n    }\n    if (array.length === 1) {\n        return array;\n    }\n    const sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n    }\n}"}
{"task_id": "JavaScript/89", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 97 && charCode <= 122) { // lowercase letters\n            result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n        } else if (charCode >= 65 && charCode <= 90) { // uppercase letters\n            result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) return null;\n    let smallest = lst[0];\n    let secondSmallest = Infinity;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest === Infinity ? null : secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n    let boredomCount = 0;\n    let sentences = S.split(/[\\.\\?\\!]\\s*/);\n    for (let sentence of sentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\nconsole.log(isBored(\"Hello world. sky. The sun shining. I love this weather\")); // 1\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy\")); // 2\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy\")); // 3\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy\")); // 4\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy. I am so so so so happy\")); // 5\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy. I am so so so so happy. I am so so so so so happy\")); // 6\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy. I am so so so so happy. I am so so so so so happy. I am so so so so so so happy\")); // 7\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy. I am so so so so happy. I am so so so so so happy. I am so so so so so so happy. I am so so so so so so so happy\")); // 8\nconsole.log(isBored(\"I am happy. I am not happy. I am so happy. I am so so happy. I am so so so happy. I am so so so so happy. I am so so so so so happy. I am so so so so so so so happy. I am so so so so so"}
{"task_id": "JavaScript/92", "generation": "\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        return x === y + z || y === x + z || z === x + y;\n    }\n    return false;\n}\nconsole.log(anyInt(5, 2, 7)); // true\nconsole.log(anyInt(3, 2, 2)); // false\nconsole.log(anyInt(-2, 1, 1)); // true\nconsole.log(anyInt(3.6, -2.2, 2)); // false\nconsole.log(anyInt(3, -2, 1)); // true\nconsole.log(anyInt(3, -2.2, 1)); // false\nconsole.log(anyInt(3, -2, 1.8)); // false\nconsole.log(anyInt(3, -2, 2)); // true\nconsole.log(anyInt(3, -2, 2.0)); // true\nconsole.log(anyInt(3, -2, 2.1)); // false\nconsole.log(anyInt(3, -2, 2.2)); // false\nconsole.log(anyInt(3, -2, 2.3)); // false\nconsole.log(anyInt(3, -2, 2.4)); // false\nconsole.log(anyInt(3, -2, 2.5)); // false\nconsole.log(anyInt(3, -2, 2.6)); // false\nconsole.log(anyInt(3, -2, 2.7)); // false\nconsole.log(anyInt(3, -2, 2.8)); // false\nconsole.log(anyInt(3, -2, 2.9)); // false\nconsole.log(anyInt(3, -2, 3)); // true\nconsole.log(anyInt(3, -2, 3.0)); // true\nconsole.log(anyInt(3, -2, 3.1)); // false\nconsole.log(anyInt(3, -2, 3.2)); // false\nconsole.log(anyInt(3, -2, 3.3)); // false\nconsole.log"}
{"task_id": "JavaScript/93", "generation": "\n    const vowels = 'aeiou';\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n\n    for (let char of message) {\n        if (char.match(/[a-zA-Z]/)) {\n            // Swap case\n            char = char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\n            // Replace vowels\n            if (vowels.includes(char.toLowerCase())) {\n                let vowelIndex = alphabet.indexOf(char.toLowerCase());\n                let newVowelIndex = (vowelIndex + 2) % 26;\n                char = alphabet[newVowelIndex];\n                // Preserve original case\n                char = char === char.toLowerCase() ? char : char.toUpperCase();\n            }\n        }\n        encodedMessage += char;\n    }\n\n    return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n    const isPrime = (num) => {\n        for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if (num % i === 0) return false; \n        return num > 1;\n    }\n    let maxPrime = 0;\n    for (let num of lst) {\n        if (isPrime(num) && num > maxPrime) maxPrime = num;\n    }\n    return maxPrime.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n}\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7\n// The function isPrime checks if a number is prime. The function skjkasdkd iterates through the list, checks if each number is prime and if it is, checks if it is greater than the current maxPrime. If it is, it updates maxPrime. Finally, it returns the sum of the digits of maxPrime."}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let allLowerCase = true;\n    let allUpperCase = true;\n    for (let key of Object.keys(dict)) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key !== key.toLowerCase()) {\n            allLowerCase = false;\n        }\n        if (key !== key.toUpperCase()) {\n            allUpperCase = false;\n        }\n    }\n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "JavaScript/96", "generation": "\n    const isPrime = (num) => {\n        for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if (num % i === 0) return false;\n        return num > 1;\n    };\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}"}
{"task_id": "JavaScript/97", "generation": "\n    let unitDigitA = Math.abs(a % 10);\n    let unitDigitB = Math.abs(b % 10);\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "JavaScript/98", "generation": "\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if ('AEIOU'.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(countUpper('aBCdEf')); // 1\nconsole.log(countUpper('abcdefg')); // 0\nconsole.log(countUpper('dBBE')); // 0\nconsole.log(countUpper('AbCdEfG')); // 3\nconsole.log(countUpper('aBcDeFg')); // 2\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBbE')); // 1\nconsole.log(countUpper('dBb"}
{"task_id": "JavaScript/99", "generation": "\n    const num = parseFloat(value);\n    const floor = Math.floor(num);\n    const ceil = Math.ceil(num);\n\n    return num - floor < ceil - num ? floor : ceil;\n};"}
{"task_id": "JavaScript/100", "generation": "\n    let arr = [];\n    let num = n;\n    for (let i = 0; i < n; i++) {\n        arr.push(num);\n        if (n % 2 === 0) {\n            num += 2;\n        } else {\n            num += 2;\n        }\n    }\n    return arr;\n}\nconsole.log(makeAPile(3)); // [3, 5, 7]\nconsole.log(makeAPile(4)); // [4, 6, 8, 10]\nconsole.log(makeAPile(5)); // [5, 7, 9, 11, 13]\nconsole.log(makeAPile(6)); // [6, 8, 10, 12, 14, 16]\nconsole.log(makeAPile(7)); // [7, 9, 11, 13, 15, 17, 19]\nconsole.log(makeAPile(8)); // [8, 10, 12, 14, 16, 18, 20, 22]\nconsole.log(makeAPile(9)); // [9, 11, 13, 15, 17, 19, 21, 23, 25]\nconsole.log(makeAPile(10)); // [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\nconsole.log(makeAPile(11)); // [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\nconsole.log(makeAPile(12)); // [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\nconsole.log(makeAPile(13)); // [13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]\nconsole.log(makeAPile(14)); // [14, 16, 18, 20, 22, 24, 26, "}
{"task_id": "JavaScript/101", "generation": "\n    // Split the string by commas and spaces, then filter out any empty strings\n    return s.split(/[\\s,]+/).filter(Boolean);\n};"}
{"task_id": "JavaScript/102", "generation": "\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "JavaScript/103", "generation": "\n    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b11010\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\"\nconsole.log(roundedAvg(33, 33)); // \"0b11010\"\nconsole.log(roundedAvg(33, 34)); // \"0b11011\"\nconsole.log(roundedAvg(33, 35)); // \"0b11100\"\nconsole.log(roundedAvg(33, 36)); // \"0b11101\"\nconsole.log(roundedAvg(33, 37)); // \"0b11110\"\nconsole.log(roundedAvg(33, 38)); // \"0b11111\"\nconsole.log(roundedAvg(33, 39)); // \"0b100000\"\nconsole.log(roundedAvg(33, 40)); // \"0b100001\"\nconsole.log(roundedAvg(33, 41)); // \"0b100010\"\nconsole.log(roundedAvg(33, 42)); // \"0b100011\"\nconsole.log(roundedAvg(33, 43)); // \"0b100100\"\nconsole.log(roundedAvg(33, 44)); // \"0b100101\"\nconsole.log(roundedAvg(33, 45)); // \"0b100110\"\nconsole.log(roundedAvg(33, 46)); // \"0b100111\"\nconsole.log(roundedAvg(33, 47)); // \"0b101000\"\nconsole.log(roundedAvg(33, 48)); //"}
{"task_id": "JavaScript/104", "generation": "\n    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        let num = x[i];\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 === 0) {\n                result.push(x[i]);\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\nconsole.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10])); // []\nconsole.log(uniqueDigits([123, 456, 789, 101])); // [101, 456]\nconsole.log(uniqueDigits([111, 222, 333, 444])); // [222, 444]\nconsole.log(uniqueDigits([135, 246, 579, 808])); // [246, 808]\nconsole.log(uniqueDigits([999, 888, 777, 666])); // [888, 666]\nconsole.log(uniqueDigits([1234, 5678, 91011, 1213])); // [5678, 1213]\nconsole.log(uniqueDigits([13579, 24680, 97531, 86420])); // [24680, 86420]\nconsole.log(uniqueDigits([11111, 22222, 33333, 44444])); // [22222, 44444]\nconsole.log(uniqueDigits([123456, 789012, 345678, 901234])); // [789012, 901234]\nconsole.log(uniqueDigits([135792468, 246802468, 975310468, 864209468])); // [246802468, 864209468]\nconsole.log(uniqueDigits([1111111, 2222222, 3333333, 4444444])); // [2222222, 4444444]\nconsole.log("}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.toString().length - b.toString().length);\n};\n\nconst sortAndReverse = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  return reversedArr;\n};\n\nconst replaceNumbers = (arr) => {\n  const numberNames = [\n    \"\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const result = arr.map((num) => numberNames[num]);\n  return result;\n};\n\nconst sortArray = (arr) => {\n  const sortedArr = sortAndReverse(arr);\n  const filteredArr = sortedArr.filter((num) => num >= 1 && num <= 9);\n  const replacedArr = replaceNumbers(filteredArr);\n  return replacedArr;\n};"}
{"task_id": "JavaScript/106", "generation": "\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}\nconsole.log(f(5)); // [6, 24, 15]\nconsole.log(f(3)); // [6, 24]\nconsole.log(f(1)); // [6]\nconsole.log(f(0)); // []\nconsole.log(f(10)); // [6, 24, 15, 720, 2520, 34560, 24883200, 263524800, 2488320000, 24678048000]\nconsole.log(f(2)); // [6, 24]\nconsole.log(f(4)); // [6, 24, 15, 720]\nconsole.log(f(6)); // [6, 24, 15, 720, 2520, 34560]\nconsole.log(f(8)); // [6, 24, 15, 720, 2520, 34560, 24883200, 263524800]\nconsole.log(f(9)); // [6, 24, 15, 720, 2520, 34560, 24883200, 263524800, 2488320000]\nconsole.log(f(11)); // [6, 24, 15, 720, 2520, 34560, 24883200, 263524800, 2488320000, 24678048000]\nconsole.log(f(12)); // [6, 24, 15, 720, 2520, 34560, 24883200, 263524800, 2488320000, 24678048000,"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (String(i) === String(i).split('').reverse().join('')) {\n            if (i % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}"}
{"task_id": "JavaScript/108", "generation": "\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = Math.abs(arr[i]);\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(countNums([])); // 0\nconsole.log(countNums([-1, 11, -11, 1, 1, 2])); // 3\nconsole.log(countNums([-123, 456, -789])); // 3\nconsole.log(countNums([0, -1, -2, -3, -4])); // 0\nconsole.log(countNums([10, 20, 30, 40, 50])); // 5\nconsole.log(countNums([-10, -20, -30, -40, -50])); // 5\nconsole.log(countNums([-111, 222, -333, 444, -555])); // 5\nconsole.log(countNums([-999, 888, -777, 666, -555])); // 5\nconsole.log(countNums([-12345, 67890, -1122334455])); // 3\nconsole.log(countNums([-123456789, 987654321, -11223344556677889900])); // 3\nconsole.log(countNums([-1234567890, 9876543210, -1122334455667788990011])); // 3\nconsole.log(countNums([-12345678901, 98765432101, -112233445566778899001122])); // 3\nconsole.log(countNums([-123456789012, 987654321012, -11223344556677889900112233])); // 3\nconsole.log(countNums([-1234567890123, 9876543210123, -112233445566778899001122"}
{"task_id": "JavaScript/109", "generation": "\n    if (arr.length === 0) return true;\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n    }\n    if (count <= 1) return true;\n    else return false;\n}\nconsole.log(moveOneBall([3, 4, 1, 2])); // true\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // false\nconsole.log(moveOneBall([])); // true\nconsole.log(moveOneBall([1, 2, 3, 4, 5])); // true\nconsole.log(moveOneBall([5, 1, 2, 3, 4])); // true\nconsole.log(moveOneBall([2, 3, 4, 5, 1])); // true\nconsole.log(moveOneBall([1, 3, 2, 4, 5])); // false\nconsole.log(moveOneBall([2, 1, 3, 4, 5])); // false\nconsole.log(moveOneBall([3, 2, 1, 4, 5])); // false\nconsole.log(moveOneBall([4, 3, 2, 1, 5])); // false\nconsole.log(moveOneBall([5, 4, 3, 2, 1])); // false\nconsole.log(moveOneBall([1, 2, 3, 5, 4])); // false\nconsole.log(moveOneBall([1, 3, 2, 5, 4])); // false\nconsole.log(moveOneBall([1, 4, 3, 2, 5])); // false\nconsole.log(moveOneBall([1, 4, 3, 5, 2])); // false\nconsole.log(moveOneBall([1, 5, 4, 3, 2])); // false\nconsole.log(moveOneBall(["}
{"task_id": "JavaScript/110", "generation": "\n    let oddNum = lst1.filter(num => num % 2 !== 0);\n    let evenNum = lst2.filter(num => num % 2 === 0);\n    if (oddNum.length <= evenNum.length) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nconsole.log(exchange([1, 2], [1])); // \"YES\"\nconsole.log(exchange([1, 5, 3], [2, 4])); // \"YES\"\nconsole.log(exchange([1, 5, 3], [1, 5, 3])); // \"NO\"\nconsole.log(exchange([2, 4, 6], [1, 3, 5])); // \"YES\"\nconsole.log(exchange([1, 3, 5], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 3, 5], [1, 3, 5])); // \"NO\"\nconsole.log(exchange([2, 4, 6], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 2, 3], [4, 5, 6])); // \"YES\"\nconsole.log(exchange([1, 2, 3], [1, 2, 3])); // \"NO\"\nconsole.log(exchange([2, 4, 6], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 2, 3], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 2, 3], [1, 2, 3])); // \"NO\"\nconsole.log(exchange([2, 4, 6], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 2, 3], [2, 4, 6])); // \"YES\"\nconsole.log(exchange([1, 2,"}
{"task_id": "JavaScript/111", "generation": "\n  const result = {};\n  const arr = test.split(' ').filter(Boolean);\n  arr.forEach((el) => {\n    if (result[el]) {\n      result[el] += 1;\n    } else {\n      result[el] = 1;\n    }\n  });\n  const max = Math.max(...Object.values(result));\n  const keys = Object.keys(result).filter((key) => result[key] === max);\n  const finalResult = {};\n  keys.forEach((key) => {\n    finalResult[key] = max;\n  });\n  return finalResult;\n};"}
{"task_id": "JavaScript/112", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n    let reversed = result.split('').reverse().join('');\n    return [result, result === reversed];\n}"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map((str, i) => {\n        const oddCount = [...str].filter(digit => parseInt(digit) % 2 !== 0).length;\n        return `the number ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n};"}
{"task_id": "JavaScript/114", "generation": "\n    let min = nums[0];\n    let sum = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        sum = Math.min(nums[i], sum + nums[i]);\n        min = Math.min(min, sum);\n    }\n    return min;\n}\nconsole.log(minSubArraySum([2, 3, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2])); // -6\nconsole.log(minSubArraySum([1, 2, 3, -6, 1])); // -6\nconsole.log(minSubArraySum([1, 2, 3, 4, 5])); // 1\nconsole.log(minSubArraySum([-1, -2, -3, -4, -5])); // -15\nconsole.log(minSubArraySum([1, -2, 3, -4, 5, -6])); // -6\nconsole.log(minSubArraySum([1, 2, -3, 4, -5, 6, -7])); // -7\nconsole.log(minSubArraySum([1, 2, 3, -4, 5, -6, 7, -8])); // -8\nconsole.log(minSubArraySum([1, 2, 3, -4, 5, -6, 7, -8, 9])); // -8\nconsole.log(minSubArraySum([1, 2, 3, -4, 5, -6, 7, -8, 9, -10])); // -10\nconsole.log(minSubArraySum([1, 2, 3, -4, 5, -6, 7, -8, 9, -10, 11])); // -10\nconsole.log(minSubArraySum([1, 2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12])); // -12\nconsole.log(minSubArraySum([1, 2, 3,"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n            }\n        }\n    }\n    return Math.ceil(count / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n    return arr.sort((a, b) => {\n        let aOnes = a.toString(2).split('').filter(char => char === '1').length;\n        let bOnes = b.toString(2).split('').filter(char => char === '1').length;\n        if (aOnes === bOnes) {\n            return a - b;\n        } else {\n            return aOnes - bOnes;\n        }\n    });\n}"}
{"task_id": "JavaScript/117", "generation": "\n    // Split the string into words\n    const words = s.split(' ');\n    // Filter the words to only include those with exactly n consonants\n    const filteredWords = words.filter(word => {\n        // Remove any non-letter characters from the word\n        const letters = word.replace(/[^a-zA-Z]/g, '');\n        // Count the number of consonants in the word\n        const consonants = letters.replace(/[aeiouAEIOU]/g, '').length;\n        // Return true if the word has exactly n consonants, false otherwise\n        return consonants === n;\n    });\n    // Return the filtered words\n    return filteredWords;\n}"}
{"task_id": "JavaScript/118", "generation": "\n    const vowels = 'aeiouAEIOU';\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n            return word[i];\n        }\n    }\n    return '';\n}\nconsole.log(getClosestVowel(\"yogurt\")); // \"u\"\nconsole.log(getClosestVowel(\"FULLU\")); // \"U\"\nconsole.log(getClosestVowel(\"ab\")); // \"\"\nconsole.log(getClosestVowel(\"rhythm\")); // \"\"\nconsole.log(getClosestVowel(\"beautiful\")); // \"i\"\nconsole.log(getClosestVowel(\"aeiou\")); // \"i\"\nconsole.log(getClosestVowel(\"bcdfghjklmnpqrstvwxyz\")); // \"\"\nconsole.log(getClosestVowel(\"AeIoU\")); // \"o\"\nconsole.log(getClosestVowel(\"bAck\")); // \"A\"\nconsole.log(getClosestVowel(\"dB\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosestVowel(\"qwrtyp\")); // \"\"\nconsole.log(getClosest"}
{"task_id": "JavaScript/119", "generation": "\n    let open = 0;\n    let close = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    return open === close ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n    // sort the array in descending order\n    arr.sort((a, b) => b - a);\n    // slice the first k elements from the sorted array\n    const result = arr.slice(0, k);\n    // return the result\n    return result;\n}\nconsole.log(maximum([-3, -4, 5], 3)); // [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // [2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([-1, -2, -3, -4, -5], 3)); // [-3, -2, -1]\nconsole.log(maximum([0, 0, 0, 0, 0], 2)); // [0, 0]\nconsole.log(maximum([-1, -1, -1, -1, -1], 4)); // [-1, -1, -1, -1]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([-1, -2, -3, -4, -5], 5)); // [-1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([-1, -2, -3, -4, -5], 6)); // [-1, -2, -3, -4, -5]\nconsole.log(maximum([1, 2, 3, 4, 5], 7)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([-1, -2, -3, -4, -5], 7)); //"}
{"task_id": "JavaScript/121", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n    let arr = [];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            arr.push(n);\n        }\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n    }\n    arr.push(1);\n    return arr.sort((a, b) => a - b);\n}\nconsole.log(getOddCollatz(5)); // [1, 5]\nconsole.log(getOddCollatz(6)); // [1, 3, 5]\nconsole.log(getOddCollatz(7)); // [1, 7, 11, 17, 21, 85]\nconsole.log(getOddCollatz(8)); // [1, 3, 5]\nconsole.log(getOddCollatz(9)); // [1, 3, 5, 21]\nconsole.log(getOddCollatz(10)); // [1, 3, 5]\nconsole.log(getOddCollatz(11)); // [1, 11, 17, 21, 85]\nconsole.log(getOddCollatz(12)); // [1, 3, 5]\nconsole.log(getOddCollatz(13)); // [1, 13, 17, 21, 85]\nconsole.log(getOddCollatz(14)); // [1, 3, 5]\nconsole.log(getOddCollatz(15)); // [1, 3, 5, 21]\nconsole.log(getOddCollatz(16)); // [1, 3, 5]\nconsole.log(getOddCollatz(17)); // [1, 17, 21, 85]\nconsole.log(getOddCollatz(18)); // [1, 3, 5]\nconsole.log(getOddCollatz(19)); // [1, 3, 5, 21]\nconsole.log(getOddCollatz(20)); // [1, 3, 5]\nconsole.log(getOddCollatz(21)); // [1, 21, "}
{"task_id": "JavaScript/124", "generation": "\n    const regex = /^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])$/;\n    return regex.test(date);\n}"}
{"task_id": "JavaScript/125", "generation": "\n    if (txt.includes(' ')) {\n        return txt.split(' ');\n    } else if (txt.includes(',')) {\n        return txt.split(',');\n    } else {\n        return [...txt].filter(char => char >= 'a' && char <= 'z' && (char.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 === 1).length;\n    }\n};"}
{"task_id": "JavaScript/126", "generation": "\n    let count = 0;\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            count++;\n            if (count > 1) {\n                return false;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/127", "generation": "\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    let length = end - start + 1;\n    return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n    if (arr.length === 0) return null;\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) return 0;\n        product *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n    return product * sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n    const n = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    const visited = new Set();\n    const dfs = (x, y, path) => {\n        if (path.length === k) {\n            return path;\n        }\n        visited.add(`${x},${y}`);\n        let minPath = [];\n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited.has(`${nx},${ny}`)) {\n                const newPath = dfs(nx, ny, path.concat(grid[nx][ny]));\n                if (!minPath.length || newPath < minPath) {\n                    minPath = newPath;\n                }\n            }\n        }\n        visited.delete(`${x},${y}`);\n        return minPath;\n    };\n    let minPath = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            const path = dfs(i, j, [grid[i][j]]);\n            if (!minPath.length || path < minPath) {\n                minPath = path;\n            }\n        }\n    }\n    return minPath;\n}"}
{"task_id": "JavaScript/130", "generation": "\n    let arr = [3, 1, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(arr[i - 1] + arr[i - 3]);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n        }\n    }\n    return arr.slice(0, n + 1);\n}"}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    let hasOdd = false;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return hasOdd ? product : 0;\n}\nconsole.log(digits(1)); // 1\nconsole.log(digits(4)); // 0\nconsole.log(digits(235)); // 15\nconsole.log(digits(2222)); // 0\nconsole.log(digits(13579)); // 945\nconsole.log(digits(2468)); // 0\nconsole.log(digits(123456789)); // 945\nconsole.log(digits(987654321)); // 945\nconsole.log(digits(111111111)); // 1\nconsole.log(digits(222222222)); // 0\nconsole.log(digits(333333333)); // 27\nconsole.log(digits(444444444)); // 0\nconsole.log(digits(555555555)); // 945\nconsole.log(digits(666666666)); // 0\nconsole.log(digits(777777777)); // 945\nconsole.log(digits(888888888)); // 0\nconsole.log(digits(999999999)); // 945\nconsole.log(digits(1234567890)); // 945\nconsole.log(digits(9876543210)); // 945\nconsole.log(digits(1111111111)); // 1\nconsole.log(digits(2222222222)); // 0\nconsole.log(digits(3333333333)); // 27\nconsole.log(digits(4444444444)); // 0\nconsole.log(digits(5555555555)); // 945\nconsole.log(digits(6666666666)); // 0\nconsole.log(digits(7777777777)); // 945\nconsole.log(digits(8888888888)); // 0\nconsole.log(digits("}
{"task_id": "JavaScript/132", "generation": "\n    let stack = [];\n    let nested = false;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']' && stack.length > 0) {\n            stack.pop();\n            nested = true;\n        }\n    }\n    return nested && stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n    // Check if the last character is an alphabetical character\n    if (/[a-zA-Z]$/.test(txt)) {\n        // Check if the last character is not part of a word\n        if (/[a-zA-Z] [^a-zA-Z]$/.test(txt)) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/135", "generation": "\n    let max = arr[0];\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            index = i;\n        }\n    }\n    for (let i = index - 1; i >= 0; i--) {\n        if (arr[i] > max) {\n            return i;\n        }\n    }\n    return -1;\n}\nconsole.log(canArrange([1, 2, 4, 3, 5])); // -1\nconsole.log(canArrange([1, 2, 3, 4, 5])); // 4\nconsole.log(canArrange([5, 4, 3, 2, 1])); // 0\nconsole.log(canArrange([1, 3, 2, 4, 5])); // 3\nconsole.log(canArrange([1, 2, 3, 4, 5, 6])); // 5\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7])); // 6\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8])); // 7\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 8\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 9\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 10\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 11\nconsole.log(canArrange([1, "}
{"task_id": "JavaScript/136", "generation": "\n    let neg = lst.filter(n => n < 0);\n    let pos = lst.filter(n => n > 0);\n    return [neg.length ? Math.max(...neg) : null, pos.length ? Math.min(...pos) : null];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  let numA = Number(a.replace(\",\", \".\"));\n  let numB = Number(b.replace(\",\", \".\"));\n  if (numA > numB) return numA;\n  else if (numA < numB) return numB;\n  else return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n    if (n < 8 || n % 2 !== 0) {\n        return false;\n    }\n    return true;\n}\nconsole.log(isEqualToSumEven(4)); // false\nconsole.log(isEqualToSumEven(6)); // true\nconsole.log(isEqualToSumEven(8)); // true\nconsole.log(isEqualToSumEven(10)); // true\nconsole.log(isEqualToSumEven(12)); // true\nconsole.log(isEqualToSumEven(14)); // true\nconsole.log(isEqualToSumEven(16)); // true\nconsole.log(isEqualToSumEven(18)); // true\nconsole.log(isEqualToSumEven(20)); // true\nconsole.log(isEqualToSumEven(22)); // true\nconsole.log(isEqualToSumEven(24)); // true\nconsole.log(isEqualToSumEven(26)); // true\nconsole.log(isEqualToSumEven(28)); // true\nconsole.log(isEqualToSumEven(30)); // true\nconsole.log(isEqualToSumEven(32)); // true\nconsole.log(isEqualToSumEven(34)); // true\nconsole.log(isEqualToSumEven(36)); // true\nconsole.log(isEqualToSumEven(38)); // true\nconsole.log(isEqualToSumEven(40)); // true\nconsole.log(isEqualToSumEven(42)); // true\nconsole.log(isEqualToSumEven(44)); // true\nconsole.log(isEqualToSumEven(46)); // true\nconsole.log(isEqualToSumEven(48)); // true\nconsole.log(isEqualToSumEven(50)); // true\nconsole.log(isEqualToSumEven(52)); // true\nconsole.log(isEqualToSumEven(54)); // true\nconsole.log(isEqualToSumEven(56)); // true\nconsole.log(isEqualToSumEven(58)); // true\nconsole.log(isEqualToSumEven(60)); // true\nconsole.log(isEqualToSumEven(62)); // true\nconsole.log(isEqualToSumEven(64)); // true\nconsole.log(isEqualToSumEven(66)); // true"}
{"task_id": "JavaScript/139", "generation": "\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i * factorial(i);\n    }\n    return result;\n};\n\nconst factorial = (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n    return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n}"}
{"task_id": "JavaScript/141", "generation": "\n    let count = 0;\n    let dot = file_name.indexOf('.');\n    let dotCount = file_name.split('.').length - 1;\n    let validExtensions = ['txt', 'exe', 'dll'];\n    let extension = file_name.slice(dot + 1);\n    let firstChar = file_name.charAt(0);\n    let validChars = /^[a-zA-Z]+$/;\n    \n    if (dotCount !== 1 || !validChars.test(firstChar) || !validExtensions.includes(extension)) {\n        return 'No';\n    }\n    \n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n            count++;\n        }\n    }\n    \n    return count <= 3 ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/143", "generation": "\n    const words = sentence.split(' ');\n    const primeNumbers = [2, 3, 5, 7];\n    const primeWords = words.filter(word => {\n        const length = word.length;\n        for (let i = 0; i < primeNumbers.length; i++) {\n            if (length === primeNumbers[i]) {\n                return true;\n            }\n        }\n        return false;\n    });\n    return primeWords.join(' ');\n};"}
{"task_id": "JavaScript/144", "generation": "\n    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n    let resultNumerator = xNumerator * nNumerator;\n    let resultDenominator = xDenominator * nDenominator;\n    if (resultNumerator % resultDenominator === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/145", "generation": "\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let num of nums) {\n        let strNum = Math.abs(num).toString();\n        let firstDigit = parseInt(strNum.charAt(0));\n        let lastDigit = parseInt(strNum.charAt(strNum.length - 1));\n        if (num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109, 2])); // 2\nconsole.log(specialFilter([-11, 22, 33, 44, 55])); // 3\nconsole.log(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 0\nconsole.log(specialFilter([11, 13, 15, 17, 19, 21, 23, 25, 27, 29])); // 5\nconsole.log(specialFilter([-1, -3, -5, -7, -9])); // 0\nconsole.log(specialFilter([-11, -13, -15, -17, -19, -21, -23, -25, -27, -29])); // 5\nconsole.log(specialFilter([-11, -13, -15, -17, -19, -21, -23, -25, -27, -29, 0])); // 5\nconsole.log(specialFilter([-11, -13, -15, -17, -19, -21, -23, -25, -27, -29, 1])); // 6\nconsole.log(specialFilter([-11, -13, -15, -17, -19, -21, -23, -25, -27, -29, 2])); // 7\nconsole.log(specialFilter([-11, -13, -15, -17, -19,"}
{"task_id": "JavaScript/147", "generation": "\n    let a = [];\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(getMaxTriples(5)); // Output: 1\nconsole.log(getMaxTriples(6)); // Output: 4\nconsole.log(getMaxTriples(7)); // Output: 7\nconsole.log(getMaxTriples(8)); // Output: 10\nconsole.log(getMaxTriples(9)); // Output: 13\nconsole.log(getMaxTriples(10)); // Output: 16\nconsole.log(getMaxTriples(11)); // Output: 19\nconsole.log(getMaxTriples(12)); // Output: 22\nconsole.log(getMaxTriples(13)); // Output: 25\nconsole.log(getMaxTriples(14)); // Output: 28\nconsole.log(getMaxTriples(15)); // Output: 31\nconsole.log(getMaxTriples(16)); // Output: 34\nconsole.log(getMaxTriples(17)); // Output: 37\nconsole.log(getMaxTriples(18)); // Output: 40\nconsole.log(getMaxTriples(19)); // Output: 43\nconsole.log(getMaxTriples(20)); // Output: 46\nconsole.log(getMaxTriples(21)); // Output: 49\nconsole.log(getMaxTriples(22)); // Output: 52\nconsole.log(getMaxTriples(23)); // Output: 55\nconsole.log(getMaxTriples(24)); // Output: 58\nconsole.log(getMaxTriples(25"}
{"task_id": "JavaScript/148", "generation": "\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) return [];\n    if (index1 < index2) return planets.slice(index1 + 1, index2);\n    return planets.slice(index2 + 1, index1);\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Earth\", \"Uranus\")); // [\"Mars\", \"Jupiter\", \"Saturn\"]\nconsole.log(bf(\"Mercury\", \"Venus\")); // []\nconsole.log(bf(\"Pluto\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole.log(bf(\"\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"\")); // []\nconsole.log(bf(\"\", \"\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Mars\")); // []\nconsole.log(bf(\"Mars\", \"Pluto\")); // []\nconsole.log(bf(\"Pluto\", \"Pluto\")); // []\nconsole."}
{"task_id": "JavaScript/149", "generation": "\n  // Filter out strings with even lengths\n  const oddLengthStrings = lst.filter(str => str.length % 2 !== 0);\n\n  // Sort the filtered list by length of each string\n  oddLengthStrings.sort((a, b) => a.length - b.length);\n\n  return oddLengthStrings;\n}"}
{"task_id": "JavaScript/150", "generation": "\n    if (n < 2) return y;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return y;\n    }\n    return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] % 2 !== 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0);\n        }else{\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/153", "generation": "\n    let strongest = '';\n    let maxStrength = -Infinity;\n    for (let extension of extensions) {\n        let upperCaseCount = (extension.match(/[A-Z]/g) || []).length;\n        let lowerCaseCount = (extension.match(/[a-z]/g) || []).length;\n        let strength = upperCaseCount - lowerCaseCount;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongest = extension;\n        }\n    }\n    return `${class_name}.${strongest}`;\n}\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'CheeseStuFfed'])); // \"Slices.SErviNGSliCes\"\nconsole.log(strongestExtension('my_class', ['AABe', 'CC'])); // \"my_class.AABe\"\nconsole.log(strongestExtension('a', ['A', 'B', 'C'])); // \"a.A\"\nconsole.log(strongestExtension('Zoo', ['oo', 'OO', 'ooo'])); // \"Zoo.oo\"\nconsole.log(strongestExtension('Dog', ['D', 'o', 'g'])); // \"Dog.D\"\nconsole.log(strongestExtension('Camel', ['C', 'a', 'm', 'e', 'l'])); // \"Camel.C\"\nconsole.log(strongestExtension('Fly', ['F', 'l', 'y'])); // \"Fly.F\"\nconsole.log(strongestExtension('Bee', ['B', 'e', 'e'])); // \"Bee.B\"\nconsole.log(strongestExtension('Ant', ['A', 'n', 't'])); // \"Ant.A\"\nconsole.log(strongestExtension('Cat', ['C', 'a', 't'])); // \"Cat.C\"\nconsole.log(strongestExtension('Dog', ['D', 'o', 'g'])); // \"Dog.D\"\nconsole.log(strongestExtension('Elephant', ['E', 'l', 'e', 'p', 'h',"}
{"task_id": "JavaScript/154", "generation": "\n    let bLength = b.length;\n    let aLength = a.length;\n    let bRotated = b;\n    for (let i = 0; i < bLength; i++) {\n        bRotated = bRotated.slice(1) + bRotated.charAt(0);\n        if (a.includes(bRotated)) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    let strNum = Math.abs(num).toString();\n    for (let i = 0; i < strNum.length; i++) {\n        if (strNum[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let roman = '';\n\n    for (let i = 0; i < romanNumerals.length; i++) {\n        while (number >= romanNumerals[i].value) {\n            roman += romanNumerals[i].numeral;\n            number -= romanNumerals[i].value;\n        }\n    }\n\n    return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n    let maxUniqueChars = 0;\n    let maxWord = \"\";\n    words.forEach(word => {\n        const uniqueChars = new Set(word).size;\n        if (uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && word < maxWord)) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    });\n    return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n    let totalEaten = number + Math.min(need, remaining);\n    let left = Math.max(remaining - need, 0);\n    return [totalEaten, left];\n}\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 912)); // [12, 904]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]\nconsole.log(eat(1, 1000, 1000)); // [1001, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]\nconsole.log(eat(1, 1000, 1000)); // [1001, 0]\nconsole.log(eat(1, 1000, 1000)); // [1001, 0]\nconsole.log(eat(8, 1000, 1000)); // [1008, 0]\nconsole.log(eat(4, 1000, 1000)); // [104, 0]\nconsole.log(eat(11, 1000, 1000)); // [1011, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]\nconsole.log(eat(1000, 1000, 1000)); // [2000, 0]"}
{"task_id": "JavaScript/160", "generation": "\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n            default:\n                throw new Error('Invalid operator');\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[i].toUpperCase();\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n    let arr = [];\n    for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n        if (i % 2 === 0) {\n            arr.push(i);\n        }\n    }\n    return arr;\n}\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []\nconsole.log(generateIntegers(1, 5)); // [2, 4]\nconsole.log(generateIntegers(7, 7)); // []\nconsole.log(generateIntegers(3, 9)); // [4, 6, 8]\nconsole.log(generateIntegers(12, 18)); // [14, 16, 18]\nconsole.log(generateIntegers(21, 25)); // []\nconsole.log(generateIntegers(13, 13)); // []\nconsole.log(generateIntegers(9, 3)); // [4, 6, 8]\nconsole.log(generateIntegers(5, 11)); // [6, 8, 10]\nconsole.log(generateIntegers(16, 20)); // [18, 20]\nconsole.log(generateIntegers(22, 26)); // [24, 26]\nconsole.log(generateIntegers(14, 10)); // [10, 12, 14, 16, 18, 20, 22, 24, 26]\nconsole.log(generateIntegers(27, 27)); // []\nconsole.log(generateIntegers(2, 2)); // [2]\nconsole.log(generateIntegers(1, 1)); // []\nconsole.log(generateIntegers(4, 8)); // [4, 6, 8]\nconsole.log(generateIntegers(9, 5)); // [6, 8]\nconsole.log(generateIntegers(11,"}
