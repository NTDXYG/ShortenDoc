{"task_id": "JavaScript/0", "generation": "\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/* Check if in given list of numbers, are any two numbers closer each\n    given threshold. >>> has_close_elements([1.0,], 0.5)\n    False\n    > 2.8,,, 2.0 0.3\n    True */\nconst hasCloseElements2 = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/* Check if in given list of numbers, are any two numbers closer each\n    given threshold. >>> has_close_elements([1.0,], 0.5)\n    False\n    > 2.8,,, 2.0 0.3\n    True */\nconst hasCloseElements3 = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/* Check if in given list of numbers, are any two numbers closer each\n    given threshold. >>> has_close_elements([1.0,], 0.5)\n    False\n    > 2.8,,, 2.0 0.3\n    True */\nconst hasCloseElements4 = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/* Check if in given list of numbers, are any two numbers closer each\n    given threshold. >>> has_close_elements([1.0,], 0.5"}
{"task_id": "JavaScript/1", "generation": "\n    let paren_groups = [];\n    let paren_stack = [];\n    let paren_group = '';\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(paren_string[i]);\n            paren_group += paren_string[i];\n        }\n        else if (paren_string[i] === ')') {\n            paren_stack.pop();\n            paren_group += paren_string[i];\n            if (paren_stack.length === 0) {\n                paren_groups.push(paren_group);\n                paren_group = '';\n            }\n        }\n    }\n    return paren_groups;\n}"}
{"task_id": "JavaScript/2", "generation": "\n    return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n    const mean = average(numbers);\n    return average(numbers.map((number) => Math.abs(number - mean)));\n};\nexports.meanAbsoluteDeviation = meanAbsoluteDeviation;\n//# sourceMappingURL=meanAbsoluteDeviation.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.meanAbsoluteDeviation = exports.standardDeviation = exports.variance = exports.average = void 0;\nconst average = (numbers) => {\n    return numbers.reduce((sum, number) => sum + number, 0) / numbers.length;\n};\nexports.average = average;\nconst variance = (numbers) => {\n    const mean = average(numbers);\n    return average(numbers.map((number) => Math.pow(number - mean, 2)));\n};\nexports.variance = variance;\nconst standardDeviation = (numbers) => {\n    return Math.sqrt(variance(numbers));\n};\nexports.standardDeviation = standardDeviation"}
{"task_id": "JavaScript/5", "generation": "\n    if (numbers.length === 0) {\n        return [];\n    }\n    let result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n    return result;\n};\nexports.intersperse = intersperse;\n/* Return the last element of a list.\n    >>> last([1 2 3])\n    3\n    >>> last([])\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    IndexError: list index out of range */\nconst last = (numbers) => {\n    return numbers[numbers.length - 1];\n};\nexports.last = last;\n/* Return the last n elements of a list.\n    >>> lastN([1 2 3 4 5], 2)\n    [4 5]\n    >>> lastN([1 2 3 4 5], 0)\n    []\n    >>> lastN([], 2)\n    [] */\nconst lastN = (numbers, n) => {\n    return numbers.slice(-n);\n};\nexports.lastN = lastN;\n/* Return the length of a list.\n    >>> length([1 2 3])\n    3\n    >>> length([])\n    0 */\nconst length = (numbers) => {\n    return numbers.length;\n};\nexports.length = length;\n/* Return the list of all elements of a list except the first one.\n    >>> tail([1 2 3])\n    [2 3]\n    >>> tail([])\n    [] */\nconst tail = (numbers) => {\n    return numbers.slice(1);\n};\nexports.tail = tail;\n/* Return the list of all elements of a list except the last one.\n    >>> init([1 2 3])\n    [1 2]\n    >>> init([])\n    [] */\nconst init = (numbers) => {\n    return numbers.slice(0, -1);\n};\nexports.init = init;\n/* Return the list of all elements of a list except the first and the last one.\n    >>> initLast([1 2 3])\n    [2]\n    >>> initLast([])\n    [] */\nconst initLast = (numbers) => {\n    return numbers.slice(1, -1);\n};\nexports.initLast = initLast;\n/* Return the list of all elements of a list except the first and the last one.\n    >>> initLast([1 2 3])\n    [2]\n"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const depths = [];\n  for (let group of groups) {\n    let depth = 0;\n    let max_depth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        depth += 1;\n        max_depth = Math.max(depth, max_depth);\n      } else if (char === ')') {\n        depth -= 1;\n      }\n    }\n    depths.push(max_depth);\n  }\n  return depths;\n}"}
{"task_id": "JavaScript/7", "generation": "\n    return strings.filter((string) => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n    let max = numbers[0];\n    return numbers.map((num) => {\n        if (num > max) {\n            max = num;\n        }\n        return max;\n    });\n}"}
{"task_id": "JavaScript/10", "generation": "\n    const reverse = string.split('').reverse().join('');\n    const longestPalindrome = string.split('').reduce((acc, char, index) => {\n        if (acc === null) {\n            return null;\n        }\n        if (acc === string) {\n            return acc;\n        }\n        if (acc === reverse) {\n            return acc;\n        }\n        if (acc === string.slice(0, index)) {\n            return acc;\n        }\n        if (acc === reverse.slice(0, index)) {\n            return acc;\n        }\n        return acc;\n    }, null);\n    if (longestPalindrome === string) {\n        return string;\n    }\n    if (longestPalindrome === reverse) {\n        return string + string;\n    }\n    if (longestPalindrome === string.slice(0, string.length - 1)) {\n        return string + string.slice(0, string.length - 1).split('').reverse().join('');\n    }\n    if (longestPalindrome === reverse.slice(0, string.length - 1)) {\n        return string + reverse.slice(0, string.length - 1);\n    }\n    return string + string.split('').reverse().join('');\n};\nexports.makePalindrome = makePalindrome;\n//# sourceMappingURL=makePalindrome.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makePalindrome = void 0;"}
{"task_id": "JavaScript/11", "generation": "\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;\n};\n/* Input is a string a consisting only 1s. Perform binary NOT on this string and return result also as a string >>> stringNot('0101')\n    '1010' */\nconst stringNot = (a) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] === '1' ? '0' : '1';\n    }\n    return result;\n};\n/* Input is a string a consisting only 1s. Perform binary AND on this string and return result also as a string >>> stringAnd('0101', '0110')\n    '0100' */\nconst stringAnd = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] & b[i];\n    }\n    return result;\n};\n/* Input is a string a consisting only 1s. Perform binary OR on this string and return result also as a string >>> stringOr('0101', '0110')\n    '0111' */\nconst stringOr = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] | b[i];\n    }\n    return result;\n};\n/* Input is a string a consisting only 1s. Perform binary XOR on this string and return result also as a string >>> stringXor('0101', '0110')\n    '0011' */\nconst stringXor = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;\n};\n/* Input is a string a consisting only 1s. Perform binary NOT on this string and return result also as a string >>> stringNot('0101')\n    '1010' */\nconst stringNot = (a) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] === '1' ? '0' : '1';\n    }\n    return result;\n};\n/* Input is"}
{"task_id": "JavaScript/12", "generation": "\n    if (strings.length === 0) {\n        return null;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "JavaScript/13", "generation": "\n    if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n};\n/* Return a least common multiple of two integers a\n    >>> least_common_multiple(3 5\n    15\n    > 15\n    15 */\nconst leastCommonMultiple = (a, b) => {\n    return (a * b) / greatestCommonDivisor(a, b);\n};\n/* Return a sum of all numbers in array\n    >>> sum([1 2 3 4 5]\n    15\n    > 15\n    15 */\nconst sum = (arr) => {\n    return arr.reduce((a, b) => a + b, 0);\n};\n/* Return a product of all numbers in array\n    >>> product([1 2 3 4 5]\n    120\n    > 120\n    120 */\nconst product = (arr) => {\n    return arr.reduce((a, b) => a * b, 1);\n};\n/* Return a sum of all numbers in array\n    >>> sum([1 2 3 4 5]\n    15\n    > 15\n    15 */\nconst sum2 = (arr) => {\n    return arr.reduce((a, b) => a + b, 0);\n};\n/* Return a product of all numbers in array\n    >>> product([1 2 3 4 5]\n    120\n    > 120\n    120 */\nconst product2 = (arr) => {\n    return arr.reduce((a, b) => a * b, 1);\n};\n/* Return a sum of all numbers in array\n    >>> sum([1 2 3 4 5]\n    15\n    > 15\n    15 */\nconst sum3 = (arr) => {\n    return arr.reduce((a, b) => a + b, 0);\n};\n/* Return a product of all numbers in array\n    >>> product([1 2 3 4 5]\n    120\n    > 120\n    120 */\nconst product3 = (arr) => {\n    return arr.reduce((a, b) => a * b, 1);\n};\n/* Return a sum of all numbers in array\n    >>> sum([1 2 3 4 5]\n    15\n    > 15\n    15 */\nconst sum"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += i + ' ';\n  }\n  return str;\n};"}
{"task_id": "JavaScript/16", "generation": "\n    const distinctCharacters = new Set(string.toLowerCase());\n    return distinctCharacters.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n    const music_notes = music_string.split(' ');\n    const music_notes_duration = [];\n    for (let i = 0; i < music_notes.length; i++) {\n        if (music_notes[i] === 'o') {\n            music_notes_duration.push(4);\n        } else if (music_notes[i] === 'o|') {\n            music_notes_duration.push(2);\n        } else if (music_notes[i] === '.|') {\n            music_notes_duration.push(1);\n        }\n    }\n    return music_notes_duration;\n};"}
{"task_id": "JavaScript/18", "generation": "\n    let count = 0;\n    let index = 0;\n    while (index < string.length) {\n        index = string.indexOf(substring, index);\n        if (index === -1) {\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n    const numberMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    const sortedNumbers = numbers.split(' ').sort((a, b) => numberMap[a] - numberMap[b]);\n    return sortedNumbers.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n    let closest = [numbers[0], numbers[1]];\n    let minDiff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n}"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    return numbers.map((num) => (num - min) / (max - min));\n};\nexports.rescaleToUnit = rescaleToUnit;\n//# sourceMappingURL=utils.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rescaleToUnit = exports.getNearestPoint = exports.getNearestPointIndex = exports.getNearestPointIndex2D = exports.getNearestPoint2D = exports.getNearestPointIndex3D = exports.getNearestPoint3D = exports.getNearestPointIndex1D = exports.getNearestPoint1D = exports.getNearestPointIndexND = exports.getNearestPointND = exports.getNearestPointND2 = exports.getNearestPointND3 = exports.getNearestPointND4 = exports.getNearestPointND5 = exports.getNearestPointND6 = exports.getNearestPointND7 = exports.getNearestPointND8 = exports.getNearestPointND9 = exports.getNearestPointND10 = exports.getNearestPointND11 = exports.getNearestPointND12 = exports.getNearestPointND13 = exports.getNearestPointND14 = exports.getNearestPointND15 = exports.getNearestPointND16 = exports.getNearestPointND17 = exports.getNearestPointND18 = exports.getNearestPointND19 = exports.getNearestPointND20 = exports.getNearestPointND21 = exports.getNearestPointND22 = exports.getNearestPointND23 = exports.getNearestPointND24 = exports.getNearestPointND25 = exports.getNearestPointND26 = exports.getNearestPointND27 = exports.getNearestPointND28 = exports.getNearestPointND29 = exports.getNearestPointND30 = exports.getNearestPointND31 = exports.getNearestPointND32 = exports.getNearestPointND33 = exports.getNearestPointND34 = exports.getNearestPointND35 = exports.getNearestPointND36 = exports.getNearestPointND37 = exports.getNearestPointND38 = exports.getNearestPointND39 = exports.getNearestPointND40 = exports.getNearestPointND41 = exports.getNearestPointND42 = exports.getNearestPointND43 = exports.getNearestPointND44 = exports.getNearestPointND45 = exports.getNearest"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\nexports.filterIntegers = filterIntegers;\n//# sourceMappingURL=filter.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.filterIntegers = void 0;"}
{"task_id": "JavaScript/23", "generation": "\n    let length = 0;\n    for (let i = 0; i < string.length; i++) {\n        length++;\n    }\n    return length;\n};\n/* Return true if given string is empty\n    >>> isEmpty('')\n    True\n    >>> isEmpty('abc')\n    False\n    >>> isEmpty(' ')\n    False\n    >>> isEmpty('  ')\n    False\n    >>> isEmpty('   ')\n    False\n    >>> isEmpty('    ')\n    False\n    >>> isEmpty('     ')\n    False\n    >>> isEmpty('      ')\n    False\n    >>> isEmpty('       ')\n    False\n    >>> isEmpty('        ')\n    False\n    >>> isEmpty('         ')\n    False\n    >>> isEmpty('          ')\n    False\n    >>> isEmpty('           ')\n    False\n    >>> isEmpty('            ')\n    False\n    >>> isEmpty('             ')\n    False\n    >>> isEmpty('              ')\n    False\n    >>> isEmpty('               ')\n    False\n    >>> isEmpty('                ')\n    False\n    >>> isEmpty('                 ')\n    False\n    >>> isEmpty('                  ')\n    False\n    >>> isEmpty('                   ')\n    False\n    >>> isEmpty('                    ')\n    False\n    >>> isEmpty('                     ')\n    False\n    >>> isEmpty('                      ')\n    False\n    >>> isEmpty('                       ')\n    False\n    >>> isEmpty('                        ')\n    False\n    >>> isEmpty('                         ')\n    False\n    >>> isEmpty('                          ')\n    False\n    >>> isEmpty('                           ')\n    False\n    >>> isEmpty('                            ')\n    False\n    >>> isEmpty('                             ')\n    False\n    >>> isEmpty('                              ')\n    False\n    >>> isEmpty('                               ')\n    False\n    >>> isEmpty('                                ')\n    False\n    >>> isEmpty('                                 ')\n    False\n    >>> isEmpty('                                  ')\n    False\n    >>> isEmpty('                                   ')\n    False\n    >>> isEmpty('                                    ')\n    False\n    >>> isEmpty('                                     ')\n    False\n    >>> isEmpty('                                      ')\n    False\n    >>> isEmpty('                                       ')\n    False\n    >>> isEmpty('                                        ')\n    False\n    >>> isEmpty('                                         ')\n    False\n    >>> isEmpty('                                          ')\n    False\n    >>> isEmpty('                                           ')\n    False\n    >>> isEmpty('                                            ')\n    False\n    >>> isEmpty('                                             ')\n    False\n    >>> isEmpty('                                              ')\n    False\n    >>> isEmpty('                                               ')\n    False\n    >>> isEmpty('                                                ')\n    False\n    >>> isEmpty('                                                 ')\n    False\n    >>> isEmpty('                                                  ')\n    False\n    >>> isEmpty('"}
{"task_id": "JavaScript/24", "generation": "\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const uniqueNumbers = new Set(numbers);\n  return Array.from(uniqueNumbers);\n};"}
{"task_id": "JavaScript/27", "generation": "\n    return string.split('').map((char) => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};"}
{"task_id": "JavaScript/28", "generation": "\n    return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter((x) => x > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const a = xs[0];\n  const b = xs[1];\n  const c = xs[2];\n  const d = xs[3];\n  const e = xs[4];\n  const f = xs[5];\n  const g = xs[6];\n  const h = xs[7];\n  const i = xs[8];\n  const j = xs[9];\n  const k = xs[10];\n  const l = xs[11];\n  const m = xs[12];\n  const n = xs[13];\n  const o = xs[14];\n  const p = xs[15];\n  const q = xs[16];\n  const r = xs[17];\n  const s = xs[18];\n  const t = xs[19];\n  const u = xs[20];\n  const v = xs[21];\n  const w = xs[22];\n  const x = xs[23];\n  const y = xs[24];\n  const z = xs[25];\n  const aa = xs[26];\n  const bb = xs[27];\n  const cc = xs[28];\n  const dd = xs[29];\n  const ee = xs[30];\n  const ff = xs[31];\n  const gg = xs[32];\n  const hh = xs[33];\n  const ii = xs[34];\n  const jj = xs[35];\n  const kk = xs[36];\n  const ll = xs[37];\n  const mm = xs[38];\n  const nn = xs[39];\n  const oo = xs[40];\n  const pp = xs[41];\n  const qq = xs[42];\n  const rr = xs[43];\n  const ss = xs[44];\n  const tt = xs[45];\n  const uu = xs[46];\n  const vv = xs[47];\n  const ww = xs[48];\n  const xx = xs[49];\n  const yy = xs[50];\n  const zz = xs[51];\n  const aaa = xs[52];\n  const bbb = xs[53];\n  const ccc = xs[54];\n  const ddd = xs[55];\n  const eee = xs[56];\n  const fff = xs[57];\n  const ggg = xs[58];\n  const hhh = xs[59];\n  const iii = xs[60];\n  const jjj = xs[61];\n "}
{"task_id": "JavaScript/33", "generation": "\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i].sort((a, b) => a - b));\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};"}
{"task_id": "JavaScript/34", "generation": "\n    return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n/* Return minimum element in the list. >>> min_element([1\n    1\n    >>> min_element([5 3 -5, 2, -3, 3, 9, 0, 123, 1 -10\n    -10 */\nconst minElement = (l) => {\n    let min = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n    return min;\n};\n/* Return the sum of all elements in the list. >>> sum([1\n    1\n    >>> sum([5 3 -5, 2, -3, 3, 9, 0, 123, 1 -10\n    123 */\nconst sum = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n};\n/* Return the product of all elements in the list. >>> product([1\n    1\n    >>> product([5 3 -5, 2, -3, 3, 9, 0, 123, 1 -10\n    -540 */\nconst product = (l) => {\n    let product = 1;\n    for (let i = 0; i < l.length; i++) {\n        product *= l[i];\n    }\n    return product;\n};\n/* Return the average of all elements in the list. >>> average([1\n    1\n    >>> average([5 3 -5, 2, -3, 3, 9, 0, 123, 1 -10\n    0.0 */\nconst average = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum / l.length;\n};\n/* Return the variance of all elements in the list. >>> variance([1\n    0\n    >>> variance([5 3 -5, 2, -3"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === \"7\") {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n    let even = [];\n    let odd = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            even.push(l[i]);\n        }\n        else {\n            odd.push(l[i]);\n        }\n    }\n    even.sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < even.length; i++) {\n        result.push(even[i]);\n        result.push(odd[i]);\n    }\n    return result;\n}"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  let i = 0;\n  while (i < s.length) {\n    decoded += s[i];\n    if (i % 3 === 2) {\n      decoded += s[i + 1];\n    }\n    i += 2;\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let primes = [2];\n  let i = 2;\n  while (primes.length < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    if (isPrime(fib[i])) {\n      primes.push(fib[i]);\n    }\n    i++;\n  }\n  return primes[n - 1];\n};"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n    return n * (n - 1) / 2;\n}"}
{"task_id": "JavaScript/42", "generation": "\n    return l.map((x) => x + 1);\n};\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 1236, 4, 6, 3, 4, 4, 10, 1, 124]));\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"task_id": "JavaScript/43", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n    if (n === 0) return 0;\n    if (n === 1) return 2;\n    if (n === 2) return 0;\n    let a = 0, b = 2, c = 0;\n    for (let i = 3; i <= n; i++) {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}"}
{"task_id": "JavaScript/47", "generation": "\n    const sorted = l.sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    }\n    else {\n        return sorted[mid];\n    }\n};\nexports.median = median;\n/* Return the mode of elements in the list l. >>> mode([3, 1, 2, 4, 3])\n    3\n    >>> mode([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5] */\nconst mode = (l) => {\n    const count = {};\n    l.forEach((num) => {\n        count[num] = (count[num] || 0) + 1;\n    });\n    const maxCount = Math.max(...Object.values(count));\n    return Object.keys(count).filter((key) => count[key] === maxCount).map(Number);\n};\nexports.mode = mode;\n/* Return the range of elements in the list l. >>> range([3, 1, 2, 4, 3])\n    3\n    >>> range([1, 2, 3, 4, 5])\n    4 */\nconst range = (l) => {\n    return Math.max(...l) - Math.min(...l);\n};\nexports.range = range;\n/* Return the variance of elements in the list l. >>> variance([3, 1, 2, 4, 3])\n    1.2\n    >>> variance([1, 2, 3, 4, 5])\n    2.5 */\nconst variance = (l) => {\n    const mean = l.reduce((a, b) => a + b, 0) / l.length;\n    const squaredDiffs = l.map((num) => Math.pow(num - mean, 2));\n    return squaredDiffs.reduce((a, b) => a + b, 0) / l.length;\n};\nexports.variance = variance;\n/* Return the standard deviation of elements in the list l. >>> std_dev([3, 1, 2, 4, 3])\n    1.0954451150103321\n    >>> std_dev([1, 2, 3, 4, 5])\n    1.581"}
{"task_id": "JavaScript/48", "generation": "\n    const reversed = text.split('').reverse().join('');\n    return text === reversed;\n};"}
{"task_id": "JavaScript/49", "generation": "\n    let r = 1;\n    while (n > 0) {\n        if (n % 2 === 1) {\n            r = (r * p) % n;\n        }\n        p = (p * p) % n;\n        n = Math.floor(n / 2);\n    }\n    return r;\n};\n/* Return 2^n modulo p (be aware of numerics). >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n     modp(0 1011 modp(3 11)\n    8 modp(100 1011 */\nconst modp2 = (n, p) => {\n    let r = 1;\n    while (n > 0) {\n        if (n % 2 === 1) {\n            r = (r * p) % n;\n        }\n        p = (p * p) % n;\n        n = Math.floor(n / 2);\n    }\n    return r;\n};\n/* Return 2^n modulo p (be aware of numerics). >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n     modp(0 1011 modp(3 11)\n    8 modp(100 1011 */\nconst modp3 = (n, p) => {\n    let r = 1;\n    while (n > 0) {\n        if (n % 2 === 1) {\n            r = (r * p) % n;\n        }\n        p = (p * p) % n;\n        n = Math.floor(n / 2);\n    }\n    return r;\n};\n/* Return 2^n modulo p (be aware of numerics). >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n     modp(0 1011 modp(3 11)\n    8 modp(100 1011 */\nconst modp4 = (n, p) => {\n    let r = 1;\n    while (n > 0) {\n        if (n % 2 === 1) {\n            r = (r * p) % n;\n        }\n        p = (p * p) % n;\n        n = Math.floor(n / 2);\n    }\n   "}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[a-z]/i)) {\n      let code = char.charCodeAt(0);\n      if (code >= 65 && code <= 90) {\n        decoded += String.fromCharCode((code - 65 - 5 + 26) % 26 + 65);\n      } else if (code >= 97 && code <= 122) {\n        decoded += String.fromCharCode((code - 97 - 5 + 26) % 26 + 97);\n      }\n    } else {\n      decoded += char;\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n    return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "JavaScript/52", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n};\n// 2. Write a function that returns the sum of all numbers in the list l. >>> sum([1, 2, 4, 10])\n// 17\nconst sum = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n};\n// 3. Write a function that returns the average of all numbers in the list l. >>> average([1, 2, 4, 10])\n// 4.25\nconst average = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum / l.length;\n};\n// 4. Write a function that returns the maximum number in the list l. >>> max([1, 2, 4, 10])\n// 10\nconst max = (l) => {\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n// 5. Write a function that returns the minimum number in the list l. >>> min([1, 2, 4, 10])\n// 1\nconst min = (l) => {\n    let min = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n    return min;\n};\n// 6. Write a function that returns the number of even numbers in the list l. >>> count_even([1, 2, 4, 10])\n// 3\nconst countEven = (l) => {\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n// 7. Write a function that returns the number of odd numbers in the list l. >>>"}
{"task_id": "JavaScript/53", "generation": "\n    return x + y;\n};\n/* Create a function that takes a number as an argument and returns true if the number is even, and false if it is odd.\n    >>> isEven(2)\n    True\n     isEven(3)\n    False */\nconst isEven = (x) => {\n    return x % 2 === 0;\n};\n/* Create a function that takes a string as an argument and returns the string in reverse order.\n    >>> reverseString(\"hello\")\n    \"olleh\"\n     reverseString(\"world\")\n    \"dlrow\" */\nconst reverseString = (str) => {\n    return str.split('').reverse().join('');\n};\n/* Create a function that takes an array of numbers as an argument and returns the sum of all the numbers in the array.\n    >>> sumArray([1, 2, 3, 4, 5])\n    15\n     sumArray([10, 20, 30, 40, 50])\n    150 */\nconst sumArray = (arr) => {\n    return arr.reduce((acc, curr) => acc + curr, 0);\n};\n/* Create a function that takes a string as an argument and returns the number of vowels in the string.\n    >>> countVowels(\"hello\")\n    2\n     countVowels(\"world\")\n    1 */\nconst countVowels = (str) => {\n    const vowels = 'aeiou';\n    return str.toLowerCase().split('').filter(char => vowels.includes(char)).length;\n};\n/* Create a function that takes a string as an argument and returns the string with all the vowels removed.\n    >>> removeVowels(\"hello\")\n    \"hll\"\n     removeVowels(\"world\")\n    \"wrld\" */\nconst removeVowels = (str) => {\n    const vowels = 'aeiou';\n    return str.toLowerCase().split('').filter(char => !vowels.includes(char)).join('');\n};\n/* Create a function that takes an array of numbers as an argument and returns the largest number in the array.\n    >>> findLargest([1, 2, 3, 4, 5])\n    5\n     findLargest([10, 20, 30, 40, 50])\n    50 */\nconst findLargest = (arr) => {\n    return Math.max(...arr);\n};\n/* Create a function that takes an array of numbers as an argument and returns the smallest number in the array.\n   "}
{"task_id": "JavaScript/54", "generation": "\n    if (s0.length !== s1.length) return false;\n    const s0Chars = s0.split('').sort().join('');\n    const s1Chars = s1.split('').sort().join('');\n    return s0Chars === s1Chars;\n};\n//# sourceMappingURL=common.js.map\"use strict\";\n/* Check if a string is a palindrome. >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('racecar')\n"}
{"task_id": "JavaScript/55", "generation": "\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10\n    55\n    >\n    1\n    21 */\nconst fib2 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n    for (let i = 2; i <= n; i++) {\n        let temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n};\n/* Return n-th Fibonacci number. >>> fib(10\n    55\n    >\n    1\n    21 */\nconst fib3 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n    let c = 1;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n};\n/* Return n-th Fibonacci number. >>> fib(10\n    55\n    >\n    1\n    21 */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n    let c = 1;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n};\n/* Return n-th Fibonacci number. >>> fib(10\n    55\n    >\n    1\n    21 */\nconst fib5 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n    let c = "}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n    let increasing = true;\n    let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  let l3 = l1.filter((x) => l2.includes(x));\n  return [...new Set(l3.sort((a, b) => a - b))];\n}"}
{"task_id": "JavaScript/59", "generation": "\n    let largest = 2;\n    while (n > largest) {\n        if (n % largest === 0) {\n            n = n / largest;\n        }\n        else {\n            largest++;\n        }\n    }\n    return largest;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === \")\") {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n    const n = xs.length;\n    const res = [];\n    for (let i = 1; i < n; i++) {\n        res.push(xs[i] * i);\n    }\n    return res;\n};\n/* xs represent coefficients of a polynomial. xs[0 + * x + * x^2 +.... Return integral of this polynomial in the same form. >>> integral([3, 1 4])\n    [3 1 2]\n    >>> integral([1])2 6] */\nconst integral = (xs) => {\n    const n = xs.length;\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(xs[i] / (i + 1));\n    }\n    return res;\n};\n/* xs represent coefficients of a polynomial. xs[0 + * x + * x^2 +.... Return value of this polynomial at x. >>> evaluate([3, 1 4], 2)\n    15\n    >>> evaluate([1])2 6] */\nconst evaluate = (xs, x) => {\n    const n = xs.length;\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n};\n/* xs represent coefficients of a polynomial. xs[0 + * x + * x^2 +.... Return value of this polynomial at x. >>> evaluate([3, 1 4], 2)\n    15\n    >>> evaluate([1])2 6] */\nconst evaluate2 = (xs, x) => {\n    const n = xs.length;\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n};\n/* xs represent coefficients of a polynomial. xs[0 + * x + * x^2 +.... Return value of this polynomial at x. >>> evaluate([3, 1 4], 2)\n    15\n    >>> evaluate([1])2 6] */\nconst evaluate3 = (xs, x) => {\n    const n = xs.length;\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n"}
{"task_id": "JavaScript/63", "generation": "\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 3;\n    }\n    if (n === 4) {\n        return 4;\n    }\n    if (n === 5) {\n        return 6;\n    }\n    if (n === 6) {\n        return 9;\n    }\n    if (n === 7) {\n        return 13;\n    }\n    if (n === 8) {\n        return 19;\n    }\n    if (n === 9) {\n        return 28;\n    }\n    if (n === 10) {\n        return 41;\n    }\n    if (n === 11) {\n        return 60;\n    }\n    if (n === 12) {\n        return 88;\n    }\n    if (n === 13) {\n        return 129;\n    }\n    if (n === 14) {\n        return 188;\n    }\n    if (n === 15) {\n        return 277;\n    }\n    if (n === 16) {\n        return 406;\n    }\n    if (n === 17) {\n        return 593;\n    }\n    if (n === 18) {\n        return 868;\n    }\n    if (n === 19) {\n        return 1273;\n    }\n    if (n === 20) {\n        return 1860;\n    }\n    if (n === 21) {\n        return 2731;\n    }\n    if (n === 22) {\n        return 4004;\n    }\n    if (n === 23) {\n        return 5876;\n    }\n    if (n === 24) {\n        return 8641;\n    }\n    if (n === 25) {\n        return 12640;\n    }\n    if (n === 26) {\n        return 18564;\n    }\n    if (n === 27) {\n        return 27132;\n    }\n    if (n === 28) {\n        return 39840;\n    }\n    if (n === 29) {\n        return 58567;\n    }\n    if (n === 30) {\n        return"}
{"task_id": "JavaScript/64", "generation": "\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return digits.reverse().join('');\n  }\n  const shiftedDigits = digits.slice(shift).concat(digits.slice(0, shift));\n  return shiftedDigits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase() && isNaN(s[i])) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n    let oranges = parseInt(arr[4]);\n    let mangoes = n - apples - oranges;\n    return mangoes;\n}"}
{"task_id": "JavaScript/68", "generation": "\n    if (arr.length === 0) {\n        return [];\n    }\n    let smallestEven = Infinity;\n    let smallestIndex = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if (smallestEven === Infinity) {\n        return [];\n    }\n    return [smallestEven, smallestIndex];\n}"}
{"task_id": "JavaScript/69", "generation": "\n    let obj = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (obj[lst[i]]) {\n            obj[lst[i]]++;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n    let max = -1;\n    for (let key in obj) {\n        if (obj[key] > key) {\n            max = Math.max(max, key);\n        }\n    }\n    return max;\n}\nconsole.log(search([4, 1, 2, 2, 1]))"}
{"task_id": "JavaScript/70", "generation": "\n    let result = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let minIndex = lst.indexOf(min);\n    let maxIndex = lst.indexOf(max);\n    while (lst.length > 0) {\n        if (minIndex < maxIndex) {\n            result.push(min);\n            lst.splice(minIndex, 1);\n            min = Math.min(...lst);\n            minIndex = lst.indexOf(min);\n        }\n        else {\n            result.push(max);\n            lst.splice(maxIndex, 1);\n            max = Math.max(...lst);\n            maxIndex = lst.indexOf(max);\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        return ((a + b + c) / 2 * (a + b - c) * (b + c - a) * (c + a - b)) ** 0.5\n    } else {\n        return -1\n    }\n}\n\n// 7 kyu\n// https://www.codewars.com/kata/5a2bc336e8e6bc5a79000732\n/* Given a string of words, you need to find the highest scoring word.\n\nEach letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.\n\nYou need to return the highest scoring word as a string.\n\nIf two words score the same, return the word that appears earliest in the original string.\n\nAll letters will be lowercase and all inputs will be valid. */\n\nconst high = (x) => {\n    let arr = x.split(' ')\n    let newArr = []\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0\n        for (let j = 0; j < arr[i].length; j++) {\n            sum += arr[i][j].charCodeAt() - 96\n        }\n        newArr.push([sum, arr[i]])\n    }\n    newArr.sort((a, b) => b[0] - a[0])\n    return newArr[0][1]\n}\n\n// 7 kyu\n// https://www.codewars.com/kata/5a2bc336e8e6bc5a79000732\n/* Given a string of words, you need to find the highest scoring word.\n\nEach letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.\n\nYou need to return the highest scoring word as a string.\n\nIf two words score the same, return the word that appears earliest in the original string.\n\nAll letters will be lowercase and all inputs will be valid. */\n\nconst high = (x) => {\n    let arr = x.split(' ')\n    let newArr = []\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0\n        for (let j = 0; j < arr[i].length; j++) {\n            sum +="}
{"task_id": "JavaScript/72", "generation": "\n    if (q.length % 2 !== 0) return false;\n    let sum = 0;\n    let max = Math.max(...q);\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (sum <= w && max <= w) return true;\n    return false;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else if (sum1 > sum2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(totalMatch([], []))"}
{"task_id": "JavaScript/75", "generation": "\n    if (a < 100) {\n        let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n        let count = 0;\n        for (let i = 0; i < prime.length; i++) {\n            if (a % prime[i] === 0) {\n                count++;\n            }\n        }\n        if (count === 3) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/76", "generation": "\n  let result = 1;\n  while (result < x) {\n    result *= n;\n  }\n  return result === x;\n}"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) {\n    a = -a;\n  }\n  let cube = Math.cbrt(a);\n  return cube % 1 === 0;\n}"}
{"task_id": "JavaScript/78", "generation": "\n    let count = 0;\n    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hexKey(\"AB\")); // 1\nconsole.log(hexKey(\"1077E\")); // 2\nconsole.log(hexKey(\"ABED1A33\")); // 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // 6\nconsole.log(hexKey(\"2020\")); // 2"}
{"task_id": "JavaScript/79", "generation": "\n    let binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n\n// 2. Write a function that takes a string and returns the number of vowels in the string. Vowels are 'a', 'e', 'i', 'o', 'u'. You should not consider 'y' as a vowel. Examples\n// count_vowels(\"Hello\")   # returns 2\n// count_vowels(\"Why\")   # returns 0\nconst countVowels = (string) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// 3. Write a function that takes a string and returns a new string with all the vowels removed. Examples\n// remove_vowels(\"Hello\")   # returns \"Hll\"\n// remove_vowels(\"Why\")   # returns \"W\"\nconst removeVowels = (string) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newString = '';\n    for (let i = 0; i < string.length; i++) {\n        if (!vowels.includes(string[i])) {\n            newString += string[i];\n        }\n    }\n    return newString;\n}\n\n// 4. Write a function that takes a string and returns a new string with all the consonants removed. Examples\n// remove_consonants(\"Hello\")   # returns \"eo\"\n// remove_consonants(\"Why\")   # returns \"y\"\nconst removeConsonants = (string) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newString = '';\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            newString += string[i];\n        }\n    }\n    return newString;\n}\n\n// 5. Write a function that takes a string and returns a new string with all the letters in reverse order. Examples\n// reverse_string(\"Hello\")   # returns \"olleH\"\n// reverse_string(\"Why\")   # returns \"yhw\"\nconst reverseString = (string) => {\n    let newString = '';\n"}
{"task_id": "JavaScript/80", "generation": "\n    if (s.length !== 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n    let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] === 4.0) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else if (grades[i] > 3.3) {\n            letterGrades.push('A-');\n        } else if (grades[i] > 2.7) {\n            letterGrades.push('B+');\n        } else if (grades[i] > 2.0) {\n            letterGrades.push('B');\n        } else if (grades[i] > 1.7) {\n            letterGrades.push('B-');\n        } else if (grades[i] > 1.0) {\n            letterGrades.push('C-');\n        } else if (grades[i] > 0.7) {\n            letterGrades.push('D-');\n        } else if (grades[i] > 0.0) {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    return 2 * startsOneEnds(n - 1);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    let binary = N.toString(2);\n    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n};\n// console.log(solve(1000));\n// console.log(solve(150));\n// console.log(solve(147));\n// console.log(solve(0));\n// console.log(solve(1));\n// console.log(solve(2));\n// console.log(solve(3));\n// console.log(solve(4));\n// console.log(solve(5));\n// console.log(solve(6));\n// console.log(solve(7));\n// console.log(solve(8));\n// console.log(solve(9));\n// console.log(solve(10));\n// console.log(solve(11));\n// console.log(solve(12));\n// console.log(solve(13));\n// console.log(solve(14));\n// console.log(solve(15));\n// console.log(solve(16));\n// console.log(solve(17));\n// console.log(solve(18));\n// console.log(solve(19));\n// console.log(solve(20));\n// console.log(solve(21));\n// console.log(solve(22));\n// console.log(solve(23));\n// console.log(solve(24));\n// console.log(solve(25));\n// console.log(solve(26));\n// console.log(solve(27));\n// console.log(solve(28));\n// console.log(solve(29));\n// console.log(solve(30));\n// console.log(solve(31));\n// console.log(solve(32));\n// console.log(solve(33));\n// console.log(solve(34));\n// console.log(solve(35));\n// console.log(solve(36));\n// console.log(solve(37));\n// console.log(solve(38));\n// console.log(solve(39));\n// console.log(solve(40));\n// console.log(solve(41));\n// console.log(solve(42));\n// console.log(solve(43));\n// console.log(solve(44));\n// console.log(solve(45));\n// console.log(solve(46));\n// console.log(solve(47));\n// console.log(solve(48));\n// console.log(solve(49));\n// console.log(solve(50));\n// console.log(solve(51));\n// console.log(solve(52));\n// console.log(solve(53));\n// console.log(solve"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  let words = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let sortedWord = word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n    result.push(sortedWord);\n  }\n  return result.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n    if (array.length === 0) return [];\n    if (array.length === 1) return array;\n    const sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n    }\n};\n// console.log(sortArray([2, 4, 3, 0, 1, 5]));\n// console.log(sortArray([2, 4, 0, 66, 5, 4, 3, 2, 1, 0]));\n// console.log(sortArray([5]));\n// console.log(sortArray([]));\n// console.log(sortArray([1, 2, 3, 4, 5]));\n// console.log(sortArray([5, 4, 3, 2, 1]));\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(sortArray([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(sortArray([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n// console.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n// console.log(sortArray([30, 29, 28, 27, "}
{"task_id": "JavaScript/89", "generation": "\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encrypted = '';\n    for (let i = 0; i < s.length; i++) {\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1) {\n            encrypted += s[i];\n        } else {\n            encrypted += alphabet[(index + 4) % 26];\n        }\n    }\n    return encrypted;\n}"}
{"task_id": "JavaScript/90", "generation": "\n    let smallest = Infinity;\n    let secondSmallest = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }\n        else if (lst[i] < secondSmallest && lst[i] > smallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    if (secondSmallest === Infinity) {\n        return null;\n    }\n    else {\n        return secondSmallest;\n    }\n}"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let sentences = S.split(/[.?!]/);\n  for (let i = 0; i < sentences.length; i++) {\n    let words = sentences[i].split(\" \");\n    if (words.length > 15) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char.match(/[a-z]/i)) {\n            if (char.match(/[A-Z]/)) {\n                char = char.toLowerCase();\n            } else {\n                char = char.toUpperCase();\n            }\n        }\n        if (char.match(/[aeiou]/i)) {\n            char = String.fromCharCode(char.charCodeAt(0) + 2);\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  const maxPrime = Math.max(...lst.filter((num) => isPrime(num)));\n  return maxPrime.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n}"}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    const firstKey = Object.keys(dict)[0];\n    const firstKeyIsLowerCase = firstKey === firstKey.toLowerCase();\n    const firstKeyIsUpperCase = firstKey === firstKey.toUpperCase();\n    for (const key in dict) {\n        if (firstKeyIsLowerCase && key !== key.toLowerCase()) {\n            return false;\n        }\n        if (firstKeyIsUpperCase && key !== key.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n// console.log(checkDictCase({\"a\":\"apple\"}));\n// console.log(checkDictCase({\"a\":\"appleA\":\"banana\"}));\n// console.log(checkDictCase({\"a\":\"apple 8:\"banana\", \"a\":\"apple\"}));\n// console.log(checkDictCase({\"Name\":\"John\",Age\":\"36City\":\"Houston\"}));\n// console.log(checkDictCase({\"STATE\":\"NC\",ZIP\":\"12345\" }));\n// console.log(checkDictCase({}));\n/* Given a dictionary, return True if all keys are strings in lower \n    case or all keys upper case, else. The function should return False is the given dictionary is empty. Examples:\n    check_dict_case({\"a\":\"apple should return True. check_dict_case({\"a\":\"appleA\":\"banana) should return False. check_dict_case({\"a\":\"apple 8:\"banana\", \"a\":\"apple\") should return False. check_dict_case({\"Name\":\"John\",Age\":\"36City\":\"Houston\"}) should return False. check_dict_case({\"STATE\":\"NC\",ZIP\":\"12345\" }) should return True. */\nconst checkDictCase = (dict) => {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    const firstKey = Object.keys(dict)[0];\n    const firstKeyIsLowerCase = firstKey === firstKey.toLowerCase();\n    const firstKeyIsUpperCase = firstKey === firstKey.toUpperCase();\n    for (const key in dict) {\n        if (firstKeyIsLowerCase && key !== key.toLowerCase()) {\n            return false;\n        }\n        if (firstKeyIsUpperCase && key !== key.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n// console.log(checkDictCase({\"a\":\"apple\"}));\n// console.log(checkDictCase({\"a\":\"appleA\":\"banana\"}));\n// console.log(checkDictCase({\"a\":\"apple 8:\"banana\", \"a\":\"apple\"}));\n// console.log(checkDictCase({\"Name\":\""}
{"task_id": "JavaScript/96", "generation": "\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\nconst isPrime = (num) => {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/97", "generation": "\n    let unitA = a % 10;\n    let unitB = b % 10;\n    if (a < 0) {\n        unitA = -unitA;\n    }\n    if (b < 0) {\n        unitB = -unitB;\n    }\n    return unitA * unitB;\n}\n// 2nd solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 3rd solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 4th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 5th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 6th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 7th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 8th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 9th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 10th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 11th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 12th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 13th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 14th solution\nconst multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n// 15"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (i % 2 === 0 && /[AEIOU]/.test(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n    const num = Number(value);\n    const floored = Math.floor(num);\n    const ceiled = Math.ceil(num);\n    if (num - floored === ceiled - num) {\n        return ceiled;\n    }\n    return num - floored < ceiled - num ? floored : ceiled;\n};\n//# sourceMappingURL=closestInteger.js.map\"use strict\";\n/* Create a function takes a value (string) representing number\n    and the closest integer to it If the number is equidistant\n    from two integers round it away from zero Examples\n    >>> closest_integer(\"10\n    10 closest_integer(\"15.3\n    15\n\n    Note:\n    Rounding away from zero means if the given number equidistant\n     two integers the one you should return the one that the\n     zero For example closest_integer(\"14.5 should\n    return 15 and closest_integer(\"-14.5 return -15. */\nconst closestInteger = (value) => {\n    const num = Number(value);\n    const floored = Math.floor(num);\n    const ceiled = Math.ceil(num);\n    if (num - floored === ceiled - num) {\n        return ceiled;\n    }\n    return num - floored < ceiled - num ? floored : ceiled;\n};\n//# sourceMappingURL=closestInteger.js.map"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    if (n % 2 === 0) {\n      stones += 2;\n    } else {\n      stones += 2;\n    }\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n    return s.split(/[\\s,]+/);\n}\nconsole.log(wordsString(\"Hi, my name John\"))"}
{"task_id": "JavaScript/102", "generation": "\n    let num = -1;\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n            num = i;\n            break;\n        }\n    }\n    return num;\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n}"}
{"task_id": "JavaScript/104", "generation": "\n    let arr = [];\n    for (let i = 0; i < x.length; i++) {\n        let str = x[i].toString();\n        for (let j = 0; j < str.length; j++) {\n            if (str[j] % 2 === 0) {\n                arr.push(x[i]);\n                break;\n            }\n        }\n    }\n    return arr.sort((a, b) => a - b);\n}\nconsole.log(uniqueDigits([15, 33, 1422, 1]))"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => b.length - a.length);\n};\n\nconst sortAndReplace = (arr) => {\n  const digits = [\n    \"Zero\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const result = [];\n  const sorted = arr\n    .filter((num) => num >= 1 && num <= 9)\n    .sort((a, b) => a - b)\n    .reverse();\n  for (let i = 0; i < sorted.length; i++) {\n    if (i === 0) {\n      result.push(digits[sorted[i]]);\n    } else {\n      result.push(digits[sorted[i]] + result[i - 1]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n            }\n            else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\nconst isPalindrome = (num) => {\n    const str = num.toString();\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n};\n//# sourceMappingURL=evenOddPalindrome.js.map\n\"use strict\";\n"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    let isNegative = false;\n    if (num < 0) {\n      num = -num;\n      isNegative = true;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (isNegative) {\n      sum = -sum;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === sortedArr[0]) {\n      arr.push(arr.shift());\n      count++;\n    }\n  }\n  return count === 1;\n}"}
{"task_id": "JavaScript/110", "generation": "\n    let even = lst1.filter((num) => num % 2 === 0);\n    let odd = lst1.filter((num) => num % 2 !== 0);\n    let even2 = lst2.filter((num) => num % 2 === 0);\n    let odd2 = lst2.filter((num) => num % 2 !== 0);\n    if (odd.length === 0) {\n        return \"YES\";\n    }\n    if (odd2.length === 0) {\n        return \"NO\";\n    }\n    if (odd.length <= even2.length) {\n        return \"YES\";\n    }\n    return \"NO\";\n}"}
{"task_id": "JavaScript/111", "generation": "\n    let arr = test.split(' ');\n    let obj = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (obj[arr[i]]) {\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr = [];\n    for (let key in obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n        }\n    }\n    for (let key in obj) {\n        if (obj[key] === max) {\n            maxArr.push(key);\n        }\n    }\n    let result = {};\n    for (let i = 0; i < maxArr.length; i++) {\n        result[maxArr[i]] = max;\n    }\n    return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n    let result = s.split('').filter(x => !c.includes(x)).join('')\n    return [result, result === result.split('').reverse().join('')]\n}\nconsole.log(reverseDelete('abcde', 'ae'))\nconsole.log(reverseDelete('abcdefb', 'acdef'))\nconsole.log(reverseDelete('abcdedcba', 'abcdedc'))"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map((str) => {\n        let count = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (parseInt(str[i]) % 2 !== 0) {\n                count++;\n            }\n        }\n        return `the number odd elements in the string ${count} of the input.`;\n    });\n}"}
{"task_id": "JavaScript/114", "generation": "\n    let minSum = Infinity;\n    for (let i = 0; i < nums.length; i++) {\n        let sum = 0;\n        for (let j = i; j < nums.length; j++) {\n            sum += nums[j];\n            if (sum < minSum) {\n                minSum = sum;\n            }\n        }\n    }\n    return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count += Math.ceil(grid[i][j] / capacity);\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('1').length - 1;\n    const bOnes = b.toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = \"aeiouAEIOU\";\n  let wordArr = word.split(\"\");\n  let vowelArr = [];\n  for (let i = wordArr.length - 1; i >= 0; i--) {\n    if (vowels.includes(wordArr[i])) {\n      vowelArr.push(wordArr[i]);\n    }\n    if (vowelArr.length === 2) {\n      return vowelArr[0];\n    }\n  }\n  return \"\";\n}"}
{"task_id": "JavaScript/119", "generation": "\n    let str = lst[0] + lst[1];\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '(') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if (count < 0) {\n            return 'No';\n        }\n    }\n    if (count === 0) {\n        return 'Yes';\n    }\n    else {\n        return 'No';\n    }\n}"}
{"task_id": "JavaScript/120", "generation": "\n    if (k === 0) return [];\n    if (k >= arr.length) return arr.sort((a, b) => b - a);\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n        max = Math.max(...arr);\n    }\n    return result.sort((a, b) => b - a);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        let num = arr[i];\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n    let arr = [];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            arr.push(n);\n        }\n        n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    }\n    return arr.sort((a, b) => a - b);\n};\n// console.log(getOddCollatz(5));\n// console.log(getOddCollatz(1));\n// console.log(getOddCollatz(2));\n// console.log(getOddCollatz(3));\n// console.log(getOddCollatz(4));\n// console.log(getOddCollatz(5));\n// console.log(getOddCollatz(6));\n// console.log(getOddCollatz(7));\n// console.log(getOddCollatz(8));\n// console.log(getOddCollatz(9));\n// console.log(getOddCollatz(10));\n// console.log(getOddCollatz(11));\n// console.log(getOddCollatz(12));\n// console.log(getOddCollatz(13));\n// console.log(getOddCollatz(14));\n// console.log(getOddCollatz(15));\n// console.log(getOddCollatz(16));\n// console.log(getOddCollatz(17));\n// console.log(getOddCollatz(18));\n// console.log(getOddCollatz(19));\n// console.log(getOddCollatz(20));\n// console.log(getOddCollatz(21));\n// console.log(getOddCollatz(22));\n// console.log(getOddCollatz(23));\n// console.log(getOddCollatz(24));\n// console.log(getOddCollatz(25));\n// console.log(getOddCollatz(26));\n// console.log(getOddCollatz(27));\n// console.log(getOddCollatz(28));\n// console.log(getOddCollatz(29));\n// console.log(getOddCollatz(30));\n// console.log(getOddCollatz(31));\n// console.log(getOddCollatz(32));\n// console.log(getOddCollatz(33));\n// console.log(getOddCollatz(34));\n// console.log(getOddCollatz(35));\n// console.log(getOddCollatz(36));\n// console.log(getOddCollatz(37));\n// console.log(getOddCollatz(38));\n// console.log(getOddCollatz(39));\n// console.log(getOddCollatz(40));\n// console.log(getOddCollatz(41));\n// console.log(getOddCollatz(42));\n// console.log(getOddCollatz("}
{"task_id": "JavaScript/124", "generation": "\n    const dateArr = date.split('-');\n    const month = parseInt(dateArr[0]);\n    const day = parseInt(dateArr[1]);\n    const year = parseInt(dateArr[2]);\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n        }\n    }\n    if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) {\n        return false;\n    }\n    if ((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && day > 31) {\n        return false;\n    }\n    return true;\n}\nconsole.log(validDate('03112000')); // true\nconsole.log(validDate('1501201202040042020')); // true\nconsole.log(validDate('06/04/2020')); // false\nconsole.log(validDate('02292000')); // true\nconsole.log(validDate('02292001')); // false\nconsole.log(validDate('02292002')); // false\nconsole.log(validDate('02292003')); // false\nconsole.log(validDate('02292004')); // false\nconsole.log(validDate('02292005')); // false\nconsole.log(validDate('02292006')); // false\nconsole.log(validDate('02292007')); // false\nconsole.log(validDate('02292008')); // false\nconsole.log(validDate('02292009')); // false\nconsole.log(validDate('02292010')); // false\nconsole.log(validDate('02292011')); // false\nconsole.log(validDate('02292012')); // false\nconsole.log(validDate('02292013')); // false\nconsole.log(validDate('02292014')); // false\nconsole.log(validDate('02292015')); // false\nconsole.log(validDate('02292016')); // false\nconsole.log(validDate('02292017')); // false\nconsole.log(validDate('02292018')); // false\nconsole.log(validDate"}
{"task_id": "JavaScript/125", "generation": "\n    if (txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    else if (txt.includes(',')) {\n        return txt.split(',');\n    }\n    else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n            if (txt[i] === txt[i].toLowerCase() && txt[i].charCodeAt(0) % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "JavaScript/126", "generation": "\n    let sorted = true;\n    let duplicates = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > lst[i + 1]) {\n            sorted = false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            duplicates = true;\n        }\n    }\n    if (duplicates) {\n        return false;\n    }\n    else {\n        return sorted;\n    }\n}"}
{"task_id": "JavaScript/127", "generation": "\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n    const start = Math.max(start1, start2);\n    const end = Math.min(end1, end2);\n    const length = end - start + 1;\n    if (length <= 0) {\n        return \"NO\";\n    }\n    if (length === 1) {\n        return \"YES\";\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n};\n//# sourceMappingURL=intersection.js.map"}
{"task_id": "JavaScript/128", "generation": "\n    if (arr.length === 0) return null;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        } else if (arr[i] === 0) {\n            product = 0;\n            break;\n        }\n    }\n    return product;\n};\n// console.log(prodSigns([1, 2, 2, -4]));\n// console.log(prodSigns([0, 1]));\n// console.log(prodSigns([]));\n// console.log(prodSigns([1, 2, 2, 4]));\n// console.log(prodSigns([1, 2, 2, -4, 0]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8, 9]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8, 9, -10]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8, 9, -10, 11]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8, 9, -10, 11, -12]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6, 7, -8, 9, -10, 11, -12, 13]));\n// console.log(prodSigns([1, 2, 2, -4, 0, 5, -6,"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const dp = Array.from({ length: n }, () => Array.from({ length: n }, () => Array(k + 1).fill(Infinity)));\n  const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n\n  const dfs = (x, y, steps, path) => {\n    if (steps === k) {\n      const pathValue = path.reduce((acc, cur) => acc * 10 + cur, 0);\n      dp[x][y][steps] = Math.min(dp[x][y][steps], pathValue);\n      return;\n    }\n\n    visited[x][y] = true;\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        dfs(nx, ny, steps + 1, [...path, grid[nx][ny]]);\n      }\n    }\n    visited[x][y] = false;\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, 1, [grid[i][j]]);\n    }\n  }\n\n  let minPath = [];\n  let minValue = Infinity;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[i][j][k] < minValue) {\n        minValue = dp[i][j][k];\n        minPath = [grid[i][j]];\n      } else if (dp[i][j][k] === minValue) {\n        minPath.push(grid[i][j]);\n      }\n    }\n  }\n\n  return minPath;\n}"}
{"task_id": "JavaScript/130", "generation": "\n    let arr = [0, 1, 1]\n    if (n === 0) return [0]\n    if (n === 1) return [0, 1]\n    if (n === 2) return [0, 1, 1]\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4])\n        }\n    }\n    return arr\n}\n// 2nd solution\nconst tri = (n) => {\n    let arr = [0, 1, 1]\n    if (n === 0) return [0]\n    if (n === 1) return [0, 1]\n    if (n === 2) return [0, 1, 1]\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4])\n        }\n    }\n    return arr\n}\n// 3rd solution\nconst tri = (n) => {\n    let arr = [0, 1, 1]\n    if (n === 0) return [0]\n    if (n === 1) return [0, 1]\n    if (n === 2) return [0, 1, 1]\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4])\n        }\n    }\n    return arr\n}\n// 4th solution\nconst tri = (n) => {\n    let arr = [0, 1, 1]\n   "}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    let isOdd = false;\n    const digits = n.toString().split('');\n    for (let i = 0; i < digits.length; i++) {\n        if (parseInt(digits[i]) % 2 !== 0) {\n            product *= parseInt(digits[i]);\n            isOdd = true;\n        }\n    }\n    return isOdd ? product : 0;\n}"}
{"task_id": "JavaScript/132", "generation": "\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt[txt.length - 1];\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotPartOfWord = txt[txt.length - 2] === \" \";\n  return isLetter && isNotPartOfWord;\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== i + 1) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] < 0) {\n        if (largest === null || lst[i][j] > largest) {\n          largest = lst[i][j];\n        }\n        if (smallest === null || lst[i][j] < smallest) {\n          smallest = lst[i][j];\n        }\n      }\n    }\n  }\n  return [largest, smallest];\n}"}
{"task_id": "JavaScript/137", "generation": "\n    if (a === b) return null;\n    if (typeof a === 'string' && typeof b === 'string') {\n        return a > b ? a : b;\n    }\n    if (typeof a === 'string') a = parseFloat(a);\n    if (typeof b === 'string') b = parseFloat(b);\n    return a > b ? a : b;\n}\n\n// 2. Write a function that takes a string as an argument and returns a new string with all the vowels removed.\nconst removeVowels = (str) => {\n    return str.replace(/[aeiou]/gi, '');\n}\n\n// 3. Write a function that takes a string as an argument and returns a new string with all the consonants removed.\nconst removeConsonants = (str) => {\n    return str.replace(/[bcdfghjklmnpqrstvwxyz]/gi, '');\n}\n\n// 4. Write a function that takes a string as an argument and returns a new string with all the special characters removed.\nconst removeSpecialCharacters = (str) => {\n    return str.replace(/[^a-zA-Z0-9]/g, '');\n}\n\n// 5. Write a function that takes a string as an argument and returns a new string with all the numbers removed.\nconst removeNumbers = (str) => {\n    return str.replace(/[0-9]/g, '');\n}\n\n// 6. Write a function that takes a string as an argument and returns a new string with all the uppercase letters converted to lowercase letters.\nconst toLowerCase = (str) => {\n    return str.toLowerCase();\n}\n\n// 7. Write a function that takes a string as an argument and returns a new string with all the lowercase letters converted to uppercase letters.\nconst toUpperCase = (str) => {\n    return str.toUpperCase();\n}\n\n// 8. Write a function that takes a string as an argument and returns a new string with all the letters in reverse order.\nconst reverseString = (str) => {\n    return str.split('').reverse().join('');\n}\n\n// 9. Write a function that takes a string as an argument and returns a new string with all the words in reverse order.\nconst reverseWords = (str) => {\n    return str.split(' ').reverse().join(' ');\n}\n\n// 10. Write a function that takes a string as an argument and returns a new string with all the words in alphabetical order.\nconst sortWords = (str) => {\n    return str.split(' ').sort().join(' ');\n"}
{"task_id": "JavaScript/138", "generation": "\n    if (n % 2 !== 0) {\n        return false;\n    }\n    if (n < 8) {\n        return false;\n    }\n    if (n === 8) {\n        return true;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n    let newText = text.replace(/ /g, \"_\");\n    newText = newText.replace(/_+/g, \"-\");\n    return newText;\n}\nconsole.log(fixSpaces(\"Example 1 Example_1 Example   3\"));"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n  return regex.test(file_name) ? \"Yes\" : \"No\";\n}"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n/* \n    Write a function that takes a string and returns the number of vowels in the string. For this kata, consider only the following \n    vowels: a, e, i, o, u. The string will only contain lowercase letters and may not be empty. Examples:\n    For s = \"abracadabra\" the output should be 5\n    For s = \"pear tree\" the output should be 4\n    For s = \"o a kak ushakov lil vo kashu kakao\" the output should be 13\n    For s = \"my pyx\" the output should be 0 */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            count++;\n        }\n    }\n    return count;\n};\n/* \n    Write a function that takes a string and returns the number of vowels in the string. For this kata, consider only the following \n    vowels: a, e, i, o, u. The string will only contain lowercase letters and may not be empty. Examples:\n    For s = \"abracadabra\" the output should be 5\n    For s = \"pear tree\" the output should be 4\n    For s = \"o a kak ushakov lil vo kashu kakao\" the output should be 13\n    For s = \"my pyx\" the output should be 0 */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === '"}
{"task_id": "JavaScript/143", "generation": "\n    const words = sentence.split(\" \");\n    const primeWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n            primeWords.push(words[i]);\n        }\n    }\n    return primeWords.join(\" \");\n};\n\nconst isPrime = (num) => {\n    if (num < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  let [x1, x2] = x.split('/');\n  let [n1, n2] = n.split('/');\n  let x3 = x1 * n2;\n  let n3 = x2 * n1;\n  return x3 === n3;\n}"}
{"task_id": "JavaScript/145", "generation": "\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        const sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n        return sumA - sumB;\n    });\n}"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && nums[i] < 0) {\n            let firstDigit = Math.abs(nums[i]).toString()[0];\n            if (firstDigit % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109, 2])); // 2\n\n// 2. Write a function that takes an array of numbers as input and returns a new array with all the numbers squared. For example:\n// squareArray([1, 2, 3, 4, 5]) => [1, 4, 9, 16, 25]\nconst squareArray = (nums) => {\n    let squaredNums = [];\n    for (let i = 0; i < nums.length; i++) {\n        squaredNums.push(nums[i] * nums[i]);\n    }\n    return squaredNums;\n}\nconsole.log(squareArray([1, 2, 3, 4, 5])); // [1, 4, 9, 16, 25]\n\n// 3. Write a function that takes an array of numbers as input and returns the sum of all the numbers. For example:\n// sumArray([1, 2, 3, 4, 5]) => 15\nconst sumArray = (nums) => {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\nconsole.log(sumArray([1, 2, 3, 4, 5])); // 15\n\n// 4. Write a function that takes an array of numbers as input and returns the average of all the numbers. For example:\n// averageArray([1, 2, 3, 4, 5]) => 3\nconst averageArray = (nums) => {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum / nums.length;\n}\nconsole.log(averageArray([1, 2"}
{"task_id": "JavaScript/147", "generation": "\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n// console.log(getMaxTriples(5)); // 1\n// console.log(getMaxTriples(10)); // 3\n// console.log(getMaxTriples(100)); // 23\n// console.log(getMaxTriples(1000)); // 230\n// console.log(getMaxTriples(10000)); // 2300\n// console.log(getMaxTriples(100000)); // 23000\n// console.log(getMaxTriples(1000000)); // 230000\n// console.log(getMaxTriples(10000000)); // 2300000\n// console.log(getMaxTriples(100000000)); // 23000000\n// console.log(getMaxTriples(1000000000)); // 230000000\n// console.log(getMaxTriples(10000000000)); // 2300000000\n// console.log(getMaxTriples(100000000000)); // 23000000000\n// console.log(getMaxTriples(1000000000000)); // 230000000000\n// console.log(getMaxTriples(10000000000000)); // 2300000000000\n// console.log(getMaxTriples(100000000000000)); // 23000000000000\n// console.log(getMaxTriples(1000000000000000)); // 230000000000000\n// console.log(getMaxTriples(10000000000000000)); // 2300000000000000\n// console.log(getMaxTriples(100000000000000000)); // 23000000000000000\n// console.log(getMaxTriples(1000000000000000000)); // 230000000000000000\n// console.log(getMaxTriples(100000000000"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};"}
{"task_id": "JavaScript/150", "generation": "\n    if (n < 2) return y;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return y;\n    }\n    return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}"}
{"task_id": "JavaScript/153", "generation": "\n    let strongest = extensions[0];\n    let strength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        if (cap - sm > strength) {\n            strength = cap - sm;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest;\n}"}
{"task_id": "JavaScript/154", "generation": "\n    let bLen = b.length;\n    let aLen = a.length;\n    if (bLen > aLen) return false;\n    for (let i = 0; i < aLen; i++) {\n        let temp = a.slice(i, i + bLen);\n        if (temp === b || temp === b.slice(1) + b[0]) return true;\n    }\n    return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] % 2 === 0) {\n            even++;\n        }\n        else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n  let result = '';\n  for (let key in roman) {\n    while (number >= key) {\n      result += roman[key];\n      number -= key;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/157", "generation": "\n  if (a ** 2 + b ** 2 === c ** 2 || a ** 2 + c ** 2 === b ** 2 || b ** 2 + c ** 2 === a ** 2) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size > maxUnique) {\n      maxUnique = uniqueChars.size;\n      maxWord = word;\n    } else if (uniqueChars.size === maxUnique) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  }\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n    if (number + need > remaining) {\n        return [remaining, 0];\n    } else {\n        return [number + need, remaining - need];\n    }\n};"}
{"task_id": "JavaScript/160", "generation": "\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '/') {\n            result /= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n    let str = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            str += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            str += s[i];\n        }\n    }\n    return str;\n};\n// console.log(solve(\"1234 = \"4321\"));\n// console.log(solve(\"ab\"));\n// console.log(solve(\"#a@C \"#A@c\"));"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') return null;\n  return md5(text);\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
