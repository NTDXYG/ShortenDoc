{"task_id": "JavaScript/0", "generation": "\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n      temp += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      stack.pop();\n      temp += paren_string[i];\n      if (stack.length === 0) {\n        result.push(temp.trim());\n        temp = '';\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n    return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n  let stack = [];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push('(');\n      currentDepth = stack.length;\n      if (currentDepth > maxDepth) {\n        maxDepth = currentDepth;\n      }\n    } else if (paren_string[i] === ')') {\n      stack.pop();\n      currentDepth = stack.length;\n    }\n  }\n\n  return maxDepth;\n};"}
{"task_id": "JavaScript/7", "generation": "\n    return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n    let max = numbers[0];\n    return numbers.map((number) => {\n        max = Math.max(max, number);\n        return max;\n    });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (string === string.split('').reverse().join('')) {\n    return string;\n  }\n  let postfix = '';\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substring(0, i) === string.substring(0, i).split('').reverse().join('')) {\n      postfix = string.substring(i);\n      break;\n    }\n  }\n  return string + string.substring(postfix.length).split('').reverse().join('');\n};"}
{"task_id": "JavaScript/11", "generation": "\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n    if (strings.length === 0) return null;\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "JavaScript/13", "generation": "\n    if (!b) {\n        return a;\n    }\n\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(i);\n  }\n  return result.join(\" \");\n};"}
{"task_id": "JavaScript/16", "generation": "\n    let distinctCharacters = new Set();\n    for (let i = 0; i < string.length; i++) {\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n    let notes = music_string.split(' ');\n    let beats = [];\n\n    notes.forEach(note => {\n        if (note === 'o') {\n            beats.push(4);\n        } else if (note === 'o|') {\n            beats.push(2);\n        } else if (note === '.|') {\n            beats.push(1);\n        }\n    });\n\n    return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n    let count = 0;\n    let position = 0;\n\n    while (true) {\n        position = string.indexOf(substring, position);\n        if (position !== -1) {\n            count++;\n            position++;\n        } else {\n            break;\n        }\n    }\n\n    return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(' ')\n    .sort((a, b) => numberMap[a] - numberMap[b])\n    .join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n    numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestElements = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        const diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestElements = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closestElements;\n};"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n}"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n    return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n    for(let i = n - 1; i > 0; i--) {\n        if(n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n    let counts = {};\n    numbers.forEach(num => {\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    });\n    return numbers.filter(num => counts[num] === 1);\n};"}
{"task_id": "JavaScript/27", "generation": "\n    let flipped = '';\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            flipped += string[i].toLowerCase();\n        } else {\n            flipped += string[i].toUpperCase();\n        }\n    }\n    return flipped;\n}"}
{"task_id": "JavaScript/28", "generation": "\n    return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n    return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter(n => n > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const f = (x) => xs.reduce((acc, coef, i) => acc + coef * Math.pow(x, i), 0);\n  const df = (x) => xs.slice(1).reduce((acc, coef, i) => acc + (i + 1) * coef * Math.pow(x, i), 0);\n  let x = 1;\n  while (Math.abs(f(x)) > 1e-6) {\n    x = x - f(x) / df(x);\n  }\n  return x;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const arr = [...l];\n  const thirds = arr.filter((_, i) => (i + 1) % 3 === 0);\n  thirds.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if ((i + 1) % 3 === 0) {\n      arr[i] = thirds.shift();\n    }\n  }\n\n  return arr;\n};"}
{"task_id": "JavaScript/34", "generation": "\n    let uniqueList = [...new Set(l.flat())].sort((a, b) => a - b);\n    return uniqueList;\n}"}
{"task_id": "JavaScript/35", "generation": "\n    return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, index) => index % 2 === 0);\n  const sortedEvenIndices = evenIndices.sort((a, b) => a - b);\n\n  return l.map((value, index) =>\n    index % 2 === 0 ? sortedEvenIndices.shift() : value\n  );\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const charCode = parseInt(s.slice(i, i + 3), 10);\n    result += String.fromCharCode(charCode);\n  }\n  return result;\n};\n\nexport default decodeCyclic;\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../redux/actions/auth';\nimport { toast } from 'react-toastify';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [user, setUser] = useState({\n    email: '',\n    password: '',\n  });\n\n  const handleInputChange = (e) => {\n    setUser({ ...user, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await dispatch(login(user));\n      navigate('/');\n    } catch (error) {\n      toast.error('Invalid email or password');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            value={user.email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            value={user.password}\n            onChange={handleInputChange}\n          /"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const fib = (n) => {\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n      [a, b] = [b, a + b];\n    }\n    return b;\n  };\n\n  let count = 0, i = 1;\n  while (count < n) {\n    if (isPrime(fib(i))) count++;\n    i++;\n  }\n  return fib(i - 1);\n};"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let j = i + 1;\n    let k = l.length - 1;\n    while (j < k) {\n      const sum = l[i] + l[j] + l[k];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n    return n * (n - 1) / 2;\n}"}
{"task_id": "JavaScript/42", "generation": "\n    return l.map(x => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n    return x.toString(base);\n}"}
{"task_id": "JavaScript/45", "generation": "\n    return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n    if (n === 0) return 0;\n    if (n === 1) return 2;\n    if (n === 2) return 0;\n    if (n === 3) return 0;\n\n    let a = 0;\n    let b = 2;\n    let c = 0;\n    let d = 0;\n\n    for (let i = 4; i <= n; i++) {\n        let temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n\n    return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    let middle = Math.floor(l.length / 2);\n\n    if (l.length % 2)\n        return l[middle];\n    else\n        return (l[middle - 1] + l[middle]) / 2.0;\n};"}
{"task_id": "JavaScript/48", "generation": "\n    const len = text.length;\n    for (let i = 0; i < len / 2; i++) {\n        if (text[i] !== text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/49", "generation": "\n    let res = 1;\n    for (let i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return res;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n    return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "JavaScript/52", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n    return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n    const count = (s) => [...s].reduce((acc, char) => {\n        acc[char] = (acc[char] || 0) + 1;\n        return acc;\n    }, {});\n    return JSON.stringify(count(s0)) === JSON.stringify(count(s1));\n};"}
{"task_id": "JavaScript/55", "generation": "\n    if (n <= 2) return 1;\n    let fibNums = [1, 1];\n    for (let i = 2; i < n; i++) {\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n    }\n    return fibNums[n - 1];\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++;\n    } else if (brackets[i] === \">\") {\n      count--;\n      if (count < 0) {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n    return (l.every((val, i) => i === 0 || l[i - 1] <= val) || l.every((val, i) => i === 0 || l[i - 1] >= val));\n}"}
{"task_id": "JavaScript/58", "generation": "\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let intersection = new Set([...set1].filter(value => set2.has(value)));\n    return Array.from(intersection).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n    let factor = 2;\n    while (factor <= n) {\n        if (n % factor === 0) {\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n    let sum = 0;\n    for(let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n    let derivative = [];\n    for(let i = 1; i < xs.length; i++) {\n        derivative.push(i * xs[i]);\n    }\n    return derivative;\n}"}
{"task_id": "JavaScript/63", "generation": "\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    let fibfibNums = [0, 0, 1];\n\n    for (let i = 3; i <= n; i++) {\n        fibfibNums[i] = fibfibNums[i - 1] + fibfibNums[i - 2] + fibfibNums[i - 3];\n    }\n\n    return fibfibNums[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n    const digits = String(x).split('');\n    for (let i = 0; i < shift; i++) {\n        digits.unshift(digits.pop());\n    }\n    return digits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n            sum += s[i].charCodeAt();\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = [Infinity, -1];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEven[0] && arr[i] % 2 === 0) {\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven[0] === Infinity ? [] : smallestEven;\n};"}
{"task_id": "JavaScript/69", "generation": "\n    let count = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (count[lst[i]]) {\n            count[lst[i]]++;\n        } else {\n            count[lst[i]] = 1;\n        }\n        if (count[lst[i]] > lst[i] && count[lst[i]] > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "JavaScript/70", "generation": "\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while (lst.length) {\n        result.push(lst.shift()); // remove and push minimum\n        if (lst.length) {\n            result.push(lst.pop()); // remove and push maximum\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Number((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "JavaScript/72", "generation": "\n    let sum = 0;\n    let max = Math.max(...q);\n    for(let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if(sum - max <= w && sum === max) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n    const sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    const sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    return sum1 < sum2 ? lst1 : lst2;\n}"}
{"task_id": "JavaScript/75", "generation": "\n    if (a < 100) {\n        let factors = [];\n        for (let i = 2; i <= a; i++) {\n            while (a % i === 0) {\n                factors.push(i);\n                a = a / i;\n            }\n        }\n        if (factors.length > 3) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return \"Number is greater than 100\";\n    }\n}"}
{"task_id": "JavaScript/76", "generation": "\n    if (n === 1) {\n        return x === 1;\n    }\n    let power = 1;\n    while (power < x) {\n        power *= n;\n        if (power === x) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let x = Math.round(Math.pow(a, (1 / 3)));\n    return x * x * x === a;\n}"}
{"task_id": "JavaScript/78", "generation": "\n    const hexPrime = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrime.includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n    let binary = decimal.toString(2);\n    let binaryWithDB = 'db' + binary + 'db';\n    return binaryWithDB;\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length !== 3) return false;\n  const chars = [...new Set(s)];\n  return chars.length === 3;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    let letterGrades = [];\n    grades.forEach(grade => {\n        if (grade === 4.0) {\n            letterGrades.push('A+');\n        } else if (grade > 3.7) {\n            letterGrades.push('A');\n        } else if (grade > 3.3) {\n            letterGrades.push('A-');\n        } else if (grade > 2.7) {\n            letterGrades.push('B+');\n        } else if (grade > 2.0) {\n            letterGrades.push('B');\n        } else if (grade > 1.7) {\n            letterGrades.push('B-');\n        } else if (grade > 1.0) {\n            letterGrades.push('C');\n        } else if (grade > 0.7) {\n            letterGrades.push('C-');\n        } else if (grade > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    });\n    return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n    const length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 2;\n    if (n === 0) return 1;\n    return 2 * startsOneEnds(n - 1);\n}"}
{"task_id": "JavaScript/84", "generation": "\n  // Convert the number to binary\n  let binary = N.toString(2);\n\n  // Split the binary number into an array of digits\n  let digits = binary.split('');\n\n  // Map over the array of digits, convert each digit back to an integer, and reduce the array to a sum\n  let sum = digits.map(Number).reduce((a, b) => a + b);\n\n  // Return the sum\n  return sum;\n};"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n    return s.split(' ').map(word => {\n        return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n    }).join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result\n    .sort((a, b) => a[0] - b[0])\n    .map(([i, j]) => `(${i} ${j})`)\n    .join(\", \");\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return [];\n  }\n  if (array.length === 1) {\n    return [array[0]];\n  }\n  const sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  }\n  return array.sort((a, b) => b - a);\n};"}
{"task_id": "JavaScript/89", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s[i].charCodeAt();\n        if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) {\n            result += String.fromCharCode(charCode + 2 * 2);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/90", "generation": "\n  let min = Math.min(...lst);\n  lst = lst.filter((item) => item !== min);\n  return lst.length === 0 ? null : Math.min(...lst);\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].endsWith('.') || words[i].endsWith('?') || words[i].endsWith('!')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        return (x + y === z) || (x + z === y) || (y + z === x);\n    }\n    return false;\n}"}
{"task_id": "JavaScript/93", "generation": "\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char.match(/[a-z]/i)) {\n            if (char === char.toUpperCase()) {\n                encodedMessage += char.toLowerCase();\n            } else {\n                encodedMessage += char.toUpperCase();\n            }\n        } else {\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const getSumOfDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => a + parseInt(b), 0);\n  }\n\n  let maxPrime = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      maxPrime = Math.max(maxPrime, lst[i]);\n    }\n  }\n  return maxPrime !== -1 ? getSumOfDigits(maxPrime) : 0;\n}"}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase()) {\n            lowerCase = false;\n        }\n        if (key !== key.toUpperCase()) {\n            upperCase = false;\n        }\n        if (!lowerCase && !upperCase) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n  const primes = [];\n  for (let i = 2; i < n; i++) if (isPrime(i)) primes.push(i);\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n    let aUnit = Math.abs(a) % 10;\n    let bUnit = Math.abs(b) % 10;\n    return aUnit * bUnit;\n}"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i].toUpperCase() && 'AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n    const num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    result.push(stones);\n    stones = stones % 2 === 0 ? stones + 2 : stones + 2;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n    return s.replace(/[, ]+/g, ' ').split(' ');\n}"}
{"task_id": "JavaScript/102", "generation": "\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return avg.toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        let str = x[i].toString();\n        for (let j = 0; j < str.length; j++) {\n            if (str[j] % 2 === 0) {\n                result.push(x[i]);\n                break;\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const words = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return arr.sort((a, b) => words[a].length - words[b].length);\n};\n\nconst reverseArr = (arr) => {\n  return arr.reverse();\n};\n\nconst replaceNumbers = (arr) => {\n  const words = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return arr.map((num) => words[num]);\n};\n\nconst sortReverseReplace = (arr) => {\n  if (arr.length === 0) return [];\n  const sortedArr = byLength(arr);\n  const reversedArr = reverseArr(sortedArr);\n  const replacedArr = replaceNumbers(reversedArr);\n  return replacedArr;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const factorial = (num) => {\n    let result = 1;\n    for (let i = 1; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  };\n\n  const sum = (num) => {\n    let result = 0;\n    for (let i = 1; i <= num; i++) {\n      result += i;\n    }\n    return result;\n  };\n\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(factorial(i));\n    } else {\n      arr.push(sum(i));\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/107", "generation": "\n    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i < 10) {\n            evenCount++;\n        } else if (i < 100) {\n            if (i / 10 === i % 10) {\n                evenCount++;\n            }\n        } else {\n            if (i / 100 === i % 10) {\n                if (Math.floor((i % 100) / 10) === i % 10) {\n                    evenCount++;\n                }\n            }\n        }\n        if (i % 2 !== 0) {\n            oddCount++;\n        }\n    }\n    return (evenCount, oddCount);\n}"}
{"task_id": "JavaScript/108", "generation": "\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = arr[i];\n        while (num != 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n\n  let inversions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) inversions++;\n    }\n  }\n\n  return inversions <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n    let oddLst1 = lst1.filter(num => num % 2 !== 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n    return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const count = {};\n  const words = test.split(' ');\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    count[word] = (count[word] || 0) + 1;\n  }\n\n  let maxCount = 0;\n  for (const key in count) {\n    if (count[key] > maxCount) {\n      maxCount = count[key];\n    }\n  }\n\n  const result = {};\n  for (const key in count) {\n    if (count[key] === maxCount) {\n      result[key] = maxCount;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  const isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n    let min = nums[0];\n    let sum = nums[0];\n    for(let i = 1; i < nums.length; i++) {\n        sum = Math.min(nums[i], sum + nums[i]);\n        min = Math.min(min, sum);\n    }\n    return min;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let total = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                total++;\n            }\n        }\n    }\n    return Math.ceil(total / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  const binaryCount = (num) => {\n    return num.toString(2).split('1').length - 1;\n  };\n\n  return arr.sort((a, b) => {\n    const aCount = Array.isArray(a) ? a.reduce((acc, v) => acc + binaryCount(v), 0) : binaryCount(a);\n    const bCount = Array.isArray(b) ? b.reduce((acc, v) => acc + binaryCount(v), 0) : binaryCount(b);\n\n    if (aCount === bCount) {\n      return a - b;\n    }\n\n    return aCount - bCount;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) count++;\n    }\n    if (count === n) result.push(word);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 1; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n    let str1 = lst[0];\n    let str2 = lst[1];\n    let stack = [];\n    let result = [];\n\n    const isBalanced = (str) => {\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '(') {\n                stack.push(str[i]);\n            } else {\n                if (stack.length === 0) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.length === 0;\n    }\n\n    if (isBalanced(str1)) {\n        result.push(str1);\n    }\n    if (isBalanced(str2)) {\n        result.push(str2);\n    }\n\n    return result.length > 0 ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    // Return the first k elements of the sorted array\n    return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum += Math.floor(arr[i] / 10);\n    } else {\n      sum += Math.floor(arr[i] / 100);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let collatz = [];\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let sequence = [];\n    while (num != 1) {\n      sequence.push(num);\n      num = num % 2 === 0 ? num / 2 : num * 3 + 1;\n    }\n    sequence.push(1);\n    collatz = [...collatz, ...sequence.filter((num) => num % 2 !== 0)];\n  }\n  return [...new Set(collatz)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  if (!date) return false;\n\n  const dateArray = date.split(\"-\");\n  if (dateArray.length !== 2) return false;\n\n  const [month, day] = dateArray;\n  if (\n    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) ||\n    ((month === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n      day > 31)\n  ) {\n    return false;\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(',')) {\n    return txt.split(',');\n  } else if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && txt[i] >= 'a' && txt[i] <= 'z') {\n        if ((txt[i].charCodeAt(0) - 97) % 2 !== 0) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = true;\n  let duplicate = false;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      if (duplicate) {\n        sorted = false;\n        break;\n      } else {\n        duplicate = true;\n      }\n    } else if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};"}
{"task_id": "JavaScript/127", "generation": "\n    const start = Math.max(interval1[0], interval2[0]);\n    const end = Math.min(interval1[1], interval2[1]);\n    const length = Math.max(end - start + 1, 0);\n    if (length === 0) return \"NO\";\n    if (length === 1) return \"NO\";\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if (length % i === 0) return \"NO\";\n    return \"YES\";\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) product *= -1;\n    if (arr[i] > 0) product *= 1;\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n    const n = grid.length;\n    const dp = Array.from({ length: n }, () => Array.from({ length: k + 1 }, () => Array(k + 1).fill(Infinity)));\n    const next = Array.from({ length: n }, () => Array.from({ length: k + 1 }, () => Array(k + 1).fill([])));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][1][0] = grid[i];\n    }\n\n    for (let len = 2; len <= k; len++) {\n        for (let l = 0; l <= k - len; l++) {\n            for (let i = 0; i < n; i++) {\n                for (let j = 0; j < n; j++) {\n                    if (i === j) continue;\n                    const dist = dp[i][len - 1][l] + grid[j];\n                    if (dist < dp[j][len][l + 1]) {\n                        dp[j][len][l + 1] = dist;\n                        next[j][len][l + 1] = [...next[i][len - 1][l], j];\n                    } else if (dist === dp[j][len][l + 1]) {\n                        const path1 = [...next[i][len - 1][l], j];\n                        const path2 = [...next[j][len][l + 1]];\n                        if (path1.length < path2.length || (path1.length === path2.length && path1[0] < path2[0])) {\n                            next[j][len][l + 1] = path1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    let minDist = Infinity;\n    let minPath = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j <= k; j++) {\n            if (dp[i][k][j] < minDist) {\n                minDist = dp[i][k][j];\n                minPath = next[i][k]["}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 0) return [0];\n  if (n === 1) return [0, 1];\n  if (n === 2) return [0, 1, 1];\n\n  let arr = [0, 1, 1];\n\n  for (let i = 3; i <= n; i++) {\n    arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n  }\n\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n    let arr = Array.from(String(n), Number);\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 !== 0){\n            product *= arr[i];\n        }\n    }\n    return product;\n}"}
{"task_id": "JavaScript/132", "generation": "\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            count++;\n        } else {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count !== 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.reduce((acc, curr) => {\n        return acc + Math.pow(Math.ceil(curr), 2);\n    }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n    const lastChar = txt.slice(-1);\n    const secondLastChar = txt.slice(-2, -1);\n    return /[a-z]/i.test(lastChar) && !/[a-z]/i.test(secondLastChar);\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      maxIndex = i - 1;\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n    let neg = null;\n    let pos = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 && (neg === null || lst[i] > neg)) {\n            neg = lst[i];\n        } else if (lst[i] > 0 && (pos === null || lst[i] < pos)) {\n            pos = lst[i];\n        }\n    }\n    return [neg, pos];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === \"string\") a = parseFloat(a.replace(\",\", \".\"));\n  if (typeof b === \"string\") b = parseFloat(b.replace(\",\", \".\"));\n\n  if (a === b) return null;\n  return a > b ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n    if (n < 4) {\n        return false;\n    }\n    if (n % 2 !== 0) {\n        return false;\n    }\n    return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n    if (n === 0) {\n        return 1;\n    }\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n    return text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const fileExtension = ['txt', 'exe', 'dll'];\n  const fileNameParts = file_name.split('.');\n  if (fileNameParts.length !== 2) {\n    return 'No';\n  }\n  const [fileNameWithoutExtension, extension] = fileNameParts;\n  if (!/^[a-zA-Z]/.test(fileNameWithoutExtension[0])) {\n    return 'No';\n  }\n  if (fileNameWithoutExtension.length > 3) {\n    return 'No';\n  }\n  if (!fileExtension.includes(extension)) {\n    return 'No';\n  }\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n    return lst.reduce((acc, val, i) => {\n        if (i % 3 === 0 && i % 4 !== 0) {\n            return acc + Math.pow(val, 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            return acc + Math.pow(val, 3);\n        } else {\n            return acc;\n        }\n    }, 0);\n};"}
{"task_id": "JavaScript/143", "generation": "\n    const isPrime = (num) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false;\n        return num > 1;\n    }\n\n    const words = sentence.split(' ');\n    let result = '';\n\n    for(let i = 0; i < words.length; i++) {\n        if(isPrime(words[i].length)) {\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}"}
{"task_id": "JavaScript/144", "generation": "\n    const [xNum, xDen] = x.split('/');\n    const [nNum, nDen] = n.split('/');\n\n    const commonDenominator = xDen * nDen;\n    const newNumeratorX = (xNum * nDen);\n    const newNumeratorN = (nNum * xDen);\n\n    return (newNumeratorX + newNumeratorN) === commonDenominator;\n}"}
{"task_id": "JavaScript/145", "generation": "\n    const sumDigits = (num) => {\n        let sum = 0, temp = Math.abs(num);\n        while (temp) {\n            sum += temp % 10;\n            temp = Math.floor(temp / 10);\n        }\n        return sum;\n    }\n\n    return nums.sort((a, b) => {\n        const sumA = sumDigits(a), sumB = sumDigits(b);\n        return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n    });\n}"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && (Math.abs(nums[i]) % 10) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n    let arr = [];\n    for(let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++) {\n        if((arr[i] % 3) === 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index === -1) {\n        return ();\n    }\n    return planets.slice(Math.min(planet1Index, planet2Index) + 1, Math.max(planet1Index, planet2Index));\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\")); //==> (\"Saturn\", \"Uranus\")\nconsole.log(bf(\"Earth\", \"Mercury\")); //==> (\"Venus\")\nconsole.log(bf(\"Earth\", \"Mars\")); //==> (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nconsole.log(bf(\"Earth\", \"Earth\")); //==> ()\nconsole.log(bf(\"Earth\", \"Pluto\")); //==> ()\nconsole.log(bf(\"Pluto\", \"Earth\")); //==> ()\nconsole.log(bf(\"Pluto\", \"Pluto\")); //==> ()\nconsole.log(bf(\"\", \"\")); //==> ()\nconsole.log(bf(\"Earth\", \"\")); //==> ()\nconsole.log(bf(\"\", \"Earth\")); //==> ()\nconsole.log(bf(\"\", \"Pluto\")); //==> ()\nconsole.log(bf(\"Pluto\", \"\")); //==> ()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "JavaScript/149", "generation": "\n  // filter out the strings with odd lengths\n  const filteredList = lst.filter((str) => str.length % 2 === 0);\n\n  // sort the list by length of each word\n  filteredList.sort((a, b) => a.length - b.length);\n\n  return filteredList;\n};"}
{"task_id": "JavaScript/150", "generation": "\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0] % 2 !== 0 && lst[i][1] % 2 !== 0) {\n      sum += lst[i][0] ** 2 + lst[i][1] ** 2;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let maxStrength = 0;\n  let strongestExtension = '';\n\n  for (let extension of extensions) {\n    let strength = extension.replace(/[a-z]/g, '').length - extension.replace(/[A-Z]/g, '').length;\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extension;\n    }\n  }\n\n  return `${class_name}.${strongestExtension}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b)) {\n      return true;\n    }\n    b = b.slice(1) + b[0];\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n    let evenCount = 0;\n    let oddCount = 0;\n    const numArr = Math.abs(num).toString().split('');\n    numArr.forEach((digit) => {\n        if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    });\n    return (num < 0 ? [oddCount, evenCount] : [evenCount, oddCount]);\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n\n  for (const key in map) {\n    while (number >= map[key]) {\n      result += key;\n      number -= map[key];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n    // The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse (the side opposite the right angle) \n    // is equal to the sum of the squares of the other two sides.\n    // We can use this theorem to solve the problem.\n    // First, we need to sort the sides in ascending order.\n    let sides = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUniqueChars = 0;\n  let wordWithMaxUniqueChars = '';\n\n  words.forEach((word) => {\n    const uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      wordWithMaxUniqueChars = word;\n    } else if (uniqueChars === maxUniqueChars) {\n      wordWithMaxUniqueChars = wordWithMaxUniqueChars < word ? wordWithMaxUniqueChars : word;\n    }\n  });\n\n  return wordWithMaxUniqueChars;\n};"}
{"task_id": "JavaScript/159", "generation": "\n    let total = number + need;\n    if (total <= remaining) {\n        return [total, remaining - total];\n    } else {\n        return [remaining + number, 0];\n    }\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case \"+\":\n        result += operand[i];\n        break;\n      case \"-\":\n        result -= operand[i];\n        break;\n      case \"*\":\n        result *= operand[i];\n        break;\n      case \"/\":\n        result = Math.floor(result / operand[i]);\n        break;\n      case \"**\":\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n    let arr = s.split('');\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].match(/[a-z]/i)){\n            arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n        }\n    }\n    return arr.join('');\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n    let result = [];\n    for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}"}
