{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder current_group = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(current_group.toString());\n                current_group.setLength(0);\n            } else if (c == ')') {\n                current_group.append(')');\n                if (!stack.isEmpty()) {\n                    result.add(stack.pop() + current_group.toString());\n                    current_group.setLength(0);\n                }\n            } else {\n                current_group.append(c);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/2", "generation": "\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            if (operations.get(i) == false) {\n                continue;\n            }\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/4", "generation": "\n        if (numbers == null || numbers.isEmpty()) {\n            return 0.0;\n        }\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumDeviation = 0.0;\n        for (double num : numbers) {\n            sumDeviation += Math.abs(num - mean);\n        }\n        return sumDeviation / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\"\\\\s+\");\n        for (String group : groups) {\n            int max_depth = 0;\n            int current_depth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    current_depth += 1;\n                    max_depth = Math.max(max_depth, current_depth);\n                } else if (c == ')') {\n                    current_depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "\n        List<String> filtered = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n            }\n        }\n        return filtered;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String palindromicSuffix = string.substring(i, j + 1);\n        String palindromicPrefix = new StringBuilder(palindromicSuffix).reverse().toString();\n        return palindromicSuffix + palindromicPrefix;\n    }\n    \n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to lower case to ignore case sensitivity\n        string = string.toLowerCase();\n        // Create a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        // Return the size of the set, which represents the number of unique characters\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (String note : string.split(\" \")) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        // Split the string into an array of strings\n        String[] array = numbers.split(\" \");\n        // Sort the array\n        Arrays.sort(array);\n        // Join the array into a string\n        return String.join(\" \", array);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        if (numbers.size() < 2) {\n            return new ArrayList<>();\n        }\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closest = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closest = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n        return rescaled;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    /**\n    Return the first character of the given string\n    >>> first_char''\n    ''\n    >>> first_char('abc')\n    'a'\n    > first_char('abc3\n     */\n    public char first_char(String string) {\n        if (string.length() == 0) {\n            return '\\0';\n        }\n        return string.charAt(0);\n    }\n\n    /**\n    Return the last character of the given string\n    >>> last_char''\n    ''\n    >>> last_char('abc')\n    'c'\n    > last_char('abc3\n     */\n    public char last_char(String string) {\n        if (string.length() == 0) {\n            return '\\0';\n        }\n        return string.charAt(string.length() - 1);\n    }\n\n    /**\n    Return the character at the given index in the string\n    >>> char_at('', 0)\n    ''\n    >>> char_at('abc', 0)\n    'a'\n    >>> char_at('abc', 1)\n    'b'\n    >>> char_at('abc', 2)\n    'c'\n    >>> char_at('abc', 3)\n    ''\n    > char_at('abc3, 3\n     */\n    public char char_at(String string, int index) {\n        if (index < 0 || index >= string.length()) {\n            return '\\0';\n        }\n        return string.charAt(index);\n    }\n\n    /**\n    Return the substring of the given string from the start index to the end index\n    >>> substring('', 0, 0)\n    ''\n    >>> substring('abc', 0, 1)\n    'a'\n    >>> substring('abc', 0, 2)\n    'ab'\n    >>> substring('abc', 0, 3)\n    'abc'\n    >>> substring('abc', 0, 4)\n    ''\n    > substring('abc3, 0, 4\n     */\n    public String substring(String string, int start, int end) {\n        if (start < 0 || end < 0 || start > end || end > string.length()) {\n            return \"\";\n        }\n        return string.substring(start, end);\n    }\n\n    /**\n    Return the substring of the given string from the start index to the end of the string\n    >>> substring_to_end('', 0)\n    ''\n    >>> substring_to_end('abc', 0)\n    'abc'\n    >>> substring_to_end('abc', 1\n}"}
{"task_id": "Java/24", "generation": "\n        int divisor = 1;\n        while (n % divisor == 0) {\n            divisor += 1;\n        }\n        return divisor - 1;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    For a given number n find the largest number that divides evenly, smaller\n    >>> largest_divisor(15\n    5\n     */\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    For a given number n find the largest number that divides evenly, smaller\n    >>> largest_divisor(15\n    5\n     */\n    public int largestDivisor(int n) {\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    For a given number n find the largest number that divides evenly, smaller\n    >>> largest_divisor(15\n    5\n     */\n    public int largestDivisor(int n) {\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    For a given number n find the largest number that divides evenly, smaller\n    >>> largest_divisor(15\n    5\n     */\n    public int largestDivisor(int n) {\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    For a given number n find the largest number that divides evenly, smaller\n    >>> largest_divisor(15\n    5\n     */\n    public int largestDivisor(int n) {\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return n;\n    }\n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n = n / divisor;\n            }\n            divisor += 1;\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer num : numbers) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        return map.entrySet().stream()\n                .filter(entry -> entry.getValue() == 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        double precision = 0.00001;\n        while (true) {\n            double f_x = poly(xs, x);\n            double f_x_plus_precision = poly(xs, x + precision);\n            if (Math.abs(f_x) < precision) {\n                return x;\n            }\n            if (Math.abs(f_x_plus_precision) < precision) {\n                x += precision;\n                continue;\n            }\n            if (f_x * f_x_plus_precision < 0) {\n                x += precision;\n            } else {\n                x -= precision;\n            }\n        }\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            } else {\n                List<Integer> temp = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 != 0) {\n                        temp.add(l.get(j));\n                    }\n                }\n                Collections.sort(temp);\n                result.add(temp.get(i % (l.size() / 3)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> s = new HashSet<Integer>(l);\n        List<Integer> result = new ArrayList<Integer>(s);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.set(i, l.get(i));\n            } else {\n                l1.set(i, l2.get(i / 2));\n            }\n        }\n        return l1;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0, b = 1, count = 0;\n        while (count < n) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n            if (isPrime(b)) {\n                count++;\n            }\n        }\n        return a;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            set.add(i);\n        }\n        for (int i : set) {\n            for (int j : set) {\n                if (set.contains(-i - j)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        int leftCars = n;\n        int rightCars = n;\n        int collisions = 0;\n        while (leftCars > 0 && rightCars > 0) {\n            leftCars--;\n            rightCars--;\n            collisions += leftCars + rightCars;\n        }\n        return collisions;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area(5 3\n    \n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given length a side and high return area for a triangle. >>> triangle_area\n}"}
{"task_id": "Java/46", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 2, c = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + c;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        return c;\n    }\n}  // class Solution\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        // Remove spaces and convert to lowercase\n        String cleanText = text.replaceAll(\"\\\\s\", \"\").toLowerCase();\n        // Compare the string with its reverse\n        return cleanText.equals(new StringBuilder(cleanText).reverse().toString());\n    }\n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        int half = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half) % p;\n        } else {\n            return ((half * half) % p * 2) % p;\n        }\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers x and\n    >>> add(2 3\n    5\n     add(5 7\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack.push('<');\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n} \n"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                max = Math.max(max, i);\n                n = n / i;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n} \n\nclass Solution {\n    /**\n    sum_to_n is a function sums numbers from 1 n. >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100\n    5050)\n    15\n    \n    55\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n} \n\nclass Solution {\n    /**\n    sum_to_n is a function sums numbers from 1 n. >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100\n    5050)\n    15\n    \n    55\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n} \n\nclass Solution {\n    /**\n    sum_to_n is a function sums numbers from 1 n. >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100\n    5050)\n    15\n    \n    55\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n} \n\nclass Solution {\n    /**\n    sum_to_n is a function sums numbers from 1 n. >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100\n    5050)\n    15\n    \n    55\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n} \n\nclass Solution {\n    /**\n    sum_to_n is a function sums numbers from 1 n. >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100\n    5050)\n    15\n    \n    55\n    1\n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push('(');\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (xs.size() == 1) {\n            return result;\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 1;\n            for (int i = 2; i <= n; i++) {\n                int sum = a + b;\n                a = b;\n                b = sum;\n            }\n            return b;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar the Fibbonacci sequnece that's defined as follows\n    fibfib(0) == 0\n    fibfib(1 0 1\n    fibfib(n == fibfib(n-1 +). Please write a function to efficiently compute the n-th element the fibfib number sequence. >>> fibfib(1)\n    0\n    >>> fibfib(5\n    4\n     fibfib(8\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 1;\n            for (int i = 2; i <= n; i++) {\n                int sum = a + b;\n                a = b;\n                b = sum;\n            }\n            return b;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar the Fibbonacci sequnece that's defined as follows\n    fibfib(0) == 0\n    fibfib(1 0 1\n    fibfib(n == fibfib(n-1 +). Please write a function to efficiently compute the n-th element the fibfib number sequence. >>> fibfib(1)\n    0\n    >>> fibfib(5\n    4\n     fibfib(8\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 1;\n            for (int i = 2; i <= n; i++) {\n                int sum = a + b;\n                a = b"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' || s.charAt(i) == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n"}
{"task_id": "Java/65", "generation": "\n        // Convert the integer to a string to easily access each digit\n        String str = Integer.toString(x);\n        // Calculate the effective shift, taking into account the number of digits\n        shift = shift % str.length();\n        // Split the string into two parts: the part to be shifted to the end and the part to be kept at the beginning\n        String part1 = str.substring(str.length() - shift);\n        String part2 = str.substring(0, str.length() - shift);\n        // Combine the two parts in the correct order\n        String result = part1 + part2;\n        // Return the result as a string\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] words = s.split(\" \");\n        int total = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\") || words[i].equals(\"oranges\")) {\n                total += Integer.parseInt(words[i - 1]);\n            }\n        }\n        return n - total;\n    }\n}  // time complexity O(n) where n is the number of words in the string\n// space complexity O(n) where n is the number of words in the string\n// space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity O(1) where n is the number of words in the string\n// because we are using a fixed size array to store the words.  // space complexity"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallest = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallest) {\n                smallest = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n        if (smallest == Integer.MAX_VALUE) {\n            return result;\n        }\n        result.add(smallest);\n        result.add(smallestIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        return max == 0 ? -1 : max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        while (!sortedList.isEmpty()) {\n            result.add(sortedList.remove(0));\n            if (!sortedList.isEmpty()) {\n                result.add(sortedList.remove(sortedList.size() - 1));\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/71", "generation": "\n        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the three sides do not form a valid triangle\n            return -1;\n        }\n    }\n}  // class Solution\n\n// Example usage\n"}
{"task_id": "Java/72", "generation": "\n        // Check if the list is a palindrome\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Check if the sum of the list is less than the maximum possible weight\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        boolean isSumLessThanMaxWeight = sum <= w;\n\n        // Return True if the list is a palindrome and the sum is less than the maximum possible weight\n        return isPalindrome && isSumLessThanMaxWeight;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        // Create a map to store the frequency of each number\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : arr) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Initialize the count of elements that need to be changed\n        int count = 0;\n\n        // Iterate over the frequency map\n        for (int freq : freqMap.values()) {\n            // If the frequency is odd, we need to change one element to make it even\n            if (freq % 2 != 0) {\n                count += 1;\n            }\n            // If the frequency is even, we can make it even by changing one element\n            // But we can also make it even by changing two elements, so we take the minimum\n            // of the two options\n            count += Math.min(1, freq / 2);\n        }\n\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has \n    total number chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list. Examples\n    total_match([], []) \ufffd\ufffd\ufffd []\n    total_match(['hi 'admin'], ['hIHi']) \ufffd ['hIHi']\n    total_match(['hi, 'admin ['hi',hi', 'admin', 'project' \ufffd ['hi 'admin']\n    total_match(['hi'hIhihi']) \ufffdhIhi',hi']\n    total_match(['4'], ['1', '2',',','])4']\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has \n    total number chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list. Examples\n    total_match([], []) \ufffd\ufffd\ufffd []\n    total_match(['hi 'admin'], ['hIHi']) \ufffd ['hIHi']\n    total_match(['hi, 'admin ['hi',hi', 'admin', 'project' \ufffd ['hi 'admin']\n    total_match(['hi'hIhihi']) \ufffdhIhi',hi']\n    total_match(['4'], ['1', '2\n}"}
{"task_id": "Java/75", "generation": "\n        if (a < 100) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function true the given number the multiplication 3 prime\n    and false Knowing (a is less then 100. Example\n    is_multiply_prime(30 == True\n    30 = 2 * 3 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function true the given number the multiplication 3 prime\n    and false Knowing (a is less then 100. Example\n    is_multiply_prime(30 == True\n    30 = 2 * 3 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function true the given number the multiplication 3 prime\n    and false Knowing (a is less then 100. Example\n    is_multiply_prime(30 == True\n    30 = 2 * 3 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Write a function true the given number the multiplication 3 prime\n    and false Knowing (a is less then 100\n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int i = 0;\n        while (Math.pow(n, i) <= x) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int) Math.cbrt(a);\n        return (cubeRoot * cubeRoot * cubeRoot) == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n"}
{"task_id": "Java/79", "generation": "\n        // Convert the decimal number to binary and remove the '0b' prefix\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Add the extra characters 'db' at the beginning and at the end of the string\n        return \"db\" + binary + \"db\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() > 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 1.7) {\n                result.add(\"C+\");\n            } else if (grade >= 1.3) {\n                result.add(\"C\");\n            } else if (grade >= 1.0) {\n                result.add(\"C-\");\n            } else if (grade >= 0.7) {\n                result.add(\"D+\");\n            } else if (grade >= 0.3) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n} \n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += (int) Math.pow(10, i - 1);\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            char[] charArray = words[i].toCharArray();\n            Arrays.sort(charArray);\n            words[i] = new String(charArray);\n        }\n        return String.join(\" \", words);\n    }\n}  // time complexity O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n// space complexity O(n*m) where n is the number of words and m is the maximum length of a word\n// space complexity is O(n*m) because we are creating a new array of characters for each word and then joining them into a string\n// time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n words.  // time complexity is O(n*m*log(m)) because we are sorting each word's characters, which takes O(m*log(m)) time for each word, and we are doing this for n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.contains(x)) {\n                List<Integer> coordinates = new ArrayList<>();\n                for (int j = 0; j < row.size(); j++) {\n                    if (row.get(j) == x) {\n                        coordinates.add(j);\n                    }\n                }\n                Collections.sort(coordinates, Collections.reverseOrder());\n                List<Integer> sortedRow = new ArrayList<>();\n                for (int j = 0; j < row.size(); j++) {\n                    if (coordinates.contains(j)) {\n                        sortedRow.add(row.get(j));\n                    }\n                }\n                result.add(Arrays.asList(i, coordinates.get(0)));\n            }\n        }\n        Collections.sort(result, Comparator.comparingInt(a -> a.get(0)));\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        if (array.size() == 1) {\n            return array;\n        }\n        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int asciiOffset = Character.isUpperCase(c) ? 65 : 97;\n                encrypted.append((char) ((c - asciiOffset + 2 * 2) % 26 + asciiOffset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != lst.get(i - 1)) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        return Optional.empty();\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        int count = 0;\n        String[] sentences = S.split(\"[.!?]\");\n        for (int i = 0; i < sentences.length; i++) {\n            if (sentences[i].trim().length() > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a + b == c) || (a + c == b) || (b + c == a);\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char newChar = (char) ((c - base + 2) % 26 + base);\n                encodedMessage.append(newChar);\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                maxPrime = Math.max(maxPrime, lst.get(i));\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (!key.toString().matches(\"^[a-z]+$\") && !key.toString().matches(\"^[A-Z]+$\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int product = unitDigitA * unitDigitB;\n        return product;\n    }\n}  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int multiply(int a, int b) {\n//         int unitDigitA = a % 10;\n//         int unitDigitB = b % 10;\n//         int product = unitDigitA * unitDigitB;\n//         return product;\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i)) && \"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        return 0;\n    }\n\n    public int closest_integer(String value) {\n        // Convert the string to a double\n        double num = Double.parseDouble(value);\n        // Round the number away from zero\n        return (int)Math.round(num);\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i + 1);\n            } else {\n                result.add(i - 1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        // Split the string by comma and space\n        String[] words = s.replace(\",\", \" \").split(\" \");\n        // Create a list of words\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        // Check if y is even\n        if (y % 2 == 0) {\n            // If y is even, return y\n            return y;\n        } else {\n            // If y is odd, return -1\n            return -1;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i : x) {\n            if (hasEvenDigit(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int n) {\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            n /= 10;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> sorted = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                sorted.add(i);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        for (int i : sorted) {\n            String s = \"\";\n            switch (i) {\n                case 1:\n                    s = \"One\";\n                    break;\n                case 2:\n                    s = \"Two\";\n                    break;\n                case 3:\n                    s = \"Three\";\n                    break;\n                case 4:\n                    s = \"Four\";\n                    break;\n                case 5:\n                    s = \"Five\";\n                    break;\n                case 6:\n                    s = \"Six\";\n                    break;\n                case 7:\n                    s = \"Seven\";\n                    break;\n                case 8:\n                    s = \"Eight\";\n                    break;\n                case 9:\n                    s = \"Nine\";\n                    break;\n            }\n            result.add(s);\n        }\n        return result;\n    }\n}  // class Solution\n\n// Test the function\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = i; j >= 1; j--) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even.add(i);\n                } else {\n                    odd.add(i);\n                }\n            }\n        }\n        return even;\n    }\n\n    public boolean isPalindrome(int num) {\n        int reversed = 0;\n        int original = num;\n        while (num != 0) {\n            int remainder = num % 10;\n            reversed = reversed * 10 + remainder;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n\n    public boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num > 0) {\n                count++;\n            } else {\n                String str = Integer.toString(Math.abs(num));\n                int sum = 0;\n                for (int i = 0; i < str.length(); i++) {\n                    sum += str.charAt(i) - '0';\n                }\n                if (sum > 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int[] arr1 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr1[i] != arr.get((arr.size() - i) % arr.size())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due to sorting. Space complexity O(n) for the array.  // Time complexity O(n log n) due"}
{"task_id": "Java/110", "generation": "\n        // Check if lst1 is empty\n        if (lst1.isEmpty()) {\n            return \"YES\";\n        }\n        // Check if lst2 is empty\n        if (lst2.isEmpty()) {\n            return \"NO\";\n        }\n        // Check if all elements in lst1 are even\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        // If all elements in lst1 are even, return \"YES\"\n        return \"YES\";\n    }\n\n    \n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == max) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String res = sb.reverse().toString();\n        result.add(res);\n        result.add(res.equals(new StringBuilder(res).reverse().toString()));\n        return result;\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number \" + count + \"n the str\" + s.length() + \"ng \" + count + \" of the nput.\");\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n\n    \n}"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int totalWater = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                totalWater += grid.get(i).get(j);\n            }\n        }\n        int maxFill = 0;\n        while (totalWater > 0) {\n            int fill = 0;\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (grid.get(i).get(j) == 1) {\n                        fill += capacity;\n                        grid.get(i).set(j, 0);\n                    }\n                }\n            }\n            maxFill++;\n            totalWater -= fill;\n        }\n        return maxFill;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int onesA = Integer.bitCount(a);\n                int onesB = Integer.bitCount(b);\n                if (onesA == onesB) {\n                    return a - b;\n                } else {\n                    return onesA - onesB;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            // If the word has exactly n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        // Find the last vowel in the word\n        int lastVowelIndex = word.length() - 1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n                lastVowelIndex = i;\n                break;\n            }\n        }\n\n        // Find the first consonant to the right of the last vowel\n        int firstConsonantIndex = lastVowelIndex + 1;\n        while (firstConsonantIndex < word.length() && isVowel(word.charAt(firstConsonantIndex))) {\n            firstConsonantIndex++;\n        }\n\n        // If no consonant is found, return an empty string\n        if (firstConsonantIndex == word.length()) {\n            return \"\";\n        }\n\n        // Find the closest vowel to the right of the first consonant\n        int closestVowelIndex = firstConsonantIndex;\n        for (int i = firstConsonantIndex + 1; i < word.length(); i++) {\n            if (isVowel(word.charAt(i))) {\n                closestVowelIndex = i;\n                break;\n            }\n        }\n\n        // Return the closest vowel\n        return String.valueOf(word.charAt(closestVowelIndex));\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    open++;\n                } else {\n                    close++;\n                }\n            }\n        }\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    \n}"}
{"task_id": "Java/120", "generation": "\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        // Return the first k elements of the sorted array\n        return arr.subList(0, k);\n    }\n}  // class Solution\n\n// Example usage\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n} \n"}
{"task_id": "Java/124", "generation": "\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 2) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/125", "generation": "\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 1 && words[0].contains(\",\")) {\n            String[] words2 = words[0].split(\",\");\n            int count = 0;\n            for (int i = 0; i < words2.length; i++) {\n                if (words2[i].length() % 2 != 0 && Character.isLowerCase(words2[i].charAt(0))) {\n                    count++;\n                }\n            }\n            return count;\n        } else {\n            return Arrays.stream(words).filter(word -> word.length() % 2 != 0 && Character.isLowerCase(word.charAt(0))).toArray();\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() < 2) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int sum = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.empty();\n            }\n            sign *= (num > 0) ? 1 : -1;\n            sum += Math.abs(num);\n        }\n        return Optional.of(sum * sign);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][][] dp = new int[rows][cols][k + 1];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                dp[i][j][1] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 1; i <= k; i++) {\n            for (int j = 0; j < rows; j++) {\n                for (int l = 0; l < cols; l++) {\n                    int min = Integer.MAX_VALUE;\n                    for (int x = -1; x <= 1; x++) {\n                        for (int y = -1; y <= 1; y++) {\n                            int nx = j + x;\n                            int ny = l + y;\n                            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols) {\n                                min = Math.min(min, dp[nx][ny][i - 1]);\n                            }\n                        }\n                    }\n                    dp[j][l][i] = min * 10 + grid.get(j).get(l);\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (dp[i][j][k] < min) {\n                    min = dp[i][j][k];\n                    index = i;\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = k; i >= 1; i--) {\n            int val = min / (int) Math.pow(10, i - 1);\n            res.add(val);\n            min = min % (int) Math.pow(10, i - 1);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n\n    \n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(3);\n        if (n == 1) {\n            return result;\n        }\n        result.add(1);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(result.get(i - 1) + result.get(i - 2));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  //"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n"}
{"task_id": "Java/132", "generation": "\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                count++;\n            } else if (c == ']') {\n                if (count > 0) {\n                    count--;\n                }\n            }\n        }\n        return count > 0;\n    }\n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/134", "generation": "\n        // Check if the string is empty\n        if (txt.isEmpty()) {\n            return false;\n        }\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        // Check if the last character is an alphabetical character\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not a part of a word\n            if (txt.charAt(txt.length() - 1) == ' ') {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] count = new int[100001];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 1; i <= 100000; i++) {\n            count[i] += count[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            if (count[arr.get(i) - 1] == count[arr.get(i)]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> maxNegative = Optional.empty();\n        Optional<Integer> minPositive = Optional.empty();\n        for (Integer num : lst) {\n            if (num < 0) {\n                maxNegative = Optional.of(Math.max(maxNegative.orElse(Integer.MIN_VALUE), num));\n            } else if (num > 0) {\n                minPositive = Optional.of(Math.min(minPositive.orElse(Integer.MAX_VALUE), num));\n            }\n        }\n        result.add(maxNegative);\n        result.add(minPositive);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Integer && b instanceof Integer) {\n            if (a.equals(b)) {\n                return Optional.empty();\n            } else {\n                return Optional.of(Math.max(a, b));\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if (a.equals(b)) {\n                return Optional.empty();\n            } else {\n                return Optional.of(Math.max(a, b));\n            }\n        } else if (a instanceof String && b instanceof String) {\n            if (a.equals(b)) {\n                return Optional.empty();\n            } else {\n                return Optional.of(a);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 == 1) {\n            return false;\n        }\n        int[] evenNumbers = new int[4];\n        int count = 0;\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                evenNumbers[count] = i;\n                count++;\n                if (count == 4) {\n                    break;\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += evenNumbers[i];\n        }\n        return sum == n;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result = result * i;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/140", "generation": "\n        // replace all spaces with underscores\n        text = text.replace(\" \", \"_\");\n        // split the string into array of strings\n        String[] words = text.split(\"_\");\n        // filter out empty strings\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                filteredWords.add(word);\n            }\n        }\n        // join the words back into a string\n        StringBuilder sb = new StringBuilder();\n        for (String word : filteredWords) {\n            sb.append(word);\n        }\n        // replace all consecutive spaces with -\n        while (sb.indexOf(\"  \") != -1) {\n            sb.delete(sb.indexOf(\"  \"), sb.indexOf(\"  \") + 1);\n            sb.insert(sb.indexOf(\"  \"), \"-\");\n        }\n        return sb.toString();\n    }\n} \n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it underscores, \n    and if a string has more than 2 consecutive spaces \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1 \"Example_1\"\n    fix_spaces Example \"\" Example   3\") \"_Example-3\n     */\n    public String fixSpaces(String text) {\n        // replace all spaces with underscores\n        text = text.replace(\" \", \"_\");\n        // split the string into array of strings\n        String[] words = text.split(\"_\");\n        // filter out empty strings\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                filteredWords.add(word);\n            }\n        }\n        // join the words back into a string\n        StringBuilder sb = new StringBuilder();\n        for (String word : filteredWords) {\n            sb.append(word);\n        }\n        // replace all consecutive spaces with -\n        while (sb.indexOf(\"  \") != -1) {\n            sb.delete(sb.indexOf(\"  \"), sb.indexOf(\"  \") + 1);\n            sb.insert(sb.indexOf(\"  \"), \"-\");\n        }\n        return sb.toString();\n    }\n} \n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it underscores, \n    and if a string has more than 2 consecutive spaces \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1 \"Example_1\"\n    fix_spaces Example \"\" Example   3\") \"_Example-3\n    \n}"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name contains more than three digits\n        if (file_name.matches(\".*\\\\d{4,}.*\")) {\n            return \"No\";\n        }\n        // Check if the file name contains exactly one dot\n        if (file_name.matches(\".*\\\\.{2,}.*\")) {\n            return \"No\";\n        }\n        // Check if the substring before the dot is not empty and starts with a letter\n        if (!file_name.substring(0, file_name.indexOf('.')).matches(\"^[a-zA-Z].*\")) {\n            return \"No\";\n        }\n        // Check if the substring after the dot is one of the allowed extensions\n        if (!file_name.substring(file_name.indexOf('.') + 1).matches(\"^(txt|exe|dll)$\")) {\n            return \"No\";\n        }\n        // If all conditions are met, return 'Yes'\n        return \"Yes\";\n    }\n} \n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += Math.pow(lst.get(i), 3);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n} \n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Split the input strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Convert the numerators and denominators to integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of the two fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Find the greatest common divisor of the product's numerator and denominator\n        int gcd = findGCD(productNumerator, productDenominator);\n\n        // Simplify the product by dividing both the numerator and denominator by the GCD\n        int simplifiedNumerator = productNumerator / gcd;\n        int simplifiedDenominator = productDenominator / gcd;\n\n        // Check if the simplified fraction is a whole number\n        return simplifiedNumerator == simplifiedDenominator;\n    }\n\n    // Helper function to find the greatest common divisor of two numbers\n    public int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return findGCD(b, a % b);\n        }\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        // Create a list of pairs, where each pair contains a number and its sum of digits\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            pairs.add(new Pair(i, sum));\n        }\n\n        // Sort the list of pairs based on the sum of digits and the index\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.sum != p2.sum) {\n                    return p1.sum - p2.sum;\n                } else {\n                    return p1.index - p2.index;\n                }\n            }\n        });\n\n        // Create a new list with the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(nums.get(pair.index));\n        }\n\n        return sortedNums;\n    }\n\n    private static class Pair {\n        int index;\n        int sum;\n\n        public Pair(int index, int sum) {\n            this.index = index;\n            this.sum = sum;\n        }\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int num) {\n        String numStr = String.valueOf(num);\n        return numStr.charAt(0) == '1' || numStr.charAt(0) == '3' || numStr.charAt(0) == '5' || numStr.charAt(0) == '7' || numStr.charAt(0) == '9';\n    }\n} \n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i;\n            if (a[i - 1] % 3 == 0 && i < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        // First, we filter the list to get only the strings with odd lengths\n        List<String> oddLengths = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 != 0) {\n                oddLengths.add(s);\n            }\n        }\n        // Then, we sort the list based on the length of the strings\n        Collections.sort(oddLengths, Comparator.comparingInt(String::length));\n        return oddLengths;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        // Check if n is a prime number\n        if (isPrime(n)) {\n            // If n is prime, return x\n            return x;\n        } else {\n            // If n is not prime, return y\n            return y;\n        }\n    }\n\n    // Function to check if a number is prime\n    public boolean isPrime(int num) {\n        // Check if the number is less than 2\n        if (num < 2) {\n            return false;\n        }\n        // Check if the number is 2\n        if (num == 2) {\n            return true;\n        }\n        // Check if the number is even\n        if (num % 2 == 0) {\n            return false;\n        }\n        // Check for factors from 3 to the square root of the number\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        // If no factors are found, the number is prime\n        return true;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/153", "generation": "\n        int max_strength = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.substring(i).contains(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        // Define the roman numerals and their integer values\n        Map<Integer, String> romanNumerals = new HashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        // Initialize the result string\n        StringBuilder result = new StringBuilder();\n\n        // Iterate over the roman numerals in descending order of their values\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            // Calculate the number of times the current roman numeral can fit into the number\n            int count = number / entry.getKey();\n            // Subtract the value of the current roman numeral times the count from the number\n            number -= count * entry.getKey();\n            // Append the current roman numeral times the count to the result string\n            for (int i = 0; i < count; i++) {\n                result.append(entry.getValue());\n            }\n        }\n\n        // Return the result string\n        return result.toString();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // First, we sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        // Then, we check if the square of the longest side is equal to the sum of the squares of the other two sides\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}  // Time complexity: O(n) where n is the number of sides\n// Space complexity: O(n) where n is the number of sides\n"}
{"task_id": "Java/158", "generation": "\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > maxCount) {\n                maxCount = set.size();\n                max = word;\n            } else if (set.size() == maxCount && word.compareTo(max) < 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + need;\n        int left = remaining - need;\n        if (left < 0) {\n            left = 0;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(total);\n        result.add(left);\n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int n = operand.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = operand.get(i);\n        }\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num1 = nums[i];\n            int num2 = nums[i + 1];\n            if (op.equals(\"+\")) {\n                nums[i] = num1 + num2;\n                nums.remove(i + 1);\n                nums.remove(i);\n                i--;\n                n--;\n            } else if (op.equals(\"-\")) {\n                nums[i] = num1 - num2;\n                nums.remove(i + 1);\n                nums.remove(i);\n                i--;\n                n--;\n            } else if (op.equals(\"*\")) {\n                nums[i] = num1 * num2;\n                nums.remove(i + 1);\n                nums.remove(i);\n                i--;\n                n--;\n            } else if (op.equals(\"//\")) {\n                nums[i] = num1 / num2;\n                nums.remove(i + 1);\n                nums.remove(i);\n                i--;\n                n--;\n            }\n        }\n        return nums[0];\n    }\n}  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n is the number of elements in the operand list.  // time complexity O(n) space complexity O(n) where n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}  // time complexity O(n) where n is the length of the string, space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as we are using a StringBuilder to store the result.  // space complexity O(n) as"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n} \n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
