{"task_id": "Java/0", "generation": "\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int open = 0;\n        StringBuilder current = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                open++;\n                current.append(c);\n            } else if (c == ')') {\n                open--;\n                current.append(c);\n                if (open == 0) {\n                    result.add(current.toString());\n                    current = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        double mean = mean(numbers);\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n\n    \n}"}
{"task_id": "Java/5", "generation": "\n        if (numbers.isEmpty()) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n\n        for (int i = 1; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<>();\n        int level = 0;\n        int maxLevel = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                if (level > maxLevel) {\n                    maxLevel = level;\n                }\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            }\n            if (paren_string.charAt(i) == '(' && i + 1 < paren_string.length() && paren_string.charAt(i + 1) == '(') {\n                start = i + 2;\n            } else if (paren_string.charAt(i) == ')' && i + 1 < paren_string.length() && paren_string.charAt(i + 1) == ')') {\n                levels.add(maxLevel - level + 1);\n                i = start;\n            }\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for(int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        String reverse = new StringBuilder(string).reverse().toString();\n        for (int i = string.length(); i >= 0; i--) {\n            if (isPalindrome(string.substring(0, i))) {\n                return string + reverse.substring(i);\n            }\n        }\n        return string + reverse;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n\n        for (String string : strings) {\n            if (string.length() > longestString.length()) {\n                longestString = string;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i <= n; i++) {\n            sb.append(i);\n            if(i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            String sub = string.substring(i, i + substring.length());\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        Collections.sort(numbers);\n\n        double minDifference = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (difference == minDifference) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) / range);\n        }\n\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n    \n}"}
{"task_id": "Java/26", "generation": "\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .flatMapToInt(Arrays::stream)\n                .filter(i -> i > 0)\n                .boxed()\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List must have an even number of coefficients\");\n        }\n        double maxCoeff = Collections.max(xs);\n        if (maxCoeff <= 0) {\n            throw new IllegalArgumentException(\"Largest coefficient must be greater than zero\");\n        }\n        double l = -1000000000;\n        double r = 1000000000;\n        while (r - l > 1e-6) {\n            double mid = (l + r) / 2;\n            if (poly(xs, mid) > 0) {\n                l = mid;\n            } else {\n                r = mid;\n            }\n        }\n        return (l + r) / 2;\n    }\n}\n\n// Test cases\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                Collections.sort(l.subList(i, i + 3));\n                result.addAll(l.subList(i, i + 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 1; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n        int j = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            l.set(i, evenIndices.get(j++));\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycling in each group.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int fib1 = 0, fib2 = 1, fib3 = 1;\n        while (count < n) {\n            fib3 = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib3;\n            if (isPrime(fib3)) {\n                count++;\n            }\n        }\n        return fib3;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                int complement = -(l.get(i) + l.get(j));\n                if (s.contains(complement)) {\n                    return true;\n                }\n                s.add(l.get(i));\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        if (n <= 0) {\n            return 0;\n        }\n        return n - 1;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .flatMapToInt(i -> IntStream.of(i))\n                .map(i -> i + 1)\n                .boxed()\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            } else {\n                set.add(i);\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        return Integer.toString(x, base);\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n    \n    \n}"}
{"task_id": "Java/46", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 2;\n        if(n == 2) return 0;\n        if(n == 3) return 4;\n\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 2;\n        fib[2] = 0;\n        fib[3] = 4;\n\n        for(int i = 4; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        return (int) (Math.pow(2, n) % p);\n    }\n\n    \n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!set.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1)\n            return n;\n\n        int fib = 1;\n        int prevFib = 1;\n\n        for (int i = 2; i < n; i++) {\n            int temp = fib;\n            fib += prevFib;\n            prevFib = temp;\n        }\n\n        return fib;\n    }\n\n    \n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push('<');\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int max = -1;\n        while (n % 2 == 0) {\n            max = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n = n / i;\n            }\n        }\n        if (n > 2)\n            max = n;\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 1;\n            int d = 1;\n            for (int i = 3; i <= n; i++) {\n                int e = a + b + c;\n                a = b;\n                b = c;\n                c = e;\n                d = d + e;\n            }\n            return d;\n        }\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiouyAEIOUY\";\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int n = str.length();\n        if (shift >= n) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(n - shift) + str.substring(0, n - shift);\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = 0, oranges = 0;\n        for (String part : parts) {\n            if (part.contains(\"apples\")) {\n                apples = Integer.parseInt(part.replaceAll(\"[^0-9]\", \"\"));\n            } else if (part.contains(\"oranges\")) {\n                oranges = Integer.parseInt(part.replaceAll(\"[^0-9]\", \"\"));\n            }\n        }\n        return n - (apples + oranges);\n    }\n\n    \n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) != 0) {\n                if (arr.get(i) < smallestEven) {\n                    smallestEven = arr.get(i);\n                    smallestIndex = i;\n                } else if (arr.get(i) == smallestEven) {\n                    smallestIndex = Math.min(smallestIndex, i);\n                }\n            }\n        }\n        if (smallestEven != Integer.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        int max = -1;\n        for (int num : freq.keySet()) {\n            if (freq.get(num) > freq.get(max)) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        Collections.sort(lst);\n        while (lst.size() > 0) {\n            result.add(lst.remove(0));\n            if (lst.size() > 0) {\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        // Write your code here\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i: q) {\n            sum += i;\n        }\n        if(sum > w) {\n            return false;\n        }\n        int max = Collections.max(q);\n        int min = Collections.min(q);\n        if(sum - max - min > w) {\n            return false;\n        }\n        String str = Arrays.toString(q.toArray()).replaceAll(\"[\\\\[\\\\], ]\", \"\");\n        String reverse = new StringBuilder(str).reverse().toString();\n        return str.equals(reverse);\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n\n        int sum2 = 0;\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i * i <= a; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        while (x % n == 0) {\n            x = x / n;\n        }\n        return x == 1;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.round(Math.pow(a, (1.0 / 3)));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        // Your code here\n        int count = 0;\n        String hexDigits = \"0123456789ABCDEF\";\n        for(int i = 0; i < num.length(); i++) {\n            if(hexDigits.indexOf(num.charAt(i)) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"db\");\n        sb.append(binary);\n        sb.append(\"db\");\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() % 3 != 0) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"B\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"1.7\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if(n == 1) return 10;\n        if(n == 2) return 90;\n        int res = 90;\n        for(int i = 3; i <= n; i++) {\n            res += (9 * (int)Math.pow(10, i - 1)) * (i == 10 ? 1 : 10);\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while(N > 0){\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j, x));\n                }\n            }\n        }\n        result.sort(Comparator.comparing((List<Integer> o) -> o.get(0)));\n        for (int i = 0; i < result.size(); i++) {\n            result.get(i).sort(Comparator.comparing((List<Integer> o) -> o.get(1)).reversed());\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/88", "generation": "\n        // your code here\n        Collections.sort(array);\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++){\n            sum += array.get(i);\n        }\n        if(sum % 2 != 0){\n            Collections.reverse(array);\n        }\n        return array;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encrypted.append((char) (((c - 'A') + 2 * 2) % 26 + 'A'));\n                } else {\n                    encrypted.append((char) (((c - 'a') + 2 * 2) % 26 + 'a'));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int first = lst.get(0);\n        int second = lst.get(1);\n\n        if (first > second) {\n            return Optional.of(second);\n        }\n\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                return Optional.of(lst.get(i));\n            }\n            if (lst.get(i) < second) {\n                second = lst.get(i);\n            }\n        }\n\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().length() == 0) continue;\n            String[] words = sentence.split(\" \");\n            for (String word : words) {\n                if (word.length() > 4) {\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        } else {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                        c = (char)(c - 32);\n                    } else {\n                        c = (char)(c + 32);\n                    }\n                } else {\n                    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                        c = (char)(c - 32);\n                    } else {\n                        c = (char)(c + 32);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n        return encodedMessage.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if(dict.isEmpty()){\n            return false;\n        }\n        boolean isLower = true;\n        boolean isUpper = true;\n        for(String key: dict.keySet()){\n            if(!key.equals(key.toLowerCase()) || !key.equals(key.toUpperCase())){\n                isLower = false;\n            }\n            if(!(key.equals(key.toLowerCase()) || key.equals(key.toUpperCase()))){\n                isUpper = false;\n            }\n            if(!isLower && !isUpper){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = a * b;\n        int productDigits = product % 100 / 10;\n        return productDigits;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        double num = Double.parseDouble(value);\n        if (num > 0) {\n            count = (int) num + 1;\n        } else if (num < 0) {\n            count = (int) num - 1;\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                result.add(n + 2 * i);\n            } else {\n                result.add(n + 2 * i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<String>();\n        String[] splitWords = s.split(\"\\\\s*[,]\\\\s*\");\n        for (String word : splitWords) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        // Your code here\n        int maxEven = -1;\n        for(int i = y; i >= x; i--) {\n            if(i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        return maxEven;\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return Integer.toBinaryString(avg);\n    }\n\n    \n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int num : x) {\n            if(hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while(num > 0) {\n            if((num % 10) % 2 == 0) {\n                return true;\n            }\n            num = num / 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> sorted = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                sorted.add(num);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        for (int num : sorted) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            if(isPalindrome(i)){\n                if(i % 2 == 0)\n                    result.add(i);\n                else\n                    result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public boolean isPalindrome(int n) {\n        int reverse = 0;\n        int original = n;\n        while(n > 0) {\n            int digit = n % 10;\n            reverse = reverse * 10 + digit;\n            n /= 10;\n        }\n        return original == reverse;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if(arr.isEmpty())\n            return true;\n        \n        for(int i=0; i<arr.size(); i++){\n            if(i+1<arr.size() && arr.get(i) > arr.get(i+1)){\n                int j=i+1;\n                while(j<arr.size() && arr.get(j)<arr.get(i)){\n                    j++;\n                }\n                if(j==arr.size()){\n                    return true;\n                }\n                if(j<arr.size() && arr.get(j) > arr.get(i+1)){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        if (count % 2 != 0) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for (char ch : c.toCharArray()) {\n            sb.delete(sb.indexOf(String.valueOf(ch)), sb.length());\n        }\n        String res = sb.toString();\n        result.add(res);\n        result.add(isPalindrome(res));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                int digit = Character.getNumericValue(c);\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            String res = \"the number \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(res);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            minSum = Math.min(minSum, curSum);\n            curSum = Math.min(curSum, 0);\n        }\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int count = 0;\n        for(List<Integer> row : grid) {\n            for(int i : row) {\n                if(i == 1) {\n                    count++;\n                }\n            }\n        }\n        return count/capacity;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        // Your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA != countB) {\n                    return countA - countB;\n                } else {\n                    return a - b;\n                }\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if(s.isEmpty())\n            return result;\n        String[] words = s.split(\"\\\\s+\");\n        for(String word : words) {\n            int count = 0;\n            for(char c : word.toCharArray()) {\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    count++;\n                }\n            }\n            if(count == n)\n                result.add(word);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder(word);\n        for (int i = sb.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(sb.charAt(i)) > vowels.indexOf(sb.charAt(i - 1)) && Character.isLetter(sb.charAt(i - 1))) {\n                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(sb.charAt(j)) > vowels.indexOf(sb.charAt(i))) {\n                        return String.valueOf(sb.charAt(j));\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == '('){\n                count++;\n            }\n            else if(s.charAt(i) == ')'){\n                count--;\n            }\n            if(count < 0){\n                return \"No\";\n            }\n        }\n        if(count == 0){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        List<Integer> res = new ArrayList<>();\n\n        for(int num : arr) {\n            maxHeap.add(num);\n            if(maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n\n        while(!maxHeap.isEmpty()) {\n            res.add(maxHeap.poll());\n        }\n\n        Collections.reverse(res);\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12 || day < 1 || year < 1) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day > 31) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if (txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            return getOddLowerCaseLetters(txt);\n        }\n    }\n\n    private List<String> getOddLowerCaseLetters(String txt) {\n        List<String> result = new ArrayList<>();\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && ((int) c - 'a') % 2 != 0) {\n                result.add(Character.toString(c));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) == lst.get(i + 1)) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            } else if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start + 1;\n        if (length < 2) {\n            return \"NO\";\n        }\n\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        for (int num : arr) {\n            product *= num;\n        }\n\n        return Optional.of(Math.abs(product));\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int N = grid.size();\n        int[][] dp = new int[N][N];\n        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> dp[a[0]][a[1]] - dp[b[0]][b[1]]);\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                if (i == 0 && j == 0) dp[i][j] = grid[i][j];\n                else {\n                    for (int[] d : dir) {\n                        int ni = i + d[0], nj = j + d[1];\n                        if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                            dp[i][j] = Math.min(dp[i][j], dp[ni][nj] + grid[i][j]);\n                        }\n                    }\n                }\n                if (i == N - 1 && j == N - 1) pq.offer(new int[]{i, j});\n            }\n        }\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            for (int[] d : dir) {\n                int ni = cur[0] + d[0], nj = cur[1] + d[1];\n                if (ni >= 0 && ni < N && nj >= 0 && nj < N && dp[ni][nj] > dp[cur[0]][cur[1]] + grid[ni][nj]) {\n                    dp[ni][nj] = dp[cur[0]][cur[1]] + grid[ni][nj];\n                    pq.offer(new int[]{ni, nj});\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a non-negative integer\");\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(0);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(0);\n            result.add(3);\n            result.add(2);\n            result.add(8);\n            return result;\n        }\n        result.add(0);\n        result.add(3);\n        result.add(2);\n        result.add(8);\n        for (int i = 4; i <= n; i++) {\n            int nextNumber;\n            if (i % 2 == 0) {\n                nextNumber = result.get(i - 1) + result.get(i / 2);\n            } else {\n                nextNumber = result.get(i - 1) - result.get(i - 2) + result.get(i / 2);\n            }\n            result.add(nextNumber);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for(Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetter(txt.charAt(txt.length() - 2));\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        if(n < 2) return -1;\n        int max = arr.get(n-1);\n        for(int i=n-2; i>=0; i--){\n            if(arr.get(i) > max){\n                max = arr.get(i);\n            }\n            else{\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for(int i: lst){\n            if(i < 0){\n                if(largestNegative.isEmpty() || i > largestNegative.get()){\n                    largestNegative = Optional.of(i);\n                }\n            }else if(i > 0){\n                if(smallestPositive.isEmpty() || i < smallestPositive.get()){\n                    smallestPositive = Optional.of(i);\n                }\n            }\n        }\n\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String) {\n            try {\n                double num1 = Double.parseDouble((String) a);\n                if (b instanceof String) {\n                    double num2 = Double.parseDouble((String) b);\n                    return num1 > num2 ? Optional.of(num1) : Optional.of(num2);\n                } else if (b instanceof Double) {\n                    return num1 > (Double) b ? Optional.of(num1) : Optional.empty();\n                } else {\n                    return Optional.empty();\n                }\n            } catch (NumberFormatException e) {\n                return Optional.empty();\n            }\n        } else if (a instanceof Double) {\n            if (b instanceof String) {\n                try {\n                    double num2 = Double.parseDouble((String) b);\n                    return (Double) a > num2 ? Optional.of((Double) a) : Optional.empty();\n                } catch (NumberFormatException e) {\n                    return Optional.empty();\n                }\n            } else if (b instanceof Double) {\n                return (Double) a > b ? Optional.of((Double) a) : Optional.empty();\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= n; i += 2) {\n            if (n - i == 0) {\n                count++;\n            }\n        }\n        return count >= 4;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for(int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        if(n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                if (c == text.charAt(text.length() - 1)) {\n                    sb.append('-');\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        String[] splitName = file_name.split(\"\\\\.\");\n        if (splitName.length != 2) {\n            return \"No\";\n        }\n        String name = splitName[0];\n        if (name.length() > 3 || !Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        for (int i = 1; i < name.length(); i++) {\n            if (!Character.isLetter(name.charAt(i)) && !Character.isDigit(name.charAt(i))) {\n                return \"No\";\n            }\n        }\n        for (String ext : validExtensions) {\n            if (ext.equals(splitName[1])) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        // Your code here\n        if(x.equals(\"False\") || n.equals(\"False\")){\n            return false;\n        }\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int xNum = Integer.parseInt(xArr[0]);\n        int xDen = Integer.parseInt(xArr[1]);\n        int nNum = Integer.parseInt(nArr[0]);\n        int nDen = Integer.parseInt(nArr[1]);\n\n        int gcd = gcd(xDen, nDen);\n\n        int newXNum = xNum * (nNum / gcd);\n        int newXDen = xDen / gcd;\n        int newNNum = nNum * (xDen / gcd);\n        int newNDen = nDen / gcd;\n\n        if(newXNum == newNNum && newXDen == newNDen){\n            return true;\n        }\n        return false;\n    }\n\n    public int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num = nums.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (!map.containsKey(sum)) {\n                map.put(sum, new ArrayList<>());\n            }\n            map.get(sum).add(i);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            result.addAll(entry.getValue());\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num + \"\").charAt(0) % 2 == 1) {\n                String str = num + \"\";\n                for (int i = 1; i < str.length(); i++) {\n                    if (str.charAt(i) % 2 == 1) {\n                        count++;\n                        break;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + i;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (a[i] % 3 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = -1, index2 = -1;\n        \n        for(int i = 0; i < planets.length; i++) {\n            if(planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if(planets[i].equals(planet2)) {\n                index2 = i;\n            }\n            if(index1 != -1 && index2 != -1) {\n                break;\n            }\n        }\n        \n        if(index1 == -1 || index2 == -1) {\n            return result;\n        }\n        \n        if(index1 > index2) {\n            index1 = index1 - index2;\n            index2 = 0;\n        } else {\n            index2 = index2 - index1;\n            index1 = 0;\n        }\n        \n        for(int i = index1; i <= index2; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 != 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for(Object o : lst) {\n            if(o instanceof List) {\n                sum += doubleTheDifference((List<Object>)o);\n            } else if(o instanceof Integer) {\n                int num = (Integer)o;\n                if(num < 0 || num % 2 == 0) {\n                    continue;\n                }\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = -1;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            int strength = getStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int getStrength(String extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) cap++;\n            else if (Character.isLowerCase(c)) sm++;\n        }\n        return cap - sm;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length())\n            return false;\n\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b.substring(i) + b.substring(0, i)))\n                return true;\n        }\n\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n            return true;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        int maxUnique = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            } else if (uniqueChars.size() == maxUnique) {\n                maxWord = maxWord.compareTo(word) < 0 ? maxWord : word;\n            }\n        }\n        return maxWord;\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(remaining >= need) {\n            number += need;\n            remaining -= need;\n        } else {\n            number += remaining;\n            remaining = 0;\n        }\n        result.add(number);\n        result.add(remaining);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (operator.get(i-1).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i-1).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i-1).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i-1).equals(\"**\")) {\n                result = (int) Math.floor(result / operand.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() == 0) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if(text.isEmpty()){\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = a; i <= b; i++) {\n            if(i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
