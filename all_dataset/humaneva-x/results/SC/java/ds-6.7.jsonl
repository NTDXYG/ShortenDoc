{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Deque<Character> stack = new ArrayDeque<>();\n        StringBuilder sb = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n                sb.append(c);\n            } else if (c == ')') {\n                stack.pop();\n                sb.append(c);\n                if (stack.isEmpty()) {\n                    result.add(sb.toString());\n                    sb.setLength(0);\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        double mean = numbers.stream().mapToDouble(val -> val).average().orElse(0.0);\n        for(double num: numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n        result.add(maxDepth);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        if (isPalindrome(string)) {\n            return string;\n        }\n        StringBuilder result = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            result.append(string.charAt(i));\n            if (isPalindrome(string.substring(0, i))) {\n                return result.toString() + string;\n            }\n        }\n        return result.toString() + string;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        return strings.stream()\n                .max(Comparator.comparing(String::length));\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        return distinctCharacters.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (true) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count ++;\n                index += substring.length();\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[] words = numbers.split(\" \");\n        Arrays.sort(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Arrays.asList(nums).indexOf(o1) - Arrays.asList(nums).indexOf(o2);\n            }\n        });\n        return String.join(\" \", words);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestNumbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestNumbers.clear();\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            }\n        }\n        return closestNumbers;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / range);\n        }\n        return rescaled;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    \n}"}
{"task_id": "Java/24", "generation": "\n        if (n < 1) {\n            return -1;\n        }\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Long> counts = numbers.stream()\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (counts.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        double left = -10000;\n        double right = 10000;\n        while (right - left > 1e-6) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) > 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                temp.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, temp.get(j++));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countDigit(i, 7);\n            }\n        }\n        return count;\n    }\n\n    public int countDigit(int number, int digit) {\n        int count = 0;\n        while (number > 0) {\n            if (number % 10 == digit) count++;\n            number = number / 10;\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n\n        Collections.sort(evenIndices);\n\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenIndices.add(evenIndices.get(j++));\n            } else {\n                sortedEvenIndices.add(l.get(i));\n            }\n        }\n\n        return sortedEvenIndices;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // un-cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int i = 1;\n        int j = 1;\n        int count = 0;\n        while (count < n) {\n            if (isPrime(i)) {\n                count++;\n                if (count == n) {\n                    return i;\n                }\n            }\n            int sum = i + j;\n            i = j;\n            j = sum;\n        }\n        return -1;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int complement = -(l.get(i) + l.get(j));\n                if (set.contains(complement)) {\n                    return true;\n                }\n            }\n            set.add(l.get(i));\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // write your code here\n        if(n < 2) return 0;\n        return n * (n - 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n\n// This solution uses a HashSet to store the elements of the list. For each element in the list, it checks if its negation\n// is already in the set. If it is, it means there are two distinct elements in the list that sum to zero, so it returns true.\n// If it goes through the entire list without finding such a pair, it returns false.\n\n// The time complexity of this solution is O(n), where n is the length of the list, because it goes through the list once.\n// The space complexity is also O(n), because in the worst case (when all elements are distinct), the set will store all\n// n elements of the list.\n\n// Note: The problem statement seems to have some formatting issues, so the actual input and output examples might not match\n// the provided code.\n\n// Also, the function name \"pairsSumToZero\" is not a standard Java naming convention. It might be better to use a name that\n// describes what the function does, like \"hasPairSumToZero\".\n\n// The function signature also seems to have some formatting issues. It should be something like this:\n// public boolean hasPairSumToZero(List<Integer> l) {\n//     ...\n// }\n// The input parameter should be named \"l\" to match the variable name in the function body.\n// The return type should be \"boolean\" to match the return type of the function body.\n// The function name should be \"hasPairSumToZero\" to match the function name in the function body.\n// The function signature should be \"public boolean hasPairSumToZero(List<Integer> l)\" to match the provided code.\n// The function body should be \"{ ... }\" to match the provided code.\n// The function should be enclosed in a class, like this:\n// public class Solution {\n//     public boolean hasPairSumToZero(List<Integer> l) {\n//         ...\n//     }\n// }\n// The class name \"Solution\" should match the class"}
{"task_id": "Java/44", "generation": "\n        return Integer.toString(x, base);\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 0;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 2;\n        fib[2] = 0;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2) + (double) l.get(size / 2 - 1)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n            }\n            n = n >> 1;\n            if (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            char c0 = s0.charAt(i);\n            char c1 = s1.charAt(i);\n            map0.put(c0, map0.getOrDefault(c0, 0) + 1);\n            map1.put(c1, map1.getOrDefault(c1, 0) + 1);\n        }\n        return map0.equals(map1);\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (!stack.isEmpty() && stack.peek() == '<') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing = false;\n        boolean decreasing = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                increasing = true;\n            } else if (l.get(i) > l.get(i + 1)) {\n                decreasing = true;\n            }\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        set1.retainAll(set2);\n\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int largest = -1;\n\n        // Divide n by 2 until n becomes odd\n        while (n % 2 == 0) {\n            largest = 2;\n            n >>= 1;\n        }\n\n        // n must be odd at this point, thus skip the even numbers and iterate only for odd\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n = n / i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number\n        // greater than 2\n        if (n > 2)\n            largest = n;\n\n        return largest;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String lowerCase = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            char c = lowerCase.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift >= len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(len - shift) + str.substring(0, len - shift);\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        return n - apples - oranges;\n    }\n\n    \n}"}
{"task_id": "Java/68", "generation": "\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min && arr.get(i) % 2 == 0) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if (index == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(min, index);\n        }\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > max && entry.getValue() > entry.getKey()) {\n                max = entry.getKey();\n            }\n        }\n        return max;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n    Examples:\n        lengthOfLongestSubstring(\"abcabcbb\") == 3\n        lengthOfLongestSubstring(\"bbbbb\") == 1\n        lengthOfLongestSubstring(\"pwwkew\") == 3\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, find the length of the longest substring without repeating characters.\n    Examples:\n        lengthOfLongestSubstring(\"abcabcbb\") == 3\n        lengthOfLongestSubstring(\"bbbbb\") == 1\n        lengthOfLongestSubstring(\"pwwkew\") == 3\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        Collections.sort(lst);\n        while (!lst.isEmpty()) {\n            result.add(lst.remove(0));\n            if (!lst.isEmpty()) {\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        // check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        return isPalindrome(q);\n    }\n\n    private boolean isPalindrome(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n        while (start < end) {\n            if (q.get(start) != q.get(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int n = arr.size();\n        int changes = 0;\n        for (int i = 0; i < (n + 1) / 2; ++i) {\n            if (arr.get(i) != arr.get(n - 1 - i)) {\n                changes++;\n            }\n        }\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0, sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        return sum1 < sum2 ? lst1 : lst2;\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            while (a % i == 0) {\n                a = a / i;\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int pow = 1;\n        while (pow < x) {\n            pow *= n;\n            if (pow == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        int x = (int) Math.round(Math.cbrt(a));\n        return a == x * x * x;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        String primeHex = \"2357BDF\";\n        for (int i = 0; i < num.length(); i++) {\n            if (primeHex.contains(String.valueOf(num.charAt(i)))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        StringBuilder binaryBuilder = new StringBuilder(\"db\");\n        for (char c : binary.toCharArray()) {\n            binaryBuilder.append(c == '0' ? '00' : '1');\n        }\n        binaryBuilder.append(\"db\");\n        return binaryBuilder.toString();\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if(s.length() != 3)\n            return false;\n        for(int i = 0; i < s.length(); i++){\n            if(i+2 < s.length() && s.charAt(i) == s.charAt(i+1) && s.charAt(i+1) == s.charAt(i+2))\n                return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"B\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"C\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n// This solution is based on the problem statement. It uses a for loop to iterate through the list of GPAs, and a series of if-else statements to determine the corresponding letter grade. The letter grades are then added to the list 'letterGrades' which is returned at the end.\n\n// The time complexity of this solution is O(n), where n is the number of elements in the input list. This is because the solution iterates through the list once. The space complexity is also O(n), as a new list is created to store the letter grades.\n\n// Please note that the problem statement is a bit ambiguous, as it doesn't specify what to do if a GPA is between two letter grades. In this solution, the lower of the two letter grades is chosen. If this is not the desired behavior, the solution can be adjusted accordingly.\n\n// Also, the input list should contain only valid GPAs (between 0 and 4). If the list contains invalid GPAs, the behavior of the solution is undefined.\n\n// This solution assumes that the input list is not null and contains at least one element. If this"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 1;\n        }\n        int[][] dp = new int[n + 1][2];\n        dp[1][0] = 1;\n        dp[1][1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i][0] = dp[i - 1][0] + dp[i - 1][1];\n            dp[i][1] = dp[i - 1][0];\n        }\n        return dp[n][0] + dp[n][1];\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        // write your code in Java SE 8\n        return Integer.toBinaryString(N);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            result.append(sortString(word)).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n\n    public String sortString(String inputString) {\n        // Convert input string to char array\n        char tempArray[] = inputString.toCharArray();\n\n        // Sort tempArray\n        Arrays.sort(tempArray);\n\n        // Return new sorted string\n        return new String(tempArray);\n    }\n\n    \n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> coordinates = new ArrayList<>();\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(i);\n                    coordinates.add(j);\n                }\n            }\n            if (!coordinates.isEmpty()) {\n                result.add(coordinates);\n            }\n        }\n        result.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1) - a.get(1);\n            } else {\n                return a.get(0) - b.get(0);\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0 || array.size() == 1) {\n            return array;\n        }\n        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    encrypted.append((char) ('a' + (c - 'a' + 2) % 26 * 2));\n                } else {\n                    encrypted.append((char) ('A' + (c - 'A' + 2) % 26 * 2));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n            }\n        }\n\n        if (secondSmallest == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n\n        return Optional.of(secondSmallest);\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, write a function that returns the largest product that can be obtained by multiplying any three integers.\n    You can assume that the list will always have at least three integers.\n    maxProduct([-5, -3, -4, 1, 2]) == 60\n    maxProduct([-5, -3, -4, 2, 2, 3]) == 60\n    maxProduct([5, 3, 4, 2, 2, 3]) == 120\n    maxProduct([-5, -3, -4, -2, -2, -3]) == -6\n    */\n    public int maxProduct(List<Integer> lst) {\n        Collections.sort(lst);\n        int n = lst.size();\n        return Math.max(lst.get(0) * lst.get(1) * lst.get(n - 1), lst.get(n - 3) * lst.get(n - 2) * lst.get(n - 1));\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, write a function that returns the largest sum of two numbers in the list.\n    You can assume that the list will always have at least two integers.\n    maxSum([1, 2, 3, 4]) == 7\n    max\n}"}
{"task_id": "Java/91", "generation": "\n        int count = 0;\n        String[] sentences = S.split(\"[.|?|!]\");\n        for (String sentence : sentences) {\n            if (!sentence.trim().isEmpty()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isAlphabetic(c)) {\n                if (Character.isLowerCase(c)) {\n                    encodedMessage.append(Character.toUpperCase(c));\n                } else {\n                    encodedMessage.append(Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return maxPrime != -1 ? sumOfDigits(maxPrime) : 0;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        int lower = 0;\n        int upper = 0;\n\n        for (String key : dict.keySet()) {\n            if (key.equals(key.toLowerCase())) {\n                lower++;\n            } else if (key.equals(key.toUpperCase())) {\n                upper++;\n            } else {\n                return false;\n            }\n        }\n\n        return lower == dict.size() || upper == dict.size();\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int aLastDigit = a % 10;\n        int bLastDigit = b % 10;\n        return aLastDigit * bLastDigit;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int current = n;\n        for (int i = 0; i < n; i++) {\n            result.add(current);\n            if (current % 2 == 0) {\n                current += 2;\n            } else {\n                current += 2;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[, ]\");\n        for (String word : split) {\n            if (!word.isEmpty()) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x % 2 == 0) {\n            return x;\n        } else if (y % 2 == 0) {\n            return y;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.ceil((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            if (hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(Integer num) {\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> sortedArr = new ArrayList<>();\n        Map<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                sortedArr.add(num);\n            }\n        }\n\n        Collections.sort(sortedArr, Collections.reverseOrder());\n\n        for (Integer num : sortedArr) {\n            if (num == 4) {\n                result.add(map.get(num / 2) + map.get(num / 2));\n            } else if (num == 5 || num == 6 || num == 7 || num == 9) {\n                result.add(map.get(num / 2) + map.get(num - num / 2));\n            } else {\n                result.add(map.get(num));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count++;\n            }\n        }\n        if (arr.get(arr.size() - 1) > arr.get(0)) {\n            count++;\n        }\n        return count <= 1;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int oddCount1 = 0;\n        int oddCount2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount2++;\n            }\n        }\n\n        if (oddCount1 % 2 == 0 && oddCount2 % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        Set<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        String result = sb.toString();\n        String reverseResult = sb.reverse().toString();\n        return Arrays.asList(reverseResult, result.equals(reverseResult));\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String replaced = s.replaceAll(\"\\\\d\", String.valueOf(count));\n            result.add(replaced);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            min = Math.min(min, sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        int total = 0;\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    pq.add(1);\n                    total++;\n                }\n            }\n        }\n        int count = 0;\n        while (!pq.isEmpty() && total > capacity) {\n            total -= capacity;\n            pq.poll();\n            count++;\n        }\n        return count;\n    }\n}\n\n// Time complexity: O(n*m*log(n*m))\n// Space complexity: O(n*m)\n\n// The time complexity is due to the fact that we are iterating over all the cells in the grid and adding them to the priority queue. \n// The space complexity is due to the fact that we are storing all the cells in the grid in the priority queue.\n\n// The problem is solved by using a priority queue to keep track of the water levels in the wells. \n// The priority queue is used to keep the water levels in descending order. \n// The function then empties the wells by using the buckets until the total water level is less than or equal to the bucket capacity. \n// The number of times the buckets are used is then returned.\n\n// The priority queue is used to keep track of the water levels in the wells. \n// The function then empties the wells by using the buckets until the total water level is less than or equal to the bucket capacity. \n// The number of times the buckets are used is then returned.\n\n// The time complexity of the function is O(n*m*log(n*m)) because we are iterating over all the cells in the grid and adding them to the priority queue. \n// The space complexity of the function is O(n*m) because we are storing all the cells in the grid in the priority queue.\n\n// The function is correct because it correctly calculates the number of times the buckets need to be used to empty the wells. \n// It does this by using a priority queue to keep track of the water levels in the wells and then emptying"}
{"task_id": "Java/116", "generation": "\n        // your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int c1 = Integer.bitCount(o1);\n                int c2 = Integer.bitCount(o2);\n\n                if (c1 != c2) {\n                    return c1 - c2;\n                } else {\n                    return o1 - o2;\n                }\n            }\n        });\n\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> words = Arrays.asList(s.split(\" \"));\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))) &&\n                    !vowels.contains(String.valueOf(word.charAt(i - 1))) &&\n                    !vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        int open1 = countOpen(s1);\n        int close1 = s1.length() - open1;\n        int open2 = countOpen(s2);\n        int close2 = s2.length() - open2;\n        if (close1 < open1) {\n            s1 = s1 + \")\".repeat(open1 - close1);\n        }\n        if (open2 > close2) {\n            s2 = \"(\".repeat(open2 - close2) + s2;\n        }\n        return \"Yes\".equals(isGood(s1 + s2)) ? \"Yes\" : \"No\";\n    }\n\n    private int countOpen(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private String isGood(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (stack.isEmpty()) {\n                return \"No\";\n            } else {\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring that contains at most two distinct characters.\n    Example:\n    longest_substring('eceba') -> 3\n    Explanation: The longest substring with at most two distinct characters is 'ece'.\n    */\n    public int longestSubstring(String s) {\n        if (s.length() == 0) {\n            return 0;\n        }\n        int left = 0, right = 0;\n        Map<Character, Integer> map = new HashMap<>();\n        int maxLength = 0;\n        while (right < s.length()) {\n            char"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < k; i++){\n            result.add(maxHeap.poll());\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n// Time complexity: O(n log n)\n// Space complexity: O(n)\n\n// The time complexity is O(n log n) because we are adding all the elements of the array to the priority queue and the time complexity of adding an element to a priority queue is O(log n). The space complexity is O(n) because we are storing all the elements of the array in the priority queue.\n\n// The solution is to use a priority queue to store the k maximum numbers in the array. We add all the elements of the array to the priority queue and then poll the k maximum numbers from the priority queue. The result is a list of the k maximum numbers in the array. We sort the result list to ensure that it is in ascending order.\n\n// The priority queue is a data structure that always keeps the maximum element at the top. We use a reverse order priority queue to keep the maximum element at the top. This way, we can easily poll the k maximum numbers from the priority queue.\n\n// The priority queue is implemented using a binary heap. The time complexity of adding an element to a binary heap is O(log n) and the time complexity of polling an element from a binary heap is O(log n). Therefore, the time complexity of adding all elements to the priority queue is O(n log n) and the time complexity of polling k elements from the priority queue is O(k log n).\n\n// The space complexity of the priority queue is O(n) because we are storing all the elements of the array in the priority queue. Therefore, the space complexity of the solution is O(n).\n\n// The solution is correct because it correctly finds the k maximum numbers in the array and returns them in a sorted list. The priority queue ensures that the maximum numbers are always at the top of the queue, and we poll the k maximum numbers from the queue to get the result. The time complexity and space complexity of the solution are"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++){\n            if(arr.get(i) < 10){\n                sum += arr.get(i);\n            } else if(arr.get(i) < 100){\n                sum += arr.get(i)/10 + arr.get(i)%10;\n            } else if(arr.get(i) < 1000){\n                sum += arr.get(i)/100 + (arr.get(i)%100)/10 + arr.get(i)%10;\n            } else {\n                sum += arr.get(i)/1000 + (arr.get(i)%1000)/100 + (arr.get(i)%100)/10 + arr.get(i)%10;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            while (num != 1) {\n                if (num % 2 != 0 && !result.contains(num)) {\n                    result.add(num);\n                }\n                num = num % 2 == 0 ? num / 2 : num * 3 + 1;\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int month = Integer.parseInt(date.substring(0, 2));\n        int day = Integer.parseInt(date.substring(3, 5));\n        int year = Integer.parseInt(date.substring(6));\n        if (month < 1 || month > 12 || day < 1 || year < 1) {\n            return false;\n        }\n        if (month == 2 && (day > 29 || day < 1)) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day > 30 || day < 1)) {\n            return false;\n        }\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day > 31 || day < 1)) {\n            return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n\n        int prev = lst.get(0);\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == prev) {\n                return false;\n            }\n            if (lst.get(i) < prev) {\n                increasing = false;\n            }\n            if (lst.get(i) > prev) {\n                decreasing = false;\n            }\n            prev = lst.get(i);\n        }\n\n        return increasing || decreasing;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the largest difference of any two integers in the list.\n    The list will contain at least two integers.\n    Example:\n    largest_difference([1, 2, 3, 4]) \ufffd\ufffd\ufffd 3\n    largest_difference([1, 5, 9, 10]) \ufffd\ufffd\ufffd 9\n    largest_difference([-10, -5, 0]) \ufffd\ufffd\ufffd 10\n    */\n    public int largestDifference(List<Integer> lst) {\n        int min = lst.get(0);\n        int maxDiff = 0;\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else {\n                maxDiff = Math.max(maxDiff, lst.get(i) - min);\n            }\n        }\n\n        return maxDiff;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the smallest difference between any two integers in the list.\n    The list will contain at least two integers.\n    Example:\n    smallest_difference([1, 2, 3, 4]) \ufffd\ufffd\ufffd 1\n    smallest_difference([1\n}"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start;\n        if (length < 2) {\n            return \"NO\";\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                sum += -num;\n            } else if (num > 0) {\n                sum += num;\n            }\n        }\n\n        return Optional.of(sum);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0) {\n            return result;\n        }\n\n        int n = grid.size();\n        int[][] directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> a[2] == b[2] ? a[0] == b[0] ? a[1] - b[1] : a[0] - b[0] : a[2] - b[2]);\n        boolean[][] visited = new boolean[n][n];\n\n        heap.offer(new int[]{0, 0, grid.get(0).get(0)});\n        while (!heap.isEmpty()) {\n            int[] cur = heap.poll();\n            if (cur[2] == k) {\n                result.add(cur[2]);\n                return result;\n            }\n\n            for (int[] dir : directions) {\n                int x = cur[0] + dir[0];\n                int y = cur[1] + dir[1];\n                if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {\n                    visited[x][y] = true;\n                    heap.offer(new int[]{x, y, grid.get(x).get(y)});\n                }\n            }\n        }\n\n        return result;\n    }\n}import java.util.*;\n\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length == 0) {\n            return new int[0][];\n        }\n\n        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n\n        List<int[]> result = new ArrayList<>();\n        int[] newInterval = intervals[0];\n        result.add(newInterval);\n\n        for (int[] interval : intervals) {\n            if (interval[0] <= newInterval[1]) {\n                newInterval[1"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n >= 0) {\n            result.add(3);\n        }\n        if (n >= 1) {\n            result.add(2);\n        }\n        if (n >= 2) {\n            result.add(8);\n        }\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        // Your code here\n        if(txt.length() == 0) return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(!Character.isLetter(lastChar)) return false;\n        if(txt.length() == 1) return true;\n        char secondToLastChar = txt.charAt(txt.length() - 2);\n        return !Character.isLetter(secondToLastChar);\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        for(int i = n - 2; i >= 0; i--) {\n            if(arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n        for(Integer num : lst){\n            if(num < 0){\n                negatives.add(num);\n            } else if(num > 0){\n                positives.add(num);\n            }\n        }\n        if(negatives.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.of(Collections.max(positives)));\n        } else if(positives.isEmpty()){\n            return Arrays.asList(Optional.of(Collections.max(negatives)), Optional.empty());\n        } else {\n            return Arrays.asList(Optional.of(Collections.max(negatives)), Optional.of(Collections.min(positives)));\n        }\n    }\n}\n\n// This solution assumes that the input list contains only integers. If the input list can contain non-integer elements, you should add a check to handle this case.\n// The function uses Java's built-in Collections.max and Collections.min functions to find the maximum and minimum elements in the lists of negative and positive integers, respectively.\n// The function returns a list of Optional<Integer>, where each Optional contains the maximum or minimum integer if it exists, and is empty if it does not.\n// The function uses Java 8's Optional class to handle the case where there are no negative or positive integers in the list. In Java 8 and later, you can use Optional.empty() to create an empty Optional, and Optional.of(value) to create an Optional that contains a value. The function uses Optional.isPresent() to check if an Optional contains a value, and Optional.get() to get the value from an Optional.\n// The function uses Java 8's for-each loop to iterate over the input list. The function uses Java 8's Arrays.asList function to create a list from the Optional objects.\n// The function uses Java 8's List.isEmpty method to check if a list is empty. The function uses Java 8's List.add method to add elements to a list.\n// The function uses Java 8's List.addAll method to add all elements from one list to another.\n// The function uses Java 8"}
{"task_id": "Java/137", "generation": "\n        if (a.getClass() != b.getClass()) {\n            throw new IllegalArgumentException(\"Arguments must be of the same type\");\n        }\n\n        if (a instanceof Integer && b instanceof Integer) {\n            return (Integer) a > (Integer) b ? a : (Integer) a < (Integer) b ? b : null;\n        } else if (a instanceof Float && b instanceof Float) {\n            return (Float) a > (Float) b ? a : (Float) a < (Float) b ? b : null;\n        } else if (a instanceof String && b instanceof String) {\n            return Float.parseFloat((String) a) > Float.parseFloat((String) b) ? a : Float.parseFloat((String) a) < Float.parseFloat((String) b) ? b : null;\n        } else {\n            throw new IllegalArgumentException(\"Arguments must be of type Integer, Float or String\");\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0 || n < 8) {\n            return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                spaceCount++;\n                if (spaceCount == 1) {\n                    result.append('_');\n                } else if (spaceCount > 2) {\n                    result.append('-');\n                }\n            } else {\n                result.append(text.charAt(i));\n                spaceCount = 0;\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name contains more than one dot\n        long count = file_name.chars().filter(ch -> ch == '.').count();\n        if (count > 1) {\n            return \"No\";\n        }\n\n        // Check if the file name contains more than three digits\n        long digitCount = file_name.chars().filter(Character::isDigit).count();\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the file name starts with a letter\n        if (!Character.isLetter(file_name.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the file name ends with one of the following extensions: ['txt', 'exe', 'dll']\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        String extension = file_name.substring(file_name.lastIndexOf(\".\") + 1);\n        if (!Arrays.asList(validExtensions).contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int newNumerator = xNumerator * nNumerator;\n        int newDenominator = xDenominator * nDenominator;\n\n        if (newNumerator % newDenominator == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), sumOfDigits(nums.get(i)));\n        }\n        nums.sort(Comparator.comparing(map::get));\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (Math.abs(num) / 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> oddLengthWords = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 != 0) {\n                oddLengthWords.add(word);\n            }\n        }\n        Collections.sort(oddLengthWords);\n        return oddLengthWords;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && (int) lst.get(i) > 0 && (int) lst.get(i) % 2 != 0) {\n                sum += Math.pow((int) lst.get(i), 2);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        double maxStrength = 0;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            double strength = calculateStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private double calculateStrength(String extension) {\n        int upperCaseCount = 0;\n        int lowerCaseCount = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                upperCaseCount++;\n            } else if (Character.isLowerCase(c)) {\n                lowerCaseCount++;\n            }\n        }\n        return upperCaseCount - lowerCaseCount;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = b.charAt(b.length() - 1) + b.substring(0, b.length() - 1);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        List<Integer> counts = new ArrayList<>(Arrays.asList(0, 0));\n        String numStr = Integer.toString(Math.abs(num));\n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 == 0) {\n                counts.set(0, counts.get(0) + 1);\n            } else {\n                counts.set(1, counts.get(1) + 1);\n            }\n        }\n        return counts;\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder roman = new StringBuilder();\n        for (int i = 0; i < values.length && number >= 0; i++) {\n            while (values[i] <= number) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n        return roman.toString();\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return the length of the longest substring without repeating characters.\n    Restrictions: 0 <= s.length <= 50000\n\n    Examples\n    >>> length_of_longest_substring(\"abcabcbb\") == 3\n    >> length_of_longest_substring(\"bbbbb\") == 1\n    >> length_of_longest_substring(\"pwwkew\") == 3\n    */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, find the length of the longest substring without\n}"}
{"task_id": "Java/157", "generation": "\n        // write your code here\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUnique = 0;\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            } else if (uniqueChars.size() == maxUnique) {\n                maxWord = maxWord.compareTo(word) > 0 ? word : maxWord;\n            }\n        }\n        return maxWord;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n    Example 1:\n    Input: s = \"abcabcbb\"\n    Output: 3\n    Explanation: The answer is \"abc\", with the length of 3.\n    Example 2:\n    Input: s = \"bbbbb\"\n    Output: 1\n    Explanation: The answer is \"b\", with the length of 1.\n    Example 3:\n    Input: s = \"pwwkew\"\n    Output: 3\n    Explanation: The answer is \"wke\", with the length of 3.\n    Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n    */\n    public int lengthOfLongestSubstring(String s) {\n        if (s.length()==0) return 0;\n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        int max=0;\n        for (int i=0, j=0; i<s.length(); ++i){\n            if (map.containsKey(s.charAt(i))){\n                j = Math.max(j,map.get(s.charAt(i))+1);\n            }\n            map.put(s.charAt(i),i);\n            max = Math.max(max,i-j+1);\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (number + need <= remaining) {\n            result.add(number + need);\n            result.add(remaining - number - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            String op = operator.get(i - 1);\n            int num = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example:\n    s = \"abcabcbb\"\n    result = 3\n    Explanation: The longest substring without repeating characters is \"abc\", with a length of 3.\n\n    s = \"bbbbbb\"\n    result = 1\n    Explanation: The longest substring without repeating characters is \"b\", with a length of 1.\n\n    s = \"pwwkew\"\n    result = 3\n    Explanation: The longest substring without repeating characters is \"wke\", with a length of 3.\n    Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n    Note:\n    0 <= s.length <= 5 * 10^4\n    s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans"}
{"task_id": "Java/161", "generation": "\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        return new String(chars);\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
