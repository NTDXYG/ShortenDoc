{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> paren_groups = new ArrayList<>();\n        int open_brace_count = 0;\n        int start_index = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                open_brace_count++;\n            } else if (c == ')') {\n                open_brace_count--;\n            }\n            if (open_brace_count == 0) {\n                paren_groups.add(paren_string.substring(start_index, i + 1));\n                start_index = i + 1;\n            }\n        }\n        return paren_groups;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        return number - (int) number;\n    }\n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        double mean = 0.0;\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double deviation = 0.0;\n        for (Double number : numbers) {\n            deviation += Math.abs(number - mean);\n        }\n        return deviation / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max_depth = 0;\n        int current_depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n            } else if (c == ')') {\n                current_depth--;\n            }\n            if (c == ' ' || i == paren_string.length() - 1) {\n                result.add(max_depth);\n                max_depth = 0;\n                current_depth = 0;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (isPalindrome(string)) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                break;\n            }\n        }\n        return string + new StringBuilder(string.substring(0, i)).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        if (n == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        return distinctCharacters.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index, index + substring.length()).equals(substring)) {\n                count++;\n                index += substring.length();\n            } else {\n                index++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        String[] numberals = numbers.split(\" \");\n        Arrays.sort(numberals);\n        return String.join(\" \", numberals);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        if (numbers.size() != 2) {\n            throw new IllegalArgumentException(\"Input list must have exactly two elements.\");\n        }\n\n        // Sort the list in ascending order\n        Collections.sort(numbers);\n\n        // Return the sorted list\n        return numbers;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/21", "generation": "\n        // TODO: implement this method\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n        return rescaled;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n    \n    /**\n    Return the first character of given string\n    >>> firstChar('abc')\n    'a'\n    >>> firstChar('')\n    ''\n    */\n    public char firstChar(String string) {\n        return string.charAt(0);\n    }\n    \n    /**\n    Return the last character of given string\n    >>> lastChar('abc')\n    'c'\n    >>> lastChar('')\n    ''\n    */\n    public char lastChar(String string) {\n        return string.charAt(string.length() - 1);\n    }\n    \n    /**\n    Return the character at given index\n    >>> charAt('abc', 1)\n    'b'\n    >>> charAt('abc', 3)\n    ''\n    */\n    public char charAt(String string, int index) {\n        if (index >= string.length()) {\n            return ' ';\n        }\n        return string.charAt(index);\n    }\n    \n    /**\n    Return the substring from given index to the end of the string\n    >>> substring('abc', 1)\n    'bc'\n    >>> substring('abc', 3)\n    ''\n    */\n    public String substring(String string, int index) {\n        if (index >= string.length()) {\n            return \"\";\n        }\n        return string.substring(index);\n    }\n    \n    /**\n    Return the substring from given index to the given end index\n    >>> substring('abc', 1, 2)\n    'b'\n    >>> substring('abc', 1, 3)\n    'bc'\n    >>> substring('abc', 1, 4)\n    'bc'\n    */\n    public String substring(String string, int index, int endIndex) {\n        if (index >= string.length() || endIndex > string.length()) {\n            return \"\";\n        }\n        return string.substring(index, endIndex);\n    }\n    \n    /**\n    Return the substring from given index to the given end index\n    >>> substring('abc', 1, 2)\n    'b'\n    >>> substring('abc', 1, 3)\n    'bc'\n    >>> substring('abc', 1, 4)\n    'bc'\n    */\n    public String substring(String string, int index, int endIndex, boolean inclusive) {\n        if (index >= string.length() || endIndex > string.length()) {\n            return \"\";\n        }\n        if (inclusive) {\n            return string.substring(index, endIndex + 1);\n        }\n        return string.substring(index, endIndex);\n    }\n    \n    /**\n    Return the substring from given\n}"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (!set.contains(number)) {\n                set.add(number);\n                result.add(number);\n            }\n        }\n        return result;\n    }\n    \n    /**\n    Given a list of integers, return a new list where each element is the sum of the two previous elements. If there are less than two elements, return an empty list. >>> sum_previous([1, 2, 3, 4, 5])\n    [3, 5, 7, 9]\n     */\n    public List<Integer> sumPrevious(List<Integer> numbers) {\n        if (numbers.size() < 2) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < numbers.size(); i++) {\n            int sum = numbers.get(i - 1) + numbers.get(i - 2);\n            result.add(sum);\n        }\n        return result;\n    }\n    \n    /**\n    Given a list of integers, return a new list where each element is the product of the two previous elements. If there are less than two elements, return an empty list. >>> product_previous([1, 2, 3, 4, 5])\n    [2, 6, 12, 20]\n     */\n    public List<Integer> productPrevious(List<Integer> numbers) {\n        if (numbers.size() < 2) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < numbers.size(); i++) {\n            int product = numbers.get(i - 1) * numbers.get(i - 2);\n            result.add(product);\n        }\n        return result;\n    }\n    \n    /**\n    Given a list of integers, return a new list where each element is the sum of the two previous elements. If there are less than two elements, return an empty list. >>> sum_previous([1, 2, 3, 4, 5])\n    [3, 5, 7, 9]\n     */\n    public List<Integer> sumPrevious(List<Integer> numbers) {\n        if (numbers.size() < 2) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < numbers.size(); i++) {\n            int sum = numbers.get"}
{"task_id": "Java/27", "generation": "\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            } else {\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n    /**\n    Return only negative numbers in the list. >>> get_negative([-1 2, -4, 5, 6\n    [-1 -4]\n    >>> get_negative([5 3 -5 2, -3, 3, 9, 0, 123, 1 -105 3 2 3 9 123]\n     */\n    public List<Integer> getNegative(List<Integer> l) {\n        return l.stream().filter(i -> i < 0).collect(Collectors.toList());\n    }\n    /**\n    Return only even numbers in the list. >>> get_even([-1 2, -4, 5, 6\n    [2 4 6]\n    >>> get_even([5 3 -5 2, -3, 3, 9, 0, 123, 1 -105 3 2 3 9 123]\n     */\n    public List<Integer> getEven(List<Integer> l) {\n        return l.stream().filter(i -> i % 2 == 0).collect(Collectors.toList());\n    }\n    /**\n    Return only odd numbers in the list. >>> get_odd([-1 2, -4, 5, 6\n    [-1 5]\n    >>> get_odd([5 3 -5 2, -3, 3, 9, 0, 123, 1 -105 3 2 3 9 123]\n     */\n    public List<Integer> getOdd(List<Integer> l) {\n        return l.stream().filter(i -> i % 2 != 0).collect(Collectors.toList());\n    }\n    /**\n    Return only numbers that are divisible by 3 in the list. >>> get_divisible_by_3([-1 2, -4, 5, 6\n    []\n    >>> get_divisible_by_3([5 3 -5 2, -3, 3, 9, 0, 123, 1 -105 3 2 3 9 123]\n     */\n    public List<Integer> getDivisibleBy3(List<Integer> l) {\n        return l.stream().filter(i -> i % 3 == 0).collect(Collectors.toList());\n    }\n    /**\n    Return only numbers that are divisible by 5 in the list. >>> get_divisible_by_5([-1 \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n    Return the number of prime numbers in a given range >>> count_primes(10, 20)\n    4\n    >>> count_primes(1, 1)\n    0\n    >>> count_primes(1, 2)\n    0\n    >>> count_primes(2, 2)\n    1\n    >>> count_primes(2, 3)\n    1\n    >>> count_primes(2, 4)\n    2\n    >>> count_primes(2, 5)\n    2\n    >>> count_primes(2, 6)\n    3\n    >>> count_primes(2, 7)\n    3\n    >>> count_primes(2, 8)\n    4\n    >>> count_primes(2, 9)\n    4\n    >>> count_primes(2, 10)\n    4\n    >>> count_primes(2, 11)\n    5\n    >>> count_primes(2, 12)\n    5\n    >>> count_primes(2, 13)\n    6\n    >>> count_primes(2, 14)\n    6\n    >>> count_primes(2, 15)\n    6\n    >>> count_primes(2, 16)\n    6\n    >>> count_primes(2, 17)\n    7\n    >>> count_primes(2, 18)\n    7\n    >>> count_primes(2, 19)\n    8\n    >>> count_primes(2, 20)\n    8\n    >>> count_primes(2, 21)\n    8\n    >>> count_primes(2, 22)\n    8\n    >>> count_primes(2, 23)\n    9\n    >>> count_primes(2, 24)\n    9\n    >>> count_primes(2, 25)\n    9\n    >>> count_primes(2, 26)\n    9\n    >>> count_primes(2, 27)\n    9\n    >>> count_primes(2\n}"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        double step = 0.1;\n        double result = poly(xs, x);\n        while (result != 0) {\n            x += step;\n            result = poly(xs, x);\n        }\n        return x;\n    }\n    \n    \n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, l1.get(i / 3));\n            }\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        for (int i = 0; i < even.size(); i++) {\n            l.set(i * 2, even.get(i));\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int count = 0;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        // Sort the list\n        Collections.sort(l);\n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Set two pointers, one at the next element and one at the end of the list\n            int j = i + 1;\n            int k = l.size() - 1;\n            // While the two pointers haven't crossed\n            while (j < k) {\n                // If the sum of the three elements is zero, return true\n                if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                    return true;\n                }\n                // If the sum is less than zero, move the left pointer to the right\n                else if (l.get(i) + l.get(j) + l.get(k) < 0) {\n                    j++;\n                }\n                // If the sum is greater than zero, move the right pointer to the left\n                else {\n                    k--;\n                }\n            }\n        }\n        // If no three elements sum to zero, return false\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        return n;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 0;\n        } else {\n            int[] fib = new int[n + 1];\n            fib[0] = 0;\n            fib[1] = 2;\n            fib[2] = 0;\n            for (int i = 3; i <= n; i++) {\n                fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n            }\n            return fib[n];\n        }\n    }\n}The provided solution is a correct implementation of the Fib4 number sequence calculation. It uses an iterative approach to compute the n-th element of the sequence without recursion. The function `fib4` initializes an array `fib` of size `n + 1` to store the computed values of the sequence. It then iterates from 3 to `n`, calculating each element as the sum of the previous three elements in the sequence. Finally, it returns the n-th element of the sequence.\n\nHere's a brief explanation of the code:\n\n1. The function `fib4` takes an integer `n` as input.\n2. It handles the base cases for `n = 0`, `n = 1`, and `n = 2` by returning 0, 2, and 0 respectively.\n3. It initializes an array `fib` of size `n + 1` to store the computed values of the sequence.\n4. It sets the first three elements of the array: `fib[0] = 0`, `fib[1] = 2`, and `fib[2] = 0`.\n5. It then iterates from 3 to `n`, calculating each element as the sum of the previous three elements in the sequence: `fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]`.\n6. Finally, it returns the n-th element of the sequence, `fib[n]`.\n\nThe time complexity of this solution is O(n) because it iterates through the sequence once. The space complexity is also O(n) because it uses an array of size `n + 1` to store the computed values."}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return p;\n        }\n        int half = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half) % p;\n        } else {\n            return (half * half * p) % p;\n        }\n    }\n}\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!vowels.contains(String.valueOf(c))) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}"}
{"task_id": "Java/54", "generation": "\n        // Write your code here\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] arr0 = s0.toCharArray();\n        char[] arr1 = s1.toCharArray();\n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n        return Arrays.equals(arr0, arr1);\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j < i; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}"}
{"task_id": "Java/60", "generation": "\n        return (n * (n + 1)) / 2;\n    }\n    \n    /**\n    is_prime is a function that checks if a number is prime. >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(-1)\n    False\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    /**\n    is_palindrome is a function that checks if a string is a palindrome. >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"A man, a plan, a canal: Panama\")\n    True\n    >>> is_palindrome(\"Was it a car or a cat I saw?\")\n    True\n    >>> is_palindrome(\"No 'x' in Nixon\")\n    True\n     */\n    public boolean isPalindrome(String s) {\n        s = s.toLowerCase();\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {\n                left++;\n            }\n            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {\n                right--;\n            }\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n    \n    /**\n    is_anagram is a function that checks if two strings are anagrams. >>> is_anagram(\"listen\", \"silent\")\n    True\n    >>> is_anagram(\"hello\", \"world\")\n    False\n    >>> is_anagram(\"anagram\", \"nagaram\")\n    True\n    >>> is_anagram(\"apple\", \"papel\")\n    True\n    >>> is_anagram(\"abc\", \"def\")\n    False\n     */\n    public boolean isAnagram(String s1, String s2) {\n        if (s1.length() != s2.length()) {\n            return false;\n        }\n        char[] arr1 = s1.toCharArray();\n        char[] arr"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n        }\n        return fibfib[n];\n    }\n}The provided solution is a correct implementation of the FibFib number sequence calculation. It uses dynamic programming to build up the sequence from the base cases (fibfib(0) and fibfib(1)) and then iteratively calculates each subsequent value up to the n-th element.\n\nHere's a breakdown of the solution:\n\n1. **Base Cases**: The function first checks if `n` is 0 or 1, and returns 0 or 1, respectively, as these are the base cases of the FibFib sequence.\n\n2. **Initialization**: An array `fibfib` of size `n + 1` is created to store the values of the sequence up to the n-th element. The first two elements are initialized to 0 and 1, which are the first two numbers in the FibFib sequence.\n\n3. **Dynamic Programming Loop**: A for loop runs from 2 to `n`, calculating each subsequent FibFib number by summing the two preceding numbers in the sequence. This is done using the formula `fibfib[i] = fibfib[i - 1] + fibfib[i - 2]`.\n\n4. **Return Value**: After the loop completes, the function returns the n-th element of the FibFib sequence, which is stored in `fibfib[n]`.\n\nThis solution is efficient with a time complexity of O(n) and a space complexity of O(n), as it requires storing the entire sequence up to the n-th element. If space efficiency is a concern, an iterative approach without storing the entire sequence could be used, which would reduce the space complexity to O(1)."}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift > len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(shift) + str.substring(0, shift);\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        // Write your code here\n        String[] fruits = s.split(\" \");\n        int apples = 0;\n        int oranges = 0;\n        for (String fruit : fruits) {\n            if (fruit.contains(\"apples\")) {\n                apples = Integer.parseInt(fruit.replace(\"apples\", \"\"));\n            } else if (fruit.contains(\"oranges\")) {\n                oranges = Integer.parseInt(fruit.replace(\"oranges\", \"\"));\n            }\n        }\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < minEvenValue) {\n                minEvenValue = value;\n                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n        }\n        result.add(minEvenValue);\n        result.add(minEvenIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        // Write your code here\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n            } else {\n                map.put(lst.get(i), 1);\n            }\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > entry.getKey()) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst);\n        int left = 0;\n        int right = lst.size() - 1;\n        while (left <= right) {\n            result.add(lst.get(left));\n            if (left != right) {\n                result.add(lst.get(right));\n            }\n            left++;\n            right--;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/77", "generation": "\n        if (a == 0) {\n            return true;\n        }\n        if (a < 0) {\n            a = -a;\n        }\n        int i = 1;\n        while (i * i * i < a) {\n            i++;\n        }\n        return i * i * i == a;\n    }\n}"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() != 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int count = 0;\n        for (int i = 1; i < Math.pow(10, n - 1); i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars)).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinates = new ArrayList<>();\n                    coordinates.add(i);\n                    coordinates.add(j);\n                    result.add(coordinates);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) != o2.get(0)) {\n                    return o1.get(0) - o2.get(0);\n                } else {\n                    return o2.get(1) - o1.get(1);\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        // Write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        // Write your code here\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int index = alphabet.indexOf(c);\n            if (index == -1) {\n                encrypted += c;\n            } else {\n                int newIndex = (index + 4) % 26;\n                encrypted += alphabet.charAt(newIndex);\n            }\n        }\n        return encrypted;\n    }\n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Set<Integer> set = new HashSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        int min = Collections.min(set);\n        set.remove(min);\n        return Optional.of(Collections.min(set));\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n}The code is correct and it will return true if one of the numbers is equal to the sum of the other two numbers, and all numbers are integers. If any of the numbers are not integers, it will return false."}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encodedMessage.append(Character.toLowerCase(c));\n                } else {\n                    encodedMessage.append(Character.toUpperCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (max == 1) {\n            return 0;\n        }\n        if (max == 2) {\n            return 2;\n        }\n        if (max % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i <= Math.sqrt(max); i += 2) {\n            if (max % i == 0) {\n                return 0;\n            }\n        }\n        int sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String strKey = (String) key;\n                if (!strKey.equals(strKey.toLowerCase())) {\n                    isLowerCase = false;\n                }\n                if (!strKey.equals(strKey.toUpperCase())) {\n                    isUpperCase = false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLowerCase || isUpperCase;\n    }\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        return (a % 10) * (b % 10);\n    }\n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == '.') {\n                count = value.length() - i - 1;\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int closest_integer(String value) {\n        int count = countUpper(value);\n        int result = 0;\n        if (count == 0) {\n            result = Integer.parseInt(value);\n        } else {\n            double num = Double.parseDouble(value);\n            if (num > 0) {\n                if (num - (int) num >= 0.5) {\n                    result = (int) num + 1;\n                } else {\n                    result = (int) num;\n                }\n            } else {\n                if (num - (int) num <= -0.5) {\n                    result = (int) num - 1;\n                } else {\n                    result = (int) num;\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> pile = new ArrayList<>();\n        int stones = n;\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (n % 2 == 0) {\n                stones += 2;\n            } else {\n                stones += 2;\n            }\n        }\n        return pile;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[,\\\\s]+\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (y < x) {\n            return -1;\n        }\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        int avg = Math.round((float) sum / count);\n        return \"0b\" + Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        arr.sort(Comparator.naturalOrder());\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 1 || arr.get(i) > 9) {\n                continue;\n            }\n            result.add(getName(arr.get(i)));\n        }\n        return result;\n    }\n    \n    public String getName(int num) {\n        switch (num) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n            default:\n                return \"\";\n        }\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            boolean isNegative = false;\n            if (num < 0) {\n                num = -num;\n                isNegative = true;\n            }\n            while (num > 0) {\n                int digit = num % 10;\n                sum += digit;\n                num /= 10;\n            }\n            if (isNegative) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n        int count = 0;\n        for (int i = minIndex + 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                count++;\n            }\n        }\n        for (int i = 0; i < minIndex; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count++;\n            }\n        }\n        return count <= 1;\n    }\n}"}
{"task_id": "Java/110", "generation": "\n        // Write your code here\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                oddCount--;\n            }\n        }\n        return oddCount <= 0 ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] arr = test.split(\" \");\n        for (String s : arr) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        return map;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String result = sb.toString();\n        boolean isPalindrome = result.equals(new StringBuilder(result).reverse().toString());\n        return Arrays.asList(result, isPalindrome);\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements in the string \" + count + \" of the input.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            currentSum += nums.get(i);\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "\n        int total = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    total += Math.ceil((double) grid.get(i).get(j) / capacity);\n                }\n            }\n        }\n        return total;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "\n        // Write your code here\n        // Sort the array based on the number of ones in their binary representation\n        // If two numbers have the same number of ones, sort based on their decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array based on the number of ones and the decimal value\n        // Return the sorted array\n        // Convert each number to binary and count the number of ones\n        // Sort the array"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() >= n) {\n                int count = 0;\n                for (char c : word.toCharArray()) {\n                    if (!isVowel(c)) {\n                        count++;\n                    }\n                }\n                if (count == n) {\n                    result.add(word);\n                }\n            }\n        }\n        return result;\n    }\n    \n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "\n        // Write your code here\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        // Write your code here\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        String s3 = s1 + s2;\n        String s4 = s2 + s1;\n        if (isGood(s3)) {\n            return \"Yes\";\n        } else if (isGood(s4)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public boolean isGood(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (k == 0) {\n            return result;\n        }\n        if (arr.size() == 0) {\n            return result;\n        }\n        if (k >= arr.size()) {\n            return arr;\n        }\n        int[] max = new int[k];\n        int[] min = new int[k];\n        int[] maxIndex = new int[k];\n        int[] minIndex = new int[k];\n        for (int i = 0; i < k; i++) {\n            max[i] = Integer.MIN_VALUE;\n            min[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i) > max[j]) {\n                    max[j] = arr.get(i);\n                    maxIndex[j] = i;\n                    break;\n                }\n            }\n            for (int j = 0; j < k; j++) {\n                if (arr.get(i) < min[j]) {\n                    min[j] = arr.get(i);\n                    minIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(max[i]);\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(min[i]);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            int digits = 0;\n            while (num > 0) {\n                num /= 10;\n                digits++;\n            }\n            if (digits <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        // Write your code here\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 2) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if (txt == null || txt.isEmpty()) {\n            return new ArrayList<>();\n        }\n        List<String> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < txt.length(); i++) {\n            char c = txt.charAt(i);\n            if (c == ' ') {\n                if (sb.length() > 0) {\n                    result.add(sb.toString());\n                    sb.setLength(0);\n                }\n            } else if (c == ',') {\n                if (sb.length() > 0) {\n                    result.add(sb.toString());\n                    sb.setLength(0);\n                }\n                result.add(\",\");\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() > 0) {\n            result.add(sb.toString());\n        }\n        if (result.size() == 1) {\n            String word = result.get(0);\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c >= 'a' && c <= 'z') {\n                    if ((c - 'a') % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = lst.get(i);\n            if (curr < prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "\n        // Write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        \n        if (start > end) {\n            return \"NO\";\n        }\n        \n        int length = end - start + 1;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int product = 1;\n        int countNegative = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                countNegative++;\n            } else if (num == 0) {\n                return Optional.empty();\n            }\n            product *= Math.abs(num);\n        }\n        if (countNegative % 2 == 0) {\n            return Optional.of(product);\n        } else {\n            return Optional.of(-product);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp[0][0] = grid.get(0).get(0);\n        pq.offer(new int[]{grid.get(0).get(0), 0, 0});\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            int x = cur[1];\n            int y = cur[2];\n            if (x == n - 1 && y == m - 1) {\n                break;\n            }\n            for (int[] d : dir) {\n                int nx = x + d[0];\n                int ny = y + d[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m) {\n                    int next = cur[0] + grid.get(nx).get(ny);\n                    if (next < dp[nx][ny]) {\n                        dp[nx][ny] = next;\n                        pq.offer(new int[]{next, nx, ny});\n                    }\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        int x = n - 1;\n        int y = m - 1;\n        while (x != 0 || y != 0) {\n            res.add(grid.get(x).get(y));\n            int min = Integer.MAX_VALUE;\n            int[] next = new int[2];\n            for (int[] d : dir) {\n                int nx = x + d[0];\n                int ny = y + d[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && dp[nx][ny] < min) {\n                    min = dp[nx][ny];\n                    next[0] = nx;\n                    next[1] = ny;\n                }\n            }\n            x = next[0];\n            y = next[1];\n        }\n        res.add(grid.get"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(0);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        result.add(0);\n        result.add(1);\n        result.add(1);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3) + result.get(i - 4));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        boolean isAllEven = true;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                isAllEven = false;\n            }\n            n /= 10;\n        }\n        return isAllEven ? 0 : product;\n    }\n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double d : lst) {\n            sum += Math.pow(Math.ceil(d), 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(txt.charAt(txt.length() - 2));\n    }\n}The code provided is a Java solution to the problem of checking if the last character of a given string is an alphabetical character and is not a part of a word. The function `checkIfLastCharIsALetter` takes a string `txt` as input and returns a boolean value.\n\nHere's a breakdown of the code:\n\n1. The function first checks if the input string `txt` is null or empty. If it is, the function returns `false` because there is no last character to check.\n\n2. The function then retrieves the last character of the string `txt` using the `charAt` method and stores it in the variable `lastChar`.\n\n3. The function checks if `lastChar` is an alphabetical character using the `isLetter` method of the `Character` class.\n\n4. The function also checks if the character before the last character (`txt.charAt(txt.length() - 2)`) is not a letter or a digit using the `isLetterOrDigit` method of the `Character` class.\n\n5. If both conditions are true, the function returns `true`, indicating that the last character is an alphabetical character and is not a part of a word. Otherwise, it returns `false`.\n\nThe code correctly implements the logic required to solve the problem and should work as expected."}
{"task_id": "Java/135", "generation": "\n        // Write your code here\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < 0) {\n                if (largest.isEmpty() || lst.get(i) > largest.get()) {\n                    largest = Optional.of(lst.get(i));\n                }\n            } else if (lst.get(i) > 0) {\n                if (smallest.isEmpty() || lst.get(i) < smallest.get()) {\n                    smallest = Optional.of(lst.get(i));\n                }\n            }\n        }\n        result.add(largest);\n        result.add(smallest);\n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            return Optional.of(a.equals(b) ? null : a);\n        } else if (a instanceof String) {\n            return Optional.of(a.equals(b) ? null : Double.parseDouble((String) a));\n        } else if (b instanceof String) {\n            return Optional.of(a.equals(b) ? null : Double.parseDouble((String) b));\n        } else {\n            return Optional.of(a.equals(b) ? null : a);\n        }\n    }\n}"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0) {\n            return false;\n        }\n        for (int i = 2; i <= n / 4; i += 2) {\n            if (n - i * 4 == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/140", "generation": "\n        // Write your code here\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"\")) {\n                sb.append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n            if (i < words.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/141", "generation": "\n        // Write your code here\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n        String extension = parts[1];\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        if (name.length() > 3) {\n            return \"No\";\n        }\n        for (char c : name.toCharArray()) {\n            if (!Character.isLetter(c) && !Character.isDigit(c)) {\n                return \"No\";\n            }\n        }\n        if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Write your code here\n        int numeratorX = Integer.parseInt(x.split(\"/\")[0]);\n        int denominatorX = Integer.parseInt(x.split(\"/\")[1]);\n        int numeratorN = Integer.parseInt(n.split(\"/\")[0]);\n        int denominatorN = Integer.parseInt(n.split(\"/\")[1]);\n\n        if (numeratorX * denominatorN == numeratorN * denominatorX) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/145", "generation": "\n        // Write your code here\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num / 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 != 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                } else {\n                    return o1.length() - o2.length();\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n    \n    /**\n    A simple program which should return true if n is a prime number and should the value false otherwise Examples:\n    for isPrime(7) == true\n    for isPrime(8) == false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        // Write your code here\n        int maxStrength = -100;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            int strength = calculateStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n    \n    private int calculateStrength(String extension) {\n        int uppercaseCount = 0;\n        int lowercaseCount = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCount++;\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCount++;\n            }\n        }\n        return uppercaseCount - lowercaseCount;\n    }\n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            String sub = a.substring(i, i + b.length());\n            if (sub.equals(b) || sub.equals(new StringBuilder(b).reverse().toString())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        int even = 0;\n        int odd = 0;\n        String str = String.valueOf(num);\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isDigit(str.charAt(i))) {\n                int digit = Character.getNumericValue(str.charAt(i));\n                if (digit % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Arrays.asList(even, odd);\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        // Create a map to store the roman numeral equivalents of numbers\n        Map<Integer, String> romanMap = new HashMap<>();\n        romanMap.put(1, \"i\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(5, \"v\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(10, \"x\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(50, \"l\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(100, \"c\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(500, \"d\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(1000, \"m\");\n\n        // Initialize the result string\n        String result = \"\";\n\n        // Iterate through the map in descending order of keys\n        for (int key : romanMap.keySet()) {\n            // While the number is greater than or equal to the current key\n            while (number >= key) {\n                // Append the corresponding roman numeral to the result string\n                result += romanMap.get(key);\n                // Subtract the key from the number\n                number -= key;\n            }\n        }\n\n        // Return the result string\n        return result;\n    }\n}\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n        for (String word : words) {\n            int uniqueChars = countUniqueChars(word);\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\n    private int countUniqueChars(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (need <= remaining) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        // Write your code here\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            } else if (op.equals(\"//\")) {\n                result = result / num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        while (md5.length() < 32) {\n            md5 = \"0\" + md5;\n        }\n        return Optional.of(md5);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
