{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) <= threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/1", "generation": "\n    var stack []string\n    var result []string\n    var current string\n    for _, char := range paren_string {\n        switch char {\n        case '(':\n            if current != \"\" {\n                stack = append(stack, current)\n                current = \"\"\n            }\n            current += string(char)\n        case ')':\n            current += string(char)\n            if len(stack) > 0 {\n                last := stack[len(stack)-1]\n                stack = stack[:len(stack)-1]\n                current = last + current\n            }\n            if len(stack) == 0 {\n                result = append(result, current)\n                current = \"\"\n            }\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/2", "generation": "\n    _, dec := math.Modf(number)\n    return dec\n}\n"}
{"task_id": "Go/3", "generation": "\n    sum := 0\n    for _, v := range operations {\n        sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/4", "generation": "\n    sum := 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number)\n    }\n    return sum / float64(len(numbers))\n}\n"}
{"task_id": "Go/5", "generation": "\n    var result []int\n    for i, num := range numbers {\n        if i != 0 {\n            result = append(result, delimeter)\n        }\n        result = append(result, num)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/6", "generation": "\n    max_levels := make([]int, 0)\n    current_level := 0\n    max_level := 0\n\n    for _, char := range strings.Split(paren_string, \"\") {\n        if char == \"(\" {\n            current_level++\n            if current_level > max_level {\n                max_level = current_level\n                max_levels = append(max_levels, max_level)\n            }\n        } else if char == \")\" {\n            current_level--\n        }\n    }\n\n    return max_levels\n}\n\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    return [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        result[i] = max\n    }\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return \"\"\n    }\n    for i := 0; i < len(str); i++ {\n        if IsPalindrome(str[i:]) {\n            return str[:i] + Reverse(str)\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/11", "generation": "\n    if len(a) != len(b) {\n        return \"Strings are not of the same length\"\n    }\n\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] != b[i] {\n            result += \"1\"\n        } else {\n            result += \"0\"\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}\n\n"}
{"task_id": "Go/13", "generation": "\n    for b != 0 {\n        a, b = b, a%b\n    }\n    return a\n}\n"}
{"task_id": "Go/14", "generation": "\n\tprefixes := make([]string, 0)\n\tfor i := 0; i < len(str); i++ {\n\t\tprefixes = append(prefixes, str[:i])\n\t}\n\treturn prefixes\n}\n\nfunc AllSuffixes(str string) []string{\n\tsuffixes := make([]string, 0)\n\tfor i := 0; i < len(str); i++ {\n\t\tsuffixes = append(suffixes, str[i:])\n\t}\n\treturn suffixes\n}\n\nfunc AllSubstrings(str string) []string{\n\tsubstrings := make([]string, 0)\n\tfor i := 0; i < len(str); i++ {\n\t\tfor j := i+1; j <= len(str); j++ {\n\t\t\tsubstrings = append(substrings, str[i:j])\n\t\t}\n\t}\n\treturn substrings\n}\n\nfunc AllSubsequences(str string) []string{\n\tsubsequences := make([]string, 0)\n\tlength := len(str)\n\tfor i := 0; i < 1<<length; i++ {\n\t\tsubsequence := \"\"\n\t\tfor j := 0; j < length; j++ {\n\t\t\tif (i & (1 << j)) > 0 {\n\t\t\t\tsubsequence += string(str[j])\n\t\t\t}\n\t\t}\n\t\tsubsequences = append(subsequences, subsequence)\n\t}\n\treturn subsequences\n}\n\nfunc AllPermutations(str string) []string{\n\tpermutations := make([]string, 0)\n\tif len(str) == 0 {\n\t\tpermutations = append(permutations, \"\")\n\t\treturn permutations\n\t}\n\tfor _, char := range str {\n\t\tfor _, perm := range AllPermutations(strings.Replace(str, string(char), \"\", 1)) {\n\t\t\tpermutations = append(permutations, string(char)+perm)\n\t\t}\n\t}\n\treturn permutations\n}\n\nfunc AllCombinations(str string) []string{\n\tcombinations := make([]string, 0)\n\tfor i := 0;"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 2; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove the last space\n}\n\n"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    count := make(map[rune]int)\n    for _, char := range str {\n        count[char]++\n    }\n    return len(count)\n}\n"}
{"task_id": "Go/17", "generation": "\n\tnotes := strings.Split(music_string, \" \")\n\tresult := make([]int, len(notes))\n\tfor i, note := range notes {\n\t\tswitch note {\n\t\tcase \"o\":\n\t\t\tresult[i] = 4\n\t\tcase \"o|\":\n\t\t\tresult[i] = 2\n\t\tcase \"o.\":\n\t\t\tresult[i] = 1\n\t\tcase \"o||\":\n\t\t\tresult[i] = 2\n\t\tcase \"o|||\":\n\t\t\tresult[i] = 3\n\t\tcase \"o||||\":\n\t\t\tresult[i] = 4\n\t\tdefault:\n\t\t\tresult[i] = 0\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i <= len(str) - len(substring); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    nums := strings.Split(numbers, \" \")\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n\n"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    return [2]float64{numbers[0], numbers[len(numbers)-1]}\n}\n\n"}
{"task_id": "Go/21", "generation": "\n    max := numbers[0]\n    for _, num := range numbers {\n        if num > max {\n            max = num\n        }\n    }\n    for i, num := range numbers {\n        numbers[i] = max - num\n    }\n    return numbers\n}\n\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if val, ok := value.(int); ok {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i >= 1; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n\n"}
{"task_id": "Go/26", "generation": "\n\tresult := make([]int, 0)\n\tseen := make(map[int]bool)\n\tfor _, num := range numbers {\n\t\tif _, ok := seen[num]; !ok {\n\t\t\tresult = append(result, num)\n\t\t\tseen[num] = true\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/27", "generation": "\n    flipped := \"\"\n    for _, c := range str {\n        if 'a' <= c && c <= 'z' {\n            flipped += strings.ToUpper(string(c))\n        } else if 'A' <= c && c <= 'Z' {\n            flipped += strings.ToLower(string(c))\n        } else {\n            flipped += string(c)\n        }\n    }\n    return flipped\n}\n"}
{"task_id": "Go/28", "generation": "\n    var result string\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/30", "generation": "\n\tpositive := make([]int, 0)\n\tfor _, num := range l {\n\t\tif num > 0 {\n\t\t\tpositive = append(positive, num)\n\t\t}\n\t}\n\treturn positive\n}\n\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/32", "generation": "\n    n := len(xs)\n    if n == 0 {\n        return 0.0\n    }\n    if n == 1 {\n        return 0.0\n    }\n    if n == 2 {\n        return float64(-xs[0]) / float64(xs[1])\n    }\n    if xs[n-1] != 0 {\n        return 0.0\n    }\n    for i := 0; i < n-1; i++ {\n        if xs[i]%2 == 0 {\n            return float64(-xs[i+1]) / float64(xs[i])\n        }\n    }\n    return 0.0\n}\n\n"}
{"task_id": "Go/33", "generation": "\n    var divisibleByThree []int\n    for i, v := range l {\n        if i%3 == 0 {\n            divisibleByThree = append(divisibleByThree, v)\n        }\n    }\n    sort.Ints(divisibleByThree)\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = divisibleByThree[0]\n            divisibleByThree = divisibleByThree[1:]\n        }\n    }\n    return l\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/34", "generation": "\n    sort.Ints(l)\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n            l[i] = v\n            i++\n        }\n    }\n    return l[:i]\n}\n\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tstr := strconv.Itoa(i)\n\t\t\tif strings.Contains(str, \"7\") {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/37", "generation": "\n\teven := make([]int, 0)\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\teven = append(even, v)\n\t\t}\n\t}\n\tsort.Ints(even)\n\tj := 0\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tl[i] = even[j]\n\t\t\tj++\n\t\t} else {\n\t\t\tl[i] = v\n\t\t}\n\t}\n\treturn l\n}\n\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[2]}, runes[0:2]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\ta, b := 2, 3\n\tif n == 1 {\n\t\treturn a\n\t}\n\tif n == 2 {\n\t\treturn b\n\t}\n\tprime := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\ti := 21\n\tcount := 2\n\tfor count < n {\n\t\ta = b\n\t\tb = prime[i]\n\t\ti++\n\t\tcount++\n\t\tfor {\n\t\t\tisPrime := true\n\t\t\tfor _, v := range prime {\n\t\t\t\tif v > int(math.Sqrt(float64(a+b))) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (a+b)%v == 0 {\n\t\t\t\t\tisPrime = false\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif isPrime {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tb = prime[i]\n\t\t\ti++\n\t\t}\n\t}\n\treturn a + b\n}\n\n"}
{"task_id": "Go/40", "generation": "\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}\n\n"}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if m[num] {\n            return true\n        }\n        m[num] = true\n    }\n    return false\n}\n\n"}
{"task_id": "Go/44", "generation": "\n    if base < 2 || base > 10 {\n        return \"\"\n    }\n    return strconv.FormatInt(int64(x), base)\n}\n\n"}
{"task_id": "Go/45", "generation": "\n\treturn (a * h) / 2\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 4\n    } else {\n        return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n    }\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn (float64(l[n/2-1]) + float64(l[n/2])) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}\n"}
{"task_id": "Go/48", "generation": "\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsPalindrome(text string) bool {\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsPalindrome(text string) bool {\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsPalindrome(text string) bool {\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsPalindrome(text string) bool {\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsPalindrome(text string) bool {\n    length := len(text)\n    if length <= 1 {\n        return true\n    }\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc Is"}
{"task_id": "Go/49", "generation": "\n    if n < 0 {\n        return -n % p\n    }\n    return n % p\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a'+26)%26+'a')\n    }\n    return string(newRunes)\n}\n\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiou]\")\n    return re.ReplaceAllString(text, \"\")\n}\n\n"}
{"task_id": "Go/52", "generation": "\n    for _, num := range l {\n        if num < t {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n    if len(s0) != len(s1) {\n        return false\n    }\n    m := make(map[rune]int)\n    for _, c := range s0 {\n        m[c]++\n    }\n    for _, c := range s1 {\n        if count, ok := m[c]; ok {\n            if count == 1 {\n                delete(m, c)\n            } else {\n                m[c] = count - 1\n            }\n        } else {\n            return false\n        }\n    }\n    return len(m) == 0\n}\n\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '<' {\n            stack = append(stack, b)\n        } else if b == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    if len(l) < 2 {\n        return true\n    }\n    increasing := true\n    decreasing := true\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            increasing = false\n        }\n        if l[i] < l[i+1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l1 {\n        m[item] = true\n    }\n\n    common := []int{}\n    for _, item := range l2 {\n        if _, ok := m[item]; ok {\n            common = append(common, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}\n"}
{"task_id": "Go/59", "generation": "\n    max_prime := -1\n\n    for n%2 == 0 {\n        max_prime = 2\n        n >>= 1\n    }\n\n    for i := 3; i*i <= n; i += 2 {\n        for n%i == 0 {\n            max_prime = i\n            n /= i\n        }\n    }\n\n    if n > 2 {\n        max_prime = n\n    }\n\n    return max_prime\n}\n\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, bracket := range brackets {\n        if bracket == '(' {\n            stack = append(stack, bracket)\n        } else if bracket == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/62", "generation": "\n    if len(xs) == 0 {\n        return []int{}\n    }\n    derivative := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        derivative[i-1] = xs[i] * i\n    }\n    return derivative\n}\n\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n}\n\n"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    if shift >= len(str) {\n        return reverse(str)\n    }\n    return str[len(str)-shift:] + str[0:len(str)-shift]\n}\n\nfunc reverse(input string) string {\n    runes := []rune(input)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif unicode.IsLetter(c) {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tstr := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(str[2])\n\toranges, _ := strconv.Atoi(str[4])\n\ttotalFruits := apples + oranges\n\t\n\treturn totalFruits - n\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEven := math.MaxInt64\n    smallestEvenIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < smallestEven {\n            smallestEven = v\n            smallestEvenIndex = i\n        }\n    }\n    if smallestEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{smallestEvenIndex, smallestEven}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/69", "generation": "\n    count := make(map[int]int)\n    for _, num := range lst {\n        if num > 0 {\n            count[num]++\n        }\n    }\n    max := 1\n    for _, num := range lst {\n        if count[num] > max && num > 0 {\n            max = count[num]\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    for i := 0; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n\n    s := (a + b + c) / 2\n    area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n\n    return math.Round(area*100) / 100\n}\n\n"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    return sum <= w\n}\n\n"}
{"task_id": "Go/73", "generation": "\n\tn := len(arr)\n\tchanges := 0\n\tfor i := 0; i < n/2; i++ {\n\t\tif arr[i] != arr[n-1-i] {\n\t\t\tchanges++\n\t\t}\n\t}\n\treturn changes\n}\n"}
{"task_id": "Go/74", "generation": "\n    var count1, count2 int\n    for _, v := range lst1 {\n        count1 += len(v)\n    }\n    for _, v := range lst2 {\n        count2 += len(v)\n    }\n    if count1 < count2 {\n        return lst1\n    } else if count2 < count1 {\n        return lst2\n    } else {\n        return []string{}\n    }\n}\n\n"}
{"task_id": "Go/75", "generation": "\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n    count := 0\n    for _, prime := range primes {\n        if a % prime == 0 {\n            count++\n        }\n    }\n    return count >= 3\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if x==1 {\n        return true\n    }\n    if x==0 || n==0 {\n        return false\n    }\n    if n==1 {\n        return true\n    }\n    if x%n != 0 {\n        return false\n    }\n    for x%n == 0 {\n        x = x / n\n    }\n    return x == 1\n}\n\n"}
{"task_id": "Go/77", "generation": "\n    x := math.Pow(float64(a), 1.0/3.0)\n    return math.Floor(x+0.5) == math.Floor(x)\n}\n"}
{"task_id": "Go/78", "generation": "\n    // your code here\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tbinary = fmt.Sprintf(\"%d%s\", decimal%2, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn binary\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] && s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var result []string\n    for _, grade := range grades {\n        if grade >= 40 {\n            if grade >= 70 {\n                if grade >= 80 {\n                    if grade >= 90 {\n                        if grade >= 100 {\n                            result = append(result, \"A\")\n                        } else {\n                            result = append(result, \"A-\")\n                        }\n                    } else {\n                        result = append(result, \"B+\")\n                    }\n                } else {\n                    if grade >= 60 {\n                        result = append(result, \"B\")\n                    } else {\n                        result = append(result, \"B-\")\n                    }\n                }\n            } else {\n                if grade >= 50 {\n                    if grade >= 60 {\n                        result = append(result, \"C+\")\n                    } else {\n                        result = append(result, \"C\")\n                    }\n                } else {\n                    if grade >= 40 {\n                        result = append(result, \"C-\")\n                    } else {\n                        result = append(result, \"D\")\n                    }\n                }\n            }\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/83", "generation": "\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    dp := make([][2]int, n+1)\n    dp[1][0], dp[1][1] = 1, 1\n    for i := 2; i <= n; i++ {\n        dp[i][0] = dp[i-1][0] + dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    }\n    return dp[n][0] + dp[n][1]\n}\n"}
{"task_id": "Go/84", "generation": "\n    binary := \"\"\n    for N > 0 {\n        digit := N % 2\n        N = N / 2\n        binary = strconv.Itoa(digit) + binary\n    }\n    return binary\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        runes := []rune(word)\n        sort.Slice(runes, func(i, j int) bool {\n            return runes[i] < runes[j]\n        })\n        words[i] = string(runes)\n    }\n    return strings.Join(words, \" \")\n}\n\n"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, num := range row {\n            if num == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] < res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return []int{}\n    }\n\n    sum := array[0] + array[len(array)-1]\n    sortedArray := make([]int, len(array))\n    copy(sortedArray, array)\n\n    if sum%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(sortedArray)))\n    } else {\n        sort.Ints(sortedArray)\n    }\n\n    return sortedArray\n}\n\n"}
{"task_id": "Go/89", "generation": "\n    var encrypted string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            encrypted += string((c-'a'+2)%26 + 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            encrypted += string((c-'A'+2)%26 + 'A')\n        } else {\n            encrypted += string(c)\n        }\n    }\n    return encrypted\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    smallest := lst[0]\n    for i, v := range lst {\n        if v > smallest {\n            return v\n        }\n        if i == len(lst)-1 {\n            return nil\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`(?i)^[i|t]`)\n    sentences := regexp.MustCompile(`[.|?|!]`)\n    count := 0\n    for _, sentence := range sentences.Split(S, -1) {\n        if re.MatchString(strings.TrimSpace(sentence)) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/92", "generation": "\n\tv1, v2, v3 := x.(int), y.(int), z.(int)\n\tsum := v2 + v3\n\treturn v1 == sum && v1 != v2 && v1 != v3 && v2 != v3\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiouAEIOU\"\n    alphabet := \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    encoded := \"\"\n\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            i := strings.IndexRune(alphabet, char)\n            encoded += string(alphabet[i+2])\n        } else {\n            encoded += string(char)\n        }\n    }\n\n    return encoded\n}\n\n"}
{"task_id": "Go/94", "generation": "\n    max := 0\n    for _, num := range lst {\n        sum := 0\n        for _, digit := range strconv.Itoa(num) {\n            digitInt, _ := strconv.Atoi(string(digit))\n            sum += digitInt\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    for key, value := range dict {\n        if s, ok := key.(string); ok {\n            if !strings.EqualFold(s, strings.ToUpper(s)) || (value != \"\" && !strings.EqualFold(value.(string), strings.ToUpper(value.(string)))) {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/96", "generation": "\n\tprimes := make([]int, 0)\n\tfor i := 2; i <= n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/97", "generation": "\n    if a < 0 || b < 0 {\n        return -1\n    }\n\n    product := 1\n    for a != 0 {\n        digit := a % 10\n        a /= 10\n        if digit != 0 {\n            product *= digit\n        }\n    }\n\n    for b != 0 {\n        digit := b % 10\n        b /= 10\n        if digit != 0 {\n            product *= digit\n        }\n    }\n\n    return product\n}\n\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/99", "generation": "\n    floatValue, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n    }\n\n    intPart := math.Floor(floatValue)\n    decimalPart := floatValue - intPart\n\n    if decimalPart < 0.5 {\n        return int(intPart)\n    } else if decimalPart > 0.5 {\n        return int(intPart) + 1\n    } else {\n        if intPart%2 == 0 {\n            return int(intPart)\n        } else {\n            return int(intPart) + 1\n        }\n    }\n}\n"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    stones := 1\n    for i := 0; i < n; i++ {\n        result = append(result, stones)\n        if stones%2 == 0 {\n            stones += 2\n        } else {\n            stones += 2\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/101", "generation": "\n    s = strings.ReplaceAll(s, \",\", \"\")\n    s = strings.ReplaceAll(s, \" \", \"\")\n    return strings.Split(s, \",\")\n}\n\n"}
{"task_id": "Go/102", "generation": "\n\tif x > y {\n\t\tx, y = y, x\n\t}\n\tif x < 1 || y < 1 {\n\t\treturn -1\n\t}\n\tif x == y {\n\t\treturn x\n\t}\n\tif x+1 == y {\n\t\treturn x + 1\n\t}\n\treturn -1\n}\n\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    count := 0\n    for i := n; i <= m; i++ {\n        sum += i\n        count++\n    }\n    avg := int(math.Round(float64(sum) / float64(count)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var unique []int\n    for _, num := range x {\n        digits := strconv.Itoa(num)\n        uniqueDigits := make(map[rune]bool)\n        for _, digit := range digits {\n            uniqueDigits[digit] = true\n        }\n        if len(uniqueDigits) == 1 {\n            unique = append(unique, num)\n        }\n    }\n    sort.Ints(unique)\n    return unique\n}\n\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var strange []int\n    var nums = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n        if v < 1 || v > 9 {\n            strange = append(strange, v)\n        }\n    }\n    if len(strange) == len(arr) {\n        return result\n    }\n    sort.Ints(arr)\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    for _, v := range arr {\n        if val, ok := nums[v]; ok {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/106", "generation": "\n    var result []int\n    for i := 1; i <= n; i++ {\n        fact := 1\n        for j := 1; j <= i; j++ {\n            fact *= j\n        }\n        if fact%2 == 0 {\n            result = append(result, fact)\n        } else {\n            sum := 0\n            for j := 1; j <= i; j++ {\n                sum += j\n            }\n            result = append(result, sum)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/107", "generation": "\n    var countEven, countOdd int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                countEven++\n            } else {\n                countOdd++\n            }\n        }\n    }\n    return [2]int{countEven, countOdd}\n}\n\nfunc isPalindrome(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        sum := 0\n        str := strconv.Itoa(num)\n        for _, ch := range str {\n            digit, _ := strconv.Atoi(string(ch))\n            if num < 0 && ch == '-' {\n                continue\n            }\n            sum += digit\n        }\n        if sum == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/109", "generation": "\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n\n    for i := range arr {\n        if isNonDecreasing(arr, i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc isNonDecreasing(arr []int, shift int) bool {\n    for i := range arr {\n        j := (i + shift) % len(arr)\n        if arr[i] < arr[j] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/110", "generation": "\n    evenLst1, oddLst1 := partition(lst1)\n    evenLst2, oddLst2 := partition(lst2)\n\n    if len(evenLst1) >= len(oddLst2) {\n        return \"YES\"\n    }\n    if len(oddLst1) <= len(evenLst2) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc partition(lst []int) ([]int, []int) {\n    var even, odd []int\n    for _, num := range lst {\n        if num%2 == 0 {\n            even = append(even, num)\n        } else {\n            odd = append(odd, num)\n        }\n    }\n    return even, odd\n}\n\n"}
{"task_id": "Go/111", "generation": "\n    words := strings.Fields(test)\n    histogram := make(map[rune]int)\n    for _, word := range words {\n        for _, char := range word {\n            histogram[char]++\n        }\n    }\n    return histogram\n}\n\n"}
{"task_id": "Go/112", "generation": "\n    for _,v := range c {\n        s = strings.ReplaceAll(s, string(v), \"\")\n    }\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return [2]interface{}{string(r), s == string(r)}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/113", "generation": "\n    for i, v := range lst {\n        count := 0\n        for _, c := range v {\n            if c % 2 != 0 {\n                count++\n            }\n        }\n        lst[i] = fmt.Sprintf(\"the number of odd elements %d in the str%dng %d of the input.\", count, count, count)\n    }\n    return lst\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    min_sum := math.MaxInt64\n    current_sum := 0\n\n    for _, num := range nums {\n        current_sum += num\n        if current_sum < min_sum {\n            min_sum = current_sum\n        }\n        current_sum = int(math.Min(float64(current_sum), float64(num)))\n    }\n\n    return min_sum\n}\n\n"}
{"task_id": "Go/115", "generation": "\n    buckets := 0\n    for _, row := range grid {\n        for _, cell := range row {\n            buckets += cell\n        }\n    }\n    return int(math.Ceil(float64(buckets) / float64(capacity)))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/116", "generation": "\n    var negatives []int\n    var positives []int\n    for _, v := range arr {\n        if v < 0 {\n            negatives = append(negatives, v)\n        } else {\n            positives = append(positives, v)\n        }\n    }\n    sort.Ints(negatives)\n    sort.Slice(positives, func(i, j int) bool {\n        return countOnes(positives[i]) < countOnes(positives[j])\n    })\n    return append(negatives, positives...)\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n != 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    if s == \"\" {\n        return []string{}\n    }\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc countConsonants(s string) int {\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", c) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/118", "generation": "\n    vowels := []byte{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i := len(word) - 1; i >= 0; i-- {\n        if bytes.Contains(vowels, []byte{word[i]}) {\n            if i-2 >= 0 && !bytes.Contains(vowels, []byte{word[i-1]}) && !bytes.Contains(vowels, []byte{word[i-2]}) {\n                return string(word[i-2 : i+1])\n            }\n        }\n    }\n    return \"\"\n}\n\n"}
{"task_id": "Go/119", "generation": "\n    var stack []rune\n    for _, str := range lst {\n        for _, char := range str {\n            if char == '(' {\n                stack = append(stack, char)\n            } else if char == ')' {\n                if len(stack) == 0 {\n                    return \"No\"\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/122", "generation": "\n    if len(arr) > k {\n        arr = arr[:k]\n    }\n\n    sum := 0\n    for _, num := range arr {\n        if num > 9 {\n            str := strconv.Itoa(num)\n            firstDigit := int(str[0])\n            secondDigit := int(str[1])\n            sum += firstDigit + secondDigit\n        } else {\n            sum += num\n        }\n    }\n\n    return sum\n}\n\n"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        collatz = append(collatz, n)\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n\n    var oddCollatz []int\n    for _, num := range collatz {\n        if num%2 != 0 {\n            oddCollatz = append(oddCollatz, num)\n        }\n    }\n\n    sort.Ints(oddCollatz)\n    return oddCollatz\n}\n\n"}
{"task_id": "Go/124", "generation": "\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    month, err1 := strconv.Atoi(date[:2])\n    day, err2 := strconv.Atoi(date[3:5])\n    year, err3 := strconv.Atoi(date[6:])\n    if err1 != nil || err2 != nil || err3 != nil || month > 12 || year < 0 || day < 0 {\n        return false\n    }\n    if month == 2 {\n        if day > 29 || day < 1 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 || day < 1 {\n            return false\n        }\n    } else if day > 31 || day < 1 {\n        return false\n    }\n    return true\n}\n\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else {\n        return []string{txt}\n    }\n}\n\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    if start > end {\n        return \"NO\"\n    }\n    length := end - start + 1\n    if length < 2 {\n        return \"NO\"\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    prod := 1\n    sum := 0\n    for _, num := range arr {\n        if num < 0 {\n            prod *= -1\n        }\n        sum += int(math.Abs(float64(num)))\n    }\n\n    return []int{prod, sum}\n}\n\n"}
{"task_id": "Go/129", "generation": "\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/130", "generation": "\n    if n == 1 {\n        return []float64{1}\n    }\n    if n == 2 {\n        return []float64{1, 1}\n    }\n    if n == 3 {\n        return []float64{1, 1, 2}\n    }\n    res := make([]float64, n)\n    res[0] = 1\n    res[1] = 1\n    res[2] = 2\n    for i := 3; i < n; i++ {\n        res[i] = res[i-1] + res[i-2] + res[i-3]\n    }\n    return res\n}\n\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n\tstack := []rune{}\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\tstack = append(stack, c)\n\t\t} else if c == ']' {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        sum += math.Pow(math.Ceil(math.Abs(num)), 2)\n    }\n    return int(sum)\n}\n\n"}
{"task_id": "Go/134", "generation": "\n    words := strings.Fields(txt)\n    if len(words) == 0 {\n        return false\n    }\n    lastWord := words[len(words)-1]\n    lastChar := lastWord[len(lastWord)-1]\n    return (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n}\n\n"}
{"task_id": "Go/135", "generation": "\n\tsort.Ints(arr)\n\tn := len(arr)\n\tfor i := n - 1; i > 0; i-- {\n\t\tif arr[i-1] >= arr[i] {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n"}
{"task_id": "Go/136", "generation": "\n\tmin := math.MaxInt64\n\tmax := math.MinInt64\n\n\tfor _, v := range lst {\n\t\tif v < min && v < 0 {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max && v > 0 {\n\t\t\tmax = v\n\t\t}\n\t}\n\n\tif min == math.MaxInt64 {\n\t\tmin = nil\n\t}\n\tif max == math.MinInt64 {\n\t\tmax = nil\n\t}\n\n\treturn [2]interface{}{min, max}\n}\n\n"}
{"task_id": "Go/137", "generation": "\n    // Convert the interface{} to string\n    strA := fmt.Sprintf(\"%v\", a)\n    strB := fmt.Sprintf(\"%v\", b)\n\n    // Remove any commas from the strings\n    strA = strings.Replace(strA, \",\", \"\", -1)\n    strB = strings.Replace(strB, \",\", \"\", -1)\n\n    // Convert the strings to float64\n    floatA, errA := strconv.ParseFloat(strA, 64)\n    floatB, errB := strconv.ParseFloat(strB, 64)\n\n    // If there was an error converting the strings to float64, return an error\n    if errA != nil || errB != nil {\n        return \"Error: Invalid input\"\n    }\n\n    // If the floats are equal, return the float\n    if floatA == floatB {\n        return floatA\n    }\n\n    // If the floats are not equal, return None\n    return nil\n}\n\n"}
{"task_id": "Go/138", "generation": "\n\tsum := 0\n\tfor i := 2; i <= n/2; i++ {\n\t\tif n%i == 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum%2 == 0\n}\n\n"}
{"task_id": "Go/139", "generation": "\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return n * SpecialFactorial(n-1)\n}\n\nfunc BrazilianFactorial(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n    return n * SpecialFactorial(n-1) * SpecialFactorial(n-2)\n}\n\n"}
{"task_id": "Go/140", "generation": "\n\tres := \"\"\n\tspaceCount := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tspaceCount++\n\t\t\tif spaceCount <= 2 {\n\t\t\t\tres += \"_\"\n\t\t\t}\n\t\t} else {\n\t\t\tres += string(c)\n\t\t\tspaceCount = 0\n\t\t}\n\t}\n\treturn res\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if strings.Count(file_name, \"\") > 1 {\n        return \"No\"\n    }\n    if strings.Count(file_name, \".\") > 1 {\n        return \"No\"\n    }\n    if strings.Count(file_name, \".\") == 0 {\n        return \"No\"\n    }\n    if !(strings.HasSuffix(file_name, \".exe\") || strings.HasSuffix(file_name, \".dll\")) {\n        return \"No\"\n    }\n    if !(file_name[0:1] >= \"a\" && file_name[0:1] <= \"z\" || file_name[0:1] >= \"A\" && file_name[0:1] <= \"Z\") {\n        return \"No\"\n    }\n    for _, char := range file_name {\n        if (char >= \"0\" && char <= \"9\") {\n            return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i%2 == 0 && num%4 == 0 && num%3 != 0 && num%4 != 0 {\n            sum += num * num\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    result := make([]string, 0, len(words))\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/144", "generation": "\n    xn := strings.Split(x, \"/\")\n    nn, _ := strconv.Atoi(n)\n    xv, _ := strconv.Atoi(xn[0])\n    nv, _ := strconv.Atoi(xn[1])\n\n    if xn[0] == \"1\" {\n        xv = 1\n    }\n\n    if nn%xv == 0 && nn%nv == 0 {\n        return true\n    }\n\n    return false\n}\n"}
{"task_id": "Go/145", "generation": "\n    digitSum := func(n int) int {\n        sum := 0\n        for n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n        return sum\n    }\n\n    type pair struct {\n        idx, val int\n    }\n\n    var arr []pair\n    for i, num := range nums {\n        arr = append(arr, pair{i, digitSum(num)})\n    }\n\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i].val == arr[j].val {\n            return arr[i].idx < arr[j].idx\n        }\n        return arr[i].val < arr[j].val\n    })\n\n    for i := range nums {\n        nums[i] = arr[i].val\n    }\n\n    return nums\n}\n\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            str := strconv.Itoa(num)\n            firstDigit := str[0]\n            lastDigit := str[len(str)-1]\n            if firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9' {\n                if lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/147", "generation": "\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i-j)%3 == 0 || (j-k)%3 == 0 || (i-k)%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"}\n\tplanetMap := map[string]int{\n\t\t\"Mercury\": 1,\n\t\t\"Venus\":   2,\n\t\t\"Earth\":   3,\n\t\t\"Mars\":    4,\n\t\t\"Jupiter\": 5,\n\t\t\"Uranus\":  6,\n\t\t\"Neptune\": 7,\n\t}\n\n\tstart, ok1 := planetMap[planet1]\n\tend, ok2 := planetMap[planet2]\n\n\tif !ok1 || !ok2 {\n\t\treturn []string{}\n\t}\n\n\tif start > end {\n\t\tstart, end = end, start\n\t}\n\n\tresult := make([]string, 0)\n\tfor i := start; i < end; i++ {\n\t\tresult = append(result, planets[i])\n\t}\n\n\treturn result\n}\n\n"}
{"task_id": "Go/149", "generation": "\n    var evenStrings []string\n    for _, str := range lst {\n        if len(str)%2 == 0 {\n            evenStrings = append(evenStrings, str)\n        }\n    }\n    sort.Slice(evenStrings, func(i, j int) bool {\n        if len(evenStrings[i]) == len(evenStrings[j]) {\n            return evenStrings[i] < evenStrings[j]\n        }\n        return len(evenStrings[i]) < len(evenStrings[j])\n    })\n    return evenStrings\n}\n\n"}
{"task_id": "Go/150", "generation": "\n    if n%2 == 0 {\n        return x\n    }\n    return y\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        if num > 0 && math.Mod(num, 2) != 0 {\n            sum += math.Pow(num, 2)\n        }\n    }\n    return int(sum)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i := range game {\n        if game[i] == guess[i] {\n            result[i] = game[i]\n        } else {\n            result[i] = int(math.Abs(float64(game[i] - guess[i])))\n        }\n    }\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/153", "generation": "\n    maxStrength := math.MinInt64\n    var strongestExtension string\n    for _, extension := range extensions {\n        strength := calculateStrength(class_name, extension)\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return class_name + \".\" + strongestExtension\n}\n\nfunc calculateStrength(class_name, extension string) int {\n    upperCaseCount := 0\n    for _, char := range class_name {\n        if char >= 'A' && char <= 'Z' {\n            upperCaseCount++\n        }\n    }\n    for _, char := range extension {\n        if char >= 'A' && char <= 'Z' {\n            upperCaseCount++\n        }\n    }\n    return upperCaseCount\n}\n\n"}
{"task_id": "Go/154", "generation": "\n    if len(b) > len(a) {\n        return false\n    }\n    if len(b) == 0 {\n        return true\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:i+len(b)] == b {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/155", "generation": "\n    strNum := strconv.Itoa(num)\n    evenCount := 0\n    oddCount := 0\n    for _, v := range strNum {\n        digit, _ := strconv.Atoi(string(v))\n        if digit%2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n"}
{"task_id": "Go/156", "generation": "\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    result := \"\"\n    for i := 0; i < len(values); i++ {\n        for number >= values[i] {\n            number -= values[i]\n            result += numerals[i]\n        }\n    }\n    return strings.ToLower(result)\n}\n\n"}
{"task_id": "Go/157", "generation": "\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n    return math.Pow(float64(sides[0]), 2) + math.Pow(float64(sides[1]), 2) == math.Pow(float64(sides[2]), 2)\n}\n\n"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    max := 0\n    res := \"\"\n    for _, word := range words {\n        unique := countUnique(word)\n        if unique > max {\n            max = unique\n            res = word\n        }\n    }\n    return res\n}\n\nfunc countUnique(word string) int {\n    m := make(map[rune]bool)\n    for _, char := range word {\n        m[char] = true\n    }\n    return len(m)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/159", "generation": "\n    if number + remaining >= need {\n        return []int{number + remaining - need, 0}\n    } else {\n        return []int{remaining, (need - (number + remaining))}\n    }\n}\n\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/161", "generation": "\n\trunes := []rune(s)\n\tres := make([]rune, len(runes))\n\tletters := make([]rune, 0)\n\tfor i := range runes {\n\t\tif unicode.IsLetter(runes[i]) {\n\t\t\tletters = append(letters, runes[i])\n\t\t} else {\n\t\t\tres[i] = runes[i]\n\t\t}\n\t}\n\tif len(letters) == 0 {\n\t\tfor i := range res {\n\t\t\tif res[i] == 0 {\n\t\t\t\tres[i] = runes[len(runes)-1-i]\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor i := range res {\n\t\t\tif res[i] == 0 {\n\t\t\t\tres[i] = letters[len(letters)-1-i]\n\t\t\t\tif unicode.IsUpper(letters[len(letters)-1-i]) {\n\t\t\t\t\tres[i] = unicode.ToLower(res[i])\n\t\t\t\t} else {\n\t\t\t\t\tres[i] = unicode.ToUpper(res[i])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn string(res)\n}\n\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\n"}
