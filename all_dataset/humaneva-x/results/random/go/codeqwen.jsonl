{"task_id": "Go/0", "generation": "\n    for _, num := range numbers {\n        if math.Abs(num) > threshold {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    var currentGroup strings.Builder\n\n    for _, char := range paren_string {\n        if char == '(' {\n            stack = append(stack, char)\n            currentGroup.WriteRune(char)\n        } else if char == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                currentGroup.WriteRune(char)\n                if len(stack) == 0 {\n                    result = append(result, currentGroup.String())\n                    currentGroup.Reset()\n                }\n            } else {\n                // Handle unbalanced parentheses error here\n            }\n        }\n    }\n\n    // Handle unbalanced parentheses error if stack is not empty\n\n    return result\n}\n\n"}
{"task_id": "Go/2", "generation": "\n    dec := number - math.Floor(number)\n    return dec\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero1(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero2(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero3(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero4(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero5(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero6(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero7(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero8(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\nfunc BelowZero9(operations []int) bool {"}
{"task_id": "Go/4", "generation": "\n    var sum float64\n    for _, number := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\n    var totalDeviation float64\n    for _, number := range numbers {\n        totalDeviation += math.Abs(number - mean)\n    }\n\n    return totalDeviation / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n    if len(numbers) == 0 {\n        return []int{}\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n    for i, num := range numbers {\n        result = append(result, num)\n        if i < len(numbers)-1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    maxLevel := 0\n    currentLevel := 0\n\n    for _, char := range paren_string {\n        if char == '(' {\n            currentLevel++\n            if currentLevel > maxLevel {\n                maxLevel = currentLevel\n            }\n        } else if char == ')' {\n            currentLevel--\n        } else if char == ' ' {\n            if maxLevel > 0 {\n                levels = append(levels, maxLevel)\n                maxLevel = 0\n            }\n            currentLevel = 0\n        }\n    }\n\n    if maxLevel > 0 {\n        levels = append(levels, maxLevel)\n    }\n\n    return levels\n}\n\n"}
{"task_id": "Go/7", "generation": "\n    var filteredList []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            filteredList = append(filteredList, str)\n        }\n    }\n    return filteredList\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    return [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    maxSoFar := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    for i := 0; i < len(str); i++ {\n        if IsPalindrome(str[i:]) {\n            return str + strings.Reverse(str[:i])\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings[1:] {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var result []string\n    for i := 1; i <= len(str); i++{\n        result = append(result, str[:i])\n    }\n    return result\n}\nfunc AllSuffixes(str string) []string{\n    var result []string\n    for i := len(str); i > 0; i--{\n        result = append(result, str[i-1:])\n    }\n    return result\n}\nfunc AllSubstrings(str string) []string{\n    var result []string\n    for i := 1; i <= len(str); i++{\n        for j := i; j <= len(str); j++{\n            result = append(result, str[i-1:j])\n        }\n    }\n    return result\n}\nfunc AllPrefixes(str string) []string{\n    var result []string\n    for i := 1; i <= len(str); i++{\n        result = append(result, str[:i])\n    }\n    return result\n}\nfunc AllSuffixes(str string) []string{\n    var result []string\n    for i := len(str); i > 0; i--{\n        result = append(result, str[i-1:])\n    }\n    return result\n}\nfunc AllSubstrings(str string) []string{\n    var result []string\n    for i := 1; i <= len(str); i++{\n        for j := i; j <= len(str); j++{\n            result = append(result, str[i-1:j])\n        }\n    }\n    return result\n}\nfunc AllPrefixes(str string) []string{\n    var result []string\n    for i := 1; i <= len(str); i++{\n        result = append(result, str[:i])\n    }\n    return result\n}\nfunc AllSuffixes(str string) []string{\n    var result []string\n    for i := len(str); i > 0; i--{\n        result = append(result, str[i-1:])\n    }\n    return result\n}\nfunc AllSubstrings(str string) []string{\n    var result"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    str = strings.ReplaceAll(str, \" \", \"\")\n    charMap := make(map[rune]bool)\n    for _, char := range str {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n>>> count_inct_acters('Jerry')\n3\n>>> count_inct_acters('Jerry!')\n3\n>>> count_inct_acters('Jerry!!!')\n3\n>>> count_inct_acters('Jerry?')\n3\n>>> count_inct_acters('Jerry.')\n3\n>>> count_inct_acters('Jerry,')\n3\n>>> count_inct_acters('Jerry;')\n3\n>>> count_inct_acters('Jerry:')\n3\n>>> count_inct_acters('Jerry!')\n3\n>>> count_inct_acters('Jerry?')\n3\n>>> count_inct_acters('Jerry.')\n3\n>>> count_inct_acters('Jerry,')\n3\n>>> count_inct_acters('Jerry;')\n3\n>>> count_inct_acters('Jerry:')\n3\n>>> count_inct_acters('Jerry!')\n3\n>>> count_inct_acters('Jerry?')\n3\n>>> count_inct_acters('Jerry.')\n3\n>>> count_inct_acters('Jerry,')\n3\n>>> count_inct_acters('Jerry;')\n3\n>>> count_inct_acters('Jerry:')\n3\n>>> count_inct_acters('Jerry!')\n3\n>>> count_inct_acters('Jerry?')\n3\n>>> count_inct_acters('Jerry.')\n3\n>>> count_inct_acters('Jerry,')\n3\n>>> count_inct_acters('Jerry;')\n3\n>>> count_inct_acters('Jerry:')\n3"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    for i := 0; i < len(music_string); i++ {\n        switch music_string[i] {\n        case 'o':\n            if music_string[i+1] == '|' {\n                result = append(result, 2)\n                i++\n            } else {\n                result = append(result, 1)\n            }\n        case '.':\n            result = append(result, 1)\n        case '|':\n            result = append(result, 1)\n        }\n    }\n    return result\n}\nfunc ParseMusic(music_string string) []int{\n    var result []int\n    for i := 0; i < len(music_string); i++ {\n        switch music_string[i] {\n        case 'o':\n            if music_string[i+1] == '|' {\n                result = append(result, 2)\n                i++\n            } else {\n                result = append(result, 1)\n            }\n        case '.':\n            result = append(result, 1)\n        case '|':\n            result = append(result, 1)\n        }\n    }\n    return result\n}\nfunc ParseMusic(music_string string) []int{\n    var result []int\n    for i := 0; i < len(music_string); i++ {\n        switch music_string[i] {\n        case 'o':\n            if music_string[i+1] == '|' {\n                result = append(result, 2)\n                i++\n            } else {\n                result = append(result, 1)\n            }\n        case '.':\n            result = append(result, 1)\n        case '|':\n            result = append(result, 1)\n        }\n    }\n    return result\n}\nfunc ParseMusic(music_string string) []int{\n    var result []int\n    for i := 0; i < len(music_string); i++ {\n        switch music_string[i] {\n        case 'o':\n            if"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i:=0;i<len(str);i++{\n        if str[i:i+len(substring)] == substring{\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/19", "generation": "\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n//>>> sort_numbers('three five one')\n//'one three five'\nfunc sort_numbers(numbers string) string {\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n//>>> sort_numbers('seven eight zero')\n//'zero seven eight'\nfunc sort_numbers(numbers string) string {\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n//>>> sort_numbers('four six two')\n//'two four six'\nfunc sort_numbers(numbers string) string {\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n//>>> sort_numbers('nine three five')\n//'three five nine'\nfunc sort_numbers(numbers string) string {\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n//>>> sort_numbers('one eight seven')\n//'one seven eight'\nfunc sort_numbers(numbers string) string {\n    nums := strings.Fields(numbers)\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers) // Sort the slice in ascending order\n    minDiff := math.MaxFloat64\n    closestPair := [2]float64{0, 0}\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair[0] = numbers[i]\n            closestPair[1] = numbers[i+1]\n        }\n    }\n\n    return closestPair\n}\n"}
{"task_id": "Go/21", "generation": "\n    maxNumber := numbers[0]\n    for _, number := range numbers {\n        if number > maxNumber {\n            maxNumber = number\n        }\n    }\n    for i, number := range numbers {\n        numbers[i] = number / maxNumber\n    }\n    return numbers\n}\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/23", "generation": "\n    count := 0\n    for range str {\n        count++\n    }\n    return count\n}\n\n"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i >= 1; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n"}
{"task_id": "Go/25", "generation": "\n    var factors []int\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    occurrence := make(map[int]int)\n    result := []int{}\n\n    for _, num := range numbers {\n        occurrence[num]++\n    }\n\n    for _, num := range numbers {\n        if occurrence[num] == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\nfunc RemoveDuplicates(numbers []int) []int {\n    occurrence := make(map[int]int)\n    result := []int{}\n\n    for _, num := range numbers {\n        occurrence[num]++\n    }\n\n    for _, num := range numbers {\n        if occurrence[num] == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\nfunc RemoveDuplicates(numbers []int) []int {\n    occurrence := make(map[int]int)\n    result := []int{}\n\n    for _, num := range numbers {\n        occurrence[num]++\n    }\n\n    for _, num := range numbers {\n        if occurrence[num] == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\nfunc RemoveDuplicates(numbers []int) []int {\n    occurrence := make(map[int]int)\n    result := []int{}\n\n    for _, num := range numbers {\n        occurrence[num]++\n    }\n\n    for _, num := range numbers {\n        if occurrence[num] == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\nfunc RemoveDuplicates(numbers []int) []int {\n    occurrence := make(map[int]int)\n    result := []int{}\n\n    for _, num := range numbers {\n        occurrence[num]++\n    }\n\n    for _, num := range numbers {\n        if occurrence[num] == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\nfunc RemoveDuplicates(numbers []int) []int {\n    occurrence := make(map[int]int)\n    result :="}
{"task_id": "Go/27", "generation": "\n    var result string\n    for _, char := range str {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/28", "generation": "\n    concatenated := \"\"\n    for _, str := range strings {\n        concatenated += str\n    }\n    return concatenated\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive\n}\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n    }\n    if n%2 == 0 || n%3 == 0 {\n        return false\n    }\n    i := 5\n    for i*i <= n {\n        if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    if len(xs) % 2 == 1 {\n        return math.NaN()\n    }\n    left, right := -1000.0, 1000.0\n    for {\n        mid := (left + right) / 2.0\n        if Poly(xs, left) * Poly(xs, mid) <= 0 {\n            right = mid\n        } else {\n            left = mid\n        }\n        if math.Abs(right - left) < 1e-6 {\n            return right\n        }\n    }\n}\nfunc FindZeroes(xs []int) []float64 {\n    if len(xs) % 2 == 1 {\n        return []float64{}\n    }\n    left, right := -1000.0, 1000.0\n    var result []float64\n    for {\n        mid := (left + right) / 2.0\n        if Poly(xs, left) * Poly(xs, mid) <= 0 {\n            right = mid\n        } else {\n            left = mid\n        }\n        if math.Abs(right - left) < 1e-6 {\n            result = append(result, right)\n            left, right = right, 1000.0\n        }\n    }\n    return result\n}\nfunc FindZeroes2(xs []int) []float64 {\n    if len(xs) % 2 == 1 {\n        return []float64{}\n    }\n    left, right := -1000.0, 1000.0\n    var result []float64\n    for {\n        mid := (left + right) / 2.0\n        if Poly(xs, left) * Poly(xs, mid) <= 0 {\n            right = mid\n        } else {\n            left = mid\n        }\n        if math.Abs(right - left) < 1e-6 {\n            result = append(result, right)\n            left, right = right, 1000.0\n        }\n    }\n    return result\n}\nfunc FindZeroes3(xs []int) []float64 {\n    if len(xs) % 2 == 1 {\n        return []float64{}\n    }\n    left"}
{"task_id": "Go/33", "generation": "\n    // Create a slice to store the indices of elements divisible by 3\n    indices := make([]int, 0)\n    for i, v := range l {\n        if i%3 == 0 && v%3 == 0 {\n            indices = append(indices, i)\n        }\n    }\n\n    // Sort the indices slice\n    sort.Ints(indices)\n\n    // Create a new slice to store the sorted elements\n    sorted := make([]int, len(l))\n    for i, v := range l {\n        if i%3 == 0 && v%3 == 0 {\n            sorted[indices[i/3]] = v\n        } else {\n            sorted[i] = v\n        }\n    }\n\n    return sorted\n}\n"}
{"task_id": "Go/34", "generation": "\n    sort.Ints(l)\n    unique := make([]int, 0)\n    for i, v := range l {\n        if i == 0 || v != l[i-1] {\n            unique = append(unique, v)\n        }\n    }\n    return unique\n}\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/36", "generation": "\n    count := 0\n    for i := 1; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n}"}
{"task_id": "Go/37", "generation": "\n    // Create a slice to hold the even-indexed elements\n    evenIndexed := make([]int, 0)\n    for i, v := range l {\n        if i%2 == 0 {\n            evenIndexed = append(evenIndexed, v)\n        }\n    }\n\n    // Sort the even-indexed elements\n    sort.Ints(evenIndexed)\n\n    // Create a new slice to hold the sorted list\n    sortedList := make([]int, len(l))\n    j := 0\n    for i := range l {\n        if i%2 == 0 {\n            sortedList[i] = evenIndexed[j]\n            j++\n        } else {\n            sortedList[i] = l[i]\n        }\n    }\n\n    return sortedList\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n    var i, j, count, fib int\n    count = 0\n    i = 0\n    j = 1\n    for {\n        fib = i + j\n        i = j\n        j = fib\n        if isPrime(fib) {\n            count++\n            if count == n {\n                return fib\n            }\n        }\n    }\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtn := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtn; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/40", "generation": "\n    sort.Ints(l) // Sort the list in ascending order\n    for i := 0; i < len(l)-2; i++ {\n        left, right := i+1, len(l)-1\n        for left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/41", "generation": "\n    // Since each car moving left to right will collide with each car moving right to left,\n    // the total number of collisions will be n * n.\n    return n * n\n}\nThe function takes an integer n as input, representing the number of cars moving left to right and right to left. It returns the total number of collisions that will occur.\n\nThe time complexity of this function is O(1), as it performs a constant amount of work regardless of the size of the input. The space complexity is also O(1), as it uses a constant amount of space to store the input and output values."}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n"}
{"task_id": "Go/43", "generation": "\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if base < 2 || base > 9 {\n        return \"\"\n    }\n    result := \"\"\n    for x > 0 {\n        remainder := x % base\n        result = strconv.Itoa(remainder) + result\n        x = x / base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n}\n"}
{"task_id": "Go/47", "generation": "\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return float64(l[n/2-1]+l[n/2]) / 2.0\n    }\n    return float64(l[n/2])\n}\n"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n%2 == 0 {\n        return Modp(n/2, p) * Modp(n/2, p)\n    } else {\n        return p * Modp((n-1)/2, p) * Modp((n-1)/2, p)\n    }\n}\nfunc Modp(n int,p int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n%2 == 0 {\n        return Modp(n/2, p) * Modp(n/2, p)\n    } else {\n        return p * Modp((n-1)/2, p) * Modp((n-1)/2, p)\n    }\n}\nfunc Modp(n int,p int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n%2 == 0 {\n        return Modp(n/2, p) * Modp(n/2, p)\n    } else {\n        return p * Modp((n-1)/2, p) * Modp((n-1)/2, p)\n    }\n}\nfunc Modp(n int,p int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n%2 == 0 {\n        return Modp(n/2, p) * Modp(n/2, p)\n    } else {\n        return p * Modp((n-1)/2, p) * Modp((n-1)/2, p)\n    }\n}\nfunc Modp(n int,p int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n%2 == 0 {\n        return Modp(n/2, p) * Modp("}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _, num := range l {\n        if num >= t {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n\nfunc Add2(x int, y int) int {\n    return Add(x, y)\n}\n\n"}
{"task_id": "Go/54", "generation": "\n    if len(s0) != len(s1) {\n        return false\n    }\n    count := make(map[rune]int)\n    for _, c := range s0 {\n        count[c]++\n    }\n    for _, c := range s1 {\n        if count[c] == 0 {\n            return false\n        }\n        count[c]--\n    }\n    return true\n}\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n2)\n   1   >>> fib(10)\n  55\n  2)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n3)\n   1   >>> fib(10)\n  55\n  3)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n4)\n   1   >>> fib(10)\n  55\n  4)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n5)\n   1   >>> fib(10)\n  55\n  5)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n6)\n   1   >>> fib(10)\n  55\n  6)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n7)\n   1   >>> fib(10)\n  55\n  7)\n   1   >>> fib(8)\n  21\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n8)\n   1   >>> fib"}
{"task_id": "Go/56", "generation": "\n    // Your code here\n}\n*/\nfunc CorrectBracketing(brackets string) bool {\n    // Your code here\n}\n"}
{"task_id": "Go/57", "generation": "\n    if len(l) < 2 {\n        return true\n    }\n\n    increasing := l[1] >= l[0]\n    decreasing := l[1] <= l[0]\n\n    for i := 2; i < len(l); i++ {\n        if increasing && l[i] < l[i-1] {\n            return false\n        }\n        if decreasing && l[i] > l[i-1] {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/58", "generation": "\n    sort.Ints(l1)\n    sort.Ints(l2)\n    var common []int\n    i, j := 0, 0\n    for i < len(l1) && j < len(l2) {\n        if l1[i] == l2[j] {\n            common = append(common, l1[i])\n            i++\n            j++\n        } else if l1[i] < l2[j] {\n            i++\n        } else {\n            j++\n        }\n    }\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n    var largest int = -1\n    // Divide n by 2 to remove all even factors\n    for n%2 == 0 {\n        largest = 2\n        n = n / 2\n    }\n    // n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i := 3; i <= int(math.Sqrt(float64(n))); i = i + 2 {\n        // While i divides n, remove i and set largest to i\n        for n%i == 0 {\n            largest = i\n            n = n / i\n        }\n    }\n    // This condition is to handle the case when n is a prime number greater than 2\n    if n > 2 {\n        largest = n\n    }\n    return largest\n}\n"}
{"task_id": "Go/60", "generation": "\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    // Initialize a counter for tracking the balance of brackets.\n    balance := 0\n\n    // Iterate over each character in the brackets string.\n    for _, char := range brackets {\n        // If the character is an opening bracket, increment the balance.\n        if char == '(' {\n            balance++\n        } else if char == ')' {\n            // If the character is a closing bracket, decrement the balance.\n            balance--\n        }\n\n        // If the balance goes negative, it means there's a closing bracket without a matching opening bracket.\n        if balance < 0 {\n            return false\n        }\n    }\n\n    // If the balance is zero, it means every opening bracket has a matching closing bracket.\n    return balance == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n    if len(xs) <= 1 {\n        return []int{}\n    }\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 15\n    }\n    if n == 7 {\n        return 29\n    }\n    if n == 8 {\n        return 56\n    }\n    if n == 9 {\n        return 108\n    }\n    if n == 10 {\n        return 196\n    }\n    if n == 11 {\n        return 396\n    }\n    if n == 12 {\n        return 688\n    }\n    if n == 13 {\n        return 1184\n    }\n    if n == 14 {\n        return 1976\n    }\n    if n == 15 {\n        return 3196\n    }\n    if n == 16 {\n        return 5168\n    }\n    if n == 17 {\n        return 8320\n    }\n    if n == 18 {\n        return 13448\n    }\n    if n == 19 {\n        return 21760\n    }\n    if n == 20 {\n        return 35232\n    }\n    if n == 21 {\n        return 57024\n    }\n    if n == 22 {\n        return 92240\n    }\n    if n == 23 {\n        return 149808\n    }\n    if n == 24 {\n        return 241536\n    }\n    if n == 25 {\n        return 390816\n    }\n    if n == 26 {\n        return 632704\n    }\n    if n == 27 {\n        return 1024640\n    }\n    if n == 28 {\n        return 1658880\n    }\n    if n == 29 {\n        return 2672640\n    }\n    if n == 30 {\n        return 433"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiouyAEIOUY\"\n    count := 0\n    s = strings.TrimSpace(s)\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    if strings.HasSuffix(s, \"y\") || strings.HasSuffix(s, \"Y\") {\n        count++\n    }\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    if x == 0 {\n        return \"0\"\n    }\n    if shift == 0 {\n        return strconv.Itoa(x)\n    }\n    str := strconv.Itoa(x)\n    n := len(str)\n    shift = shift % n\n    if shift == 0 {\n        return str\n    }\n    return str[n-shift:] + str[:n-shift]\n}\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\nfunc CircularShiftReverse(x int, shift int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    if shift == 0 {\n        return strconv.Itoa(x)\n    }\n    str := strconv.Itoa(x)\n    n := len(str)\n    shift = shift % n\n    if shift == 0 {\n        return str\n    }\n    return Reverse(str[n-shift:] + str[:n-shift])\n}\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, v := range x {\n        if v >= 'A' && v <= 'Z' {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "Go/67", "generation": "\n\t// split the string into two parts\n\tparts := strings.Split(s, \" \")\n\t// convert the first part to an integer\n\tapples, _ := strconv.Atoi(parts[0])\n\t// convert the second part to an integer\n\toranges, _ := strconv.Atoi(parts[3])\n\t// return the number of mangoes\n\treturn n - apples - oranges\n}"}
{"task_id": "Go/68", "generation": "\n    \n}\"\nfunc Pluck(arr []int) []int {\n    min := math.MaxInt64\n    minIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < min {\n            min = v\n            minIndex = i\n        }\n    }\n    if minIndex == -1 {\n        return []int{}\n    }\n    return []int{min, minIndex}\n}"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    max := 0\n    for _, num := range lst {\n        if num > 0 {\n            freq[num]++\n            if freq[num] > max {\n                max = freq[num]\n            }\n        }\n    }\n    if max == 0 {\n        return 1\n    }\n    return max\n}\n"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    res := make([]int, len(lst))\n    for i, j := 0, len(lst)-1; i <= j; i, j = i+1, j-1 {\n        if i == j {\n            res[i] = lst[i]\n        } else {\n            res[i], res[j] = lst[j], lst[i]\n        }\n    }\n    return res\n}\n"}
{"task_id": "Go/71", "generation": "\n    // your code here\n}\n"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  "}
{"task_id": "Go/73", "generation": "\n    count := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-1-i] {\n            count++\n        }\n    }\n    return count\n}\nplease write code comments in Chinese."}
{"task_id": "Go/74", "generation": "\n    var result []string\n    for i := range lst1 {\n        for j := range lst2 {\n            if len(lst1[i])+len(lst2[j]) < len(lst1[j])+len(lst2[i]) {\n                result = append(result, lst1[i])\n                result = append(result, lst2[j])\n            } else {\n                result = append(result, lst2[i])\n                result = append(result, lst1[j])\n            }\n        }\n    }\n    return result\n}\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   "}
{"task_id": "Go/75", "generation": "\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultiplyPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    primes := []int{2, 3, 5}\n    count := 0\n    for _, prime := range primes {\n        for n%prime == 0 {\n            n /= prime\n            count++\n        }\n    }\n    return count == 3\n}\n\nfunc IsMultiplyPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    primes := []int{2, 3, 5}\n    count := 0\n    for _, prime := range primes {\n        for n%prime == 0 {\n            n /= prime\n            count++\n        }\n    }\n    return count == 3 && n == 1\n}\n\nfunc IsMultiplyPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    primes := []int{2, 3, 5}\n    count := 0\n    for _, prime := range primes {\n        for n%prime == 0 {\n            n /= prime\n            count++\n        }\n    }\n    return count == 3 && n == 1 && IsMultiplyPrime(n)\n}\n\nfunc IsMultiplyPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    primes := []int{2, 3, 5}\n    count := 0\n    for _, prime := range primes {\n        for n%prime == 0 {\n            n /= prime\n            count++\n        }\n    }\n    return count == 3 && n == 1 && IsMultiplyPrime(n) && IsMultiplyPrime(n)\n}\n\nfunc IsMultiplyPrime(n int) bool {\n    if n < 2 {\n        return false"}
{"task_id": "Go/76", "generation": "\n    if n==1{\n        return x==1\n    }\n    for i:=2;i<=x;i++{\n        if int(math.Pow(float64(n),float64(i)))==x{\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/77", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    cubeRoot := math.Cbrt(float64(a))\n    return cubeRoot == float64(int(cubeRoot))\n}\n"}
{"task_id": "Go/78", "generation": "\n    \n}\nI tried to solve it but could not do it. Can you solve it?"}
{"task_id": "Go/79", "generation": "\n\tif decimal == 0 {\n\t\treturn \"0db\"\n\t}\n\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn binary + \"db\"\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 2; i < len(s); i++ {\n        if s[i] != s[i-1] || s[i] != s[i-2] {\n            return false\n        }\n    }\n    return true\n}\n   "}
{"task_id": "Go/81", "generation": "\n    // your code here\n}\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1))) + int(math.Pow(10, float64(n-1))) - int(math.Pow(10, float64(n-2)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    var sum int\n    for _, v := range strconv.Itoa(N) {\n        i, _ := strconv.Atoi(string(v))\n        sum += i\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n    Examples:\n     add([, 2, 6, 7 ==>\nfunc Add(lst []int) int {\n    "}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = antiShuffleWord(word)\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc antiShuffleWord(word string) string {\n    chars := []rune(word)\n    sort.Slice(chars, func(i, j int) bool {\n        return chars[i] > chars[j]\n    })\n    return string(chars)\n}\n"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] < res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n    if (array[0]+array[len(array)-1])%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    } else {\n        sort.Ints(array)\n    }\n    return array\n}"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            shift := (char - 'a' + 2) % 26\n            result += string('a' + shift)\n        } else if char >= 'A' && char <= 'Z' {\n            shift := (char - 'A' + 2) % 26\n            result += string('A' + shift)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/90", "generation": "\n    // Remove duplicates\n    unique := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, num := range lst {\n        if _, ok := seen[num]; !ok {\n            unique = append(unique, num)\n            seen[num] = true\n        }\n    }\n\n    // Sort the unique numbers\n    sort.Ints(unique)\n\n    // Return the second smallest number if it exists\n    if len(unique) < 2 {\n        return nil\n    }\n    return unique[1]\n}\n"}
{"task_id": "Go/91", "generation": "\n    // Your code here\n}\n`I love this. I am happy. I am not happy. I am not happy at all.\"`\n`I am happy. I am not happy. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am not happy at all. I am"}
{"task_id": "Go/92", "generation": "\n    if x.(int)+y.(int) == z.(int) || x.(int)+z.(int) == y.(int) || y.(int)+z.(int) == x.(int) {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encodedMessage := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            index := strings.IndexRune(vowels, char)\n            if index+2 < len(vowels) {\n                encodedMessage += string(vowels[index+2])\n            } else {\n                encodedMessage += string(vowels[index+2-len(vowels)])\n            }\n        } else {\n            encodedMessage += string(char)\n        }\n    }\n    return encodedMessage\n}"}
{"task_id": "Go/94", "generation": "\n    maxSum := 0\n    for _, num := range lst {\n        sum := 0\n        for num > 0 {\n            digit := num % 10\n            sum += digit\n            num /= 10\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return true\n    }\n    hasLower := false\n    hasUpper := false\n    for key := range dict {\n        strKey, ok := key.(string)\n        if !ok {\n            return false\n        }\n        if strings.ToLower(strKey) == strKey {\n            hasLower = true\n        } else if strings.ToUpper(strKey) == strKey {\n            hasUpper = true\n        } else {\n            return false\n        }\n        if hasLower && hasUpper {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n    if n < 2 {\n        return []int{}\n    }\n    primes := make([]int, 0, n)\n    for i := 2; len(primes) < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/97", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    return int(math.Mod(float64(a), 10) * math.Mod(float64(b), 10))\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    // Convert the string to a float64\n    num, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n    }\n\n    // Get the fractional part of the number\n    fraction := num - math.Floor(num)\n\n    // If the number is equidistant from two integers, return the one that is farther from zero\n    if fraction == 0.5 || fraction == -0.5 {\n        if num > 0 {\n            return int(math.Ceil(num))\n        } else {\n            return int(math.Floor(num))\n        }\n    }\n\n    // Otherwise, round to the nearest integer\n    return int(math.Round(num))\n}\n"}
{"task_id": "Go/100", "generation": "\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile4\n   [4 6 8 10]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile5\n   [5 7 9 11 13]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile6\n   [6 8 10 12 14 16]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile7\n   [7 9 11 13 15 17 19]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile8\n   [8 10 12 14 16 18 20 22]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n   a_ile9\n   [9 11 13 15 17 19 21 23 25]\nfunc MakeAPile(n int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n+2*i)\n    }\n    return res\n}\n"}
{"task_id": "Go/101", "generation": "\n    // Split the string by commas and spaces\n    words := strings.FieldsFunc(s, func(r rune) bool {\n        return r == ',' || r == ' '\n    })\n\n    // Remove any empty strings that may result from consecutive delimiters\n    result := make([]string, 0)\n    for _, word := range words {\n        if word != \"\" {\n            result = append(result, word)\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return 1\n    }\n    for i := x; i <= y; i++ {\n        if i%2 != 0 {\n            return i\n        }\n    }\n    return 1\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := math.Round(float64(sum) / float64(m-n+1))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            return true\n        }\n        num /= 10\n    }\n    return false\n}\n"}
{"task_id": "Go/105", "generation": "\n    sort.Ints(arr)\n    var result []string\n    for i := len(arr) - 1; i >= 0; i-- {\n        switch arr[i] {\n        case 1:\n            result = append(result, \"One\")\n        case 2:\n            result = append(result, \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n        case 8:\n            result = append(result, \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n        default:\n            continue\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/106", "generation": "\n    var res []int\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            res = append(res, factorial(i))\n        } else {\n            res = append(res, sum(i))\n        }\n    }\n    return res\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    return (n * (n + 1)) / 2\n}\n"}
{"task_id": "Go/107", "generation": "\n    \n}\n*/\nfunc EvenOddPalindrome(n int) [2]int {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc isPalindrome(n int) bool {\n    s := strconv.Itoa(n)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumDigits(num) == 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    sort.Ints(arr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[i+1] {\n            for j := i + 1; j < len(arr); j++ {\n                if arr[j] == arr[i] {\n                    arr = append(arr[:i], arr[i+1:]...)\n                    arr = append(arr[j:], arr[:j]...)\n                    break\n                }\n            }\n            break\n        }\n    }\n    for i := 0; i < len(arr)-1; i++ {\n        if arr[i] > arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "Go/110", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/111", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/112", "generation": "\n    var res string\n    for i := range s {\n        if strings.Contains(c, string(s[i])) {\n            continue\n        }\n        res += string(s[i])\n    }\n    for i := range res {\n        if res[i] != res[len(res)-1-i] {\n            return [2]interface{}{res, false}\n        }\n    }\n    return [2]interface{}{res, true}\n}"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for i, str := range lst {\n        count := 0\n        for _, char := range str {\n            if char == '1' || char == '3' || char == '5' || char == '7' || char == '9' {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dnng %d of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for _, num := range nums {\n        currentSum += num\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    var max int\n    for i := range grid {\n        for j := range grid[i] {\n            if grid[i][j] == 1 {\n                max += int(math.Ceil(float64(capacity) / float64(grid[i][j])))\n            }\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        return countOnes(arr[i]) < countOnes(arr[j])\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if strings.Count(word, \"a\")+strings.Count(word, \"e\")+strings.Count(word, \"i\")+strings.Count(word, \"o\")+strings.Count(word, \"u\") == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\nfunc SelectWords(s string, n int) []string {\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if strings.Count(word, \"a\")+strings.Count(word, \"e\")+strings.Count(word, \"i\")+strings.Count(word, \"o\")+strings.Count(word, \"u\") == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\nfunc SelectWords(s string, n int) []string {\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if strings.Count(word, \"a\")+strings.Count(word, \"e\")+strings.Count(word, \"i\")+strings.Count(word, \"o\")+strings.Count(word, \"u\") == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\nfunc SelectWords(s string, n int) []string {\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if strings.Count(word, \"a\")+strings.Count(word, \"e\")+strings.Count(word, \"i\")+strings.Count(word, \"o\")+strings.Count(word, \"u\") == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\nfunc SelectWords(s string, n int) []string {\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if strings.Count(word, \"a\")+strings.Count(word, \""}
{"task_id": "Go/118", "generation": "\n    // your code here\n}\n*/\nfunc GetClosestVowel(word string) string {\n    var buffer bytes.Buffer\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n            buffer.WriteByte(word[i])\n            break\n        }\n    }\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n            buffer.WriteByte(word[i])\n            break\n        }\n    }\n    if buffer.Len() == 0 {\n        return \"\"\n    }\n    return buffer.String()\n}\n"}
{"task_id": "Go/119", "generation": "\n    // Your code here\n}\n*/\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    return result\n}\nfunc Minimum(arr []int, k int) []int {\n    sort.Ints(arr)\n    var result []int\n    for i := len(arr) - k; i < len(arr); i++ {\n        result = append(result, arr[i])\n    }\n    return result\n}\nfunc MaxMin(arr []int, k int) []int {\n    var result []int\n    result = append(result, Maximum(arr, k)...)\n    result = append(result, Minimum(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n    result = append(result, MaxMin(arr, k)...)\n    return result\n}\nfunc MaxMinK(arr []int, k int) []int {\n    var result []int\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 == 0 && v%2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]"}
{"task_id": "Go/123", "generation": "\n    var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/124", "generation": "\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    month, _ := strconv.Atoi(date[:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    return true\n}\nplease write some code comments to explain your code."}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Fields(txt)\n    } else {\n        var result []string\n        for i, c := range txt {\n            if (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') {\n                if (c-'a'+1)%2 != 0 {\n                    result = append(result, string(c))\n                }\n            }\n        }\n        return result\n    }\n}"}
{"task_id": "Go/126", "generation": "\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/127", "generation": "\n    // Your code here\n}\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 [2]int, interval2 [2]int) string {\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    if start > end {\n        return \"NO\"\n    }\n    length := end - start + 1\n    if isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    sum := 0\n    product := 1\n    for _, num := range arr {\n        if num < 0 {\n            sum += int(math.Abs(float64(num)))\n            product *= -1\n        } else if num > 0 {\n            sum += num\n        }\n    }\n    return sum * product\n}"}
{"task_id": "Go/129", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/130", "generation": "\n    if n == 0 {\n        return []float64{}\n    }\n    if n == 1 {\n        return []float64{1}\n    }\n    if n == 2 {\n        return []float64{1, 1}\n    }\n    if n == 3 {\n        return []float64{1, 1, 2}\n    }\n    if n == 4 {\n        return []float64{1, 1, 2, 4}\n    }\n    if n == 5 {\n        return []float64{1, 1, 2, 4, 3}\n    }\n    if n == 6 {\n        return []float64{1, 1, 2, 4, 3, 5}\n    }\n    if n == 7 {\n        return []float64{1, 1, 2, 4, 3, 5, 8}\n    }\n    if n == 8 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13}\n    }\n    if n == 9 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13, 21}\n    }\n    if n == 10 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13, 21, 34}\n    }\n    if n == 11 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13, 21, 34, 55}\n    }\n    if n == 12 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13, 21, 34, 55, 89}\n    }\n    if n == 13 {\n        return []float64{1, 1, 2, 4, 3, 5, 8, 13, 21, 34, 55, 89, 144}\n    }\n"}
{"task_id": "Go/131", "generation": "\n    if n == 0 {\n        return 0\n    }\n    sum := 0\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    if sum == 0 {\n        return 0\n    }\n    return sum\n}\nfunc OddProduct(n int) int {\n    if n == 0 {\n        return 0\n    }\n    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\nfunc OddProduct(n int) int {\n    if n == 0 {\n        return 0\n    }\n    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\nfunc OddProduct(n int) int {\n    if n == 0 {\n        return 0\n    }\n    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\nfunc OddProduct(n int) int {\n    if n == 0 {\n        return 0\n    }\n    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\nfunc OddProduct(n int) int {\n    if n == 0 {\n        return 0\n    }\n    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) > 0\n}\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, v := range lst {\n        sum += int(math.Pow(math.Ceil(v), 2))\n    }\n    return sum\n}"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := strings.TrimSpace(txt)[len(strings.TrimSpace(txt))-1]\n    if (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z') {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/135", "generation": "\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i\n        }\n    }\n    return -1\n}\n"}
{"task_id": "Go/136", "generation": "\n    var smallest, largest *int\n    for _, num := range lst {\n        if num < 0 {\n            if smallest == nil || num > *smallest {\n                smallest = &num\n            }\n        } else if num > 0 {\n            if largest == nil || num > *largest {\n                largest = &num\n            }\n        }\n    }\n    return [2]interface{}{smallest, largest}\n}\n"}
{"task_id": "Go/137", "generation": "\n    switch a.(type) {\n    case float64:\n        if b, ok := b.(float64); ok {\n            if a == b {\n                return nil\n            }\n        }\n    case string:\n        if b, ok := b.(string); ok {\n            a = strings.Replace(a.(string), \".\", \"\", -1)\n            b = strings.Replace(b, \".\", \"\", -1)\n            if a == b {\n                return nil\n            }\n        }\n    }\n    return a\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    // Check if the number is even\n    if n%2 != 0 {\n        return false\n    }\n    // Check if the number is greater than or equal to 8\n    if n < 8 {\n        return false\n    }\n    // Check if the number is a multiple of 4\n    if n%4 != 0 {\n        return false\n    }\n    // If all conditions are met, return true\n    return true\n}\nfunc IsEqualToSum(n int) bool {\n    // Check if the number is even\n    if n%2 != 0 {\n        return false\n    }\n    // Check if the number is greater than or equal to 8\n    if n < 8 {\n        return false\n    }\n    // Check if the number is a multiple of 4\n    if n%4 != 0 {\n        return false\n    }\n    // If all conditions are met, return true\n    return true\n}\nfunc IsEqualToSumOdd(n int) bool {\n    // Check if the number is odd\n    if n%2 == 0 {\n        return false\n    }\n    // Check if the number is greater than or equal to 9\n    if n < 9 {\n        return false\n    }\n    // Check if the number is a multiple of 3\n    if n%3 != 0 {\n        return false\n    }\n    // If all conditions are met, return true\n    return true\n}\nfunc IsEqualToSum(n int) bool {\n    // Check if the number is even\n    if n%2 != 0 {\n        return false\n    }\n    // Check if the number is greater than or equal to 8\n    if n < 8 {\n        return false\n    }\n    // Check if the number is a multiple of 4\n    if n%4 != 0 {\n        return false\n    }\n    // If all conditions are met, return true\n    return true\n}\nfunc IsEqualToSum(n int) bool {\n    // Check if the number is even\n    if n%2 != 0 {\n        return false\n    }\n    // Check if the number is greater than or equal to 8\n    if n < 8 {\n        "}
{"task_id": "Go/139", "generation": "\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n   \n   The function will receive an integer input and should return the special\n   fact of integer\nfunc SpecialFactorial(n int) int {\n    // Your code here\n}\n"}
{"task_id": "Go/140", "generation": "\n    var result string\n    var count int\n    for _, char := range text {\n        if char == ' ' {\n            count++\n        } else {\n            if count > 2 {\n                result += \"_\" + strconv.Itoa(count)\n            } else if count > 0 {\n                result += strings.Repeat(\"_\", count)\n            }\n            result += string(char)\n            count = 0\n        }\n    }\n    if count > 2 {\n        result += \"_\" + strconv.Itoa(count)\n    } else if count > 0 {\n        result += strings.Repeat(\"_\", count)\n    }\n    return result\n}\n"}
{"task_id": "Go/141", "generation": "\n    // Split the file name by the dot\n    parts := strings.Split(file_name, \".\")\n    // Check if there is only one dot in the file name\n    if len(parts) != 2 {\n        return \"No\"\n    }\n    // Check if the substring before the dot is empty and starts with a letter\n    if parts[0] == \"\" || !strings.HasPrefix(parts[0], \"a\") || !strings.HasPrefix(parts[0], \"b\") || !strings.HasPrefix(parts[0], \"c\") || !strings.HasPrefix(parts[0], \"d\") || !strings.HasPrefix(parts[0], \"e\") || !strings.HasPrefix(parts[0], \"f\") || !strings.HasPrefix(parts[0], \"g\") || !strings.HasPrefix(parts[0], \"h\") || !strings.HasPrefix(parts[0], \"i\") || !strings.HasPrefix(parts[0], \"j\") || !strings.HasPrefix(parts[0], \"k\") || !strings.HasPrefix(parts[0], \"l\") || !strings.HasPrefix(parts[0], \"m\") || !strings.HasPrefix(parts[0], \"n\") || !strings.HasPrefix(parts[0], \"o\") || !strings.HasPrefix(parts[0], \"p\") || !strings.HasPrefix(parts[0], \"q\") || !strings.HasPrefix(parts[0], \"r\") || !strings.HasPrefix(parts[0], \"s\") || !strings.HasPrefix(parts[0], \"t\") || !strings.HasPrefix(parts[0], \"u\") || !strings.HasPrefix(parts[0], \"v\") || !strings.HasPrefix(parts[0], \"w\") || !strings.HasPrefix(parts[0], \"x\") || !strings.HasPrefix(parts[0], \"y\") || !strings.HasPrefix(parts[0], \"z\") {\n        return \"No\"\n    }\n    // Check if the substring after the dot is one of ['',exe 'dll']\n    if parts[1] != \"\" && parts[1] != \"exe\" && parts[1] != \"dll\" {\n        return"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 && i%4 == 0 {\n            sum += int(math.Pow(float64(v), 2))\n        }\n    }\n    return sum\n}\n\"\nfunc SumSquares(lst []int) int {\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 && i%4 == 0 {\n            sum += int(math.Pow(float64(v), 2))\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var result []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nplease write some markdown instructions for the above code snippet."}
{"task_id": "Go/144", "generation": "\n    // your code here\n}"}
{"task_id": "Go/145", "generation": "\n    sort.Slice(nums, func(i, j int) bool {\n        sumI, sumJ := sumDigits(nums[i]), sumDigits(nums[j])\n        if sumI == sumJ {\n            return i < j\n        }\n        return sumI < sumJ\n    })\n    return nums\n}\n\nfunc sumDigits(n int) int {\n    if n < 0 {\n        n = -n\n    }\n    sum := 0\n    for _, c := range strconv.Itoa(n) {\n        sum += int(c - '0')\n    }\n    return sum\n}\n*/\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            str := strconv.Itoa(num)\n            firstDigit, _ := strconv.Atoi(string(str[0]))\n            lastDigit, _ := strconv.Atoi(string(str[len(str)-1]))\n            if firstDigit%2 != 0 && lastDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n    \n}\n"}
{"task_id": "Go/148", "generation": "\n    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n    for i, p := range planets {\n        if p == planet1 || p == planet2 {\n            continue\n        }\n        if (planets[i] < planet1 && planets[i] > planet2) || (planets[i] > planet1 && planets[i] < planet2) {\n            result = append(result, planets[i])\n        }\n    }\n    return result\n}\nfunc Bf(planet1, planet2 string) []string {\n    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n    for i, p := range planets {\n        if p == planet1 || p == planet2 {\n            continue\n        }\n        if (planets[i] < planet1 && planets[i] > planet2) || (planets[i] > planet1 && planets[i] < planet2) {\n            result = append(result, planets[i])\n        }\n    }\n    return result\n}\nfunc Bf(planet1, planet2 string) []string {\n    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n    for i, p := range planets {\n        if p == planet1 || p == planet2 {\n            continue\n        }\n        if (planets[i] < planet1 && planets[i] > planet2) || (planets[i] > planet1 && planets[i] < planet2) {\n            result = append(result, planets[i])\n        }\n    }\n    return result\n}\nfunc Bf(planet1, planet2 string) []string {\n    planets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn"}
{"task_id": "Go/149", "generation": "\n    var even []string\n    for _, v := range lst {\n        if len(v)%2 == 0 {\n            even = append(even, v)\n        }\n    }\n    sort.Slice(even, func(i, j int) bool {\n        if len(even[i]) == len(even[j]) {\n            return even[i] < even[j]\n        }\n        return len(even[i]) < len(even[j])\n    })\n    return even\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot\n\n//"}
{"task_id": "Go/150", "generation": "\n    if n == 0 {\n        return y\n    } else {\n        return x\n    }\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && math.Mod(num, 2) != 0 {\n            sum += int(math.Pow(num, 2))\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i:=0;i<len(game);i++{\n        if game[i]==guess[i]{\n            result=append(result,0)\n        }else{\n            result=append(result,int(math.Abs(float64(game[i]-guess[i]))))\n        }\n    }\n    return result\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot"}
{"task_id": "Go/153", "generation": "\n    var strongest string\n    var max_strength int\n    for _, extension := range extensions {\n        upper_count := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                upper_count++\n            }\n        }\n        lower_count := len(extension) - upper_count\n        strength := int(math.Abs(float64(upper_count - lower_count)))\n        if strength > max_strength {\n            max_strength = strength\n            strongest = extension\n        }\n    }\n    return class_name + \".\" + strongest\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc CpatternCheckab(a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc Cpattern_checkab(a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc Cpattern_check(a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc Cpattern_(a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc Cyc_ (a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\nfunc Cpattern(a , b string) bool {\n    if len(a) != len(b) {\n        return false\n    "}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    numStr := strconv.Itoa(num)\n    for _, char := range numStr {\n        digit, _ := strconv.Atoi(string(char))\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}"}
{"task_id": "Go/156", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/157", "generation": "\n    // Your code here\n}\n  Notes\n    The input integers will be positive numbers.\n    You may assume the input is always valid.\n    A more advanced version of this kata can be found here:\n    https://www.codewars.com/kata/is-this-a-triangle-number-advanced/javascript\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n  def right_angle_triangle(a, b, c):\n    # Your code here\n  \"\"\"\n  \"\"\"\n"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > maxUnique {\n            maxUnique = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n"}
{"task_id": "Go/159", "generation": "\n    // your code here\n}\n  Examples:\n  eat(4, 9, 10) -> [4]\n  eat(1, 10, 0) -> [1]\n  eat(11, 5, 6) -> [6]\n  eat(2, 11, 5) -> [7]\n  eat(1, 1, 2) -> [2]\n  eat(7, 3, 10) -> [4]\n  eat(10, 4, 9) -> [5]\n  eat(3, 2, 1) -> [2]\n  eat(0, 1000, 1000) -> [1000]\n  eat(1000, 1000, 1000) -> [2000]\n  eat(500, 500, 1000) -> [1000]\n  eat(1000, 500, 500) -> [500]\n  eat(500, 1000, 500) -> [1000]\n  eat(1000, 1000, 500) -> [1500]\n  eat(500, 1000, 1000) -> [1500]\n  eat(1000, 500, 1000) -> [1500]\n  eat(1000, 1000, 1000) -> [2000]\n  eat(500, 500, 500) -> [1000]\n  eat(1000, 500, 500) -> [1500]\n  eat(500, 1000, 500) -> [1500]\n  eat(1000, 1000, 500) -> [2000]\n  eat(500, 500, 500) -> [1000]\n  eat(1000, 500, 500) -> [1500]\n  eat(500, 1000, 500) -> [1500]\n  eat(1000, 1000, 500) -> [2000]\n  eat(500, 500, 500) -> [1000]\n  eat(1000, 500, 500) -> [1500]\n  eat(500, 1000, 500) -> [1500]\n  eat(1000"}
{"task_id": "Go/160", "generation": "\n    \n}\n"}
{"task_id": "Go/161", "generation": "\n    var res string\n    var hasLetter bool\n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            hasLetter = true\n            if v >= 'a' && v <= 'z' {\n                res += string(v - 32)\n            } else {\n                res += string(v + 32)\n            }\n        } else {\n            res += string(v)\n        }\n    }\n    if !hasLetter {\n        return reverse(s)\n    }\n    return res\n}\n\nfunc reverse(s string) string {\n    var res string\n    for i := len(s) - 1; i >= 0; i-- {\n        res += string(s[i])\n    }\n    return res\n}\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers(a, b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers(a, b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers(a, b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers(a, b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers(a, b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\nfunc GenerateIntegers"}
