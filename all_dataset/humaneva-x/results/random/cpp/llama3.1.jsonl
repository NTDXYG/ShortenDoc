{"task_id": "CPP/0", "generation": "\n    for (int i = 0; i < numbers.size() - 1; i++){\n        if (abs(numbers[i] - numbers[i + 1]) <= threshold){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string current_group;\n    int open_count = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            open_count++;\n        } else if (paren_string[i] == ')'){\n            open_count--;\n            if (open_count == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n        current_group += paren_string[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int dec = (int)number;\n    float leftover = number - dec;\n    return leftover;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        if(operations[i] < 0){\n            balance += operations[i];\n        }else{\n            balance -= operations[i];\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += abs(numbers[i] - mean(numbers));\n    }\n    return sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i < numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> max_levels;\n    int current_level = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            current_level += 1;\n        } else if (paren_string[i] == ')'){\n            current_level -= 1;\n            if (current_level < 0){\n                current_level = 0;\n            }\n        }\n        max_levels.push_back(current_level);\n    }\n    return max_levels;\n}\n"}
{"task_id": "CPP/7", "generation": "\n  vector<string> result;\n  for (int i = 0; i < strings.size(); i++){\n    if (strings[i].find(substring) != string::npos){\n      result.push_back(strings[i]);\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    vector<int> result;\n    result.push_back(sum);\n    result.push_back(product);\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "\n  vector<int> maxs;\n  int max = numbers[0];\n  maxs.push_back(max);\n  for(int i = 1; i < numbers.size(); i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    maxs.push_back(max);\n  }\n  return maxs;\n}\n"}
{"task_id": "CPP/10", "generation": "\n  def make_palindrome(s):\n    n = len(s)\n    for i in range(n):\n      for j in range(i + 1, n + 1):\n        if s[i:j] == s[i:j][::-1]:\n          return s[i:j]\n    return s\n\n# Test the function\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('a'))  # 'a'\nprint(make_palindrome('ab'))  # 'a'\nprint(make_palindrome('abc'))  # 'a'\nprint(make_palindrome('abcd'))  # 'a'\nprint(make_palindrome('abcda'))  # 'a'\nprint(make_palindrome('abcddcba'))  # 'abcddcba'\nprint(make_palindrome('catac'))  # 'catac'\nprint(make_palindrome('indromecat'))  # 'indromecat'\nprint(make_palindrome('indromecatindromecat'))  # 'indromecatindromecat'  # noqa: E501\n"}
{"task_id": "CPP/11", "generation": "\n    string c;\n    for(int i=0;i<a.length();i++){\n        if(a[i]=='0' && b[i]=='1')\n            c+='1';\n        else if(a[i]=='1' && b[i]=='0')\n            c+='1';\n        else\n            c+='0';\n    }\n    return c;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size() == 0){\n        return NULL;\n    }\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n  while (b != 0){\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n"}
{"task_id": "CPP/14", "generation": "\n  vector<string> prefixes;\n  for(int i=1;i<=str.length();i++){\n    prefixes.push_back(str.substr(0,i));\n  }\n  return prefixes;\n}\nvector<string> all_suffixes(string str){\n  vector<string> suffixes;\n  for(int i=1;i<=str.length();i++){\n    suffixes.push_back(str.substr(str.length()-i,str.length()));\n  }\n  return suffixes;\n}\nvector<string> all_substrings(string str){\n  vector<string> substrings;\n  for(int i=0;i<str.length();i++){\n    for(int j=i+1;j<=str.length();j++){\n      substrings.push_back(str.substr(i,j-i));\n    }\n  }\n  return substrings;\n}\nvector<string> all_es(string str){\n  vector<string> all;\n  all.push_back(str);\n  all.insert(all.end(),all_prefixes(str).begin(),all_prefixes(str).end());\n  all.insert(all.end(),all_suffixes(str).begin(),all_suffixes(str).end());\n  all.insert(all.end(),all_substrings(str).begin(),all_substrings(str).end());\n  sort(all.begin(),all.end(),[](string a,string b){return a.length()<b.length();});\n  return all;\n}\n"}
{"task_id": "CPP/15", "generation": "\nstring str;\nfor(int i=2;i<=n;i++)\nstr=str+i+\" \";\nreturn str;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        if(find(distinct_chars.begin(),distinct_chars.end(),str[i])==distinct_chars.end()){\n            distinct_chars.push_back(str[i]);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n  vector<int> result;\n  for(int i = 0; i < music_string.length(); i++){\n    if(music_string[i] == 'o'){\n      result.push_back(4);\n    }else if(music_string[i] == '|'){\n      result.push_back(2);\n    }else if(music_string[i] == '.'){\n      result.push_back(1);\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int len=str.length();\n    int sublen=substring.length();\n    for(int i=0;i<len;i++){\n        if(str.substr(i,sublen)==substring){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> num_dict;\n    num_dict[\"zero\"]=0;\n    num_dict[\"one\"]=1;\n    num_dict[\"two\"]=2;\n    num_dict[\"three\"]=3;\n    num_dict[\"four\"]=4;\n    num_dict[\"five\"]=5;\n    num_dict[\"six\"]=6;\n    num_dict[\"seven\"]=7;\n    num_dict[\"eight\"]=8;\n    num_dict[\"nine\"]=9;\n    string sorted_numbers;\n    string word;\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]!=' '){\n            word+=numbers[i];\n        }\n        else{\n            sorted_numbers+=word;\n            word=\"\";\n        }\n    }\n    sorted_numbers+=word;\n    string sorted_words[10];\n    int count=0;\n    for(int i=0;i<sorted_numbers.length();i++){\n        if(sorted_numbers[i]!=' '){\n            word+=sorted_numbers[i];\n        }\n        else{\n            sorted_words[count]=word;\n            count++;\n            word=\"\";\n        }\n    }\n    sorted_words[count]=word;\n    for(int i=0;i<10;i++){\n        for(int j=0;j<10-i;j++){\n            if(num_dict[sorted_words[j]] > num_dict[sorted_words[j+1]]){\n                string temp=sorted_words[j];\n                sorted_words[j]=sorted_words[j+1];\n                sorted_words[j+1]=temp;\n            }\n        }\n    }\n    for(int i=0;i<10;i++){\n        sorted_numbers+=sorted_words[i];\n        if(i!=9){\n            sorted_numbers+=\" \";\n        }\n    }\n    return sorted_numbers;\n}\n"}
{"task_id": "CPP/20", "generation": "\n  float min = numbers[0];\n  float max = numbers[0];\n  for(int i = 1; i < numbers.size(); i++){\n    if(numbers[i] < min){\n      min = numbers[i];\n    }\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  vector<float> closest;\n  for(int i = 0; i < numbers.size(); i++){\n    if(numbers[i] == min){\n      closest.push_back(numbers[i]);\n    }\n    if(numbers[i] == max){\n      closest.push_back(numbers[i]);\n    }\n  }\n  return closest;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float max = *max_element(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = numbers[i] / max;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\nvector<int> result;\nfor(list_any::iterator it = values.begin(); it!= values.end(); ++it){\nif(it->type() == typeid(int)){\nresult.push_back(boost::any_cast<int>(*it));\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n  vector<int> result;\n  for(int i = 0; i < numbers.size(); i++){\n    if(result.empty() || numbers[i] != result.back()){\n      result.push_back(numbers[i]);\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    string result;\n    for(int i=0;i<str.length();i++){\n        if(islower(str[i])){\n            result+=toupper(str[i]);\n        }\n        else{\n            result+=tolower(str[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for (int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for (int i = 0; i < strings.size(); i++){\n        if (strings[i].find(prefix) == 0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2)\n        if(n%i==0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l2;\n    for(int i = 0; i < l.size(); i++){\n        if(i % 3 == 0){\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(), l2.end());\n    return l2;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(),l.end());\n    l.erase(unique(l.begin(),l.end()),l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%11==0||i%13==0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l2;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0){\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(), l2.end());\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0){\n            l[i]=l2[i/2];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decodeString(encodedString) {\n    // decode the string\n    const decodedString = decodeURIComponent(encodedString);\n    return decodedString;\n}\n\n// test the function\nconst encodedString = encodeURIComponent(\"Hello, World!\");\nconst decodedString = decodeString(encodedString);\nconsole.log(decodedString); // Output: Hello, World! */</code>\n</pre>\n\nIn this example, the `decodeString` function takes an encoded string as input, decodes it using the `decodeURIComponent` function, and returns the decoded string. The `encodeURIComponent` function is used to encode the string in the first place. The `decodeURIComponent` function is used to decode the string, which is then returned by the `decodeString` function. The test at the end of the code demonstrates how to use the `decodeString` function to decode an encoded string. \n\nThis code assumes that the input string is encoded using the `encodeURIComponent` function, which is a common encoding function in JavaScript. If the input string is encoded using a different encoding function, you would need to use the corresponding decoding function. \n\nFor example, if the input string is encoded using the `encodeURIComponent` function, you would use the `decodeURIComponent` function to decode it. If the input string is encoded using the `escape` function, you would use the `unescape` function to decode it. \n\nNote that the `decodeURIComponent` function is used to decode a string that has been encoded using the `encodeURIComponent` function. The `decodeURIComponent` function does not decode a string that has been encoded using the `escape` function. To decode a string that has been encoded using the `escape` function, you would need to use the `unescape` function. \n\nHere is an example of how to use the `unescape` function to decode a string that has been encoded using the `escape` function:\n\n<pre><code>/* \n * decode a string encoded with escape function. decoded string. */\nfunction decodeString(encodedString) {\n    // decode the string\n    const decodedString = unescape(encodedString);\n    return decodedString;\n}\n\n// test the function\nconst encodedString = escape(\"Hello, World!\");\nconst decodedString = decodeString(encodedString);\nconsole.log(decodedString); // Output: Hello, World! */</code>\n</pre>\n\nIn this example, the `decodeString` function takes an encoded string as input, decodes it using the `unescape` function, and returns the decoded string. The `escape` function is used"}
{"task_id": "CPP/39", "generation": "\n    if(n==1)\n        return 2;\n    else if(n==2)\n        return 3;\n    else{\n        int a=2,b=3;\n        for(int i=3;i<=n;i++){\n            int c=a+b;\n            if(c%2==0 || c%3==0 || c%5==0 || c%7==0 || c%11==0 || c%13==0)\n                return prime_fib(i-1);\n            a=b;\n            b=c;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n<3){\n        return false;\n    }\n    sort(l.begin(),l.end());\n    for(int i=0;i<n-2;i++){\n        int j=i+1;\n        int k=n-1;\n        while(j<k){\n            int sum = l[i]+l[j]+l[k];\n            if(sum==0){\n                return true;\n            }\n            else if(sum<0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i != j && (i + j) % 2 == 0){\n                collision++;\n            }\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\n  vector<int> result;\n  for(int i = 0; i < l.size(); i++){\n    result.push_back(l[i] + 1);\n  }\n  return result;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    vector<int> s;\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n  string result;\n  while(x>0){\n    int r=x%base;\n    if(r<10){\n      result=to_string(r)+result;\n    }else{\n      char c='A'+r-10;\n      result=c+result;\n    }\n    x=x/base;\n  }\n  return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n  return (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\n  if(n==1) return 0;\n  if(n==2) return 1;\n  if(n==3) return 2;\n  return fib4(n-1)+fib4(n-2)+fib4(n-3);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0){\n        return (l[n/2 - 1] + l[n/2])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n  int i = 0;\n  int j = text.length()-1;\n  while(i < j){\n    if(text[i] != text[j]){\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(p==0)\n        return 1;\n    else if(p%2==0)\n        return modp(n,n*p%10007);\n    else\n        return n*modp(n,p-1)%10007;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'e'){\n            result += 'a';\n        }\n        else if(s[i] == 's'){\n            result += 'b';\n        }\n        else if(s[i] == 'h'){\n            result += 'c';\n        }\n        else if(s[i] == 'i'){\n            result += 'd';\n        }\n        else if(s[i] == 'f'){\n            result += 'e';\n        }\n        else if(s[i] == 't'){\n            result += 'f';\n        }\n        else if(s[i] == 'h'){\n            result += 'g';\n        }\n        else if(s[i] == 's'){\n            result += 'h';\n        }\n        else if(s[i] == 'h'){\n            result += 'i';\n        }\n        else if(s[i] == 'i'){\n            result += 'j';\n        }\n        else if(s[i] == 's'){\n            result += 'k';\n        }\n        else if(s[i] == 'h'){\n            result += 'l';\n        }\n        else if(s[i] == 't'){\n            result += 'm';\n        }\n        else if(s[i] == 'e'){\n            result += 'n';\n        }\n        else if(s[i] == 's'){\n            result += 'o';\n        }\n        else if(s[i] == 'h'){\n            result += 'p';\n        }\n        else if(s[i] == 'i'){\n            result += 'q';\n        }\n        else if(s[i] == 'f'){\n            result += 'r';\n        }\n        else if(s[i] == 't'){\n            result += 's';\n        }\n        else if(s[i] == 'h'){\n            result += 't';\n        }\n        else if(s[i] == 's'){\n            result += 'u';\n        }\n        else if(s[i] == 'h'){\n            result += 'v';\n        }\n        else if(s[i] == 'i'){\n            result += 'w';\n        }\n        else if(s[i] == 's'){\n            result += 'x';\n        }\n        else if(s[i] == 'h'){\n            result += 'y';\n        }\n        else if(s[i] == 's'){\n            result += 'z';\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/51", "generation": "\n  string vowels = \"aeiouAEIOU\";\n  for(int i = 0; i < text.length(); i++){\n    if(vowels.find(text[i]) != string::npos){\n      text.erase(i,1);\n      i--;\n    }\n  }\n  return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n  for(int i = 0; i < l.size(); i++){\n    if(l[i] < t){\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    if(s0.size()!=s1.size())return false;\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    for(int i=0;i<s0.size();i++){\n        if(s0[i]!=s1[i])return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "\n  if(n<=1)\n    return n;\n  else\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            s.push('<');\n        }\n        else if(brackets[i]=='>'){\n            if(s.empty()){\n                return false;\n            }\n            else{\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n    for(int i = 0; i < l.size() - 1; i++){\n        if(l[i] > l[i + 1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> res;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                res.push_back(l1[i]);\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i*i<=n;i++){\n        if(n%i==0){\n            n/=i;\n            i--;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n  int sum = 0;\n  for(int i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '('){\n            count++;\n        }else if(brackets[i] == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    if(xs.size() < 2) return result;\n    for(int i = 1; i < xs.size() - 1; i++){\n        result.push_back(xs[i] * (i + 1));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n  if(n==0)\n  return 0;\n  if(n==1)\n  return 0;\n  if(n==2)\n  return 1;\n  int fibfib1=0;\n  int fibfib2=0;\n  int fibfib3=1;\n  for(int i=3;i<=n;i++){\n  fibfib1=fibfib2;\n  fibfib2=fibfib3;\n  fibfib3=fibfib1+fibfib2;\n  }\n  return fibfib3;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\n            if(i==s.length()-1&&s[i]=='y'){\n                count++;\n            }\n            else{\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    string s1=s.substr(s.size()-shift,s.size());\n    string s2=s.substr(0,s.size()-shift);\n    return s1+s2;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isdigit(s[i])){\n            sum += s[i] - '0';\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i<s.length()){\n        if(s[i]=='a'){\n            j++;\n        }\n        else if(s[i]=='o'){\n            k++;\n        }\n        i++;\n    }\n    return n - j - k;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> res;\n    int min = 100000;\n    int minIndex = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if(minIndex != -1){\n        res.push_back(min);\n        res.push_back(minIndex);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            return max;\n        }\n    }\n    return 1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> sorted_lst;\n    int max = lst[lst.size()-1];\n    sorted_lst.push_back(max);\n    lst.pop_back();\n    while(lst.size() > 0){\n        int min = lst[0];\n        sorted_lst.push_back(min);\n        lst.erase(lst.begin());\n        if(lst.size() > 0){\n            max = lst[lst.size()-1];\n            lst.pop_back();\n        }\n    }\n    return sorted_lst;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    return sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n  int sum1=0,sum2=0;\n  for(int i=0;i<lst1.size();i++){\n    sum1+=lst1[i].length();\n  }\n  for(int i=0;i<lst2.size();i++){\n    sum2+=lst2[i].length();\n  }\n  if(sum1<sum2){\n    return lst1;\n  }else if(sum2<sum1){\n    return lst2;\n  }else{\n    return lst1;\n  }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int i = 2;\n    int count = 0;\n    while (i <= a){\n        if (a % i == 0){\n            count++;\n            a = a / i;\n        }\n        else{\n            i++;\n        }\n    }\n    if (count == 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    if(x%n!=0)\n        return false;\n    int y=pow(n,int(log(x)/log(n)));\n    if(y==x)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = (int)pow(a, 1.0/3);\n    return (b*b*b == a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D' || num[i] == 'F'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int n = s.length();\n    for(int i = 0; i < n - 1; i++){\n        if(s[i] != s[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for (int i = 0; i < grades.size(); i++){\n        if (grades[i] > 3.0){\n            if (grades[i] > 3.3){\n                result.push_back(\"A\");\n            } else {\n                result.push_back(\"B+\");\n            }\n        } else if (grades[i] > 2.7){\n            result.push_back(\"B-\");\n        } else if (grades[i] > 2.3){\n            result.push_back(\"C+\");\n        } else if (grades[i] > 1.7){\n            result.push_back(\"C\");\n        } else if (grades[i] > 1.3){\n            result.push_back(\"C-\");\n        } else if (grades[i] > 0.7){\n            result.push_back(\"D+\");\n        } else if (grades[i] > 0.3){\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    for(int i = 2; i <= length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count = 0;\n    for(int i = 1; i <= n; i++){\n        int num = i;\n        while(num > 0){\n            if(num % 10 == 1){\n                count++;\n                break;\n            }\n            num = num / 10;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string str = \"\";\n    while(N > 0){\n        str = to_string(N%2) + str;\n        N = N/2;\n    }\n    return str;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string res;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            res += ' ';\n        }\n        else{\n            res += s[i];\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int, int>> res;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back(make_pair(i, j));\n            }\n            }\n        }\n    sort(res.begin(), res.end());\n    vector<vector<int>> res2;\n    for(int i = 0; i < res.size(); i++){\n        res2.push_back({res[i].first, res[i].second});\n    }\n    return res2;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    if((array[0] + array[array.size()-1]) % 2 == 0){\n        sort(array.begin(), array.end());\n    }else{\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n  string result = \"\";\n  for(int i = 0; i < s.length(); i++){\n    if(isalpha(s[i])){\n      int ascii = s[i];\n      if(islower(s[i])){\n        ascii = (ascii - 97 + 2) % 26 + 97;\n      } else {\n        ascii = (ascii - 65 + 2) % 26 + 65;\n      }\n      result += (char)ascii;\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size() < 2) return NULL;\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    int second_smallest = lst[1];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] < second_smallest){\n            second_smallest = lst[i];\n        }\n    }\n    return second_smallest;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n            if(S[i+1] == ' '){\n                for(int j = i+2; j < S.length(); j++){\n                    if(S[j] == '.' || S[j] == ' '){\n                        count++;\n                        i = j;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string newMessage = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(vowels.find(message[i]) != string::npos){\n            newMessage += char(message[i] + 2);\n        } else {\n            newMessage += message[i];\n        }\n    }\n    return newMessage;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int sum = 0;\n        int num = lst[i];\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(sum > max){\n            max = sum;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/95", "generation": "\n  for(auto it=dict.begin();it!=dict.end();it++){\n    if(it->first[0] != toupper(it->first[0]) || it->first[0] != tolower(it->first[0])){\n      return false;\n    }\n    if(it->second.empty()){\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i <= n; i++){\n        bool is_prime = true;\n        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = a%10;\n    int unit_digit_b = b%10;\n    int product = unit_digit_a*unit_digit_b;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'U' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int lower = floor(num);\n    int upper = ceil(num);\n    if (num - lower <= upper - num){\n        return lower;\n    }\n    else{\n        return upper;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n  vector<int> pile;\n  for(int i = 0; i < n; i++){\n    if(i % 2 == 0){\n      pile.push_back(i + 2);\n    } else {\n      pile.push_back(i + 1);\n    }\n  }\n  return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','||s[i]==' '){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word.push_back(s[i]);\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n        return 1;\n    else if(x==y)\n        return 1;\n    else\n        return (x+y)/2;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    int avg=sum/(m-n+1);\n    string s=bitset<32>(avg).to_string();\n    return s;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> res;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            int last_digit=temp%10;\n            if(last_digit%2==0){\n                res.push_back(last_digit);\n            }\n            temp=temp/10;\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> res;\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(m.find(arr[i]) != m.end()){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res(n);\n    for(int i = 0; i < n; i++){\n        if(i % 2 == 0){\n            res[i] = i;\n        }else{\n            int sum = 0;\n            for(int j = 1; j <= i; j++){\n                sum += j;\n            }\n            res[i] = sum;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        string rev = str;\n        reverse(rev.begin(), rev.end());\n        if(str == rev && i % 2 == 0){\n            even++;\n        }\n        else if(str == rev && i % 2 != 0){\n            odd++;\n        }\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n  int count = 0;\n  for(int i = 0; i < n.size(); i++){\n    int sum = 0;\n    int num = abs(n[i]);\n    while(num > 0){\n      sum += num % 10;\n      num /= 10;\n    }\n    if(sum == 0){\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==0){\n            count++;\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0){\n            count--;\n        }\n    }\n    if(count==0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n  map<char,int> result;\n  for(int i=0;i<test.length();i++){\n    if(result.find(test[i])!=result.end()){\n      result[test[i]]++;\n    }else{\n      result[test[i]]=1;\n    }\n  }\n  return result;\n} \n"}
{"task_id": "CPP/112", "generation": "\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(c.find(s[i]) == string::npos){\n            res += s[i];\n        }\n    }\n    string rev = res;\n    reverse(rev.begin(), rev.end());\n    if(res == rev){\n        return {res, \"True\"};\n    }\n    else{\n        return {res, \"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    map<int, string> m;\n    for(int i = 0; i < lst.size(); i++){\n        string s = lst[i];\n        int count = 0;\n        for(int j = 0; j < s.size(); j++){\n            if(s[j] == '1'){\n                count++;\n            }\n        }\n        m[i] = s;\n        m[i] = m[i].insert(m[i].size() - count, \"odd elements \");\n        m[i] = m[i].insert(m[i].size() - count - 10, to_string(count));\n        m[i] = m[i].insert(m[i].size() - count - 10 - 4, \"n the str\");\n        m[i] = m[i].insert(m[i].size() - count - 10 - 4 - 3, to_string(i));\n        m[i] = m[i].insert(m[i].size() - count - 10 - 4 - 3 - 2, \"ng \");\n        m[i] = m[i].insert(m[i].size() - count - 10 - 4 - 3 - 2 - 3, \"of the \");\n        m[i] = m[i].insert(m[i].size() - count - 10 - 4 - 3 - 2 - 3 - 3, \"put.\");\n    }\n    vector<string> result;\n    for(auto it = m.begin(); it != m.end(); it++){\n        result.push_back(it->second);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, minSum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        minSum = min(minSum, sum);\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n = grid.size();\n    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int water = 0;\n        for(int j = 0; j < m; j++){\n            water += grid[i][j];\n        }\n        int bucket = 0;\n        while(water > 0){\n            bucket += capacity;\n            if(bucket > water){\n                bucket = water;\n            }\n            water -= bucket;\n            ans += 1;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int count_a = 0, count_b = 0;\n        while(a != 0){\n            if(a % 2 == 1) count_a++;\n            a = a / 2;\n        }\n        while(b != 0){\n            if(b % 2 == 1) count_b++;\n            b = b / 2;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            word+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            word+=s[i];\n        }\n        else{\n            if(word.length()>=n){\n                words.push_back(word);\n            }\n            word=\"\";\n        }\n    }\n    if(word.length()>=n){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiou\";\n    string res = \"\";\n    for(int i = word.size()-1; i >= 0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            res = word[i];\n            break;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s = \"\";\n    for(int i = 0; i < lst.size(); i++){\n        s += lst[i];\n    }\n    int count = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] == '('){\n            count++;\n        }else{\n            count--;\n        }\n        if(count < 0){\n            return \"No\";\n        }\n    }\n    if(count == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> ans;\n    for(int i=0;i<k;i++){\n        ans.push_back(arr[arr.size()-1-i]);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n  int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n  vector<int> collatz;\n  while(n != 1){\n    collatz.push_back(n);\n    if(n % 2 == 0){\n      n = n / 2;\n    }else{\n      n = 3 * n + 1;\n    }\n  }\n  collatz.push_back(1);\n  return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.length() != 10 || date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1000 || year > 9999){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if(month == 2 && (day > 29 || (day == 29 && !(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))))){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] == ' ' || txt[i] == ',' || txt[i] == '.' || txt[i] == '!'){\n            if(!word.empty()){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(!word.empty()){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n  for(int i = 0; i < lst.size()-1; i++){\n    if(lst[i] > lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end) return \"NO\";\n    int length = end-start+1;\n    if(length==1) return \"NO\";\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size() == 0) return 0;\n    int sign = 1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 0) sign *= -1;\n    }\n    return sign;\n}\nint prod_magnitudes(vector<int> arr){\n    int product = 1;\n    for(int i = 0; i < arr.size(); i++){\n        product *= abs(arr[i]);\n    }\n    return product;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> visited(n, vector<int>(n, 0));\n    vector<vector<int>> directions = {{0,1},{0,-1},{1,0},{-1,0}};\n    vector<int> res;\n    int min = 1e9;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(visited[i][j] == 0){\n                vector<int> path;\n                int count = 0;\n                dfs(grid, i, j, visited, directions, path, count, k, &res, &min);\n            }\n        }\n    }\n    return res;\n}\nvoid dfs(vector<vector<int>> grid, int i, int j, vector<vector<int>> &visited, vector<vector<int>> &directions, vector<int> &path, int &count, int k, vector<int> *res, int &min){\n    if(count == k){\n        if(path.size() < min){\n            min = path.size();\n            *res = path;\n        }\n        return;\n    }\n    visited[i][j] = 1;\n    path.push_back(grid[i][j]);\n    count++;\n    for(int l = 0; l < 4; l++){\n        int x = i + directions[l][0];\n        int y = j + directions[l][1];\n        if(x >= 0 && x < grid.size() && y >= 0 && y < grid[0].size() && visited[x][y] == 0){\n            dfs(grid, x, y, visited, directions, path, count, k, res, min);\n        }\n    }\n    path.pop_back();\n    count--;\n    visited[i][j] = 0;\n}  // time: O(n^2 * 4^k), space: O(n^2 + k)  // 4^k is the maximum number of paths that can be explored from a cell\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    if(n==1){\n        res.push_back(1);\n        return res;\n    }\n    if(n==2){\n        res.push_back(1);\n        res.push_back(3);\n        return res;\n    }\n    if(n==3){\n        res.push_back(1);\n        res.push_back(3);\n        res.push_back(4);\n        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(4);\n    for(int i=3;i<n;i++){\n        if(i%2==0){\n            res.push_back(res[i-2]+res[i-3]);\n        }\n        else{\n            res.push_back(res[i-1]+res[i-2]+res[i-3]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n%10;\n        if(digit%2) product *= digit;\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        lst[i] = round(lst[i]);\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0){\n        return false;\n    }\n    if(isalpha(txt[txt.length()-1])){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max = arr[n-1];\n    int min = arr[0];\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] > arr[i+1]){\n            if(arr[i] > max){\n                max = arr[i];\n            }\n            if(arr[i+1] < min){\n                min = arr[i+1];\n            }\n        }\n    }\n    if(max > min){\n        return -1;\n    }\n    return max;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int neg = 0, pos = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0){\n            neg++;\n        }\n        else if(lst[i] > 0){\n            pos++;\n        }\n    }\n    if(neg == 0 && pos == 0){\n        return vector<int>();\n    }\n    else if(neg == 0){\n        return vector<int>(1, pos);\n    }\n    else if(pos == 0){\n        return vector<int>(1, neg);\n    }\n    else{\n        return vector<int>(1, neg) + vector<int>(1, pos);\n    }\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() == typeid(string)){\n        if(b.type() == typeid(string)){\n            if(a.to<string>() == b.to<string>()) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(int)){\n            if(a.to<string>() == to_string(b.to<int>())) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(float)){\n            if(a.to<string>() == to_string(b.to<float>())) return a;\n            else return b;\n        }\n    }\n    else if(a.type() == typeid(int)){\n        if(b.type() == typeid(int)){\n            if(a.to<int>() == b.to<int>()) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(string)){\n            if(to_string(a.to<int>()) == b.to<string>()) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(float)){\n            if(to_string(a.to<int>()) == to_string(b.to<float>())) return a;\n            else return b;\n        }\n    }\n    else if(a.type() == typeid(float)){\n        if(b.type() == typeid(float)){\n            if(a.to<float>() == b.to<float>()) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(string)){\n            if(to_string(a.to<float>()) == b.to<string>()) return a;\n            else return b;\n        }\n        else if(b.type() == typeid(int)){\n            if(to_string(a.to<float>()) == to_string(b.to<int>())) return a;\n            else return b;\n        }\n    }\n    return boost::any();\n}\n"}
{"task_id": "CPP/138", "generation": "\n    for(int i=1;i<n;i++){\n        if((n-i)==i){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact = 1;\n    for(int i = 1; i <= n; i++){\n        fact *= i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            if(result.length() > 0 && result[result.length() - 1] == ' '){\n                continue;\n            }\n            if(result.length() > 0 && result[result.length() - 1] == '_'){\n                result[result.length() - 1] = ' ';\n            }\n            else{\n                result += ' ';\n            }\n        }\n        else{\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    int count2=0;\n    int count3=0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]=='.'||file_name[i]=='-'){\n            count++;\n        }\n        if(file_name[i]=='.'){\n            count2++;\n        }\n        if(file_name[i]=='.'&&file_name[i+1]=='e'&&file_name[i+2]=='x'&&file_name[i+3]=='e'){\n            count3++;\n        }\n    }\n    if(count>1||count2>1||count3==0||file_name[0]=='-'){\n        return \"No\";\n    }\n    else{\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0 && lst[i] % 4 == 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string res = \"\";\n    int len = sentence.length();\n    for(int i = 0; i < len; i++){\n        if(sentence[i] == ' '){\n            continue;\n        }\n        int count = 0;\n        while(i < len && sentence[i] != ' '){\n            count++;\n            i++;\n        }\n        if(count == 2 || count == 3 || count == 5 || count == 7 || count == 11 || count == 13){\n            res += sentence.substr(i - count, count);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    int g = gcd(a,b);\n    int h = gcd(c,d);\n    a = a/g;\n    b = b/g;\n    c = c/h;\n    d = d/h;\n    if(a*d == b*c)\n        return true;\n    else\n        return false;\n}\nint gcd(int a,int b){\n    if(b==0)\n        return a;\n    else\n        return gcd(b,a%b);\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int n=nums[i];\n        while(n>0){\n            sum+=n%10;\n            n/=10;\n        }\n        points.push_back(make_pair(sum,i));\n    }\n    sort(points.begin(),points.end());\n    vector<int> result;\n    for(int i=0;i<points.size();i++){\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        int num = nums[i];\n        int firstDigit = num / 10;\n        int lastDigit = num % 10;\n        if(firstDigit % 2 != 0 && lastDigit % 2 != 0 && num > 10){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1){\n            for(int j=i+1;j<planets.size();j++){\n                if(planets[j]==planet2){\n                    for(int k=i+1;k<j;k++){\n                        result.push_back(planets[k]);\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i].length() % 2 == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string &a, const string &b){\n        if (a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n%2==0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i] > 0 && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}  // O(n) time complexity\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = 0;\n    string strongest_extension;\n    for(int i = 0; i < extensions.size(); i++){\n        int strength = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(isupper(extensions[i][j])){\n                strength++;\n            }\n        }\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n        else if(strength == max_strength){\n            if(extensions[i] < strongest_extension){\n                strongest_extension = extensions[i];\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    if(a.length()!=b.length()) return false;\n    string c=a+b;\n    for(int i=0;i<a.length();i++){\n        if(c.find(b.substr(i,b.length()))!=-1) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    string roman_numerals[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    string result = \"\";\n    for(int i = 0; i < 13; i++){\n        while(number >= values[i]){\n            result += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        if(pow(a,2)+pow(b,2)==pow(c,2) || pow(a,2)+pow(c,2)==pow(b,2) || pow(b,2)+pow(c,2)==pow(a,2)){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max=0;\n    string res=\"\";\n    for(int i=0;i<words.size();i++){\n        string s=words[i];\n        sort(s.begin(),s.end());\n        s.erase(unique(s.begin(),s.end()),s.end());\n        if(s.size()>max){\n            max=s.size();\n            res=s;\n        }\n        else if(s.size()==max){\n            if(s<res){\n                res=s;\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    if(total > remaining){\n        return {total - remaining, 1};\n    }\n    return {total, 0};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                res+=toupper(s[i]);\n            }\n            else{\n                res+=tolower(s[i]);\n            }\n        }\n        else{\n            res+=s[i];\n        }\n    }\n    if(res.find_first_not_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos){\n        string temp;\n        for(int i=res.size()-1;i>=0;i--){\n            temp+=res[i];\n        }\n        return temp;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), hash);\n    stringstream ss;\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        ss << hex << (int)hash[i];\n    }\n    return ss.str();\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
