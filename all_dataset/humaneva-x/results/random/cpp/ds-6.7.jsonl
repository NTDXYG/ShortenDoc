{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        if(fabs(numbers[i] - numbers[i+1]) <= threshold){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_count = 0;\n    int close_count = 0;\n    string temp = \"\";\n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            open_count++;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            close_count++;\n            temp += paren_string[i];\n        }\n        if(open_count == close_count && open_count != 0){\n            result.push_back(temp);\n            temp = \"\";\n            open_count = 0;\n            close_count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int dec = (int)number;\n    float dec_part = number - dec;\n    return dec_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum/numbers.size();\n    float deviation_sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        deviation_sum += abs(numbers[i] - mean);\n    }\n    return deviation_sum/numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int count = 0;\n    int max_count = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else if(c == ')'){\n            count--;\n        }\n    }\n    for(int i = 0; i < max_count; i++){\n        result.push_back(i+1);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> max_numbers;\n    int max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        max_numbers.push_back(max);\n    }\n    return max_numbers;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string make_palindrome(std::string s) {\n    std::string r = s;\n    std::reverse(r.begin(), r.end());\n    for (int i = s.size(); i >= 0; --i) {\n        if (s.substr(0, i) == r.substr(r.size() - i)) {\n            return r.substr(0, r.size() - i) + s;\n        }\n    }\n    return \"\";\n}\n\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> result;\n    for(int i=0;i<str.size();i++){\n        result.push_back(str.substr(0,i+1));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 2; i <= n; i++){\n        result += to_string(i) + \" \";\n    }\n    return result.substr(0, result.length() - 1);\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; i<str.length(); i++){\n        count[str[i]]++;\n    }\n    int dist_count = 0;\n    for(int i=0; i<256; i++){\n        if(count[i] > 0){\n            dist_count++;\n        }\n    }\n    return dist_count;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.size(); i++){\n        switch(music_string[i]){\n            case 'o': beats.push_back(4); break;\n            case '|': beats.push_back(2); break;\n            case '.': beats.push_back(1); break;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    size_t found = str.find(substring);\n    while(found != string::npos){\n        count++;\n        found = str.find(substring, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> dict;\n    dict[\"zero\"] = 0;\n    dict[\"one\"] = 1;\n    dict[\"two\"] = 2;\n    dict[\"three\"] = 3;\n    dict[\"four\"] = 4;\n    dict[\"five\"] = 5;\n    dict[\"six\"] = 6;\n    dict[\"seven\"] = 7;\n    dict[\"eight\"] = 8;\n    dict[\"nine\"] = 9;\n\n    string word = \"\";\n    string result = \"\";\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(dict[word]) + \" \";\n            word = \"\";\n        }else{\n            word += numbers[i];\n        }\n    }\n    result += to_string(dict[word]);\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = INFINITY;\n    vector<float> closest_elements;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = fabs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_elements.clear();\n                closest_elements.push_back(numbers[i]);\n                closest_elements.push_back(numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float max_val = -1;\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_val)\n            max_val = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = round(numbers[i]/max_val*1000)/1000;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        if(boost::any_cast<int>(&*it)){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i=0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int largest_divisor = 1;\n    for(int i=2; i*i <= n; i++){\n        if(n % i == 0){\n            if(n/i == i)\n                largest_divisor = i;\n            else\n                largest_divisor = n/i;\n        }\n    }\n    return largest_divisor;\n}\n\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i*i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n != 1)\n        factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size(); i++){\n        if(i==0 || numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; i<str.length(); i++){\n        if(str[i] >= 'a' && str[i] <= 'z'){\n            str[i] = str[i] - 32;\n        }\n        else if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1) return false;\n    if(n==2) return true;\n    if(n%2==0) return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> third;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0) third.push_back(l[i]);\n    }\n    sort(third.begin(),third.end());\n    for(int i=0,j=0;i<l.size();i++){\n        if(i%3==0) l[i]=third[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = -INFINITY;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int num=i;\n            while(num>0){\n                if(num%10==7)\n                    count++;\n                num=num/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0)\n            even.push_back(l[i]);\n    }\n    sort(even.begin(), even.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if(i%2==0)\n            l[i]=even[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <string.h>\n\nvoid encodeic(char *str) {\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] >= 'a' && str[i] <= 'z') {\n            str[i] = 'A' + (str[i] - 'a');\n        } else if (str[i] >= 'A' && str[i] <= 'Z') {\n            str[i] = 'a' + (str[i] - 'A');\n        }\n    }\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int fib[n+2];\n    fib[0]=0;\n    fib[1]=1;\n    for(int i=2;i<=n;i++){\n        fib[i]=fib[i-1]+fib[i-2];\n    }\n    for(int i=2;i<=fib[n];i++){\n        if(fib[n]%i==0){\n            return fib[n+1];\n        }\n    }\n    return fib[n];\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3) return false;\n    sort(l.begin(), l.end());\n    for(int i = 0; i < n - 2; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        int j = i + 1, k = n - 1;\n        while(j < k){\n            if(l[i] + l[j] + l[k] == 0){\n                return true;\n            }\n            else if(l[i] + l[j] + l[k] < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    int remainder;\n    while(x != 0){\n        remainder = x % base;\n        x = x / base;\n        result = to_string(remainder) + result;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (0.5*a*h);\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 1;\n    else if(n==2)\n        return 2;\n    else if(n==3)\n        return 4;\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n  int start = 0;\n  int end = text.size() - 1;\n  while (start < end){\n    if (text[start] != text[end]){\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else if(n%2==0)\n        return modp(n/2,p*p)%p;\n    else\n        return (2*modp(n-1,p)%p+p)%p;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>='a' && s[i]<='z'){\n            if(s[i]>='a' && s[i]<='c'){\n                decoded_string += 'z';\n            }\n            else{\n                decoded_string += s[i]-3;\n            }\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            if(s[i]>='A' && s[i]<='C'){\n                decoded_string += 'Z';\n            }\n            else{\n                decoded_string += s[i]-3;\n            }\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i=0; i<brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n=l.size();\n    if(n==0 || n==1)\n        return true;\n    if(l[0]<=l[n-1]){\n        for(int i=0;i<n-1;i++){\n            if(l[i]>l[i+1])\n                return false;\n        }\n    }\n    else{\n        for(int i=0;i<n-1;i++){\n            if(l[i]<l[i+1])\n                return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]<l2[j])\n            i++;\n        else if(l1[i]>l2[j])\n            j++;\n        else{\n            result.push_back(l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i = 2;\n    while(i * i <= n){\n        if(n % i != 0)\n            i++;\n        else\n            n /= i;\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i=0; i<brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/62", "generation": "\n    int n = xs.size();\n    vector<float> result(n-1);\n    for(int i=1;i<n;i++){\n        result[i-1] = xs[i]*i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y'||s[s.length()-1]=='Y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.length();\n    if(shift > n)\n        return string(s.rbegin(), s.rend());\n    rotate(s.begin(),s.begin()+n-shift,s.end());\n    return s;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= '0' && s[i] <= '9'){\n            sum += s[i] - '0';\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples,oranges,total_fruits;\n    sscanf(s.c_str(),\"%*s %d %*s %d %*s %d\",&apples,&oranges,&total_fruits);\n    return total_fruits - (apples + oranges);\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min_even = 10001, min_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] <= min_even){\n            min_even = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index == -1) return {};\n    return {min_index, min_even};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max_val = 0;\n    int max_freq = 0;\n    int freq;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>0 && lst[i]>max_val){\n            max_val = lst[i];\n            max_freq = 1;\n            for(int j=i+1; j<lst.size(); j++){\n                if(lst[j]==lst[i]){\n                    max_freq++;\n                }\n            }\n        }\n    }\n    if(max_freq>max_val){\n        return max_freq;\n    }\n    else{\n        return 1;\n    }\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> res;\n    while(!lst.empty()){\n        res.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()){\n            res.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int changes = 0;\n    for(int i=0; i<(n+1)/2; i++){\n        if(arr[i] != arr[n-1-i])\n            changes++;\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++)\n        sum1+=lst1[i].size();\n    for(int i=0;i<lst2.size();i++)\n        sum2+=lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else if(sum1>sum2)\n        return lst2;\n    else\n        return {};\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<=a;i++){\n        if(a%i==0){\n            while(a%i==0){\n                a=a/i;\n                count++;\n            }\n            if(i==2 || i==3 || i==5){\n                if(count>1){\n                    return false;\n                }\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(count==3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n<=1)\n        return false;\n    int p=n;\n    while(p<=x){\n        if(p==x)\n            return true;\n        p*=n;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n = cbrt(a);\n    return n*n*n == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.size();i++){\n        if(num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    int n = s.length();\n    for(int i=0;i<n-1;i++){\n        if(s[i]==s[i+1])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i]>=40)\n            result.push_back(\"+\");\n        else\n            result.push_back(\" \");\n        if(grades[i]>=3.3)\n            result[i]+=\"A\";\n        else if(grades[i]>=3.0)\n            result[i]+=\"B+\";\n        else if(grades[i]>=2.3)\n            result[i]+=\"B-\";\n        else if(grades[i]>=2.0)\n            result[i]+=\"C+\";\n        else if(grades[i]>=1.7)\n            result[i]+=\"C\";\n        else if(grades[i]>=1.3)\n            result[i]+=\"C-\";\n        else if(grades[i]>=0.0)\n            result[i]+=\"D\";\n        else if(grades[i]>=0.0)\n            result[i]+=\"D-\";\n        else\n            result[i]+=\"E\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len < 2){\n        return false;\n    }\n    for(int i = 2; i*i <= len; i++){\n        if(len % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        if(i%10==1 || i/10==1){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N > 0){\n        binary = to_string(N % 2) + binary;\n        N /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[100];\n    int i=0, j=0, k=0;\n    string temp = \"\";\n    string result = \"\";\n    while(s[i] != '\\0'){\n        if(s[i] != ' '){\n            temp += s[i];\n        }\n        else{\n            words[j] = temp;\n            j++;\n            temp = \"\";\n        }\n        i++;\n    }\n    words[j] = temp;\n    for(k=0; k<j; k++){\n        sort(words[k].begin(), words[k].end());\n        result += words[k];\n        if(k != j-1){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size()==0) return array;\n    int sum = array[0] + array[array.size()-1];\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end());\n    }else{\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += char(int(s[i] + (2 * (s[i] - 'a'))) - 26);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += char(int(s[i] + (2 * (s[i] - 'A'))) - 26);\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    int smallest = INT_MAX, next_smallest = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<smallest){\n            next_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i]<next_smallest && lst[i]>smallest){\n            next_smallest = lst[i];\n        }\n    }\n    if(next_smallest == INT_MAX) return -1;\n    return next_smallest;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string boredom = \"I am bored\";\n    size_t found = S.find(boredom);\n    while (found != string::npos){\n        count++;\n        found = S.find(boredom, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<message.size(); i++){\n        if(vowels.find(message[i]) != string::npos){\n            if(message[i] == 'u' || message[i] == 'U'){\n                message[i] = 'a';\n            }\n            else if(message[i] == 'o' || message[i] == 'O'){\n                message[i] = 'e';\n            }\n            else if(message[i] == 'e' || message[i] == 'E'){\n                message[i] = 'i';\n            }\n            else if(message[i] == 'i' || message[i] == 'I'){\n                message[i] = 'o';\n            }\n            else if(message[i] == 'a' || message[i] == 'A'){\n                message[i] = 'u';\n            }\n            else{\n                message[i] = toupper(message[i]+2);\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        int sum = 0;\n        string str = to_string(lst[i]);\n        for(int j=0; j<str.size(); j++){\n            sum += str[j] - '0';\n        }\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    for(auto it=dict.begin();it != dict.end();it++){\n        if(it->first != tolower(it->first) || it->second != toupper(it->second)){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    primes.push_back(2);\n    for(int i=3; i<=n; i+=2){\n        bool isPrime = true;\n        for(int j=0; j<primes.size() && primes[j]*primes[j]<=i; j++){\n            if(i%primes[j]==0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int product=1;\n    int unit_digit_a,unit_digit_b;\n    unit_digit_a=abs(a%10);\n    unit_digit_b=abs(b%10);\n    product=unit_digit_a*unit_digit_b;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='A' && s[i]<='Z'){\n            if(s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int int_part = (int)num;\n    double frac_part = num - int_part;\n    if(frac_part < 0.5)\n        return int_part;\n    else if(frac_part > 0.5)\n        return int_part + 1;\n    else{\n        if(int_part < 0)\n            return int_part;\n        else\n            return int_part + 1;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result(n);\n    result[0] = n;\n    for(int i=1; i<n; i++){\n        if(i%2==0)\n            result[i] = result[i-1] + 2;\n        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ',' || s[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y){\n        int temp = x;\n        x = y;\n        y = temp;\n    }\n    if(x<=0 || y<=0){\n        return -1;\n    }\n    if(x==y){\n        return -1;\n    }\n    return x+1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-\";\n    int avg=(n+m)/2;\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> res;\n    vector<int> digits(10,0);\n    for(int i=0;i<x.size();i++){\n        int num=x[i];\n        while(num>0){\n            int digit=num%10;\n            if(digit%2==0 && digits[digit]==0){\n                res.push_back(digit);\n                digits[digit]=1;\n            }\n            num/=10;\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> num_to_str = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            res.push_back(num_to_str[arr[i]]);\n        }\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        int fact = 1;\n        for(int j=1; j<=i; j++){\n            fact *= j;\n        }\n        if(fact % 2 == 0){\n            result.push_back(fact);\n        }else{\n            int sum = 0;\n            for(int j=1; j<=i; j++){\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i = 1; i <= n; i++){\n        string s = to_string(i);\n        string r = string(s.rbegin(), s.rend());\n        if(s == r){\n            if(s.length() % 2 == 0) even_count++;\n            else odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int sum = 0;\n        if(n[i] < 0){\n            int temp = abs(n[i]);\n            while(temp){\n                sum += temp%10;\n                temp /= 10;\n            }\n            if(sum % 2 != 0)\n                count++;\n        }\n        else{\n            int temp = n[i];\n            while(temp){\n                sum += temp%10;\n                temp /= 10;\n            }\n            if(sum % 2 == 0)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n-1;i++){\n        if(arr[i]>arr[i+1]){\n            count++;\n        }\n    }\n    if(arr[n-1]>arr[0]){\n        count++;\n    }\n    return count<=1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1=0,odd2=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==1)\n            odd1++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==1)\n            odd2++;\n    }\n    if(odd1==odd2)\n        return \"YES\";\n    else\n        return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> m;\n    for(int i=0;i<test.length();i++){\n        m[test[i]]++;\n    }\n    return m;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> result;\n    string t=\"\";\n    for(int i=0;i<s.size();i++){\n        if(c.find(s[i])==string::npos){\n            t+=s[i];\n        }\n    }\n    string r=t;\n    reverse(r.begin(),r.end());\n    result.push_back(t);\n    if(t==r){\n        result.push_back(true);\n    }\n    else{\n        result.push_back(false);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    map<string, int> m;\n    for(int i=0; i<lst.size(); i++){\n        m[lst[i]]++;\n    }\n    for(int i=0; i<lst.size(); i++){\n        if(m[lst[i]]%2==1){\n            lst[i] = \"the number of odd elements \" + to_string(m[lst[i]]) + \"n the str\" + to_string(i+1) + \"ng \" + to_string(m[lst[i]]) + \" of the input.\";\n        }\n    }\n    return lst;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, min_sum = nums[0];\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum)\n            min_sum = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size();\n    int m=grid[0].size();\n    int buckets=0;\n    int total=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                buckets++;\n                total+=capacity;\n            }\n        }\n    }\n    return total-buckets;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> negatives;\n    vector<int> positives;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]<0){\n            negatives.push_back(arr[i]);\n        }\n        else{\n            positives.push_back(arr[i]);\n        }\n    }\n    sort(positives.begin(), positives.end());\n    int count_one = 0;\n    for(int i=0; i<positives.size(); i++){\n        if(__builtin_popcount(positives[i]) == 1){\n            count_one++;\n        }\n    }\n    sort(negatives.begin(), negatives.end(), greater<int>());\n    for(int i=0; i<count_one; i++){\n        positives.push_back(1);\n    }\n    for(int i=0; i<negatives.size(); i++){\n        positives.push_back(negatives[i]);\n    }\n    return positives;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] == ' '){\n            if(word.length() == n){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    if(word.length() == n){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for(int i=word.size()-1; i>=2; i--){\n        if(consonants.find(word[i]) != string::npos && consonants.find(word[i-1]) != string::npos && consonants.find(word[i-2]) != string::npos){\n            return word.substr(i-2,3);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int count = 0;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == '(') count++;\n            if(lst[i][j] == ')') count--;\n            if(count < 0) return \"No\";\n        }\n    }\n    return (count == 0) ? \"Yes\" : \"No\";\n}\n\n"}
{"task_id": "CPP/120", "generation": "\n    int n=arr.size();\n    vector<int> res;\n    for(int i=0;i<n-k+1;i++){\n        int max=*max_element(arr.begin()+i,arr.begin()+i+k);\n        res.push_back(max);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        collatz.push_back(n);\n        n = n % 2 ? n*3 + 1 : n / 2;\n    }\n    collatz.push_back(1);\n    vector<int> odd_collatz;\n    for(int i = 0; i < collatz.size(); i++){\n        if(collatz[i] % 2 != 0){\n            odd_collatz.push_back(collatz[i]);\n        }\n    }\n    return odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return false;\n    string month = date.substr(0,2);\n    string day = date.substr(3,2);\n    string year = date.substr(6,4);\n    if(stoi(month) > 12 || stoi(month) < 1)\n        return false;\n    if(stoi(day) > 31 || stoi(day) < 1)\n        return false;\n    if((stoi(month) == 4 || stoi(month) == 6 || stoi(month) == 9 || stoi(month) == 11) && stoi(day) > 30)\n        return false;\n    if(stoi(month) == 2){\n        if(stoi(day) > 29)\n            return false;\n        if(stoi(day) == 29){\n            if(stoi(year) % 4 != 0)\n                return false;\n            else if(stoi(year) % 100 == 0 && stoi(year) % 400 != 0)\n                return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<txt.length(); i++){\n        if(txt[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }\n        else if(txt[i] == ','){\n            words.push_back(word);\n            word = \"\";\n        }\n        else{\n            word += txt[i];\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> lst_copy = lst;\n    sort(lst_copy.begin(), lst_copy.end());\n    return lst == lst_copy;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int length = end - start + 1;\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.empty()) return 0;\n    int prod = 1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]<0) prod *= -1;\n    }\n    return prod;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(grid[i][j] <= k){\n                res.push_back(grid[i][j]);\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n);\n    if(n>=1) res[0] = 1;\n    if(n>=2) res[1] = 3;\n    if(n>=3) res[2] = 2;\n    for(int i=3; i<n; i++){\n        res[i] = res[i-1] + res[i-2] + res[i-3];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n%10;\n        if(digit%2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/133", "generation": "\n    float sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += pow(ceil(abs(lst[i])), 2);\n    }\n    return (int)sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty())\n        return false;\n    char last_char = txt[txt.length()-1];\n    if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z'))\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_index = -1;\n    for(int i=n-1;i>0;i--){\n        if(arr[i]<arr[i-1]){\n            max_index = i-1;\n            break;\n        }\n    }\n    if(max_index != -1){\n        for(int i=n-1;i>=0;i--){\n            if(arr[i]<arr[max_index]){\n                swap(arr[i],arr[max_index]);\n                break;\n            }\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int smallest_positive = INT_MAX, smallest_negative = INT_MAX, largest_positive = INT_MIN, largest_negative = INT_MIN;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0){\n            if(lst[i] < smallest_positive) smallest_positive = lst[i];\n            if(lst[i] > largest_positive) largest_positive = lst[i];\n        }\n        else if(lst[i] < 0){\n            if(lst[i] > smallest_negative) smallest_negative = lst[i];\n            if(lst[i] < largest_negative) largest_negative = lst[i];\n        }\n    }\n    if(smallest_positive == INT_MAX && largest_positive == INT_MIN && smallest_negative == INT_MAX && largest_negative == INT_MIN) return {None, None};\n    else if(smallest_positive == INT_MAX) return {None, largest_negative};\n    else if(largest_negative == INT_MAX) return {smallest_positive, None};\n    else return {smallest_positive, largest_negative};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return nullptr;\n    }\n    if(a.type() == typeid(float) || a.type() == typeid(double)){\n        float af = boost::any_cast<float>(a);\n        float bf = boost::any_cast<float>(b);\n        if(af == bf)\n            return af;\n    }\n    else if(a.type() == typeid(string)){\n        string as = boost::any_cast<string>(a);\n        string bs = boost::any_cast<string>(b);\n        if(as == bs)\n            return as;\n    }\n    else if(a.type() == typeid(int)){\n        int ai = boost::any_cast<int>(a);\n        int bi = boost::any_cast<int>(b);\n        if(ai == bi)\n            return ai;\n    }\n    return nullptr;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    int sum=0;\n    for(int i=2;i<=n/2;i+=2){\n        if(n==i*(i+1)/2){\n            sum=i;\n            break;\n        }\n    }\n    if(sum>0){\n        printf(\"The number can be written as the sum of %d even numbers\",sum);\n        return true;\n    }\n    else{\n        printf(\"The number cannot be written as the sum of even numbers\");\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact = 1;\n    for(int i=1; i<=n; i++){\n        fact *= i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int i = 0;\n    while(i < text.length()){\n        if(text[i] != ' '){\n            result += text[i];\n            i++;\n        }\n        else{\n            int count = 0;\n            while(i < text.length() && text[i] == ' '){\n                count++;\n                i++;\n            }\n            if(count > 2){\n                result += '_';\n            }\n            else if(count == 2){\n                result += \"__\";\n            }\n            else{\n                result += \" \";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int i=0,count=0,len=file_name.length();\n    while(file_name[i]){\n        if(isdigit(file_name[i])) count++;\n        i++;\n    }\n    if(count>1) return \"No\";\n    if(file_name[0]<'a' || file_name[0]>'z') return \"No\";\n    string ext=file_name.substr(file_name.find_last_of(\".\")+1);\n    if(ext==\"exe\" || ext==\"dll\") return \"Yes\";\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%4 == 0 && lst[i] != 3 && lst[i] != 4){\n            sum += lst[i]*lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for (int i = 0; i < sentence.length(); i++){\n        if (sentence[i] == ' '){\n            if (word.length() % 2 == 0){\n                result += word;\n            }\n            else{\n                int len = word.length();\n                for (int j = 2; j <= len; j++){\n                    if (len % j == 0){\n                        result += word.substr(0, j);\n                        break;\n                    }\n                }\n            }\n            result += \" \";\n            word = \"\";\n        }\n        else{\n            word += sentence[i];\n        }\n    }\n    if (word.length() % 2 == 0){\n        result += word;\n    }\n    else{\n        int len = word.length();\n        for (int j = 2; j <= len; j++){\n            if (len % j == 0){\n                result += word.substr(0, j);\n                break;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1=0,den1=0,num2=0,den2=0;\n    sscanf(x.c_str(),\"%d/%d\",&num1,&den1);\n    sscanf(n.c_str(),\"%d/%d\",&num2,&den2);\n    if(den1==0 || den2==0) return false;\n    int new_num=num1*num2;\n    int new_den=den1*den2;\n    for(int i=2;i<=new_num && i<=new_den;i++){\n        while(new_num%i==0 && new_den%i==0){\n            new_num/=i;\n            new_den/=i;\n        }\n    }\n    return new_num%new_den==0;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    int n = nums.size();\n    vector<pair<int,int>> points(n);\n    for(int i=0;i<n;i++){\n        int sum = 0;\n        int num = abs(nums[i]);\n        while(num){\n            sum += num%10;\n            num /= 10;\n        }\n        points[i] = make_pair(sum,i);\n    }\n    sort(points.begin(),points.end());\n    vector<int> res(n);\n    for(int i=0;i<n;i++){\n        res[i] = nums[points[i].second];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            int firstDigit = nums[i] / 10;\n            int lastDigit = nums[i] % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    int count=0;\n    for(int i=0;i<n;i++){\n        a[i]=i+1;\n    }\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1=-1,index2=-1;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1) index1=i;\n        if(planets[i]==planet2) index2=i;\n    }\n    if(index1==-1||index2==-1) return result;\n    if(index1>index2){\n        int temp=index1;\n        index1=index2;\n        index2=temp;\n    }\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            sum += lst[i][j];\n        }\n        if(sum % 2 == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end(), [](string a, string b){\n        if(a.size() == b.size()){\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n%2==0)\n        return x;\n    else\n        return y;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength=0;\n    string max_extension=\"\";\n    for(auto ext:extensions){\n        int strength=0;\n        for(auto c:ext){\n            if(isupper(c)) strength++;\n        }\n        int sm=0;\n        for(auto c:class_name){\n            if(isupper(c)) sm++;\n        }\n        if(strength==sm){\n            if(max_strength<strength){\n                max_strength=strength;\n                max_extension=ext;\n            }\n        }\n    }\n    return class_name+\".\"+max_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int alen=a.length();\n    int blen=b.length();\n    if(alen==blen && alen>0){\n        string c=a+a;\n        if(c.find(b)!=string::npos)\n            return true;\n        else\n            return false;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    num = abs(num);\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n        num = num / 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            res += roman[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side,square_sum;\n    //find the maximum side\n    if(a>b && a>c)\n        max_side=a;\n    else if(b>a && b>c)\n        max_side=b;\n    else\n        max_side=c;\n    //calculate the square sum of the other two sides\n    square_sum=(a*a+b*b+c*c)-max_side*max_side;\n    //check if the square of the maximum side is equal to the sum of the squares of the other two sides\n    if(max_side*max_side==square_sum)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(auto word: words){\n        sort(word.begin(), word.end());\n        int unique = 1;\n        for(int i = 1; i < word.size(); i++){\n            if(word[i] != word[i-1]) unique++;\n        }\n        if(unique > max_unique){\n            max_unique = unique;\n            max_word = word;\n        }\n        else if(unique == max_unique){\n            max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(number >= need){\n        result.push_back(number - need);\n        result.push_back(0);\n    }else{\n        int eat = need - number;\n        if(eat > remaining){\n            result.push_back(number - remaining);\n            result.push_back(1);\n        }else{\n            result.push_back(number - eat);\n            result.push_back(0);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int n=s.size();\n    for(int i=0;i<n;i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                s[i]=toupper(s[i]);\n            else\n                s[i]=tolower(s[i]);\n        }\n    }\n    if(n>0)\n        reverse(s.begin(),s.end());\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return NULL;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<16; i++){\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    }\n    return string(md5string);\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0)\n            result.push_back(i);\n    }\n    return result;\n}\n"}
