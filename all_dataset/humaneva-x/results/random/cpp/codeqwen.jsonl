{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    for(char c : paren_string){\n        if(c == '('){\n            balance++;\n        }else if(c == ')'){\n            balance--;\n        }\n        current_group += c;\n        if(balance == 0){\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float part=number-floor(number);\n    return part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float total = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        total += abs(numbers[i] - mean);\n    }\n    return total / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i%2==1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(c == ')'){\n            current_depth--;\n        }else if(c == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n                max_depth = 0;\n            }\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0;\n    int product=1;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    vector<int> result;\n    result.push_back(sum);\n    result.push_back(product);\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> max_list;\n    int max = numbers[0];\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        max_list.push_back(max);\n    }\n    return max_list;\n}\n"}
{"task_id": "CPP/10", "generation": "\nconst make_indicate = (str) => {\n  let reverse = str.split('').reverse().join('');\n  let palindrome = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i) === reverse.substring(0, str.length - i)) {\n      palindrome = str.substring(i);\n      break;\n    }\n  }\n  return reverse.substring(0, str.length - palindrome.length) + palindrome;\n};\n\nconsole.log(make_indicate('c')); // 'ac'\nconsole.log(make_indicate('cat')); // 'tacat'\nconsole.log(make_indicate('catac')); // 'catac'\nconsole.log(make_indicate('race')); // 'ecarace'\nconsole.log(make_indicate('level')); // 'level'\nconsole.log(make_indicate('')); // ''\nconsole.log(make_indicate('a')); // 'a'\nconsole.log(make_indicate('ab')); // 'bab'\nconsole.log(make_indicate('aba')); // 'aba'\nconsole.log(make_indicate('abac')); // 'cabac'\nconsole.log(make_indicate('abc')); // 'cbaabc'\nconsole.log(make_indicate('abcd')); // 'dcbabcd'\nconsole.log(make_indicate('abcde')); // 'edcbaabcde'\nconsole.log(make_indicate('abcdef')); // 'fedcbaabcdef'\nconsole.log(make_indicate('abcdefg')); // 'gfedcbaabcdefg'\nconsole.log(make_indicate('abcdefgh')); // 'hgfedcbaabcdefgh'\nconsole.log(make_indicate('abcdefghi')); // 'ihgfedcbaabcdefghi'\nconsole.log(make_indicate('abcdefghij')); // 'jihgfedcbaabcdefghij'\nconsole.log(make_indicate('abcdefghijk')); // 'kjihgfedcba"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return NULL;\n    string longest_str = strings[0];\n    for(int i=1;i<strings.size();i++){\n        if(strings[i].size()>longest_str.size()) longest_str = strings[i];\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> result;\n    for(int i=0;i<str.length();i++){\n        result.push_back(str.substr(0,i+1));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s=\"\";\n    for(int i=0;i<=n;i++){\n        s+=to_string(i);\n        if(i!=n) s+=\" \";\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        if(find(v.begin(),v.end(),str[i])==v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.size(); i++){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(1);\n            }\n        }\n        else if(music_string[i] == '.'){\n            beats.push_back(1);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0;\n    int j=0;\n    int str_len=str.length();\n    int substring_len=substring.length();\n    while(i<str_len){\n        if(str[i]==substring[j]){\n            j++;\n            if(j==substring_len){\n                count++;\n                j=0;\n            }\n        }\n        else{\n            j=0;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string s=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]>='0'&&numbers[i]<='9'){\n            temp+=numbers[i];\n        }\n        else{\n            if(temp!=\"\"){\n                s+=to_string(m[temp]);\n                temp=\"\";\n            }\n            s+=numbers[i];\n        }\n    }\n    if(temp!=\"\"){\n        s+=to_string(m[temp]);\n    }\n    return s;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min1=1000000,min2=1000000;\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<min1){\n                min1=abs(numbers[i]-numbers[j]);\n                min2=numbers[i]<numbers[j]?numbers[i]:numbers[j];\n            }\n        }\n    }\n    vector<float> result;\n    result.push_back(min2);\n    result.push_back(min2+min1);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float max_num = numbers[0];\n    for(int i=1;i<numbers.size();i++){\n        if(numbers[i]>max_num){\n            max_num = numbers[i];\n        }\n    }\n    for(int i=0;i<numbers.size();i++){\n        numbers[i] = numbers[i]/max_num;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;str[i]!='\\0';i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int i;\n    for(i=n/2;i>=1;i--){\n        if(n%i==0){\n            break;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1){\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(string str: strings){\n        if(str.substr(0, prefix.length()) == prefix){\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n==1)\n    return false;\n    if(n==2)\n    return true;\n    if(n%2==0)\n    return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findzero(vector<double> xs){\n    double x = 0;\n    double epsilon = 0.00001;\n    while(abs(poly(xs, x)) > epsilon){\n        x -= poly(xs, x) / (poly(xs, x + epsilon) - poly(xs, x)) * epsilon;\n    }\n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> res;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            res.push_back(l[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l[i]=res[i/3];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=0;i<l.size();i++){\n        if(i%2==0){\n            even.push_back(l[i]);\n        }\n    }\n    sort(even.begin(),even.end());\n    for(int i=0;i<even.size();i++){\n        l[2*i]=even[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decodeic(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n        let charCode = str.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            result += String.fromCharCode((charCode - 65 - 3) % 26 + 65);\n        } else if (charCode >= 97 && charCode <= 122) {\n            result += String.fromCharCode((charCode - 97 - 3) % 26 + 97);\n        } else {\n            result += str[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(decodeic('Khoor, Zruog!')); // 'Hello, World!'\nconsole.log(decodeic('Rfcq!')); // 'Cat!'\nconsole.log(decodeic('Guvf%20vf%20zl%20lv%20vhfuhw%21')); // 'This%20is%20a%20secret%20message%21'\nconsole.log(decodeic('Guvf%20vf%20zl%20lv%20vhfuhw%21%20Guvf%20vf%20zl%20lv%20vhfuhw%21')); // 'This%20is%20a%20secret%20message%21%20This%20is%20a%20secret%20message%21'\nconsole.log(decodeic('Guvf%20vf%20zl%20lv%20vhfuhw%21%20Guvf%20vf%20zl%20lv%20vhfuhw%21%20Guvf%20vf%20zl%20lv%20vhfuhw%21')); // 'This%20is%20a%20secret%20message%21%20This%20is%20a%20secret%20message%21%20This%20is%20a%20secret%20message%21'\nconsole.log(decodeic('Guvf%20vf%20zl%20lv%20vhfuh"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0,i=0;\n    while(i<n){\n        c=a+b;\n        a=b;\n        b=c;\n        i++;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n=l.size();\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]=l[i]+1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result=\"\";\n    while(x>0){\n        result=(char)(x%base+'0')+result;\n        x/=base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 4;\n    if(n==3)\n        return 8;\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0){\n        return (l[n/2] + l[n/2 - 1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0,j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(p==0)\n    return 1;\n    else if(p%2==0)\n    return modp(n*n,p/2);\n    else\n    return n*modp(n*n,(p-1)/2);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string dec = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            dec += char(int(s[i] - 97 - 3 + 26) % 26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            dec += char(int(s[i] - 65 - 3 + 26) % 26 + 65);\n        }\n        else{\n            dec += s[i];\n        }\n    }\n    return dec;\n}\nstring encode_caesar(string s){\n    /* takes as input string with encode_caesar. Returns dec string */\n    string dec = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            dec += char(int(s[i] - 97 - 3 + 26) % 26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            dec += char(int(s[i] - 65 - 3 + 26) % 26 + 65);\n        }\n        else{\n            dec += s[i];\n        }\n    }\n    return dec;\n}\nstring encode_vigenere(string s){\n    /* takes as input string with encode_vigenere. Returns dec string */\n    string dec = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            dec += char(int(s[i] - 97 - 3 + 26) % 26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            dec += char(int(s[i] - 65 - 3 + 26) % 26 + 65);\n        }\n        else{\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i=0; i<text.length(); i++){\n        if(vowels.find(text[i]) == string::npos){\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n    return n;\n    else\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int i,count=0;\n    for(i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc=true, dec=true;\n    for(int i=1; i<l.size(); i++){\n        if(l[i]>l[i-1]) dec=false;\n        if(l[i]<l[i-1]) inc=false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    for(int i=0;i<l1.size();i++){\n        if(binary_search(l2.begin(),l2.end(),l1[i])){\n            result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum=sum+i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a=0,b=0,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int n=s.length();\n    if(shift>=n)\n    return string(s.rbegin(),s.rend());\n    return s.substr(n-shift)+s.substr(0,n-shift);\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i]-'A'+1;\n        }\n        else if(s[i]>='a'&&s[i]<='z'){\n            sum+=s[i]-'a'+1;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples,oranges;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n    return n-apples-oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=100000;\n    int index=0;\n    vector<int> result;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min){\n                min=arr[i];\n                index=i;\n            }\n        }\n    }\n    if(min==100000){\n        return result;\n    }\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n            freq = 1;\n        }\n        else if(lst[i] == max){\n            freq++;\n        }\n    }\n    if(max == 0){\n        return 1;\n    }\n    return freq;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    while(!lst.empty()){\n        res.push_back(*max_element(lst.begin(), lst.end()));\n        lst.erase(max_element(lst.begin(), lst.end()));\n        if(!lst.empty())\n            res.push_back(*min_element(lst.begin(), lst.end()));\n        lst.erase(min_element(lst.begin(), lst.end()));\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w)return false;\n    for(int i=0;i<q.size();i++){\n        for(int j=i+1;j<q.size();j++){\n            if(q[i]>q[j]){\n                int temp=q[i];\n                q[i]=q[j];\n                q[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<q.size();i++){\n        if(q[i]!=q[q.size()-i-1])return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[arr.size()-i-1]){\n            count++;\n        }\n    }\n    return count/2;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nbool is_multip_prime(int a){\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(is_multiply_prime(i)==true){\n            count++;\n        }\n    }\n    if(count==3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==1)\n    {\n        if(x==1)\n        return true;\n        else\n        return false;\n    }\n    double y=log(x)/log(n);\n    if(y==int(y))\n    return true;\n    else\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=pow(a,1.0/3.0);\n    if(b*b*b==a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.size();i++){\n        if(num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"\";\n    while(decimal>0){\n        binary=(decimal%2==0?\"0\":\"1\")+binary;\n        decimal/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int n=s.length();\n    if(n<3) return false;\n    for(int i=0;i<n-2;i++){\n        if(s[i]==s[i+1]&&s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=3.3){\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]>3.0){\n            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i]>2.7){\n            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i]>2.3){\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]>2.0){\n            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i]>1.7){\n            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i]>1.3){\n            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i]>1.0){\n            letter_grades.push_back(\"D+\");\n        }\n        else if(grades[i]>0.7){\n            letter_grades.push_back(\"D\");\n        }\n        else if(grades[i]>0.0){\n            letter_grades.push_back(\"D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1)\n        return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    else if(n==2) return 2;\n    else return 2*(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string s=\"\";\n    while(N>0){\n        s=to_string(N%2)+s;\n        N/=2;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string res=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            res+=word;\n            res+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    res+=word;\n    for(int i=0;i<res.length();i++){\n        if(res[i]!=' '){\n            for(int j=i+1;j<res.length();j++){\n                if(res[j]!=' '&&res[i]>res[j]){\n                    char temp=res[i];\n                    res[i]=res[j];\n                    res[j]=temp;\n                }\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                res.push_back({i,j});\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum=array[0]+array[array.size()-1];\n    if(sum%2==0){\n        sort(array.begin(),array.end(),greater<int>());\n    }\n    else{\n        sort(array.begin(),array.end());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        char c=s[i];\n        if(c>='a'&&c<='z'){\n            encrypted+=(c-'a'+4)%26+'a';\n        }\n        else if(c>='A'&&c<='Z'){\n            encrypted+=(c-'A'+4)%26+'A';\n        }\n        else{\n            encrypted+=c;\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    int smallest=lst[0],second_smallest=lst[1];\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]==smallest) lst[i]=INT_MAX;\n    }\n    sort(lst.begin(),lst.end());\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]!=INT_MAX) return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='\n'){\n            if(S[i-1]=='I'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels=\"aeiou\";\n    for(int i=0;i<message.length();i++){\n        if(isalpha(message[i])){\n            for(int j=0;j<vowels.length();j++){\n                if(tolower(message[i])==vowels[j]){\n                    message[i]=vowels[(j+2)%vowels.length()];\n                    break;\n                }\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        int sum=0;\n        int x=lst[i];\n        while(x!=0){\n            sum=sum+x%10;\n            x=x/10;\n        }\n        if(sum>max){\n            max=sum;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    bool upper=true,lower=true;\n    for(auto i:dict){\n        if(i.first.size()==0) return false;\n        for(auto j:i.first){\n            if(j>='a'&&j<='z') lower=false;\n            if(j>='A'&&j<='Z') upper=false;\n        }\n        if(upper&&lower) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<=n;i++){\n        bool isPrime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                isPrime=false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int c=a%10;\n    int d=b%10;\n    int e=c*d;\n    return e;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p="}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int stones = n;\n    for(int i = 0; i < n; i++){\n        pile.push_back(stones);\n        if(n % 2 == 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '||s[i]==','){\n            if(word.size()>0){\n                words.push_back(word);\n                word=\"\";\n            }\n        }else{\n            word+=s[i];\n        }\n    }\n    if(word.size()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y){\n        return 1;\n    }\n    else{\n        for(int i=x;i<=y;i++){\n            if(i%2!=0){\n                return i;\n            }\n        }\n    }\n    return 1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum=sum+i;\n    }\n    int avg=round(sum/(m-n+1));\n    string binary=\"\";\n    while(avg>0){\n        int rem=avg%2;\n        binary=to_string(rem)+binary;\n        avg=avg/2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> y;\n    for(int i=0;i<x.size();i++){\n        int n=x[i];\n        while(n>0){\n            int d=n%10;\n            if(d%2==0){\n                y.push_back(x[i]);\n                break;\n            }\n            n=n/10;\n        }\n    }\n    sort(y.begin(),y.end());\n    return y;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> result;\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push_back(m[arr[i]]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> v;\n    for(int i=1;i<=n;i++){\n        int sum=0;\n        for(int j=1;j<=i;j++){\n            sum+=j;\n        }\n        if(i%2==0){\n            v.push_back(i);\n        }\n        else{\n            v.push_back(sum);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result;\n    int even=0,odd=0;\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        int len=s.length();\n        int flag=1;\n        for(int j=0;j<len/2;j++){\n            if(s[j]!=s[len-j-1]){\n                flag=0;\n                break;\n            }\n        }\n        if(flag==1){\n            if(i%2==0)\n                even++;\n            else\n                odd++;\n        }\n    }\n    result.push_back(even);\n    result.push_back(odd);\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n            sum-=num%10;\n            num=num/10;\n        }\n        while(num>0){\n            sum+=num%10;\n            num=num/10;\n        }\n        if(sum==0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        if(arr[i]>arr[i+1]){\n            count++;\n        }\n    }\n    if(count<=1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd=0,even=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0) odd++;\n        else even++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2!=0) odd++;\n        else even++;\n    }\n    if(odd==0) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max = 0;\n    for(int i = 0; i < test.length(); i++){\n        if(test[i] != ' '){\n            result[test[i]]++;\n            if(result[test[i]] > max){\n                max = result[test[i]];\n            }\n        }\n    }\n    map<char,int> final;\n    for(auto i : result){\n        if(i.second == max){\n            final.insert(i);\n        }\n    }\n    return final;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=c[i]){\n            res+=s[i];\n        }\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=res==rev;\n    return {res,pal};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0)count++;\n        }\n        string s=\"the number of odd elements \"+to_string(count)+\"n the str\"+to_string(count)+\"ng \"+to_string(count)+\" of the \"+to_string(count)+\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> res;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int num=arr[i];\n        while(num!=0){\n            if(num%2==1) count++;\n            num=num/2;\n        }\n        res.push_back(count);\n    }\n    sort(arr.begin(),arr.end());\n    sort(res.begin(),res.end());\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int num=arr[i];\n        while(num!=0){\n            if(num%2==1) count++;\n            num=num/2;\n        }\n        if(count==res[i]) res[i]=arr[i];\n        else res[i]=0;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    string word=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(word.size()==n){\n                words.push_back(word);\n            }\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.size()==n){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int max_consonant_count = 0;\n    int current_consonant_count = 0;\n    for(int i = word.length() - 1; i >= 0; i--){\n        if(vowels.find(word[i]) == string::npos){\n            current_consonant_count++;\n        }else{\n            if(current_consonant_count > max_consonant_count){\n                max_consonant_count = current_consonant_count;\n                result = word.substr(i + 1, max_consonant_count);\n            }\n            current_consonant_count = 0;\n        }\n    }\n    if(current_consonant_count > max_consonant_count){\n        max_consonant_count = current_consonant_count;\n        result = word.substr(0, max_consonant_count);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open=0,close=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(') open++;\n            else close++;\n        }\n    }\n    if(open==close) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n  int sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]%2==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> result;\n    while(n!=1){\n        if(n%2==1){\n            result.push_back(n);\n        }\n        n=n%2==0?n/2:3*n+1;\n    }\n    result.push_back(1);\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    for(i=0;i<date.length();i++){\n        if(date[i]=='-'){\n            j=i;\n            break;\n        }\n    }\n    for(k=0;k<date.length();k++){\n        if(date[k]=='-'){\n            l=k;\n            break;\n        }\n    }\n    if(j==0||l==0){\n        return false;\n    }\n    if(date[j-1]<'0'||date[j-1]>'9'||date[j+1]<'0'||date[j+1]>'9'){\n        return false;\n    }\n    if(date[l-1]<'0'||date[l-1]>'9'||date[l+1]<'0'||date[l+1]>'9'){\n        return false;\n    }\n    if(date[j+2]!='-'){\n        return false;\n    }\n    if(date[l+2]!='-'){\n        return false;\n    }\n    if(date[j-2]<'0'||date[j-2]>'9'||date[j-1]<'0'||date[j-1]>'9'){\n        return false;\n    }\n    if(date[l-2]<'0'||date[l-2]>'9'||date[l-1]<'0'||date[l-1]>'9'){\n        return false;\n    }\n    if(date[l+3]<'0'||date[l+3]>'9'||date[l+4]<'0'||date[l+4]>'9'){\n        return false;\n    }\n    if(date[j+3]<'0'||date[j+3]>'9'||date[j+4]<'0'||date"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    string word = \"\";\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                res.push_back(word);\n                word = \"\";\n            }\n        }else if(txt[i] == ','){\n            if(word != \"\"){\n                res.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        res.push_back(word);\n    }\n    for(int i = 0; i < res.size(); i++){\n        for(int j = 0; j < res[i].size(); j++){\n            if(res[i][j] >= 'a' && res[i][j] <= 'z'){\n                res[i][j] = 'a' + (res[i][j] - 'a' + 1) % 26 - 1;\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> lst2 = lst;\n    sort(lst2.begin(), lst2.end());\n    if(lst2 == lst) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start=max(interval1[0],interval2[0]);\n    int end=min(interval1[1],interval2[1]);\n    if(start>end)return \"NO\";\n    int len=end-start+1;\n    if(len<=1)return \"NO\";\n    for(int i=2;i*i<=len;i++){\n        if(len%i==0)return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.empty()) return NULL;\n    int product = 1;\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 0) product *= -1;\n        sum += abs(arr[i]);\n    }\n    return product * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    vector<int> path;\n    int minVal = INT_MAX;\n    function<void(int, int, int)> dfs = [&](int x, int y, int steps) {\n        if (steps == k) {\n            vector<int> tempPath = path;\n            sort(tempPath.begin(), tempPath.end());\n            if (tempPath < path) {\n                path = tempPath;\n                minVal = path[0];\n            }\n            return;\n        }\n        for (auto& dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < n && newY >= 0 && newY < n && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.push_back(grid[newX][newY]);\n                dfs(newX, newY, steps + 1);\n                path.pop_back();\n                visited[newX][newY] = false;\n            }\n        }\n    };\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            visited[i][j] = true;\n            path.push_back(grid[i][j]);\n            dfs(i, j, 1);\n            path.pop_back();\n            visited[i][j] = false;\n        }\n    }\n    res.push_back(minVal);\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    if(n==1){\n        res.push_back(1);\n        return res;\n    }\n    if(n==2){\n        res.push_back(1);\n        res.push_back(3);\n        return res;\n    }\n    if(n==3){\n        res.push_back(1);\n        res.push_back(3);\n        res.push_back(2);\n        return res;\n    }\n    if(n==4){\n        res.push_back(1);\n        res.push_back(3);\n        res.push_back(2);\n        res.push_back(8);\n        return res;\n    }\n    vector<int> temp = tri(n-1);\n    res.push_back(temp[n-1]);\n    res.push_back(temp[n-2]);\n    res.push_back(temp[n-3]);\n    res.push_back(temp[n-1]+temp[n-2]+temp[n-3]+1);\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    while(n>0){\n        int digit=n%10;\n        if(digit%2!=0){\n            product*=digit;\n        }\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(pow(lst[i],2));\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n    return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z')\n    return true;\n    else\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int ans = -1;\n    for(int i=1;i<n;i++){\n        if(arr[i]<=arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max = INT_MIN;\n    int min = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max = lst[i];\n        }\n        if(lst[i]<min){\n            min = lst[i];\n        }\n    }\n    if(max == INT_MIN && min == INT_MAX){\n        return {0,0};\n    }\n    return {min,max};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==typeid(string)&&b.type()==typeid(string)){\n        string a1=boost::any_cast<string>(a);\n        string b1=boost::any_cast<string>(b);\n        if(a1==b1)return boost::any();\n        else return b1;\n    }\n    else if(a.type()==typeid(double)&&b.type()==typeid(double)){\n        double a1=boost::any_cast<double>(a);\n        double b1=boost::any_cast<double>(b);\n        if(a1==b1)return boost::any();\n        else return b1;\n    }\n    else if(a.type()==typeid(string)&&b.type()==typeid(double)){\n        string a1=boost::any_cast<string>(a);\n        double b1=boost::any_cast<double>(b);\n        if(a1==to_string(b1))return boost::any();\n        else return b1;\n    }\n    else if(a.type()==typeid(double)&&b.type()==typeid(string)){\n        double a1=boost::any_cast<double>(a);\n        string b1=boost::any_cast<string>(b);\n        if(to_string(a1)==b1)return boost::any();\n        else return b1;\n    }\n    else return b;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact=fact*i;\n    }\n    return fact;\n}\nlong long brazilian_factorial(int n){\n    long long b_fact=1;\n    for(int i=1;i<=n;i++){\n        b_fact=b_fact*special_factorial(i);\n    }\n    return b_fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n        }else{\n            if(count > 2){\n                res += \"_\";\n            }else{\n                res += string(count, '_');\n            }\n            res += text[i];\n            count = 0;\n        }\n    }\n    if(count > 2){\n        res += \"_\";\n    }else{\n        res += string(count, '_');\n    }\n    return res;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int i,count=0,count1=0,count2=0;\n    for(i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n        if(file_name[i]=='.'){\n            count1++;\n        }\n        if(file_name[i]>='a'&&file_name[i]<='z'){\n            count2++;\n        }\n    }\n    if(count>0&&count1==1&&count2==0){\n        return \"No\";\n    }\n    if(count1==1&&count2==1){\n        if(file_name[file_name.length()-1]=='e'&&file_name[file_name.length()-2]=='x'&&file_name[file_name.length()-3]=='e'){\n            return \"Yes\";\n        }\n        if(file_name[file_name.length()-1]=='l'&&file_name[file_name.length()-2]=='l'&&file_name[file_name.length()-3]=='d'){\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0 && i%4==0){\n            sum+=lst[i]*lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    int count=0;\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            count++;\n            if(count%2==1){\n                result+=word;\n                result+=\" \";\n            }\n            word=\"\";\n        }\n        else{\n            word+=sentence[i];\n        }\n    }\n    if(count%2==1){\n        result+=word;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d==b*c);\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> res;\n    vector<int> temp;\n    int sum;\n    for(int i=0;i<nums.size();i++){\n        sum=0;\n        temp.push_back(nums[i]);\n        if(nums[i]<0){\n            nums[i]=-nums[i];\n        }\n        while(nums[i]>0){\n            sum+=nums[i]%10;\n            nums[i]/=10;\n        }\n        temp.push_back(sum);\n    }\n    sort(temp.begin(),temp.end());\n    for(int i=0;i<temp.size();i+=2){\n        res.push_back(temp[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        string s=to_string(nums[i]);\n        int first=s[0]-'0';\n        int last=s[s.length()-1]-'0';\n        if(first%2!=0 && last%2!=0 && first>10 && last>10){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i]=i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    if (index1 == planets.size() || index2 == planets.size()) {\n        return result;\n    }\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]%2!=0){\n                count++;\n            }\n        }\n        if(count%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n==0)\n    return y;\n    else\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && fmod(lst[i], 2) != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = 0;\n    string strongest_extension = \"\";\n    for(string extension : extensions){\n        int uppercase_count = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                uppercase_count++;\n            }\n        }\n        int strength = uppercase_count - (int)extension.length();\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    if(n<m)return false;\n    for(int i=0;i<n;i++){\n        if(a[i]==b[0]){\n            int j=0;\n            int k=i;\n            while(j<m){\n                if(a[k%n]!=b[j])break;\n                j++;\n                k++;\n            }\n            if(j==m)return true;\n        }\n    }\n    return false;\n}\nbool cycpattern_(string a,string b){\n    if(a.length()==0||b.length()==0)return false;\n    string c=a+a;\n    return cycpattern_check(c,b);\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even=0,count_odd=0;\n    while(num!=0){\n        int digit=num%10;\n        if(digit%2==0){\n            count_even++;\n        }\n        else{\n            count_odd++;\n        }\n        num=num/10;\n    }\n    vector<int> result;\n    result.push_back(count_even);\n    result.push_back(count_odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    vector<string> romans = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += romans[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max,x,y;\n    if(a>b){\n        max=a;\n        x=b;\n        y=c;\n    }\n    else if(b>c){\n        max=b;\n        x=a;\n        y=c;\n    }\n    else{\n        max=c;\n        x=a;\n        y=b;\n    }\n    if(pow(max,2)==pow(x,2)+pow(y,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string result = \"\";\n    for(string word : words){\n        vector<char> unique_chars;\n        for(char c : word){\n            if(find(unique_chars.begin(), unique_chars.end(), c) == unique_chars.end()){\n                unique_chars.push_back(c);\n            }\n        }\n        if(unique_chars.size() > max_unique){\n            max_unique = unique_chars.size();\n            result = word;\n        }\n        else if(unique_chars.size() == max_unique && word < result){\n            result = word;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total=number+need;\n    if(total<=remaining){\n        return {total,remaining-total};\n    }else{\n        return {remaining,0};\n    }\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i + 1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i + 1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i + 1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i + 1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int i=0,j=s.length()-1;\n    while(i<j){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n        if(s[j]>='a'&&s[j]<='z'){\n            s[j]=s[j]-32;\n        }\n        else if(s[j]>='A'&&s[j]<='Z'){\n            s[j]=s[j]+32;\n        }\n        i++;\n        j--;\n    }\n    if(i==j){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n    }\n    if(i>j){\n        for(int i=0;i<s.length();i++){\n            if(s[i]>='a'&&s[i]<='z'){\n                s[i]=s[i]-32;\n            }\n            else if(s[i]>='A'&&s[i]<='Z'){\n                s[i]=s[i]+32;\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int>v;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\n"}
