{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_count = 0;\n    string current_group;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_count++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_count--;\n            current_group += paren_string[i];\n            if(open_count == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "\n    float part;\n    part = modf(number, &number);\n    return part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float temp = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        temp += pow(numbers[i] - mean, 2);\n    }\n    return sqrt(temp / numbers.size());\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i = 0; i < numbers.size(); i++){\n        printf(\"%d \", numbers[i]);\n        if(i != numbers.size() - 1)\n            printf(\"%d \", delimeter);\n    }\n    return numbers;\n}\n\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int level = 0;\n    for(char c : paren_string){\n        if(c == '(')\n            level++;\n        else if(c == ')')\n            level--;\n        levels.push_back(level);\n    }\n    return levels;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n\n"}
{"task_id": "CPP/9", "generation": "\n  vector<int> result;\n  int max_so_far = numbers[0];\n  result.push_back(max_so_far);\n  for(int i=1; i<numbers.size(); i++){\n    if(numbers[i] > max_so_far){\n      max_so_far = numbers[i];\n    }\n    result.push_back(max_so_far);\n  }\n  return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "\n\n  function make_indrome(string s) {\n    for (int i = s.length - 1; i >= 0; i--) {\n      if (is_palindrome(s.substring(0, i + 1))) {\n        return s.substring(0, i + 1);\n      }\n    }\n    return \"\";\n  }\n\n  function is_palindrome(string s) {\n    int start = 0;\n    int end = s.length - 1;\n    while (start < end) {\n      if (s[start] != s[end]) {\n        return false;\n      }\n      start++;\n      end--;\n    }\n    return true;\n  }\n\n  console.log(make_indrome('cat'));\n  // Output: \"ac\"\n\n  console.log(make_indrome('make'));\n  // Output: \"akem\"\n\n  console.log(make_indrome('makeindcat'));\n  // Output: \"akem\"\n\n  console.log(make_indrome('c'));\n  // Output: \"ac\"\n\n  function make_indrome(string s) {\n    for (int i = s.length - 1; i >= 0; i--) {\n      if (is_palindrome(s.substring(0, i + 1))) {\n        return s.substring(0, i + 1);\n      }\n    }\n    return \"\";\n  }\n\n  function is_palindrome(string s) {\n    int start = 0;\n    int end = s.length - 1;\n    while (start < end) {\n      if (s[start] != s[end]) {\n        return false;\n      }\n      start++;\n      end--;\n    }\n    return true;\n  }\n\n  console.log(make_indrome('cat'));\n  // Output: \"ac\"\n\n  console.log(make_indrome('make'));\n  // Output: \"akem\"\n\n  console.log(make_indrome('makeindcat'));\n  // Output: \"akem\"\n\n  console.log(make_indrome"}
{"task_id": "CPP/11", "generation": "\n    int len1 = a.length();\n    int len2 = b.length();\n    int max_len = max(len1, len2);\n    int carry = 0;\n    string result = \"\";\n    for(int i=0; i<max_len; i++){\n        int bitA = (i < len1) ? (a[len1-i-1] == '1') : 0;\n        int bitB = (i < len2) ? (b[len2-i-1] == '1') : 0;\n        int bitXOR = bitA ^ bitB ^ carry;\n        result.push_back(bitXOR + '0');\n        carry = (bitA & bitB) | (bitA & carry) | (bitB & carry);\n    }\n    if(carry){\n        result.push_back(carry + '0');\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "\n  if(strings.empty()){\n    return NULL;\n  }\n  string longest = strings[0];\n  for(int i = 1; i < strings.size(); i++){\n    if(strings[i].length() > longest.length()){\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n\n"}
{"task_id": "CPP/15", "generation": "\n    string sequence = \"\";\n    for(int i=0; i<=n; i++){\n        sequence += to_string(i) + \" \";\n    }\n    return sequence.substr(0, sequence.length()-1);\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> char_set(256);\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(char_set[str[i]] == 0){\n            char_set[str[i]] = 1;\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.length(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beats.push_back(1);\n                break;\n            case '|':\n                beats.push_back(2);\n                break;\n            case '.':\n                beats.push_back(4);\n                break;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    int len_str = str.length();\n    int len_sub = substring.length();\n    for(int i=0; i<=len_str-len_sub; i++){\n        int j;\n        for(j=0; j<len_sub; j++)\n            if(str[i+j] != substring[j])\n                break;\n        if(j == len_sub)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string temp = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] == ' '){\n            temp += num_map[result];\n            result = \"\";\n        }\n        else{\n            result += numbers[i];\n        }\n    }\n    temp += num_map[result];\n\n    for(int i=0; i<temp.length(); i++){\n        for(int j=0; j<temp.length()-i-1; j++){\n            if(temp[j] > temp[j+1]){\n                swap(temp[j], temp[j+1]);\n            }\n        }\n    }\n    return temp;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i]<min1){\n            min2 = min1;\n            min1 = numbers[i];\n        }\n        else if(numbers[i]<min2){\n            min2 = numbers[i];\n        }\n    }\n    return {min1, min2};\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float max_val = -1000000000.0;\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = numbers[i]/max_val;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto value : values){\n        if(boost::any_cast<int>(&value) != NULL){\n            result.push_back(boost::any_cast<int>(&value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n/2; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    result.push_back(numbers[0]);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; str[i] != '\\0'; i++){\n        if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n        else if(str[i] >= 'a' && str[i] <= 'z'){\n            str[i] = str[i] - 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.length()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    for(long long i = 2; i * i <= n; i++){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "\n\n    double result = 0;\n    for(int i = 0; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] % 3 == 0){\n            lprime.push_back(l[i]);\n        }\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int>::iterator i;\n    for(i = l.begin()+1; i != l.end(); ++i){\n        if(*i == *(i-1))\n            l.erase(i);\n    }\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n  float max = l[0];\n  for(int i=1; i<l.size(); i++){\n    if(l[i] > max)\n      max = l[i];\n  }\n  return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%7==0 || i%11==0 || i%13==0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]%2 == 0){\n            even.push_back(l[i]);\n        }\n    }\n    sort(even.begin(), even.end());\n    return even;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* decode(const char* encoded_string) {\n    char* decoded_string = malloc(sizeof(char) * strlen(encoded_string) + 1);\n    for (int i = 0; i < strlen(encoded_string); i++) {\n        decoded_string[i] = encoded_string[i] - 1;\n    }\n    decoded_string[strlen(encoded_string)] = '\\0';\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    if(n<=0)\n        return -1;\n    int a=0, b=1, c, i;\n    if(n==1)\n        return a;\n    for(i=2; i<=n; i++){\n        c=a+b;\n        a=b;\n        b=c;\n        if(c%2==0)\n            return c;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3)\n        return false;\n    sort(l.begin(), l.end());\n    for(int i = 0; i < n - 2; i++){\n        int a = l[i];\n        int start = i + 1;\n        int end = n - 1;\n        while(start < end){\n            if(a + l[start] + l[end] == 0){\n                return true;\n            }\n            else if(a + l[start] + l[end] < 0){\n                start += 1;\n            }\n            else{\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/41", "generation": "\n    int count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            count++;\n        }\n    }\n    return count/2;\n}\n\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool pairs_sum_to_zero(vector<int> l, int x, int y){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j]==x || l[i]+l[j]==y){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool pairs_sum_to_zero(vector<int> l, int x){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j]==x){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x>0){\n        result = to_string(x%base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 1;\n    else if(n==2)\n        return 0;\n    else if(n==3)\n        return 1;\n    else\n        return fib4(n-1) + fib4(n-2);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 != 0)\n        return (float)l[n/2];\n    else\n        return (float)(l[(n-1)/2] + l[n/2])/2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end){\n        if(text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else\n        return (n%p);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            decoded += ' ';\n        }\n        else if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += char(s[i] - 'a' + 1);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += char(s[i] - 'A' + 1);\n        }\n    }\n    return decoded;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0==s1;\n}\nbool same_ars(string s0,string s1){\n    string s0s1 = s0+s1;\n    sort(s0s1.begin(), s0s1.end());\n    return s0s1.find('\\0')==string::npos;\n}\nbool same_arsab(string s0,string s1){\n    string s0s1 = s0+s1;\n    sort(s0s1.begin(), s0s1.end());\n    return s0s1.find('\\0')==string::npos;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n        }\n        if(count < 0)\n            return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n<2) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=1; i<n; i++){\n        if(l[i]<l[i-1]) increasing = false;\n        if(l[i]>l[i-1]) decreasing = false;\n        if(!increasing && !decreasing) return false;\n    }\n    return true;\n}\nbool mon(vector<int> l){\n    int n = l.size();\n    if(n<2) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=1; i<n; i++){\n        if(l[i]<l[i-1]) increasing = false;\n        if(l[i]>l[i-1]) decreasing = false;\n        if(!increasing && !decreasing) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                result.push_back(l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for (i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(i*xs[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 1;\n    else if(n==2)\n        return 1;\n    else{\n        int a=0, b=1, c=1, d;\n        for(int i=3; i<=n; i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' || s[i] == 'Y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    for(int i=0; i<shift; i++){\n        str = str.substr(1) + str.substr(0,1);\n    }\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isdigit(s[i])){\n            sum += s[i] - '0';\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0;\n    int i = 0;\n    while(s[i] != '\\0'){\n        if(s[i] == 'a' || s[i] == 'A'){\n            apples += n;\n        }\n        else if(s[i] == 'o' || s[i] == 'O'){\n            oranges += n;\n        }\n        i++;\n    }\n    return apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max_val = -1;\n    int max_freq = 0;\n    int freq = 1;\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] == lst[i-1]){\n            freq++;\n        }\n        else{\n            if(freq > max_freq){\n                max_freq = freq;\n                max_val = lst[i-1];\n            }\n            freq = 1;\n        }\n    }\n    if(freq > max_freq){\n        max_freq = freq;\n        max_val = lst[lst.size()-1];\n    }\n    return max_val;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            result.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/71", "generation": "\n    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}\n\nfloat triangle_area3(float a, float b, float c){\n    if(a + b > c && a + c > b && b + c > a){\n        float area = triangle_area(a, b, c);\n        return round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int changes = 0;\n    int n = arr.size();\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    vector<string> result;\n    int sum1=0, sum2=0;\n    for(int i=0; i<lst1.size(); i++)\n        sum1 += lst1[i].size();\n    for(int i=0; i<lst2.size(); i++)\n        sum2 += lst2[i].size();\n    if(sum1<sum2)\n        result = lst1;\n    else if(sum2<sum1)\n        result = lst2;\n    return result;\n}\n\n"}
{"task_id": "CPP/75", "generation": "\n    int i, j, k;\n    for(i=2; i<=a/2; i++){\n        if(a%i==0){\n            for(j=i+1; j<=a/2; j++){\n                if(a%j==0){\n                    for(k=j+1; k<=a/2; k++){\n                        if(a%k==0){\n                            if(i*j*k==a)\n                                return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n  int p=pow(n,int(log(x)/log(n)));\n  return p==x;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = round(pow(a, (1.0/3.0)));\n    if(cubeRoot*cubeRoot*cubeRoot == a)\n        return true;\n    else\n        return false;\n}\n\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    int n = s.length();\n    if(n < 2) return false;\n    for(int i = 0; i < n-1; i++){\n        if(s[i] == s[i+1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(float grade : grades){\n        if(grade > 3.0) result.push_back(\"A\");\n        else if(grade > 7.0) result.push_back(\"B+\");\n        else if(grade > 20.0) result.push_back(\"B-\");\n        else if(grade > 13.0) result.push_back(\"C+\");\n        else if(grade > 0.0) result.push_back(\"C-\");\n        else if(grade > 0.0) result.push_back(\"D+\");\n        else if(grade > 0.0) result.push_back(\"D\");\n        else if(grade > 0.0) result.push_back(\"F\");\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    if(str.length() % 2 == 0){\n        return false;\n    }\n    for(int i = 2; i * i <= str.length(); i++){\n        if(str.length() % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        if(i%10 == 1 || i/10 == 1)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N > 0){\n        binary = to_string(N % 2) + binary;\n        N /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[10] = {\"\", \"\", \"llo\", \"lo\", \"Hlo\", \"He\", \"hel\", \"hel\", \"Hell\", \"Hell\"};\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            result += ' ';\n        }\n        else{\n            result += words[s[i] - 'a'];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/88", "generation": "\n    int sum = 0;\n    for(int i=0; i<array.size(); i++){\n        sum += array[i];\n    }\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    else{\n        sort(array.begin(), array.end());\n    }\n    return array;\n}\n\n"}
{"task_id": "CPP/89", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = (s[i] - 'a' + 2) % 26 + 'a';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = (s[i] - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2){\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I' && S[i+1] == ' ' && S[i+2] == 's' && S[i+3] == ' ' && S[i+4] == 'b' && S[i+5] == 'o' && S[i+6] == 'r' && S[i+7] == 'd' && S[i+8] == '.'){\n            count++;\n            i += 8;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n  if(a==b+c || b==a+c || c==a+b)\n    return true;\n  else\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(message[i]=='a' || message[i]=='A' || message[i]=='e' || message[i]=='E' || message[i]=='i' || message[i]=='I' || message[i]=='o' || message[i]=='O' || message[i]=='u' || message[i]=='U'){\n            message[i] = message[i+1];\n            message[i+1] = message[i];\n            i++;\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        int sum = 0;\n        while(lst[i]>0){\n            sum += lst[i]%10;\n            lst[i] /= 10;\n        }\n        if(sum > max_sum)\n            max_sum = sum;\n    }\n    return max_sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    for(auto i:dict){\n        if(i.first != \"\" && i.first != i.first.upper()){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2; i<=n; i++){\n        int flag=0;\n        for(int j=2; j<=i/2; j++){\n            if(i%j==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n"}
{"task_id": "CPP/97", "generation": "\n    int product=a*b;\n    int product_digits=0;\n    while(product>0){\n        product_digits+=product%10;\n        product/=10;\n    }\n    return product_digits;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n  int num = stoi(value);\n  if(num % 2 == 0){\n    if(num > 0){\n      return num - 1;\n    }\n    else{\n      return num + 1;\n    }\n  }\n  else{\n    return num;\n  }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    for(int i=0; i<n; i++){\n        if(i%2==0)\n            pile.push_back(2*i+1);\n        else\n            pile.push_back(2*i);\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ',' || s[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=x;i<=y;i++){\n        if(i>y){\n            return 1;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-\";\n    int avg = (n + m) / 2;\n    string binary = \"\";\n    while(avg){\n        binary = to_string(avg%2) + binary;\n        avg /= 2;\n    }\n    return \"0b\" + binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num>0){\n            int digit = num%10;\n            if(digit%2==0){\n                result.push_back(digit);\n                break;\n            }\n            num = num/10;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    map<int, string> special_num_to_word = {{0, \"\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<int> sorted_arr;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] != 1 && arr[i] != 2 && arr[i] != 3 && arr[i] != 4 && arr[i] != 5 && arr[i] != 6 && arr[i] != 7 && arr[i] != 8 && arr[i] != 9){\n            reverse(arr.begin(), arr.end());\n            for(int j = 0; j < arr.size(); j++){\n                sorted_arr.push_back(arr[j]);\n            }\n            sort(sorted_arr.begin(), sorted_arr.end());\n            string res = \"\";\n            for(int k = 0; k < sorted_arr.size(); k++){\n                res += special_num_to_word[sorted_arr[k]];\n            }\n            result.push_back(res);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0)\n            res.push_back(factorial(i));\n        else\n            res.push_back(sum(1,i));\n    }\n    return res;\n}\n\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\n\nint sum(int start, int end){\n    int sum = 0;\n    for(int i=start; i<=end; i++)\n        sum += i;\n    return sum;\n}\n\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i=1; i<=n; i++){\n        string str = to_string(i);\n        int len = str.length();\n        for(int j=0; j<len/2; j++){\n            if(str[j] != str[len-1-j]){\n                break;\n            }\n            if(j == len/2 -1){\n                even_count++;\n            }\n        }\n        if(i%2 != 0){\n            odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int num = abs(n[i]);\n        int sum = 0;\n        while(num>0){\n            sum += num%10;\n            num /= 10;\n        }\n        if(n[i]<0) sum *= -1;\n        if(sum == 0) count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        if(arr[i] > arr[(i+1)%n]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count1=0, count2=0;\n    for(int i=0; i<lst1.size(); i++){\n        if(lst1[i]%2==0)\n            count1++;\n    }\n    for(int i=0; i<lst2.size(); i++){\n        if(lst2[i]%2==0)\n            count2++;\n    }\n    if(count1==lst1.size() || count2==lst2.size())\n        return \"YES\";\n    else\n        return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0; i<test.length(); i++){\n        if(result.find(test[i])==result.end()){\n            result[test[i]] = 1;\n        }\n        else{\n            result[test[i]] += 1;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "\n    string result=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] != c[0]){\n            result += s[i];\n        }\n    }\n    string rev = result;\n    reverse(rev.begin(), rev.end());\n    if(result == rev){\n        return {result,true};\n    }\n    else{\n        return {result,false};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == 'n'){\n                count++;\n            }\n        }\n        if(count%2 != 0){\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0;\n    for(int i=0; i<nums.size(); i++)\n        sum += nums[i];\n    return sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\nint countBuckets(vector<vector<int>> grid, int bucket_capacity){\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count%bucket_capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    // Your code here\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        int count = 0;\n        for(int j=0; j<n; j++){\n            if(arr[j] == 1)\n                count++;\n        }\n        arr[i] = count;\n    }\n    sort(arr.begin(), arr.end());\n    return arr;\n}\n\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' ' || s[i] == '>' || s[i] == '[' || s[i] == '{' || s[i] == '<' || s[i] == ']' || s[i] == '}'){\n            if(word.length() == n){\n                if(count_consonants(word) == n){\n                    result.push_back(word);\n                }\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word.length() == n){\n        if(count_consonants(word) == n){\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\nint count_consonants(string word){\n    int count = 0;\n    for(int i=0; i<word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\";\n    bool found = false;\n    for(int i = word.length()-1; i >= 0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            for(int j = i-1; j >= 0; j--){\n                if(consonants.find(word[j]) != string::npos){\n                    result = word[j] + result;\n                    found = true;\n                    break;\n                }\n            }\n            if(found) break;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/119", "generation": "\n    string s = lst[0]+lst[1];\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == '(')\n            count++;\n        else if(s[i] == ')')\n            count--;\n        if(count < 0)\n            return \"No\";\n    }\n    if(count != 0)\n        return \"No\";\n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(), arr.end());\n    vector<int> res;\n    for(int i=0; i<arr.size()-k; i++){\n        res.push_back(arr[i]);\n    }\n    res.push_back(arr[arr.size()-k]);\n    for(int i=res.size()-2; i>=0; i--){\n        res[i]=max(res[i],res[i+1]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i=0; i<k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        collatz.push_back(n);\n        if(n % 2 == 0)\n            n = n / 2;\n        else\n            n = 3*n + 1;\n    }\n    collatz.push_back(1);\n    reverse(collatz.begin(), collatz.end());\n    return collatz;\n}\n\n"}
{"task_id": "CPP/124", "generation": "\n    int month, day, year;\n    sscanf(date.c_str(), \"%02d%02d%04d\", &month, &day, &year);\n    if(month<1 || month>12 || day<1 || year<1900 || year>2099)\n        return false;\n    if(month==2){\n        if(day>29) return false;\n    }\n    else if(month==4 || month==6 || month==9 || month==11){\n        if(day>30) return false;\n    }\n    else{\n        if(day>31) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] != ',' && txt[i] != ' '){\n            temp += txt[i];\n        }\n        else{\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    result.push_back(temp);\n    return result;\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n  if(lst.size()<2)\n    return true;\n  int count=0;\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]==lst[i+1])\n      count++;\n    if(count>1)\n      return false;\n  }\n  return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "\n    int a = interval1[0];\n    int b = interval1[1];\n    int c = interval2[0];\n    int d = interval2[1];\n    if(b < c || d < a)\n        return \"NO\";\n    else\n    {\n        int start = max(a, c);\n        int end = min(b, d);\n        if(start == end)\n            return \"NO\";\n        else\n        {\n            for(int i = start; i <= end; i++)\n            {\n                if(i % 2 == 0)\n                    return \"NO\";\n            }\n            return \"YES\";\n        }\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "\n    int product = 1;\n    for(int i = 0; i < arr.size(); i++){\n        product *= arr[i];\n    }\n    if(product > 0)\n        return 1;\n    else if(product < 0)\n        return -1;\n    else\n        return 0;\n}\n\nint prod_s(vector<int> arr1, vector<int> arr2){\n    int product1 = 1, product2 = 1;\n    for(int i = 0; i < arr1.size(); i++){\n        product1 *= arr1[i];\n    }\n    for(int i = 0; i < arr2.size(); i++){\n        product2 *= arr2[i];\n    }\n    return product1 * product2;\n}\n\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(grid[i][j] < k)\n                res.push_back(grid[i][j]);\n        }\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result(n);\n    for(int i=0; i<n; i++){\n        if(i==0)\n            result[i] = 0;\n        else if(i%2==0)\n            result[i] = 1;\n        else if(i%4==2)\n            result[i] = 2;\n        else\n            result[i] = 4;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '[') count++;\n        else if(str[i] == ']') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        lst[i] = round(lst[i]);\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n  if(txt.length()==0)\n    return false;\n  char last_char = txt[txt.length()-1];\n  if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z'))\n    return true;\n  else\n    return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "\n    for(int i=arr.size()-1; i>0; i--){\n        if(arr[i] < arr[i-1])\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n  int smallest = INT_MAX;\n  int largest = INT_MIN;\n  int smallest_neg = INT_MAX;\n  int largest_neg = INT_MIN;\n  for(int i=0; i<lst.size(); i++){\n    if(lst[i]<0 && lst[i]<smallest_neg){\n      smallest_neg = lst[i];\n    }\n    if(lst[i]>0 && lst[i]>largest_neg){\n      largest_neg = lst[i];\n    }\n    if(lst[i]<smallest){\n      smallest = lst[i];\n    }\n    if(lst[i]>largest){\n      largest = lst[i];\n    }\n  }\n  if(smallest_neg == INT_MAX){\n    smallest_neg = NULL;\n  }\n  if(largest_neg == INT_MIN){\n    largest_neg = NULL;\n  }\n  if(smallest == INT_MAX){\n    smallest = NULL;\n  }\n  if(largest == INT_MIN){\n    largest = NULL;\n  }\n  return {smallest, largest, smallest_neg, largest_neg};\n}\n\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==b.type()){\n        if(a.type()==typeid(double)){\n            double a1=boost::any_cast<double>(a);\n            double b1=boost::any_cast<double>(b);\n            if(a1==b1)\n                return NULL;\n            else if(a1<b1)\n                return a;\n            else\n                return b;\n        }\n        else if(a.type()==typeid(string)){\n            string a1=boost::any_cast<string>(a);\n            string b1=boost::any_cast<string>(b);\n            if(a1==b1)\n                return NULL;\n            else if(a1<b1)\n                return a;\n            else\n                return b;\n        }\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/138", "generation": "\n  if(n%2==0){\n    return n==4;\n  }\n  else{\n    return false;\n  }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long factorial = 1;\n    for(int i=1; i<=n; i++){\n        factorial *= i;\n    }\n    return factorial;\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i--;\n        }\n    }\n    return text;\n}\n\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0; i<file_name.length(); i++){\n        if(isdigit(file_name[i])){\n            count++;\n        }\n    }\n    if(count>0 && file_name.find('.') != string::npos){\n        string substring = file_name.substr(0, file_name.find('.'));\n        if(substring.empty() && (file_name[0]>='a' && file_name[0]<='z' || file_name[0]>='A' && file_name[0]<='Z')){\n            for(int i=file_name.length()-2; i>=0; i--){\n                if(file_name[i]=='.' || file_name[i]=='d' || file_name[i]=='D' || file_name[i]=='e' || file_name[i]=='E'){\n                    return \"Yes\";\n                }\n            }\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 4 == 0 && lst[i] % 4 == 0 && lst[i] % 3 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            count++;\n        }\n    }\n    string words[count+1];\n    int j = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            words[j] = sentence.substr(0, i);\n            sentence = sentence.substr(i+1);\n            j++;\n            i=0;\n        }\n    }\n    words[j] = sentence;\n    for(int i=0; i<count; i++){\n        for(int j=0; j<count-i-1; j++){\n            if(words[j].length() > words[j+1].length()){\n                string temp = words[j];\n                words[j] = words[j+1];\n                words[j+1] = temp;\n            }\n        }\n    }\n    for(int i=0; i<count; i++){\n        result += words[i];\n        if(i != count-1){\n            result += \" \";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/144", "generation": "\n    int x_num = stoi(x.substr(0,x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\")+1));\n    int n_num = stoi(n.substr(0,n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\")+1));\n\n    if(x_num*n_den == n_num*x_den)\n        return true;\n    else\n        return false;\n}\n\n"}
{"task_id": "CPP/145", "generation": "\n    sort(nums.begin(), nums.end(), [](int a, int b) {\n        int sum_a = sum_of_digits(a);\n        int sum_b = sum_of_digits(b);\n        if(sum_a == sum_b)\n            return a < b;\n        return sum_a < sum_b;\n    });\n    return nums;\n}\n\nint sum_of_digits(int num){\n    int sum = 0;\n    while(num){\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        string num = to_string(nums[i]);\n        if(num[0]%2 != 0 && num[num.size()-1]%2 != 0 && (num[0]%10 != 3 && num[0]%10 != 5 && num[0]%10 != 7 && num[0]%10 != 9) && (num[num.size()-1]%10 != 3 && num[num.size()-1]%10 != 5 && num[num.size()-1]%10 != 7 && num[num.size()-1]%10 != 9))\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        for(int j=i; j<=n; j++){\n            for(int k=j; k<=n; k++){\n                if((i*i + j*j + k*k)%3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets;\n    if(planet1==\"Mercury\" && planet2==\"Venus\") planets.push_back(\"Mars\");\n    else if(planet1==\"Venus\" && planet2==\"Mars\") planets.push_back(\"Jupiter\");\n    else if(planet1==\"Mars\" && planet2==\"Jupiter\") planets.push_back(\"Uranus\");\n    else if(planet1==\"Jupiter\" && planet2==\"Uranus\") planets.push_back(\"Neptune\");\n    else if(planet1==\"Uranus\" && planet2==\"Neptune\") planets.push_back(\"Pluto\");\n    else if(planet1==\"Neptune\" && planet2==\"Pluto\") planets.push_back(\"Earth\");\n    else if(planet1==\"Pluto\" && planet2==\"Earth\") planets.push_back(\"Merc\");\n    else if(planet1==\"Earth\" && planet2==\"Merc\") planets.push_back(\"\");\n    else if(planet1==\"Merc\" && planet2==\"\") planets.push_back(\"Venus\");\n    else if(planet1==\"Venus\" && planet2==\"\") planets.push_back(\"Mercury\");\n    else return planets;\n    return planets;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j]%2==0)\n                count++;\n        }\n        if(count%2==0)\n            result.push_back(lst[i]);\n    }\n    sort(result.begin(), result.end());\n    sort(result.begin(), result.end(), [](const string &a, const string &b) {\n        return a.size() < b.size() || (a.size() == b.size() && a < b);\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n==x){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength=0;\n    string strongest_extension=\"\";\n    for(int i=0;i<extensions.size();i++){\n        int strength=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(isupper(extensions[i][j])){\n                strength++;\n            }\n        }\n        if(strength>max_strength){\n            max_strength=strength;\n            strongest_extension=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    if(a.length() != b.length()){\n        return false;\n    }\n    string ab = a + b;\n    for(int i=0;i<a.length();i++){\n        bool flag = true;\n        for(int j=0;j<a.length();j++){\n            if(ab[i+j] != a[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag == true){\n            return true;\n        }\n    }\n    return false;\n}\n\nbool cpattern_check(string a, string b){\n    if(a.length() != b.length()){\n        return false;\n    }\n    string ab = a + b;\n    for(int i=0;i<a.length();i++){\n        bool flag = true;\n        for(int j=0;j<a.length();j++){\n            if(ab[i+j] != a[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag == true){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num = num / 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n  int max_count = 0;\n  string max_word = \"\";\n  for(int i=0; i<words.size(); i++){\n    int count = 0;\n    for(int j=0; j<words.size(); j++){\n      if(words[i] == words[j]){\n        count++;\n      }\n    }\n    if(count > max_count){\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "\n    if(remaining >= need){\n        number += need;\n        remaining -= need;\n    }\n    else{\n        number += remaining;\n        remaining = 0;\n    }\n    return {number, remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\"){\n            operand[i]=operand[i]+operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            operand[i]=operand[i]-operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            operand[i]=operand[i]*operand[i+1];\n        }\n        else if(operato[i]==\"/\"){\n            operand[i]=floor(operand[i]/operand[i+1]);\n        }\n        else if(operato[i]==\"**\"){\n            operand[i]=pow(operand[i],operand[i+1]);\n        }\n    }\n    return operand[0];\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            }else{\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(s.length()==0){\n        for(int i=s.length()-1; i>=0; i--){\n            s[i] = s[i];\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty())\n        return NULL;\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a; i<=b; i++){\n        if(i%2==0)\n            result.push_back(i);\n    }\n    return result;\n}\n\n"}
