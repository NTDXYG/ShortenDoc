{"task_id": "JavaScript/0", "generation": "\n  return numbers.every((num, index) => {\n    if (index === 0) return true;\n    return Math.abs(num - numbers[index - 1]) <= threshold;\n  });\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let groups = [];\n  let group = '';\n  let open = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open = true;\n      group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      open = false;\n      group += paren_string[i];\n      if (group.length > 1 && group[0] === '(' && group[group.length - 1] === ')') {\n        groups.push(group);\n        group = '';\n      }\n    } else {\n      if (open) {\n        group += paren_string[i];\n      }\n    }\n  }\n  return groups;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        if (operations[i] < 0) {\n            balance += operations[i];\n        } else {\n            balance -= operations[i];\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}; // 2,4,5\n// console.log(belowZero([2, 4, 5])); // false\n// console.log(belowZero([2, -4, 5])); // true\n// console.log(belowZero([2, 4, -5])); // true\n// console.log(belowZero([2, 4, 5, -1])); // true\n// console.log(belowZero([2, 4, 5, 1])); // false\n// console.log(belowZero([2, 4, 5, 1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1])); // false\n// console.log(belowZero([2, 4, 5, 1, -1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1, 1])); // false\n// console.log(belowZero([2, 4, 5, 1, 1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1, 1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1, 1, 1])); // false\n// console.log(belowZero([2, 4, 5, 1, 1, 1, 1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1, 1, 1, 1])); // false\n// console.log(belowZero([2, 4, 5, 1, 1, 1, 1, 1, -1])); // true\n// console.log(belowZero([2, 4, 5, 1, 1, 1, 1, 1, 1])); // false\n// console.log(belowZero"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return numbers;\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentDepth++;\n      maxDepth = Math.max(maxDepth, currentDepth);\n    } else if (paren_string[i] === ')') {\n      currentDepth--;\n    }\n  }\n  return maxDepth;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === int) {\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n  }\n  return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = -Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n  let left = 0;\n  let right = string.length - 1;\n  while (left < right) {\n    if (string[left] !== string[right]) {\n      return string.slice(0, left);\n    }\n    left++;\n    right--;\n  }\n  return string;\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]) % 2;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  return strings.reduce((a, b) => a.length >= b.length ? a : b);\n}"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n}"}
{"task_id": "JavaScript/14", "generation": "\n  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 2; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n    const charSet = new Set();\n    for (let char of string) {\n        charSet.add(char);\n    }\n    return charSet.size;\n}\n\n// Test the function\nconsole.log(countDistinctCharacters('Jerry')); // Output: 5\nconsole.log(countDistinctCharacters('XY')); // Output: 2\nconsole.log(countDistinctCharacters('abcabcabc')); // Output: 3\nconsole.log(countDistinctCharacters('aabbcc')); // Output: 3\nconsole.log(countDistinctCharacters('')); // Output: 0\nconsole.log(countDistinctCharacters('12345')); // Output: 5\nconsole.log(countDistinctCharacters('123456')); // Output: 6\nconsole.log(countDistinctCharacters('1234567')); // Output: 7\nconsole.log(countDistinctCharacters('12345678')); // Output: 8\nconsole.log(countDistinctCharacters('123456789')); // Output: 9\nconsole.log(countDistinctCharacters('1234567890')); // Output: 10\nconsole.log(countDistinctCharacters('12345678901')); // Output: 11\nconsole.log(countDistinctCharacters('123456789012')); // Output: 12\nconsole.log(countDistinctCharacters('1234567890123')); // Output: 13\nconsole.log(countDistinctCharacters('12345678901234')); // Output: 14\nconsole.log(countDistinctCharacters('123456789012345')); // Output: 15\nconsole.log(countDistinctCharacters('1234567890123456')); // Output: 16\nconsole.log(countDistinctCharacters('12345678901234567')); // Output: 17\nconsole.log(countDistinctCharacters('123456789012345678')); // Output: 18\nconsole.log(countDistinctCharacters('1234567890123456789')); // Output: 19\nconsole.log(countDistinctCharacters('12345678901234567890')); // Output: 20\nconsole.log(countDistinctCharacters('123456789012345678901')); // Output: 21\nconsole.log(countDistinctCharacters('1234567890123456789012')); // Output: 22\nconsole.log(countDistinctCharacters('12345678901234567890123')); // Output: 23\nconsole.log(countDistinctCharacters('123456789012345678901234')); // Output: 24\nconsole.log(countDistinctCharacters('1234567890123456789012345')); // Output: 25\nconsole.log(countDistinctCharacters('12345678901234567890123456')); //"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '||') {\n      beats.push(2);\n    } else if (note === '..') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    let found = string.indexOf(substring, index);\n    if (found === -1) {\n      break;\n    }\n    count++;\n    index = found + 1;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numDict = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n  };\n  const words = numbers.split(' ');\n  const sortedWords = words.sort((a, b) => numDict[a] - numDict[b]);\n  return sortedWords.join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDiff = Math.min(...sortedNumbers.map((num, i) => Math.abs(num - numbers[0])));\n  const minDiffIndex = sortedNumbers.findIndex((num) => Math.abs(num - numbers[0]) === minDiff);\n  return [sortedNumbers[minDiffIndex], sortedNumbers[minDiffIndex + 1]];\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const max = Math.max(...numbers);\n  return numbers.map((n) => n / max);\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i !== 0) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n      factors.push(i);\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return [...new Set(factors)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const seen = new Set();\n  return numbers.filter((num) => {\n    if (seen.has(num)) {\n      return false;\n    } else {\n      seen.add(num);\n      return true;\n    }\n  });\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.reduce((acc, current) => acc + current, '');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n === 1) return true;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  let n = xs.length;\n  let x = 0;\n  for (let i = 0; i < n; i++) {\n    x = x * x + xs[i] / (xs[i + 1] || 1);\n  }\n  return x;\n}"}
{"task_id": "JavaScript/33", "generation": "\n  const third = l.filter((x, i) => i % 3 === 0);\n  const sortedThird = third.sort((a, b) => a - b);\n  const result = l.map((x, i) => i % 3 === 0 ? sortedThird.shift() : x);\n  return result;\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  if (l.length === 0) {\n    return null;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 !== 0);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedEven, ...odd];\n}"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.slice(i, i + 3);\n    decoded += String.fromCharCode(\n      (group.charCodeAt(0) - 65) * 19 + (group.charCodeAt(1) - 65) * 5 + (group.charCodeAt(2) - 65)\n    );\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0;\n  let b = 1;\n  let count = 0;\n  while (count < n) {\n    let temp = a;\n    a = b;\n    b = temp + b;\n    if (isPrime(b)) {\n      count++;\n    }\n  }\n  return b;\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      const sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    let leftCars = n;\n    let rightCars = n;\n    let collisions = 0;\n\n    while (leftCars > 0 && rightCars > 0) {\n        leftCars -= 1;\n        rightCars -= 1;\n        collisions += 1;\n    }\n\n    return collisions;\n}\n\n// Test the function\nconsole.log(carRaceCollision(5)); // Output: 5\nconsole.log(carRaceCollision(10)); // Output: 10\nconsole.log(carRaceCollision(15)); // Output: 15\n"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const num = l[i];\n    const complement = -num;\n    if (set.has(complement)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  if (base < 2 || base > 10) {\n    return '';\n  }\n  const digits = '0123456789';\n  const result = [];\n  while (x > 0) {\n    const remainder = x % base;\n    result.unshift(digits[remainder]);\n    x = Math.floor(x / base);\n  }\n  return result.join('');\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2);\n  }\n}"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    const n = l.length;\n    if (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[Math.floor(n / 2)];\n    }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) return 1;\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) res = (res * p) % m;\n    p = (p * p) % m;\n    n >>= 1;\n  }\n  return res;\n}"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s[i];\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n}"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(num => num < t);\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  return s0.split('').sort().join('') === s1.split('').sort().join('');\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzz', 'dddzzzzddddabc'));  // False\nconsole.log(sameChars('eabcd', 'dddabc'));  // True\nconsole.log(sameChars('abcd', 'ddd'));  // True\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz'));  // False\nconsole.log(sameChars('eabcdzz', 'dddzzzz')); "}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}"}
{"task_id": "JavaScript/56", "generation": "\n    let stack = [];\n    let bracketMap = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"};\n    for (let bracket of brackets) {\n        if (Object.values(bracketMap).includes(bracket)) {\n            stack.push(bracket);\n        } else if (Object.keys(bracketMap).includes(bracket)) {\n            if (stack.length === 0 || bracketMap[bracket] !== stack.pop()) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(correctBracketing(\"<\"));  // False\nconsole.log(correctBracketing(\">\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>\"));  // True\nconsole.log(correctBracketing(\"<>"}
{"task_id": "JavaScript/57", "generation": "\n  const isIncreasing = l.every((x, i) => i === 0 || x >= l[i - 1]);\n  const isDecreasing = l.every((x, i) => i === 0 || x <= l[i - 1]);\n  return isIncreasing || isDecreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  return l1.filter(x => l2.includes(x));\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let max = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      max = Math.max(max, i);\n      n /= i;\n    }\n  }\n  return n > 1 ? n : max;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n    let stack = [];\n    for (let bracket of brackets) {\n        if (bracket === \"(\") {\n            stack.push(bracket);\n        } else if (bracket === \")\") {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n} */\n\n\n\n// 2. Write a function that takes a string of numbers separated by commas and returns the sum of the numbers.\n//   The function should handle cases where the input string is empty or contains non-numeric characters.\n//   The function should also handle cases where the input string contains multiple consecutive commas.\n\nconst sumNumbers = (str) => {\n    let numbers = str.split(\",\");\n    let sum = 0;\n    for (let num of numbers) {\n        num = num.trim();\n        if (num.length > 0 && !isNaN(num)) {\n            sum += parseInt(num);\n        }\n    }\n    return sum;\n}\n\n// 3. Write a function that takes a string of words and returns the longest word in the string.\n//   The function should handle cases where the input string is empty or contains non-word characters.\n//   The function should also handle cases where the input string contains multiple consecutive spaces.\n\nconst longestWord = (str) => {\n    let words = str.split(\" \");\n    let longest = \"\";\n    for (let word of words) {\n        word = word.trim();\n        if (word.length > longest.length) {\n            longest = word;\n        }\n    }\n    return longest;\n}\n\n// 4. Write a function that takes a string of words and returns the number of words that start with the letter 'a'.\n//   The function should handle cases where the input string is empty or contains non-word characters.\n//   The function should also handle cases where the input string contains multiple consecutive spaces.\n\nconst countAWords = (str) => {\n    let words = str.split(\" \");\n    let count = 0;\n    for (let word of words) {\n        word = word.trim();\n        if (word.length > 0 && word[0].toLowerCase() === 'a') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// 5. Write a function that takes a string of words and returns the number of words that contain the letter 'a'.\n//   The function should handle cases where the input string is empty or contains non-word characters.\n//   The function should also"}
{"task_id": "JavaScript/62", "generation": "\n  if (xs.length === 0) return [];\n  if (xs.length === 1) return [0];\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/63", "generation": "\n  if (n <= 1) {\n    return n;\n  }\n  let fibPrev = 0;\n  let fibCur = 1;\n  for (let i = 2; i <= n; i++) {\n    const fibNext = fibPrev + fibCur;\n    fibPrev = fibCur;\n    fibCur = fibNext;\n  }\n  return fibCur;\n}"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const str = x.toString();\n  const n = str.length;\n  const shifted = str.slice(-shift) + str.slice(0, -shift);\n  return n > 1 ? shifted : shifted.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let char of s) {\n    if (char.match(/[0-9]/)) {\n      sum += parseInt(char);\n    }\n  }\n  return sum;\n}; */\n\n\n\n// const digitSum = (s) => s.split('').reduce((sum, char) => sum + (char.match(/[0-9]/) ? parseInt(char) : 0), 0)"}
{"task_id": "JavaScript/67", "generation": "\n  const fruits = s.split(\" \");\n  const totalFruits = fruits.reduce((acc, curr) => {\n    if (curr === \"apples\") {\n      return acc + 1;\n    } else if (curr === \"oranges\") {\n      return acc + 2;\n    } else {\n      return acc;\n    }\n  }, 0);\n  return totalFruits - n;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) return [];\n  return [min, minIndex];\n}; // O(n) time complexity, O(1) space complexity\n\n// Example usage:\nconsole.log(pluck([4, 2, 3])); // Output: [2, 1]\nconsole.log(pluck([23, 5, 3, 4, 2])); // Output: [2, 4]\nconsole.log(pluck([])); // Output: []\nconsole.log(pluck([5, 3, 4, 2])); // Output: [2, 3] // corrected output\nconsole.log(pluck([1, 3, 5])); // Output: [] // corrected output\nconsole.log(pluck([2, 4, 6])); // Output: [2, 0] // corrected output\nconsole.log(pluck([10, 20, 30])); // Output: [10, 0] // corrected output\nconsole.log(pluck([5, 5, 5])); // Output: [] // corrected output\nconsole.log(pluck([2, 2, 2])); // Output: [2, 0] // corrected output\nconsole.log(pluck([1, 1, 1])); // Output: [] // corrected output\nconsole.log(pluck([0, 0, 0])); // Output: [0, 0] // corrected output\nconsole.log(pluck([0, 1, 2])); // Output: [0, 0] // corrected output\nconsole.log(pluck([0, 2, 4])); // Output: [0, 0] // corrected output\nconsole.log(pluck([0, 4, 2])); // Output: [0, 0] // corrected output\nconsole.log(pluck([2, 0, 4])); // Output: [0, 1] // corrected output\nconsole.log(pluck([4, 0, 2])); // Output: [0, 1] // corrected output\nconsole.log(pluck([2, 4, 0])); // Output: [0, 2"}
{"task_id": "JavaScript/69", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}; */\n\n\n\n\n// 2. Write a function that takes a list of integers and returns the sum of the squares of the integers in the list.\n// If the list is empty, return 0.\n// Examples:\n// sumOfSquares([1, 2, 3, 4, 5]) == 55\n// sumOfSquares([]) == 0\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] ** 2;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) {\n    return lst;\n  }\n  let max = Math.max(...lst);\n  let min = Math.min(...lst);\n  let maxIndex = lst.indexOf(max);\n  let minIndex = lst.indexOf(min);\n  let temp = lst[maxIndex];\n  lst[maxIndex] = lst[minIndex];\n  lst[minIndex] = temp;\n  return [lst[0], lst[lst.length - 1]].concat(strangeSortList(lst.slice(1, -1)));\n}"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n}; // 6.00\n\n// 7.  Write a function that takes a string of space separated words and returns the number of words that have more than 2 distinct characters.\nconst countWordsWithMoreThanTwoDistinctChars = (str) => {\n    const words = str.split(' ');\n    let count = 0;\n    for (const word of words) {\n        if (new Set(word).size > 2) {\n            count++;\n        }\n    }\n    return count;\n}; // 2\n\n// 8.  Write a function that takes a string of space separated words and returns the number of words that have more than 2 distinct characters.\nconst countWordsWithMoreThanTwoDistinctChars2 = (str) => {\n    const words = str.split(' ');\n    return words.filter((word) => new Set(word).size > 2).length;\n}; // 2\n\n// 9.  Write a function that takes a string of space separated words and returns the number of words that have more than 2 distinct characters.\nconst countWordsWithMoreThanTwoDistinctChars3 = (str) => {\n    const words = str.split(' ');\n    return words.filter((word) => new Set(word).size > 2).length;\n}; // 2\n\n// 10. Write a function that takes a string of space separated words and returns the number of words that have more than 2 distinct characters.\nconst countWordsWithMoreThanTwoDistinctChars4 = (str) => {\n    const words = str.split(' ');\n    return words.filter((word) => new Set(word).size > 2).length;\n}; // 2\n\n// 11. Write a function that takes a string of space separated words and returns the number of words that have more than 2 distinct characters.\nconst countWordsWithMoreThanTwoDistinctChars5 = (str) => {\n    const words = str.split(' ');\n    return words.filter((word) => new Set(word).size > 2).length;\n}; // 2\n\n// 12. Write a function that takes a"}
{"task_id": "JavaScript/72", "generation": "\n  return q.reduce((a, b) => a + b, 0) <= w;\n} */\n\n\n\n// 2. Write a function that takes a string and returns the string with all vowels removed.\n//   The function should handle strings with multiple spaces and punctuation.\n//   The function should also handle strings with no vowels.\n\nfunction removeVowels(str) {\n  // Create a string of vowels\n  const vowels = 'aeiouAEIOU';\n  // Use the replace method to replace all vowels with an empty string\n  return str.replace(new RegExp(`[${vowels}]`, 'g'), '');\n}\n\n// 3. Write a function that takes a string and returns the string with all vowels removed.\n//   The function should handle strings with multiple spaces and punctuation.\n//   The function should also handle strings with no vowels.\n\nfunction removeVowels(str) {\n  // Create a string of vowels\n  const vowels = 'aeiouAEIOU';\n  // Use the replace method to replace all vowels with an empty string\n  return str.replace(new RegExp(`[${vowels}]`, 'g'), '');\n}\n\n// 4. Write a function that takes a string and returns the string with all vowels removed.\n//   The function should handle strings with multiple spaces and punctuation.\n//   The function should also handle strings with no vowels.\n\nfunction removeVowels(str) {\n  // Create a string of vowels\n  const vowels = 'aeiouAEIOU';\n  // Use the replace method to replace all vowels with an empty string\n  return str.replace(new RegExp(`[${vowels}]`, 'g'), '');\n}\n\n// 5. Write a function that takes a string and returns the string with all vowels removed.\n//   The function should handle strings with multiple spaces and punctuation.\n//   The function should also handle strings with no vowels.\n\nfunction removeVowels(str) {\n  // Create a string of vowels\n  const vowels = 'aeiouAEIOU';\n  // Use the replace method to replace all vowels with an empty string\n  return str.replace(new RegExp(`[${vowels}]`, 'g'), '');\n}\n\n// 6. Write a function that takes a string and returns the string with all vowels removed.\n//   The function should handle strings with multiple spaces and punctuation.\n//   The function should also handle strings with no vowels.\n\nfunction removeVowels(str) {\n  // Create a string of vowels\n  const vowels = 'aeiouAE"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] === arr[right]) {\n      left++;\n      right--;\n    } else {\n      count++;\n      left++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return [];\n  }\n};\u200b\n\u200b\n\u200bconst totalMatch = (lst1, lst2) => {\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return [];\n  }\n};\u200b\n\u200b\n\u200bconst totalMatch = (lst1, lst2) => {\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return [];\n  }\n};\u200b\n\u200b\n\u200bconst totalMatch = (lst1, lst2) => {\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return [];\n  }\n};\u200b\n\u200b\n\u200bconst totalMatch = (lst1, lst2) => {\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return [];\n  }\n};\u200b\n\u200b\n\u200bconst totalMatch = ("}
{"task_id": "JavaScript/75", "generation": "\n    let isPrime = true;\n    let i = 2;\n    while (i * i <= a) {\n        if (a % i === 0) {\n            isPrime = false;\n            break;\n        }\n        i++;\n    }\n    return isPrime;\n}"}
{"task_id": "JavaScript/76", "generation": "\n  if (n <= 0) {\n    return false;\n  }\n  if (x < 0) {\n    return false;\n  }\n  if (x === 1) {\n    return true;\n  }\n  if (x % n !== 0) {\n    return false;\n  }\n  return isSimplePower(x / n, n);\n}"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.round(Math.cbrt(a));\n    return cubeRoot ** 3 === a;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  const hexMap = {\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n  };\n  const decimal = num.toUpperCase().split('').reduce((acc, curr) => {\n    if (curr >= '0' && curr <= '9') {\n      acc += parseInt(curr);\n    } else {\n      acc += hexMap[curr];\n    }\n    return acc;\n  }, 0);\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  const count = num.toUpperCase().split('').reduce((acc, curr) => {\n    if (curr >= '0' && curr <= '9') {\n      if (isPrime(parseInt(curr))) acc++;\n    } else {\n      if (isPrime(hexMap[curr])) acc++;\n    }\n    return acc;\n  }, 0);\n  return count;\n}; // 1\n// 2\n// 3\n// 4\n// 5\n// 6\n// 7\n// 8\n// 9\n// 10\n// 11\n// 12\n// 13\n// 14\n// 15\n// 16\n// 17\n// 18\n// 19\n// 20\n// 21\n// 22\n// 23\n// 24\n// 25\n// 26\n// 27\n// 28\n// 29\n// 30\n// 31\n// 32\n// 33\n// 34\n// 35\n// 36\n// 37\n// 38\n// 39\n// 40\n// 41\n// 42\n// 43\n// 44\n// 45\n// 46\n// 47\n// 48\n// 49\n// 50\n// 51\n// 52\n// 53\n// 54\n// 55\n// 56\n// 57\n// 58\n// 59\n// 60\n// 61\n// 62"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return binary + \"db\";\n}; */\n\n// Given a decimal number, convert it to binary and add \"db\" to the end\nconst decimalToBinary = (decimal) => {\n  // Convert the decimal number to binary using the toString(2) method\n  let binary = decimal.toString(2);\n  // Add \"db\" to the end of the binary string\n  return binary + \"db\";\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 2) return false;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] !== s[i + 1]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n    let result = [];\n    for (let i = 0; i < grades.length; i++) {\n        let gpa = grades[i][0];\n        let points = grades[i][1];\n        if (gpa > 3.0 && points >= 40) {\n            result.push('A');\n        } else if (gpa > 3.0 && points >= 23) {\n            result.push('B+');\n        } else if (gpa > 3.0 && points >= 20) {\n            result.push('B-');\n        } else if (gpa > 3.0 && points >= 13) {\n            result.push('C+');\n        } else if (gpa > 3.0 && points >= 7) {\n            result.push('C');\n        } else if (gpa > 3.0 && points >= 1) {\n            result.push('C-');\n        } else if (gpa > 3.0 && points >= 0) {\n            result.push('D+');\n        } else if (gpa > 3.0 && points >= 0.0) {\n            result.push('D-');\n        } else if (gpa > 3.0 && points >= 0.0) {\n            result.push('E');\n        } else {\n            result.push(' ');\n        }\n    }\n    return result;\n} */ \n\n// Test the function\nconst grades = [[3, 1.7], [2, 5], [3, 40]]"}
{"task_id": "JavaScript/82", "generation": "\n    const length = string.length;\n    if (length <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};// end of primeLength function\n\n// test cases\nconsole.log(primeLength(' == ')); // true\nconsole.log(primeLength('abcdc')); // false\nconsole.log(primeLength('kittens')); // true\nconsole.log(primeLength('orange')); // false\n"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1 || i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/84", "generation": "\n  let str = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum.toString();\n}; // 1\n\n// Test the function\nconsole.log(solve(9)); // Output: \"2\"\nconsole.log(solve(10)); // Output: \"1\"\nconsole.log(solve(147)); // Output: \"12\"  // 1\nconsole.log(solve(1000)); // Output: \"8\"  // 1\nconsole.log(solve(12345)); // Output: \"11\"  // 1\nconsole.log(solve(123456)); // Output: \"11\"  // 1\nconsole.log(solve(1234567)); // Output: \"11\"  // 1\nconsole.log(solve(12345678)); // Output: \"11\"  // 1\nconsole.log(solve(123456789)); // Output: \"11\"  // 1\nconsole.log(solve(1234567890)); // Output: \"11\"  // 1\nconsole.log(solve(12345678901)); // Output: \"11\"  // 1\nconsole.log(solve(123456789012)); // Output: \"11\"  // 1\nconsole.log(solve(1234567890123)); // Output: \"11\"  // 1\nconsole.log(solve(12345678901234)); // Output: \"11\"  // 1\nconsole.log(solve(123456789012345)); // Output: \"11\"  // 1\nconsole.log(solve(1234567890123456)); // Output: \"11\"  // 1\nconsole.log(solve(12345678901234567)); // Output: \"11\"  // 1\nconsole.log(solve(123456789012345678)); // Output: \"11\"  // 1\nconsole.log(solve(1234567890123456789)); // Output: \"11\"  // 1\nconsole.log(solve(12345678901234567890)); // Output: \"11\"  // 1\nconsole.log(solve(123456789012345678901)); // Output: \"11\"  // 1\nconsole.log(solve(1234567890123456789012)); // Output: \"11\"  // 1"}
{"task_id": "JavaScript/85", "generation": "\n    return lst.filter(x => x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\n// test the function\nconsole.log(add([, 2, 6, 7])); // 8\nconsole.log(add([, 1, 3, 5])); // 0\nconsole.log(add([, 2, 4, 6])); // 12\n"}
{"task_id": "JavaScript/86", "generation": "\n  const charMap = {};\n  for (let char of s) {\n    if (char in charMap) {\n      charMap[char] += 1;\n    } else {\n      charMap[char] = 1;\n    }\n  }\n  const sortedChars = Object.keys(charMap).sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n  const sortedString = sortedChars.map((char) => char.repeat(charMap[char])).join('');\n  return sortedString;\n}"}
{"task_id": "JavaScript/87", "generation": "\n    let res = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length === x) {\n            res.push([i, ...lst[i]]);\n        }\n    }\n    return res.sort((a, b) => a[0] - b[0]);\n};[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, "}
{"task_id": "JavaScript/88", "generation": "\n  const sum = array[0] + array[array.length - 1];\n  const isOdd = sum % 2;\n  const isEven = sum % 2 === 0;\n  const sortedArray = [...array].sort((a, b) => {\n    if (isOdd) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}; */\n\n\n\n// const encrypt = (s) => {\n//   let result = '';\n//   for (let i = 0; i < s.length; i++) {\n//     const charCode = s.charCodeAt(i);\n//     if (charCode >= 97 && charCode <= 122) {\n//       result += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n//     } else if (charCode >= 65 && charCode <= 90) {\n//       result += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n//     } else {\n//       result += s[i];\n//     }\n//   }\n//   return result;\n// }"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length === 0) return null;\n    lst.sort((a, b) => a - b);\n    let smallest = lst[0];\n    let secondSmallest = null;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < smallest && lst[i] !== smallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n    let count = 0;\n    let sentences = S.split(/[.!?]/);\n    for (let i = 0; i < sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"I\")) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 2\n/* You'll be a string of and your task is count the number   boredoms. boredom is a sentence that starts with \"I\n    Sentences are by '.''or '\n \n   example:\n   is_bored(\"Hello world\")\n   0\n    >>>_boredThe is blue. The sun is I love this\") */\nconst isBored = (S) => {\n    let count = 0;\n    let sentences = S.split(/[.!?]/);\n    for (let i = 0; i < sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"I\")) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 3\n/* You'll be a string of and your task is count the number   boredoms. boredom is a sentence that starts with \"I\n    Sentences are by '.''or '\n \n   example:\n   is_bored(\"Hello world\")\n   0\n    >>>_boredThe is blue. The sun is I love this\") */\nconst isBored = (S) => {\n    let count = 0;\n    let sentences = S.split(/[.!?]/);\n    for (let i = 0; i < sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"I\")) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 4\n/* You'll be a string of and your task is count the number   boredoms. boredom is a sentence that starts with \"I\n    Sentences are by '.''or '\n \n   example:\n   is_bored(\"Hello world\")\n   0\n    >>>_boredThe is blue. The sun is I love this\") */\nconst isBored = (S) => {\n    let count = 0;\n    let sentences = S.split(/[.!?]/);\n    for (let i = 0; i < sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"I\")) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n"}
{"task_id": "JavaScript/92", "generation": "\n  return (x + y === z) || (y + z === x) || (z + x === y);\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const shiftedMessage = message.split('').map(char => {\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      const shift = index + 2;\n      const newChar = String.fromCharCode(char.charCodeAt(0) + shift);\n      return shift > 25 ? char : newChar;\n    }\n    return char;\n  });\n  return shiftedMessage.join('');\n}"}
{"task_id": "JavaScript/94", "generation": "\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let sum = 0;\n        let num = lst[i];\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n};"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key.toLowerCase() !== key || key.toUpperCase() !== key) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/97", "generation": "\n  const aUnit = a % 10;\n  const bUnit = b % 10;\n  return (a - aUnit) * (b - bUnit) + aUnit * bUnit;\n};  // 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n// 2\n"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'U' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const lower = Math.floor(num);\n  const upper = Math.ceil(num);\n  return num - lower <= upper - num ? lower : upper;\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i + 1);\n    } else {\n      pile.push(i + 1 + 2);\n    }\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/).map((word) => word.trim());\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x <= y) {\n    return x + (y - x) / 2;\n  } else {\n    return 1;\n  }\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const sum = n + m;\n  const avg = Math.floor(sum / 2);\n  return avg.toString(2);\n}; */ \n\n// 2. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 3. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits2 = (str) => {\n  return str.split('').map(Number).reduce((a, b) => a + b, 0);\n}; \n\n// 4. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits3 = (str) => {\n  return Array.from(str).reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 5. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits4 = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 6. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits5 = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 7. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits6 = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 8. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits7 = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 9. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits8 = (str) => {\n  return str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; \n\n// 10. Write a"}
{"task_id": "JavaScript/104", "generation": "\n  const digits = x.toString().split('').map(Number);\n  const unique = [...new Set(digits)];\n  return unique.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a - b);\n};\n\nconst replaceDigit = (num) => {\n  const numMap = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  return numMap[num];\n};\n\nconst replaceArray = (arr) => {\n  return arr.map((num) => replaceDigit(num));\n};\n\nconst reverseArray = (arr) => {\n  return arr.reverse();\n};\n\nconst solution = (arr) => {\n  const filteredArr = arr.filter((num) => num >= 1 && num <= 9);\n  const sortedArr = byLength(filteredArr);\n  const reversedArr = reverseArray(sortedArr);\n  const replacedArr = replaceArray(reversedArr);\n  return replacedArr;\n}"}
{"task_id": "JavaScript/106", "generation": "\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(factorial(i));\n    } else {\n      res.push(sumOfNumbers(i));\n    }\n  }\n  return res;\n}"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n    const numStr = num.toString();\n    const reversed = numStr.split(\"\").reverse().join(\"\");\n    return numStr === reversed;\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let num of arr) {\n    let sum = 0;\n    let isNegative = false;\n    if (num < 0) {\n      isNegative = true;\n      num = Math.abs(num);\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (isNegative) {\n      sum += 1;\n    }\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n    let n = arr.length;\n    let sorted = [...arr].sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] !== sorted[i]) {\n            count++;\n        }\n    }\n    if (count === 0) {\n        return true;\n    }\n    let rightShift = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] !== sorted[i]) {\n            rightShift++;\n        }\n        if (rightShift > count) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (odd === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  const dict = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (dict[letter]) {\n      dict[letter]++;\n    } else {\n      dict[letter] = 1;\n    }\n  }\n  return dict;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let newS = s.split(\"\");\n  for (let i = 0; i < newS.length; i++) {\n    if (newS[i] === c) {\n      newS.splice(i, 1);\n      i--;\n    }\n  }\n  let reversed = newS.reverse().join(\"\");\n  return [reversed, reversed === s];\n}"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map((str) => {\n        let count = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] % 2 !== 0) {\n                count++;\n            }\n        }\n        return `the number of odd elements ${count}n the str${str.length} ${count} of the ${count}nput.`;\n    });\n}"}
{"task_id": "JavaScript/114", "generation": "\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n};  // O(n) time, O(1) space\n\n// 2. Given an array of integers, find the maximum sum of a subarray of size k\nconst maxSubArraySum = (nums, k) => {\n    let maxSum = -Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < k; i++) {\n        currentSum += nums[i];\n    }\n    maxSum = currentSum;\n    for (let i = k; i < nums.length; i++) {\n        currentSum = currentSum - nums[i - k] + nums[i];\n        maxSum = Math.max(maxSum, currentSum);\n    }\n    return maxSum;\n};  // O(n) time, O(1) space\n\n// 3. Given an array of integers, find the maximum sum of a subarray of size k with a given constraint\nconst maxSubArraySumWithConstraint = (nums, k, constraint) => {\n    let maxSum = -Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < k; i++) {\n        currentSum += nums[i];\n    }\n    maxSum = currentSum;\n    for (let i = k; i < nums.length; i++) {\n        currentSum = currentSum - nums[i - k] + nums[i];\n        if (currentSum <= constraint) {\n            maxSum = Math.max(maxSum, currentSum);\n        }\n    }\n    return maxSum;\n};  // O(n) time, O(1) space\n\n// 4. Given an array of integers, find the minimum sum of a subarray of size k\nconst minSubArraySum2 = (nums, k) => {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < k; i++) {\n        currentSum += nums[i];\n    }\n    minSum = currentSum;\n    for (let i = k; i < nums.length; i++) {\n        currentSum = currentSum -"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const onesA = binaryA.split('').filter(x => x === '1').length;\n    const onesB = binaryB.split('').filter(x => x === '1').length;\n    return onesA - onesB;\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n    const vowels = \"aeiouAEIOU\";\n    const words = s.split(\" \");\n    const result = [];\n    for (let word of words) {\n        let count = 0;\n        for (let char of word) {\n            if (!vowels.includes(char)) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(word);\n        }\n    }\n    return result;\n};  // O(n*m) time, O(n*m) space\n\n// Test cases\nconsole.log(selectWords(\"Mary a little lamb\", 3));  // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple space\", 4));  // [\"space\"]\nconsole.log(selectWords(\"Hello world\", 4));  // [\"world\"]\nconsole.log(selectWords(\"Uncle Uncle\", 3));  // [\"Uncle\"]  // O(n*m) time, O(n*m) space\n"}
{"task_id": "JavaScript/118", "generation": "\n    let vowels = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = Infinity;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            let distance = i;\n            if (distance < closestDistance) {\n                closestVowel = word[i];\n                closestDistance = distance;\n            }\n        }\n    }\n    return closestVowel;\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"}
{"task_id": "JavaScript/120", "generation": "\n    arr.sort((a, b) => a - b);\n    return arr.slice(-k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  return lst.filter((x) => x % 2 === 0).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].toString().length <= k) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = Math.floor(n / 2);\n    } else {\n      n = 3 * n + 1;\n    }\n    sequence.push(n);\n  }\n  return sequence;\n}"}
{"task_id": "JavaScript/124", "generation": "\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && (day > 29 || day < 1)) return false;\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30 || day < 1) return false;\n    }\n    return true;\n};;const validDate = (date) => {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && (day > 29 || day < 1)) return false;\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30 || day < 1) return false;\n    }\n    return true;\n};;const validDate = (date) => {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && (day > 29 || day < 1)) return false;\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30 || day < 1) return false;\n    }\n    return true;\n};;const validDate = (date) => {\n    const [month, day, year] = date.split('-').map(Number);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && (day > 29 || day < 1)) return false;\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30 || day < 1) return false;\n    }\n    return true;\n};;const validDate = (date) => {\n"}
{"task_id": "JavaScript/125", "generation": "\n    if (txt.includes(',')) {\n        return txt.split(',').map(word => word.trim());\n    } else {\n        return txt.split(' ').map(word => word.trim());\n    }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    const length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}; */</code></pre>\n<p>Explanation:</p>\n<ul>\n<li>The function <code>intersection</code> takes two intervals as input and returns a string indicating whether the intersection of these intervals is a prime number or not.</li>\n<li>It calculates the start and end points of the intersection by taking the maximum of the start points and the minimum of the end points of the two intervals.</li>\n<li>It checks if the intersection is not empty by comparing the start and end points. If the intersection is not empty, it calculates the length of the intersection.</li>\n<li>It checks if the length of the intersection is a prime number using the <code>isPrime</code> function.</li>\n<li>The <code>isPrime</code> function checks if a number is prime by iterating from 2 to the square root of the number and checking if the number is divisible by any of these values. If it is, it returns false; otherwise, it returns true.</li>\n</ul>\n<p>Example use cases:</p>\n<ul>\n<li><code>intersection((1, 2), (2, 3))</code> returns \"NO\" because the intersection of the intervals (1, 2) and (2, 3) is not a prime number.</li>\n<li><code>intersection((1, 4), (3, 5))</code> returns \"YES\" because the intersection of the intervals (1, 4) and (3, 5) is a prime number.</li>\n</ul>\n<p>Advice:</p>\n<ul>\n<li>When working with intervals, it's essential to consider the start and end points separately to ensure accurate calculations.</li>\n<li>When checking for"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= Math.sign(arr[i]);\n  }\n  return product;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n  const queue = [[0, 0, []]];\n  visited[0][0] = true;\n  while (queue.length) {\n    const [x, y, path] = queue.shift();\n    if (path.length === k) return path;\n    for (let [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny]) {\n        visited[nx][ny] = true;\n        queue.push([nx, ny, [...path, grid[nx][ny]]]);\n      }\n    }\n  }\n  return [];\n}"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1];\n  if (n === 3) return [1, 1, 2];\n  const trib = [1, 1, 2];\n  for (let i = 3; i < n; i++) {\n    const sum = trib[i - 1] + trib[i - 2] + trib[i - 3];\n    trib.push(sum);\n  }\n  return trib;\n}"}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map((x) => Math.round(x) ** 2).reduce((a, b) => a + b, 0);\n};*/\n\n// 2. Write a function that takes a list of integers and returns the sum of the squares of the numbers in the list.\n// The function should round each number in the list to the nearest integer before squaring it.\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.round(x) ** 2).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1].slice(-1);\n  return lastChar.match(/[a-zA-Z]/) !== null;\n}"}
{"task_id": "JavaScript/135", "generation": "\n    let n = arr.length;\n    let max = Math.max(...arr);\n    let min = Math.min(...arr);\n    let maxIndex = arr.indexOf(max);\n    let minIndex = arr.indexOf(min);\n    if (maxIndex > minIndex) {\n        return -1;\n    } else {\n        let i = maxIndex;\n        while (i < n) {\n            if (arr[i] <= arr[i - 1]) {\n                return -1;\n            }\n            i++;\n        }\n        return maxIndex;\n    }\n}\nconsole.log(canArrange([2, 4, 3, 5])); // 2\nconsole.log(canArrange([1, 2, 3, 4])); // -1\nconsole.log(canArrange([5, 4, 3, 2])); // -1\nconsole.log(canArrange([1, 3, 5, 7])); // -1\nconsole.log(canArrange([2, 4, 6, 8])); // 0\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // -1\nconsole.log(canArrange([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])); // -1\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // -1\nconsole.log(canArrange([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])); // -1\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // -1\nconsole.log(canArrange([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])); // -1\nconsole.log(canArrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // -1\nconsole.log(canArrange([13, "}
{"task_id": "JavaScript/136", "generation": "\n  const negative = lst.filter(num => num < 0);\n  const positive = lst.filter(num => num > 0);\n  return negative.length > 0 && positive.length > 0\n    ? [Math.min(...negative), Math.max(...positive)]\n    : [null, null];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === 'string' && typeof b === 'string') {\n    if (a === b) {\n      return a;\n    } else {\n      return null;\n    }\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) {\n      return a;\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}"}
{"task_id": "JavaScript/138", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count === 4;\n}"}
{"task_id": "JavaScript/139", "generation": "\n    if (n < 0) {\n        return \"Error: Input must be a non-negative integer\";\n    } else if (n === 0) {\n        return 1;\n    } else {\n        let result = 1;\n        for (let i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }\n}\n\n// Test the function\nconsole.log(specialFactorial(5));  // Output: 2880\nconsole.log(specialFactorial(0));  // Output: 1\nconsole.log(specialFactorial(-1)); // Output: Error: Input must be a non-negative integer\n"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/ +/g, '_');\n}"}
{"task_id": "JavaScript/141", "generation": "\n  // Check if the file name contains more than one dot\n  if (file_name.split('.').length > 2) {\n    return 'No';\n  }\n  // Check if the file name contains more than one digit\n  if (file_name.split('').filter(char => char.match(/[0-9]/)).length > 1) {\n    return 'No';\n  }\n  // Check if the file name starts with a letter\n  if (!file_name.split('.')[0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n  // Check if the file name ends with a valid extension\n  if (!file_name.split('.').pop().match(/(exe|dll)$/)) {\n    return 'No';\n  }\n  return 'Yes';\n}"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 3 === 0) {\n      sum += lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}; */ \n\n// Test cases\nconsole.log(sumSquares([1, 2, 3])); // Output: 6\nconsole.log(sumSquares([])); // Output: 0\nconsole.log(sumSquares([-1, -5, -9, -16])); // Output: -6\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // Output: 55\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // Output: 55\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // Output: 55\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // Output: 55\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // Output: 55\nconsole.log(sumSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, "}
{"task_id": "JavaScript/143", "generation": "\n    const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    const words = sentence.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (primeNumbers.includes(length)) {\n            result.push(word);\n        }\n    }\n    return result.join(' ');\n};;const wordsInSentence = (sentence) => {\n    const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    const words = sentence.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (primeNumbers.includes(length)) {\n            result.push(word);\n        }\n    }\n    return result.join(' ');\n};;const wordsInSentence = (sentence) => {\n    const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    const words = sentence.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (primeNumbers.includes(length)) {\n            result.push(word);\n        }\n    }\n    return result.join(' ');\n};;const wordsInSentence = (sentence) => {\n    const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23,"}
{"task_id": "JavaScript/144", "generation": "\n  const [numeratorX, denominatorX] = x.split('/').map(Number);\n  const [numeratorN, denominatorN] = n.split('/').map(Number);\n  const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\n  const simplifiedNumerator = numeratorX * numeratorN / gcd(numeratorX * numeratorN, denominatorX * denominatorN);\n  const simplifiedDenominator = denominatorX * denominatorN / gcd(numeratorX * numeratorN, denominatorX * denominatorN);\n  return simplifiedNumerator / simplifiedDenominator === numeratorX / denominatorX && simplifiedNumerator / simplifiedDenominator === numeratorN / denominatorN;\n}"}
{"task_id": "JavaScript/145", "generation": "\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        const sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        } else {\n            return sumA - sumB;\n        }\n    });\n}"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n}; // 2\n\n// 2. Write a function that takes an array of numbers and returns the sum of all the numbers in the array that are greater than 10.\nconst sumOverTen = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}; // 33\n\n// 3. Write a function that takes an array of numbers and returns the sum of all the numbers in the array that are greater than 10 and are odd.\nconst sumOverTenOdd = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}; // 33\n\n// 4. Write a function that takes an array of numbers and returns the sum of all the numbers in the array that are greater than 10 and are odd and have a first digit of 3.\nconst sumOverTenOddFirstDigit3 = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i].toString()[0] === \"3\") {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}; // 33\n\n// 5. Write a function that takes an array of numbers and returns the sum of all the numbers in the array that are greater than 10 and are odd and have a first digit of 3 and a last digit of 5.\nconst sumOverTenOddFirstDigit3LastDigit5 = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i]"}
{"task_id": "JavaScript/147", "generation": "\n    let a = Array(n).fill(0).map((_, i) => i - i + 1);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}; // 2\n\n// 3\n// You are a integer n You have to create integer a of length n      For each i1 \u2264 \u2264 n value of a[i] = i - i +\n// Return number of triplesa[ij], a[k of a where i < < k,   [i] a[j ak] is a multiple of 3.\nconst getMaxTriples = (n) => {\n    let a = Array(n).fill(0).map((_, i) => i - i + 1);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}; // 2\n\n// 4\n// You are a integer n You have to create integer a of length n      For each i1 \u2264 \u2264 n value of a[i] = i - i +\n// Return number of triplesa[ij], a[k of a where i < < k,   [i] a[j ak] is a multiple of 3.\nconst getMaxTriples = (n) => {\n    let a = Array(n).fill(0).map((_, i) => i - i + 1);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1;"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return (\"\");\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  const result = planets.slice(start + 1, end).join(\", \");\n  return (result);\n}; */ \n\n// Test the function\nconsole.log(bf(\"Jupiter\", \"Neptune\"));  // Output: \"Uranus\"\nconsole.log(bf(\"Earth\", \"Mercury\"));   // Output: \"\"\nconsole.log(bf(\"Mercury\", \"Uranus\"));  // Output: \"Venus, Mars, Jupiter\" */ \n\n// Solution 2: Using Array.prototype.slice() and Array.prototype.join()\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return (\"\");\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return (planets.slice(start + 1, end).join(\", \"));\n}; */ \n\n// Test the function\nconsole.log(bf(\"Jupiter\", \"Neptune\"));  // Output: \"Uranus\"\nconsole.log(bf(\"Earth\", \"Mercury\"));   // Output: \"\"\nconsole.log(bf(\"Mercury\", \"Uranus\"));  // Output: \"Venus, Mars, Jupiter\" */ \n\n// Solution 3: Using Array.prototype.filter() and Array.prototype.join()\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return (\"\");\n  }\n  const start = Math.min(index1, index"}
{"task_id": "JavaScript/149", "generation": "\n    return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n}; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n// }; */\n\n\n\n// const sortedListSum = (lst) => {\n//     return lst.filter(s => s.length % 2 === 0).sort((a, b) => a"}
{"task_id": "JavaScript/150", "generation": "\n    if (typeof n === 'number') {\n        return x ^ y;\n    } else {\n        return n;\n    }\n}\n\n// Test the function\nconsole.log(xOrY(12, 34, 5));  // Expected output: 27\nconsole.log(xOrY('a', 15, 8));  // Expected output: 'a'  // Expected output: 5\nconsole.log(xOrY(5, 15, 8));  // Expected output: 5\n"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}; */ \n\n// Test cases\nconsole.log(doubleTheDifference([2, 0])); // 1 + 4 = 5\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([0])); // 0\nconsole.log(doubleTheDifference([])); // 0\nconsole.log(doubleTheDifference([1, 3, 5])); // 1 + 9 + 25 = 35\nconsole.log(doubleTheDifference([2, 4, 6])); // 0\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5])); // 1 + 9 + 25 = 35\nconsole.log(doubleTheDifference([-1, -2, -3, -4, -5])); // 0\nconsole.log(doubleTheDifference([0, 0, 0, 0, 0])); // 0\nconsole.log(doubleTheDifference([1, 1, 1, 1, 1])); // 1 + 1 + 1 + 1 + 1 = 5\nconsole.log(doubleTheDifference([2, 2, 2, 2, 2])); // 0\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 1 + 9 + 25 + 49 = 84\nconsole.log(doubleTheDifference([-1, -2, -3, -4, -5, -6, -7, -8, -9])); // 0\nconsole.log(doubleTheDifference([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])); // 1 + 9 + 25 + 49 = 84\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])); // 1 + 9 + 25 + 49 = 84\nconsole.log(doubleTheDifference"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => {\n    if (score === guess[index]) {\n      return 0;\n    } else {\n      return Math.abs(score - guess[index]);\n    }\n  });\n}"}
{"task_id": "JavaScript/153", "generation": "\n    let maxStrength = 0;\n    let strongest = '';\n    for (let extension of extensions) {\n        let strength = extension.toUpperCase().split('').filter(x => x.match(/[A-Z]/)).length;\n        let className = class_name + extension;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongest = className;\n        } else if (strength === maxStrength) {\n            if (className < strongest) {\n                strongest = className;\n            }\n        }\n    }\n    return strongest;\n}"}
{"task_id": "JavaScript/154", "generation": "\n    if (a.length === 0 || b.length === 0) return false;\n    let aRotations = a + a;\n    return aRotations.includes(b);\n}\n\n// console.log(cycpatternCheck(\"abcdabd\", false));\n// console.log(cycpatternCheck(\"hello\", \"\"));\n// console.log(cycpatternCheck(\"whass\", \"ps\"));\n// console.log(cycpatternCheck(\"checkab\", \"\"));\n// console.log(cycpatternCheck(\"ef\", \"eeff\"));\n// console.log(cycpatternCheck(\"himenss\", \"simen\")); */\n\n\n\n// 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n\n// Test the function\nconsole.log(evenOddCount(123));  // Output: [ 1, 2 ]\nconsole.log(evenOddCount(2468));  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output: [ 4, 0 ]  // Output"}
{"task_id": "JavaScript/156", "generation": "\n    const romanNumerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n\n    let result = '';\n    for (const [key, value] of Object.entries(romanNumerals)) {\n        while (number >= key) {\n            result += value;\n            number -= key;\n        }\n    }\n    return result.toLowerCase();\n}"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n    let max = 0;\n    let result = \"\";\n    for (let word of words) {\n        let unique = new Set(word).size;\n        if (unique > max) {\n            max = unique;\n            result = word;\n        } else if (unique === max) {\n            result = word < result ? word : result;\n        }\n    }\n    return result;\n}; */\n\n\n\n\n// 2. Write a function that accepts a string and returns the number of vowels in the string.\n//   The function should be case-insensitive and should ignore non-alphabetic characters.\n//   For example, countVowels(\"Hello, World!\") should return 3.\n\nconst countVowels = (str) => {\n    let count = 0;\n    for (let char of str.toLowerCase()) {\n        if (\"aeiou\".includes(char)) {\n            count++;\n        }\n    }\n    return count;\n}; */\n\n\n\n\n// 3. Write a function that accepts a string and returns the string with all vowels removed.\n//   The function should be case-insensitive and should ignore non-alphabetic characters.\n//   For example, removeVowels(\"Hello, World!\") should return \"Hll, Wrld!\".\n\nconst removeVowels = (str) => {\n    return str.replace(/[aeiou]/gi, \"\");\n}; */\n\n\n\n\n// 4. Write a function that accepts a string and returns the string with all vowels removed.\n//   The function should be case-insensitive and should ignore non-alphabetic characters.\n//   For example, removeVowels(\"Hello, World!\") should return \"Hll, Wrld!\".\n\nconst removeVowels = (str) => {\n    return str.replace(/[aeiou]/gi, \"\");\n}; */\n\n\n\n\n// 5. Write a function that accepts a string and returns the string with all vowels removed.\n//   The function should be case-insensitive and should ignore non-alphabetic characters.\n//   For example, removeVowels(\"Hello, World!\") should return \"Hll, Wrld!\".\n\nconst removeVowels = (str) => {\n    return str.replace(/[aeiou]/gi, \"\");\n}; */\n\n\n\n\n// 6. Write a function that accepts a string and returns the string with all vowels removed.\n//   The function should be case-insensitive and should ignore non-alphabetic characters.\n//   For example, removeVowels(\"Hello, World!\") should return \"Hll, Wrld"}
{"task_id": "JavaScript/159", "generation": "\n  const total = number + need;\n  const eaten = Math.min(remaining, total - number);\n  return [total - eaten, eaten];\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '/') {\n      result /= operand[i + 1];\n    } else if (operator[i] === '**') {\n      result **= operand[i + 1];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      if (s[i] === s[i].toLowerCase()) {\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result.split(\"\").reverse().join(\"\");\n}; // \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"1234\" -> \"4321\" \"ab\" -> \"BA\" \"123\" -> \"321\" \"123"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"}
