{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (stack.length === 0) {\n        temp += paren_string[i];\n      } else {\n        stack.push(paren_string[i]);\n        temp += paren_string[i];\n      }\n    } else if (paren_string[i] === ')') {\n      if (stack.length === 1) {\n        temp += paren_string[i];\n        result.push(temp);\n        temp = '';\n      } else {\n        stack.pop();\n        temp += paren_string[i];\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  const dec = number - Math.floor(number);\n  return dec;\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0]];\n  }\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n  let depths = [];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentDepth += 1;\n      if (currentDepth > maxDepth) {\n        maxDepth = currentDepth;\n        depths.push(maxDepth);\n      }\n    } else if (paren_string[i] === ')') {\n      currentDepth -= 1;\n    }\n  }\n\n  return depths;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] + int;\n    product *= numbers[i] * int;\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((number) => {\n    if (number > max) {\n      max = number;\n    }\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  const reversedString = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substr(0, i) === reversedString.substr(reversedString.length - i)) {\n      return string + reversedString.substr(0, reversedString.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) return null;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  for (let i = 0; i < string.length; i++) {\n    suffixes.push(string.slice(i));\n  }\n  return suffixes;\n};\n\nconst allSubstrings = (string) => {\n  let substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\nconst all_es = (string) => {\n  return [...allPrefixes(string), ...allSuffixes(string), ...allSubstrings(string)];\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 2; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const characters = new Set();\n  for (let i = 0; i < string.length; i++) {\n    characters.add(string[i]);\n  }\n  return characters.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = {\n    'o': 4,\n    '|': 2,\n    '.': 1,\n  }\n\n  return music_string.split(' ').map(note => {\n    let total = 0;\n    for (let i = 0; i < note.length; i++) {\n      total += notes[note[i]];\n    }\n    return total;\n  });\n}"}
{"task_id": "JavaScript/18", "generation": "\n  if (substring.length > string.length) return 0;\n  let count = 0;\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberWords = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(' ')\n    .sort((a, b) => numberWords[a] - numberWords[b])\n    .join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let smallestDiff = Infinity;\n  let result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < smallestDiff) {\n        smallestDiff = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const max = Math.max(...numbers);\n  return numbers.map(number => number / max);\n};"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n    for(let i = n - 1; i > 0; i--) {\n        if(n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  return numbers.filter((num) => {\n    counts[num] = (counts[num] || 0) + 1;\n    return counts[num] === 1;\n  });\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let flipped = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n    return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((n) => n > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const roots = [];\n  for (let i = 0; i < n; i++) {\n    if (xs[i] === 0) {\n      roots.push(i);\n    }\n  }\n  return roots;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.filter((_, index) => index % 3 === 0);\n  divisibleByThree.sort((a, b) => a - b);\n  return l.map((value, index) => (index % 3 === 0 ? divisibleByThree.shift() : value));\n};"}
{"task_id": "JavaScript/34", "generation": "\n    return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let num = i;\n      while (num > 0) {\n        if (num % 10 === 7) {\n          count++;\n          break;\n        }\n        num = Math.floor(num / 10);\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIdxValues = l.filter((_, idx) => idx % 2 === 0).sort((a, b) => a - b);\n  return l.map((_, idx) => (idx % 2 === 0 ? evenIdxValues.shift() : l[idx]));\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    decoded += String.fromCharCode(parseInt(s.slice(i, i + 3), 16));\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return primes[fib[n] % primes.length];\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  const map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    if (map.has(-l[i])) {\n      return true;\n    }\n    map.set(l[i], i);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  if (base < 2 || base > 10) {\n    throw new Error('Base must be between 2 and 10');\n  }\n  return x.toString(base);\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    let middle = Math.floor(l.length / 2);\n\n    if(l.length % 2)\n        return l[middle];\n    else\n        return (l[middle - 1] + l[middle]) / 2.0;\n}"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) {\n    return 2;\n  }\n  if (n === 1) {\n    return 3;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 11;\n  }\n  if (n === 4) {\n    return 101;\n  }\n  if (n === 5) {\n    return 1009;\n  }\n  if (n === 6) {\n    return 10007;\n  }\n  if (n === 7) {\n    return 100003;\n  }\n  if (n === 8) {\n    return 10000039;\n  }\n  if (n === 9) {\n    return 100000007;\n  }\n  if (n === 10) {\n    return 1000000007;\n  }\n  if (n === 11) {\n    return 10000000007;\n  }\n  if (n === 12) {\n    return 1000000000039;\n  }\n  if (n === 13) {\n    return 10000000000031;\n  }\n  if (n === 14) {\n    return 1000000000000037;\n  }\n  if (n === 15) {\n    return 10000000000000007;\n  }\n  if (n === 16) {\n    return 10000000000000000019;\n  }\n  if (n === 17) {\n    return 100000000000000000007;\n  }\n  if (n === 18) {\n    return 1000000000000000000003;"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[a-z]/i)) {\n      let code = char.charCodeAt(0) - 5;\n      if ((char.toLowerCase() === char && code < 'a'.charCodeAt(0)) || (char.toUpperCase() === char && code < 'A'.charCodeAt(0))) {\n        code += 26;\n      }\n      decoded += String.fromCharCode(code);\n    } else {\n      decoded += char;\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(num => num < t);\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const count = (s) => [...s].reduce((acc, char) => {\n    acc[char] = (acc[char] || 0) + 1;\n    return acc;\n  }, {});\n  const c0 = count(s0);\n  const c1 = count(s1);\n  return Object.keys(c0).every(key => c0[key] === c1[key]);\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) return 1;\n  let fibNums = [1, 1];\n  for (let i = 2; i < n; i++) {\n    fibNums.push(fibNums[i - 1] + fibNums[i - 2]);\n  }\n  return fibNums.pop();\n};"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  const bracketPairs = {\n    '<': '>',\n  };\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] in bracketPairs) {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0 || bracketPairs[stack.pop()] !== brackets[i]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length <= 2) return true;\n  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) increasing = false;\n    if (l[i] < l[i + 1]) decreasing = false;\n  }\n  return increasing || decreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  const commonElements = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.includes(l1[i])) {\n      commonElements.push(l1[i]);\n    }\n  }\n  return commonElements;\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  while (factor <= n) {\n    if (n % factor === 0) {\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  // remove the first element (the constant term)\n  const rest = xs.slice(1);\n\n  // map over the rest of the array, multiply each element by its index\n  return rest.map((x, i) => x * (i + 1));\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n\n  let fibfibNums = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    fibfibNums[i] = fibfibNums[fibfibNums[i - 1]] + fibfibNums[fibfibNums[i - 2]];\n  }\n\n  return fibfibNums[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  if (s[s.length - 1].toLowerCase() === 'y') {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('');\n  for (let i = 0; i < shift; i++) {\n    digits.unshift(digits.pop());\n  }\n  return digits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[0-9]/)) {\n      sum += parseInt(s[i]);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n\n  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEven && arr[i] % 2 === 0) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  return smallestEvenIndex !== -1 ? [smallestEvenIndex, smallestEven] : [];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const counts = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n  }\n  let maxCount = 0;\n  let maxNum = -1;\n  for (const num in counts) {\n    if (counts[num] > maxCount && num > counts[num]) {\n      maxCount = counts[num];\n      maxNum = num;\n    }\n  }\n  return maxNum;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  while (sorted.length) {\n    result.push(sorted.shift());\n    if (sorted.length) result.push(sorted.pop());\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return Math.round(area * 100) / 100;\n};"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w * 2;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return sum1 < sum2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  let factors = [];\n  for (let i = 2; i <= a; i++) {\n    while (a % i === 0) {\n      factors.push(i);\n      a = a / i;\n    }\n  }\n  if (factors.length === 3 && factors.every(isPrime)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let x = Math.round(Math.cbrt(a));\n    return x * x * x === a;\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexPrime = ['3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hexPrime.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return binary;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  let happy = false;\n  let regex = /a+b+|b+a+/g;\n  let matches = s.match(regex);\n  if (matches) {\n    matches.forEach((match) => {\n      if (match.includes(\"a\") && match.includes(\"b\")) {\n        happy = true;\n      }\n    });\n  }\n  return happy;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = grades.map((grade) => {\n    if (grade >= 40) {\n      if (grade >= 70) {\n        if (grade >= 80) {\n          if (grade >= 90) {\n            return \"A\";\n          } else {\n            return \"A-\";\n          }\n        } else {\n          if (grade >= 85) {\n            return \"B+\";\n          } else {\n            return \"B\";\n          }\n        }\n      } else {\n        if (grade >= 60) {\n          if (grade >= 65) {\n            return \"B-\";\n          } else {\n            return \"C+\";\n          }\n        } else {\n          if (grade >= 50) {\n            if (grade >= 55) {\n              return \"C\";\n            } else {\n              return \"C-\";\n            }\n          } else {\n            if (grade >= 45) {\n              return \"D\";\n            } else {\n              return \"E\";\n            }\n          }\n        }\n      }\n    } else {\n      return \"F\";\n    }\n  });\n  return letterGrades;\n};"}
{"task_id": "JavaScript/82", "generation": "\n    let length = string.length;\n    if (length < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if (length % i === 0) return false;\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString().startsWith('1') || i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  return binary;\n};"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split('').sort().join('');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  });\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return [];\n\n  const sum = array[0] + array[array.length - 1];\n  const copyArray = [...array];\n\n  if (sum % 2 === 0) {\n    return copyArray.sort((a, b) => b - a);\n  }\n\n  return copyArray.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += String.fromCharCode(s.charCodeAt(i) * 2);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  let min = null;\n  let secondMin = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || min === null) {\n      secondMin = min;\n      min = lst[i];\n    } else if (lst[i] > min && (lst[i] < secondMin || secondMin === null)) {\n      secondMin = lst[i];\n    }\n  }\n\n  return secondMin !== null ? secondMin : \"None\";\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let sentences = S.split('.');\n  let boredoms = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().charAt(0) === 'I' || sentences[i].trim().charAt(0) === 'S') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}"}
{"task_id": "JavaScript/92", "generation": "\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      const isUpperCase = message[i] === message[i].toUpperCase();\n      const vowelIndex = vowels.indexOf(message[i].toLowerCase());\n      const encodedVowel = isUpperCase ? vowels[vowelIndex + 2].toUpperCase() : vowels[vowelIndex + 2];\n      encodedMessage += encodedVowel;\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    let num = lst[i];\n    while (num) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/95", "generation": "\n  for (let key in dict) {\n    if (key !== key.toLowerCase() || dict[key] !== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  if (b === undefined) {\n    return a * a;\n  } else {\n    return a * b;\n  }\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && 'AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  let num = parseFloat(value);\n  return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let arr = [n];\n  for (let i = 1; i < n; i++) {\n    if (arr[i - 1] % 2 === 0) {\n      arr.push(arr[i - 1] + 2);\n    } else {\n      arr.push(arr[i - 1] + 2);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[ ,]+/);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x < 0 || y < 0) {\n    return \"Invalid input. Please enter positive numbers.\";\n  }\n  if (x > y) {\n    return \"Invalid range. The first number should be smaller than the second one.\";\n  }\n  if (x === y) {\n    return \"There is no number in the range.\";\n  }\n  return x + 1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let avg = Math.round((n + m) / 2);\n  return '0b' + avg.toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  let digits = x.toString().split('').map(Number).sort((a, b) => a - b);\n  let unique = [...new Set(digits)];\n  return unique.filter(digit => digit % 2 === 0);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const nums = {\n    0: \"Zero\",\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  return arr\n    .sort((a, b) => b - a)\n    .map((num) => nums[num])\n    .filter((num) => num);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const fact = (num) => {\n    let result = 1;\n    for (let i = 1; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  };\n\n  const sum = (num) => {\n    let result = 0;\n    for (let i = 1; i <= num; i++) {\n      result += i;\n    }\n    return result;\n  };\n\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2 === 0 ? fact(i) : sum(i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = Math.abs(arr[i]);\n    while (num > 0) {\n      let digit = num % 10;\n      sum += digit;\n      num = Math.floor(num / 10);\n    }\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) count++;\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let oddLst1 = lst1.filter(num => num % 2 !== 0);\n  let evenLst2 = lst2.filter(num => num % 2 === 0);\n  return oddLst1.length <= evenLst2.length ? 'YES' : 'NO';\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let count = {};\n  let words = test.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (count[words[i]]) {\n      count[words[i]]++;\n    } else {\n      count[words[i]] = 1;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let str = [...s];\n  let chars = [...c];\n  let result = '';\n  let isPalindrome = false;\n\n  for (let i = 0; i < str.length; i++) {\n    if (!chars.includes(str[i])) {\n      result += str[i];\n    }\n  }\n\n  const reversedResult = result.split('').reverse().join('');\n  isPalindrome = result === reversedResult;\n\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = Infinity;\n  let sum = 0;\n  for (let num of nums) {\n    sum += num;\n    min = Math.min(min, sum);\n    if (sum > 0) sum = 0;\n  }\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let buckets = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets++;\n      }\n    }\n  }\n  return Math.ceil(buckets / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  const binaryOnes = (num) => {\n    return num.toString(2).replace(/0/g, '').length;\n  };\n\n  return arr.sort((a, b) => {\n    if (binaryOnes(a) === binaryOnes(b)) {\n      return a - b;\n    }\n    return binaryOnes(a) - binaryOnes(b);\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = [];\n\n  for (let word of words) {\n    let consonants = [];\n    for (let char of word) {\n      if (!vowels.includes(char) && char.match(/[a-z]/i)) {\n        consonants.push(char);\n      }\n    }\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = \"aeiouAEIOU\";\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  let lastVowel = \"\";\n  let lastConsonant = \"\";\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      lastVowel = word[i];\n      if (lastConsonant) {\n        return lastConsonant + lastVowel;\n      }\n    } else if (consonants.includes(word[i])) {\n      lastConsonant = word[i];\n      if (lastVowel) {\n        return lastConsonant + lastVowel;\n      }\n    }\n  }\n  return \"\";\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let s = lst[0] + lst[1];\n  let stack = [];\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else if (s[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  if (k > arr.length) {\n    return 'k is larger than the array length';\n  }\n\n  let max = -Infinity;\n  for (let i = 0; i <= arr.length - k; i++) {\n    let sum = 0;\n    for (let j = i; j < i + k; j++) {\n      sum += arr[j];\n    }\n    max = Math.max(max, sum);\n  }\n  return max;\n};"}
{"task_id": "JavaScript/121", "generation": "\n  return lst.reduce((acc, cur) => {\n    return cur % 2 === 0 ? acc + cur : acc;\n  }, 0);\n};"}
{"task_id": "JavaScript/122", "generation": "\n  if (k > arr.length) {\n    return 'k is larger than the length of the array';\n  }\n\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [n];\n  while (n != 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    if (n % 2 !== 0) arr.push(n);\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const dateRegex = /^(0[1-9]|1[0-2])[-](0[1-9]|[12][0-9]|3[01])[-](19|20)\\d\\d$/;\n  return dateRegex.test(date);\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(',')) {\n    return txt.split(',');\n  } else if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else {\n    return [txt];\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] >= lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start + 1;\n  if (length < 2) return \"NO\";\n  for (let i = 2; i * i <= length; i++) {\n    if (length % i === 0) return \"NO\";\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    } else if (arr[i] > 0) {\n      product *= 1;\n      sum += arr[i];\n    }\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [-1, 0],\n    [0, -1],\n  ];\n  const dp = Array.from({ length: n }, () =>\n    Array.from({ length: n }, () => Array(k + 1).fill(Infinity))\n  );\n  const visited = Array.from({ length: n }, () =>\n    Array.from({ length: n }, () => Array(k + 1).fill(false))\n  );\n\n  const dfs = (i, j, k) => {\n    if (k === 0) return grid[i][j];\n    if (visited[i][j][k]) return dp[i][j][k];\n    visited[i][j][k] = true;\n    for (let [dx, dy] of directions) {\n      const x = i + dx;\n      const y = j + dy;\n      if (x >= 0 && x < n && y >= 0 && y < n) {\n        dp[i][j][k] = Math.min(dp[i][j][k], dfs(x, y, k - 1) + grid[i][j]);\n      }\n    }\n    return dp[i][j][k];\n  };\n\n  let minPath = Infinity;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      minPath = Math.min(minPath, dfs(i, j, k - 1));\n    }\n  }\n  return minPath;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1];\n  if (n === 3) return [1, 1, 2];\n  let arr = [1, 1, 2];\n  for (let i = 3; i < n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let isOdd = false;\n  while (n) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      isOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return isOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      count++;\n    } else if (string[i] === \"]\") {\n      count--;\n      if (count < 0) {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((acc, curr) => {\n    return acc + Math.ceil(Math.pow(curr, 2));\n  }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  return /[a-z]/i.test(lastWord.slice(-1));\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] >= arr[i]) {\n        maxIndex = Math.max(maxIndex, j);\n        break;\n      }\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let smallest = null;\n  let largest = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (largest === null || lst[i] < largest) {\n        largest = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (smallest === null || lst[i] > smallest) {\n        smallest = lst[i];\n      }\n    }\n  }\n\n  return { smallest, largest };\n};"}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) {\n    return a;\n  } else if (a.toString() === b.toString()) {\n    return a;\n  } else if (parseFloat(a) === parseFloat(b)) {\n    return a;\n  } else if (parseFloat(a).toFixed(1) === parseFloat(b).toFixed(1)) {\n    return a;\n  } else if (parseFloat(a).toFixed(2) === parseFloat(b).toFixed(2)) {\n    return a;\n  } else {\n    return null;\n  }\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 4) {\n    return false;\n  }\n  if (n % 2 !== 0) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n < 0) return -1;\n  if (n === 0 || n === 1) return 1;\n\n  let factorial = 1;\n\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\n  return factorial;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, ' ');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const fileExtension = ['exe', 'dll'];\n  const fileNameParts = file_name.split('.');\n  const fileNameWithoutExtension = fileNameParts[0];\n  const fileExtensionCheck = fileNameParts[1];\n\n  if (fileNameWithoutExtension.match(/[0-9]/)) {\n    return 'No';\n  }\n\n  if (!fileNameWithoutExtension[0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  if (!fileExtensionCheck || !fileExtension.includes(fileExtensionCheck)) {\n    return 'No';\n  }\n\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 4 === 0 && lst[i] !== 3 && lst[i] !== 4) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.map((word) => {\n    if (isPrime(word.length)) {\n      return word;\n    }\n    return '';\n  });\n  return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n    if (num % i === 0) return false;\n  }\n  return num > 1;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  // split the fractions\n  const [xNum, xDen] = x.split(\"/\");\n  const [nNum, nDen] = n.split(\"/\");\n\n  // calculate the new numerators and denominator\n  const newNum = xNum * nNum;\n  const newDen = xDen * nDen;\n\n  // check if the new numerator is a whole number\n  return Number.isInteger(newNum / newDen);\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let firstDigit = parseInt(nums[i].toString().charAt(0));\n    let lastDigit = parseInt(nums[i].toString().charAt(nums[i].toString().length - 1));\n    if (nums[i] > 10 && (firstDigit % 2 !== 0) && (lastDigit % 2 !== 0)) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i - j) % 3 === 0 || (j - k) % 3 === 0 || (i - k) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return (\"\",);\n  }\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 > index2) {\n    return planets.slice(index2 + 1, index1);\n  } else {\n    return planets.slice(index1 + 1, index2);\n  }\n}"}
{"task_id": "JavaScript/149", "generation": "\n  let evenLengthWords = lst.filter((word) => word.length % 2 === 0);\n  evenLengthWords.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return evenLengthWords;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (n === 1) {\n    return x;\n  } else if (n === 2) {\n    return y;\n  } else {\n    return \"Invalid input\";\n  }\n};"}
{"task_id": "JavaScript/151", "generation": "\n  return lst.reduce((acc, curr) => {\n    if (curr > 0 && curr % 2 !== 0) {\n      return acc + Math.pow(curr, 2);\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((num, i) => (num === guess[i] ? 0 : Math.abs(num - guess[i])));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let maxStrength = 0;\n  let maxExtension = '';\n\n  for (let extension of extensions) {\n    let strength = countUppercase(class_name) + countUppercase(extension);\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      maxExtension = extension;\n    }\n  }\n\n  return `${class_name}.${maxExtension}`;\n};\n\nconst countUppercase = (str) => {\n  return (str.match(/[A-Z]/g) || []).length;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length !== b.length) {\n    return false;\n  }\n  if (a.includes(b)) {\n    return true;\n  }\n  for (let i = 0; i < a.length - 1; i++) {\n    const rotated = a.slice(i + 1) + a.slice(0, i + 1);\n    if (rotated.includes(b)) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n  let numArr = num.toString().split(\"\");\n  numArr.forEach((n) => {\n    if (parseInt(n) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  });\n  return [evenCount, oddCount];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n  for (let key in map) {\n    while (number >= map[key]) {\n      result += key;\n      number -= map[key];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  // sort the sides in ascending order\n  const sides = [a, b, c].sort((a, b) => a - b);\n\n  // calculate the square of the sides\n  const [a2, b2, c2] = sides.map(side => Math.pow(side, 2));\n\n  // check if the triangle is right-angled\n  return a2 + b2 === c2;\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let max = 0;\n  let maxWords = [];\n\n  words.forEach((word) => {\n    const uniqueCount = new Set(word.split('')).size;\n    if (uniqueCount > max) {\n      max = uniqueCount;\n      maxWords = [word];\n    } else if (uniqueCount === max) {\n      maxWords.push(word);\n    }\n  });\n\n  return maxWords.sort()[0];\n};"}
{"task_id": "JavaScript/159", "generation": "\n  if (number + need <= remaining) {\n    return [remaining - (number + need), 0];\n  } else {\n    return [0, (number + need) - remaining];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split('');\n  let letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let reversed = s.split('').reverse();\n  for (let i = 0; i < arr.length; i++) {\n    if (letters.includes(arr[i])) {\n      if (arr[i] === arr[i].toLowerCase()) {\n        arr[i] = arr[i].toUpperCase();\n      } else {\n        arr[i] = arr[i].toLowerCase();\n      }\n    } else {\n      arr[i] = reversed[i];\n    }\n  }\n  return arr.join('');\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (!text) {\n    return null;\n  }\n\n  const crypto = require('crypto');\n  const md5 = crypto.createHash('md5');\n  const hash = md5.update(text).digest('hex');\n\n  return hash;\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
