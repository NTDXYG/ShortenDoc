{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let result = [];\n  let stack = [];\n  let current = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    let char = paren_string[i];\n    current += char;\n\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n    }\n\n    if (stack.length === 0) {\n      result.push(current);\n      current = '';\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(belowZero([1, 2, 3])); // false\nconsole.log(belowZero([1, 2, -4, 5])); // true\nconsole.log(belowZero([1, 2, 3, -6])); // true\nconsole.log(belowZero([1, 2, 3, 4])); // false\nconsole.log(belowZero([-1, 2, 3, 4])); // true\nconsole.log(belowZero([1, -2, 3, 4])); // true\nconsole.log(belowZero([1, 2, -3, 4])); // true\nconsole.log(belowZero([1, 2, 3, -4])); // true\nconsole.log(belowZero([1, 2, 3, 4, -5])); // true\nconsole.log(belowZero([1, 2, 3, 4, 5, -6])); // true\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, -7])); // true\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, 7])); // false\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, 7, -8])); // true\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, 7, 8])); // false\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, 7, 8, -9])); // true\nconsole.log(belowZero([1, 2, 3, 4, 5, 6, 7, 8, 9])); // false\nconsole.log(belowZero([1, 2, 3, 4,"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n  let result = [];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentDepth++;\n      if (currentDepth > maxDepth) {\n        maxDepth = currentDepth;\n      }\n    } else if (paren_string[i] === ')') {\n      currentDepth--;\n    } else if (paren_string[i] === ' ') {\n      if (maxDepth > 0) {\n        result.push(maxDepth);\n      }\n      maxDepth = 0;\n    }\n  }\n\n  if (maxDepth > 0) {\n    result.push(maxDepth);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let maxSoFar = numbers[0];\n  return numbers.map((num) => {\n    maxSoFar = Math.max(maxSoFar, num);\n    return maxSoFar;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  const reverse = (str) => str.split('').reverse().join('');\n  let palindrome = '';\n  for (let i = string.length; i > 0; i--) {\n    if (string.substring(0, i) === reverse(string.substring(0, i))) {\n      palindrome = string.substring(i);\n      break;\n    }\n  }\n  return reverse(palindrome) + string;\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  while (b !== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 1; i <= string.length; i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const uniqueChars = new Set(string);\n  return uniqueChars.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const music_array = music_string.split(' ');\n  const beats = music_array.map((note) => {\n    switch (note) {\n      case 'o|':\n        return 2;\n      case 'o':\n        return 1;\n      case '.':\n        return 0.5;\n      default:\n        return 0;\n    }\n  });\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  if (substring.length === 0) return 0;\n  let count = 0;\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedArray = numArray.sort((a, b) => numMap[a] - numMap[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  // Sort the array to make finding the closest pair easier\n  numbers.sort((a, b) => a - b);\n\n  // Iterate through the array to find the closest pair\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n    for (let i = n / 2; i >= 1; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1;\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  numbers.forEach((num) => {\n    counts[num] = (counts[num] || 0) + 1;\n  });\n  return numbers.filter((num) => counts[num] === 1);\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n    return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let x = 0;\n  let dx = 1e-6;\n  let f = (x) => {\n    let y = 0;\n    for (let i = 0; i < xs.length; i++) {\n      y += xs[i] * Math.pow(x, i);\n    }\n    return y;\n  };\n  while (Math.abs(f(x)) > 1e-6) {\n    x -= f(x) / (f(x + dx) - f(x)) * dx;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/33", "generation": "\n    let result = [];\n    let sorted = [];\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result.push(sorted[count]);\n            count++;\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(sortThird([2, 3])); // [2, 3]\nconsole.log(sortThird([6, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]\nconsole.log(sortThird([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2, 7])); // [2, 6, 3, 4, 8, 9, 5, 7]\nconsole.log(sortThird([8, 7, 4, 1, 3, 6, 5])); // [1, 7, 4, 8, 3, 6, 5]\nconsole.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "JavaScript/34", "generation": "\n    let uniqueList = [...new Set(l)];\n    uniqueList.sort((a, b) => a - b);\n    return uniqueList;\n}"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += i.toString().split('').filter(digit => digit === '7').length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort((a, b) => a - b);\n  for (let i = 0; i < even.length; i++) {\n    l[i * 2] = even[i];\n  }\n  for (let i = 0; i < odd.length; i++) {\n    l[i * 2 + 1] = odd[i];\n  }\n  return l;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      const [a, b, c] = group.split('');\n      decoded += `${c}${a}${b}`;\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;"}
{"task_id": "JavaScript/39", "generation": "\n  let num = 2;\n  let fib = 1;\n  let fib2 = 1;\n  let count = 0;\n  while (count < n) {\n    if (isPrime(fib)) {\n      count++;\n    }\n    fib2 = fib;\n    fib = fib + fib2;\n  }\n  return fib2;\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n    return n * n;\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  const seen = new Set();\n  for (const num of l) {\n    if (seen.has(-num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    const mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) return 1;\n  let result = 1;\n  let base = n;\n  while (p > 0) {\n    if (p % 2 === 1) {\n      result = (result * base) % p;\n    }\n    base = (base * base) % p;\n    p = Math.floor(p / 2);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s.charAt(i);\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(num => num < t);\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};\n\nconst add2 = (x) => {\n  return (y) => {\n    return x + y;\n  };\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let char of s0) {\n    map.set(char, (map.get(char) || 0) + 1);\n  }\n  for (let char of s1) {\n    if (!map.has(char) || map.get(char) === 0) {\n      return false;\n    }\n    map.set(char, map.get(char) - 1);\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  let inc = true;\n  let dec = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      dec = false;\n    } else if (l[i] > l[i + 1]) {\n      inc = false;\n    }\n  }\n  return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let result = [];\n  let map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    if (!map.has(l1[i])) {\n      map.set(l1[i], true);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n >>= 1;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n < 2) return 0;\n  if (n === 2) return 1;\n  let a = 0, b = 1, c = 1;\n  for (let i = 3; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  if (s.endsWith('y') || s.endsWith('Y')) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  if (x === \"\") return \"\";\n  const len = x.length;\n  shift = shift % len;\n  if (shift === 0) return x;\n  return x.slice(-shift) + x.slice(0, len - shift);\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      sum += charCode - 64;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n  return index !== -1 ? [smallestEven, index] : [];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let freq = {};\n  let max = -Infinity;\n  let maxFreq = 0;\n\n  lst.forEach((num) => {\n    if (num > 0) {\n      freq[num] = (freq[num] || 0) + 1;\n      if (freq[num] > maxFreq || (freq[num] === maxFreq && num > max)) {\n        max = num;\n        maxFreq = freq[num];\n      }\n    }\n  });\n\n  return maxFreq > 0 ? max : 1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n    let result = [];\n    let max = Math.max(...lst);\n    let min = Math.min(...lst);\n    while (lst.length > 0) {\n        result.push(max);\n        lst.splice(lst.indexOf(max), 1);\n        if (lst.length > 0) {\n            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n        }\n        max = Math.max(...lst);\n        min = Math.min(...lst);\n    }\n    return result;\n}\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5])); // [5, 5, 5]\nconsole.log(strangeSortList([])); // []\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [1, 9, 2, 8, 3, 7, 4, 6, 5]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // [1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7]\nconsole."}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    } else {\n        let semiPerimeter = (a + b + c) / 2;\n        let area = Math.sqrt(semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c));\n        return parseFloat(area.toFixed(2));\n    }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = q.reduce((a, b) => a + b, 0);\n  let isPalindrome = q.toString() === q.slice().reverse().toString();\n  return isPalindrome && sum <= w;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] !== arr[j]) {\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  let total1 = lst1.reduce((a, b) => a + b.length, 0);\n  let total2 = lst2.reduce((a, b) => a + b.length, 0);\n  return total1 < total2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      count++;\n      a /= i;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n < 2) return false;\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let cube = Math.round(Math.pow(a, 1/3));\n    return Math.pow(cube, 3) === a;\n}\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // false\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\nconsole.log(iscube(125)); // true\nconsole.log(iscube(26)); // false\nconsole.log(iscube(27)); // true\nconsole.log(iscube(28)); // false\nconsole.log(iscube(729)); // true\nconsole.log(iscube(1000)); // true\nconsole.log(iscube(1001)); // false\nconsole.log(iscube(1002)); // false\nconsole.log(iscube(1003)); // false\nconsole.log(iscube(1004)); // false\nconsole.log(iscube(1005)); // false\nconsole.log(iscube(1006)); // false\nconsole.log(iscube(1007)); // false\nconsole.log(iscube(1008)); // false\nconsole.log(iscube(1009)); // false\nconsole.log(iscube(1010)); // false\nconsole.log(iscube(1011)); // false\nconsole.log(iscube(1012)); // false\nconsole.log(iscube(1013)); // false\nconsole.log(iscube(1014)); // false\nconsole.log(iscube(1015)); // false\nconsole.log(iscube(1016)); // false\nconsole.log(iscube(1017)); // false\nconsole.log(iscube(1018)); // false\nconsole.log(iscube(1019)); // false\nconsole.log(iscube(1020)); // false\nconsole.log(iscube(1021)); // false\nconsole.log(iscube(1022)); // false\nconsole.log(iscube(1023)); // false\nconsole.log(iscube(1024)); // false\nconsole.log(iscube(1025)); // false\nconsole.log("}
{"task_id": "JavaScript/78", "generation": "\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  let count = 1;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] === s[i - 1]) {\n      count++;\n    } else {\n      if (count < 3) {\n        return false;\n      }\n      count = 1;\n    }\n  }\n  return count < 3;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.0) return 'B';\n        if (grade > 1.0) return 'C+';\n        if (grade > 0.0) return 'C';\n        if (grade > -1.0) return 'D+';\n        if (grade > -2.0) return 'D';\n        if (grade > -3.0) return 'D-';\n        return 'E';\n    });\n};"}
{"task_id": "JavaScript/82", "generation": "\n    const isPrime = (num) => {\n        for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    return isPrime(string.length);\n}"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i.toString();\n    if (num.startsWith('1') || num.endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    let str = N.toString();\n    for(let i = 0; i < str.length; i++){\n        sum += parseInt(str[i]);\n    }\n    return sum.toString(2);\n}\nconsole.log(solve(147)); // 1100\nconsole.log(solve(1000)); // 1\nconsole.log(solve(150)); // 110\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log(solve(147)); // 1100\nconsole.log("}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([1, 2, 3, 4, 5, 6])); // 12\nconsole.log(add([1, 3, 5, 7])); // 0\nconsole.log(add([2, 4, 6, 8])); // 20\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])); // 20\nconsole.log(add([-1, -2, -3, -4, -5, -6])); // -12\nconsole.log(add([-2, -4, -6, -8])); // -20\nconsole.log(add([-1, -3, -5, -7])); // 0\nconsole.log(add([-2, -4, -6, -8, -10])); // -30\nconsole.log(add([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])); // -30\nconsole.log(add([-2, -4, -6, -8, -10, -12])); // -30\nconsole.log(add([-1, -3, -5, -7, -9])); // 0\nconsole.log(add([-2, -4, -6, -8, -10, -12, -14])); // -30\nconsole.log(add([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])); // -30\nconsole.log(add([-2, -4, -6, -8, -10, -12, -14, -16])); // -30\nconsole.log(add([-1, -3, -5, -7, -9, -11])); //"}
{"task_id": "JavaScript/86", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n  return res;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  // Your code here\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n    let smallest = Infinity;\n    let secondSmallest = Infinity;\n    for (let num of lst) {\n        if (num < smallest) {\n            secondSmallest = smallest;\n            smallest = num;\n        } else if (num < secondSmallest && num !== smallest) {\n            secondSmallest = num;\n        }\n    }\n    return secondSmallest !== Infinity ? secondSmallest : null;\n};"}
{"task_id": "JavaScript/91", "generation": "\n    let boredom = 0;\n    let sentences = S.split('.');\n    for (let i = 0; i < sentences.length; i++) {\n        let words = sentences[i].split(' ');\n        if (words[0] === 'I') {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"I am bored. The sun is I love this\")); // 2\nconsole.log(isBored(\"I am not bored. The sun is I love this\")); // 1\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored\")); // 2\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored\")); // 3\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored\")); // 4\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored. I am not bored\")); // 5\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored. I am not bored. I am not bored\")); // 6\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored\")); // 7\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored\")); // 8\nconsole.log(isBored(\"I am not bored. The sun is I love this. I am bored. I am not bored. I am not bored. I am not bored. I am not bored. I am not bored."}
{"task_id": "JavaScript/92", "generation": "\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i].toLowerCase();\n    if (vowels.includes(char)) {\n      const vowelIndex = alphabet.indexOf(char);\n      const newVowelIndex = (vowelIndex + 2) % 26;\n      const newChar = alphabet[newVowelIndex];\n      encodedMessage += message[i] === char ? newChar : newChar.toUpperCase();\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    let num = lst[i];\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  // Check if dictionary is empty\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  // Check if all keys are lowercase or uppercase\n  const allLowerCase = Object.keys(dict).every(key => typeof key === 'string' && key.toLowerCase() === key);\n  const allUpperCase = Object.keys(dict).every(key => typeof key === 'string' && key.toUpperCase() === key);\n\n  return allLowerCase || allUpperCase;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; primes.length < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let product = 1;\n  let num1 = Math.abs(a);\n  let num2 = Math.abs(b);\n  while (num1 > 0) {\n    product *= num1 % 10;\n    num1 = Math.floor(num1 / 10);\n  }\n  while (num2 > 0) {\n    product *= num2 % 10;\n    num2 = Math.floor(num2 / 10);\n  }\n  return product;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor < ceil - num ? floor : ceil;\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let odd = n % 2 !== 0 ? n : n + 1;\n  let even = n % 2 === 0 ? n : n + 1;\n  for (let i = 0; i < n; i++) {\n    result.push(odd);\n    odd += 2;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/).map(word => word.replace(/^\"|\"$/g, ''));\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return 1;\n  } else {\n    return x + 1;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let hasEven = false;\n    while (num > 0) {\n      let digit = num % 10;\n      if (digit % 2 === 0) {\n        hasEven = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if (hasEven) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.toString().length - b.toString().length);\n};\n\nconst reverseAndReplace = (arr) => {\n  const numToWord = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  const sortedArr = byLength(arr);\n  const reversedArr = sortedArr.reverse();\n  const result = reversedArr.map((num) => {\n    if (num >= 1 && num <= 9) {\n      return numToWord[num];\n    } else {\n      return \"\";\n    }\n  });\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum += j;\n    }\n    result.push(sum);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n  const str = num.toString();\n  const reversedStr = str.split('').reverse().join('');\n  return str === reversedStr;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = Math.abs(arr[i]);\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (count <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/110", "generation": "\n  const even = (n) => n % 2 === 0;\n  const odd = (n) => n % 2 !== 0;\n  const lst1Odd = lst1.filter(odd);\n  const lst2Even = lst2.filter(even);\n  return lst1Odd.length === lst2Even.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let max = 0;\n  let temp = test.split(' ');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] !== '') {\n      if (result[temp[i]] === undefined) {\n        result[temp[i]] = 1;\n      } else {\n        result[temp[i]] += 1;\n      }\n      if (result[temp[i]] > max) {\n        max = result[temp[i]];\n      }\n    }\n  }\n  let final = {};\n  for (let key in result) {\n    if (result[key] === max) {\n      final[key] = result[key];\n    }\n  }\n  return final;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      newString += s[i];\n    }\n  }\n  let reversedString = newString.split('').reverse().join('');\n  let isPalindrome = newString === reversedString;\n  return [reversedString, isPalindrome];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str, i) => {\n    const oddCount = [...str].filter(char => char % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            count += Math.ceil(grid[i][j] / capacity);\n        }\n    }\n    return count;\n}\nconsole.log(maxFill([[0, 0], [0, 0]], 5)); // 5\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 1)); // 6\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 2)); // 3\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 3)); // 2\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 4)); // 1\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 6)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 7)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 8)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 9)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 10)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 11)); // 0\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 12)); // "}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    let countA = a.toString(2).split('').filter(char => char === '1').length;\n    let countB = b.toString(2).split('').filter(char => char === '1').length;\n    return countA - countB || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  // Split the string into words\n  const words = s.split(' ');\n  // Filter the words to only include those with exactly n consonants\n  const filteredWords = words.filter(word => {\n    // Remove any non-alphabetic characters from the word\n    const cleanWord = word.replace(/[^a-zA-Z]/g, '');\n    // Count the number of consonants in the word\n    const consonantCount = cleanWord.replace(/[aeiouAEIOU]/g, '').length;\n    // Return true if the word has exactly n consonants, false otherwise\n    return consonantCount === n;\n  });\n  // Return the filtered words\n  return filteredWords;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let closestVowel = '';\n  let minDistance = Infinity;\n\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (!vowels.includes(word[i])) {\n      const distance = word.length - i - 1;\n      if (distance < minDistance && distance > 1) {\n        minDistance = distance;\n        closestVowel = word[i];\n      }\n    }\n  }\n\n  return closestVowel ? closestVowel : '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n      if (count < 0) {\n        return 'No';\n      }\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // slice the array to get the first k elements\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    sequence.push(n);\n  }\n  return sequence.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const regex = /^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])-\\d{4}$/;\n  if (!regex.test(date)) {\n    return false;\n  }\n  const [month, day, year] = date.split('-').map(Number);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  let result = [];\n  let words = txt.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.includes(\",\")) {\n      let commas = word.split(\",\");\n      for (let j = 0; j < commas.length; j++) {\n        let comma = commas[j];\n        if (comma.length > 0) {\n          result.push(comma);\n        }\n      }\n    } else {\n      result.push(word);\n    }\n  }\n  let sorted = result.sort((a, b) => {\n    let sumA = 0;\n    let sumB = 0;\n    for (let i = 0; i < a.length; i++) {\n      let char = a.charCodeAt(i) - 96;\n      if (char % 2 !== 0) {\n        sumA += char;\n      }\n    }\n    for (let i = 0; i < b.length; i++) {\n      let char = b.charCodeAt(i) - 96;\n      if (char % 2 !== 0) {\n        sumB += char;\n      }\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      count++;\n    }\n  }\n  return count < 2;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const N = grid.length;\n  const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const visited = new Set();\n  const result = [];\n  const dfs = (x, y, path) => {\n    if (path.length === k) {\n      if (!result.length || path < result) {\n        result.length = 0;\n        result.push(...path);\n      }\n      return;\n    }\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited.has(`${nx},${ny}`)) {\n        visited.add(`${nx},${ny}`);\n        dfs(nx, ny, path.concat(grid[nx][ny]));\n        visited.delete(`${nx},${ny}`);\n      }\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      visited.add(`${i},${j}`);\n      dfs(i, j, [grid[i][j]]);\n      visited.delete(`${i},${j}`);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3] + 1);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    let hasOdd = false;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((a, b) => a + Math.pow(Math.ceil(b), 2), 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) return false;\n  const lastChar = txt[txt.length - 1];\n  return /^[a-zA-Z]$/.test(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let result = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      result = i - 1;\n      break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let smallest = null;\n  let largest = null;\n\n  lst.forEach((num) => {\n    if (num < 0 && (smallest === null || num > smallest)) {\n      smallest = num;\n    } else if (num > 0 && (largest === null || num > largest)) {\n      largest = num;\n    }\n  });\n\n  return [smallest, largest];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (a == b) {\n    return null;\n  } else {\n    return a.toString().replace(\".\", \",\");\n  }\n};\n\nconst compareOne1 = (a, b) => {\n  if (a == b) {\n    return null;\n  } else {\n    return a.toString().replace(\".\", \",\");\n  }\n};"}
{"task_id": "JavaScript/138", "generation": "\n  // Check if the number is even and greater than or equal to 8\n  if (n % 2 === 0 && n >= 8) {\n    // Check if the number can be written as the sum of four even numbers\n    for (let i = 0; i <= n / 4; i++) {\n      for (let j = 0; j <= n / 4; j++) {\n        for (let k = 0; k <= n / 4; k++) {\n          for (let l = 0; l <= n / 4; l++) {\n            if (i + j + k + l === n / 4) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst brazilianFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= specialFactorial(i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, ' ').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const file_name_arr = file_name.split('.');\n  const file_name_arr_length = file_name_arr.length;\n  const file_name_arr_last = file_name_arr[file_name_arr_length - 1];\n  const file_name_arr_first = file_name_arr[0];\n  const file_name_arr_first_length = file_name_arr_first.length;\n  const file_name_arr_first_first = file_name_arr_first[0];\n  const file_name_arr_first_last = file_name_arr_first[file_name_arr_first_length - 1];\n  const file_name_arr_first_last_digit = file_name_arr_first_last.match(/\\d/g);\n  const file_name_arr_first_last_dot = file_name_arr_first_last.match(/\\./g);\n  const file_name_arr_first_last_special = file_name_arr_first_last.match(/[^a-zA-Z0-9.]/g);\n  const file_name_arr_first_last_special_length = file_name_arr_first_last_special ? file_name_arr_first_last_special.length : 0;\n  const file_name_arr_first_last_special_dot = file_name_arr_first_last_special ? file_name_arr_first_last_special.includes('.') : false;\n  const file_name_arr_first_last_special_digit = file_name_arr_first_last_special ? file_name_arr_first_last_special.includes('-') : false;\n  const file_name_arr_first_last_special_special = file_name_arr_first_last_special ? file_name_arr_first_last_special.match(/[^a-zA-Z0-9.-]/g) : false;\n  const file_name_arr_first_last_special_special_length = file_name_arr_first_last_special_special ? file_name_"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeLengthWords = words.filter(word => isPrime(word.length));\n  return primeLengthWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [numeratorX, denominatorX] = x.split('/').map(Number);\n  const [numeratorN, denominatorN] = n.split('/').map(Number);\n  const resultNumerator = numeratorX * numeratorN;\n  const resultDenominator = denominatorX * denominatorN;\n  return resultNumerator % resultDenominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumDigits = (num) => {\n      return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    };\n\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]);\n    let firstDigit = num % 10;\n    let lastDigit = Math.floor(num / 10);\n    while (lastDigit >= 10) {\n      lastDigit = Math.floor(lastDigit / 10);\n    }\n    if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * 3);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return \"Invalid planet names\";\n  }\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n  return planets.slice(start, end).join(\", \");\n}"}
{"task_id": "JavaScript/149", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (typeof n !== 'number') {\n    return y;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  return lst.reduce((acc, curr) => {\n    if (curr > 0 && curr % 2 !== 0) {\n      return acc + Math.pow(curr, 2);\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = '';\n  let maxStrength = -Infinity;\n  for (let extension of extensions) {\n    const strength = [...extension].filter(char => char === char.toUpperCase()).length - [...extension].filter(char => char === char.toLowerCase()).length;\n    if (strength > maxStrength) {\n      strongest = extension;\n      maxStrength = strength;\n    }\n  }\n  return `${class_name}.${strongest}`;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length < b.length) {\n    return false;\n  }\n  const concatenated = a + a;\n  return concatenated.includes(b);\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let roman = '';\n\n    for (let i = 0; i < romanNumerals.length; i++) {\n        while (number >= romanNumerals[i].value) {\n            roman += romanNumerals[i].numeral;\n            number -= romanNumerals[i].value;\n        }\n    }\n\n    return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  // Sort the sides of the triangle in ascending order\n  const sides = [a, b, c].sort((x, y) => x - y);\n\n  // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let max = 0;\n  let result = \"\";\n  words.forEach((word) => {\n    const uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      result = word;\n    } else if (uniqueChars.size === max) {\n      result = result < word ? result : word;\n    }\n  });\n  return result;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + Math.min(need, remaining);\n  let left = Math.max(need - remaining, 0);\n  return [total, left];\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '**':\n        result **= operand[i + 1];\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let hasLetter = false;\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      hasLetter = true;\n      result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : result.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  // eslint-disable-next-line no-undef\n  return CryptoJS.MD5(text).toString();\n};\n\nexport default stringToMd5;"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
