{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let paren_groups = paren_string.split(' ');\n  let result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    if (paren_groups[i].length % 2 === 0) {\n      let open_brace_count = 0;\n      for (let j = 0; j < paren_groups[i].length; j++) {\n        if (paren_groups[i][j] === '(') {\n          open_brace_count++;\n        } else if (paren_groups[i][j] === ')') {\n          open_brace_count--;\n        }\n        if (open_brace_count < 0) {\n          break;\n        }\n      }\n      if (open_brace_count === 0) {\n        result.push(paren_groups[i]);\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  const dec = number % 1;\n  return dec;\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n    const mean = mean_(numbers);\n    return numbers.reduce((sum, number) => sum + Math.abs(number - mean), 0) / numbers.length;\n};\n/* For a given of input numbers Variance is the average of the squared differences from the Mean\n   >>> variance([.0, 2.0, 3.0 4.0   1.0 */\nconst variance = (numbers) => {\n    const mean = mean_(numbers);\n    return numbers.reduce((sum, number) => sum + Math.pow(number - mean, 2), 0) / numbers.length;\n};\n/* For a given of input numbers Standard Deviation is the square root of the Variance\n   >>> standardDeviation([.0, 2.0, 3.0 4.0   1.0 */\nconst standardDeviation = (numbers) => {\n    return Math.sqrt(variance(numbers));\n};\n/* For a given of input numbers Covariance is the average of the products of the differences of each\n    element from the mean\n   >>> covariance([.0, 2.0, 3.0 4.0   1.0 */\nconst covariance = (numbers1, numbers2) => {\n    const mean1 = mean_(numbers1);\n    const mean2 = mean_(numbers2);\n    return numbers1.reduce((sum, number1, index) => sum + (number1 - mean1) * (numbers2[index] - mean2), 0) / numbers1.length;\n};\n/* For a given of input numbers Correlation is the ratio of the Covariance to the product of the Standard\n    Deviations of the two sets of numbers\n   >>> correlation([.0, 2.0, 3.0 4.0   1.0 */\nconst correlation = (numbers1, numbers2) => {\n    return covariance(numbers1, numbers2) / (standardDeviation(numbers1) * standardDeviation(numbers2));\n};\n/* For a given of input numbers the z-score is the signed number of standard deviations by which the value\n    of an observation or data point is above the mean value of what is being observed or measured\n   >>> zScore([.0, 2.0, 3.0 4.0   1.0 */\nconst zScore = (numbers, value) => {\n    const mean = mean_(numbers);\n    const standardDeviation_ = standardDeviation"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  return [numbers[0], delimeter, ...intersperse(numbers.slice(1), delimeter)];\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const paren_array = paren_string.split(' ');\n  const paren_levels = paren_array.map(paren => {\n    let level = 0;\n    let max_level = 0;\n    for (let i = 0; i < paren.length; i++) {\n      if (paren[i] === '(') {\n        level++;\n        if (level > max_level) {\n          max_level = level;\n        }\n      } else if (paren[i] === ')') {\n        level--;\n      }\n    }\n    return max_level;\n  });\n  return paren_levels;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter((string) => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === int) {\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((num) => {\n    if (num > max) {\n      max = num;\n    }\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (string.length === 0) {\n    return '';\n  }\n  if (string.length === 1) {\n    return string;\n  }\n  let palindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1);\n    const postfix = string.slice(i + 1);\n    const reversePrefix = prefix.split('').reverse().join('');\n    if (reversePrefix === postfix) {\n      palindrome = prefix + postfix;\n      break;\n    }\n  }\n  return palindrome;\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += i + ' ';\n  }\n  return str.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  let distinctChars = new Set();\n  for (let char of string) {\n    distinctChars.add(char);\n  }\n  return distinctChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      result.push(4);\n    } else if (notes[i] === 'o|') {\n      result.push(2);\n    } else if (notes[i] === 'o.') {\n      result.push(1);\n    } else if (notes[i] === '||') {\n      result.push(2);\n    } else if (notes[i] === '..') {\n      result.push(1);\n    } else if (notes[i] === '|') {\n      result.push(1);\n    } else if (notes[i] === '.') {\n      result.push(1);\n    } else if (notes[i] === '') {\n      result.push(4);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    'zeroone': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n  };\n  const numberArray = numbers.split(' ');\n  const sortedArray = numberArray.sort((a, b) => numberMap[a] - numberMap[b]);\n  return sortedArray.join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  if (numbers.length < 2) {\n    return [];\n  }\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};"}
{"task_id": "JavaScript/22", "generation": "\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers2 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers3 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers4 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers5 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers6 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.isInteger(value);\n    });\n};\n/* Filter given of values only for   >>>ers( 314, 5])   [\n    >>> filter_integers([1, 2,, 'abc', {}, [\n    [1, 2,] */\nconst filterIntegers7 = (values) => {\n    return values.filter((value) => {\n        return typeof value === 'number' && Number.is"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string\n    .split(\"\")\n    .map((char) => {\n      if (char === char.toLowerCase()) {\n        return char.toUpperCase();\n      } else {\n        return char.toLowerCase();\n      }\n    })\n    .join(\"\");\n}"}
{"task_id": "JavaScript/28", "generation": "\n    return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero1 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero3 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero4 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero5 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero6 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i] * Math.pow(x, i);\n  }\n  return y;\n};\nconst findZero7 = (xs) => {\n  const n = xs.length;\n  const x = 0;\n  let y = 0;\n  for (let i = 0; i < n; i++) {\n    y += xs[i]"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.filter((x) => x % 3 === 0);\n  const notDivisibleByThree = l.filter((x) => x % 3 !== 0);\n  const sortedDivisibleByThree = divisibleByThree.sort((a, b) => a - b);\n  const sortedNotDivisibleByThree = notDivisibleByThree.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(sortedDivisibleByThree.shift());\n    } else {\n      result.push(sortedNotDivisibleByThree.shift());\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/34", "generation": "\n    return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort((a, b) => a - b);\n  return even.concat(odd);\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  let i = 0;\n  while (i < s.length) {\n    decoded += s[i];\n    if (i % 3 === 2) {\n      decoded += s[i + 1];\n    }\n    i += 2;\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  let count = 0;\n  while (count < n) {\n    c = a + b;\n    a = b;\n    b = c;\n    if (isPrime(c)) {\n      count++;\n    }\n  }\n  return c;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      sum = l[i] + l[j];\n      if (sum === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 2;\n  return fib4(n - 1) + fib4(n - 2);\n};"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) return 1;\n  if (n === 1) return p;\n  if (n % 2 === 0) return modp(n / 2, p) ** 2;\n  return modp((n - 1) / 2, p) ** 2 * p;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let dec = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      dec += String.fromCharCode((c - 65 - 5 + 26) % 26 + 65);\n    } else if (c >= 97 && c <= 122) {\n      dec += String.fromCharCode((c - 97 - 5 + 26) % 26 + 97);\n    } else {\n      dec += s.charAt(i);\n    }\n  }\n  return dec;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!'aeiouAEIOU'.includes(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};\n\nconst add2 = add(5, 7)"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const s0Map = {};\n  const s1Map = {};\n  for (let i = 0; i < s0.length; i++) {\n    s0Map[s0[i]] = (s0Map[s0[i]] || 0) + 1;\n    s1Map[s1[i]] = (s1Map[s1[i]] || 0) + 1;\n  }\n  return Object.keys(s0Map).every((key) => s0Map[key] === s1Map[key]);\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\">\");\n    } else if (brackets[i] === \"(\") {\n      stack.push(\")\");\n    } else if (brackets[i] === \"[\") {\n      stack.push(\"]\");\n    } else if (brackets[i] === \"{\") {\n      stack.push(\"}\");\n    } else if (brackets[i] !== stack.pop()) {\n      return false;\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  const dir = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (dir === 0) {\n      dir = l[i] - l[i - 1];\n    } else if ((l[i] - l[i - 1]) * dir < 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.includes(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let largest = 2;\n  while (n > largest) {\n    if (n % largest === 0) {\n      n /= largest;\n    } else {\n      largest++;\n    }\n  }\n  return largest;\n};"}
{"task_id": "JavaScript/60", "generation": "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  let bracketMap = {\n    \"(\": \")\",\n    \"[\": \"]\",\n    \"{\": \"}\",\n  };\n  for (let i = 0; i < brackets.length; i++) {\n    let currentBracket = brackets[i];\n    if (bracketMap[currentBracket]) {\n      stack.push(currentBracket);\n    } else {\n      let lastBracket = stack.pop();\n      if (bracketMap[lastBracket] !== currentBracket) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n    const n = xs.length;\n    const ys = [];\n    for (let i = 1; i < n; i++) {\n        ys.push(i * xs[i]);\n    }\n    return ys;\n};\n/* xs represent coefficients alynomial    xs]s[] * x x[2] x +....   thislynomial in the same form.\n    >>> derivative([, 1, 2, 4, 5\n    [1, 4 12,\n  >>> derivative 2,])\n    [2, 6] */\nconst derivative2 = (xs) => {\n    const n = xs.length;\n    const ys = [];\n    for (let i = 2; i < n; i++) {\n        ys.push(i * (i - 1) * xs[i]);\n    }\n    return ys;\n};\n/* xs represent coefficients alynomial    xs]s[] * x x[2] x +....   thislynomial in the same form.\n    >>> derivative([, 1, 2, 4, 5\n    [1, 4 12,\n  >>> derivative 2,])\n    [2, 6] */\nconst derivative3 = (xs) => {\n    const n = xs.length;\n    const ys = [];\n    for (let i = 3; i < n; i++) {\n        ys.push(i * (i - 1) * (i - 2) * xs[i]);\n    }\n    return ys;\n};\n/* xs represent coefficients alynomial    xs]s[] * x x[2] x +....   thislynomial in the same form.\n    >>> derivative([, 1, 2, 4, 5\n    [1, 4 12,\n  >>> derivative 2,])\n    [2, 6] */\nconst derivative4 = (xs) => {\n    const n = xs.length;\n    const ys = [];\n    for (let i = 4; i < n; i++) {\n        ys.push(i * (i - 1) * (i - 2) * (i - 3) * xs[i]);\n    }\n    return ys;\n};\n/* xs represent coefficients alynomial    xs]s[] * x x[2] x +....   thislynomial in the same form.\n    >>> derivative([, 1, 2, 4, 5\n    [1"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  return fibfib(n - 1) * fibfib(n - 2) + fibfib(n - 3);\n}"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n    if (i === s.length - 1 && s[i] === \"y\") {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  if (x.length === 0) {\n    return x;\n  }\n  if (shift === 0) {\n    return x;\n  }\n  if (shift > x.length) {\n    shift = shift % x.length;\n  }\n  if (shift < 0) {\n    shift = x.length + shift;\n  }\n  const reversed = x.split('').reverse().join('');\n  const shifted = reversed.slice(0, shift) + reversed.slice(shift);\n  return shifted.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"0\" && s[i] <= \"9\") {\n      sum += parseInt(s[i]);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n  let arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == \"apples\") {\n      count += Number(arr[i - 1]);\n    }\n    if (arr[i] == \"oranges\") {\n      count += Number(arr[i - 1]);\n    }\n  }\n  return n - count;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let even = arr.filter((num) => num % 2 === 0);\n  if (even.length === 0) return [];\n  let smallest = Math.min(...even);\n  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}"}
{"task_id": "JavaScript/69", "generation": "\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max && lst.filter((x) => x === lst[i]).length > freq) {\n      max = lst[i];\n      freq = lst.filter((x) => x === lst[i]).length;\n    }\n  }\n  return max > 0 ? max : 1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  let sorted = [];\n  while (lst.length > 0) {\n    let max = Math.max(...lst);\n    let min = Math.min(...lst);\n    sorted.push(min);\n    sorted.push(max);\n    lst = lst.filter((num) => num !== max && num !== min);\n  }\n  return sorted;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c).toFixed(2);\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum <= w) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  let total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total1 > total2) {\n    return lst2;\n  } else {\n    return lst1.length <= lst2.length ? lst1 : lst2;\n  }\n}"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n}"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) return true;\n  if (n === 0) return false;\n  if (x === 1) return true;\n  if (x === 0) return false;\n  if (x < 0) return false;\n  if (n < 0) return false;\n  if (x % n !== 0) return false;\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) return false;\n  let b = Math.cbrt(a);\n  return b === Math.floor(b);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = \"13579BDF\";\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hex.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  if (decimal === 0) return \"0\";\n  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + \"db\";\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 2) return false;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === s[i + 1]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 3.3) {\n      letterGrades.push(\"A\");\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letterGrades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      letterGrades.push(\"D-\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n    let length = string.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString().startsWith('1') || i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  return N.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.map((word) => {\n    return word.split('').sort().join('');\n  });\n  return sortedWords.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a[0] - b[0]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n  let copy = [...array];\n  let sum = copy[0] + copy[copy.length - 1];\n  if (sum % 2 === 0) {\n    copy.sort((a, b) => b - a);\n  } else {\n    copy.sort((a, b) => a - b);\n  }\n  return copy;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[a-z]/)) {\n      let code = char.charCodeAt(0) + 2;\n      if (code > 122) {\n        code -= 26;\n      }\n      result += String.fromCharCode(code);\n    } else if (char.match(/[A-Z]/)) {\n      let code = char.charCodeAt(0) + 2;\n      if (code > 90) {\n        code -= 26;\n      }\n      result += String.fromCharCode(code);\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) return null;\n    let smallest = lst[0];\n    let secondSmallest = lst[1];\n    if (smallest > secondSmallest) {\n        [smallest, secondSmallest] = [secondSmallest, smallest];\n    }\n    for (let i = 2; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n}\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))"}
{"task_id": "JavaScript/91", "generation": "\n    let count = 0;\n    let arr = S.split('.');\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].startsWith('I')) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(isBored(\"Hello world\"))"}
{"task_id": "JavaScript/92", "generation": "\n  if (x === y + z || y === x + z || z === x + y) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i].toLowerCase())) {\n      const vowelIndex = vowels.indexOf(message[i].toLowerCase());\n      const nextVowel = vowels[(vowelIndex + 2) % vowels.length];\n      encodedMessage += nextVowel;\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n  return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let digitSum = 0;\n    let num = lst[i];\n    while (num > 0) {\n      digitSum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    sum += digitSum;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  for (let key in dict) {\n    if (key !== key.toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/97", "generation": "\n  let unitA = a.toString().slice(-1);\n  let unitB = b.toString().slice(-1);\n  if (unitA < 0) {\n    unitA = unitA * -1;\n  }\n  if (unitB < 0) {\n    unitB = unitB * -1;\n  }\n  return unitA * unitB;\n}"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  if (num - floor === ceil - num) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return num > 0 ? ceil : floor;\n  }\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = 1;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    stones += i % 2 === 0 ? 2 : 1;\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return 1;\n  } else {\n    return x + 1;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let avg = Math.round((n + m) / 2);\n  return avg.toString(2);\n}"}
{"task_id": "JavaScript/104", "generation": "\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      arr.push(x[i]);\n    }\n  }\n  return arr.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => b.length - a.length);\n};\n\nconst reverse = (arr) => {\n  return arr.reverse();\n};\n\nconst replace = (arr) => {\n  const map = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  return arr.map((num) => map[num]);\n};\n\nconst sortAndReplace = (arr) => {\n  const filteredArr = arr.filter((num) => num >= 1 && num <= 9);\n  const sortedArr = byLength(filteredArr);\n  const reversedArr = reverse(sortedArr);\n  const replacedArr = replace(reversedArr);\n  return replacedArr;\n}"}
{"task_id": "JavaScript/106", "generation": "\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      arr.push(factorial(i));\n    } else {\n      arr.push(sum(i));\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n  const str = num.toString();\n  const reversedStr = str.split('').reverse().join('');\n  return str === reversedStr;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num != 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum == 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (count <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          [lst1[i], lst2[j]] = [lst2[j], lst1[i]];\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  return count === lst1.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let arr = test.split(' ');\n  for (let i = 0; i < arr.length; i++) {\n    if (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n      result[arr[i]] = 1;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str, i) => {\n    const oddCount = str.split('').filter((char) => char % 2 !== 0).length;\n    return str.replace(/(\\d+)/g, (match) => oddCount);\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum === Infinity ? 0 : minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let visited = Array.from({ length: row }, () => Array(col).fill(false));\n  let queue = [];\n  let directions = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === 1 && !visited[i][j]) {\n        queue.push([i, j]);\n        visited[i][j] = true;\n        while (queue.length > 0) {\n          let [x, y] = queue.shift();\n          for (let [dx, dy] of directions) {\n            let nx = x + dx;\n            let ny = y + dy;\n            if (\n              nx >= 0 &&\n              nx < row &&\n              ny >= 0 &&\n              ny < col &&\n              grid[nx][ny] === 1 &&\n              !visited[nx][ny]\n            ) {\n              queue.push([nx, ny]);\n              visited[nx][ny] = true;\n            }\n          }\n        }\n        count++;\n      }\n    }\n  }\n  return Math.ceil(count / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.map((num) => {\n    if (num < 0) {\n      return -1 * num.toString(2).split('').filter((num) => num === '1').length;\n    } else {\n      return num.toString(2).split('').filter((num) => num === '1').length;\n    }\n  }).sort((a, b) => a - b).map((num) => {\n    if (num < 0) {\n      return -1 * num;\n    } else {\n      return num;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      if (char.match(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = \"aeiou\";\n  let wordArr = word.split(\"\");\n  let vowelArr = [];\n  let vowelIndex = [];\n  let vowelIndexArr = [];\n  let vowelIndexArr2 = [];\n  let vowelIndexArr3 = [];\n  let vowelIndexArr4 = [];\n  let vowelIndexArr5 = [];\n  let vowelIndexArr6 = [];\n  let vowelIndexArr7 = [];\n  let vowelIndexArr8 = [];\n  let vowelIndexArr9 = [];\n  let vowelIndexArr10 = [];\n  let vowelIndexArr11 = [];\n  let vowelIndexArr12 = [];\n  let vowelIndexArr13 = [];\n  let vowelIndexArr14 = [];\n  let vowelIndexArr15 = [];\n  let vowelIndexArr16 = [];\n  let vowelIndexArr17 = [];\n  let vowelIndexArr18 = [];\n  let vowelIndexArr19 = [];\n  let vowelIndexArr20 = [];\n  let vowelIndexArr21 = [];\n  let vowelIndexArr22 = [];\n  let vowelIndexArr23 = [];\n  let vowelIndexArr24 = [];\n  let vowelIndexArr25 = [];\n  let vowelIndexArr26 = [];\n  let vowelIndexArr27 = [];\n  let vowelIndexArr28 = [];\n  let vowelIndexArr29 = [];\n  let vowelIndexArr30 = [];\n  let vowelIndexArr31 = [];\n  let vowelIndexArr32 = [];\n  let vowelIndexArr33 = [];\n  let vowelIndexArr34 = [];\n  let vowelIndexArr35 = [];\n  let vowelIndexArr36 = [];\n  let vowelIndexArr37 = [];\n  let vowelIndexArr38 = [];\n  let vowelIndexArr39 = [];\n  let vowelIndexArr40 = [];\n  let vowelIndexArr41 = [];\n  let vowelIndexArr42 = [];\n  let vowelIndexArr43 = [];\n  let vowelIndexArr44 = [];\n  let vowelIndexArr45 = [];\n  let vowelIndexArr46 = [];\n  let vowelIndexArr47 = [];\n  let vowelIndexArr48 = [];\n  let vowelIndexArr49 = [];\n  let vowelIndexArr50 = [];\n  let vowelIndexArr51 = [];\n  let vowelIndexArr52 = [];\n  let vowelIndexArr53 = [];\n  let vowelIndexArr54 = [];\n  let vowelIndexArr55 = [];\n  let vowelIndexArr56 = [];\n  let vowelIndexArr57 = [];\n  let vowelIndexArr58 = [];\n  let vowelIndexArr59 = [];\n  let vowelIndexArr60 = [];\n  let vowelIndexArr"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst[0] + lst[1];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  if (count === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"}
{"task_id": "JavaScript/120", "generation": "\n  let max = -Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\nconst minimum = (arr, k) => {\n  let min = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nconst average = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\nconst median = (arr, k) => {\n  arr.sort((a, b) => a - b);\n  if (arr.length % 2 === 0) {\n    return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\n  } else {\n    return arr[Math.floor(arr.length / 2)];\n  }\n};\n\nconst mode = (arr, k) => {\n  let count = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]]) {\n      count[arr[i]]++;\n    } else {\n      count[arr[i]] = 1;\n    }\n  }\n  let max = -Infinity;\n  let mode = null;\n  for (let key in count) {\n    if (count[key] > max) {\n      max = count[key];\n      mode = key;\n    }\n  }\n  return mode;\n};\n\nconst range = (arr, k) => {\n  return maximum(arr, k) - minimum(arr, k);\n};\n\nconst variance = (arr, k) => {\n  let mean = average(arr, k);\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i] - mean, 2);\n  }\n  return sum / arr.length;\n};\n\nconst standardDeviation = (arr, k) => {\n  return Math.sqrt(variance(arr, k));\n};\n\nconst coefficientOfVariation = (arr, k) => {\n  return standardDeviation(arr, k) / average(arr, k);\n};\n\nconst skewness = (arr, k) => {\n  let mean = average(arr,"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 5 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].toString().length <= k) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    arr.push(n);\n  }\n  return arr.filter((x) => x % 2 !== 0);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const dateArr = date.split('-');\n  const month = dateArr[0];\n  const day = dateArr[1];\n  const year = dateArr[2];\n  if (month.length !== 2 || day.length !== 2 || year.length !== 2) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (year < 0 || year > 99) {\n    return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    let arr = [];\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === \" \") {\n        arr.push(\" \");\n      } else {\n        arr.push(String.fromCharCode(96 + (i % 26) + 1));\n      }\n    }\n    return arr;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if (start > end) return \"NO\";\n  const length = end - start + 1;\n  if (length < 2) return \"NO\";\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return \"NO\";\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product > 0 ? 1 : -1;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  const minHeap = new MinPriorityQueue({\n    priority: (path) => path[0],\n  });\n  minHeap.enqueue([grid[0][0], [0, 0], 1]);\n\n  while (!minHeap.isEmpty()) {\n    const [currentValue, currentPos, currentLength] = minHeap.dequeue().element;\n    const [x, y] = currentPos;\n\n    if (currentLength === k) {\n      return currentValue;\n    }\n\n    visited[x][y] = true;\n\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n\n      if (\n        nx >= 0 &&\n        nx < n &&\n        ny >= 0 &&\n        ny < n &&\n        !visited[nx][ny]\n      ) {\n        minHeap.enqueue([\n          currentValue + grid[nx][ny],\n          [nx, ny],\n          currentLength + 1,\n        ]);\n      }\n    }\n  }\n\n  return -1;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 0) return []\n  if (n === 1) return [1]\n  if (n === 2) return [1, 1]\n  let arr = [1, 1]\n  for (let i = 2; i < n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3])\n  }\n  return arr\n}\nconsole.log(tri(3)) // [1, 1, 3]\nconsole.log(tri(4)) // [1, 1, 3, 5]\nconsole.log(tri(5)) // [1, 1, 3, 5, 9]\nconsole.log(tri(6)) // [1, 1, 3, 5, 9, 17]\nconsole.log(tri(7)) // [1, 1, 3, 5, 9, 17, 31]\nconsole.log(tri(8)) // [1, 1, 3, 5, 9, 17, 31, 57]\nconsole.log(tri(9)) // [1, 1, 3, 5, 9, 17, 31, 57, 105]\nconsole.log(tri(10)) // [1, 1, 3, 5, 9, 17, 31, 57, 105, 193]\nconsole.log(tri(11)) // [1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355]\nconsole.log(tri(12)) // [1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 655]\nconsole.log(tri(13)) // [1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 655, 1209]\nconsole.log(tri(14)) // [1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 655, 1209, 2239]\nconsole"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let isOdd = false;\n  const digits = n.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 !== 0) {\n      product *= digits[i];\n      isOdd = true;\n    }\n  }\n  return isOdd ? product : 0;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map((x) => Math.ceil(x * x)).reduce((a, b) => a + b, 0);\n};\n// 2nd solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 3rd solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 4th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 5th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 6th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 7th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 8th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 9th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 10th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 11th solution\nconst sumSquares = (lst) => {\n  return lst.map((x) => Math.pow(Math.ceil(x), 2)).reduce((a, b) => a + b, 0);\n};\n// 12"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) return false;\n  const lastChar = txt[txt.length - 1];\n  return /[a-zA-Z]/.test(lastChar) && !/[a-zA-Z]/.test(txt[txt.length - 2]);\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let n = arr.length;\n  let i = 0;\n  let j = 1;\n  while (j < n) {\n    if (arr[i] >= arr[j]) {\n      i = j;\n      j++;\n    } else {\n      return -1;\n    }\n  }\n  return i;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let smallest = lst.filter((num) => num < 0).sort((a, b) => a - b)[0];\n  let largest = lst.filter((num) => num > 0).sort((a, b) => b - a)[0];\n  return [smallest, largest];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === typeof b) {\n    if (typeof a === \"string\") {\n      a = a.replace(/,/g, \".\");\n      b = b.replace(/,/g, \".\");\n    }\n    return Number(a) === Number(b) ? Number(a) : null;\n  }\n  return null;\n}"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 4) return false;\n  if (n % 2 !== 0) return false;\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) sum += i;\n  }\n  return sum === n;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n};"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s+/g, ' ');\n  let count = 0;\n  for (let i = 0; i < newText.length; i++) {\n    if (newText[i] === ' ') {\n      count++;\n    } else {\n      count = 0;\n    }\n    if (count > 2) {\n      newText = newText.slice(0, i - 2) + newText.slice(i);\n      i -= 2;\n      count = 2;\n    }\n  }\n  return newText;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.(exe|dll)$/;\n  return file_name_regex.test(file_name) ? \"Yes\" : \"No\";\n}"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  let words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [numerator, denominator] = n.split('/');\n  const [xNumerator, xDenominator] = x.split('/');\n  const numeratorProduct = numerator * xNumerator;\n  const denominatorProduct = denominator * xDenominator;\n  return numeratorProduct % denominatorProduct === 0;\n}"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    const sumB = b.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n}"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10) {\n      let firstDigit = Math.floor(num / 10);\n      let lastDigit = num % 10;\n      if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const startIndex = Math.min(index1, index2) + 1;\n  const endIndex = Math.max(index1, index2);\n  return planets.slice(startIndex, endIndex);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n}"}
{"task_id": "JavaScript/150", "generation": "\n  if (typeof n === 'number') {\n    return n ? x : y;\n  }\n  return 'n is not a number';\n}"}
{"task_id": "JavaScript/151", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 !== 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 165\nconsole.log(doubleTheDifference([1, -2, 3, 4, 5, 6, 7, 8, 9, 10])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6])); // 165\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7])); // 165\nconsole.log(doubleTheDifference([1, 2, 3"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((x, i) => (x === guess[i] ? 0 : Math.abs(x - guess[i])));\n}"}
{"task_id": "JavaScript/153", "generation": "\n  let max = 0;\n  let result = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        strength++;\n      }\n    }\n    if (strength > max) {\n      max = strength;\n      result = class_name + '.' + extensions[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length < b.length) return false;\n  let str = a + a;\n  return str.includes(b);\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let digits = 0;\n  while (num > 0) {\n    digits++;\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd, digits];\n}"}
{"task_id": "JavaScript/156", "generation": "\n    let roman = '';\n    let values = [10, 9, 5, 4, 1];\n    let symbols = ['x', 'ix', 'v', 'iv', 'i'];\n    for (let i = 0; i < values.length; i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n            roman += symbols[i];\n        }\n    }\n    return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let max = 0;\n  let result = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\")).size;\n    if (unique > max) {\n      max = unique;\n      result = word;\n    } else if (unique === max) {\n      result = word < result ? word : result;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining < need) {\n    return [remaining, number + 1];\n  } else {\n    return [remaining - need, number + 1];\n  }\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '**':\n        result **= operand[i + 1];\n        break;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split(\"\");\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i].toLowerCase()) {\n      newArr.push(arr[i].toUpperCase());\n    } else if (arr[i] === arr[i].toUpperCase()) {\n      newArr.push(arr[i].toLowerCase());\n    } else {\n      newArr.push(arr[i]);\n    }\n  }\n  if (newArr.length === 0) {\n    return newArr.reverse().join(\"\");\n  } else {\n    return newArr.join(\"\");\n  }\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
