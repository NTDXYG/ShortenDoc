{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n      temp += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      temp += paren_string[i];\n      if (stack.length === 0) {\n        result.push(temp);\n        temp = '';\n      } else {\n        stack.pop();\n        temp = '';\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n    return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if(balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    return numbers.map(num => Math.abs(num - mean)).reduce((acc, val) => acc + val, 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let max_level = 0;\n  let current_level = 0;\n  let levels = [];\n  let chars = Array.from(paren_string);\n\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '(') {\n      current_level++;\n      levels.push(current_level);\n      if (current_level > max_level) {\n        max_level = current_level;\n      }\n    } else if (chars[i] === ')') {\n      current_level--;\n    }\n  }\n\n  return max_level;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return { sum, product };\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  const result = [max];\n\n  for(let i = 1; i < numbers.length; i++) {\n    if(numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.substring(0, i + 1))) {\n      return string.substring(0, i + 1);\n    }\n  }\n};\n\nconst isPalindrome = (string) => {\n  let reversedString = string.split('').reverse().join('');\n  return string === reversedString;\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n\n  return longest;\n}"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}"}
{"task_id": "JavaScript/15", "generation": "\n    let result = '';\n    for(let i = 0; i <= n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  return [...new Set(string)].length;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let note of notes) {\n    switch (note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case '|':\n        beats.push(2);\n        break;\n      case '.':\n        beats.push(1);\n        break;\n      default:\n        break;\n    }\n  }\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = string.indexOf(substring);\n\n  while (position !== -1) {\n    count++;\n    position = string.indexOf(substring, position + 1);\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = numbers.split(' ');\n  const numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n  };\n\n  return nums.sort((a, b) => numDict[a] - numDict[b]).join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  return [numbers[0], numbers[1]];\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const max = Math.max(...numbers);\n  return numbers.map((num) => num / max);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => typeof value === 'number' && !isNaN(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n    for(let i = n / 2; i > 0; i--) {\n        if(n % i === 0) {\n            return i;\n        }\n    }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  let seen = {};\n\n  for (let number of numbers) {\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string.toUpperCase() === string ? string.toLowerCase() : string.toUpperCase();\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  let n = xs.length - 1;\n  let result = [];\n  for (let x = -100; x <= 100; x += 0.01) {\n    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n      sum += xs[i] * Math.pow(x, i);\n    }\n    if (sum === 0) {\n      result.push(x);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.filter(num => num % 3 === 0);\n  const sorted = divisibleByThree.sort((a, b) => a - b);\n  return sorted;\n}"}
{"task_id": "JavaScript/34", "generation": "\n    return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const even = l.filter(num => num % 2 === 0);\n  return l.map(num => (num % 2 === 0) ? even.shift() : num).concat(even);\n}"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    result += s[i + 1] + s[i + 2] + s[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let i = 2;\n  while (i < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n - 1];\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};\n\nconst primeFib = (n) => {\n  let fib = [0, 1];\n  let i = 2;\n  while (i < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return isPrime(fib[n - 1]) ? fib[n - 1] : null;\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length - 2; i++) {\n        if (l[i] + l[i + 1] + l[i + 2] === 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  // The number of collisions is equal to the number of pairs of cars\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  let newList = [];\n  for(let i = 0; i < l.length; i++) {\n    if(i % 2 === 0) {\n      newList.push(l[i] + 1);\n    } else {\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n}"}
{"task_id": "JavaScript/43", "generation": "\n  let nums = new Set();\n  for (let num of l) {\n    if (nums.has(-num)) {\n      return true;\n    }\n    nums.add(num);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  if (x < base) {\n    return String(x);\n  } else {\n    return changeBase(Math.floor(x / base), base) + String(x % base);\n  }\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 0;\n  } else if (n === 3) {\n    return 2;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    let mid = Math.floor(l.length / 2);\n\n    if (l.length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) {\n    return 1;\n  }\n  if (n < 0) {\n    return modp(n + 2 * p, p);\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p);\n  }\n  return n % p;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      let ascii = s[i].charCodeAt(0);\n      if (ascii >= 65 && ascii <= 90) {\n        decoded += String.fromCharCode((ascii - 65 + 26) % 26 + 65);\n      } else if (ascii >= 97 && ascii <= 122) {\n        decoded += String.fromCharCode((ascii - 97 + 26) % 26 + 97);\n      }\n    } else {\n      decoded += s[i];\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.filter(num => num < t);\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let c of s0) {\n    map.set(c, (map.get(c) || 0) + 1);\n  }\n  for (let c of s1) {\n    if (!map.get(c) || map.get(c) === 0) {\n      return false;\n    }\n    map.set(c, map.get(c) - 1);\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  const bracketPairs = {\n    \"<\": \">\",\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\",\n  };\n\n  const openBrackets = [\"<\", \"(\", \"{\", \"[\"];\n  const stack = [];\n\n  for (let bracket of brackets) {\n    if (openBrackets.includes(bracket)) {\n      stack.push(bracket);\n    } else {\n      if (bracketPairs[stack.pop()] !== bracket) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] >= l[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  let commonElements = [];\n  for(let i = 0; i < l1.length; i++){\n    for(let j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        commonElements.push(l1[i]);\n      }\n    }\n  }\n  return commonElements;\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 == 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i == 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) {\n    maxPrime = n;\n  }\n  return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(\")\");\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  let a = 0;\n  let b = 1;\n  let c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  let str = x.toString();\n  let len = str.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    let newChar = str[(i + shift) % len];\n    result += newChar;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[0-9]/)) {\n      sum += parseInt(s[i]);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.split(' ').map(Number)\n  return n - (apples + oranges)\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestIndex = Infinity;\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEven && arr[i] % 2 === 0) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallestEven === Infinity) return [];\n  result.push(smallestEven, smallestIndex);\n  return result;\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let freq = {};\n  let max = {value: 0, freq: 0};\n\n  for(let i = 0; i < lst.length; i++) {\n    if(freq[lst[i]]){\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n\n  for(let key in freq){\n    if(freq[key] > max.freq && key > max.value){\n      max.value = key;\n      max.freq = freq[key];\n    }\n  }\n\n  return max.value ? max.value : 1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.pop());\n    if (lst.length) result.push(lst.shift());\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  return lst1.filter(str => {\n    return lst2.reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0) < str.length;\n  });\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const primes = [2, 3, 5];\n  let product = 1;\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      product *= primes[i];\n    }\n  }\n  return product === a;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) return false;\n  for (let i = 2; i <= n; i++) {\n    if (Math.pow(i, n) === x) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let cube = Math.cbrt(a);\n    return cube === Math.floor(cube);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15,\n  };\n  const primes = [2, 3, 5, 7, 11, 13, 17];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(hex[num[i]])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  return decimal.toString(2);\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 2) return false;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === s[i + 1]) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    const letterGrades = {\n        'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n        'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n        'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n        'D+': 1.3, 'D': 1.0, 'D-': 0.7,\n        'F': 0.0\n    };\n\n    return grades.map(grade => {\n        for (let letter in letterGrades) {\n            if (grade === letterGrades[letter]) {\n                return letter;\n            }\n        }\n    });\n};"}
{"task_id": "JavaScript/82", "generation": "\n    if (string.length % 2 === 0) {\n        return false;\n    }\n    for (let i = 2, sqrt = Math.sqrt(string.length); i <= sqrt; i++) {\n        if (string.length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString().startsWith('1') || i.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  return binary;\n}"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\n  return sortedWords.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  const sortedArray = [...array];\n  sortedArray.sort((a, b) => {\n    if ((a + b) % 2 === 0) {\n      return b - a;\n    }\n    return a - b;\n  });\n  return sortedArray;\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      encrypted += String.fromCharCode((charCode - 65 + 2 * 2) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      encrypted += String.fromCharCode((charCode - 97 + 2 * 2) % 26 + 97);\n    } else {\n      encrypted += s.charAt(i);\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) {\n        return null;\n    }\n    let smallest = Math.min(...lst);\n    lst.splice(lst.indexOf(smallest), 1);\n    if (lst.length < 1) {\n        return null;\n    }\n    return Math.min(...lst);\n}\n\nconst nextEst = (lst) => {\n    if (lst.length < 2) {\n        return null;\n    }\n    let smallest = Math.min(...lst);\n    lst.splice(lst.indexOf(smallest), 1);\n    if (lst.length < 1) {\n        return null;\n    }\n    return Math.max(...lst);\n}"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I' || words[i] === 'i') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  return (x === y + z) || (y === x + z) || (z === x + y);\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      if (message[i] === 'a' || message[i] === 'A') {\n        encodedMessage += 'c';\n      } else if (message[i] === 'e' || message[i] === 'E') {\n        encodedMessage += 'g';\n      } else if (message[i] === 'i' || message[i] === 'I') {\n        encodedMessage += 'k';\n      } else if (message[i] === 'o' || message[i] === 'O') {\n        encodedMessage += 'q';\n      } else if (message[i] === 'u' || message[i] === 'U') {\n        encodedMessage += 'w';\n      } else {\n        encodedMessage += message[i];\n      }\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let max = -Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    let num = lst[i];\n    while (num) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n}\nconsole.log(skjkasdkd([0,3,2,1,35,4,5,5,5,2,18132,4,3]))"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return true;\n  }\n\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] !== keys[i].toLowerCase() || keys[i] !== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let product = a * b;\n  let productString = product.toString();\n  let unitDigits = productString.split('').map(Number).filter(n => n !== 0);\n  return unitDigits.reduce((a, b) => a * b, 1);\n}"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * (i + 1));\n    } else {\n      stones.push(2 * (i + 1) - 1);\n    }\n  }\n  return stones;\n};"}
{"task_id": "JavaScript/101", "generation": "\n    return s.split(/, |,| /);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const avg = Math.round((n + m) / 2);\n  return avg.toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  const arr = x.toString().split('').map(Number);\n  const unique = [...new Set(arr)];\n  const even = unique.filter(num => num % 2 === 0);\n  return even.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const map = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine',\n  };\n  return arr.map((num) => map[num] || '');\n};\n\nconst reverseAndReplace = (arr) => {\n  const reversed = arr.slice().reverse();\n  return reversed.map(byLength);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(1, i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n};\n\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = a; i <= b; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str[0] === str[str.length - 1]) {\n      if (str.length % 2 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for(let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if(num < 0) {\n      num = -num;\n    }\n    let sum = num.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    if(sum === 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  let sorted = [...arr].sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== sorted[i]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let evenLst1 = lst1.filter(num => num % 2 === 0);\n  let evenLst2 = lst2.filter(num => num % 2 === 0);\n\n  if (evenLst1.length > evenLst2.length) {\n    return \"YES\";\n  } else if (evenLst1.length < evenLst2.length) {\n    return \"NO\";\n  } else {\n    for (let i = 0; i < evenLst1.length; i++) {\n      if (evenLst1[i] > evenLst2[i]) {\n        return \"YES\";\n      } else if (evenLst1[i] < evenLst2[i]) {\n        return \"NO\";\n      }\n    }\n    return \"YES\";\n  }\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let words = test.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (result[words[i]]) {\n      result[words[i]]++;\n    } else {\n      result[words[i]] = 1;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let newStr = s.split('').filter(el => el !== c).reverse().join('');\n  return [newStr, s === newStr];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  let result = [];\n  lst.forEach((str) => {\n    let count = (str.match(/[13579]/g) || []).length;\n    let newStr = str.replace(/[24680]/g, '');\n    result.push(`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}put.`);\n  });\n  return result;\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for(let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 0) {\n        count++;\n      }\n    }\n  }\n  return Math.ceil(count / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  // sort the array in ascending order\n  arr.sort((a, b) => a - b);\n\n  // create a new array with the ones in their binary order\n  const ones = arr.map(num => num.toString(2).replace(/0/g, '').length);\n\n  // sort the new array in ascending order\n  ones.sort((a, b) => a - b);\n\n  // create a new array with the ones in their binary order\n  const sortedArr = arr.map(num => num.toString(2).replace(/0/g, '').length === ones[ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones.indexOf(ones"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) count++;\n    }\n    if (count === n) result.push(word);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let lastVowel = '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i].toLowerCase())) {\n      lastVowel = word[i];\n      if (i < word.length - 1) {\n        return lastVowel;\n      }\n    }\n  }\n  return lastVowel;\n};\n\nconst getClosestOwel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let lastVowel = '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i].toLowerCase())) {\n      lastVowel = word[i];\n      if (i < word.length - 1) {\n        return lastVowel;\n      }\n    }\n  }\n  return lastVowel;\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let s = lst.join('');\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length !== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  let result = [];\n  let maxHeap = new MaxHeap();\n\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n    if (maxHeap.size() > k) {\n      maxHeap.extractMax();\n    }\n  }\n\n  while (!maxHeap.isEmpty()) {\n    result.push(maxHeap.extractMax());\n  }\n\n  return result;\n};\n\nclass MaxHeap {\n  constructor() {\n    this.heap = [];\n  }\n\n  parent(i) {\n    return Math.floor((i - 1) / 2);\n  }\n\n  leftChild(i) {\n    return 2 * i + 1;\n  }\n\n  rightChild(i) {\n    return 2 * i + 2;\n  }\n\n  swap(i, j) {\n    let temp = this.heap[i];\n    this.heap[i] = this.heap[j];\n    this.heap[j] = temp;\n  }\n\n  insert(value) {\n    this.heap.push(value);\n    this.siftUp(this.heap.length - 1);\n  }\n\n  siftUp(i) {\n    while (i > 0 && this.heap[this.parent(i)] < this.heap[i]) {\n      this.swap(this.parent(i), i);\n      i = this.parent(i);\n    }\n  }\n\n  extractMax() {\n    if (this.heap.length === 1) {\n      return this.heap.pop();\n    }\n    let max = this.heap[0];\n    this.heap[0] = this.heap.pop();\n    this.siftDown(0);\n    return max;\n  }\n\n  siftDown(i) {\n    while (this.leftChild(i) < this.heap.length) {\n      let maxIndex = this.leftChild(i);\n      if (this.rightChild(i) < this.heap"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  const collatzSequence = [n];\n  let current = n;\n\n  while (current !== 1) {\n    if (current % 2 === 0) {\n      current = current / 2;\n    } else {\n      current = 3 * current + 1;\n    }\n    collatzSequence.push(current);\n  }\n\n  return collatzSequence.filter((num, index) => num % 2 !== 0 && index % 2 !== 0);\n};"}
{"task_id": "JavaScript/124", "generation": "\n    const [month, day, year] = date.split('-').map(n => parseInt(n));\n    if (year < 1 || year > 9999) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2) {\n        if (day > 29) return false;\n    } else if ([4, 6, 9, 11].includes(month) && day > 30) return false;\n    if (day > 31) return false;\n    return true;\n}"}
{"task_id": "JavaScript/125", "generation": "\n    return txt.split(/\\s+|,/);\n}"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return \"NO\";\n    }\n\n    let intersectionLength = end - start;\n    let isPrime = intersectionLength > 1 && [...Array(intersectionLength).keys()].every(num => intersectionLength % num !== 0);\n\n    return isPrime ? \"YES\" : \"NO\";\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return None;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= Math.abs(arr[i]);\n  }\n  return product;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const visited = Array(n).fill(0).map(() => Array(n).fill(false));\n  const dir = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const path = [];\n  const dfs = (x, y, k) => {\n    if (k === 0) {\n      path.push(grid[x][y]);\n      return;\n    }\n    for (let i = 0; i < 4; i++) {\n      const nx = x + dir[i][0], ny = y + dir[i][1];\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        visited[nx][ny] = true;\n        dfs(nx, ny, k - 1);\n        visited[nx][ny] = false;\n      }\n    }\n  };\n  let minPath = Infinity;\n  let minList = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      visited[i][j] = true;\n      dfs(i, j, k - 1);\n      visited[i][j] = false;\n      if (path.length < minPath) {\n        minPath = path.length;\n        minList = [...path];\n      }\n      path.pop();\n    }\n  }\n  return minList;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [1, 1];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1];\n  if (n > 2) {\n    for (let i = 2; i < n; i++) {\n      if (i % 2 === 0) {\n        result.push(1);\n      } else {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(Math.round(num), 2);\n  });\n  return sum;\n};"}
{"task_id": "JavaScript/134", "generation": "\n  return /[a-zA-Z]$/.test(txt);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  const sortedArr = arr.sort((a, b) => a - b);\n  let i = 0;\n  while (i < sortedArr.length) {\n    if (sortedArr[i] !== sortedArr[i + 1]) {\n      i++;\n    } else {\n      return sortedArr[i];\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let smallest = [None, None];\n  let largest = [None, None];\n\n  for (let i = 0; i < lst.length; i++) {\n    const [num, sign] = lst[i];\n\n    if (num !== null && sign !== null) {\n      if (smallest[0] === None || num < smallest[0]) {\n        smallest[0] = num;\n        smallest[1] = sign;\n      }\n\n      if (largest[0] === None || num > largest[0]) {\n        largest[0] = num;\n        largest[1] = sign;\n      }\n    }\n  }\n\n  return largest;\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === typeof b) {\n    return a === b;\n  } else {\n    return null;\n  }\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 0) {\n    return false;\n  }\n  if (n === 0) {\n    return true;\n  }\n  if (n % 2 !== 0) {\n    return false;\n  }\n  for (let i = 1; i <= n / 2; i++) {\n    if (isEqualToSumEven(n - i) === true) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s+/g, ' ').replace(/\\s{2,}/g, ' ');\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z]+[a-zA-Z0-9]*\\.(exe|dll)$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && lst[i] % 4 === 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeNumbers = [];\n  const primeWords = [];\n\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      primeNumbers.push(words[i].length);\n      primeWords.push(words[i]);\n    }\n  }\n\n  return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const xFraction = new Fraction(x);\n  const nFraction = new Fraction(n);\n\n  if (xFraction.numerator == nFraction.numerator * xFraction.denominator && xFraction.denominator == nFraction.denominator) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nclass Fraction {\n  constructor(string) {\n    const [numerator, denominator] = string.split(\"/\");\n    this.numerator = Number(numerator);\n    this.denominator = Number(denominator);\n  }\n}"}
{"task_id": "JavaScript/145", "generation": "\n  if (nums.length === 0) return [];\n  return nums.sort((a, b) => {\n    const aDigits = String(a).split('').reduce((acc, val) => acc + Number(val), 0);\n    const bDigits = String(b).split('').reduce((acc, val) => acc + Number(val), 0);\n    if (aDigits === bDigits) return a - b;\n    return aDigits - bDigits;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    let str = nums[i].toString();\n    if (str[0] % 2 !== 0 && str[str.length - 1] % 2 !== 0) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i - j + j - k) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return (\"Invalid planet name\");\n  }\n\n  if (index1 > index2) {\n    planets.splice(index2 + 1, index1 - index2 - 1);\n  } else {\n    planets.splice(index1 + 1, index2 - index1 - 1);\n  }\n\n  return planets;\n};"}
{"task_id": "JavaScript/149", "generation": "\n  const oddWords = lst.filter(word => word.length % 2 !== 0);\n  const sortedOddWords = oddWords.sort((a, b) => a.length - b.length || a.localeCompare(b));\n  return sortedOddWords;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (typeof n !== 'number' || typeof x !== 'number' || typeof y !== 'number') {\n    return 'Invalid input';\n  }\n  return n === x || n === y ? x : y;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else if (game[i] !== undefined && guess[i] !== undefined) {\n      result.push(Math.abs(game[i] - guess[i]));\n    } else {\n      result.push(Math.abs(game[i]));\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let maxStrength = 0;\n  let strongestExt = '';\n\n  extensions.forEach(ext => {\n    let SM = ext.split('').filter(char => char === char.toUpperCase()).length;\n    let strength = SM;\n\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExt = ext;\n    }\n  });\n\n  return class_name + strongestExt;\n};"}
{"task_id": "JavaScript/154", "generation": "\n    if (a.length !== b.length) return false;\n    let doubleA = a + a;\n    return doubleA.includes(b);\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 == 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return (evenCount, oddCount);\n}"}
{"task_id": "JavaScript/156", "generation": "\n    const miniRoman = [\n        {value: 1000, symbol: 'm'},\n        {value: 900, symbol: 'cm'},\n        {value: 500, symbol: 'd'},\n        {value: 400, symbol: 'cd'},\n        {value: 100, symbol: 'c'},\n        {value: 90, symbol: 'xc'},\n        {value: 50, symbol: 'l'},\n        {value: 40, symbol: 'xl'},\n        {value: 10, symbol: 'x'},\n        {value: 9, symbol: 'ix'},\n        {value: 5, symbol: 'v'},\n        {value: 4, symbol: 'iv'},\n        {value: 1, symbol: 'i'}\n    ];\n\n    let result = '';\n\n    for(let i = 0; i < miniRoman.length; i++) {\n        while(number >= miniRoman[i].value) {\n            result += miniRoman[i].symbol;\n            number -= miniRoman[i].value;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let wordCount = {};\n  let maxCount = 0;\n  let maxWords = [];\n\n  words.forEach((word) => {\n    wordCount[word.toLowerCase()] = (wordCount[word.toLowerCase()] || 0) + 1;\n    if (wordCount[word.toLowerCase()] > maxCount) {\n      maxCount = wordCount[word.toLowerCase()];\n      maxWords = [word];\n    } else if (wordCount[word.toLowerCase()] === maxCount) {\n      maxWords.push(word);\n    }\n  });\n\n  return maxWords.sort();\n};"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining >= need) {\n    return number - need;\n  } else {\n    return 0;\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '/':\n        result /= operand[i];\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};"}
{"task_id": "JavaScript/163", "generation": "\n  if (a > b) {\n    return [];\n  }\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
