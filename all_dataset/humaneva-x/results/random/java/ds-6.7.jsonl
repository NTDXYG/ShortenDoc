{"task_id": "Java/0", "generation": "\n        for (Double number : numbers) {\n            if (number < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int start = 0;\n        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(paren_string.substring(start, i + 1));\n                    start = i + 1;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        double dec = number - (int)number;\n        return dec;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double absDevSum = 0.0;\n        for (Double number : numbers) {\n            absDevSum += Math.abs(number - mean);\n        }\n        return absDevSum / numbers.size();\n    }\n}\n\n// This solution is not correct. It has a syntax error. The correct solution is:\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, Mean Absolute Deviation (MAD) is the difference between each\n    element and a centerpoint mean in this case\n   | x - x_ |\n    >>> mean_absoluteiation([.0, 2.0, 3.0, 4.0, 1.0])\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double absDevSum = 0.0;\n        for (Double number : numbers) {\n            absDevSum += Math.abs(number - mean);\n        }\n        return absDevSum / numbers.size();\n    }\n}\n\n// This solution is not correct. It has a syntax error. The correct solution is:\n\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, Mean Absolute Deviation (MAD) is the difference between each\n    element and a centerpoint mean in this case\n   | x - x_ |\n    >>> mean_absoluteiation([.0, 2.0, 3.0, 4.0, 1.0])\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double absDevSum = 0.0;\n        for"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n\n        for (int i = 0; i < maxDepth; i++) {\n            result.add(i, 0);\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product.\n// 4. Return the list of sum and product.\n\n// 1. Create a new list to store the sum and product.\n// 2. Loop through the input list.\n// 3. For each number in the list, add it to the sum and multiply it with the product"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        if (isPalindrome(string)) {\n            return \"\";\n        }\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                return string.substring(0, i);\n            }\n        }\n        return string;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        return strings.stream()\n                .max(Comparator.comparing(String::length));\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 2; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            distinctCharacters.add(string.charAt(i));\n        }\n        return distinctCharacters.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \"o.\":\n                    result.add(1);\n                    break;\n                case \"o||\":\n                    result.add(2);\n                    break;\n                case \"o|||\":\n                    result.add(3);\n                    break;\n                case \"o||||\":\n                    result.add(4);\n                    break;\n                default:\n                    result.add(0);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        if (substring.length() == 0) {\n            return 1;\n        }\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/19", "generation": "\n        String[] words = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return wordsToNumber(o1).compareTo(wordsToNumber(o2));\n            }\n\n            private Integer wordsToNumber(String word) {\n                for (int i = 0; i < words.length; i++) {\n                    if (words[i].equals(word)) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n        });\n        return String.join(\" \", numbersArray);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestNumbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestNumbers.clear();\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            }\n        }\n        return closestNumbers;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((max - num) / max);\n        }\n        return rescaled;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the sum of the two smallest elements in the list.\n    If the list has less than two elements, return 0.\n    >>>sum_two_smallest([19, 5, 42, 2, 77])\n    7\n    */\n    public int sumTwoSmallest(List<Integer> numbers) {\n        if (numbers.size() < 2) {\n            return 0;\n        }\n        Collections.sort(numbers);\n        return numbers.get(0) + numbers.get(1);\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the sum of the two largest elements in the list.\n    If the list has less than two elements, return 0.\n    >>>sum_two_largest([19, 5, 42, 2, 77])\n    74\n    */\n    public int sumTwoLargest(List<Integer> numbers) {\n        if (numbers.size() < 2) {\n            return 0;\n        }\n        Collections.sort(numbers, Collections.reverseOrder());\n        return numbers.get(0) + numbers.get(1);\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the difference between the largest and smallest elements in the list.\n    If the list has less than one element, return 0.\n    >>>diff_max_min([19, 5, 42, 2, 77])\n    72\n    */\n    public int diffMaxMin(List<Integer> numbers) {\n        if (numbers.size() < 1) {"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        if (n < 1) {\n            return -1;\n        }\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Long> counts = numbers.stream()\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n        return numbers.stream()\n                .filter(n -> counts.get(n) == 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        double left = -10000, right = 10000;\n        while (right - left > 1e-6) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) > 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            } else {\n                temp.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        Collections.sort(temp);\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, result.get(j++));\n            } else {\n                l.set(i, temp.get(j++));\n            }\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && Integer.toString(i).contains(\"7\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> evenValues = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(i);\n                evenValues.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenValues);\n\n        for (int i = 0; i < evenIndices.size(); i++) {\n            l.set(evenIndices.get(i), evenValues.get(i));\n        }\n\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // un-cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        if (n <= 0) {\n            return 0;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 2;\n        int primeCount = 1;\n        int i = 2;\n        while (primeCount < n) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n            if (isPrime(fib[i])) {\n                primeCount++;\n            }\n            i++;\n        }\n        return fib[n - 1];\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n            int j = i + 1;\n            int k = l.size() - 1;\n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum < 0) {\n                    j++;\n                } else if (sum > 0) {\n                    k--;\n                } else {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // code here\n        return n*(n-1)/2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        return Integer.toString(x, base);\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return (a * h) / 2;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 4;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2) + (double) l.get(size / 2 - 1)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public boolean isRome(String text) {\n        int count = 1;\n        for (int i = 1; i < text.length(); i++) {\n            if (text.charAt(i) == text.charAt(0)) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        if (count == text.length()) {\n            return true;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/49", "generation": "\n        if (n < 0) {\n            return modp(-n, p) == 0 ? 0 : p - modp(-n, p);\n        }\n        if (n < p) {\n            return n;\n        }\n        return modp(n - p, p);\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiou]\", \"\");\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}\n\n"}
{"task_id": "Java/54", "generation": "\n        int[] count = new int[26];\n        for (char c : s0.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (char c : s1.toCharArray()) {\n            count[c - 'a']--;\n        }\n        for (int i : count) {\n            if (i != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/55", "generation": "\n        if(n <= 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else if (!stack.isEmpty() && stack.peek() == '<') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n}\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n// where n is the size of the list.\n// This solution is based on the fact that a list is monotonically increasing if and only if it is non-decreasing or non-increasing.\n// We check both conditions and return true if either condition is true. If both conditions are false, it means the list is not monotonically increasing or decreasing, so we return false.\n// The space complexity is constant because we only use a few extra variables and do not use any data structures that grow with the input size.\n// The time complexity is linear because we go through the list exactly once.\n// This solution assumes that the input list is not empty. If the list can be empty, you should add a special case to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers. If the list can contain other types of elements, you should add a check to handle this.\n// This solution assumes that the input list contains only integers."}
{"task_id": "Java/58", "generation": "\n        List<Integer> common = new ArrayList<>();\n        for (Integer i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n                l2.remove(i);\n            }\n        }\n        return common;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int maxPrime = -1;\n\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n\n        if (n > 2) {\n            maxPrime = n;\n        }\n\n        return maxPrime;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        return fibfib[n];\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiou\";\n\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(Character.toString(s.charAt(i)))) {\n                count++;\n            }\n        }\n\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int len = str.length();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            int pos = (i + shift) % len;\n            sb.append(str.charAt(pos));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isDigit(s.charAt(i))) {\n                sum += Integer.parseInt(String.valueOf(s.charAt(i)));\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] split = s.split(\" \");\n        int apples = Integer.parseInt(split[2]);\n        int oranges = Integer.parseInt(split[4]);\n        int totalFruits = Integer.parseInt(split[6]);\n        int mangoes = totalFruits - (apples + oranges);\n        return mangoes;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        if(arr.size() == 0) return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) < min && arr.get(i) % 2 == 0) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if(index == -1) return new ArrayList<>();\n        return Arrays.asList(min, index);\n    }\n}\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n// where n is the length of the array.\n// This solution is based on the idea of iterating over the array and checking each element if it is even and smaller than the current smallest even number. If it is, we update the smallest even number and its index. If no even number is found, we return an empty list.\n// The time complexity is O(n) because we are iterating over the array once. The space complexity is O(1) because we are using a constant amount of space to store the smallest even number and its index.\n// The solution is correct because it correctly identifies the smallest even number in the array and its index.\n// The solution is efficient because it uses a single pass over the array to find the smallest even number.\n// The solution is adaptable because it can be used with any array of integers, not just the ones in the examples.\n// The solution is robust because it handles the case where the array is empty and returns an empty list in that case.\n// The solution is user-friendly because it returns the smallest even number and its index in a list.\n// The solution is versatile because it can handle arrays of any length and any integer values.\n// The solution is scalable because it can handle arrays of any size, as long as they are within the constraints of the problem.\n// The solution is reliable because it correctly identifies the smallest even number in the array and its index.\n// The solution is maintainable because it is easy to understand and modify.\n// The solution is testable because it can be tested with different inputs to ensure it works as expected.\n// The solution is versatile because it can handle arrays of any length and any integer values."}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > max && entry.getValue() > entry.getKey()) {\n                max = entry.getKey();\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        Collections.sort(lst);\n        while (lst.size() > 0) {\n            result.add(lst.get(0));\n            lst.remove(0);\n            if (lst.size() > 0) {\n                result.add(lst.get(lst.size() - 1));\n                lst.remove(lst.size() - 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    \n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 10) {\n            return false;\n        }\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n        for (int prime1 : primes) {\n            if (a % prime1 == 0) {\n                for (int prime2 : primes) {\n                    if (a % (prime1 * prime2) == 0) {\n                        for (int prime3 : primes) {\n                            if (a == prime1 * prime2 * prime3) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n > x || n <= 0) {\n            return false;\n        }\n        while (x % n == 0) {\n            x /= n;\n        }\n        return x == 1;\n    }\n\n    \n}"}
{"task_id": "Java/77", "generation": "\n        int n = (int) Math.round(Math.cbrt(a));\n        return n * n * n == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        String hex = \"357BCDF\";\n        for (int i = 0; i < num.length(); i++) {\n            if (hex.contains(String.valueOf(num.charAt(i)))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/79", "generation": "\n        return Integer.toBinaryString(decimal);\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 2) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 40) {\n                if (grade >= 80) {\n                    result.add(\"A\");\n                } else if (grade >= 70) {\n                    result.add(\"B+\");\n                } else if (grade >= 60) {\n                    result.add(\"B-\");\n                } else if (grade >= 50) {\n                    result.add(\"C+\");\n                } else if (grade >= 40) {\n                    result.add(\"C\");\n                } else {\n                    result.add(\"E\");\n                }\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1 || i / 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        return Integer.toBinaryString(N);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (String word : words) {\n            sb.append(antiShuffleWord(word)).append(\" \");\n        }\n\n        return sb.toString().trim();\n    }\n\n    private String antiShuffleWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    \n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> indices = new ArrayList<>();\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    indices.add(j);\n                }\n            }\n            indices.sort(Integer::compareTo);\n            result.add(indices);\n        }\n        return result;\n    }\n}\n\n// Time complexity: O(n*m*log(m)) where n is the number of rows and m is the number of columns in the matrix.\n// Space complexity: O(n*m) as we are storing the indices of the elements in the result list.\n\n// This solution assumes that the input list is a 2D list of integers and the integer x is an integer.\n// It returns a list of lists where each inner list contains the indices of the occurrences of the integer x in the corresponding row of the input list.\n// The indices are sorted in ascending order.\n// If the integer x does not occur in a row, an empty list is returned for that row.\n// If the input list is empty, an empty list is returned.\n// If the input list contains empty rows, an empty list is returned for those rows.\n// If the integer x is not in a row, an empty list is returned for that row.\n// If the integer x is in multiple rows, the indices are sorted in ascending order and returned in the order of the rows.\n// If the integer x is in a row multiple times, the indices are returned in the order they occur in the row.\n// If the integer x is in the first column of a row, the index is 0.\n// If the integer x is in the last column of a row, the index is the number of columns in the row minus 1.\n// If the integer x is in the middle of a row, the index is the position of x in the row.\n// If the integer x is in the first row and the first column, the index is (0, 0).\n// If the integer x is in the last row and"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        List<Integer> sortedArray = new ArrayList<>(array);\n        Collections.sort(sortedArray);\n        if (sum % 2 == 0) {\n            Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n\n// 1. Check if the array is empty, if so return the array.\n// 2. Get the first and last elements of the array.\n// 3. Calculate the sum of the first and last elements.\n// 4. Create a copy of the given array and sort it in ascending order.\n// 5. If the sum of the first and last elements is even, reverse the sorted array.\n// 6. Return the sorted array.\n// 7. If the sum of the first and last elements is odd, return the sorted array as is.\n// 8. Return the sorted array.\n// 9. If the array is empty, return the array.\n// 10. Get the first and last elements of the array.\n// 11. Calculate the sum of the first and last elements.\n// 12. If the sum of the first and last elements is even, reverse the sorted array.\n// 13. Return the sorted array.\n// 14. If the sum of the first and last elements is odd, return the sorted array as is.\n// 15. Return the sorted array.\n// 16. If the array is empty, return the array.\n// 17. Get the first and last elements of the array.\n// 18. Calculate the sum of the first and last elements.\n// 19. If the sum of the first and last elements is even, reverse the sorted array.\n// 20. Return the sorted array.\n// 21. If the sum of the first and last elements is odd, return the sorted array as is.\n// 22. Return the sorted array.\n// 23. If the array is empty, return the array.\n// "}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    encrypted.append((char) ('a' + (c - 'a' + 2) % 26));\n                } else {\n                    encrypted.append((char) ('A' + (c - 'A' + 2) % 26));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int smallest = Integer.MAX_VALUE;\n        int nextSmallest = Integer.MAX_VALUE;\n        for (int num : lst) {\n            if (num < smallest) {\n                nextSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < nextSmallest) {\n                nextSmallest = num;\n            }\n        }\n        return nextSmallest == Integer.MAX_VALUE ? Optional.empty() : Optional.of(nextSmallest);\n    }\n}\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n\n// Test cases:\n// nextSmallest([]) -> None\n// nextSmallest([5, 1, 4, 3, 2, 2]) -> 2\n// nextSmallest([, 1]) -> None\n// nextSmallest([5, 5, 5, 5, 5]) -> None\n// nextSmallest([1, 2, 3, 4, 5]) -> 2\n// nextSmallest([5, 5, 5, 1, 5]) -> 1\n// nextSmallest([1, 1, 2, 2, 3, 3]) -> 2\n// nextSmallest([1, 2, 3, 4, 5, 6]) -> 2\n// nextSmallest([1, 2, 3, 4, 5, 6, 7]) -> 2\n// nextSmallest([7, 6, 5, 4, 3, 2, 1]) -> 2\n// nextSmallest([1, 2, 3, 4, 5, 6, 7, 8]) -> 2\n// nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 2\n// nextSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> 2\n// nextSmallest([1, 1, 1,"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"\\\\.\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.toLowerCase(c) == 'a') {\n                    encodedMessage.append('c');\n                } else if (Character.toLowerCase(c) == 'e') {\n                    encodedMessage.append('g');\n                } else if (Character.toLowerCase(c) == 'i') {\n                    encodedMessage.append('k');\n                } else if (Character.toLowerCase(c) == 'o') {\n                    encodedMessage.append('q');\n                } else if (Character.toLowerCase(c) == 'u') {\n                    encodedMessage.append('w');\n                } else if (Character.toLowerCase(c) == 'c') {\n                    encodedMessage.append('e');\n                } else if (Character.toLowerCase(c) == 'g') {\n                    encodedMessage.append('i');\n                } else if (Character.toLowerCase(c) == 'k') {\n                    encodedMessage.append('o');\n                } else if (Character.toLowerCase(c) == 'q') {\n                    encodedMessage.append('u');\n                } else if (Character.toLowerCase(c) == 'w') {\n                    encodedMessage.append('a');\n                } else {\n                    encodedMessage.append(c);\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int max = Integer.MIN_VALUE;\n        for (int num : lst) {\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Java/95", "generation": "\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey().toString().equals(entry.getKey().toString().toUpperCase()) && entry.getValue().toString().equals(entry.getValue().toString().toLowerCase()))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = 1;\n        int[] digitsA = getDigits(a);\n        int[] digitsB = getDigits(b);\n\n        for (int i = 0; i < digitsA.length; i++) {\n            for (int j = 0; j < digitsB.length; j++) {\n                product *= digitsA[i] * digitsB[j];\n            }\n        }\n\n        return product;\n    }\n\n    private int[] getDigits(int number) {\n        if (number < 0) {\n            number = -number;\n        }\n\n        int numOfDigits = (int) Math.log10(number) + 1;\n        int[] digits = new int[numOfDigits];\n\n        for (int i = 0; i < numOfDigits; i++) {\n            digits[i] = number % 10;\n            number /= 10;\n        }\n\n        return digits;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'E' || c == 'U')) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (char c : value.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int stones = 3;\n        result.add(stones);\n        for (int i = 1; i < n; i++) {\n            if (i % 2 == 0) {\n                stones += 2;\n            } else {\n                stones += 2;\n            }\n            result.add(stones);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        String[] words = s.replaceAll(\"[\\\\[\\\\]\\\\s]\", \"\").split(\"\\\\W+\");\n        return Arrays.asList(words);\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return 1;\n        } else {\n            return x + (int) (Math.random() * (y - x + 1));\n        }\n    }\n\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.ceil((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : x) {\n            while (num > 0) {\n                set.add(num % 10);\n                num /= 10;\n            }\n        }\n        return new ArrayList<>(set);\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                temp.add(num);\n            }\n        }\n        Collections.sort(temp, Collections.reverseOrder());\n        for (Integer num : temp) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n// Time complexity: O(n log n) because of the sorting operation\n// Space complexity: O(n) because of the additional list temp and result\n\n// The function byLength takes a list of integers as input and returns a list of strings. It first filters out the integers that are not between 1 and 9, then sorts the remaining integers in descending order. It then converts each integer to its corresponding word and adds it to the result list. If the input list is empty, the function returns an empty list.\n\n// The function uses a switch statement to map each integer to its corresponding word. The switch statement is used instead of an if-else ladder for readability and performance. The switch statement is faster than an if-else ladder because it avoids the overhead of function calls and jumps to the appropriate case.\n\n// The function uses a list to store the result because it allows for efficient insertion and retrieval of elements. The function also uses a list to store the temporary integers because it allows for efficient sorting and reversing of the integers.\n\n// The function uses the Col"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i % 2 == 0 ? factorial(i) : sum(i));\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sum(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        int n = arr.size();\n        int count = 0;\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count++;\n            }\n        }\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n        return count <= 1;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int oddCount1 = 0;\n        int oddCount2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount2++;\n            }\n        }\n\n        if (oddCount1 == 0 || oddCount2 == 0) {\n            return \"YES\";\n        } else if (oddCount1 % 2 == 0 && oddCount2 % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < s.length(); i++) {\n            if (c.contains(String.valueOf(s.charAt(i)))) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        String result = sb.toString();\n        boolean isPalindrome = result.equals(new StringBuilder(result).reverse().toString());\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 != 0) {\n                    count++;\n                }\n            }\n            String newS = s.replaceAll(\"\\\\d\", \"\");\n            newS = newS.replaceAll(\"[^a-zA-Z]\", \" \");\n            newS = newS.replaceAll(\"\\\\b\\\\w+\\\\b\", \"the number of odd elements\");\n            newS = newS.replaceFirst(\"elements\", \"elements \" + count);\n            newS = newS.replaceFirst(\"strng\", \"str\" + count + \"ng\");\n            newS = newS.replaceFirst(\"the\", \"the \" + count);\n            newS = newS.replaceFirst(\"put\", \"put \" + count);\n            result.add(newS);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int min = Integer.MAX_VALUE;\n        int curSum = 0;\n        for(int num : nums){\n            curSum = Math.min(curSum+num, num);\n            min = Math.min(min, curSum);\n        }\n        return min;\n    }\n}\n\n// 1. Initialize min to be the maximum integer and curSum to be 0.\n// 2. Iterate through the array, for each number, update curSum to be the minimum of curSum+num and num.\n// 3. Also update min to be the minimum of min and curSum.\n// 4. Return min after the loop.\n\n// Time complexity: O(n), where n is the length of the array.\n// Space complexity: O(1), since we only use a constant amount of space.\n\n// This solution is based on Kadane's algorithm, which is a popular algorithm for finding the maximum (or minimum) subarray sum in an array.\n// It's a dynamic programming solution, where we keep track of the minimum sum of the subarray ending at each position.\n// The minimum sum of the subarray ending at the current position is either the current number itself (if the sum of the subarray ending at the previous position is negative) or the sum of the subarray ending at the previous position plus the current number (if the sum of the subarray ending at the previous position is positive or zero).\n// We update the minimum sum of the subarray as we go along, and return the minimum sum at the end.\n\n// This solution is also known as the \"sliding window\" approach, where we keep track of the sum of the subarray using a sliding window.\n// The window slides through the array, and at each position, we update the sum of the subarray based on the current number and the sum of the subarray at the previous position.\n// We keep track of the minimum sum of the subarray as we go along, and return the minimum sum at the end.\n\n// This solution is also known as the \"prefix sum\" approach, where we calculate the prefix sum of the array and then use it to calculate the sum of the subarray at each position.\n// The sum of the subarray at each position is the difference between the prefix sum at the current position and the prefix sum"}
{"task_id": "Java/115", "generation": "\n        int count = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                pq.add(cell);\n            }\n        }\n        while (!pq.isEmpty()) {\n            int maxWater = pq.poll();\n            if (maxWater <= capacity) {\n                count++;\n                capacity -= maxWater;\n            } else {\n                count += (maxWater / capacity);\n                if (maxWater % capacity != 0) {\n                    count++;\n                }\n                break;\n            }\n        }\n        return count;\n    }\n}\n\n// Time complexity: O(n log n)\n// Space complexity: O(n)\n\n// This solution uses a priority queue to store the amount of water in each well. It then empties the buckets by taking the maximum amount of water from the queue and subtracting it from the bucket's capacity. The number of times the bucket is emptied is counted and returned as the result.\n\n// The time complexity is O(n log n) because of the sorting of the priority queue. The space complexity is O(n) because of the space required to store the priority queue.\n\n// Note: This solution assumes that the grid is a 2D list of integers and that the bucket capacity is an integer. The grid represents the amount of water in each well, and the bucket capacity represents the maximum amount of water that can be stored in the bucket. The function returns the minimum number of times the bucket needs to be emptied to empty all the wells.\n\n// This solution is based on the assumption that the grid and bucket capacity are valid and in the correct format. If the grid or bucket capacity are not valid, the function may not work as expected.\n\n// This solution is a simple implementation and may not be the most efficient for large inputs. For large inputs, a more efficient solution would be needed.\n\n// This solution is a simple implementation and may not be the most efficient for large inputs. For large inputs, a more efficient solution would be needed.\n\n// This solution is a simple implementation and may not be the most efficient for large inputs. For large inputs, a more efficient solution would"}
{"task_id": "Java/116", "generation": "\n        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n        for (int num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n            } else {\n                positives.add(num);\n            }\n        }\n        Collections.sort(positives);\n        Collections.sort(negatives, Collections.reverseOrder());\n        negatives.addAll(positives);\n        return negatives;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.matches(\"^[aeiouAEIOU0-9\\\\W]*$\")) {\n                continue;\n            }\n            int consonants = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.toString(c).matches(\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\")) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i - 1));\n            }\n        }\n        return \"\";\n    }\n\n    \n}"}
{"task_id": "Java/119", "generation": "\n        int count = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                } else if (c == ')') {\n                    count--;\n                    if (count < 0) {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring that contains at most two distinct characters.\n\n    Example 1:\n    Input: s = \"eceba\"\n    Output: 3\n    Explanation: The longest substring is \"ece\" which its length is 3.\n\n    Example 2:\n    Input: s = \"ccaabbb\"\n    Output: 5\n    Explanation: The longest substring is \"aabbb\" which its length is 5.\n    */\n    public int lengthOfLongestSubstringTwoDistinct(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int left = 0, right = 0;\n        Map<Character, Integer> map = new HashMap<>();\n        int maxLen = 0;\n        while (right < s.length()) {\n            char rightChar = s.charAt(right);\n            map.put(rightChar, map.getOrDefault(rightChar, 0) + 1);\n            while (map.size() > 2) {\n                char leftChar = s.charAt(left);\n                map.put(leftChar, map.get(leftChar) - 1);\n                if (map.get(leftChar) == 0) {\n                    map.remove(leftChar);\n                }\n                left++;\n            }\n            maxLen = Math.max(maxLen, right - left + 1);\n            right++;\n        }\n        return maxLen;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n}"}
{"task_id": "Java/120", "generation": "\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (arr == null || arr.size() == 0 || arr.size() < k) {\n            return result;\n        }\n\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int i = 0; i < k; i++) {\n            maxHeap.offer(arr.get(i));\n        }\n\n        for (int i = k; i < arr.size(); i++) {\n            if (maxHeap.peek() < arr.get(i)) {\n                maxHeap.poll();\n                maxHeap.offer(arr.get(i));\n            }\n        }\n\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n\n        return result;\n    }\n}\n\n// Time complexity: O(n log k)\n// Space complexity: O(k)\n\n// The time complexity is O(n log k) because we are using a priority queue which is a heap data structure. The heapify operation takes log k time. We are doing this for n elements of the array.\n// The space complexity is O(k) because we are storing k elements in the heap at any time.\n\n// The problem is to find the k largest numbers in an array. We can solve this problem by using a max heap. We add the first k elements to the max heap. Then for the remaining elements, if the current element is greater than the top of the max heap, we remove the top and add the current element to the max heap. Finally, the max heap will contain the k largest elements.\n\n// The solution is implemented in Java. The input is a list of integers and a positive integer k. The output is a list of the k largest integers in the input list. The time complexity is O(n log k) and the space complexity is O(k).\n\n// The problem is from LeetCode. The problem number is 215. The problem name is Kth Largest Element in an Array. The problem link is https://leetcode.com/problems/kth-largest-element-in-an-array/."}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n// 4. Return the sum\n\n// 1. Iterate over the list\n// 2. Check if the index is even and the number is odd\n// 3. If true, add the number to the sum\n"}
{"task_id": "Java/122", "generation": "\n        // Write your code here\n        int sum = 0;\n        Collections.sort(arr);\n        for(int i=0; i<k; i++){\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n// 1. Sort the array in ascending order.\n// 2. Add the first k elements of the array to the sum.\n// 3. Return the sum.\n\n// Time complexity: O(n log n) because of the sorting operation.\n// Space complexity: O(1) because we are not using any extra space that scales with the input size.\n\n// This solution assumes that the input list is not empty and that k is a valid index for the list.\n// If these assumptions are not valid, additional error checking should be added.\n\n// This solution also assumes that the elements of the list are integers.\n// If this assumption is not valid, additional type checking should be added.\n\n// This solution also assumes that the elements of the list are positive.\n// If this assumption is not valid, additional logic should be added to handle negative numbers.\n\n// This solution also assumes that the elements of the list are within the range of integers that can be represented.\n// If this assumption is not valid, additional logic should be added to handle out of range integers.\n\n// This solution also assumes that the elements of the list are within the range of the integer that can be represented by the sum.\n// If this assumption is not valid, additional logic should be added to handle out of range sums.\n\n// This solution also assumes that the elements of the list are within the range of the integer that can be represented by the sum.\n// If this assumption is not valid, additional logic should be added to handle out of range sums.\n\n// This solution also assumes that the elements of the list are within the range of the integer that can be represented by the sum.\n// If this assumption is not valid, additional logic should be added to handle out of range sums.\n\n// This solution also assumes that the elements of the list are within the range of the integer that can be represented by the sum.\n// If this assumption is not valid, additional logic should be added to handle out of range sums.\n\n// This solution also assumes that the elements of the list are within the range of the integer"}
{"task_id": "Java/123", "generation": "\n        List<Integer> collatz = new ArrayList<>();\n        List<Integer> oddCollatz = new ArrayList<>();\n\n        while (n != 1) {\n            collatz.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatz.add(1);\n\n        for (int i = 0; i < collatz.size(); i++) {\n            if (collatz.get(i) % 2 != 0) {\n                oddCollatz.add(collatz.get(i));\n            }\n        }\n\n        return oddCollatz;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date.length() != 10) {\n            return false;\n        }\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        String month = date.substring(0, 2);\n        String day = date.substring(3, 5);\n        String year = date.substring(6, 10);\n\n        if (Integer.parseInt(month) > 12 || Integer.parseInt(day) > 31 || Integer.parseInt(year) < 0) {\n            return false;\n        }\n        if (Integer.parseInt(month) == 2) {\n            if (Integer.parseInt(day) > 29) {\n                return false;\n            }\n        } else if (Integer.parseInt(month) == 4 || Integer.parseInt(month) == 6 || Integer.parseInt(month) == 9 || Integer.parseInt(month) == 11) {\n            if (Integer.parseInt(day) > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        String[] words = txt.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.addAll(Arrays.asList(word.split(\",\")));\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/126", "generation": "\n        int n = lst.size();\n        if (n == 0 || n == 1) {\n            return true;\n        }\n        int prev = lst.get(0);\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n        for (int i = 1; i < n; i++) {\n            if (lst.get(i) < prev) {\n                isIncreasing = false;\n            }\n            if (lst.get(i) > prev) {\n                isDecreasing = false;\n            }\n            if (!isIncreasing && !isDecreasing) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1 || isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if (arr == null || arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        for (Integer num : arr) {\n            if (num < 0) {\n                product *= -1;\n            }\n        }\n\n        return Optional.of(product);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dp = new int[n][n];\n        for (int[] row : dp) {\n            Arrays.fill(row, Integer.MAX_VALUE);\n        }\n        dp[0][0] = grid[0][0];\n        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        pq.offer(new int[]{0, 0, dp[0][0]});\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            for (int[] dir : dirs) {\n                int x = cur[0] + dir[0], y = cur[1] + dir[1];\n                if (x < 0 || x >= n || y < 0 || y >= n) {\n                    continue;\n                }\n                if (dp[x][y] > dp[cur[0]][cur[1]] + grid[x][y]) {\n                    dp[x][y] = dp[cur[0]][cur[1]] + grid[x][y];\n                    pq.offer(new int[]{x, y, dp[x][y]});\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[i / n][i % n]);\n        }\n        return res;\n    }\n}import java.util.*;\n\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length == 0) {\n            return new int[0][];\n        }\n        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n        List<int[]> res = new ArrayList<>();\n        int start = intervals[0][0], end = intervals[0][1];\n       "}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n >= 1) {\n            result.add(1);\n        }\n        if (n >= 2) {\n            result.add(3);\n        }\n        if (n >= 3) {\n            result.add(2);\n        }\n        for (int i = 3; i < n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(Math.pow(num, 2));\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n\n    \n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int max = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr.get(i) < arr.get(j)) {\n                    max = Math.max(max, j);\n                }\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> max = Optional.empty();\n        Optional<Integer> min = Optional.empty();\n\n        for(Integer num : lst){\n            if(num > 0){\n                if(!max.isPresent() || num > max.get()){\n                    max = Optional.of(num);\n                }\n            } else if(num < 0){\n                if(!min.isPresent() || num < min.get()){\n                    min = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(max, min);\n    }\n}\n\n// 1. Create a function that returns the largest and smallest integers in a list.\n// 2. If there are no negative or positive integers, return None for that value.\n// 3. The function should handle an empty list.\n// 4. The function should handle a list with 0.\n// 5. The function should handle a list with positive and negative integers.\n// 6. The function should handle a list with duplicate integers.\n// 7. The function should handle a list with large integers.\n// 8. The function should handle a list with small integers.\n// 9. The function should handle a list with negative and positive integers.\n// 10. The function should handle a list with negative integers only.\n// 11. The function should handle a list with positive integers only.\n// 12. The function should handle a list with 0 only.\n// 13. The function should handle a list with negative and positive integers and 0.\n// 14. The function should handle a list with negative integers and large integers.\n// 15. The function should handle a list with positive integers and small integers.\n// 16. The function should handle a list with negative integers and small integers.\n// 17. The function should handle a list with positive integers and large integers.\n// 18. The function should handle a list with negative and positive integers and 0.\n// 19. The function should handle a list with negative integers and 0.\n// 20. The function should handle a list with positive integers and 0.\n// 21. The function should handle a list with negative integers and large integers.\n//"}
{"task_id": "Java/137", "generation": "\n        if (a.equals(b)) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    \n}"}
{"task_id": "Java/138", "generation": "\n        if (n < 4) {\n            return false;\n        }\n        if (n % 2 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder result = new StringBuilder();\n        boolean spaceFlag = false;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (!spaceFlag) {\n                    result.append('_');\n                    spaceFlag = true;\n                }\n            } else {\n                result.append(text.charAt(i));\n                spaceFlag = false;\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 2) {\n            return \"No\";\n        }\n        if (parts[0].matches(\".*\\\\d.*\")) {\n            return \"No\";\n        }\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        if (parts.length == 2 && !parts[1].matches(\"(exe|dll)\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 3 != 0 && lst.get(i) % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int newNumerator = xNumerator * nNumerator;\n        int newDenominator = xDenominator * nDenominator;\n\n        return newNumerator % newDenominator == 0;\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int points = getPoints(num);\n            map.put(i, points);\n        }\n\n        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue());\n\n        List<Integer> res = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : list) {\n            res.add(nums.get(entry.getKey()));\n        }\n        return res;\n    }\n\n    private int getPoints(int num) {\n        if (num < 0) {\n            num = -num;\n        }\n        int points = 0;\n        while (num > 0) {\n            points += num % 10;\n            num /= 10;\n        }\n        return points;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10 > 0 && num / 10 % 2 != 0)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i - j) % 3 == 0 || (j - k) % 3 == 0 || (i - k) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 > index2) {\n            return planets.subList(index2 + 1, index1);\n        } else {\n            return planets.subList(index1 + 1, index2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                }\n                return o1.length() - o2.length();\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (n == 1) {\n            return x;\n        } else if (n == 2) {\n            return y;\n        } else {\n            return n;\n        }\n    }\n\n    public int forOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        } else if (n == 2) {\n            return y;\n        } else {\n            return n;\n        }\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof List) {\n                sum += doubleTheDifference((List<Object>) obj);\n            } else if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num < 0) {\n                    continue;\n                }\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n// Test cases\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}\n\n// This solution is written in Java. It takes two lists of integers as input, compares the corresponding elements in the two lists, and returns a new list where each element is the absolute difference between the corresponding elements in the input lists if they are not equal, and 0 if they are equal.\n\n// The solution uses a for loop to iterate over the elements in the input lists. If the elements at the current index are equal, it adds 0 to the result list. If they are not equal, it calculates the absolute difference between the elements and adds this to the result list. Finally, it returns the result list.\n\n// The time complexity of this solution is O(n), where n is the length of the input lists. This is because it iterates over the elements in the input lists once. The space complexity is also O(n), because it creates a new list to store the result.\n\n// This solution assumes that the input lists are of the same length and that the elements in the input lists are integers. If this is not the case, the solution may not work correctly.\n\n// Please note that the problem statement is not clear about the meaning of \"and score\". It seems to be a typo or a misunderstanding. The solution assumes that \"and score\" refers to the score of the game. If this is not the case, please provide more information.\n\n// Also, the problem statement is not clear about the meaning of \"the value is the absolute difference the and score\". It seems to be a typo or a misunderstanding. The solution assumes that \"the value is the absolute difference the and score\" refers to the absolute difference between the score of the game and the score of the guess. If this is not the case, please provide more information.\n\n// I hope this solution is helpful. If you have any questions, please let me know.\n\n// Best regards,\n// Your Name\n// Your Email"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = 0;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int strength = calculateStrength(class_name, extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = class_name + \".\" + extension;\n            }\n        }\n\n        return strongestExtension;\n    }\n\n    private int calculateStrength(String class_name, String extension) {\n        int upperCaseCountInExtension = (int) extension.chars()\n                .filter(Character::isUpperCase)\n                .count();\n        int upperCaseCountInClassName = (int) class_name.chars()\n                .filter(Character::isUpperCase)\n                .count();\n\n        return upperCaseCountInExtension + upperCaseCountInClassName;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            String rotated = a.substring(i) + a.substring(0, i);\n            if (rotated.contains(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        String numStr = Integer.toString(Math.abs(num));\n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder roman = new StringBuilder();\n        for (int i = 0; i < values.length && number >= 0; i++) {\n            while (values[i] <= number) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        return roman.toString();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // code here\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > max) {\n                max = uniqueChars.size();\n                maxWord = word;\n            } else if (uniqueChars.size() == max) {\n                maxWord = maxWord.compareTo(word) > 0 ? word : maxWord;\n            }\n        }\n        return maxWord;\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(number + need <= remaining){\n            result.add(number + need);\n            result.add(0);\n        }else{\n            result.add(remaining);\n            result.add((number + need) - remaining);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (operator.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        boolean flag = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                flag = !flag;\n                if (flag) {\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n            }\n            sb.append(c);\n        }\n        if (!flag) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
