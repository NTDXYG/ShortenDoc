{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int open = 0;\n        StringBuilder current = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            current.append(c);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                open--;\n                if (open == 0) {\n                    result.add(current.toString());\n                    current.setLength(0);\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        for(double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double temp = 0.0;\n        for(double num : numbers) {\n            temp += Math.pow(num - mean, 2);\n        }\n        return Math.sqrt(temp / numbers.size());\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<Integer>();\n        int maxLevel = 0;\n        int currentLevel = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentLevel++;\n                maxLevel = Math.max(maxLevel, currentLevel);\n                levels.add(maxLevel);\n            } else if (c == ')') {\n                currentLevel--;\n            }\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        String reverse = new StringBuilder(string).reverse().toString();\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(0, i + 1))) {\n                return string + reverse.substring(0, reverse.length() - (i + 1));\n            }\n        }\n        return string + reverse;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\"\\\\|\");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(1);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".\":\n                    result.add(4);\n                    break;\n                case \"..|\":\n                    result.add(3);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int subLength = substring.length();\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            String temp = string.substring(i, i + subLength);\n            if (temp.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        String[] numsToSort = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            numsToSort[i] = nums[i].replaceAll(\"[^0-9]\", \"\");\n        }\n        Arrays.sort(numsToSort);\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (String num : numsToSort) {\n            sortedNumbers.append(num).append(\" \");\n        }\n        return sortedNumbers.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double diff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < diff) {\n                diff = numbers.get(i + 1) - numbers.get(i);\n            }\n        }\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) == diff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) / max);\n        }\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    \n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        for(int i = n/2; i > 0; i--) {\n            if(n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        double left = -1000000000;\n        double right = 1000000000;\n        while (Math.abs(right - left) > 1e-6) {\n            double mid1 = left + (right - left) / 3;\n            double mid2 = right - (right - left) / 3;\n            if (poly(xs, mid1) * poly(xs, mid2) <= 0) {\n                if (poly(xs, mid1) == 0) return mid1;\n                if (poly(xs, mid2) == 0) return mid2;\n                if (poly(xs, mid1) * poly(xs, mid2) < 0) right = mid2;\n                else left = mid1;\n            } else {\n                if (poly(xs, mid1) * poly(xs, mid2) > 0) right = mid1;\n                else left = mid2;\n            }\n        }\n        return (left + right) / 2;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        if (l == null || l.size() == 0) {\n            throw new IllegalArgumentException(\"List is null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for(int i = 1; i < n; i++){\n            if(i % 11 == 0 || i % 13 == 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenList = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                evenList.add(l.get(i));\n            }\n        }\n        Collections.sort(evenList);\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                l.set(i, evenList.get(j++));\n            }\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycling in each group.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        if (n <= 0) {\n            return 0;\n        }\n        int a = 2;\n        int b = 3;\n        int count = 2;\n        while (n > 0) {\n            if (isPrime(a)) {\n                count++;\n                n--;\n            }\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        s.add(l.get(i));\n                        s.add(l.get(j));\n                        s.add(l.get(k));\n                    }\n                }\n            }\n        }\n        return s.size() > 0;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        if(n<=0)\n            return 0;\n        return n*(n-1)/2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (s.contains(-i)) {\n                return true;\n            }\n            s.add(i);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        boolean isNegative = false;\n        if (x < 0) {\n            isNegative = true;\n            x = -x;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        if (isNegative) {\n            sb.append('-');\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 0;\n        } else if (n == 3) {\n            return 1;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        String reverse = new StringBuilder(text).reverse().toString();\n        return text.equals(reverse);\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (p == 0) {\n            return 1;\n        }\n        int result = 0;\n        while (n > 0) {\n            if ((n & p) == 0) {\n                result++;\n            }\n            n = n ^ p;\n            p = p << 1;\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        char[] arr0 = s0.toCharArray();\n        char[] arr1 = s1.toCharArray();\n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n        return Arrays.equals(arr0, arr1);\n    }\n\n    public boolean same_chars(String s0, String s1) {\n        return sameChars(s0, s1);\n    }\n\n    public boolean same_ars(String s0, String s1) {\n        return sameChars(s0, s1);\n    }\n\n    public boolean same_arsab(String s0, String s1) {\n        return sameChars(s0, s1);\n    }\n\n    \n}"}
{"task_id": "Java/55", "generation": "\n        if(n<=0)\n            return 0;\n        if(n==1)\n            return 1;\n        int a=0,b=1,c;\n        for(int i=2;i<=n;i++){\n            c=a+b;\n            a=b;\n            b=c;\n        }\n        return b;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '<') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (!increasing && !decreasing) {\n                return false;\n            }\n        }\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        List<Integer> common = new ArrayList<>();\n        for (int i : l1) {\n            if (l2.contains(i)) {\n                common.add(i);\n            }\n        }\n        return common;\n    }\n\n    \n}"}
{"task_id": "Java/59", "generation": "\n        int max = -1;\n        while (n % 2 == 0) {\n            max = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n = n / i;\n            }\n        }\n        if (n > 2)\n            max = n;\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int fib1 = 0;\n            int fib2 = 1;\n            int fib3 = 1;\n            int fibN = 0;\n            for (int i = 3; i <= n; i++) {\n                fibN = fib1 + fib2 + fib3;\n                fib1 = fib2;\n                fib2 = fib3;\n                fib3 = fibN;\n            }\n            return fibN;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiou\";\n        String y = \"y\";\n        String lowerCaseS = s.toLowerCase();\n\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(lowerCaseS.charAt(i) + \"\") && lowerCaseS.charAt(i) != 'y' && lowerCaseS.charAt(i) != 'Y') {\n                count++;\n            } else if (lowerCaseS.charAt(i) == 'y' || lowerCaseS.charAt(i) == 'Y') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int n = str.length();\n        StringBuilder sb = new StringBuilder(str);\n        sb.reverse();\n        String reversed = sb.toString();\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            if (i < shift) {\n                result += reversed.charAt(i);\n            } else {\n                result += str.charAt(i - shift);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                sum += Character.getNumericValue(c);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[1]);\n        int oranges = Integer.parseInt(parts[3]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(arr.isEmpty()){\n            return result;\n        }\n        int minIndex = -1;\n        int minValue = Integer.MAX_VALUE;\n        for(int i=0; i<arr.size(); i++){\n            if(arr.get(i) % 2 == 0 && arr.get(i) < minValue){\n                minValue = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if(minIndex != -1){\n            result.add(minValue);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        int max = Collections.max(lst);\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max && lst.get(i) > 0) {\n                count++;\n            }\n        }\n        if (count > 0) {\n            return count;\n        } else {\n            return 1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(lst);\n        sortedList.sort(Comparator.reverseOrder());\n\n        List<Integer> result = new ArrayList<>();\n        while (!sortedList.isEmpty()) {\n            result.add(sortedList.remove(0));\n            if (!sortedList.isEmpty()) {\n                result.add(sortedList.remove(0));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        // write code here\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i: q){\n            sum += i;\n        }\n        return sum <= w;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int n = arr.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                changes++;\n            }\n        }\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else if (count2 < count1) {\n            return lst2;\n        } else {\n            return new ArrayList<>(Arrays.asList(lst1.toArray(new String[0])));\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if(a < 6) return false;\n        if(a % 2 == 0 || a % 3 == 0) return false;\n        for(int i = 5; i * i <= a; i += 6) {\n            if(a % i == 0 || a % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (n == 0) {\n            return false;\n        }\n        int val = (int) Math.pow(n, (double) 1 / x);\n        return val * val == x;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        int cube = a * a * a;\n        return cube == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        String hex = \"0123456789ABCDEF\";\n        int decimal = 0;\n        int power = 0;\n        for (int i = num.length() - 1; i >= 0; i--) {\n            char c = num.charAt(i);\n            int value = hex.indexOf(Character.toUpperCase(c));\n            decimal += value * Math.pow(16, power);\n            power++;\n        }\n\n        if (isPrime(decimal)) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        if (decimal == 0) {\n            return \"0\";\n        }\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        return binary.reverse().toString();\n    }\n\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 2) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade > 3.0) {\n                result.add(\"A\");\n            } else if (grade > 7) {\n                result.add(\"B+\");\n            } else if (grade > 20) {\n                result.add(\"B-\");\n            } else if (grade > 23) {\n                result.add(\"C+\");\n            } else if (grade > 13) {\n                result.add(\"C-\");\n            } else if (grade > 0.0) {\n                result.add(\"D+\");\n            } else if (grade > 07) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        if (string.length() % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        return binary;\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\"\\\\s+\");\n        Arrays.sort(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<Integer> row : lst) {\n            for (Integer num : row) {\n                if (num == x) {\n                    result.add(Arrays.asList(x, row.indexOf(x)));\n                }\n            }\n        }\n        result.sort((a, b) -> a.get(1).compareTo(b.get(1)));\n        return result;\n    }\n}\n\nThe function getRow takes a 2D list and an integer as input and returns a list of lists. Each sublist contains two elements: the integer x and the index of x in the row. The list is sorted by the index of the integer in ascending order.\n\nThe function works by iterating over each row in the 2D list, and then iterating over each number in the row. If the number is equal to the target integer x, it adds a new list to the result list containing the number and its index.\n\nFinally, the function sorts the result list by the index of the number in ascending order.\n\nThe time complexity of this function is O(n^2) where n is the number of rows in the 2D list. This is because we are iterating over each row and each number in the row once. The space complexity is O(n) where n is the number of rows in the 2D list. This is because we are storing the result list.\n"}
{"task_id": "Java/88", "generation": "\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for(int i = 0; i < array.size(); i++){\n            if(array.get(i) % 2 == 0){\n                even.add(array.get(i));\n            }else{\n                odd.add(array.get(i));\n            }\n        }\n        if(sum(odd) % 2 == 0){\n            Collections.sort(even, Collections.reverseOrder());\n            odd.addAll(even);\n            Collections.sort(odd);\n        }else{\n            Collections.sort(odd);\n        }\n        return odd;\n    }\n\n    public int sum(List<Integer> list){\n        int sum = 0;\n        for(int i = 0; i < list.size(); i++){\n            sum += list.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encrypted.append((char) (((int) c - 65 + 2 * 2) % 26 + 65));\n            } else if (Character.isLowerCase(c)) {\n                encrypted.append((char) (((int) c - 97 + 2 * 2) % 26 + 97));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int first = lst.get(0);\n        int second = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                first = lst.get(i);\n            } else if (lst.get(i) < second && lst.get(i) != first) {\n                second = lst.get(i);\n            }\n        }\n        if (second == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        return Optional.of(second);\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        // your code here\n        String[] sentences = S.split(\"\\\\.\");\n        int boredom = 0;\n        for(String sentence : sentences){\n            sentence = sentence.trim();\n            if(sentence.length() > 0 && sentence.charAt(0) == 'I'){\n                String[] words = sentence.split(\" \");\n                for(String word : words){\n                    if(word.equals(\"is\") || word.equals(\"the\") || word.equals(\"a\") || word.equals(\"this\")){\n                        boredom++;\n                    }\n                }\n            }\n        }\n        return boredom;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return a == b + c || a == c + b || b == a + c || b == c + a || c == a + b || c == b + a;\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                result.append((char) (c + 2));\n            } else if (c == ' ') {\n                result.append(c);\n            } else {\n                result.append((char) (c - 26));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int max = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            int sum = 0;\n            int num = lst.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return true;\n        }\n\n        Set<String> keys = new HashSet<>();\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!entry.getKey().toString().equals(entry.getKey().toString().toLowerCase()) ||\n                !entry.getKey().toString().equals(entry.getKey().toString().toUpperCase())) {\n                return false;\n            }\n            keys.add(entry.getKey().toString());\n        }\n\n        for (String key : keys) {\n            if (!dict.get(key).toString().equals(key.toLowerCase()) ||\n                !dict.get(key).toString().equals(key.toUpperCase())) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = a * b;\n        return product;\n    }\n\n    \n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        int num = Integer.parseInt(value);\n        for (int i = num + 1; i <= 20; i++) {\n            count++;\n        }\n        return count;\n    }\n\n    public int countLower(String value) {\n        int count = 0;\n        int num = Integer.parseInt(value);\n        for (int i = num - 1; i >= -20; i--) {\n            count++;\n        }\n        return count;\n    }\n\n    public int closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        int upper = countUpper(value);\n        int lower = countLower(value);\n        if (upper <= lower) {\n            return num + upper;\n        } else {\n            return num - lower;\n        }\n    }\n}\n\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                result.add(2 * (i + 1));\n            } else {\n                result.add(2 * (i + 1) - 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s*[,]\\\\s*\");\n        for (String word : words) {\n            result.add(word.trim());\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != 1 && arr.get(i) != 3 && arr.get(i) != 4 && arr.get(i) != 7 && arr.get(i) != 9) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (str.equals(new StringBuilder(str).reverse().toString())) {\n                if (i % 2 == 0)\n                    evenCount++;\n                else\n                    oddCount++;\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for(int i=0; i<arr.size(); i++) {\n            int num = arr.get(i);\n            if(num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while(num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if(sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        int n = arr.size();\n        for(int i = 0; i < n; i++){\n            if(arr.get(i) > arr.get(i+1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n\nA: The problem is asking to check if the array can be sorted in non-decreasing order by performing a right rotation operation.\n\nA right rotation operation means that the last element of the array is moved to the first position.\n\nTo check if the array can be sorted in non-decreasing order, you can perform a right rotation operation and check if the array is still sorted.\n\nHere is a Java solution:\n\n"}
{"task_id": "Java/110", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 0) {\n                count1++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count2++;\n            }\n        }\n        if (count1 > count2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for (char ch : c.toCharArray()) {\n            sb.delete(sb.indexOf(String.valueOf(ch)), sb.lastIndexOf(String.valueOf(ch)) + 1);\n        }\n        String newS = sb.toString();\n        result.add(newS);\n        result.add(isPalindrome(newS));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if ((int) c % 2 != 0) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            minSum = Math.min(minSum, curSum);\n            curSum = Math.min(curSum, 0);\n        }\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid.get(i).get(j) == 1){\n                    count++;\n                }\n            }\n        }\n        return count/capacity;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        // Your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA % 2 == 0 && countB % 2 != 0) {\n                    return -1;\n                } else if (countA % 2 != 0 && countB % 2 == 0) {\n                    return 1;\n                } else {\n                    return a - b;\n                }\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if(s.isEmpty())\n            return result;\n        String[] words = s.split(\"\\\\s+\");\n        for(String word : words) {\n            if(word.length() == n && isConsonant(word))\n                result.add(word);\n        }\n        return result;\n    }\n\n    private boolean isConsonant(String word) {\n        word = word.toLowerCase();\n        for(char c : word.toCharArray()) {\n            if(\"aeiou\".contains(String.valueOf(c)))\n                return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"AEIOUaeiou\";\n        String consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n        String[] words = word.split(\"\");\n        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            if (vowels.contains(words[i]) && consonants.contains(words[i - 1])) {\n                if (minDistance > words[i].length()) {\n                    minDistance = words[i].length();\n                    closestVowel = words[i];\n                }\n            }\n        }\n\n        return closestVowel;\n    }\n\n    \n}"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        List<Integer> result = new ArrayList<>();\n\n        for(int num : arr) {\n            maxHeap.add(num);\n            if(maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n\n        while(!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) % 2 != 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> collatz = new ArrayList<>();\n        while (n != 1) {\n            collatz.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatz.add(1);\n        Collections.reverse(collatz);\n        return collatz;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            StringBuilder result = new StringBuilder();\n            for (int i = 0; i < txt.length(); i++) {\n                char c = txt.charAt(i);\n                if (i % 2 == 0 && Character.isLetter(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        }\n    }\n\n    \n}"}
{"task_id": "Java/126", "generation": "\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/127", "generation": "\n        int a = interval1.get(0);\n        int b = interval1.get(1);\n        int c = interval2.get(0);\n        int d = interval2.get(1);\n\n        if (a > c || b < d) {\n            return \"NO\";\n        }\n\n        int start = Math.max(a, c);\n        int end = Math.min(b, d);\n\n        if (start >= end) {\n            return \"NO\";\n        }\n\n        if (isPrime(end - start + 1)) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        for (int num : arr) {\n            product *= num;\n        }\n\n        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    \n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                res.addAll(dfs(grid, dp, i, j, k));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n\n    private List<Integer> dfs(List<List<Integer>> grid, int[][] dp, int i, int j, int k) {\n        int n = grid.size();\n        if (i < 0 || i >= n || j < 0 || j >= n || dp[i][j] != -1) {\n            return new ArrayList<>();\n        }\n        dp[i][j] = 0;\n        List<Integer> path = new ArrayList<>();\n        path.add(grid.get(i).get(j));\n        List<int[]> dirs = new ArrayList<>(Arrays.asList(new int[]{-1, 0}, new int[]{1, 0}, new int[]{0, -1}, new int[]{0, 1}));\n        for (int[] dir : dirs) {\n            List<Integer> next = dfs(grid, dp, i + dir[0], j + dir[1], k - 1);\n            if (next.size() < k) {\n                continue;\n            }\n            path.addAll(next);\n            Collections.sort(path);\n            dp[i][j] = path.get(k - 1);\n            return path;\n        }\n        return new ArrayList<>();\n    }\n}\n\n// 1 2 3 4\n// 5 6 7 8\n// 9 10 11 12\n// 13 14 1"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                result.add(1);\n            }else{\n                result.add(result.get(result.size() - 1) + result.get(result.size() - 2) + result.get(result.size() - 3));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.round(num * num);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n\n    \n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] count = new int[10000];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) != 0 && count[arr.get(i) - 1] > 0) {\n                count[arr.get(i) - 1]--;\n                count[arr.get(i)]--;\n                return arr.get(i);\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        int smallest = Integer.MAX_VALUE;\n        int largest = Integer.MIN_VALUE;\n        for(int num : lst){\n            if(num < 0 && num < smallest){\n                smallest = num;\n            }\n            if(num > 0 && num > largest){\n                largest = num;\n            }\n        }\n        if(smallest == Integer.MAX_VALUE){\n            result.add(Optional.empty());\n        }else{\n            result.add(Optional.of(smallest));\n        }\n        if(largest == Integer.MIN_VALUE){\n            result.add(Optional.empty());\n        }else{\n            result.add(Optional.of(largest));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            try {\n                double val1 = Double.parseDouble((String) a);\n                double val2 = Double.parseDouble((String) b);\n                return val1 == val2 ? Optional.of(val1) : Optional.empty();\n            } catch (NumberFormatException e) {\n                return Optional.empty();\n            }\n        } else if (a instanceof Double || b instanceof Double) {\n            double val1 = (Double) a;\n            double val2 = (Double) b;\n            return val1 == val2 ? Optional.of(val1) : Optional.empty();\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n % 2 != 0) {\n            return false;\n        }\n        for (int i = 1; i <= n / 2; i++) {\n            if (i + (n - i) == 4) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n                if (count > 2) {\n                    result.append('_');\n                }\n            } else {\n                result.append(c);\n                count = 0;\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        if (file_name.matches(\"^[a-zA-Z]+[0-9]*\\\\.(exe|dll)$\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 4 == 0 && lst.get(i) % 4 == 0 && lst.get(i) % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            if (isPrime(words[i].length())) {\n                result.append(words[i]).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        try {\n            int num = Integer.parseInt(x);\n            int den = Integer.parseInt(n.substring(n.lastIndexOf(\"/\") + 1));\n            return num % den == 0;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        if(nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        List<Point> pointList = new ArrayList<>();\n        for(int i = 0; i < nums.size(); i++) {\n            pointList.add(new Point(nums.get(i), i));\n        }\n\n        Collections.sort(pointList, new Comparator<Point>() {\n            @Override\n            public int compare(Point p1, Point p2) {\n                if(p1.num == p2.num) {\n                    return p1.index - p2.index;\n                }\n                return p1.num - p2.num;\n            }\n        });\n\n        List<Integer> result = new ArrayList<>();\n        for(Point p : pointList) {\n            result.add(p.num);\n        }\n\n        return result;\n    }\n\n    class Point {\n        int num;\n        int index;\n\n        Point(int num, int index) {\n            this.num = num;\n            this.index = index;\n        }\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num % 10 % 10 % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i - i + n;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\"};\n        for (int i = 0; i < planets.length; i++) {\n            if (i == planets.length - 1) {\n                if (planets[i].compareTo(planet1) < 0 && planets[i].compareTo(planet2) > 0) {\n                    result.add(planets[i]);\n                }\n            } else if (planets[i].compareTo(planet1) < 0 && planets[i + 1].compareTo(planet2) > 0) {\n                result.add(planets[i]);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() != o2.length()) {\n                    return o1.length() - o2.length();\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (n == x || n == y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            int n = (int) num;\n            if (n >= 0 && n % 2 != 0) {\n                sum += n * n;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n            if(game.get(i) == guess.get(i)){\n                result.add(0);\n            }else{\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = 0;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int strength = countUppercaseLetters(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int countUppercaseLetters(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length()) {\n            return false;\n        }\n        String ab = a + b;\n        for (int i = 0; i < a.length(); i++) {\n            String rot = ab.substring(i) + ab.substring(0, i);\n            if (b.equals(rot)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(symbols[i]);\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n            return true;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/158", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        for (String word : words) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : map.keySet()) {\n            if (map.get(word) > max) {\n                max = map.get(word);\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    \n}"}
{"task_id": "Java/159", "generation": "\n        if (remaining >= need) {\n            number += need;\n            remaining -= need;\n        } else {\n            number += remaining;\n            remaining = 0;\n        }\n        return Arrays.asList(number, remaining);\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n\n        for (int i = 1; i < operand.size(); i++) {\n            String op = operator.get(i - 1);\n            int num = operand.get(i);\n\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                case \"//\":\n                    result = result / num;\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.length() == 0) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
