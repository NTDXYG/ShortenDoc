{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')' && !stack.isEmpty()) {\n                int start = stack.pop();\n                if (stack.isEmpty()) {\n                    sb.append(paren_string, start, i + 1);\n                    result.add(sb.toString());\n                    sb.setLength(0);\n                }\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        return number - Math.floor(number);\n    }\n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double totalDeviation = 0;\n        for (double num : numbers) {\n            totalDeviation += Math.abs(num - mean);\n        }\n        return totalDeviation / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ') {\n                if (maxDepth > 0) {\n                    result.add(maxDepth);\n                    maxDepth = 0;\n                }\n            }\n        }\n\n        if (maxDepth > 0) { // for the last group if there's no trailing space\n            result.add(maxDepth);\n        }\n\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (string.length() == 0) {\n            return \"\";\n        }\n        if (isPalindrome(string)) {\n            return string;\n        }\n        for (int i = string.length() - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(0, i))) {\n                return string.substring(i) + new StringBuilder(string.substring(0, i)).reverse().toString();\n            }\n        }\n        return string;\n    }\n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestString = Collections.max(strings, Comparator.comparingInt(String::length));\n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \".\":\n                    result.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.compareTo(s2);\n            }\n        });\n        return String.join(\" \", nums);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        double[] closestPair = new double[2];\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair[0] = numbers.get(i);\n                closestPair[1] = numbers.get(i + 1);\n            }\n        }\n        return Arrays.asList(closestPair[0], closestPair[1]);\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaled = (num - min) / (max - min);\n            result.add(rescaled);\n        }\n        return result;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/26", "generation": "\n        // Count occurrences of each number\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n\n        // Filter out numbers that occur more than once\n        return numbers.stream()\n                .filter(num -> counts.get(num) == 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    \n}"}
{"task_id": "Java/32", "generation": "\n        double lo = -1000;\n        double hi = 1000;\n        while (hi - lo > 1e-10) {\n            double mid = (lo + hi) / 2;\n            if (poly(xs, lo) * poly(xs, mid) <= 0) {\n                hi = mid;\n            } else {\n                lo = mid;\n            }\n        }\n        return lo;\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> res = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                temp.add(l.get(i));\n            }\n        }\n        Collections.sort(temp);\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                res.add(temp.get(j++));\n            } else {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String num = Integer.toString(i);\n                for (int j = 0; j < num.length(); j++) {\n                    if (num.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        for (int i = 0; i < even.size(); i++) {\n            l.set(i * 2, even.get(i));\n        }\n        for (int i = 0; i < odd.size(); i++) {\n            l.set(i * 2 + 1, odd.get(i));\n        }\n        return l;\n    }\n\n    \n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // decycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int num = 2;\n        while (true) {\n            if (isPrime(num) && isFibonacci(num)) {\n                count++;\n                if (count == n) {\n                    return num;\n                }\n            }\n            num++;\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        if (num == a || num == b) {\n            return true;\n        }\n        int c = a + b;\n        while (c <= num) {\n            if (c == num) {\n                return true;\n            }\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        return n * n;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9\");\n        }\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 4;\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) return 1;\n        int res = 1;\n        n = n % p;\n        while (n > 0) {\n            if ((n & 1) == 1)\n                res = (res * n) % p;\n            n = n >> 1;\n            res = (res * res) % p;\n        }\n        return res;\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        int[] count = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i) - 'a']++;\n            count[s1.charAt(i) - 'a']--;\n        }\n        \n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "\n        boolean inc = true;\n        boolean dec = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                dec = false;\n            }\n            if (l.get(i) > l.get(i + 1)) {\n                inc = false;\n            }\n        }\n        return inc || dec;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        return new ArrayList<>(set1);\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int maxPrime = -1;\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n        // n must be odd at this point, so we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n        return maxPrime;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n        return dp[n];\n    }\n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiou\";\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(Character.toLowerCase(s.charAt(i))) != -1) {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\") || s.endsWith(\"Y\")) {\n            count++;\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/65", "generation": "\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift >= len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        String shifted = str.substring(len - shift) + str.substring(0, len - shift);\n        return shifted;\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c - 'A' + 1;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                index = i;\n            }\n        }\n        if (index != -1) {\n            result.add(smallestEven);\n            result.add(index);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = 0;\n        for (int i : map.keySet()) {\n            if (i > 0 && map.get(i) >= i && i > max) {\n                max = i;\n            }\n        }\n        return max == 0 ? 1 : max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> sorted = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            sorted.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n            if (!lst.isEmpty()) {\n                sorted.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            }\n        }\n        return sorted;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int count = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (!arr.get(i).equals(arr.get(j))) {\n                count++;\n            }\n            i++;\n            j--;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                if (isPrime(i)) {\n                    count++;\n                }\n            }\n        }\n        return count == 3;\n    }\n\n    public boolean isPrime(int a) {\n        if (a <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/76", "generation": "\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return Math.pow(cubeRoot, 3) == a;\n    }\n}"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/79", "generation": "\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) return false;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 3.3) {\n                result.add(\"A\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 7) {\n                result.add(\"B-\");\n            } else if (grade > 20) {\n                result.add(\"C+\");\n            } else if (grade > 13) {\n                result.add(\"C-\");\n            } else if (grade > 0.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) return 1;\n        int count = 18;\n        for (int i = 2; i < n; i++) {\n            count *= 10;\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n            result.append(\" \");\n        }\n        return result.toString().trim();\n    }\n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(i);\n                    temp.add(j);\n                    result.add(temp);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) != o2.get(0)) {\n                    return o1.get(0) - o2.get(0);\n                } else {\n                    return o1.get(1) - o2.get(1);\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (array.isEmpty()) {\n            return sortedArray;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            sortedArray.sort(Comparator.naturalOrder());\n        }\n        return sortedArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                encrypted.append((char) ((c - base + 4) % 26 + base));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Set<Integer> set = new HashSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(set);\n        Collections.sort(sortedList);\n        \n        return Optional.of(sortedList.get(1));\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.!]\");\n        int boredomCount = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/93", "generation": "\n        String vowels = \"aeiou\";\n        String encodedMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (vowels.indexOf(Character.toLowerCase(c)) != -1) {\n                    int index = (vowels.indexOf(Character.toLowerCase(c)) + 2) % vowels.length();\n                    char newChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(index)) : vowels.charAt(index);\n                    encodedMessage += newChar;\n                } else {\n                    encodedMessage += c;\n                }\n            } else {\n                encodedMessage += c;\n            }\n        }\n        return encodedMessage;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxSum = 0;\n        for (int num : lst) {\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            maxSum = Math.max(maxSum, sum);\n        }\n        return maxSum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return true;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n\n    \n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/97", "generation": "\n        int product = 1;\n        while (b != 0) {\n            product *= a % 10;\n            a /= 10;\n            b--;\n        }\n        return product;\n    }\n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> list = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        if (n % 2 == 0) {\n            while (i < n) {\n                list.add(n + j);\n                i++;\n                j += 2;\n            }\n        } else {\n            while (i < n) {\n                list.add(n + j);\n                i++;\n                j += 2;\n            }\n        }\n        return list;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            String[] split1 = word.split(\" \");\n            for (String s1 : split1) {\n                words.add(s1);\n            }\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return 1;\n        } else {\n            return x + 1;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int average = sum / (m - n + 1);\n        return \"0b\" + Integer.toBinaryString(average);\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] names = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        arr.sort(Collections.reverseOrder());\n        \n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                result.add(names[num]);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    \n}"}
{"task_id": "Java/107", "generation": "\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Arrays.asList(even, odd);\n    }\n\n    private boolean isPalindrome(int num) {\n        int reversed = 0, original = num;\n        while (num != 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -1 * sum : sum;\n    }\n\n    \n}"}
{"task_id": "Java/109", "generation": "\n        int n = arr.size();\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            if(arr.get(i) > arr.get((i+1)%n)){\n                count++;\n            }\n        }\n        return count <= 1;\n    }\n}"}
{"task_id": "Java/110", "generation": "\n        int oddCountLst1 = 0;\n        int evenCountLst2 = 0;\n        \n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n        \n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n        \n        // If there are enough even numbers in lst2 to exchange with odd numbers in lst1, return \"YES\"\n        if (evenCountLst2 >= oddCountLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                result.put(word, result.getOrDefault(word, 0) + 1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String result = sb.toString();\n        String reversed = sb.reverse().toString();\n        boolean isPalindrome = result.equals(reversed);\n        return Arrays.asList(result, isPalindrome);\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "\n        int count = 0;\n        for (List<Integer> row : grid) {\n            for (int water : row) {\n                count += (water + capacity - 1) / capacity;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        List<Integer> sorted = new ArrayList<>();\n        List<Integer> negative = new ArrayList<>();\n        List<Integer> positive = new ArrayList<>();\n        for (int i : arr) {\n            if (i < 0) {\n                negative.add(i);\n            } else {\n                positive.add(i);\n            }\n        }\n        Collections.sort(negative, (a, b) -> Integer.bitCount(a) - Integer.bitCount(b));\n        Collections.sort(positive, (a, b) -> Integer.bitCount(a) - Integer.bitCount(b));\n        sorted.addAll(negative);\n        sorted.addAll(positive);\n        return sorted;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.chars().filter(c -> !\"aeiouAEIOU\".contains(String.valueOf((char) c))).count() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        int i = word.length() - 1;\n        while (i >= 0) {\n            if (!vowels.contains(word.charAt(i) + \"\")) {\n                i--;\n            } else {\n                break;\n            }\n        }\n        if (i == -1) {\n            return \"\";\n        }\n        i--;\n        while (i >= 0) {\n            if (!vowels.contains(word.charAt(i) + \"\")) {\n                i--;\n            } else {\n                break;\n            }\n        }\n        if (i == -1) {\n            return \"\";\n        }\n        return word.charAt(i) + \"\";\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n                if (balance < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return balance == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        // Write your code here\n        Collections.sort(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - k; i < arr.size(); i++){\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        int count = 0;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (count == k) {\n                break;\n            }\n            if (arr.get(i) < 100 && arr.get(i) >= 0) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> list = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                list.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        list.add(1);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day == 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            List<String> result = new ArrayList<>();\n            for (char c : txt.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    int order = Character.toLowerCase(c) - 'a' + 1;\n                    if (order % 2 != 0) {\n                        result.add(String.valueOf(c));\n                    }\n                }\n            }\n            return result;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() < 2) {\n            return true;\n        }\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = lst.get(i);\n            if (curr <= prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int product = 1;\n        int sum = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                product *= -1;\n            } else if (num == 0) {\n                return Optional.of(0);\n            }\n            sum += Math.abs(num);\n        }\n        return Optional.of(product * sum);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        List<Integer> res = new ArrayList<>();\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        boolean[][] visited = new boolean[n][n];\n        pq.offer(new Node(grid.get(0).get(0), 0, 0, 1));\n        visited[0][0] = true;\n        while (!pq.isEmpty()) {\n            Node cur = pq.poll();\n            if (cur.k == k) {\n                res = cur.path;\n                break;\n            }\n            for (int[] dir : dirs) {\n                int x = cur.x + dir[0];\n                int y = cur.y + dir[1];\n                if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y]) {\n                    visited[x][y] = true;\n                    pq.offer(new Node(grid.get(x).get(y), x, y, cur.k + 1, new ArrayList<>(cur.path)));\n                    pq.offer(new Node(grid.get(x).get(y), x, y, cur.k + 1, new ArrayList<>(cur.path)));\n                }\n            }\n        }\n        return res;\n    }\n\n    class Node implements Comparable<Node> {\n        int val;\n        int x;\n        int y;\n        int k;\n        List<Integer> path;\n\n        public Node(int val, int x, int y, int k) {\n            this.val = val;\n            this.x = x;\n            this.y = y;\n            this.k = k;\n            this.path = new ArrayList<>();\n            this.path.add(val);\n        }\n\n        public Node(int val, int x, int y, int k, List<Integer> path) {\n            this.val = val;\n            this.x = x;\n            this.y ="}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(1);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        if (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <= n; i++) {\n            int last = result.get(result.size() - 1);\n            int secondLast = result.get(result.size() - 2);\n            int thirdLast = result.get(result.size() - 3);\n            if (i % 2 == 0) {\n                result.add(last / 2);\n            } else {\n                result.add(secondLast + thirdLast + last + 1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? product : 0;\n    }\n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            double rounded = Math.ceil(num);\n            sum += Math.pow(rounded, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(txt.charAt(txt.length() - 2));\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] prefix = new int[n];\n        prefix[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefix[i] = prefix[i - 1] + arr.get(i);\n        }\n        int ans = -1;\n        for(int i = n - 1; i > 0; i--) {\n            if(prefix[i - 1] >= arr.get(i)) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> smallest = lst.stream()\n                                         .filter(i -> i < 0)\n                                         .max(Integer::compare);\n        Optional<Integer> largest = lst.stream()\n                                        .filter(i -> i > 0)\n                                        .max(Integer::compare);\n        return Arrays.asList(smallest, largest);\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            if (strA.matches(\"\\\\d+(\\\\.\\\\d+)?\") && strB.matches(\"\\\\d+(\\\\.\\\\d+)?\")) {\n                double numA = Double.parseDouble(strA);\n                double numB = Double.parseDouble(strB);\n                if (numA == numB) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(numA > numB ? strA : strB);\n                }\n            } else {\n                return Optional.of(strA.compareTo(strB) > 0 ? strA : strB);\n            }\n        } else if (a instanceof Double && b instanceof Double) {\n            double numA = (Double) a;\n            double numB = (Double) b;\n            if (numA == numB) {\n                return Optional.empty();\n            } else {\n                return Optional.of(numA > numB ? a : b);\n            }\n        } else {\n            return Optional.of(a instanceof Double ? a : b);\n        }\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/138", "generation": "\n        // Check if the number is even and greater than or equal to 8\n        return n % 2 == 0 && n >= 8;\n    }\n\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        long fact = 1;\n        for (int i = 2; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int spaceCount = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\".repeat(spaceCount));\n                }\n                sb.append(c);\n                spaceCount = 0;\n            }\n        }\n        if (spaceCount > 2) {\n            sb.append(\"-\");\n        } else {\n            sb.append(\"_\".repeat(spaceCount));\n        }\n        return sb.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/141", "generation": "\n        String[] validExtensions = {\"exe\", \"dll\"};\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String namePart = parts[0];\n        String extensionPart = parts[1];\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n        if (!namePart.matches(\"[a-zA-Z0-9]*\")) {\n            return \"No\";\n        }\n        if (!Arrays.asList(validExtensions).contains(extensionPart)) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        return productNumerator % productDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        return nums.stream()\n                .sorted(Comparator.comparingInt(Solution::sumOfDigits).thenComparingInt(nums::indexOf))\n                .collect(Collectors.toList());\n    }\n\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (isFirstAndLastDigitOdd(num) && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n\n    \n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            a[i-1] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                for(int k = j+1; k < n; k++){\n                    if(a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        return planets.subList(index1 + 1, index2);\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return s1.length() - s2.length();\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (n == 0) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n    \n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        String strongest = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        for (String extension : extensions) {\n            int upperCaseCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upperCaseCount++;\n                }\n            }\n            int strength = upperCaseCount - extension.length();\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() == 0 || b.length() == 0) {\n            return false;\n        }\n        StringBuilder sb = new StringBuilder(a);\n        sb.append(a);\n        String s = sb.toString();\n        return s.contains(b);\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        int even = 0, odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romans = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder roman = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                roman.append(romans[i]);\n                number -= values[i];\n            }\n        }\n        return roman.toString();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Sort the sides of the triangle in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n        return Math.pow(sides[2], 2) == Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n    }\n}"}
{"task_id": "Java/158", "generation": "\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n        \n        Map<String, Set<Character>> map = new HashMap<>();\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            map.put(word, set);\n        }\n        \n        String result = \"\";\n        int max = 0;\n        for (Map.Entry<String, Set<Character>> entry : map.entrySet()) {\n            if (entry.getValue().size() > max) {\n                max = entry.getValue().size();\n                result = entry.getKey();\n            } else if (entry.getValue().size() == max) {\n                if (entry.getKey().compareTo(result) < 0) {\n                    result = entry.getKey();\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + Math.min(need, remaining);\n        int left = Math.max(0, remaining - need);\n        return Arrays.asList(total, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetter) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n\n    \n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
