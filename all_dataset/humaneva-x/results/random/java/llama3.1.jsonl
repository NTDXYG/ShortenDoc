{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n} \n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        List<String> groups = new ArrayList<>();\n        StringBuilder current_group = new StringBuilder();\n        int open_count = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                open_count++;\n                current_group.append(c);\n            } else if (c == ')') {\n                open_count--;\n                current_group.append(c);\n                if (open_count == 0) {\n                    groups.add(current_group.toString());\n                    current_group = new StringBuilder();\n                }\n            }\n        }\n        for (String group : groups) {\n            if (isBalanced(group)) {\n                result.add(group);\n            }\n        }\n        return result;\n    }\n\n    private boolean isBalanced(String group) {\n        int open_count = 0;\n        for (char c : group.toCharArray()) {\n            if (c == '(') {\n                open_count++;\n            } else if (c == ')') {\n                open_count--;\n                if (open_count < 0) {\n                    return false;\n                }\n            }\n        }\n        return open_count == 0;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n"}
{"task_id": "Java/4", "generation": "\n        if (numbers.size() == 0) {\n            return 0;\n        }\n        double sum = 0;\n        for (double num : numbers) {\n            sum += Math.abs(num - mean(numbers));\n        }\n        return sum / numbers.size();\n    }\n\n    public double mean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> max_levels = new ArrayList<Integer>();\n        int max_level = 0;\n        int current_level = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_level += 1;\n                max_level = Math.max(max_level, current_level);\n            } else if (c == ')') {\n                current_level -= 1;\n            }\n        }\n        max_levels.add(max_level);\n        return max_levels;\n    }\n\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> filtered = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filtered.add(str);\n            }\n        }\n        return filtered;\n    }\n} \n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> max = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n        for (int i = numbers.size() - 1; i >= 0; i--) {\n            if (numbers.get(i) > currentMax) {\n                currentMax = numbers.get(i);\n                max.add(currentMax);\n            }\n        }\n        Collections.reverse(max);\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/10", "generation": "\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return string.substring(0, i) + string.substring(i, j + 1);\n    }\n    \n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (i < b.length()) {\n                if (a.charAt(i) == b.charAt(i)) {\n                    result.append('0');\n                } else {\n                    result.append('1');\n                }\n            } else {\n                result.append(a.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.ofNullable(strings.stream()\n                .max(Comparator.comparingInt(String::length))\n                .orElse(null));\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 2; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to a set of characters, which automatically removes duplicates\n        Set<Character> distinctChars = new HashSet<Character>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(c);\n        }\n        // Return the size of the set, which is the number of distinct characters\n        return distinctChars.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n                i += 2;\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n                i += 1;\n            } else if (string.charAt(i) == '|') {\n                i += 1;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    public int howManyTimes(String string,\n}"}
{"task_id": "Java/19", "generation": "\n        String[] words = numbers.split(\" \");\n        Arrays.sort(words, Comparator.comparingInt(Integer::parseInt));\n        return String.join(\" \", words);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        // Find the closest pair of numbers\n        double minDiff = Double.MAX_VALUE;\n        int minDiffIndex = -1;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                minDiffIndex = i;\n            }\n        }\n        // Return the closest pair of numbers\n        return Arrays.asList(numbers.get(minDiffIndex), numbers.get(minDiffIndex + 1));\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double range = max - min;\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add((num - min) / range);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/24", "generation": "\n        int divisor = 1;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n                factors.add(i);\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                set.add(num);\n                result.add(num);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 == 1) {\n            return 0;\n        }\n        double x = 1;\n        while (Math.abs(poly(xs, x)) > 0.0000000001) {\n            x = x - poly(xs, x) / poly(xs, x + 0.0000000001);\n        }\n        return x;\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 2. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 3. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 4. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 5. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 6. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\n// 7. FizzBuzz\nclass Solution {\n    public int fizzBuzz(int n) {\n        int"}
{"task_id": "Java/37", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i : l) {\n            if (i % 2 == 0) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        Collections.sort(even);\n        even.addAll(odd);\n        return even;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        int a = 2, b = 3;\n        for (int i = 2; i < n; i++) {\n            int temp = a + b;\n            if (isPrime(temp)) {\n                a = b;\n                b = temp;\n            } else {\n                b = temp;\n            }\n        }\n        return b;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n} \n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Arrays.sort(l.stream().mapToInt(i -> i).toArray());\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n} \n"}
{"task_id": "Java/41", "generation": "\n        int leftCars = n;\n        int rightCars = n;\n        int collisions = 0;\n        while (leftCars > 0 && rightCars > 0) {\n            leftCars--;\n            rightCars--;\n            collisions += leftCars + rightCars;\n        }\n        return collisions;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(-num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            int[] fib = new int[n + 1];\n            fib[0] = 0;\n            fib[1] = 1;\n            for (int i = 2; i <= n; i++) {\n                fib[i] = fib[i - 1] + fib[i - 2];\n            }\n            return fib[n];\n        }\n    }\n}  // class Solution\n\\end{code}\n\nComment: Your code looks good, but it's not following the exact requirements of the problem. The problem asks to implement the `fib4` function without using recursion. However, your code uses recursion implicitly by using the `fib` array to store the results of previous calculations. To make it more explicit, you can use a loop to calculate the `fib` array. Here's the corrected code:\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n} \n"}
{"task_id": "Java/48", "generation": "\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the string is equal to its reverse\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks if given string arome\n   >>> is_palindrome('')\n    True\n  ispalrome('\n  \n    >>> isrome('aaaaa')\n True\n  _palrome('cd')\n   False\n     */\n    public boolean isPalindrome(String text) {\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the string is equal to its reverse\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks if given string arome\n   >>> is_palindrome('')\n    True\n  ispalrome('\n  \n    >>> isrome('aaaaa')\n True\n  _palrome('cd')\n   False\n     */\n    public boolean isPalindrome(String text) {\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the string is equal to its reverse\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks if given string arome\n   >>> is_palindrome('')\n    True\n  ispalrome('\n  \n    >>> isrome('aaaaa')\n True\n  _palrome('cd')\n   False\n     */\n    public boolean isPalindrome(String text) {\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the string is equal to its reverse\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks if given string arome\n   >>> is_palindrome('')\n    True\n  ispalrome('\n  \n    >>> isrome('aaaaa')\n True\n  _palrome('cd')\n   False\n     */\n    public boolean isPalindrome(String text) {\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Reverse the string\n        String"}
{"task_id": "Java/49", "generation": "\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * p) % 1000000007;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}  // class Solution\n\\end{code}\n\nAnswer: Your code looks good, but there are a few things that could be improved:\n\n1. The method name `removeVowels` is not following the conventional camelCase naming convention in Java. It should be `removeVowels` or `removeVowelsMethod`.\n\n2. The variable name `vowels` is not very descriptive. It would be better to name it `vowelCharacters` or `vowelsToBeRemoved`.\n\n3. The variable name `sb` is not very descriptive. It would be better to name it `result` or `output`.\n\n4. The comment `// class Solution` is not necessary. It's a good practice to keep the code clean and remove any unnecessary comments.\n\n5. The code does not handle the case where the input string is `null`. You might want to add a null check at the beginning of the method.\n\nHere's the improved code:\n\n\\begin{code}\npublic String removeVowels(String text) {\n    if (text == null) {\n        return \"\";\n    }\n\n    String vowelCharacters = \"aeiouAEIOU\";\n    StringBuilder result = new StringBuilder();\n    for (char c : text.toCharArray()) {\n        if (vowelCharacters.indexOf(c) == -1) {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}\n\\end{code}\n\nAnswer: Your code is good, but here are a few suggestions for improvement:\n\n1. The method name `removeVowels` is not following the conventional camelCase naming convention in Java. It should be `removeVowels` or `removeVowelsMethod`.\n\n2. The variable name `vowels` is not very descriptive. It would be better to name it `vowelCharacters` or `vowelsToBeRemoved`.\n\n3. The variable name `sb` is not very descriptive. It would be better to name it `result` or `output`.\n\n4. The code does not handle the case where the input string is `null`. You might want to add a null check at the beginning of the method.\n\n5. The code uses `indexOf` method which has a time"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, 3)  \n  add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n} \n\nclass Solution {\n    /**\n    Add and y\n   >>> add2, \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean sameChars(String\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return n-thon.   >>> fib(10)\n   55\n  1)\n   1   >>> fib(8)\n  21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return n-thon.   >>> fib(10)\n   55\n  1)\n   1   >>> fib(8)\n  21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return n-thon.   >>> fib(10)\n   55\n  1)\n   1   >>> fib(8)\n  21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return n-thon.   >>> fib(10)\n   55\n  1)\n   1   >>> fib(8)\n  21\n     */\n    public int\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack.push('<');\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/57", "generation": "\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l1) {\n            set.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l2) {\n            if (set.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/59", "generation": "\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push('(');\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n} \n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 1;\n            for (int i = 2; i <= n; i++) {\n                int c = a + b;\n                a = b;\n                b = c;\n            }\n            return b;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        if (str.length() == 0) {\n            return str;\n        }\n        if (shift == 0) {\n            return str;\n        }\n        if (shift >= str.length()) {\n            shift = shift % str.length();\n        }\n        String firstPart = str.substring(str.length() - shift);\n        String secondPart = str.substring(0, str.length() - shift);\n        return firstPart + secondPart;\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                sum += c - '0';\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n        return total - n;\n    }\n}  // class Solution\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n        return total - n;\n    }\n}  // class Solution\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n        return total - n;\n    }\n}  // class Solution\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n        return total - n;\n    }\n}  // class Solution\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n        return total - n;\n    }\n}  // class Solution\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int total = 0;\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                total += n;\n            } else if (part.equals(\"oranges\")) {\n                total += n;\n            }\n        }\n       "}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = 0;\n        for (int i : map.keySet()) {\n            if (i > 0 && map.get(i) > i) {\n                max = Math.max(max, i);\n            }\n        }\n        return max == 0 ? 1 : max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        if (lst == null || lst.size() == 0) {\n            return lst;\n        }\n        List<Integer> result = new ArrayList<>();\n        List<Integer> max = new ArrayList<>();\n        List<Integer> min = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                max.add(lst.get(i));\n            } else {\n                min.add(lst.get(i));\n            }\n        }\n        Collections.sort(max);\n        Collections.sort(min);\n        int maxIndex = 0;\n        int minIndex = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(max.get(maxIndex));\n                maxIndex++;\n            } else {\n                result.add(min.get(minIndex));\n                minIndex++;\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/71", "generation": "\n        // check if the three sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        // calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        // calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        // return the area to 2 decimal points\n        return Math.round(area * 100) / 100;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        String str = Integer.toString(sum);\n        String rev = new StringBuilder(str).reverse().toString();\n        return str.equals(rev) && sum <= w;\n    }\n}  // class Solution\n"}
{"task_id": "Java/73", "generation": "\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i] = Math.min(dp[i], dp[j]);\n                } else {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum2 < sum1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n                a = a / i;\n                i = 1;\n            }\n        }\n        return count == 3;\n    }\n}  // time complexity O(n) space complexity O(1)  // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 "}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (x < 1) {\n            return false;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        int i = 2;\n        while (i * i <= x) {\n            if (x % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        double log = Math.log(x) / Math.log(n);\n        return (log == Math.floor(log));\n    }\n}  // class Solution\n"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int)Math.cbrt(a);\n        return (cubeRoot * cubeRoot * cubeRoot) == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (isPrime(Integer.parseInt(num.substring(i, i + 1), 16))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return binary + \"db\";\n    }\n}  // class Solution\n\\end{code}\n\nComment: Your code looks good. However, you might want to consider adding some error checking to handle cases where the input is not a non-negative integer. You could also consider using a StringBuilder to build the binary string, which might be more efficient for large inputs.\n\nAnswer: Your code is clean and easy to read. However, here are a few suggestions for improvement:\n\n1. Consider adding a check to ensure that the input is a non-negative integer. If the input is negative, you could throw an exception or return an error message.\n\n2. You could use a StringBuilder to build the binary string, which might be more efficient for large inputs.\n\n3. You could add a comment to explain why you're adding the \"db\" at the end of the string.\n\nHere's an updated version of your code with these suggestions:\n\n\\begin{code}\npublic String decimalToBinary(int decimal) {\n    if (decimal < 0) {\n        throw new IllegalArgumentException(\"Input must be a non-negative integer\");\n    }\n    StringBuilder binary = new StringBuilder();\n    while (decimal > 0) {\n        binary.insert(0, decimal % 2);\n        decimal /= 2;\n    }\n    return binary.toString() + \"db\";\n}\n\\end{code}\n\nThis version of the code uses a StringBuilder to build the binary string, which is more efficient than concatenating strings. It also checks that the input is a non-negative integer, and throws an exception if it's not. Finally, it adds a comment to explain why the \"db\" is added at the end of the string.  This version of the code is more robust and efficient than the original.  It also uses a more efficient algorithm to convert the decimal to binary.  This algorithm uses a while loop to repeatedly divide the decimal by 2 and append the remainder to the binary string.  This is more efficient than using the Integer.toBinaryString() method, which creates a new string object each time it's called.  This can be a problem if the input is very large, because it can cause a lot of memory to be allocated.  The while loop version of the code avoids this problem by building the binary string incrementally, rather than all at once.  This makes it more efficient and scalable.  It also makes the code easier to understand, because it's more explicit and easier to follow.  This"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 2) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) != s.charAt(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 3.3) {\n                result.add(\"A\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B-\");\n            } else if (grade >= 2.3) {\n                result.add(\"C+\");\n            } else if (grade >= 2.0) {\n                result.add(\"C\");\n            } else if (grade >= 1.7) {\n                result.add(\"C-\");\n            } else if (grade >= 1.3) {\n                result.add(\"D+\");\n            } else if (grade >= 1.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n} \n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (str.charAt(0) == '1' || str.charAt(str.length() - 1) == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += c - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 2nd solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 3rd solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 4th solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 5th solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 6th solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\n// 7th solution\nclass Solution {\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n   "}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i : lst) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n            if (i == 0 || chars[i] != chars[i - 1]) {\n                sb.append(chars[i]);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).size() == x) {\n                result.add(new ArrayList<>(Arrays.asList(i, 0)));\n                for (int j = 1; j < x; j++) {\n                    result.add(new ArrayList<>(Arrays.asList(i, j)));\n                }\n            }\n        }\n        Collections.sort(result, Comparator.comparingInt(a -> a.get(0)));\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                int shift = 2 * (i % 2 == 0 ? 1 : -1);\n                encrypted.append((char) (c + shift));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        int smallest = lst.get(0);\n        int secondSmallest = Integer.MAX_VALUE;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < secondSmallest) {\n                secondSmallest = lst.get(i);\n            }\n        }\n        if (secondSmallest == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n    }\n} \n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n} \n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return (a == b + c || a == c + b || b == a + c || b == c + a || c == a + b || c == b + a);\n        } else {\n            return false;\n        }\n    }\n}\u200b\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (c == 'a') {\n                result.append('c');\n            } else if (c == 'e') {\n                result.append('g');\n            } else if (c == 'i') {\n                result.append('k');\n            } else if (c == 'o') {\n                result.append('q');\n            } else if (c == 'u') {\n                result.append('w');\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}  // class Solution\n"}
{"task_id": "Java/94", "generation": "\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int sum = 0;\n            int num = lst.get(i);\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/95", "generation": "\n        // Check if the dictionary is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        // Iterate over each key in the dictionary\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (key instanceof String) {\n                // Check if the key is not in lower case\n                if (!((String) key).equals(((String) key).toLowerCase())) {\n                    return false;\n                }\n            }\n        }\n        \n        // If we have not returned false by now, it means all keys are in lower case\n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        int product = a * b;\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int unitDigitProduct = unitDigitA * unitDigitB;\n        int tensDigitProduct = (product - unitDigitProduct) / 10;\n        return unitDigitProduct + tensDigitProduct;\n    }\n}  // class Solution\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a string, count the of u vow even.\n      For example    count_upperaBCdE returns\n    count_upper('abcdefg') returns 0\n upperdBBE') returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a string, count the of u vow even.\n      For example    count_upperaBCdE returns\n    count_upper('abcdefg') returns 0\n upperdBBE') returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a string, count the of u vow even.\n      For example    count_upperaBCdE returns\n    count_upper('abcdefg') returns 0\n upperdBBE') returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a string, count the of u vow even.\n      For example    count_upperaBCdE returns\n    count_upper('abcdefg') returns 0\n upperdBBE') returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class"}
{"task_id": "Java/99", "generation": "\n        return 0;\n    }\n\n    public int closestInteger(String s) {\n        double num = Double.parseDouble(s);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        if (num - lower <= upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i + 1);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        String[] words = s.split(\",| \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word.trim());\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return 1;\n        } else {\n            return (x + y) / 2;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return Integer.toBinaryString(avg);\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num == 0) {\n                continue;\n            }\n            int count = 0;\n            while (num > 0) {\n                if (num % 10 % 2 == 0) {\n                    count++;\n                }\n                num /= 10;\n            }\n            if (count > 0) {\n                result.add(count);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.add(getName(i));\n            }\n        }\n        Collections.sort(result, (a, b) -> b.length() - a.length());\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getName(int num) {\n        String[] names = {\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return names[num];\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        int reversed = 0;\n        int original = num;\n        while (num != 0) {\n            int remainder = num % 10;\n            reversed = reversed * 10 + remainder;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -1 * num;\n            }\n            int sum = 0;\n            int n = num;\n            while (n > 0) {\n                sum += n % 10;\n                n = n / 10;\n            }\n            if (sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // time complexity O(n log n) space complexity O(n)  // O(n log n) due to sorting operation\n// O(n) for storing the array in arr1 array\n// O(1) for other operations\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we are storing the array in arr1 array\n// O(n) for space complexity as we"}
{"task_id": "Java/110", "generation": "\n        int evenCount1 = 0;\n        int evenCount2 = 0;\n        for (int num : lst1) {\n            if (num % 2 == 0) {\n                evenCount1++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount2++;\n            }\n        }\n        return evenCount1 + evenCount2 >= lst1.size() ? \"YES\" : \"NO\";\n    }\n}  // class Solution\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n} \n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String reversed = sb.reverse().toString();\n        return Arrays.asList(reversed, reversed.equals(sb.toString()));\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the \" + s + \"nput.\");\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n\n    \n}"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        int maxFill = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                    if (i > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    }\n                    if (j > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    }\n                    maxFill = Math.max(maxFill, dp[i][j]);\n                }\n            }\n        }\n        int ans = 0;\n        while (maxFill > 0) {\n            ans++;\n            maxFill = 0;\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (grid.get(i).get(j) == 1) {\n                        dp[i][j] = 1;\n                        if (i > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                        }\n                        if (j > 0) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                        }\n                        maxFill = Math.max(maxFill, dp[i][j]);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                String binA = Integer.toBinaryString(a);\n                String binB = Integer.toBinaryString(b);\n                int countA = countOnes(binA);\n                int countB = countOnes(binB);\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n\n    public int countOnes(String bin) {\n        int count = 0;\n        for (char c : bin.toCharArray()) {\n            if (c == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        \n        // Initialize an empty list to store the result\n        List<String> result = new ArrayList<>();\n        \n        // Initialize a counter to count the number of consonants in the current word\n        int consonantCount = 0;\n        \n        // Iterate over each word in the list of words\n        for (String word : words) {\n            // Initialize a flag to indicate whether the word contains exactly n consonants\n            boolean isExact = true;\n            \n            // Iterate over each character in the word\n            for (char c : word.toCharArray()) {\n                // Check if the character is a consonant\n                if (isConsonant(c)) {\n                    // Increment the consonant count\n                    consonantCount++;\n                    \n                    // If the consonant count exceeds n, set the flag to false\n                    if (consonantCount > n) {\n                        isExact = false;\n                        break;\n                    }\n                }\n            }\n            \n            // If the word contains exactly n consonants, add it to the result list\n            if (isExact) {\n                result.add(word);\n            }\n            \n            // Reset the consonant count for the next word\n            consonantCount = 0;\n        }\n        \n        // Return the result list\n        return result;\n    }\n    \n    // Helper function to check if a character is a consonant\n    private boolean isConsonant(char c) {\n        // Check if the character is a letter\n        if (Character.isLetter(c)) {\n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        int n = word.length();\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (word.charAt(mid) == 'a' || word.charAt(mid) == 'e' || word.charAt(mid) == 'i' || word.charAt(mid) == 'o' || word.charAt(mid) == 'u') {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        if (left == n) {\n            return \"\";\n        }\n        if (word.charAt(left) == 'a' || word.charAt(left) == 'e' || word.charAt(left) == 'i' || word.charAt(left) == 'o' || word.charAt(left) == 'u') {\n            return String.valueOf(word.charAt(left));\n        }\n        if (left - 1 >= 0 && (word.charAt(left - 1) == 'a' || word.charAt(left - 1) == 'e' || word.charAt(left - 1) == 'i' || word.charAt(left - 1) == 'o' || word.charAt(left - 1) == 'u')) {\n            return String.valueOf(word.charAt(left - 1));\n        }\n        return \"\";\n    }\n}  // time O(n) space O(1)  // 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1.5/1.5\n// 1"}
{"task_id": "Java/119", "generation": "\n        String s = \"\";\n        for (String str : lst) {\n            s += str;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.offer(num);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        return new ArrayList<>(maxHeap);\n    }\n\n    \n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) <= k) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30) {\n            return false;\n        }\n        if (year < 1 || year > 9999) {\n            return false;\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/125", "generation": "\n        if(txt.contains(\" \")){\n            return Arrays.asList(txt.split(\" \"));\n        }else if(txt.contains(\",\")){\n            return Arrays.asList(txt.split(\",\"));\n        }else{\n            StringBuilder sb = new StringBuilder();\n            for(int i = 0; i < txt.length(); i++){\n                char c = txt.charAt(i);\n                if(Character.isLetter(c)){\n                    sb.append(c);\n                }else{\n                    if(sb.length() > 0){\n                        sb.append(sb.charAt(sb.length()-1));\n                        sb.append(c);\n                    }\n                }\n            }\n            return Arrays.asList(sb.toString().split(\"\"));\n        }\n    }\n}\u200b\n"}
{"task_id": "Java/126", "generation": "\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart <= intersectionEnd) {\n            int intersectionLength = intersectionEnd - intersectionStart + 1;\n            if (isPrime(intersectionLength)) {\n                return \"YES\";\n            } else {\n                return \"NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        for (int num : arr) {\n            if (num < 0) {\n                sign *= -1;\n            }\n        }\n        return Optional.of(sign);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] visited = new int[n][m];\n        int[][] directions = {{0,1},{0,-1},{1,0},{-1,0}};\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{0,0});\n        visited[0][0] = 1;\n        List<Integer> result = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            int[] cur = queue.poll();\n            int x = cur[0];\n            int y = cur[1];\n            result.add(grid.get(x).get(y));\n            if (result.size() == k) {\n                Collections.sort(result);\n                return result;\n            }\n            for (int[] dir : directions) {\n                int nx = x + dir[0];\n                int ny = y + dir[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && visited[nx][ny] == 0) {\n                    queue.offer(new int[]{nx,ny});\n                    visited[nx][ny] = 1;\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(2);\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1);\n            } else {\n                result.add(result.get(i - 2) + result.get(i - 3) + result.get(i - 4));\n            }\n        }\n        return result;\n    }\n} \n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a n, return the product odd digits.\n    0 if all digits even\n    For example\n 1) 1\n    digits(4 0\n   digits(235 == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a n, return the product odd digits.\n    0 if all digits even\n    For example\n 1) 1\n    digits(4 0\n   digits(235 == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a n, return the product odd digits.\n    0 if all digits even\n    For example\n 1) 1\n    digits(4 0\n   digits(235 == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a n, return the product odd digits.\n    0 if all digits even\n    For example\n 1) 1\n    digits(4 0\n   digits(235 == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n >"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}  // time complexity O(n) space complexity O(n)  where n is the length of the string.  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1  // 1.5/1.5 = 1 "}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.round(num) * (int) Math.round(num);\n        }\n        return sum;\n    }\n}  // class Solution\n\\end{code}\n\nComment: Your code looks good. However, you might want to add some error checking to handle cases where the input list is null or empty. You could also consider using a more descriptive variable name instead of `l` and `lst`. For example, `numbers` and `inputList`. Additionally, you might want to consider using a more descriptive method name instead of `sumSquares`. For example, `sumOfSquaredNumbers`.\n\nAnswer: Your code is clean and easy to understand. However, here are a few suggestions for improvement:\n\n1. Consider adding a null check for the input list to prevent a `NullPointerException`.\n\n2. You can use a more descriptive variable name instead of `l` and `lst`.\n\n3. You can use a more descriptive method name instead of `sumSquares`.\n\n4. You can use a more descriptive comment instead of \"You are a numbers.\".\n\n5. You can use a more descriptive comment instead of \"For l = [,2,3] the output should be 14\".\n\n6. You can use a more descriptive comment instead of \"For =14,] the should 98\".\n\n7. You can use a more descriptive comment instead of \"For lst [,357] the output be 84\".\n\n8. You can use a more descriptive comment instead of \"For l = [1.,42,0] output should 29\".\n\n9. You can use a more descriptive comment instead of \"For lst = [-2.4,,1 output be 6\".\n\n10. You can use a more descriptive comment instead of \"Examples:\".\n\nHere is the updated code:\n\n\\begin{code}\nclass Solution {\n    /**\n     * This method calculates the sum of squares of the numbers in the input list.\n     * Each number in the list is rounded to the nearest integer before being squared.\n     * @param numbers the list of numbers\n     * @return the sum of squares of the numbers in the list\n     */\n    public int sumOfSquaredNumbers(List<Double> numbers) {\n        if (numbers == null) {\n            throw new NullPointerException(\"Input list cannot be null\");\n        }\n        int sum = 0;\n        for (double num : numbers) {\n            sum += (int) Math.round(num) * ("}
{"task_id": "Java/134", "generation": "\n        // check if the string is empty\n        if(txt.length() == 0) {\n            return false;\n        }\n        // check if the last character is a letter\n        return Character.isLetter(txt.charAt(txt.length() - 1));\n    }\n}\u200b\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] count = new int[100001];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 1; i <= 100000; i++) {\n            count[i] += count[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            if (count[arr.get(i) - 1] == count[arr.get(i)]) {\n                return -1;\n            }\n        }\n        return n - 1;\n    }\n}  // time complexity O(n) space complexity O(n)  // space complexity can be reduced to O(1) by using a hashmap\n"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> smallest = Optional.empty();\n        Optional<Integer> largest = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (smallest.isPresent()) {\n                    smallest = Optional.of(Math.min(i, smallest.get()));\n                } else {\n                    smallest = Optional.of(i);\n                }\n            } else if (i > 0) {\n                if (largest.isPresent()) {\n                    largest = Optional.of(Math.max(i, largest.get()));\n                } else {\n                    largest = Optional.of(i);\n                }\n            }\n        }\n        result.add(smallest);\n        result.add(largest);\n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            try {\n                double num1 = Double.parseDouble((String) a);\n                double num2 = Double.parseDouble((String) b);\n                if (num1 == num2) {\n                    return Optional.of(null);\n                } else {\n                    return Optional.of(num1 - num2);\n                }\n            } catch (NumberFormatException e) {\n                return Optional.of(null);\n            }\n        } else if (a instanceof Double && b instanceof Double) {\n            double num1 = (double) a;\n            double num2 = (double) b;\n            if (num1 == num2) {\n                return Optional.of(null);\n            } else {\n                return Optional.of(num1 - num2);\n            }\n        } else {\n            return Optional.of(null);\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 == 0) {\n            for (int i = 1; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    for (int k = j + 1; k < n; k++) {\n                        for (int l = k + 1; l < n; l++) {\n                            if (i + j + k + l == n) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n                    continue;\n                }\n                if (i + 1 < text.length() && text.charAt(i + 1) == ' ') {\n                    continue;\n                }\n                sb.append('_');\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class.  // The end of class. "}
{"task_id": "Java/141", "generation": "\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n        String extension = parts[1];\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        if (name.contains(\"-\")) {\n            return \"No\";\n        }\n        if (name.contains(\".\")) {\n            return \"No\";\n        }\n        if (!extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}  // class Solution\n\\end{code}\n\nAnswer: Your code looks good, but there are a few things that could be improved:\n\n1. You could add some comments to explain what each part of the code is doing. This would make it easier for someone else to understand your code.\n\n2. You could use a more descriptive variable name instead of `parts`. For example, `fileParts` would be a better name.\n\n3. You could use a more descriptive variable name instead of `name`. For example, `fileName` would be a better name.\n\n4. You could use a more descriptive variable name instead of `extension`. For example, `fileExtension` would be a better name.\n\n5. You could use a more descriptive variable name instead of `file_name`. For example, `inputFileName` would be a better name.\n\n6. You could add some error checking to make sure that the input is a string. If the input is not a string, your code will throw a `NullPointerException`.\n\n7. You could use a more descriptive return message instead of \"No\". For example, \"Invalid file name\" would be a better message.\n\n8. You could use a more descriptive return message instead of \"Yes\". For example, \"Valid file name\" would be a better message.\n\nHere is an updated version of your code with these suggestions:\n\n\\begin{code}\npublic String filenameCheck(String inputFileName) {\n    // Check if input is a string\n    if (inputFileName == null) {\n        return \"Invalid input: input must be a string\";\n    }\n\n    // Split the file name into parts\n    String[] fileParts = inputFileName.split(\"\\\\.\");\n\n    // Check if the file name has exactly two parts\n    if (fileParts.length != 2) {\n        return \"Invalid file name: file name must have exactly two parts\";\n    }\n\n    // Get the file name and extension\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && lst.get(i) % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // time O(n*m) space O(n) where n is the number of words and m is the maximum length of a word\n// 1. Split the sentence into words\n// 2. Check if the length of each word is a prime number\n// 3. If it is, add the word to the list of prime words\n// 4. Join the list of prime words into a string with spaces in between\n// 5. Return the resulting string\n// The time complexity is O(n*m) because we are checking each word and each character in each word\n// The space complexity is O(n) because we are storing the prime words in a list\n// The isPrime function checks if a number is prime by iterating from 2 to the square root of the number and checking if it is divisible by any of these numbers. If it is, it is not a prime number. If it is not divisible by any of these numbers, it is a prime number. This function has a time complexity of O(sqrt(n)) and a space complexity of O(1) because we are not using any extra space that scales with the input size.  // time O(n*m) space O(n) where n is the number of words and m is the maximum length of a word\n// 1. Split the sentence into words\n// 2. Check if the length of each word is a prime number\n// 3. If it is, add the word to the list of prime words\n// 4. Join the list of prime words into a string with spaces in between\n// 5. Return the resulting string\n// The time complexity is O(n*m) because we are checking each word and each character in each word\n// The space complexity is O(n) because we are storing the prime words in a list\n// The isPrime function checks if a"}
{"task_id": "Java/144", "generation": "\n        // convert string to fraction\n        int[] xNum = stringToFraction(x);\n        int[] nNum = stringToFraction(n);\n\n        // check if the fraction is whole number\n        if (nNum[1] == 1) {\n            return true;\n        }\n\n        // check if the fraction is equal to the whole number\n        if (xNum[0] * nNum[1] == nNum[0] * xNum[1]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public int[] stringToFraction(String s) {\n        // split the string into numerator and denominator\n        String[] parts = s.split(\"/\");\n        int numerator = Integer.parseInt(parts[0]);\n        int denominator = Integer.parseInt(parts[1]);\n\n        return new int[] {numerator, denominator};\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        // Create a list of pairs where the first element is the number of digits in the number and the second element is the number itself\n        List<Pair> pairs = new ArrayList<>();\n        for (int num : nums) {\n            pairs.add(new Pair(num.toString().length(), num));\n        }\n\n        // Sort the list of pairs\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.count == p2.count) {\n                    return Integer.compare(p1.num, p2.num);\n                } else {\n                    return Integer.compare(p1.count, p2.count);\n                }\n            }\n        });\n\n        // Create a new list with the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n\n        return sortedNums;\n    }\n\n    private class Pair {\n        int count;\n        int num;\n\n        public Pair(int count, int num) {\n            this.count = count;\n            this.num = num;\n        }\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n} \n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i - i % 3;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n    }\n} \n"}
{"task_id": "Java/149", "generation": "\n        // First, we filter out the strings with odd length\n        List<String> filteredList = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                filteredList.add(s);\n            }\n        }\n\n        // Then, we sort the filtered list by length and then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n\n        return filteredList;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (n % 2 == 0) {\n            return x ^ y;\n        } else {\n            return x | y;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (Integer) num > 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst) {\n//         int sum = 0;\n//         for (Object num : lst) {\n//             if (num instanceof Integer && (Integer) num > 0) {\n//                 sum += (int) num * (int) num;\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst) {\n//         int sum = 0;\n//         for (Object num : lst) {\n//             if (num instanceof Integer && (Integer) num > 0) {\n//                 sum += (int) num * (int) num;\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst) {\n//         int sum = 0;\n//         for (Object num : lst) {\n//             if (num instanceof Integer && (Integer) num > 0) {\n//                 sum += (int) num * (int) num;\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst) {\n//         int sum = 0;\n//         for (Object num : lst) {\n//             if (num instanceof Integer && (Integer) num > 0) {\n//                 sum += (int) num * (int) num;\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst) {\n//         int sum = 0;\n//         for (Object num : lst) {\n//             if (num instanceof Integer && (Integer) num > 0) {\n//                 sum += (int) num * (int) num;\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int doubleTheDifference(List<Object> lst)\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = 0;\n        String strongest = \"\";\n        for (String ext : extensions) {\n            int strength = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongest = ext;\n            } else if (strength == maxStrength) {\n                if (ext.compareTo(strongest) < 0) {\n                    strongest = ext;\n                }\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n\n    \n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            String rotated = a.substring(i) + a.substring(0, i);\n            if (rotated.contains(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}  // class Solution\n"}
{"task_id": "Java/156", "generation": "\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[] intVal = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < intVal.length; i++) {\n            while (number >= intVal[i]) {\n                sb.append(roman[i]);\n                number -= intVal[i];\n            }\n        }\n        return sb.toString();\n    }\n}  // class Solution\n"}
{"task_id": "Java/157", "generation": "\n        // Check if the sum of the squares of the two shorter sides is equal to the square of the longest side\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/158", "generation": "\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            map.put(word, set.size());\n        }\n        int max = 0;\n        for (int count : map.values()) {\n            if (count > max) {\n                max = count;\n            }\n        }\n        List<String> maxWords = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == max) {\n                maxWords.add(entry.getKey());\n            }\n        }\n        Collections.sort(maxWords);\n        return maxWords.get(0);\n    }\n\n    \n}"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (number + need > remaining) {\n            result.add(remaining - number);\n            return result;\n        }\n        result.add(number + need);\n        result.add(0);\n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;\n    }\n}  // class Solution\n\n// Test the function\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
