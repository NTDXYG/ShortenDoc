{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers)-1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n\t// TODO: Implement this function\n\treturn nil\n}"}
{"task_id": "Go/2", "generation": "\n    return number - math.Floor(number)\n}\n"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    var sum float64\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n\tif len(numbers) == 0 {\n\t\treturn []int{}\n\t}\n\tresult := []int{numbers[0]}\n\tfor i := 1; i < len(numbers); i++ {\n\t\tresult = append(result, delimeter, numbers[i])\n\t}\n\treturn result\n}"}
{"task_id": "Go/6", "generation": "\n    var result []int\n    var groups []string\n    var group string\n    var level int\n    var max_level int\n\n    // Split the input string into groups\n    groups = strings.Split(paren_string, \" \")\n\n    // Iterate over each group\n    for _, group = range groups {\n        level = 0\n        max_level = 0\n\n        // Iterate over each character in the group\n        for _, char := range group {\n            if char == '(' {\n                level += 1\n                if level > max_level {\n                    max_level = level\n                }\n            } else if char == ')' {\n                level -= 1\n            }\n        }\n\n        // Append the maximum level of nesting to the result\n        result = append(result, max_level)\n    }\n\n    return result\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, s := range stringList {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}"}
{"task_id": "Go/9", "generation": "\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    max := numbers[0]\n    result := []int{max}\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n        result = append(result, max)\n    }\n\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes); i > 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return str + Reverse(string(runes[:i]))\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    if len(a) != len(b) {\n        panic(\"Strings must be of equal length\")\n    }\n\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/12", "generation": "\n\tif len(strings) == 0 {\n\t\treturn nil\n\t}\n\tlongest := strings[0]\n\tfor _, s := range strings {\n\t\tif len(s) > len(longest) {\n\t\t\tlongest = s\n\t\t}\n\t}\n\treturn longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[:i+1])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    var str string\n    for i := 0; i <= n; i++ {\n        str += strconv.Itoa(i) + \" \"\n    }\n    return str[:len(str)-1]\n}\n"}
{"task_id": "Go/16", "generation": "\n    distinct := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        distinct[char] = true\n    }\n    return len(distinct)\n}\n"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    var note string\n    for _, c := range music_string {\n        if c == ' ' {\n            continue\n        }\n        if c == '|' {\n            if note == \"o\" {\n                result = append(result, 4)\n            } else if note == \".\" {\n                result = append(result, 1)\n            }\n            note = \"\"\n        } else {\n            note += string(c)\n        }\n    }\n    if note == \"o\" {\n        result = append(result, 4)\n    } else if note == \".\" {\n        result = append(result, 1)\n    }\n    return result\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    // Convert the input string to a slice of strings\n    numSlice := strings.Split(numbers, \" \")\n\n    // Create a slice of integers to store the converted numbers\n    intSlice := make([]int, len(numSlice))\n\n    // Create a map to store the numeral values\n    numeralMap := map[string]int{\n        \"zero\": 0,\n        \"one\":  1,\n        \"two\":  2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    // Convert the strings in numSlice to integers and store them in intSlice\n    for i, num := range numSlice {\n        intSlice[i] = numeralMap[num]\n    }\n\n    // Sort the intSlice\n    sort.Ints(intSlice)\n\n    // Convert the integers in intSlice back to strings\n    sortedNumSlice := make([]string, len(intSlice))\n    for i, num := range intSlice {\n        for k, v := range numeralMap {\n            if v == num {\n                sortedNumSlice[i] = k\n            }\n        }\n    }\n\n    // Join the sortedNumSlice into a string\n    sortedNumbers := strings.Join(sortedNumSlice, \" \")\n\n    return sortedNumbers\n}\n"}
{"task_id": "Go/20", "generation": "\n\tif len(numbers) < 2 {\n\t\treturn [2]float64{}\n\t}\n\n\tsort.Float64s(numbers)\n\treturn [2]float64{numbers[0], numbers[1]}\n}"}
{"task_id": "Go/21", "generation": "\n\tmin := math.Inf(1)\n\tmax := math.Inf(-1)\n\tfor _, n := range numbers {\n\t\tif n < min {\n\t\t\tmin = n\n\t\t}\n\t\tif n > max {\n\t\t\tmax = n\n\t\t}\n\t}\n\tif min == max {\n\t\treturn numbers\n\t}\n\tresult := make([]float64, len(numbers))\n\tfor i, n := range numbers {\n\t\tresult[i] = (n - min) / (max - min)\n\t}\n\treturn result\n}"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, v := range values {\n\t\tif i, ok := v.(int); ok {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}"}
{"task_id": "Go/24", "generation": "\n\tfor i := n - 1; i > 0; i-- {\n\t\tif n%i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}"}
{"task_id": "Go/25", "generation": "\n    factors := []int{}\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n            i--\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, num := range numbers {\n        if !seen[num] {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/27", "generation": "\n    var result strings.Builder\n    for _, c := range str {\n        if c >= 'a' && c <= 'z' {\n            result.WriteRune(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n            result.WriteRune(c - 'A' + 'a')\n        } else {\n            result.WriteRune(c)\n        }\n    }\n    return result.String()\n}\n"}
{"task_id": "Go/28", "generation": "\n\tvar result string\n\tfor _, s := range strings {\n\t\tresult += s\n\t}\n\treturn result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _,s := range strings {\n        if strings.HasPrefix(s,prefix) {\n            result = append(result,s)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n\tvar positive []int\n\tfor _, v := range l {\n\t\tif v > 0 {\n\t\t\tpositive = append(positive, v)\n\t\t}\n\t}\n\treturn positive\n}"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/32", "generation": "\n    if len(xs) % 2 != 0 {\n        panic(\"xs must have even number of coefficients\")\n    }\n    if xs[len(xs)-1] == 0 {\n        panic(\"largest non zero coefficient must be non zero\")\n    }\n    // Find the largest non zero coefficient\n    maxCoeff := 0\n    for _, coeff := range xs {\n        if coeff != 0 && coeff > maxCoeff {\n            maxCoeff = coeff\n        }\n    }\n    // Find the zero point\n    x := float64(maxCoeff) / float64(xs[len(xs)-1])\n    for i := 0; i < 1000; i++ {\n        if Poly(xs, x) == 0 {\n            return x\n        }\n        x -= Poly(xs, x) / Poly(xs, x+0.01)\n    }\n    return x\n}"}
{"task_id": "Go/33", "generation": "\n    // Create a new slice to store the sorted values\n    sorted := make([]int, len(l))\n    // Copy the values from the original slice to the new slice\n    copy(sorted, l)\n    // Sort the values at the indicies that are divisible by three\n    for i := 2; i < len(l); i += 3 {\n        sorted[i] = l[i]\n    }\n    // Sort the values at the indicies that are divisible by three\n    sort.Slice(sorted, func(i, j int) bool {\n        return sorted[i] < sorted[j]\n    })\n    // Return the new slice\n    return sorted\n}\n"}
{"task_id": "Go/34", "generation": "\n    keys := make(map[int]bool)\n    list := []int{}\n    for _, entry := range l {\n        if _, value := keys[entry]; !value {\n            keys[entry] = true\n            list = append(list, entry)\n        }\n    }\n    sort.Ints(list)\n    return list\n}"}
{"task_id": "Go/35", "generation": "\n\tif len(l) == 0 {\n\t\treturn 0\n\t}\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/37", "generation": "\n\t// Create a slice to hold the even-indexed values\n\teven := make([]int, 0)\n\n\t// Iterate over the input slice, adding the even-indexed values to the even slice\n\tfor i := 0; i < len(l); i += 2 {\n\t\teven = append(even, l[i])\n\t}\n\n\t// Sort the even slice\n\tsort.Ints(even)\n\n\t// Create a new slice to hold the result\n\tresult := make([]int, len(l))\n\n\t// Iterate over the input slice, adding the odd-indexed values to the result slice\n\t// and the sorted even-indexed values to the even indices of the result slice\n\tfor i := 0; i < len(l); i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = even[i/2]\n\t\t} else {\n\t\t\tresult[i] = l[i]\n\t\t}\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\tif n == 6 {\n\t\treturn 233\n\t}\n\tif n == 7 {\n\t\treturn 1597\n\t}\n\tif n == 8 {\n\t\treturn 28657\n\t}\n\tif n == 9 {\n\t\treturn 514229\n\t}\n\tif n == 10 {\n\t\treturn 433494437\n\t}\n\tif n == 11 {\n\t\treturn 2971215073\n\t}\n\tif n == 12 {\n\t\treturn 99194853094755497\n\t}\n\tif n == 13 {\n\t\treturn 1066340417491710595814572169\n\t}\n\tif n == 14 {\n\t\treturn 19134702400093278081449423917\n\t}\n\tif n == 15 {\n\t\treturn 475820899499999986739534069466\n\t}\n\tif n == 16 {\n\t\treturn 1226132595410659627969107740944\n\t}\n\tif n == 17 {\n\t\treturn 3244369418155255155168424905257\n\t}\n\tif n == 18 {\n\t\treturn 5331629117357428309049555082427\n\t}\n\tif n == 19 {\n\t\treturn 14472334024676220988713741603897\n\t}\n\tif n == 20 {\n\t\treturn 3928413764606871165730230159576\n\t}\n\tif n == 21 {\n\t\treturn 21288944002339283953979689768945\n\t}\n\tif n == 22 {\n\t\treturn 5704682313116859128445308447307\n\t}\n\tif n == 23 {\n\t\treturn 1694070868445"}
{"task_id": "Go/40", "generation": "\n    // Sort the list in ascending order\n    sort.Ints(l)\n    // Iterate over the list\n    for i := 0; i < len(l)-2; i++ {\n        // Set two pointers, one at the beginning and one at the end of the list\n        j, k := i+1, len(l)-1\n        // While the two pointers have not crossed\n        for j < k {\n            // Calculate the sum of the three elements\n            sum := l[i] + l[j] + l[k]\n            // If the sum is zero, return true\n            if sum == 0 {\n                return true\n            // If the sum is less than zero, move the left pointer to the right\n            } else if sum < 0 {\n                j++\n            // If the sum is greater than zero, move the right pointer to the left\n            } else {\n                k--\n            }\n        }\n    }\n    // If no three elements sum to zero, return false\n    return false\n}"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}"}
{"task_id": "Go/42", "generation": "\n\tfor i := range l {\n\t\tl[i]++\n\t}\n\treturn l\n}"}
{"task_id": "Go/43", "generation": "\n\t// TODO: Implement this function\n\treturn false\n}"}
{"task_id": "Go/44", "generation": "\n    if x == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x%base) + result\n        x /= base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n\tif n < 0 {\n\t\treturn -1\n\t}\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 0\n\t}\n\tvar fib4 = make([]int, n+1)\n\tfib4[0] = 0\n\tfib4[1] = 0\n\tfib4[2] = 2\n\tfib4[3] = 0\n\tfor i := 4; i <= n; i++ {\n\t\tfib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n\t}\n\treturn fib4[n]\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2\n\t}\n\treturn float64(l[n/2])\n}"}
{"task_id": "Go/48", "generation": "\n\tfor i := 0; i < len(text)/2; i++ {\n\t\tif text[i] != text[len(text)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return Modp(n/2,p) * Modp(n/2,p) % p\n    }\n    return (Modp(n/2,p) * Modp(n/2,p) % p) * 3 % p\n}"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(runes)\n}"}
{"task_id": "Go/51", "generation": "\n    return regexp.MustCompile(\"[aeiouAEIOU]\").ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n\tfor _, v := range l {\n\t\tif v >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}"}
{"task_id": "Go/54", "generation": "\n\tif len(s0) != len(s1) {\n\t\treturn false\n\t}\n\tm := make(map[rune]int)\n\tfor _, c := range s0 {\n\t\tm[c]++\n\t}\n\tfor _, c := range s1 {\n\t\tif m[c] == 0 {\n\t\t\treturn false\n\t\t}\n\t\tm[c]--\n\t}\n\treturn true\n}"}
{"task_id": "Go/55", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn Fib(n-1) + Fib(n-2)\n}"}
{"task_id": "Go/56", "generation": "\n\topen := 0\n\tfor _, b := range brackets {\n\t\tif b == '<' {\n\t\t\topen++\n\t\t} else if b == '>' {\n\t\t\topen--\n\t\t}\n\t\tif open < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn open == 0\n}"}
{"task_id": "Go/57", "generation": "\n\tif len(l) < 2 {\n\t\treturn true\n\t}\n\tincreasing := l[0] < l[1]\n\tfor i := 1; i < len(l); i++ {\n\t\tif increasing && l[i-1] > l[i] {\n\t\t\treturn false\n\t\t}\n\t\tif !increasing && l[i-1] < l[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            m[v] = false\n        }\n    }\n    result := make([]int, 0)\n    for k, v := range m {\n        if !v {\n            result = append(result, k)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    // Start with the smallest prime number\n    i := 2\n    // Loop until we've found the largest prime factor\n    for i <= n {\n        // If n is divisible by i, then i is a factor\n        if n % i == 0 {\n            // Divide n by i to remove the factor\n            n = n / i\n        } else {\n            // If n is not divisible by i, then increment i\n            i++\n        }\n    }\n    // Return the largest prime factor\n    return i\n}\n"}
{"task_id": "Go/60", "generation": "\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n + SumToN(n-1)\n}"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if len(stack) == 0 || stack[len(stack)-1] != '(' {\n            return false\n        } else {\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n\tif len(xs) == 0 {\n\t\treturn []int{}\n\t}\n\tys := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tys[i-1] = xs[i] * i\n\t}\n\treturn ys\n}"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n}"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    if strings.HasSuffix(s, \"y\") {\n        count++\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    s := strconv.Itoa(x)\n    if shift > len(s) {\n        return Reverse(s)\n    }\n    return s[shift:] + s[:shift]\n}"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, c := range x {\n        if unicode.IsUpper(c) {\n            sum += int(c)\n        }\n    }\n    return sum\n}package kata\n\nimport (\n    \"unicode\"\n\n)"}
{"task_id": "Go/67", "generation": "\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t// Write your code here\n\t"}
{"task_id": "Go/68", "generation": "\n    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := math.MaxInt32\n    minIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < minEven {\n            minEven = v\n            minIndex = i\n        }\n    }\n    if minIndex == -1 {\n        return []int{}\n    }\n    return []int{minEven, minIndex}\n}"}
{"task_id": "Go/69", "generation": "\n\t// Create a map to store the frequency of each integer\n\tfreq := make(map[int]int)\n\n\t// Count the frequency of each integer in the list\n\tfor _, num := range lst {\n\t\tfreq[num]++\n\t}\n\n\t// Find the greatest integer that has a frequency greater than or equal to its value\n\tmax := -1\n\tfor num, count := range freq {\n\t\tif count >= num && num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\n\treturn max\n}"}
{"task_id": "Go/70", "generation": "\n    if len(lst) == 0 {\n        return lst\n    }\n    sort.Ints(lst)\n    result := make([]int, 0, len(lst))\n    for len(lst) > 0 {\n        result = append(result, lst[0])\n        lst = lst[1:]\n        if len(lst) > 0 {\n            result = append(result, lst[len(lst)-1])\n            lst = lst[:len(lst)-1]\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    s := (a + b + c) / 2\n    area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    return math.Round(area*100) / 100\n}\n"}
{"task_id": "Go/72", "generation": "\n    if len(q) == 0 {\n        return false\n    }\n    if len(q) == 1 {\n        if q[0] <= w {\n            return true\n        }\n        return false\n    }\n    if q[0] == q[len(q)-1] {\n        if q[0]+q[len(q)-1] <= w {\n            return WillItFly(q[1:len(q)-1], w)\n        }\n        return false\n    }\n    return false\n}"}
{"task_id": "Go/73", "generation": "\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] && arr[1] == arr[2] {\n            return 0\n        } else if arr[0] == arr[2] && arr[1] == arr[3] {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n            return 0\n        } else if arr[0] == arr[3] && arr[1] == arr[4] {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n            return 0\n        } else if arr[0] == arr[4] && arr[1] == arr[5] && arr[2] == arr[3] {\n            return 0\n        } else if arr[0] == arr[3] && arr[1] == arr[2] && arr[4] == arr[5] {\n            return 0\n        } else if arr[0] == arr[2] && arr[1] == arr[3] && arr[4] == arr[5] {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] && arr[3] == arr[3] {\n            return 0\n        } else if arr[0] == arr[5] &&"}
{"task_id": "Go/74", "generation": "\n    var sum1, sum2 int\n    for _, v := range lst1 {\n        sum1 += len(v)\n    }\n    for _, v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return lst1\n    }\n}package kata\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc TestTotalMatch(t *testing.T) {\n\tfmt.Println(\"TotalMatch\")\n\tresult := TotalMatch([]string{}, []string{})\n\tif len(result) != 0 {\n\t\tt.Errorf(\"Expected %v, got %v\", []string{}, result)\n\t}\n\tresult = TotalMatch([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n\tif len(result) != 2 {\n\t\tt.Errorf(\"Expected %v, got %v\", []string{\"hI\", \"Hi\"}, result)\n\t}\n\tresult = TotalMatch([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n\tif len(result) != 2 {\n\t\tt.Errorf(\"Expected %v, got %v\", []string{\"hi\", \"admin\"}, result)\n\t}\n\tresult = TotalMatch([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n\tif len(result) != 3 {\n\t\tt.Errorf(\"Expected %v, got %v\", []string{\"hI\", \"hi\", \"hi\"}, result)\n\t}\n\tresult = TotalMatch([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n\tif len(result) != 1 {\n\t\tt.Errorf(\"Expected %v, got %v\", []string{\"4\"}, result)\n\t}\n\n}\n"}
{"task_id": "Go/75", "generation": "\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= a; i++ {\n\t\tif a%i == 0 {\n\t\t\tif i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13 || i == 17 || i == 19 || i == 23 || i == 29 || i == 31 || i == 37 || i == 41 || i == 43 || i == 47 || i == 53 || i == 59 || i == 61 || i == 67 || i == 71 || i == 73 || i == 79 || i == 83 || i == 89 || i == 97 {\n\t\t\t\ta = a / i\n\t\t\t\ti = 1\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if x%n != 0 {\n        return false\n    }\n    return IsSimplePower(x/n,n)\n}\n// 2. Write a function that returns the number of occurrences of a given element in a slice.\nfunc CountOccurrences(slice []int, element int) int {\n    count := 0\n    for _, value := range slice {\n        if value == element {\n            count++\n        }\n    }\n    return count\n}\n// 3. Write a function that returns the sum of all elements in a slice.\nfunc Sum(slice []int) int {\n    sum := 0\n    for _, value := range slice {\n        sum += value\n    }\n    return sum\n}\n// 4. Write a function that returns the average of all elements in a slice.\nfunc Average(slice []int) float64 {\n    sum := Sum(slice)\n    return float64(sum) / float64(len(slice))\n}\n// 5. Write a function that returns the maximum element in a slice.\nfunc Max(slice []int) int {\n    max := slice[0]\n    for _, value := range slice {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n// 6. Write a function that returns the minimum element in a slice.\nfunc Min(slice []int) int {\n    min := slice[0]\n    for _, value := range slice {\n        if value < min {\n            min = value\n        }\n    }\n    return min\n}\n// 7. Write a function that returns the median of all elements in a slice.\nfunc Median(slice []int) float64 {\n    sortedSlice := make([]int, len(slice))\n    copy(sortedSlice, slice)\n    sort.Ints(sortedSlice)\n    if len(sortedSlice)%2 == 0 {\n        return float64(sortedSlice[len(sortedSlice)/2-1]+sortedSlice[len(sortedSlice)/2]) / 2\n    } else {\n        return float64(sortedSlice[len(sortedSlice)/2])\n    }\n}\n// 8. Write a function that returns the mode of all elements in a slice.\nfunc Mode(slice []int) int {\n    frequencyMap := make(map[int]int)\n    for _, value := range slice {\n        frequencyMap[value]++\n    }\n    maxFrequency := 0\n    mode := 0\n    for key, value := range frequencyMap {\n        if value > maxFrequency {\n            maxFrequency = value"}
{"task_id": "Go/77", "generation": "\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    root := int(math.Pow(float64(a), 1/3))\n    return root*root*root == a\n}\n"}
{"task_id": "Go/78", "generation": "\n\tvar count int\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}package kata\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestHexKey(t *testing.T) {\n\tassert.Equal(t, 1, HexKey(\"AB\"))\n\tassert.Equal(t, 2, HexKey(\"1077E\"))\n\tassert.Equal(t, 4, HexKey(\"ABED1A33\"))\n\n\tassert.Equal(t, 6, HexKey(\"123456789ABCDEF0\"))\n\tassert.Equal(t, 2, HexKey(\"2020\"))\n"}
{"task_id": "Go/79", "generation": "\n\treturn fmt.Sprintf(\"db%bdb\", decimal)\n}"}
{"task_id": "Go/80", "generation": "\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/81", "generation": "\n\t// TODO: Implement this function\n\treturn nil\n}"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n// Write a function that takes a string and returns the number of vowels\n// in the string\n// Examples\n// CountVowels('Hello') == 2\n// CountVowels('abcdcba') == 2\n// CountVowels('kittens') == 3\n// CountVowels('orange') == 3\nfunc CountVowels(s string) int {\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"aeiouAEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n// Write a function that takes a string and returns the number of consonants\n// in the string\n// Examples\n// CountConsonants('Hello') == 3\n// CountConsonants('abcdcba') == 4\n// CountConsonants('kittens') == 5\n// CountConsonants('orange') == 4\nfunc CountConsonants(s string) int {\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", c) {\n            count++\n        }\n    }\n    return count\n}\n// Write a function that takes a string and returns the number of words\n// in the string\n// Examples\n// CountWords('Hello') == 1\n// CountWords('abcdcba') == 1\n// CountWords('kittens') == 1\n// CountWords('orange') == 1\n// CountWords('Hello world') == 2\n// CountWords('The quick brown fox jumps over the lazy dog') == 9\nfunc CountWords(s string) int {\n    words := strings.Fields(s)\n    return len(words)\n}\n// Write a function that takes a string and returns the number of unique\n// words in the string\n// Examples\n// CountUniqueWords('Hello') == 1\n// CountUniqueWords('abcdcba') == 1\n// CountUniqueWords('kittens') == 1\n// CountUniqueWords('orange') == 1\n// CountUniqueWords"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 2\n    }\n    return 18 * int(math.Pow(10, float64(n-2)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    // Convert the integer to binary string\n    binary := strconv.FormatInt(int64(N), 2)\n    \n    // Initialize a variable to store the sum of digits\n    sum := 0\n    \n    // Iterate through each digit in the binary string\n    for _, digit := range binary {\n        // Convert the digit to an integer and add it to the sum\n        sum += int(digit - '0')\n    }\n    \n    // Convert the sum to a binary string and return it\n    return strconv.FormatInt(int64(sum), 2)\n}"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n// 2. Write a function that takes a string as input and returns the number of vowels in the string.\n// \n// Examples:\n// CountVowels(\"Hello\") ==> 2\n// CountVowels(\"AEIOU\") ==> 5\nfunc CountVowels(str string) int {\n    count := 0\n    for _, c := range str {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U':\n            count++\n        }\n    }\n    return count\n}\n// 3. Write a function that takes a list of integers as input and returns the sum of all the even numbers in the list.\n// \n// Examples:\n// SumEven([1, 2, 3, 4, 5]) ==> 6\n// SumEven([2, 4, 6, 8, 10]) ==> 30\nfunc SumEven(lst []int) int {\n    sum := 0\n    for _, num := range lst {\n        if num%2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n// 4. Write a function that takes a string as input and returns the reverse of the string.\n// \n// Examples:\n// Reverse(\"Hello\") ==> \"olleH\"\n// Reverse(\"World\") ==> \"dlroW\"\nfunc Reverse(str string) string {\n    runes := []rune(str)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n// 5. Write a function that takes a list of integers as input and returns the maximum number in the list.\n// \n// Examples:\n// Max([1, 2, 3, 4, 5]) ==> 5\n// Max([5, 4, 3, 2, 1]) ==> 5\nfunc Max(lst []int) int {\n    max := lst[0]\n    for _, num := range lst {\n        if num > max"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        sortedWord := sortString(word)\n        words[i] = sortedWord\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc sortString(s string) string {\n    runes := []rune(s)\n    sort.Slice(runes, func(i, j int) bool {\n        return runes[i] < runes[j]\n    })\n    return string(runes)\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, v := range row {\n            if v == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}\n"}
{"task_id": "Go/88", "generation": "\n    copy := make([]int, len(array))\n    copy = append(copy, array...)\n    if (array[0]+array[len(array)-1])%2 == 0 {\n        sort.Slice(copy, func(i, j int) bool {\n            return copy[i] > copy[j]\n        })\n    } else {\n        sort.Slice(copy, func(i, j int) bool {\n            return copy[i] < copy[j]\n        })\n    }\n    return copy\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create a map to store the rotation of the alphabet\n    rotation := make(map[rune]rune)\n    for i := 0; i < 26; i++ {\n        rotation['a'+rune(i)] = 'a'+rune((i+4)%26)\n        rotation['A'+rune(i)] = 'A'+rune((i+4)%26)\n    }\n\n    // Create a new string to store the encrypted message\n    encrypted := \"\"\n    for _, c := range s {\n        // If the character is not in the rotation map, add it to the encrypted message as is\n        if _, ok := rotation[c]; !ok {\n            encrypted += string(c)\n        } else {\n            // Otherwise, add the rotated character to the encrypted message\n            encrypted += string(rotation[c])\n        }\n    }\n\n    return encrypted\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != lst[i-1] {\n            return lst[i]\n        }\n    }\n    return nil\n}"}
{"task_id": "Go/91", "generation": "\n    // Split the string into sentences\n    sentences := regexp.MustCompile(`[.?!]\\s*`).Split(S, -1)\n    \n    // Count the number of sentences that start with \"I\"\n    count := 0\n    for _, sentence := range sentences {\n        if sentence != \"\" && sentence[0] == 'I' {\n            count++\n        }\n    }\n    \n    return count\n}\n"}
{"task_id": "Go/92", "generation": "\n    return (x as! Int) + (y as! Int) == (z as! Int) || (x as! Int) + (z as! Int) == (y as! Int) || (y as! Int) + (z as! Int) == (x as! Int)\n}"}
{"task_id": "Go/93", "generation": "\n    encoded := \"\"\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n            if strings.ContainsRune(\"aeiou\", char) {\n                encoded += string(char - 32 + 2)\n            } else {\n                encoded += string(char - 32)\n            }\n        } else if char >= 'A' && char <= 'Z' {\n            if strings.ContainsRune(\"AEIOU\", char) {\n                encoded += string(char + 2)\n            } else {\n                encoded += string(char)\n            }\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}\n"}
{"task_id": "Go/94", "generation": "\n    maxPrime := 0\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for _, digit := range strconv.Itoa(n) {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n    var firstCase rune\n    for key := range dict {\n        if keyStr, ok := key.(string); ok {\n            if firstCase == 0 {\n                firstCase = []rune(keyStr)[0]\n            } else {\n                if strings.ToLower(keyStr) != keyStr && strings.ToUpper(keyStr) != keyStr {\n                    return false\n                }\n                if strings.ToLower(string(firstCase)) != string(firstCase) && strings.ToUpper(string(firstCase)) != string(firstCase) {\n                    return false\n                }\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n\tif n <= 1 {\n\t\treturn []int{}\n\t}\n\tprimes := []int{}\n\tfor i := 2; i < n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a%10 * b%10)))\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    // Convert the string to a float64\n    num, _ := strconv.ParseFloat(value, 64)\n    \n    // Round the number to the nearest integer\n    rounded := math.Round(num)\n    \n    // Convert the rounded number back to an integer\n    result := int(rounded)\n    \n    // If the number is equidistant from two integers, round it away from zero\n    if math.Abs(num-rounded) == 0.5 {\n        if num > 0 {\n            result++\n        } else {\n            result--\n        }\n    }\n    \n    return result\n}"}
{"task_id": "Go/100", "generation": "\n    stones := make([]int, n)\n    stones[0] = n\n    for i := 1; i < n; i++ {\n        if n%2 == 0 {\n            stones[i] = stones[i-1] + 2\n        } else {\n            stones[i] = stones[i-1] + 2\n        }\n    }\n    return stones\n}"}
{"task_id": "Go/101", "generation": "\n    // Split the string into words using a regular expression that matches commas or spaces\n    words := strings.Split(s, \"[, ]\")\n    // Return the array of words\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif x > y {\n\t\treturn -1\n\t}\n\tif x%2 == 0 {\n\t\treturn x\n\t}\n\treturn x + 1\n}"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    avg := math.Round(float64(n+m) / 2)\n    return fmt.Sprintf(\"0b%b\", int(avg))\n}"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            continue\n        }\n        result = append(result, num)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            return true\n        }\n        num /= 10\n    }\n    return false\n}\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result, \"One\")\n        case 2:\n            result = append(result, \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n        case 8:\n            result = append(result, \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return result\n}"}
{"task_id": "Go/106", "generation": "\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = factorial(i + 1)\n\t\t} else {\n\t\t\tresult[i] = sum(i + 1)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n + sum(n-1)\n}"}
{"task_id": "Go/107", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\nfunc isPalindrome(x int) bool {\n    s := strconv.Itoa(x)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    absNum := int(math.Abs(float64(num)))\n    for absNum > 0 {\n        digit := absNum % 10\n        sum += digit\n        absNum /= 10\n    }\n    if num < 0 {\n        sum = -sum\n    }\n    return sum\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    minIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    rotated := append(arr[minIndex:], arr[:minIndex]...)\n    for i := 1; i < len(rotated); i++ {\n        if rotated[i] < rotated[i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/110", "generation": "\n\t// Write your code here\n\treturn \"\"\n}"}
{"task_id": "Go/111", "generation": "\n    // Create a map to store the count of each letter\n    letterCount := make(map[rune]int)\n    // Split the string into a slice of words\n    words := strings.Fields(test)\n    // Iterate over each word in the slice\n    for _, word := range words {\n        // Iterate over each letter in the word\n        for _, letter := range word {\n            // Increment the count of the letter in the map\n            letterCount[letter]++\n        }\n    }\n    // Create a map to store the letters with the most repetition\n    mostRepeated := make(map[rune]int)\n    // Get the maximum count from the letterCount map\n    maxCount := 0\n    for _, count := range letterCount {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n    // Iterate over the letterCount map and add the letters with the maximum count to the mostRepeated map\n    for letter, count := range letterCount {\n        if count == maxCount {\n            mostRepeated[letter] = count\n        }\n    }\n    return mostRepeated\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c, char) {\n            result += string(char)\n        }\n    }\n    isPalindrome := result == Reverse(result)\n    return [2]interface{}{result, isPalindrome}\n}\n\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, s := range lst {\n        count := 0\n        for _, c := range s {\n            if (c-'0')%2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for i := 0; i < len(nums); i++ {\n        currentSum += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    // Initialize the number of times you need to lower the buckets\n    times := 0\n\n    // Iterate through each row in the grid\n    for _, row := range grid {\n        // Initialize the number of units of water in the current row\n        water := 0\n\n        // Iterate through each well in the current row\n        for _, well := range row {\n            // If the well contains water, add it to the current row's water count\n            water += well\n        }\n\n        // Calculate the number of times you need to lower the buckets for the current row\n        times += int(math.Ceil(float64(water) / float64(capacity)))\n    }\n\n    // Return the total number of times you need to lower the buckets\n    return times\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        if n&1 == 1 {\n            count++\n        }\n        n >>= 1\n    }\n    return count\n}"}
{"task_id": "Go/117", "generation": "\n    var result []string\n    words := strings.Fields(s)\n    for _, word := range words {\n        consonants := 0\n        for _, c := range word {\n            if !strings.ContainsRune(\"aeiouAEIOU\", c) {\n                consonants++\n            }\n        }\n        if consonants == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n            if !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n                return string(word[i])\n            }\n        }\n    }\n    return \"\"\n}"}
{"task_id": "Go/119", "generation": "\n\t// TODO: Implement this function\n\treturn \"\"\n}"}
{"task_id": "Go/120", "generation": "\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        sort.Ints(arr)\n        return arr\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}package kata"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if arr[i] < 10 {\n            sum += arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    collatz := []int{n}\n    for n != 1 {\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n        collatz = append(collatz, n)\n    }\n    sort.Slice(collatz, func(i, j int) bool {\n        return collatz[i] < collatz[j]\n    })\n    var oddCollatz []int\n    for _, num := range collatz {\n        if num%2 != 0 {\n            oddCollatz = append(oddCollatz, num)\n        }\n    }\n    return oddCollatz\n}"}
{"task_id": "Go/124", "generation": "\n    // Check if the date string is empty\n    if date == \"\" {\n        return false\n    }\n\n    // Split the date string into month, day, and year\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return false\n    }\n\n    year, err := strconv.Atoi(parts[2])\n    if err != nil {\n        return false\n    }\n\n    // Check if the month is valid\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    // Check if the day is valid\n    if day < 1 || day > 31 {\n        return false\n    }\n\n    // Check if the year is valid\n    if year < 1 {\n        return false\n    }\n\n    // Check if the day is valid for the given month\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, char := range txt {\n            if char >= 'a' && char <= 'z' && (int(char-'a')%2 == 1) {\n                count++\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 1 {\n        return true\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return false\n        }\n    }\n    return true\n}package kata"}
{"task_id": "Go/127", "generation": "\n    // Write your code here\n    return \"\"\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    var prod int\n    var sign int\n    for _, num := range arr {\n        if num == 0 {\n            return 0\n        }\n        if num < 0 {\n            sign *= -1\n        }\n        prod *= num\n    }\n    return sign * prod\n}\n"}
{"task_id": "Go/129", "generation": "\n\tn := len(grid)\n\t// dp[i][j][k] = the minimum path of length k that ends at (i, j)\n\tdp := make([][][]int, n)\n\tfor i := range dp {\n\t\tdp[i] = make([][]int, n)\n\t\tfor j := range dp[i] {\n\t\t\tdp[i][j] = make([]int, k+1)\n\t\t\tfor l := range dp[i][j] {\n\t\t\t\tdp[i][j][l] = math.MaxInt32\n\t\t\t}\n\t\t}\n\t}\n\t// initialize dp\n\tfor i := range grid {\n\t\tfor j := range grid[i] {\n\t\t\tdp[i][j][0] = grid[i][j]\n\t\t}\n\t}\n\t// dp\n\tfor l := 1; l <= k; l++ {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tfor j := 0; j < n; j++ {\n\t\t\t\tfor _, d := range dirs {\n\t\t\t\t\tni, nj := i+d[0], j+d[1]\n\t\t\t\t\tif ni < 0 || ni >= n || nj < 0 || nj >= n {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tdp[i][j][l] = min(dp[i][j][l], dp[ni][nj][l-1])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// find the minimum path\n\tminPath := math.MaxInt32\n\tminI, minJ := 0, 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif dp[i][j][k] < minPath {\n\t\t\t\tminPath = dp[i][j][k]\n\t\t\t\tminI, minJ = i, j\n\t\t\t}\n\t\t}\n\t}\n\t// construct the path\n\tpath := make([]int, k+1)\n\tpath[0] = minPath\n\tfor l := k; l > 0; l-- {\n\t\tfor _, d := range dirs {\n\t\t\tni, nj := minI+d[0], minJ+d[1]\n\t\t\tif ni < 0 || ni >= n || nj < 0 || nj >= n {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif dp[ni][nj][l-1] == minPath {\n\t\t\t\tminPath = dp[ni][nj][l-1]\n\t\t\t\tminI, minJ = ni, nj\n"}
{"task_id": "Go/130", "generation": "\n\tif n == 0 {\n\t\treturn []float64{3}\n\t}\n\tif n == 1 {\n\t\treturn []float64{3, 1}\n\t}\n\tif n == 2 {\n\t\treturn []float64{3, 1, 2}\n\t}\n\tif n == 3 {\n\t\treturn []float64{3, 1, 2, 8}\n\t}\n\tif n == 4 {\n\t\treturn []float64{3, 1, 2, 8, 3}\n\t}\n\tif n == 5 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14}\n\t}\n\tif n == 6 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5}\n\t}\n\tif n == 7 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23}\n\t}\n\tif n == 8 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10}\n\t}\n\tif n == 9 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10, 38}\n\t}\n\tif n == 10 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10, 38, 15}\n\t}\n\tif n == 11 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10, 38, 15, 59}\n\t}\n\tif n == 12 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10, 38, 15, 59, 26}\n\t}\n\tif n == 13 {\n\t\treturn []float64{3, 1, 2, 8, 3, 14, 5, 23, 10, 38, 15, 59, 26, 98}\n\t}\n\tif n == 14 {\n\t\treturn []float64{3, "}
{"task_id": "Go/131", "generation": "\n    product := 1\n    isAllEven := true\n    for n > 0 {\n        digit := n % 10\n        if digit%2 != 0 {\n            product *= digit\n            isAllEven = false\n        }\n        n /= 10\n    }\n    if isAllEven {\n        return 0\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n\topen := 0\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\topen++\n\t\t} else {\n\t\t\topen--\n\t\t}\n\t\tif open < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn open > 0\n}"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, num := range lst {\n        sum += int(math.Pow(math.Ceil(num), 2))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n    if len(txt) > 1 && txt[len(txt)-2] == ' ' {\n        return false\n    }\n    return true\n}\n"}
{"task_id": "Go/135", "generation": "\n    if len(arr) == 0 {\n        return -1\n    }\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i - 1\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var a, b interface{}\n    var min, max int\n    for _, v := range lst {\n        if v < 0 {\n            if v > min || min == 0 {\n                min = v\n            }\n        } else if v > 0 {\n            if v < max || max == 0 {\n                max = v\n            }\n        }\n    }\n    if min == 0 {\n        a = nil\n    } else {\n        a = min\n    }\n    if max == 0 {\n        b = nil\n    } else {\n        b = max\n    }\n    return [2]interface{}{a, b}\n}package kata\n\nimport (\n    \"testing\"\n)\n\nfunc TestLargestSmallestIntegers(t *testing.T) {\n    tests := []struct {\n        name string\n        lst []int\n        want [2]interface{}\n    }{\n        {\"basic\", []int{2, 4, 1, 3, 5, 7}, [2]interface{}{nil, 1}},\n        {\"empty\", []int{}, [2]interface{}{nil, nil}},\n        {\"zero\", []int{0}, [2]interface{}{nil, nil}},\n        {\"all_negative\", []int{-1, -2, -3, -4, -5}, [2]interface{}{-1, nil}},\n        {\"all_positive\", []int{1, 2, 3, 4, 5}, [2]interface{}{nil, 1}},\n        {\"mixed\", []int{-1, 2, -3, 4, -5}, [2]interface{}{-5, 2}},\n    }\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            if got := LargestSmallestIntegers(tt.lst); got != tt.want {\n                t.Errorf(\"LargestSmallestIntegers() = %v, want %v\", got, tt.want)\n            }\n        })\n    }\n\n}\n"}
{"task_id": "Go/137", "generation": "\n    // Convert a and b to float64\n    var aFloat, bFloat float64\n    var err error\n\n    switch a := a.(type) {\n    case float64:\n        aFloat = a\n    case int:\n        aFloat = float64(a)\n    case string:\n        aFloat, err = strconv.ParseFloat(strings.ReplaceAll(a, \",\", \".\"), 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    switch b := b.(type) {\n    case float64:\n        bFloat = b\n    case int:\n        bFloat = float64(b)\n    case string:\n        bFloat, err = strconv.ParseFloat(strings.ReplaceAll(b, \",\", \".\"), 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    // Compare aFloat and bFloat\n    if aFloat > bFloat {\n        return a\n    } else if aFloat < bFloat {\n        return b\n    } else {\n        return nil\n    }\n}"}
{"task_id": "Go/138", "generation": "\n\tif n < 8 {\n\t\treturn false\n\t}\n\tif n%2 == 0 {\n\t\treturn true\n\t}\n\treturn n%2 == 1 && n%4 == 0\n}"}
{"task_id": "Go/139", "generation": "\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * SpecialFactorial(n-1)\n}"}
{"task_id": "Go/140", "generation": "\n\ttext = strings.ReplaceAll(text, \" \", \"_\")\n\ttext = strings.ReplaceAll(text, \"__\", \"-\")\n\ttext = strings.ReplaceAll(text, \"  \", \"-\")\n\treturn text\n}"}
{"task_id": "Go/141", "generation": "\n    // Check if there are more than three digits in the file's name\n    if strings.Count(file_name, \"0\") + strings.Count(file_name, \"1\") + strings.Count(file_name, \"2\") + strings.Count(file_name, \"3\") + strings.Count(file_name, \"4\") + strings.Count(file_name, \"5\") + strings.Count(file_name, \"6\") + strings.Count(file_name, \"7\") + strings.Count(file_name, \"8\") + strings.Count(file_name, \"9\") > 3 {\n        return \"No\"\n    }\n    // Check if the file's name contains exactly one dot '.'\n    if strings.Count(file_name, \".\") != 1 {\n        return \"No\"\n    }\n    // Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n    if !strings.ContainsAny(file_name[:strings.Index(file_name, \".\")], \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") || file_name[:strings.Index(file_name, \".\")] == \"\" {\n        return \"No\"\n    }\n    // Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name[strings.Index(file_name, \".\")+1:] != \"txt\" && file_name[strings.Index(file_name, \".\")+1:] != \"exe\" && file_name[strings.Index(file_name, \".\")+1:] != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    // Split the sentence into words\n    words := strings.Split(sentence, \" \")\n    \n    // Initialize an empty string to store the result\n    result := \"\"\n    \n    // Iterate over the words\n    for _, word := range words {\n        // Check if the length of the word is a prime number\n        if isPrime(len(word)) {\n            // If it is, append it to the result string\n            result += word + \" \"\n        }\n    }\n    \n    // Remove the trailing space and return the result\n    return strings.TrimSpace(result)\n}"}
{"task_id": "Go/144", "generation": "\n    // Split the fractions into numerator and denominator\n    xNum, xDenom := splitFraction(x)\n    nNum, nDenom := splitFraction(n)\n\n    // Multiply the numerators and denominators\n    newNum := xNum * nNum\n    newDenom := xDenom * nDenom\n\n    // Check if the new numerator is divisible by the new denominator\n    return newNum%newDenom == 0\n}"}
{"task_id": "Go/145", "generation": "\n    // Create a slice of pairs, where each pair consists of a number and its sum of digits\n    pairs := make([][2]int, len(nums))\n    for i, num := range nums {\n        pairs[i][0] = num\n        pairs[i][1] = sumDigits(num)\n    }\n\n    // Sort the pairs based on the sum of digits\n    sort.Slice(pairs, func(i, j int) bool {\n        return pairs[i][1] < pairs[j][1]\n    })\n\n    // Extract the numbers from the sorted pairs\n    sortedNums := make([]int, len(nums))\n    for i, pair := range pairs {\n        sortedNums[i] = pair[0]\n    }\n\n    return sortedNums\n}"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num) && isOddFirstAndLast(num) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc isOdd(num int) bool {\n    return num%2 != 0\n}\n\nfunc isOddFirstAndLast(num int) bool {\n    firstDigit := num\n    lastDigit := num % 10\n    for firstDigit >= 10 {\n        firstDigit /= 10\n    }\n    return isOdd(firstDigit) && isOdd(lastDigit)\n}\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i*i - i + 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tvar result []string\n\tfor i, planet := range planets {\n\t\tif planet == planet1 {\n\t\t\tfor j := i + 1; j < len(planets); j++ {\n\t\t\t\tif planets[j] == planet2 {\n\t\t\t\t\treturn result\n\t\t\t\t}\n\t\t\t\tresult = append(result, planets[j])\n\t\t\t}\n\t\t}\n\t\tif planet == planet2 {\n\t\t\tfor j := i - 1; j >= 0; j-- {\n\t\t\t\tif planets[j] == planet1 {\n\t\t\t\t\treturn result\n\t\t\t\t}\n\t\t\t\tresult = append(result, planets[j])\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}package kata\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)"}
{"task_id": "Go/149", "generation": "\n    // Create a new slice to store the strings with even lengths\n    evenLengthStrings := []string{}\n\n    // Iterate over the input slice\n    for _, str := range lst {\n        // Check if the length of the string is even\n        if len(str)%2 == 0 {\n            // If the length is even, add the string to the new slice\n            evenLengthStrings = append(evenLengthStrings, str)\n        }\n    }\n\n    // Sort the new slice by length and then alphabetically\n    sort.Slice(evenLengthStrings, func(i, j int) bool {\n        // Compare the lengths of the strings\n        if len(evenLengthStrings[i]) != len(evenLengthStrings[j]) {\n            return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n        }\n        // If the lengths are the same, compare the strings alphabetically\n        return evenLengthStrings[i] < evenLengthStrings[j]\n    })\n\n    // Return the sorted slice\n    return evenLengthStrings\n}\n"}
{"task_id": "Go/150", "generation": "\n\tif n == 2 {\n\t\treturn x\n\t}\n\tif n%2 == 0 {\n\t\treturn y\n\t}\n\tfor i := 3; i*i <= n; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && num == math.Floor(num) && num%2 != 0 {\n            sum += int(num * num)\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        result = append(result, int(math.Abs(float64(game[i]-guess[i]))))\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    var maxStrength float64 = math.Inf(-1)\n    var strongestExtension string\n    for _, extension := range extensions {\n        strength := 0.0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                strength++\n            } else if char >= 'a' && char <= 'z' {\n                strength--\n            }\n        }\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return class_name + \".\" + strongestExtension\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        a = a[1:] + a[0:1]\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    if num < 0 {\n        num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    roman := []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    values := []int{1, 5, 10, 50, 100, 500, 1000}\n    result := \"\"\n    for i := len(values) - 1; i >= 0; i-- {\n        if number >= values[i] {\n            result += strings.Repeat(roman[i], number/values[i])\n            number %= values[i]\n        }\n    }\n    return strings.ToLower(result)\n}\n"}
{"task_id": "Go/157", "generation": "\n\t// Sort the sides in ascending order\n\tsides := []int{a, b, c}\n\tsort.Ints(sides)\n\n\t// Check if the sum of the squares of the two smaller sides is equal to the\n\t// square of the largest side\n\treturn sides[0]*sides[0]+sides[1]*sides[1] == sides[2]*sides[2]\n}"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > maxUnique {\n            maxUnique = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}"}
{"task_id": "Go/159", "generation": "\n\tif need > remaining {\n\t\treturn []int{number + remaining, 0}\n\t}\n\treturn []int{number + need, remaining - need}\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n\t// Check if the string contains any letters\n\tcontainsLetter := false\n\tfor _, char := range s {\n\t\tif (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n\t\t\tcontainsLetter = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// If the string contains no letters, reverse the string\n\tif !containsLetter {\n\t\trunes := []rune(s)\n\t\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\t\trunes[i], runes[j] = runes[j], runes[i]\n\t\t}\n\t\treturn string(runes)\n\t}\n\n\t// If the string contains letters, reverse the case of each letter\n\trunes := []rune(s)\n\tfor i, char := range runes {\n\t\tif char >= 'a' && char <= 'z' {\n\t\t\trunes[i] = char - 'a' + 'A'\n\t\t} else if char >= 'A' && char <= 'Z' {\n\t\t\trunes[i] = char - 'A' + 'a'\n\t\t}\n\t}\n\treturn string(runes)\n}"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hash := md5.Sum([]byte(text))\n    return fmt.Sprintf(\"%x\", hash)\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n// 2. Write a function that takes a string and returns a new string with all\n// the vowels removed.\n// \n// For example:\n// RemoveVowels(\"Hello World\") => \"Hll Wrld\"\nfunc RemoveVowels(s string) string {\n    vowels := \"aeiouAEIOU\"\n    var result string\n    for _, c := range s {\n        if !strings.ContainsRune(vowels, c) {\n            result += string(c)\n        }\n    }\n    return result\n}\n// 3. Write a function that takes a string and returns a new string with all\n// the consonants removed.\n// \n// For example:\n// RemoveConsonants(\"Hello World\") => \"eo o\"\nfunc RemoveConsonants(s string) string {\n    consonants := \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result string\n    for _, c := range s {\n        if !strings.ContainsRune(consonants, c) {\n            result += string(c)\n        }\n    }\n    return result\n}\n// 4. Write a function that takes a string and returns a new string with all\n// the digits removed.\n// \n// For example:\n// RemoveDigits(\"Hello World123\") => \"Hello World\"\nfunc RemoveDigits(s string) string {\n    var result string\n    for _, c := range s {\n        if !unicode.IsDigit(c) {\n            result += string(c)\n        }\n    }\n    return result\n}\n// 5. Write a function that takes a string and returns a new string with all\n// the whitespace removed.\n// \n// For example:\n// RemoveWhitespace(\"Hello World\") => \"HelloWorld\"\nfunc RemoveWhitespace(s string) string {\n    var result string\n    for _, c := range s {\n        if !unicode.IsSpace(c) {\n            result += string(c)\n        }\n    }\n    return result\n}\n// 6. Write a function that takes a string and returns a new string with all\n// the punctuation removed.\n// \n// For example:\n// RemovePunctuation(\"Hello, World!\") => \"Hello World\"\nfunc RemovePunctuation(s string) string {\n    var result string\n    for _, c :="}
