{"task_id": "Go/0", "generation": "\n    for i, num1 := range numbers {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(num1-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/1", "generation": "\n    var groups []string\n    var currentGroup string\n    var openParens int\n\n    for _, c := range paren_string {\n        if c == '(' {\n            openParens++\n        } else if c == ')' {\n            openParens--\n        }\n\n        currentGroup += string(c)\n\n        if openParens == 0 {\n            groups = append(groups, currentGroup)\n            currentGroup = \"\"\n        }\n    }\n\n    return groups\n}"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, operation := range operations {\n\t\tbalance += operation\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"task_id": "Go/4", "generation": "\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\n    mad := 0.0\n    for _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n    mad /= float64(len(numbers))\n\n    return mad\n}"}
{"task_id": "Go/5", "generation": "\n    var result []int\n    for i, num := range numbers {\n        result = append(result, num)\n        if i < len(numbers)-1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    for _, group := range strings.Split(paren_string, \" \") {\n        level := 0\n        maxLevel := 0\n        for _, char := range group {\n            if char == '(' {\n                level++\n                if level > maxLevel {\n                    maxLevel = level\n                }\n            } else if char == ')' {\n                level--\n            }\n        }\n        levels = append(levels, maxLevel)\n    }\n    return levels\n}"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}"}
{"task_id": "Go/9", "generation": "\n    max := func(a, b int) int {\n        if a > b {\n            return a\n        }\n        return b\n    }\n\n    result := make([]int, len(numbers))\n    currentMax := numbers[0]\n\n    for i, num := range numbers {\n        if i == 0 {\n            result[i] = currentMax\n        } else {\n            currentMax = max(currentMax, num)\n            result[i] = currentMax\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes) - 1; i >= 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes) + string(runes[0:i+1])\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    var res string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n            res += \"1\"\n        }\n    }\n    return res\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}\n\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[0:i+1])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove the last space\n}"}
{"task_id": "Go/16", "generation": "\n    distinctChars := make(map[rune]bool)\n    for _, char := range str {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n}\n\n"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    for _, note := range strings.Split(music_string, \" \") {\n        switch note {\n        case \"o\":\n            result = append(result, 4)\n        case \"o|\":\n            result = append(result, 2)\n        case \".|\":\n            result = append(result, 1)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if strings.HasPrefix(str[i:], substring) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    numberMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numberList := strings.Split(numbers, \" \")\n    sort.Slice(numberList, func(i, j int) bool {\n        return numberMap[numberList[i]] < numberMap[numberList[j]]\n    })\n\n    return strings.Join(numberList, \" \")\n}"}
{"task_id": "Go/20", "generation": "\n\tsort.Float64s(numbers)\n\tminDiff := math.MaxFloat64\n\tresult := [2]float64{}\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tif diff := numbers[i+1] - numbers[i]; diff < minDiff {\n\t\t\tminDiff = diff\n\t\t\tresult[0] = numbers[i]\n\t\t\tresult[1] = numbers[i+1]\n\t\t}\n\t}\n\treturn result\n}\n\n"}
{"task_id": "Go/21", "generation": "\n\tmin := numbers[0]\n\tmax := numbers[0]\n\n\t// Find the minimum and maximum values in the list\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\n\t// Rescale the list\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\n\treturn numbers\n}\n\n"}
{"task_id": "Go/22", "generation": "\n\tvar integers []int\n\tfor _, value := range values {\n\t\tif intValue, ok := value.(int); ok {\n\t\t\tintegers = append(integers, intValue)\n\t\t}\n\t}\n\treturn integers\n}"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= n; i++ {\n        count := 0\n        for n % i == 0 {\n            n /= i\n            count++\n        }\n        if count > 0 {\n            factors = append(factors, count)\n        }\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n\tcounts := make(map[int]int)\n\tresult := make([]int, 0)\n\n\tfor _, number := range numbers {\n\t\tcounts[number]++\n\t\tif counts[number] == 1 {\n\t\t\tresult = append(result, number)\n\t\t}\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/27", "generation": "\n    result := make([]rune, len(str))\n    for i, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result[i] = c - 'a' + 'A'\n        } else if 'A' <= c && c <= 'Z' {\n            result[i] = c - 'A' + 'a'\n        } else {\n            result[i] = c\n        }\n    }\n    return string(result)\n}"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, num := range l {\n        if num > 0 {\n            positive = append(positive, num)\n        }\n    }\n    return positive\n}"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/32", "generation": "\n    if len(xs)%2 != 0 {\n        panic(\"xs must have even number of coefficients\")\n    }\n    maxCoeff := xs[len(xs)-1]\n    if maxCoeff <= 0 {\n        panic(\"largest coefficient must be positive\")\n    }\n    for x := -100.0; x <= 100.0; x += 0.01 {\n        y := Poly(xs, x)\n        if math.Abs(y) <= 0.001 {\n            return x\n        }\n    }\n    return 0.0\n}"}
{"task_id": "Go/33", "generation": "\n    var third []int\n    for i, v := range l {\n        if i%3 == 0 {\n            third = append(third, v)\n        }\n    }\n    sort.Ints(third)\n\n    j := 0\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = third[j]\n            j++\n        }\n    }\n    return l\n}"}
{"task_id": "Go/34", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l {\n        m[item] = true\n    }\n\n    keys := make([]int, 0, len(m))\n    for key := range m {\n        keys = append(keys, key)\n    }\n\n    sort.Ints(keys)\n    return keys\n}"}
{"task_id": "Go/35", "generation": "\n\tmax := l[0]\n\tfor _, value := range l {\n\t\tif value > max {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}\n\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif (i%11 == 0 || i%13 == 0) && strings.Contains(strconv.Itoa(i), \"7\") {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/37", "generation": "\n\tevenIndices := make([]int, 0, len(l)/2)\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tresult := make([]int, len(l))\n\tresult[0] = evenIndices[0]\n\tj := 1\n\tfor i := 1; i < len(l); i += 2 {\n\t\tresult[i] = evenIndices[j]\n\t\tj++\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[len(runes)-1]}, runes[:len(runes)-1]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tk := 0\n\tcount := 0\n\tfor {\n\t\tk = i + j\n\t\ti = j\n\t\tj = k\n\t\tcount++\n\t\tif count == n {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn k\n}"}
{"task_id": "Go/40", "generation": "\n\tsort.Ints(l)\n\tfor i := 0; i < len(l)-2; i++ {\n\t\tleft := i + 1\n\t\tright := len(l) - 1\n\t\twhile left < right {\n\t\t\tsum := l[i] + l[left] + l[right]\n\t\t\tif sum == 0 {\n\t\t\t\treturn true\n\t\t\t} else if sum < 0 {\n\t\t\t\tleft++\n\t\t\t} else {\n\t\t\t\tright--\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n"}
{"task_id": "Go/41", "generation": "\n    // The number of collisions is always n-1, because each car is moving in the same direction.\n    return n - 1\n}"}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n\n"}
{"task_id": "Go/43", "generation": "\n\tseen := make(map[int]bool)\n\tfor _, num := range l {\n\t\tif seen[num] {\n\t\t\treturn true\n\t\t}\n\t\tseen[-num] = true\n\t}\n\treturn false\n}"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return string(rune(x + '0'))\n    }\n    return ChangeBase(x/base, base) + string(rune(x%base + '0'))\n}"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\treturn 2\n\t} else if n == 3 {\n\t\treturn 0\n\t}\n\n\ta := 0\n\tb := 0\n\tc := 2\n\td := 0\n\n\tfor i := 4; i <= n; i++ {\n\t\td = a + b + c + d\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t}\n\n\treturn d\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}"}
{"task_id": "Go/48", "generation": "\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n        if text[i] != text[length-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/49", "generation": "\n    return power(2,n,p)\n}\n\nfunc power(x int, y int, p int) int {\n    res := 1\n    x = x % p\n\n    if x == 0 {\n        return 0\n    }\n\n    while y > 0 {\n        if y % 2 != 0 {\n            res = (res * x) % p\n        }\n        y = y >> 1\n        x = (x * x) % p\n    }\n    return res\n}"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}"}
{"task_id": "Go/51", "generation": "\n    reg, _ := regexp.Compile(\"[aeiouAEIOU]\")\n    return reg.ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}"}
{"task_id": "Go/54", "generation": "\n\tmap0 := make(map[rune]bool)\n\tmap1 := make(map[rune]bool)\n\n\tfor _, c := range s0 {\n\t\tmap0[c] = true\n\t}\n\n\tfor _, c := range s1 {\n\t\tmap1[c] = true\n\t}\n\n\tif len(map0) != len(map1) {\n\t\treturn false\n\t}\n\n\tfor k := range map0 {\n\t\tif !map1[k] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n"}
{"task_id": "Go/55", "generation": "\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\ta, b := 0, 1\n\tfor i := 2; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\treturn b\n}"}
{"task_id": "Go/56", "generation": "\n    stack := []rune{}\n    for _, c := range brackets {\n        switch c {\n        case '<':\n            stack = append(stack, c)\n        case '>':\n            if len(stack) == 0 {\n                return false\n            }\n            lastOpenBracket := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if lastOpenBracket != '<' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    if len(l) < 2 {\n        return true\n    }\n\n    increase := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        if (increase && l[i] > l[i + 1]) || (!increase && l[i] < l[i + 1]) {\n            return false\n        }\n        if l[i] != l[i + 1] {\n            increase = l[i] < l[i + 1]\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m1 := make(map[int]bool)\n    for _, item := range l1 {\n        m1[item] = true\n    }\n\n    m2 := make(map[int]bool)\n    for _, item := range l2 {\n        m2[item] = true\n    }\n\n    common := make([]int, 0)\n    for key := range m1 {\n        if m2[key] {\n            common = append(common, key)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n\tmaxPrime := 2\n\tfor i := 2; i * i <= n; i++ {\n\t\tfor n % i == 0 {\n\t\t\tmaxPrime = i\n\t\t\tn /= i\n\t\t}\n\t}\n\tif n > 1 {\n\t\tmaxPrime = n\n\t}\n\treturn maxPrime\n}\n\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}"}
{"task_id": "Go/61", "generation": "\n    open := \"(\"\n    close := \")\"\n    stack := []rune{}\n\n    for _, c := range brackets {\n        if strings.ContainsRune(open, c) {\n            stack = append(stack, c)\n        } else if strings.ContainsRune(close, c) {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if last != '(' && c != ')' {\n                return false\n            }\n        }\n    }\n\n    return len(stack) == 0\n}"}
{"task_id": "Go/62", "generation": "\n\tfor i := len(xs) - 1; i > 0; i-- {\n\t\txs[i-1] *= xs[i]\n\t}\n\treturn xs[:len(xs)-1]\n}"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\ta, b, c := 0, 0, 1\n\t\tfor i := 3; i <= n; i++ {\n\t\t\ta, b, c = b, c, a+b+c\n\t\t}\n\t\treturn c\n\t}\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n    for _, c := range s {\n        if strings.ContainsRune(\"aeiou\", c) {\n            count++\n        }\n    }\n    if strings.HasSuffix(s, \"y\") {\n        count++\n    }\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    length := len(str)\n    if shift > length {\n        return reverse(str)\n    }\n    return str[length-shift:] + str[:length-shift]\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif 'A' <= c && c <= 'Z' {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}"}
{"task_id": "Go/67", "generation": "\n\tsplit := strings.Split(s, \" and \")\n\tapples, _ := strconv.Atoi(split[0])\n\toranges, _ := strconv.Atoi(split[1])\n\treturn n - (apples + oranges)\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEven := math.MaxInt64\n    smallestIndex := math.MaxInt64\n    smallestValue := math.MaxInt64\n    for index, value := range arr {\n        if value%2 == 0 && value < smallestEven {\n            smallestEven = value\n            smallestIndex = index\n            smallestValue = value\n        } else if value == smallestValue {\n            if index < smallestIndex {\n                smallestIndex = index\n            }\n        }\n    }\n    if smallestEven == math.MaxInt64 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestIndex}\n}"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n\n    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n            return i\n        }\n    }\n\n    return -1\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    var result []int\n    for len(lst) > 0 {\n        result = append(result, lst[0])\n        lst = lst[1:]\n        if len(lst) > 0 {\n            result = append(result, lst[len(lst)-1])\n            lst = lst[:len(lst)-1]\n        }\n    }\n    return result\n}"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        // Calculate the semi-perimeter\n        s := (a + b + c) / 2\n        // Calculate the area using Heron's formula\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for i := 0; i < len(q); i++ {\n        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/73", "generation": "\n\tchanges := 0\n\ti, j := 0, len(arr)-1\n\tfor i < j {\n\t\tif arr[i] != arr[j] {\n\t\t\tchanges++\n\t\t}\n\t\ti++\n\t\tj--\n\t}\n\treturn changes\n}"}
{"task_id": "Go/74", "generation": "\n    count1 := 0\n    count2 := 0\n    for _, v := range lst1 {\n        count1 += len(v)\n    }\n    for _, v := range lst2 {\n        count2 += len(v)\n    }\n    if count1 <= count2 {\n        return lst1\n    }\n    return lst2\n}\n\n"}
{"task_id": "Go/75", "generation": "\n\tprimes := []int{2, 3, 5}\n\tfor _, prime := range primes {\n\t\tif a%prime != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if x < 1 {\n        return false\n    }\n    for i := 2; i <= n; i++ {\n        if x == 1 {\n            return true\n        }\n        x = x / i\n    }\n    return false\n}"}
{"task_id": "Go/77", "generation": "\n    cubeRoot := math.Cbrt(float64(a))\n    return cubeRoot == math.Floor(cubeRoot)\n}"}
{"task_id": "Go/78", "generation": "\n\thexToDec := map[rune]int{\n\t\t'0': 0,\n\t\t'1': 1,\n\t\t'2': 2,\n\t\t'3': 3,\n\t\t'4': 4,\n\t\t'5': 5,\n\t\t'6': 6,\n\t\t'7': 7,\n\t\t'8': 8,\n\t\t'9': 9,\n\t\t'A': 10,\n\t\t'B': 11,\n\t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t'F': 15,\n\t\t'G': 16,\n\t\t'H': 17,\n\t\t'I': 18,\n\t\t'J': 19,\n\t\t'K': 20,\n\t\t'L': 21,\n\t\t'M': 22,\n\t\t'N': 23,\n\t\t'O': 24,\n\t\t'P': 25,\n\t\t'Q': 26,\n\t\t'R': 27,\n\t\t'S': 28,\n\t\t'T': 29,\n\t\t'U': 30,\n\t\t'V': 31,\n\t\t'W': 32,\n\t\t'X': 33,\n\t\t'Y': 34,\n\t\t'Z': 35,\n\t}\n\tcount := 0\n\tfor _, c := range num {\n\t\tif _, ok := hexToDec[c]; ok {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tdecimal = decimal / 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}"}
{"task_id": "Go/80", "generation": "\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/81", "generation": "\n\tvar letterGrades []string\n\tfor _, grade := range grades {\n\t\tif grade == 4.0 {\n\t\t\tletterGrades = append(letterGrades, \"A+\")\n\t\t} else if grade > 3.7 {\n\t\t\tletterGrades = append(letterGrades, \"A\")\n\t\t} else if grade > 3.3 {\n\t\t\tletterGrades = append(letterGrades, \"A-\")\n\t\t} else if grade > 3.0 {\n\t\t\tletterGrades = append(letterGrades, \"B+\")\n\t\t} else if grade > 2.7 {\n\t\t\tletterGrades = append(letterGrades, \"B\")\n\t\t} else if grade > 2.3 {\n\t\t\tletterGrades = append(letterGrades, \"B-\")\n\t\t} else if grade > 2.0 {\n\t\t\tletterGrades = append(letterGrades, \"C+\")\n\t\t} else if grade > 1.7 {\n\t\t\tletterGrades = append(letterGrades, \"C\")\n\t\t} else if grade > 1.3 {\n\t\t\tletterGrades = append(letterGrades, \"C-\")\n\t\t} else if grade > 1.0 {\n\t\t\tletterGrades = append(letterGrades, \"D+\")\n\t\t} else if grade > 0.7 {\n\t\t\tletterGrades = append(letterGrades, \"D\")\n\t\t} else if grade > 0.0 {\n\t\t\tletterGrades = append(letterGrades, \"D-\")\n\t\t} else {\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t}\n\t}\n\treturn letterGrades\n}\n\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 10\n    }\n\n    if n == 2 {\n        return 90\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        count += int(math.Pow(10, float64(i-1))) * 9 * int(math.Pow(10, float64(n-i)))\n    }\n\n    return count\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.Itoa(sum)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n\tsum := 0\n\tfor i := 0; i < len(lst); i += 2 {\n\t\tif lst[i]%2 == 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        sorted := strings.Split(word, \"\")\n        sort.Strings(sorted)\n        words[i] = strings.Join(sorted, \"\")\n    }\n    return strings.Join(words, \" \")\n}"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n\n    sum := array[0] + array[len(array)-1]\n\n    if sum%2 == 0 {\n        sort.Slice(array, func(i, j int) bool {\n            return array[j] > array[i]\n        })\n    } else {\n        sort.Ints(array)\n    }\n\n    return array\n}"}
{"task_id": "Go/89", "generation": "\n    // Create a map to hold the encrypted characters\n    encrypted := make(map[rune]rune)\n\n    // Loop over the string\n    for _, c := range s {\n        // If the character is a letter\n        if 'a' <= c && c <= 'z' {\n            // Shift down by two multiplied to two places\n            encrypted[c] = rune((int(c)-'a'+2*2)%26 + 'a')\n        } else if 'A' <= c && c <= 'Z' {\n            // Shift down by two multiplied to two places\n            encrypted[c] = rune((int(c)-'A'+2*2)%26 + 'A')\n        } else {\n            // If the character is not a letter, keep it as is\n            encrypted[c] = c\n        }\n    }\n\n    // Convert the map keys to a string and return\n    return strings.Map(func(r rune) rune {\n        return encrypted[r]\n    }, s)\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > lst[0] {\n            return lst[i]\n        }\n    }\n    return nil\n}"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`^I.*`)\n    sentences := re.FindAllString(S, -1)\n    return len(sentences)\n}"}
{"task_id": "Go/92", "generation": "\n\ta, b, c := x.(int), y.(int), z.(int)\n\treturn a == b+c || a == c+b || b == c+a\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    encodedMessage := \"\"\n\n    for _, char := range message {\n        charLower := strings.ToLower(string(char))\n        if strings.Contains(vowels, charLower) {\n            vowelIndex := strings.Index(alphabet, charLower)\n            if charLower == strings.ToLower(string(message[vowelIndex+2])) {\n                encodedMessage += string(char)\n            } else {\n                encodedMessage += string(char)\n            }\n        } else {\n            encodedMessage += string(char)\n        }\n    }\n\n    return encodedMessage\n}"}
{"task_id": "Go/94", "generation": "\n    var maxPrime int\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumOfDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumOfDigits(n int) int {\n    str := strconv.Itoa(n)\n    sum := 0\n    for _, r := range str {\n        digit, _ := strconv.Atoi(string(r))\n        sum += digit\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    allStrings := true\n    allLower := true\n    allUpper := true\n\n    for key, value := range dict {\n        strKey, ok := key.(string)\n        if !ok {\n            allStrings = false\n            continue\n        }\n\n        strValue, ok := value.(string)\n        if !ok {\n            allStrings = false\n            continue\n        }\n\n        if !strings.EqualFold(strKey, strValue) {\n            allLower = false\n            allUpper = false\n        }\n    }\n\n    return allStrings && allLower && allUpper\n}"}
{"task_id": "Go/96", "generation": "\n    if n < 2 {\n        return []int{}\n    }\n    primes := make([]bool, n)\n    for i := range primes {\n        primes[i] = true\n    }\n    primes[0] = false\n    primes[1] = false\n    for p := 2; p*p < n; p++ {\n        if primes[p] {\n            for i := p * p; i < n; i += p {\n                primes[i] = false\n            }\n        }\n    }\n    var result []int\n    for i, prime := range primes {\n        if prime {\n            result = append(result, i)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/97", "generation": "\n    product := 1\n    for a != 0 {\n        if a % 10 != 0 {\n            product *= a % 10\n        }\n        a /= 10\n    }\n    for b != 0 {\n        if b % 10 != 0 {\n            product *= b % 10\n        }\n        b /= 10\n    }\n    return product\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    vowels := \"AEIOU\"\n    for i := 0; i < len(s); i += 2 {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/99", "generation": "\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(math.Round(num))\n    } else {\n        return int(math.Ceil(num))\n    }\n}"}
{"task_id": "Go/100", "generation": "\n    var res []int\n    for i := 0; i < n; i++ {\n        if n % 2 == 0 {\n            res = append(res, n+2*i)\n        } else {\n            res = append(res, n+2*i)\n        }\n    }\n    return res\n}"}
{"task_id": "Go/101", "generation": "\n    return strings.Fields(s)\n}"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return ChooseNum(x, y-1)\n}"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := int(math.Round(float64(sum) / float64(m-n+1)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var res []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            res = append(res, num)\n        }\n    }\n    sort.Ints(res)\n    return res\n}\n\nfunc hasEvenDigit(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str); i++ {\n        if int(str[i]-'0')%2 == 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/105", "generation": "\n    var res []string\n    var oneToNine = []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var oneToNineReverse = []string{\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"}\n    var oneToNineMap = map[int]string{1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n    var oneToNineReverseMap = map[int]string{1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            res = append(res, oneToNineMap[num])\n        }\n    }\n\n    sort.Slice(res, func(i, j int) bool {\n        return len(res[i]) > len(res[j])\n    })\n\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n\n    for i, num := range arr {\n        if num >= 1 && num <= 9 {\n            res[i] = oneToNineReverseMap[num]\n        }\n    }\n\n    return res\n}"}
{"task_id": "Go/106", "generation": "\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = factorial(i)\n\t\t} else {\n\t\t\tresult[i] = sum(i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc factorial(n int) int {\n\tresult := 1\n\tfor i := 2; i <= n; i++ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc sum(n int) int {\n\tresult := 0\n\tfor i := 1; i <= n; i++ {\n\t\tresult += i\n\t}\n\treturn result\n}"}
{"task_id": "Go/107", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i % 2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num > 0 && sumOfDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    isNegative := false\n    if n < 0 {\n        isNegative = true\n        n = -n\n    }\n    for n > 0 {\n        digit := n % 10\n        if digit < 0 {\n            digit = -digit\n        }\n        sum += digit\n        n = n / 10\n    }\n    if isNegative {\n        return -sum\n    }\n    return sum\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i+1)%len(arr)] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/110", "generation": "\n    evenCount1, evenCount2 := 0, 0\n    for _, num := range lst1 {\n        if num % 2 == 0 {\n            evenCount1++\n        }\n    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCount2++\n        }\n    }\n    if evenCount1 > evenCount2 {\n        return \"NO\"\n    }\n    return \"YES\"\n}"}
{"task_id": "Go/111", "generation": "\n    counts := make(map[rune]int)\n    for _, char := range test {\n        if char != ' ' {\n            counts[char]++\n        }\n    }\n\n    maxCount := 0\n    for _, count := range counts {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n\n    result := make(map[rune]int)\n    for char, count := range counts {\n        if count == maxCount {\n            result[char] = count\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/112", "generation": "\n    var result string\n    var isPalindrome bool\n    for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n            result += string(char)\n        }\n    }\n    isPalindrome = isPalindromeCheck(result)\n    return [2]interface{}{result, isPalindrome}\n}\n\nfunc isPalindromeCheck(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, str := range lst {\n        count := 0\n        for _, c := range str {\n            if int(c-'0')%2 != 0 {\n                count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, count, i+1, count)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := 0\n    for _, num := range nums {\n        minSum += int(math.Abs(float64(num)))\n    }\n    return minSum\n}"}
{"task_id": "Go/115", "generation": "\n    m, n := len(grid), len(grid[0])\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n    }\n    for i := 1; i <= m; i++ {\n        for j := 1; j <= n; j++ {\n            if grid[i-1][j-1] == 1 {\n                dp[i][j] = dp[i-1][j] + 1\n            }\n        }\n    }\n    res := 0\n    for i := 1; i <= m; i++ {\n        for j := 1; j <= n; j++ {\n            if grid[i-1][j-1] == 1 {\n                res += int(math.Ceil(float64(dp[i][j]) / float64(capacity)))\n            }\n        }\n    }\n    return res\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        onesI, onesJ := countOnes(arr[i]), countOnes(arr[j])\n        if onesI == onesJ {\n            return arr[i] < arr[j]\n        }\n        return onesI < onesJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    result := make([]string, 0)\n\n    for _, word := range words {\n        count := 0\n        for _, c := range word {\n            if strings.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", c) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, word)\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 1; i-- {\n        if word[i] in vowels && word[i-1] not in vowels {\n            for j := i + 1; j < len(word); j++ {\n                if word[j] in vowels {\n                    return string(word[j])\n                }\n            }\n        }\n    }\n    return \"\"\n}"}
{"task_id": "Go/119", "generation": "\n    open, close := 0, 0\n    for _, s := range lst {\n        for i := 0; i < len(s); i++ {\n            if s[i] == '(' {\n                open++\n            } else {\n                close++\n            }\n            if close > open {\n                return \"No\"\n            }\n        }\n    }\n    if open != close {\n        return \"No\"\n    }\n    return \"Yes\"\n}"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[:k]\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var sequence []int\n    for n != 1 {\n        if n % 2 != 0 {\n            sequence = append(sequence, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    sequence = append(sequence, 1)\n    sort.Ints(sequence)\n    return sequence\n}"}
{"task_id": "Go/124", "generation": "\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n    if err != nil || month < 1 || month > 12 {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil || day < 1 {\n        return false\n    }\n\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day > 31 {\n            return false\n        }\n    case 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n    case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if c >= 'a' && c <= 'z' {\n                count++\n            }\n        }\n        return count\n    }\n}"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n\n    count := make(map[int]int)\n    for _, num := range lst {\n        if _, ok := count[num]; ok {\n            return false\n        }\n        count[num] = 1\n    }\n\n    prev := lst[0]\n    for _, num := range lst {\n        if num < prev {\n            return false\n        }\n        prev = num\n    }\n\n    return true\n}"}
{"task_id": "Go/127", "generation": "\n\tintersectionStart := max(interval1[0], interval2[0])\n\tintersectionEnd := min(interval1[1], interval2[1])\n\n\tif intersectionStart > intersectionEnd {\n\t\treturn \"NO\"\n\t}\n\n\tintersectionLength := intersectionEnd - intersectionStart + 1\n\n\tif isPrime(intersectionLength) {\n\t\treturn \"YES\"\n\t}\n\n\treturn \"NO\"\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    \n    product := 1\n    sum := 0\n    \n    for _, num := range arr {\n        product *= num\n        sum += int(math.Abs(float64(num)))\n    }\n    \n    return product * sum\n}"}
{"task_id": "Go/129", "generation": "\n\tn := len(grid)\n\tvisited := make([][]bool, n)\n\tfor i := range visited {\n\t\tvisited[i] = make([]bool, n)\n\t}\n\tminPath := make([]int, k)\n\tminPathIdx := 0\n\tminPath[0] = grid[0][0]\n\tvisited[0][0] = true\n\tdir := []int{0, 1, 0, -1, 0}\n\tnextCell := func(x, y int) (int, int) {\n\t\tfor d := 0; d < 4; d++ {\n\t\t\tnx, ny := x+dir[d], y+dir[d+1]\n\t\t\tif nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] {\n\t\t\t\treturn nx, ny\n\t\t\t}\n\t\t}\n\t\treturn -1, -1\n\t}\n\tdfs := func(x, y, step int) {\n\t\tif step == k {\n\t\t\treturn\n\t\t}\n\t\tx, y = nextCell(x, y)\n\t\tif x != -1 {\n\t\t\tvisited[x][y] = true\n\t\t\tif step > 0 {\n\t\t\t\tminPath[step] = minPath[step-1]\n\t\t\t} else {\n\t\t\t\tminPath[step] = grid[x][y]\n\t\t\t}\n\t\t\tminPathIdx = step\n\t\t\tdfs(x, y, step+1)\n\t\t\tvisited[x][y] = false\n\t\t}\n\t\tx, y = nextCell(x, y)\n\t\tif x != -1 {\n\t\t\tvisited[x][y] = true\n\t\t\tif step > 0 {\n\t\t\t\tminPath[step] = minPath[step-1]\n\t\t\t} else {\n\t\t\t\tminPath[step] = grid[x][y]\n\t\t\t}\n\t\t\tminPathIdx = step\n\t\t\tdfs(x, y, step+1)\n\t\t\tvisited[x][y] = false\n\t\t}\n\t\tx, y = nextCell(x, y"}
{"task_id": "Go/130", "generation": "\n    var res = make([]float64, n + 1)\n    res[0] = 3\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = float64(i) / 2\n        } else {\n            res[i] = res[i-1] + res[i-2] + res[i+1]\n        }\n    }\n    return res\n}"}
{"task_id": "Go/131", "generation": "\n    str := strconv.Itoa(n)\n    product := 1\n    hasOdd := false\n    for _, c := range str {\n        digit, _ := strconv.Atoi(string(c))\n        if digit % 2 != 0 {\n            product *= digit\n            hasOdd = true\n        }\n    }\n    if !hasOdd {\n        return 0\n    }\n    return product\n}"}
{"task_id": "Go/132", "generation": "\n\tstack := []rune{}\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\tstack = append(stack, c)\n\t\t} else if c == ']' {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, num := range lst {\n        num = math.Ceil(num)\n        sum += int(num) * int(num)\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := string(txt[len(txt)-1])\n    if lastChar == \" \" {\n        return false\n    }\n    if !strings.Contains(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n    return true\n}"}
{"task_id": "Go/135", "generation": "\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i] >= arr[i+1] {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var largestNegative, smallestPositive int\n    largestNegative, smallestPositive = math.MinInt64, math.MaxInt64\n    for _, num := range lst {\n        if num < 0 && num > largestNegative {\n            largestNegative = num\n        }\n        if num > 0 && num < smallestPositive {\n            smallestPositive = num\n        }\n    }\n    if largestNegative == math.MinInt64 {\n        return [2]interface{}{nil, smallestPositive}\n    }\n    if smallestPositive == math.MaxInt64 {\n        return [2]interface{}{largestNegative, nil}\n    }\n    return [2]interface{}{largestNegative, smallestPositive}\n}"}
{"task_id": "Go/137", "generation": "\n    var result interface{} = nil\n    switch a := a.(type) {\n    case int:\n        switch b := b.(type) {\n        case int:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case float64:\n            if float64(a) > b {\n                result = a\n            } else if float64(a) < b {\n                result = b\n            }\n        case string:\n            if strings.Contains(b.(string), \".\") {\n                bFloat, _ := strconv.ParseFloat(b.(string), 64)\n                if float64(a) > bFloat {\n                    result = a\n                } else if float64(a) < bFloat {\n                    result = b\n                }\n            } else {\n                if a > b {\n                    result = a\n                } else if a < b {\n                    result = b\n                }\n            }\n        }\n    case float64:\n        switch b := b.(type) {\n        case int:\n            if float64(a) > b {\n                result = a\n            } else if float64(a) < b {\n                result = b\n            }\n        case float64:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case string:\n            if strings.Contains(b.(string), \".\") {\n                if float64(a) > b {\n                    result = a\n                } else if float64(a) < b {\n                    result = b\n                }\n            } else {\n                if float64(a) > b {\n                    result = a\n                } else if float64(a) < b {\n                    result = b\n                }\n            }\n        }\n    case string:\n        switch b := b.(type) {\n        case int:\n            if strings.Contains(a, \".\") {\n                aFloat, _ := strconv.ParseFloat(a, 64)\n                if float64(b) > aFloat {\n                    result ="}
{"task_id": "Go/138", "generation": "\n    if n % 2 != 0 {\n        return false\n    }\n    for i := 2; i <= n/2; i += 2 {\n        for j := 2; j <= n/2; j += 2 {\n            if i + j == n {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}"}
{"task_id": "Go/140", "generation": "\n\tnewText := strings.Replace(text, \" \", \"_\", -1)\n\tnewText = strings.Replace(newText, \"__\", \"-\", -1)\n\tnewText = strings.Replace(newText, \"__\", \"-\", -1)\n\treturn newText\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    parts := strings.Split(file_name, \".\")\n    if len(parts) != 2 {\n        return \"No\"\n    }\n    name, ext := parts[0], parts[1]\n    if len(name) > 3 || !strings.Contains(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", string(name[0])) {\n        return \"No\"\n    }\n    if ext != \"txt\" && ext != \"exe\" && ext != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, val := range lst {\n        if i%3 == 0 {\n            sum += val * val\n        } else if i%4 == 0 {\n            sum += val * val * val\n        } else {\n            sum += val\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var result []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    gcd := gcd(xDenominator, nDenominator)\n\n    simplifiedNumerator := xNumerator * nNumerator / gcd\n    simplifiedDenominator := xDenominator * nDenominator / gcd\n\n    return simplifiedNumerator == xNumerator && simplifiedDenominator == xDenominator\n}\n\nfunc gcd(a, b int) int {\n    if b == 0 {\n        return a\n    }\n    return gcd(b, a%b)\n}"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        num int\n        sum int\n    }\n\n    pairs := make([]pair, len(nums))\n    for i, num := range nums {\n        pairs[i] = pair{num, sumOfDigits(num)}\n    }\n\n    sort.Slice(pairs, func(i, j int) bool {\n        if pairs[i].sum == pairs[j].sum {\n            return pairs[i].num < pairs[j].num\n        }\n        return pairs[i].sum < pairs[j].sum\n    })\n\n    sortedNums := make([]int, len(nums))\n    for i, pair := range pairs {\n        sortedNums[i] = pair.num\n    }\n\n    return sortedNums\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            str := strconv.Itoa(num)\n            if str[0] == '1' || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9' && str[len(str)-1] == '1' || str[len(str)-1] == '3' || str[len(str)-1] == '5' || str[len(str)-1] == '7' || str[len(str)-1] == '9' {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/147", "generation": "\n\ta := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\ta[i] = i*i - i + 1\n\t}\n\tcount := 0\n\tfor i := 0; i < n-2; i++ {\n\t\tfor j := i + 1; j < n-1; j++ {\n\t\t\tfor k := j + 1; k < n; k++ {\n\t\t\t\tif (a[i]+a[j]+a[k])%3 == 0 {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tresult := []string{}\n\n\tif Contains(planets, planet1) && Contains(planets, planet2) {\n\t\tindex1, index2 := -1, -1\n\t\tfor i, planet := range planets {\n\t\t\tif planet == planet1 {\n\t\t\t\tindex1 = i\n\t\t\t}\n\t\t\tif planet == planet2 {\n\t\t\t\tindex2 = i\n\t\t\t}\n\t\t}\n\n\t\tif index1 < index2 {\n\t\t\tresult = planets[index1+1 : index2]\n\t\t} else {\n\t\t\tresult = planets[index2+1 : index1]\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc Contains(slice []string, item string) bool {\n\tfor _, a := range slice {\n\t\tif a == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"task_id": "Go/149", "generation": "\n    var res []string\n    for _, v : := range lst {\n        if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    sort.Strings(res)\n    return res\n}"}
{"task_id": "Go/150", "generation": "\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num == float64(int(num)) && int(num) % 2 != 0 {\n            sum += int(num) * int(num)\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i := range game {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = int(math.Abs(float64(game[i] - guess[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    strongest := extensions[0]\n    strongestStrength := -1 * countUppercase(strongest) + countLowercase(strongest)\n\n    for _, extension := range extensions {\n        strength := countUppercase(extension) - countLowercase(extension)\n        if strength > strongestStrength {\n            strongest = extension\n            strongestStrength = strength\n        }\n    }\n\n    return class_name + \".\" + strongest\n}\n\nfunc countUppercase(s string) int {\n    count := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc countLowercase(s string) int {\n    count := 0\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/154", "generation": "\n    if len(a) != len(b) {\n        return false\n    }\n    b = b + b\n    if strings.Contains(b, a) {\n        return true\n    }\n    for i := 0; i < len(b) - len(a); i++ {\n        if strings.Contains(b[i:i+len(a)], a) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n        num = num / 10\n    }\n    return [2]int{evenCount, oddCount}\n}"}
{"task_id": "Go/156", "generation": "\n    vals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    nums := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    roman := \"\"\n    for i := 0; i < len(nums); i++ {\n        for number >= nums[i] {\n            number -= nums[i]\n            roman += vals[i]\n        }\n    }\n    return strings.ToLower(roman)\n}"}
{"task_id": "Go/157", "generation": "\n    // Write your code here\n    if a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        unique := len(uniqueChars(word))\n        if unique > maxUnique {\n            maxUnique = unique\n            maxWord = word\n        } else if unique == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n\nfunc uniqueChars(word string) map[rune]bool {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return unique\n}"}
{"task_id": "Go/159", "generation": "\n    if need <= remaining {\n        return []int{number + need, remaining - need}\n    } else {\n        return []int{number + remaining, 0}\n    }\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"//\":\n            result = int(math.Floor(float64(result) / float64(operand[i])))\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n    var res []rune\n    for _, c := range s {\n        if unicode.IsLetter(c) {\n            if unicode.IsLower(c) {\n                res = append(res, unicode.ToUpper(c))\n            } else {\n                res = append(res, unicode.ToLower(c))\n            }\n        } else {\n            res = append(res, c)\n        }\n    }\n    if len(res) == 0 {\n        return reverse(s)\n    }\n    return string(res)\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}"}
{"task_id": "Go/163", "generation": "\n    var res []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}"}
