{"task_id": "Go/0", "generation": "\n    for i, x := range numbers {\n        for _, y := range numbers[i+1:] {\n            if math.Abs(x-y) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/1", "generation": "\n\tgroups := []string{}\n\tstack := []rune{}\n\tcurrent_group := []rune{}\n\tfor _, c := range paren_string {\n\t\tif c == ' ' {\n\t\t\tcontinue\n\t\t}\n\t\tif c == '(' {\n\t\t\tstack = append(stack, c)\n\t\t\tcurrent_group = append(current_group, c)\n\t\t}\n\t\tif c == ')' {\n\t\t\tstack = stack[:len(stack)-1]\n\t\t\tcurrent_group = append(current_group, c)\n\t\t\tif len(stack) == 0 {\n\t\t\t\tgroups = append(groups, string(current_group))\n\t\t\t\tcurrent_group = []rune{}\n\t\t\t}\n\t\t}\n\t}\n\treturn groups\n}"}
{"task_id": "Go/2", "generation": "\n    _, decimal := math.Modf(number)\n    return decimal\n}"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    sum := 0.0\n    for _, num := range numbers {\n        sum += math.Abs(num - mean)\n    }\n    return sum / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n\tresult := make([]int, 0, len(numbers)*2-1)\n\tif len(numbers) > 0 {\n\t\tresult = append(result, numbers[0])\n\t\tfor _, num := range numbers[1:] {\n\t\t\tresult = append(result, delimeter, num)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/6", "generation": "\n    max_depths := []int{}\n    for _, group := range strings.Split(paren_string, \" \") {\n        max_depth := 0\n        current_depth := 0\n        for _, char := range group {\n            if string(char) == \"(\" {\n                current_depth += 1\n                if current_depth > max_depth {\n                    max_depth = current_depth\n                }\n            } else if string(char) == \")\" {\n                current_depth -= 1\n            }\n        }\n        max_depths = append(max_depths, max_depth)\n    }\n    return max_depths\n}"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        result[i] = max\n    }\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    runes := []rune(str)\n    for i := len(runes); i > 0; i-- {\n        if IsPalindrome(string(runes[0:i])) {\n            prefix := runes[0:i]\n            suffix := runes[i:]\n            reversed_prefix := make([]rune, 0)\n            for j := len(prefix) - 1; j >= 0; j-- {\n                reversed_prefix = append(reversed_prefix, prefix[j])\n            }\n            return str + string(reversed_prefix)\n        }\n    }\n    return \"\"\n}"}
{"task_id": "Go/11", "generation": "\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] != b[i] {\n            result += \"1\"\n        } else {\n            result += \"0\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}"}
{"task_id": "Go/14", "generation": "\n    prefixes := make([]string, 0)\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[0:i+1])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove trailing space\n}\n\n"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    m := make(map[rune]bool)\n    for _, char := range str {\n        m[char] = true\n    }\n    return len(m)\n}"}
{"task_id": "Go/17", "generation": "\n    notes := strings.Split(music_string, \" \")\n    beats := make([]int, len(notes))\n    for i, note := range notes {\n        switch note {\n        case \"o\":\n            beats[i] = 4\n        case \"o|\":\n            beats[i] = 2\n        case \".|\":\n            beats[i] = 1\n        }\n    }\n    return beats\n}"}
{"task_id": "Go/18", "generation": "\n\tcount := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tif str[i:i+len(substring)] == substring {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/19", "generation": "\n    nums := strings.Split(numbers, \" \")\n    sort.Slice(nums, func(i, j int) bool {\n        return numeralMap[nums[i]] < numeralMap[nums[j]]\n    })\n    return strings.Join(nums, \" \")\n}\n\nvar numeralMap = map[string]int{\n    \"zero\":  0,\n    \"one\":   1,\n    \"two\":   2,\n    \"three\": 3,\n    \"four\":  4,\n    \"five\":  5,\n    \"six\":   6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\":  9,\n}\n\nvar numeralMapReverse = map[int]string{\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\",\n}"}
{"task_id": "Go/20", "generation": "\n\tsort.Float64s(numbers)\n\tminDiff := math.MaxFloat64\n\tclosest := [2]float64{}\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tif diff := numbers[i+1] - numbers[i]; diff < minDiff {\n\t\t\tminDiff = diff\n\t\t\tclosest[0], closest[1] = numbers[i], numbers[i+1]\n\t\t}\n\t}\n\treturn closest\n}"}
{"task_id": "Go/21", "generation": "\n\tmin, max := MinMax(numbers)\n\tdiff := max - min\n\trescaled := make([]float64, len(numbers))\n\tfor i, num := range numbers {\n\t\trescaled[i] = (num - min) / diff\n\t}\n\treturn rescaled\n}"}
{"task_id": "Go/22", "generation": "\n\tresult := make([]int, 0)\n\tfor _, value := range values {\n\t\tif val, ok := value.(int); ok {\n\t\t\tresult = append(result, val)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}"}
{"task_id": "Go/24", "generation": "\n\tfor i := n - 1; i > 0; i-- {\n\t\tif n%i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            count := 0\n            for n%i == 0 {\n                n /= i\n                count++\n            }\n            for j := 0; j < count; j++ {\n                factors = append(factors, i)\n            }\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n\tresult := make([]int, 0)\n\tseen := make(map[int]bool)\n\n\tfor _, num := range numbers {\n\t\tif _, ok := seen[num]; !ok {\n\t\t\tseen[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/27", "generation": "\n    var result []rune\n    for _, c := range str {\n        if c >= 'a' && c <= 'z' {\n            result = append(result, c-32)\n        } else if c >= 'A' && c <= 'Z' {\n            result = append(result, c+32)\n        } else {\n            result = append(result, c)\n        }\n    }\n    return string(result)\n}"}
{"task_id": "Go/28", "generation": "\n\tvar result string\n\tfor _, str := range strings {\n\t\tresult += str\n\t}\n\treturn result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n\tresult := make([]int, 0)\n\tfor _, v := range l {\n\t\tif v > 0 {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}"}
{"task_id": "Go/32", "generation": "\n    n := len(xs)\n    if n % 2 == 1 {\n        panic(\"FindZero only works with even-length coefficient lists\")\n    }\n    if xs[n-1] == 0 {\n        panic(\"FindZero only works with non-zero last coefficient\")\n    }\n    return -float64(xs[n-2]) / float64(xs[n-1])\n}"}
{"task_id": "Go/33", "generation": "\n    divisibleByThree := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        divisibleByThree = append(divisibleByThree, l[i])\n    }\n    sort.Ints(divisibleByThree)\n\n    result := make([]int, len(l))\n    for i, j := 0, 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result[i] = divisibleByThree[j]\n            j++\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}"}
{"task_id": "Go/34", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l {\n        m[item] = true\n    }\n\n    result := make([]int, len(m))\n    i := 0\n    for key := range m {\n        result[i] = key\n        i++\n    }\n\n    sort.Ints(result)\n    return result\n}"}
{"task_id": "Go/35", "generation": "\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 11; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/37", "generation": "\n\tevenIndices := make([]int, 0, len(l)/2)\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tres := make([]int, len(l))\n\tfor i, j := 0, 0; i < len(l); i += 2 {\n\t\tres[i] = evenIndices[j]\n\t\tj++\n\t}\n\tfor i := 1; i < len(l); i += 2 {\n\t\tres[i] = l[i]\n\t}\n\treturn res\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[2]}, runes[0:2]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\tprimes := []int{2}\n\tfib := []int{0, 1}\n\ti := 3\n\tfor {\n\t\tfib = append(fib, fib[i-2]+fib[i-1])\n\t\tif isPrime(fib[i]) {\n\t\t\tprimes = append(primes, fib[i])\n\t\t\tif len(primes) == n {\n\t\t\t\treturn primes[n-1]\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n}\n\nfunc isPrime(n int) bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrt; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/40", "generation": "\n    sort.Ints(l)\n    for i := 0; i < len(l) - 2; i++ {\n        left, right := i + 1, len(l) - 1\n        for left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/41", "generation": "\n    return n * n\n}"}
{"task_id": "Go/42", "generation": "\n\tfor i := range l {\n\t\tl[i]++\n\t}\n\treturn l\n}"}
{"task_id": "Go/43", "generation": "\n\tset := make(map[int]bool)\n\tfor _, num := range l {\n\t\tif _, ok := set[-num]; ok {\n\t\t\treturn true\n\t\t}\n\t\tset[num] = true\n\t}\n\treturn false\n}"}
{"task_id": "Go/44", "generation": "\n    return strconv.FormatInt(int64(x), base)\n}"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n\tif n < 2 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 0\n\t}\n\n\ta, b, c, d := 0, 0, 2, 0\n\tvar next int\n\tfor i := 4; i <= n; i++ {\n\t\tnext = a + b + c + d\n\t\ta, b, c, d = b, c, d, next\n\t}\n\treturn next\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1] + l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}"}
{"task_id": "Go/48", "generation": "\n\tlength := len(text)\n\tfor i := 0; i < length/2; i++ {\n\t\tif text[i] != text[length-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/49", "generation": "\n    return (n%p+p)%p\n}"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a'+26)%26+'a')\n    }\n    return string(newRunes)\n}\n\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"(?i)[aeiou]\")\n    return re.ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}"}
{"task_id": "Go/54", "generation": "\n\tcounts := make(map[rune]int)\n\tfor _, c := range s0 {\n\t\tcounts[c]++\n\t}\n\tfor _, c := range s1 {\n\t\tcounts[c]--\n\t}\n\tfor _, count := range counts {\n\t\tif count != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/55", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\n\ta, b := 0, 1\n\tfor i := 2; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\treturn b\n}"}
{"task_id": "Go/56", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '<' {\n            stack = append(stack, b)\n        } else if b == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n\tincreasing, decreasing := true, true\n\n\tfor i := 0; i < len(l)-1; i++ {\n\t\tif l[i] < l[i+1] {\n\t\t\tdecreasing = false\n\t\t} else if l[i] > l[i+1] {\n\t\t\tincreasing = false\n\t\t}\n\t}\n\n\treturn increasing || decreasing\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l1 {\n        m[item] = true\n    }\n\n    common := []int{}\n    for _, item := range l2 {\n        if _, ok := m[item]; ok {\n            // Item found in both lists\n            common = append(common, item)\n            delete(m, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n\tlargest := 2\n\tfor n%2 == 0 {\n\t\tn = n / 2\n\t}\n\n\tsqrtN := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrtN; i += 2 {\n\t\tfor n%i == 0 {\n\t\t\tlargest = i\n\t\t\tn = n / i\n\t\t}\n\t}\n\n\tif n > 2 {\n\t\tlargest = n\n\t}\n\n\treturn largest\n}"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if b == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n\n    return len(stack) == 0\n}"}
{"task_id": "Go/62", "generation": "\n\tres := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tres[i-1] = xs[i] * i\n\t}\n\treturn res\n}"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\n\ta := 0\n\tb := 0\n\tc := 1\n\tvar d int\n\tfor i := 3; i <= n; i++ {\n\t\td = a + b + c\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t}\n\treturn d\n}"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    if shift > len(str) {\n        return Reverse(str)\n    }\n    return str[len(str)-shift:] + str[:len(str)-shift]\n}\n\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif 'A' <= c && c <= 'Z' {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tsplit := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(split[2])\n\toranges, _ := strconv.Atoi(split[4])\n\treturn n - apples - oranges\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEvenVal := math.MaxInt64\n    smallestEvenIndex := -1\n    for i, v := range arr {\n        if v % 2 == 0 && v < smallestEvenVal {\n            smallestEvenVal = v\n            smallestEvenIndex = i\n        }\n    }\n    if smallestEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{smallestEvenVal, smallestEvenIndex}\n}"}
{"task_id": "Go/69", "generation": "\n\tcounts := make(map[int]int)\n\tfor _, num := range lst {\n\t\tcounts[num]++\n\t}\n\tfor i := len(lst) - 1; i >= 0; i-- {\n\t\tif counts[lst[i]] >= lst[i] {\n\t\t\treturn lst[i]\n\t\t}\n\t}\n\treturn -1\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    for i := 0; i < len(lst)/2; i++ {\n        lst[i*2], lst[i*2+1] = lst[i*2+1], lst[i*2]\n    }\n    return lst\n}"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        // calculate semi-perimeter\n        s := (a + b + c) / 2\n        // calculate area using Heron's formula\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area * 100) / 100\n    } else {\n        return -1\n    }\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i, j := 0, len(q)-1; i < j; i, j = i+1, j-1 {\n        q[i], q[j] = q[j], q[i]\n    }\n    return q[0] == q[len(q)-1]\n}\n\n"}
{"task_id": "Go/73", "generation": "\n    n := len(arr)\n    changes := 0\n    for i := 0; i < n/2; i++ {\n        if arr[i] != arr[n-i-1] {\n            changes++\n        }\n    }\n    return changes\n}\n\n"}
{"task_id": "Go/74", "generation": "\n    var sum1, sum2 int\n    for _, v := range lst1 {\n        sum1 += len(v)\n    }\n    for _, v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else if sum2 < sum1 {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\n"}
{"task_id": "Go/75", "generation": "\n\tcount := 0\n\tfor i := 2; a != 1; i++ {\n\t\tfor a%i == 0 {\n\t\t\tcount++\n\t\t\ta = a / i\n\t\t}\n\t}\n\treturn count == 3\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n <= 1 || x <= 0 {\n        return false\n    }\n    for i := 2; i <= x/2; i++ {\n        if math.Pow(float64(n), float64(i)) == float64(x) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/77", "generation": "\n    x := int(math.Pow(float64(a), 1.0/3.0))\n    return x*x*x == a || (x+1)*(x+1)*(x+1) == a || (x-1)*(x-1)*(x-1) == a\n}"}
{"task_id": "Go/78", "generation": "\n\tprimeDigits := map[rune]bool{\n\t\t'2': true,\n\t\t'3': true,\n\t\t'5': true,\n\t\t'7': true,\n\t\t'B': true,\n\t\t'D': true,\n\t}\n\tcount := 0\n\tfor _, digit := range num {\n\t\tif _, ok := primeDigits[digit]; ok {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tbinary = fmt.Sprintf(\"%d%s\", decimal%2, binary)\n\t\tdecimal /= 2\n\t}\n\treturn \"db\" + binary + \"db\"\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var letterGrades []string\n    for _, grade := range grades {\n        switch {\n        case grade == 4.0:\n            letterGrades = append(letterGrades, \"A+\")\n        case grade > 3.7:\n            letterGrades = append(letterGrades, \"A\")\n        case grade > 3.3:\n            letterGrades = append(letterGrades, \"A-\")\n        case grade > 3.0:\n            letterGrades = append(letterGrades, \"B+\")\n        case grade > 2.7:\n            letterGrades = append(letterGrades, \"B\")\n        case grade > 2.3:\n            letterGrades = append(letterGrades, \"B-\")\n        case grade > 2.0:\n            letterGrades = append(letterGrades, \"C+\")\n        case grade > 1.7:\n            letterGrades = append(letterGrades, \"C\")\n        case grade > 1.3:\n            letterGrades = append(letterGrades, \"C-\")\n        case grade > 1.0:\n            letterGrades = append(letterGrades, \"D+\")\n        case grade > 0.7:\n            letterGrades = append(letterGrades, \"D\")\n        case grade > 0.0:\n            letterGrades = append(letterGrades, \"D-\")\n        default:\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}"}
{"task_id": "Go/82", "generation": "\n\tlength := len(s)\n\tif length < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= length; i++ {\n\t\tif length%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n\n    return int(math.Pow(10, float64(n-1)))\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        digit := N % 10\n        sum += digit\n        N /= 10\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n\tsum := 0\n\tfor i := 1; i < len(lst); i += 2 {\n\t\tif lst[i] % 2 == 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        sorted := []rune(word)\n        sort.Slice(sorted, func(i, j int) bool {\n            return sorted[i] < sorted[j]\n        })\n        words[i] = string(sorted)\n    }\n    return strings.Join(words, \" \")\n}"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return []int{}\n    }\n\n    sortedArray := make([]int, len(array))\n    copy(sortedArray, array)\n    sort.Ints(sortedArray)\n\n    if sortedArray[0] + sortedArray[len(sortedArray)-1] % 2 == 1 {\n        return sortedArray\n    }\n\n    for i := 0; i < len(sortedArray)/2; i++ {\n        sortedArray[i], sortedArray[len(sortedArray)-1-i] = sortedArray[len(sortedArray)-1-i], sortedArray[i]\n    }\n\n    return sortedArray\n}"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result += string((c-'a'+2*2)%26 + 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            result += string((c-'A'+2*2)%26 + 'A')\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n\n    sort.Ints(lst)\n\n    smallest := math.MaxInt64\n    secondSmallest := math.MaxInt64\n\n    for _, v := range lst {\n        if v < smallest {\n            secondSmallest = smallest\n            smallest = v\n        } else if v < secondSmallest && v != smallest {\n            secondSmallest = v\n        }\n    }\n\n    if secondSmallest == math.MaxInt64 {\n        return nil\n    }\n\n    return secondSmallest\n}"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`(?i)^I`)\n    sentences := re.Split(S, -1)\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) > 0 && (sentence[len(sentence)-1] == '.' || sentence[len(sentence)-1] == '?' || sentence[len(sentence)-1] == 'i') {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/92", "generation": "\n\txi, yi, zi := x.(int), y.(int), z.(int)\n\tif !(xi && yi && zi) {\n\t\treturn false\n\t}\n\tsum := y + z\n\treturn x == sum || y == sum || z == sum\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := map[rune]rune{\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U': 'W',\n    }\n\n    encoded := []rune{}\n\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' {\n            encoded = append(encoded, char^32)\n            if v, ok := vowels[char]; ok {\n                encoded = append(encoded, v)\n            }\n        } else {\n            encoded = append(encoded, char)\n        }\n    }\n\n    return string(encoded)\n}"}
{"task_id": "Go/94", "generation": "\n    max := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    for max > 1 {\n        if isPrime(max) {\n            return sumOfDigits(max)\n        }\n        max--\n    }\n    return 0\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    sqrt := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrt; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    lower := 0\n    upper := 0\n\n    for key := range dict {\n        if keyStr, ok := key.(string); ok {\n            if strings.ToLower(keyStr) == keyStr {\n                lower++\n            } else if strings.ToUpper(keyStr) == keyStr {\n                upper++\n            } else {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n\n    return lower == 0 || upper == 0\n}"}
{"task_id": "Go/96", "generation": "\n\tvar primes []int\n\tfor i := 2; i < n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n\nfunc isPrime(n int) bool {\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n > 1\n}"}
{"task_id": "Go/97", "generation": "\n    a = int(math.Abs(float64(a % 10)))\n    b = int(math.Abs(float64(b % 10)))\n    return a * b\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if strings.ContainsRune(\"AEIOU\", rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/99", "generation": "\n    floatValue, _ := strconv.ParseFloat(value, 64)\n    if floatValue > 0 {\n        return int(floatValue + math.Copysign(0.5, floatValue))\n    } else {\n        return int(floatValue - math.Copysign(0.5, floatValue))\n    }\n}"}
{"task_id": "Go/100", "generation": "\n    stones := make([]int, n)\n    for i := 0; i < n; i++ {\n        stones[i] = n + 2*i\n    }\n    return stones\n}"}
{"task_id": "Go/101", "generation": "\n    return strings.FieldsFunc(s, func(c rune) bool {\n        return c == ',' || c == ' '\n    })\n}"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n}\n\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    avg := math.Round(float64(n+m) / 2)\n    return fmt.Sprintf(\"0b%b\", int(avg))\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(n int) bool {\n    digits := strconv.Itoa(n)\n    for _, digit := range digits {\n        num, _ := strconv.Atoi(string(digit))\n        if num % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var validNums []int\n    names := []string{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            validNums = append(validNums, num)\n        }\n    }\n\n    sort.Ints(validNums)\n\n    for i := len(validNums) - 1; i >= 0; i-- {\n        result = append(result, names[validNums[i]])\n    }\n\n    return result\n}"}
{"task_id": "Go/106", "generation": "\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = factorial(i + 1)\n\t\t} else {\n\t\t\tresult[i] = sum(i + 1)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n\treturn n * (n + 1) / 2\n}"}
{"task_id": "Go/107", "generation": "\n    isPalindrome := func(s string) bool {\n        i, j := 0, len(s) - 1\n        for i < j {\n            if s[i] != s[j] {\n                return false\n            }\n            i++\n            j--\n        }\n        return true\n    }\n\n    count := [2]int{0, 0}\n    for i := 1; i <= n; i++ {\n        if isPalindrome(strconv.Itoa(i)) {\n            if i % 2 == 0 {\n                count[0]++\n            } else {\n                count[1]++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumOfDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumOfDigits(num int) int {\n    sum := 0\n    for num != 0 {\n        digit := num % 10\n        sum += digit\n        num /= 10\n    }\n    return sum\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if isNonDecreasing(arr, sortedArr) {\n            return true\n        }\n        arr = append(arr[len(arr)-1:], arr[:len(arr)-1]...)\n    }\n    return false\n}\n\nfunc isNonDecreasing(arr, sortedArr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != sortedArr[i] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/110", "generation": "\n\todd1, even1, odd2, even2 := 0, 0, 0, 0\n\tfor _, v := range lst1 {\n\t\tif v%2 == 0 {\n\t\t\teven1++\n\t\t} else {\n\t\t\todd1++\n\t\t}\n\t}\n\tfor _, v := range lst2 {\n\t\tif v%2 == 0 {\n\t\t\teven2++\n\t\t} else {\n\t\t\todd2++\n\t\t}\n\t}\n\tif odd1 > even2 {\n\t\treturn \"NO\"\n\t}\n\tdiff := even1 - even2\n\tif diff < 0 {\n\t\tdiff = -diff\n\t}\n\tif odd2 >= diff {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}"}
{"task_id": "Go/111", "generation": "\n    maxCount := 0\n    result := make(map[rune]int)\n    for _, letter := range test {\n        if letter == ' ' {\n            continue\n        }\n        count := strings.Count(test, string(letter))\n        if count > maxCount {\n            maxCount = count\n            result = make(map[rune]int)\n            result[letter] = count\n        } else if count == maxCount {\n            result[letter] = count\n        }\n    }\n    return result\n}"}
{"task_id": "Go/112", "generation": "\n    for _, v := range c {\n        s = strings.ReplaceAll(s, string(v), \"\")\n    }\n    r := []rune(s)\n    for i := 0; i < len(r)/2; i++ {\n        if r[i] != r[len(r)-1-i] {\n            return [2]interface{}{s, false}\n        }\n    }\n    return [2]interface{}{s, true}\n}"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for i, str := range lst {\n        count := 0\n        for _, c := range str {\n            if int(c-'0') % 2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, count, i, i))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    min := math.MaxInt64\n    sum := 0\n    for _, num := range nums {\n        sum += num\n        if sum < min {\n            min = sum\n        }\n        sum = minInt(sum, num)\n    }\n    return -min\n}\n\nfunc minInt(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"}
{"task_id": "Go/115", "generation": "\n    var total int\n    for _, row := range grid {\n        for _, cell := range row {\n            total += cell\n        }\n    }\n    return int(math.Ceil(float64(total) / float64(capacity)))\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        // Count the number of ones in the binary representation of each number\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n\n        // If the counts are equal, sort based on the decimal value\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n\n        // Otherwise, sort based on the count of ones\n        return countI < countJ\n    })\n\n    return arr\n}"}
{"task_id": "Go/117", "generation": "\n    var words []string\n    var buffer bytes.Buffer\n    var consonants int\n    var vowels int\n    for _, c := range s {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U':\n            vowels++\n        case ' ':\n            if consonants == n {\n                words = append(words, buffer.String())\n            }\n            buffer.Reset()\n            consonants = 0\n            vowels = 0\n        default:\n            consonants++\n            buffer.WriteRune(c)\n        }\n    }\n    if consonants == n {\n        words = append(words, buffer.String())\n    }\n    return words\n}"}
{"task_id": "Go/118", "generation": "\n    vowels := []byte{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i := len(word) - 2; i > 0; i-- {\n        if bytes.Contains(vowels, []byte{word[i]}) && \n           !bytes.Contains(vowels, []byte{word[i-1]}) && \n           !bytes.Contains(vowels, []byte{word[i+1]}) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n\n"}
{"task_id": "Go/119", "generation": "\n    // code here\n    return \"\"\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr[:k]\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    sort.Ints(collatz)\n    return collatz\n}"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n    month, err1 := strconv.Atoi(parts[0])\n    day, err2 := strconv.Atoi(parts[1])\n    year, err3 := strconv.Atoi(parts[2])\n    if err1 != nil || err2 != nil || err3 != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if 'a' <= c && c <= 'z' {\n                if int(c-'a')%2 == 1 {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n}"}
{"task_id": "Go/126", "generation": "\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    if start > end {\n        return \"NO\"\n    }\n    length := end - start + 1\n    if length < 2 {\n        return \"NO\"\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    sum := 0\n    prod := 1\n\n    for _, num := range arr {\n        if num < 0 {\n            prod *= -1\n        } else if num > 0 {\n            prod *= 1\n        }\n        sum += int(math.Abs(float64(num)))\n    }\n\n    return prod * sum\n}"}
{"task_id": "Go/129", "generation": "\n    \n}\n// Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n// \n// Example 1:\n// Input: \"babad\"\n// Output: \"bab\"\n// Note: \"aba\" is also a valid answer.\n// \n// Example 2:\n// Input: \"cbbd\"\n// Output: \"bb\"\n// \n// Example 3:\n// Input: \"a\"\n// Output: \"a\"\n// \n// Example 4:\n// Input: \"ac\"\n// Output: \"a\"\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// "}
{"task_id": "Go/130", "generation": "\n\tres := make([]float64, n+1)\n\tres[0] = 1\n\tif n > 0 {\n\t\tres[1] = 3\n\t}\n\tif n > 1 {\n\t\tres[2] = 2\n\t}\n\tfor i := 3; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tres[i] = 1 + float64(i)/2\n\t\t} else {\n\t\t\tres[i] = res[i-1] + res[i-2] + res[i+1]\n\t\t}\n\t}\n\treturn res\n}"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    if product == 1 {\n        return 0\n    }\n    return product\n}"}
{"task_id": "Go/132", "generation": "\n\tstack := []rune{}\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\tstack = append(stack, c)\n\t\t} else if c == ']' {\n\t\t\tif len(stack) == 0 || stack[len(stack)-1] != '[' {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) > 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        sum += math.Pow(math.Ceil(num), 2)\n    }\n    return int(sum)\n}"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n\n    lastChar := txt[len(txt) - 1]\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n\n    if len(txt) > 1 {\n        prevChar := txt[len(txt) - 2]\n        if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", prevChar) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/135", "generation": "\n    sort.Ints(arr)\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1] {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var largestNegative, smallestPositive *int\n    for _, v := range lst {\n        if v > 0 && (smallestPositive == nil || v < *smallestPositive) {\n            smallestPositive = &v\n        } else if v < 0 && (largestNegative == nil || v > *largestNegative) {\n            largestNegative = &v\n        }\n    }\n    return [2]interface{}{largestNegative, smallestPositive}\n}"}
{"task_id": "Go/137", "generation": "\n    var aFloat, bFloat float64\n    var err error\n\n    switch a := a.(type) {\n    case int:\n        aFloat = float64(a)\n    case float64:\n        aFloat = a\n    case string:\n        aFloat, err = strconv.ParseFloat(strings.Replace(a, \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Printf(\"Error: %v\\n\", err)\n            return nil\n        }\n    default:\n        fmt.Printf(\"Unsupported type: %T\\n\", a)\n        return nil\n    }\n\n    switch b := b.(type) {\n    case int:\n        bFloat = float64(b)\n    case float64:\n        bFloat = b\n    case string:\n        bFloat, err = strconv.ParseFloat(strings.Replace(b, \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Printf(\"Error: %v\\n\", err)\n            return nil\n        }\n    default:\n        fmt.Printf(\"Unsupported type: %T\\n\", b)\n        return nil\n    }\n\n    if aFloat > bFloat {\n        return a\n    } else if aFloat < bFloat {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n\tif n < 8 {\n\t\treturn false\n\t}\n\tif n%2 != 0 {\n\t\treturn false\n\t}\n\treturn true\n}"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= Factorial(i)\n    }\n    return result\n}\n\nfunc Factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n    return result\n}"}
{"task_id": "Go/140", "generation": "\n\tres := \"\"\n\tspaceCount := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tspaceCount++\n\t\t\tif spaceCount == 1 {\n\t\t\t\tres += \"_\"\n\t\t\t} else if spaceCount > 1 {\n\t\t\t\tres += \"-\"\n\t\t\t}\n\t\t} else {\n\t\t\tres += string(c)\n\t\t\tspaceCount = 0\n\t\t}\n\t}\n\treturn res\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if strings.Count(file_name, \".\") > 1 {\n        return \"No\"\n    }\n    parts := strings.Split(file_name, \".\")\n    if len(parts) != 2 {\n        return \"No\"\n    }\n    if len(parts[0]) == 0 || len(parts[1]) == 0 {\n        return \"No\"\n    }\n    if !((parts[0][0] >= 'a' && parts[0][0] <= 'z') || (parts[0][0] >= 'A' && parts[0][0] <= 'Z')) {\n        return \"No\"\n    }\n    if strings.ContainsAny(parts[0], \"0123456789\") && strings.Count(parts[0], \"\") > 3 {\n        return \"No\"\n    }\n    if parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i % 3 == 0 {\n            sum += int(math.Pow(float64(num), 2))\n        } else if i % 4 == 0 {\n            sum += int(math.Pow(float64(num), 3))\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Split(sentence, \" \")\n    primes := map[int]bool{\n        2: true, 3: true, 5: true, 7: true, 11: true, 13: true, 17: true, 19: true, 23: true, 29: true, 31: true, 37: true, 41: true, 43: true, 47: true, 53: true, 59: true, 61: true, 67: true, 71: true, 73: true, 79: true, 83: true, 89: true, 97: true,\n    }\n    var result []string\n    for _, word := range words {\n        if primes[len(word)] {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}"}
{"task_id": "Go/144", "generation": "\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    if xNumerator * nDenominator == nNumerator * xDenominator {\n        return true\n    }\n\n    return false\n}"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        idx, sum int\n        num      int\n    }\n\n    var arr []pair\n    for i, num := range nums {\n        sum := 0\n        for num != 0 {\n            digit := num % 10\n            sum += digit\n            num /= 10\n        }\n        arr = append(arr, pair{i, sum, nums[i]})\n    }\n\n    sort.Slice(arr, func(i, j int) bool {\n        if arr[i].sum != arr[j].sum {\n            return arr[i].sum < arr[j].sum\n        }\n        return arr[i].idx < arr[j].idx\n    })\n\n    for i := range arr {\n        nums[i] = arr[i].num\n    }\n    return nums\n}"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            strNum := strconv.Itoa(num)\n            firstDigit := strNum[0]\n            lastDigit := strNum[len(strNum)-1]\n            if firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9' &&\n                lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9' {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/147", "generation": "\n    if n < 3 {\n        return 0\n    }\n    count := make([]int, 3)\n    for i := 1; i <= n; i++ {\n        count[i*i-i+1%3]++\n    }\n    return count[0]*(count[0]-1)*(count[0]-2)/6 + count[1]*count[2]*(count[0])/2 + count[1]*(count[1]-1)*(count[1]-2)/6 + count[2]*(count[2]-1)*(count[2]-2)/6\n}\n\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tindex1, index2 := -1, -1\n\tfor i, v := range planets {\n\t\tif v == planet1 {\n\t\t\tindex1 = i\n\t\t}\n\t\tif v == planet2 {\n\t\t\tindex2 = i\n\t\t}\n\t}\n\tif index1 == -1 || index2 == -1 {\n\t\treturn []string{}\n\t}\n\tif index1 > index2 {\n\t\tindex1, index2 = index2, index1\n\t}\n\treturn planets[index1+1 : index2]\n}"}
{"task_id": "Go/149", "generation": "\n    var result []string\n    for _, word := range lst {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}"}
{"task_id": "Go/150", "generation": "\n\tif isPrime(n) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        if num > 0 && num == math.Floor(num) && int(num) % 2 != 0 {\n            sum += math.Pow(num, 2)\n        }\n    }\n    return int(sum)\n}"}
{"task_id": "Go/152", "generation": "\n    res := make([]int, len(game))\n    for i := range game {\n        res[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return res\n}"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.MinInt64\n    strongest_extension := \"\"\n    for _, extension := range extensions {\n        strength := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                strength++\n            } else if char >= 'a' && char <= 'z' {\n                strength--\n            }\n        }\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}"}
{"task_id": "Go/154", "generation": "\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[len(b)-1:] + b[:len(b)-1]\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    numStr := strconv.Itoa(num)\n    if num < 0 {\n        numStr = numStr[1:]\n    }\n    evenCount, oddCount := 0, 0\n    for _, digit := range numStr {\n        if int(digit-'0')%2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}"}
{"task_id": "Go/156", "generation": "\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    symbols := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    roman := \"\"\n    for i, value := range values {\n        for number >= value {\n            number -= value\n            roman += symbols[i]\n        }\n        if number == 0 {\n            break\n        }\n    }\n    return strings.Replace(roman, \"i\", \"ii\", -1)\n}"}
{"task_id": "Go/157", "generation": "\n\tif a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a {\n\t\treturn true\n\t}\n\treturn false\n}"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        unique := countUnique(word)\n        if unique > maxUnique {\n            maxUnique = unique\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc countUnique(word string) int {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return len(unique)\n}"}
{"task_id": "Go/159", "generation": "\n    if need <= remaining {\n        return []int{number + need, remaining - need}\n    } else {\n        return []int{number + remaining, 0}\n    }\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n\trunes := []rune(s)\n\tfor i := 0; i < len(runes); i++ {\n\t\tif unicode.IsLetter(runes[i]) {\n\t\t\tif unicode.IsLower(runes[i]) {\n\t\t\t\trunes[i] = unicode.ToUpper(runes[i])\n\t\t\t} else {\n\t\t\t\trunes[i] = unicode.ToLower(runes[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn string(runes)\n}"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}"}
