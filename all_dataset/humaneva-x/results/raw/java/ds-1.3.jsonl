{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int openBraces = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                openBraces++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                openBraces--;\n                currentGroup.append(c);\n                if (openBraces == 0) {\n                    result.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n}\n\n"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        double mean = mean(numbers);\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int level = 0;\n            int maxLevel = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    level++;\n                    if (level > maxLevel) {\n                        maxLevel = level;\n                    }\n                } else if (c == ')') {\n                    level--;\n                }\n            }\n            levels.add(maxLevel);\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        String rev = new StringBuilder(string).reverse().toString();\n        for (int i = rev.length() - 1; i >= 0; i--) {\n            if (isPalindrome(string + rev.substring(0, i + 1))) {\n                return string + rev.substring(0, i + 1);\n            }\n        }\n        return string + rev;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i <= n; i++) {\n            sb.append(i);\n            if(i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> uniqueChars = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            uniqueChars.add(Character.toLowerCase(string.charAt(i)));\n        }\n        return uniqueChars.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            String sub = string.substring(i, i + substring.length());\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        String[] numsArr = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        StringBuilder sb = new StringBuilder();\n\n        for(int i = 0; i < nums.length; i++){\n            for(int j = 0; j < numsArr.length; j++){\n                if(nums[i].equals(numsArr[j])){\n                    nums[i] = numsArr[j];\n                }\n            }\n        }\n\n        Arrays.sort(nums);\n\n        for(String num : nums){\n            sb.append(num).append(\" \");\n        }\n\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer number : numbers) {\n            countMap.put(number, countMap.getOrDefault(number, 0) + 1);\n        }\n        return numbers.stream()\n                .filter(number -> countMap.get(number) == 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        // convert the string to char array\n        char[] chars = string.toCharArray();\n\n        // iterate over the char array\n        for (int i = 0; i < chars.length; i++) {\n            // check if the char is a lowercase letter\n            if (Character.isLowerCase(chars[i])) {\n                // convert it to uppercase\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                // convert it to lowercase\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n\n        // convert the char array back to string\n        return new String(chars);\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List must have even number of coefficients\");\n        }\n        double maxCoefficient = Collections.max(xs);\n        if (maxCoefficient <= 0) {\n            throw new IllegalArgumentException(\"Largest coefficient must be greater than zero\");\n        }\n        List<Double> coefficients = new ArrayList<>(xs);\n        for (double x = maxCoefficient; x >= -maxCoefficient; x -= 0.00001) {\n            double y = poly(coefficients, x);\n            if (Math.abs(y) < 0.00001) {\n                return x;\n            }\n        }\n        throw new IllegalArgumentException(\"No solution found\");\n    }\n}\n\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n// 1.0\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        List<Integer> thirds = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                thirds.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        Collections.sort(thirds);\n\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, thirds.get(j++));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++){\n            if(l.get(i) > max){\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += Integer.toString(i).length();\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 1; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n        for (int i = 1, j = 0; i < l.size(); i += 2, j++) {\n            l.set(i, evenIndices.get(j));\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        List<String> groups = new ArrayList<>(Arrays.asList(s.split(\"\")));\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(1) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int i = 1;\n        int j = 1;\n        while (count < n) {\n            int temp = i;\n            i = j;\n            j = temp + j;\n            if (isPrime(i)) {\n                count++;\n            }\n        }\n        return i;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int complement = -(l.get(i) + l.get(j));\n                if (set.contains(complement)) {\n                    return true;\n                }\n                set.add(l.get(i));\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        return n * (n - 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            } else {\n                set.add(num);\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        boolean isNegative = false;\n        if (x < 0) {\n            isNegative = true;\n            x = -x;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        if (isNegative) {\n            sb.append('-');\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 2;\n        if(n == 3) return 0;\n\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for(int i = 4; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        return (int) (Math.pow(2, n) % p);\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!set.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\");\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        boolean increasing = l.get(1).compareTo(l.get(0)) <= 0;\n        for (int i = 2; i < l.size(); i++) {\n            if (increasing) {\n                if (l.get(i).compareTo(l.get(i - 1)) <= 0) {\n                    return false;\n                }\n            } else {\n                if (l.get(i).compareTo(l.get(i - 1)) >= 0) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> common = new ArrayList<>(set1);\n        Collections.sort(common);\n        return common;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int largest = 2;\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            largest = n;\n        }\n        return largest;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n\n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\n        for(int i = 3; i <= n; i++){\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n\n        return fibfib[n];\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n            if (s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int n = str.length();\n        if (shift >= n) {\n            return new StringBuilder(str).reverse().toString();\n        } else {\n            return str.substring(n - shift) + str.substring(0, n - shift);\n        }\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        int oranges = Integer.parseInt(parts[1]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) <= smallestEven) {\n                smallestEven = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestEven != Integer.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (int i = lst.size(); i >= 0; i--) {\n            if (freqMap.get(i) >= i) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        // Your code here\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        while(!lst.isEmpty()){\n            result.add(lst.remove(0)); // add minimum\n            if(!lst.isEmpty()){\n                result.add(lst.remove(lst.size()-1)); // add maximum\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i: q) {\n            sum += i;\n        }\n        return sum <= w && isPalindrome(q);\n    }\n\n    private boolean isPalindrome(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n        while(start < end) {\n            if(q.get(start) != q.get(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n\n        int count2 = 0;\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n\n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for(int i = 2; i <= a; i++) {\n            while(a % i == 0) {\n                if(isPrime(i)) {\n                    count++;\n                }\n                a /= i;\n            }\n        }\n        return count == 3;\n    }\n\n    public boolean isPrime(int a) {\n        if(a < 2) {\n            return false;\n        }\n        for(int i = 2; i * i <= a; i++) {\n            if(a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        int log = (int) (Math.log(x) / Math.log(n));\n        return log * log == x;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        if(a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.round(Math.pow(a, (1.0 / 3)));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        // Convert hexadecimal to decimal\n        int decimal = Integer.parseInt(num, 16);\n        // Convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n        // Count the number of 1's in the binary string\n        int count = 0;\n        for (char c : binary.toCharArray()) {\n            if (c == '1') {\n                count++;\n            }\n        }\n        // Check if the number is prime\n        if (isPrime(count)) {\n            return count;\n        } else {\n            return 0;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 10;\n        }\n        int res = 0;\n        for (int i = 1; i < 10; i++) {\n            res += count(n - 1, i);\n        }\n        return res;\n    }\n\n    private int count(int n, int lastDigit) {\n        if (n == 1) {\n            return 10 - lastDigit;\n        }\n        int res = 0;\n        for (int i = 0; i < lastDigit; i++) {\n            res += count(n - 1, i);\n        }\n        return res;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while(N > 0){\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i += 2) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) == o2.get(0)) {\n                    return o2.get(1) - o1.get(1);\n                } else {\n                    return o1.get(0) - o2.get(0);\n                }\n            }\n        });\n        return res;\n    }\n}\n\n// Test cases\n"}
{"task_id": "Java/88", "generation": "\n        if (array.isEmpty()) {\n            return array;\n        }\n\n        int first = 0;\n        int last = array.size() - 1;\n        int sum = array.get(first) + array.get(last);\n\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n\n        return array;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encrypted.append((char) ('A' + (c - 'A' + 2) % 26));\n            } else {\n                encrypted.append((char) ('a' + (c - 'a' + 2) % 26));\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int first = lst.get(0);\n        int second = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                first = lst.get(i);\n            } else if (lst.get(i) < second && lst.get(i) != first) {\n                second = lst.get(i);\n            }\n        }\n        if (second == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        return Optional.of(second);\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        } else {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    if (c == 'a') {\n                        result.append('c');\n                    } else if (c == 'e') {\n                        result.append('g');\n                    } else if (c == 'i') {\n                        result.append('k');\n                    } else if (c == 'o') {\n                        result.append('q');\n                    } else if (c == 'u') {\n                        result.append('w');\n                    } else {\n                        result.append((char) (c + 2));\n                    }\n                } else {\n                    if (c == 'A') {\n                        result.append('C');\n                    } else if (c == 'E') {\n                        result.append('G');\n                    } else if (c == 'I') {\n                        result.append('K');\n                    } else if (c == 'O') {\n                        result.append('Q');\n                    } else if (c == 'U') {\n                        result.append('W');\n                    } else {\n                        result.append((char) (c + 2));\n                    }\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLower = true;\n        boolean isUpper = true;\n\n        for (String key: dict.keySet()) {\n            if (!(key instanceof String)) {\n                isLower = false;\n                break;\n            }\n\n            if (!key.equals(key.toLowerCase())) {\n                isUpper = false;\n                break;\n            }\n        }\n\n        return isLower || isUpper;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = 1;\n        while (a != 0 || b != 0) {\n            if (a % 10 != 0) {\n                product *= a % 10;\n            }\n            a /= 10;\n            if (b % 10 != 0) {\n                product *= b % 10;\n            }\n            b /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int num = Integer.parseInt(value);\n        return num + 1;\n    }\n\n    public int countDown(String value) {\n        int num = Integer.parseInt(value);\n        return num - 1;\n    }\n\n    public int closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        if (num % 2 == 0) {\n            return num;\n        } else {\n            if (Math.abs(countUpper(value) - num) < Math.abs(countDown(value) - num)) {\n                return countUpper(value);\n            } else {\n                return countDown(value);\n            }\n        }\n    }\n}\n\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                result.add(n + i);\n            } else {\n                result.add(n + i + 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<String>();\n        String[] splitWords = s.split(\"[, ]\");\n        for (String word : splitWords) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int num : x){\n            if(!hasEvenDigit(num)){\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num){\n        while(num > 0){\n            if((num % 10) % 2 == 0){\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                temp.add(i);\n            }\n        }\n        Collections.sort(temp);\n        Collections.reverse(temp);\n        for (int i : temp) {\n            switch (i) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (str.equals(new StringBuilder(str).reverse().toString())) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if(num < 0) {\n                num = -1 * (num / 10) * 10 + (num % 10);\n            }\n            while(num > 0) {\n                if(num % 10 > 0) {\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if(arr.size() == 0)\n            return true;\n\n        int n = arr.size();\n        int inversions = 0;\n\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(arr.get(i) > arr.get(j))\n                    inversions++;\n            }\n        }\n\n        return inversions % 2 == 0;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        if (count % 2 != 0) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for (char ch : c.toCharArray()) {\n            sb.delete(sb.indexOf(String.valueOf(ch)), sb.length());\n        }\n        String res = sb.toString();\n        boolean isPalindrome = res.equals(new StringBuilder(res).reverse().toString());\n        result.add(res);\n        result.add(isPalindrome);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                int digit = Character.getNumericValue(c);\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            String res = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(res);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            currentSum = Math.min(currentSum, 0);\n        }\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int count = 0;\n        for(List<Integer> row : grid) {\n            for(int i = 0; i < row.size(); i++) {\n                if(row.get(i) == 1) {\n                    count++;\n                    row.set(i, 0);\n                }\n            }\n        }\n        return count / capacity;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        // Your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA == countB) {\n                    return a.compareTo(b);\n                }\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if(s.isEmpty())\n            return result;\n        String[] words = s.split(\" \");\n        for(String word : words){\n            int count = 0;\n            for(char c : word.toCharArray()){\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || Character.isLowerCase(c))\n                    count++;\n            }\n            if(count == n)\n                result.add(word);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder(word);\n        for (int i = sb.length() - 1; i > 0; i--) {\n            char c = sb.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(sb.charAt(j)) != -1) {\n                        return String.valueOf(c);\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == '('){\n                count++;\n            }\n            else if(s.charAt(i) == ')'){\n                count--;\n            }\n            if(count < 0){\n                return \"No\";\n            }\n        }\n        if(count == 0){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.add(num);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0 && lst.get(i) % 2 != 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || date.indexOf('-') != 2) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12 || day < 1 || year < 1) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month % 2 == 0) {\n            if (day > 30) {\n                return false;\n            }\n        } else {\n            if (day > 31) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if (txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == prev) {\n                return false;\n            }\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start;\n        if (length < 1) {\n            return \"NO\";\n        }\n\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if(arr.isEmpty()){\n            return Optional.empty();\n        }\n        int sign = 1;\n        int product = 1;\n        for(int num : arr){\n            if(num < 0){\n                sign *= -1;\n            }\n            product *= Math.abs(num);\n        }\n        return Optional.of(sign * product);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int N = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> grid.get(a[0]).get(a[1]) - grid.get(b[0]).get(b[1]));\n        boolean[][] visited = new boolean[N][N];\n        int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        pq.offer(new int[]{0, 0});\n        visited[0][0] = true;\n        while (!pq.isEmpty() && k-- > 0) {\n            int[] cur = pq.poll();\n            for (int i = 0; i < 4; i++) {\n                int nx = cur[0] + dir[i][0], ny = cur[1] + dir[i][1];\n                if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny]) {\n                    pq.offer(new int[]{nx, ny});\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(grid.get(pq.poll()[0]).get(pq.poll()[1]));\n        }\n        return res;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        result.add(3);\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(2);\n        if (n == 2) {\n            return result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + (i / 2));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n                if (stack.isEmpty() && i + 1 < string.length() && string.charAt(i + 1) == '[') {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for(Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetter(txt.charAt(txt.length() - 2));\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        if(n < 2) return -1;\n        int max = -1;\n        for(int i=n-2; i>=0; i--){\n            if(arr.get(i) >= arr.get(i+1)) max = i;\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        Optional<Integer> maxOpt = Optional.empty();\n        Optional<Integer> minOpt = Optional.empty();\n\n        for(int i: lst){\n            if(i < 0 && i > max){\n                max = i;\n                maxOpt = Optional.of(max);\n            }\n            if(i >= 0 && i < min){\n                min = i;\n                minOpt = Optional.of(min);\n            }\n        }\n\n        return Arrays.asList(maxOpt, minOpt);\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            return compareStrings((String) a, (String) b);\n        } else if (a instanceof String) {\n            return compareStrings((String) a, String.valueOf(b));\n        } else if (b instanceof String) {\n            return compareStrings(String.valueOf(a), (String) b);\n        } else {\n            return compareNumbers((Number) a, (Number) b);\n        }\n    }\n\n    private Optional<Object> compareStrings(String a, String b) {\n        String[] aParts = a.replaceAll(\"[^0-9,.]+\", \"\").split(\",\");\n        String[] bParts = b.replaceAll(\"[^0-9,.]+\", \"\").split(\",\");\n\n        double aValue = Double.parseDouble(aParts[0] + \".\" + aParts[1]);\n        double bValue = Double.parseDouble(bParts[0] + \".\" + bParts[1]);\n\n        if (aValue > bValue) {\n            return Optional.of(a);\n        } else if (aValue < bValue) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private Optional<Object> compareNumbers(Number a, Number b) {\n        if (a.doubleValue() > b.doubleValue()) {\n            return Optional.of(a);\n        } else if (a.doubleValue() < b.doubleValue()) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= n / 2; i += 2) {\n            if (n - i == 0) {\n                count++;\n            }\n        }\n        return count >= 4;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for(int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        if(n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}\n\n"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n                if (count > 2) {\n                    sb.append('-');\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(c);\n                count = 0;\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n        if (name.length() > 3 || !Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        for (int i = 1; i < name.length(); i++) {\n            if (!Character.isLetter(name.charAt(i)) && !Character.isDigit(name.charAt(i))) {\n                return \"No\";\n            }\n        }\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int gcd = gcd(xDenominator, nDenominator);\n\n        int newNumerator = xNumerator * nNumerator / gcd;\n        int newDenominator = xDenominator * nDenominator / gcd;\n\n        return newDenominator == newNumerator;\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        if (nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        List<Integer> indices = new ArrayList<>();\n\n        for (int i = 0; i < nums.size(); i++) {\n            indices.add(i);\n        }\n\n        Collections.sort(indices, (a, b) -> {\n            int sumA = sumOfDigits(nums.get(a));\n            int sumB = sumOfDigits(nums.get(b));\n\n            if (sumA == sumB) {\n                return a.compareTo(b);\n            }\n\n            return sumA - sumB;\n        });\n\n        for (int i : indices) {\n            result.add(nums.get(i));\n        }\n\n        return result;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for(int num : nums) {\n            if(num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = -1, index2 = -1;\n\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n            if (index1 != -1 && index2 != -1) {\n                break;\n            }\n        }\n\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\n        if (index1 < index2) {\n            for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets[i]);\n            }\n        } else {\n            for (int i = index2 + 1; i < index1; i++) {\n                result.add(planets[i]);\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() != o2.length()) {\n                    return o1.length() - o2.length();\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (Integer) o;\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        String strongestExtension = \"\";\n        double maxStrength = Double.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int cap = 0, sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) cap++;\n                else if (Character.isLowerCase(c)) sm++;\n            }\n            double strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length())\n            return false;\n\n        for (int i = 0; i < b.length(); i++) {\n            if (b.equals(b.substring(i) + b.substring(0, i)))\n                return true;\n        }\n\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        int max = Math.max(a, Math.max(b, c));\n        return (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c + a*a == b*b) || (a == b && b == c);\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUnique = 0;\n\n        for (String word : words) {\n            int unique = (int) word.chars().distinct().count();\n            if (unique > maxUnique) {\n                maxUnique = unique;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(remaining >= need) {\n            number += need;\n            remaining -= need;\n        } else {\n            number += remaining;\n            remaining = 0;\n        }\n        result.add(number);\n        result.add(remaining);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n\n        for (int i = 1; i < operand.size(); i++) {\n            String op = operator.get(i - 1);\n            int num = operand.get(i);\n\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<s.length(); i++){\n            char c = s.charAt(i);\n            if(Character.isLetter(c)){\n                if(Character.isLowerCase(c)){\n                    sb.append(Character.toUpperCase(c));\n                }else{\n                    sb.append(Character.toLowerCase(c));\n                }\n            }else{\n                sb.append(c);\n            }\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = a; i <= b; i++) {\n            if(i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
