{"task_id": "Java/0", "generation": "\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            sb.append(c);\n            if (count == 0) {\n                result.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int count = 0;\n            int max = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                    if (count > max) {\n                        max = count;\n                    }\n                } else if (c == ')') {\n                    count--;\n                }\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        if (isPalindrome(string)) {\n            return string;\n        }\n        StringBuilder result = new StringBuilder();\n        for (int i = string.length(); i >= 0; i--) {\n            if (isPalindrome(string.substring(0, i))) {\n                result.append(string.substring(i));\n                break;\n            }\n        }\n        return string + new StringBuilder(result).reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        if (substring.length() == 0) {\n            return 0;\n        }\n        int count = 0;\n        int index = 0;\n        while (true) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count ++;\n                index += substring.length();\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[] words = numbers.split(\" \");\n        Arrays.sort(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Arrays.asList(nums).indexOf(o1) - Arrays.asList(nums).indexOf(o2);\n            }\n        });\n        return String.join(\" \", words);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestNumbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestNumbers.clear();\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            }\n        }\n        return closestNumbers;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / range);\n        }\n        return rescaled;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    /**\n    Return reversed string\n    >>> reverse(\"\")\n    \"\"\n    >>> reverse(\"abc\")\n    \"cba\"\n     */\n    public String reverse(String string) {\n        return new StringBuilder(string).reverse().toString();\n    }\n\n    /**\n    Return true if string is palindrome, false otherwise\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"abc\")\n    false\n    >>> isPalindrome(\"civic\")\n    true\n     */\n    public boolean isPalindrome(String string) {\n        return string.equals(reverse(string));\n    }\n\n    /**\n    Return substring of given string from start index to end index\n    >>> substring(\"abc\", 0, 1)\n    \"a\"\n    >>> substring(\"abc\", 1, 3)\n    \"bc\"\n     */\n    public String substring(String string, int start, int end) {\n        return string.substring(start, end);\n    }\n\n    /**\n    Return index of first occurrence of substring in string, -1 if not found\n    >>> indexOf(\"abc\", \"a\")\n    0\n    >>> indexOf(\"abc\", \"d\")\n    -1\n     */\n    public int indexOf(String string, String substring) {\n        return string.indexOf(substring);\n    }\n\n    /**\n    Return string with all occurrences of oldChar replaced by newChar\n    >>> replace(\"abc\", 'a', 'd')\n    \"dbc\"\n    >>> replace(\"abc\", 'd', 'a')\n    \"abc\"\n     */\n    public String replace(String string, char oldChar, char newChar) {\n        return string.replace(oldChar, newChar);\n    }\n\n    /**\n    Return string with all occurrences of substring replaced by newSubstring\n    >>> replace(\"abc\", \"a\", \"d\")\n    \"dbc\"\n    >>> replace(\"abc\", \"d\", \"a\")\n    \"abc\"\n     */\n    public String replace(String string, String substring, String newSubstring) {\n        return string.replace(sub"}
{"task_id": "Java/24", "generation": "\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // if no divisor found\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (Integer number : numbers) {\n            counts.put(number, counts.getOrDefault(number, 0) + 1);\n        }\n        return numbers.stream()\n                .filter(number -> counts.get(number) == 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder(string.length());\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String string : strings) {\n            sb.append(string);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        double left = -10000, right = 10000;\n        while (right - left > 1e-6) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) > 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> sorted = new ArrayList<>(l);\n        Collections.sort(sorted);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                result.add(sorted.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countDigit(i, 7);\n            }\n        }\n        return count;\n    }\n\n    public int countDigit(int number, int digit) {\n        int counter = 0;\n        while (number > 0) {\n            if (number % 10 == digit) counter++;\n            number = number / 10;\n        }\n        return counter;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n\n        Collections.sort(evenIndices);\n\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenIndices.add(evenIndices.get(j++));\n            } else {\n                sortedEvenIndices.add(l.get(i));\n            }\n        }\n\n        return sortedEvenIndices;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // un-cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int i = 1, j = 1, count = 0;\n        while (count < n) {\n            int fib = i + j;\n            i = j;\n            j = fib;\n            if (isPrime(fib)) {\n                count++;\n            }\n        }\n        return i;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int sum = l.get(i) + l.get(j);\n                if (set.contains(-sum)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // The number of collisions is equal to the sum of the first n integers.\n        // This is because each car will collide with n-1 other cars, and the nth car\n        // will collide with no other cars.\n        return n * (n - 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        return Integer.toString(x, base);\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2) + l.get(size / 2 - 1)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n            }\n            n = n >> 1;\n            if (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    /**\n    Subtract two numbers x and y\n    >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(14, 2)\n    7\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    /**\n    Find the remainder of division of two numbers x and y\n    >>> modulus(10, 3)\n    1\n    >>> modulus(14, 3)\n    2\n     */\n    public int modulus(int x, int y) {\n        return x % y;\n    }\n\n    /**\n    Find the power of a number x to the power y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n     */\n    public int power(int x, int y) {\n        return (int) Math.pow(x, y);\n    }\n\n    /**\n    Find the square root of a number x\n    >>> squareRoot(4)\n    2\n    >>> squareRoot(16)\n    4\n     */\n    public int squareRoot(int x) {\n        return (int) Math.sqrt(x);\n    }\n\n    /**\n    Find the absolute value of a number x\n    >>> absoluteValue(-5)\n    5\n    >>> absoluteValue(5)\n    5\n     */\n    public int absoluteValue(int x) {\n        return Math.abs(x);\n    }\n\n    /**\n    Find the maximum of two numbers x and y\n    >>>\n}"}
{"task_id": "Java/54", "generation": "\n        int[] count = new int[26];\n        for (char c : s0.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (char c : s1.toCharArray()) {\n            count[c - 'a']--;\n        }\n        for (int i : count) {\n            if (i != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n\n        return b;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (!stack.isEmpty() && stack.peek() == '<') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        int i = 0;\n        while (i < l.size() - 1 && l.get(i).equals(l.get(i + 1))) {\n            i++;\n        }\n\n        if (i == l.size() - 1) {\n            return true;\n        }\n\n        boolean increasing = l.get(i) < l.get(i + 1);\n        while (i < l.size() - 1) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int largest = -1;\n\n        // Divide n by 2 until n becomes odd\n        while (n % 2 == 0) {\n            largest = 2;\n            n >>= 1;\n        }\n\n        // n must be odd at this point, thus skip the even numbers and iterate only for odd\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n = n / i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number\n        // greater than 2\n        if (n > 2)\n            largest = n;\n\n        return largest;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        return n * (n + 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fibfibArray = new int[n+1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3];\n        }\n        return fibfibArray[n];\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiou\";\n\n        for(int i = 0; i < s.length(); i++){\n            if(vowels.contains(Character.toString(s.charAt(i)).toLowerCase())){\n                count++;\n            }\n        }\n\n        if(s.charAt(s.length()-1) == 'y'){\n            count++;\n        }\n\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift >= len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(len - shift) + str.substring(0, len - shift);\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min && arr.get(i) % 2 == 0) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if (index == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(min, index);\n        }\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The longest substring without repeating letters is \"abc\".\n\n    Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The longest substring without repeating letters is \"b\".\n\n    Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The longest substring without repeating letters is \"wke\".\n\n    Constraints:\n        * 0 <= s.length <= 5 * 10^4\n        * s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() <= entry.getValue()) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        if (lst.size() <= 1) {\n            return lst;\n        }\n\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        while (lst.size() > 0) {\n            result.add(lst.remove(0)); // add minimum\n            if (lst.size() > 0) {\n                result.add(lst.remove(lst.size() - 1)); // add maximum\n            }\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the sum of the two smallest integers in the list.\n\n    Examples:\n    sumOfSmallestTwo([1, 2, 3, 4]) == 3\n    sumOfSmallestTwo([5, 5, 5, 5]) == 10\n    sumOfSmallestTwo([1]) == 1\n    sumOfSmallestTwo([]) == 0\n     */\n    public int sumOfSmallestTwo(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return lst.size() == 1 ? lst.get(0) : 0;\n        }\n\n        int firstMin = Integer.MAX_VALUE;\n        int secondMin = Integer.MAX_VALUE;\n\n        for (int num : lst) {\n            if (num < firstMin) {\n                secondMin = firstMin;\n                firstMin = num;\n            } else if (num < secondMin && num != firstMin) {\n                secondMin = num;\n            }\n        }\n\n        return firstMin + secondMin;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the sum of the two largest integers in the list.\n\n    Examples:\n    sumOfLargestTwo([1, 2, 3, 4]) == 7\n    sumOfLargestTwo([5, 5, 5, 5]) == 10\n    sumOfLargestTwo([1]) == 1\n\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!q.get(i).equals(q.get(j))) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the smallest positive integer that is not in the list.\n\n    Example:\n    smallestNotInList(Arrays.asList(1, 2, 3)) -> 4\n    smallestNotInList(Arrays.asList(-1, -2, -3)) -> 1\n    smallestNotInList(Arrays.asList(0, 1, 2, 3)) -> 4\n     */\n    public int smallestNotInList(List<Integer> lst) {\n        Set<Integer> set = new HashSet<>(lst);\n        for (int i = 1; i <= lst.size() + 1; i++) {\n            if (!set.contains(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the sum of the two smallest integers in the list.\n\n    Example:\n    sumOfSmallest(Arrays.asList(1, 2, 3)) -> 3\n    sumOfSmallest(Arrays.asList(-1, -2, -3)) -> -3\n    sumOfSmallest(Arrays.asList(0, 1, 2, 3)) -> 2\n     */\n    public int sumOfSmallest(List<Integer> lst) {\n        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n        for (int num : lst) {\n            if (num < first"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                while (a % i == 0) {\n                    a /= i;\n                    count++;\n                }\n                if (!isPrime(i)) {\n                    return false;\n                }\n            }\n        }\n        return count == 3 && isPrime(a);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i <= x) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        int x = (int) Math.round(Math.cbrt(a));\n        return a == x * x * x;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, write a function that returns the string with all the vowels removed.\n\n    Example:\n    removeVowels(\"Hello World\") ==> \"Hll Wrld\"\n     */\n    public String removeVowels(String str) {\n        return str.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, write a function that returns the string with all the characters in reverse order.\n\n    Example:\n    reverseString(\"Hello World\") ==> \"dlroW olleH\"\n     */\n}"}
{"task_id": "Java/82", "generation": "\n        int n = string.length();\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 1;\n        }\n        int[][] dp = new int[n][10];\n        for (int i = 0; i < 10; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < 10; j++) {\n                for (int k = 0; k < 10; k++) {\n                    if (j == 1 || k == 1) {\n                        dp[i][j] += dp[i - 1][k];\n                    }\n                }\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < 10; i++) {\n            count += dp[n - 1][i];\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += c - '0';\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            result.append(sortString(word)).append(\" \");\n        }\n        return result.toString().trim();\n    }\n\n    public String sortString(String inputString) {\n        // Convert input string to char array\n        char tempArray[] = inputString.toCharArray();\n\n        // Sort tempArray\n        Arrays.sort(tempArray);\n\n        // Return new sorted string\n        return new String(tempArray);\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        result.sort(Comparator.comparing(l -> l.get(0)));\n        for (List<Integer> list : result) {\n            list.set(1, lst.get(list.get(0)).size() - list.get(1) - 1);\n        }\n        result.sort(Comparator.comparing(l -> l.get(0)).thenComparing(l -> l.get(1), Comparator.reverseOrder()));\n        return result;\n    }\n}import java.util.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example 1:\n    Input: s = \"abcabcbb\"\n    Output: 3\n    Explanation: The answer is \"abc\", with the length of 3.\n\n    Example 2:\n    Input: s = \"bbbbb\"\n    Output: 1\n    Explanation: The answer is \"b\", with the length of 1.\n\n    Example 3:\n    Input: s = \"pwwkew\"\n    Output: 3\n    Explanation: The answer is \"wke\", with the length of 3.\n    Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n    Constraints:\n    0 <= s.length <= 5 * 10^4\n    s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        if (s.length() == 0) return 0;\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n       "}
{"task_id": "Java/88", "generation": "\n        // Write your code here\n        if(array.size() == 0) return array;\n        int sum = array.get(0) + array.get(array.size() - 1);\n        boolean isOdd = sum % 2 == 1;\n        List<Integer> sortedArray = new ArrayList<>(array);\n        Collections.sort(sortedArray);\n        if(isOdd) return sortedArray;\n        else {\n            Collections.reverse(sortedArray);\n            return sortedArray;\n        }\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return the length of the longest substring without repeating characters.\n\n    Note:\n    * the string contains only English letters and digits.\n\n    Examples:\n    * lengthOfLongestSubstring(\"abcabcbb\") => 3 (\"abc\")\n    * lengthOfLongestSubstring(\"bbbbbb\") => 1 (\"b\")\n    * lengthOfLongestSubstring(\"pwwkew\") => 3 (\"wke\")\n     */\n    public int lengthOfLongestSubstring(String s) {\n        // Write your code here\n        if(s.length() == 0) return 0;\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        for(int i = 0, j = 0; j < s.length(); j++){\n            if(map.containsKey(s.charAt(j))){\n                i = Math.max(i, map.get(s.charAt(j)) + 1);\n            }\n            max = Math.max(max, j - i + 1);\n            map.put(s.charAt(j), j);\n        }\n        return max;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return the length of the longest palindromic substring.\n\n    Note:\n    * the string contains only English letters and digits.\n\n    Examples:\n    * lengthOfLongestPalindrome(\"abacd\") => 2 (\"ac\")\n    * lengthOfLongest\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encrypted.append((char) ('A' + (c - 'A' + 2 * 2) % 26));\n            } else {\n                encrypted.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n            }\n        }\n        if (secondSmallest == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        // your code goes here\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().length() > 0 && sentence.trim().charAt(0) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isAlphabetic(c)) {\n                if (Character.isLowerCase(c)) {\n                    encodedMessage.append(Character.toUpperCase(c));\n                } else {\n                    encodedMessage.append(Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        for (int i = 0; i < encodedMessage.length(); i++) {\n            char c = encodedMessage.charAt(i);\n            if (Character.isAlphabetic(c)) {\n                if (isVowel(c)) {\n                    if (Character.isLowerCase(c)) {\n                        encodedMessage.setCharAt(i, (char) ('e' + 2));\n                    } else {\n                        encodedMessage.setCharAt(i, (char) ('E' + 2));\n                    }\n                }\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return maxPrime == -1 ? -1 : sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            for (char c : strKey.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    allUpper = false;\n                } else if (Character.isUpperCase(c)) {\n                    allLower = false;\n                } else {\n                    return false;\n                }\n            }\n\n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return a list of integers where each integer is multiplied by its index.\n    The function should return an empty list if the given list is empty.\n    Examples:\n    multiplyByIndex([1, 2, 3, 4, 5]) should return [0, 2, 6, 12, 20].\n    multiplyByIndex([3, 0, 2, -5, 1]) should return [0, 0, 2, -5, 5].\n    multiplyByIndex([7, 8, 9, 10, 11]) should return [0, 8, 18, 30, 44].\n    multiplyByIndex([]) should return [].\n     */\n    public List<Integer> multiplyByIndex(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(i * nums.get(i));\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return a list of integers where each integer is multiplied\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        // Your code here\n        int a_unit = Math.abs(a % 10);\n        int b_unit = Math.abs(b % 10);\n        return a_unit * b_unit;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                switch (s.charAt(i)) {\n                    case 'A':\n                    case 'E':\n                    case 'I':\n                    case 'O':\n                    case 'U':\n                        count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (char c : value.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int stones = n;\n        for (int i = 0; i < n; i++) {\n            result.add(stones);\n            if (stones % 2 == 0) {\n                stones += 2;\n            } else {\n                stones += 2;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        // Your code here\n        return Arrays.asList(s.replaceAll(\"[\\\\p{P}\\\\p{S}]\", \"\").split(\"\\\\s+\"));\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        if (x % 2 == 0) {\n            if (x == y) {\n                return x;\n            } else {\n                return y;\n            }\n        } else {\n            if (y % 2 == 0) {\n                return y;\n            } else {\n                return -1;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int avg = (n + m) / 2;\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            if (hasUniqueDigits(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasUniqueDigits(Integer num) {\n        Set<Integer> digits = new HashSet<>();\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            if (!digits.add(digit)) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                temp.add(num);\n            }\n        }\n        Collections.sort(temp, Collections.reverseOrder());\n        for (Integer num : temp) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}import java.util.*;\n\nclass Solution {\n    /**\n    Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n    Example:\n    Given nums = [2, 7, 11, 15], target = 9,\n    Because nums[0] + nums[1] = 2 + 7 = 9,\n    return [0, 1].\n    */\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            } else {\n                map.put(nums[i], i"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (sumDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count++;\n            }\n        }\n        if (arr.get(arr.size() - 1) > arr.get(0)) {\n            count++;\n        }\n        return count <= 1;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring that contains\n    only unique characters.\n\n    For example:\n\n    lengthOfLongestSubstring(\"abcabcbb\")==>3\n    Explanation: The longest substring is \"abc\", with the length of 3.\n\n    lengthOfLongestSubstring(\"bbbbb\")==>1\n    Explanation: The answer is \"b\", with the length of 1.\n\n    lengthOfLongestSubstring(\"pwwkew\")==>3\n    Explanation: The answer is \"wke\", with the length of 3.\n    Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        if (s.length() == 0) {\n            return 0;\n        }\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        for (int i = 0, j = 0; j < s.length(); j++) {\n            if (map.containsKey(s.charAt(j))) {\n                i = Math.max(map.get(s.charAt(j)), i);\n            }\n            max = Math.max(max, j - i + 1);\n            map.put(s.charAt(j), j + 1);\n        }\n        return max;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a\n}"}
{"task_id": "Java/110", "generation": "\n        int oddCount1 = 0;\n        int oddCount2 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                oddCount1++;\n            }\n            if (lst2.get(i) % 2 != 0) {\n                oddCount2++;\n            }\n        }\n        if (oddCount1 > oddCount2) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n\n        int max = 0;\n        for (String key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n\n        Map<String, Integer> result = new HashMap<>();\n        for (String key : map.keySet()) {\n            if (map.get(key) == max) {\n                result.put(key, max);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        String result = sb.toString();\n        String reversed = sb.reverse().toString();\n        boolean isPalindrome = result.equals(reversed);\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(String.format(\"the number of odd elements %don the str%dng %d of the %dinput.\", count, count, count, count));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            min = Math.min(min, sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        int count = 0;\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    pq.add(capacity);\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            int current = pq.poll();\n            if (!pq.isEmpty() && pq.peek() == current) {\n                pq.poll();\n                pq.add(current - 1);\n                count++;\n            } else {\n                count++;\n            }\n        }\n        return count;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example 1:\n        Input: s = \"abcabcbb\"\n        Output: 3\n        Explanation: The longest substring without repeating letters is \"abc\".\n\n    Example 2:\n        Input: s = \"bbbbb\"\n        Output: 1\n        Explanation: The longest substring without repeating letters is \"b\".\n\n    Example 3:\n        Input: s = \"pwwkew\"\n        Output: 3\n        Explanation: The longest substring without repeating letters is \"wke\".\n\n    Constraints:\n        * 0 <= s.length <= 5 * 10^4\n        * s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        if (s.length() == 0) return 0;\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        for (int i = 0, j = 0; i < s.length(); ++i) {\n            if (map.containsKey(s.charAt(i))) {\n                j = Math.max(j, map.get(s.charAt(i)) + 1);\n            }\n            map.put(s.charAt("}
{"task_id": "Java/116", "generation": "\n        return arr.stream()\n                .sorted(Comparator.comparing(i -> Integer.bitCount(i))\n                        .thenComparingInt(i -> i))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c >= 'a' && c <= 'z';\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        StringBuilder result = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))) &&\n                    consonants.contains(String.valueOf(word.charAt(i - 1))) &&\n                    consonants.contains(String.valueOf(word.charAt(i + 1)))) {\n                result.append(word.charAt(i));\n                break;\n            }\n        }\n        return result.toString();\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return a new string where the first and last chars have been exchanged.\n\n    Example:\n    frontBack(\"code\") ==> \"eodc\"\n    frontBack(\"a\") ==> \"a\"\n    frontBack(\"ab\") ==> \"ba\"\n     */\n    public String frontBack(String str) {\n        if (str.length() <= 1) return str;\n        return str.charAt(str.length() - 1) + str.substring(1, str.length() - 1) + str.charAt(0);\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return a string where for every char in the original, there are two chars.\n\n    Example:\n    doubleChar(\"The\") ==> \"TThhee\"\n    doubleChar(\"AAbb\") ==> \"AAAAbbbb\"\n    doubleChar(\"Hi-There\") ==> \"HHii--TThheerree\"\n     */\n    public String doubleChar(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            result.append(str.charAt(i)).append(str."}
{"task_id": "Java/119", "generation": "\n        int open = 0, close = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    open++;\n                } else if (c == ')') {\n                    if (open > 0) {\n                        open--;\n                    } else {\n                        close++;\n                    }\n                }\n            }\n        }\n        return (open == close) ? \"Yes\" : \"No\";\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring that contains\n    only unique characters.\n\n    Example:\n    lengthOfLongestSubstring(\"abcabcbb\") == 3\n    lengthOfLongestSubstring(\"bbbbb\") == 1\n    lengthOfLongestSubstring(\"pwwkew\") == 3\n    */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example:\n    lengthOfLongestSubstring(\"abcabcbb\") == 3\n    lengthOfLongestSubstring(\"bbbbb\") == 1\n    lengthOfLongestSubstring(\"pwwkew\") == 3\n    */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();"}
{"task_id": "Java/120", "generation": "\n        // Write your code here\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < k; i++){\n            result.add(maxHeap.poll());\n        }\n        Collections.sort(result);\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, find two numbers such that they add up to a specific target number.\n\n    The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\n\n    You may assume that each input would have exactly one solution.\n\n    Example:\n\n        Input: numbers={2, 7, 11, 15}, target=9\n        Output: [1, 2]\n\n    Challenge:\n\n    Efficiently implement this method.\n     */\n    public int[] twoSum(int[] numbers, int target) {\n        // write your code here\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < numbers.length; i++) {\n            if (map.containsKey(target - numbers[i])) {\n                return new int[] {map.get(target - numbers[i]) + 1, i + 1};\n            }\n            map.put(numbers[i], i);\n        }\n        return new int[] {};\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find the length of the longest substring without repeating characters.\n\n    Example 1:\n\n        Input: \"abcabcbb\"\n        Output: 3\n        Explanation: The longest substring is \"abc\".\n\n    Example 2:\n\n        Input: \"bbbbbb\"\n        Output: 1\n        Explanation: The longest substring is\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example:\n\n        Input: s = \"abcabcbb\"\n        Output: 3 # \"abc\"\n\n    Constraints:\n        1. 0 <= len(s) <= 5 * 10^4\n        2. s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers arr, return the sum of the elements with even indices.\n\n    Example:\n\n        Input: arr = [1,2,3,4,5]\n        Output: 6 # 2 + 4\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= arr[i] <= 100\n     */\n    public int sumEvenIndices(List<Integer> arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i += 2) {\n            sum +="}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1) {\n            return false;\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else {\n            if (day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n\n        return true;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return the largest difference of any two\n    numbers in the list. If the list is empty or contains less than two\n    numbers, return -1.\n\n    Examples\n    maxDifference(Arrays.asList(1, 2, 3, 4, 5)) -> 4\n    maxDifference(Arrays.asList(5, 4, 3, 2, 1)) -> 4\n    maxDifference(Arrays.asList(1, 1, 1, 1, 1)) -> 0\n    maxDifference(Arrays.asList(1)) -> -1\n    maxDifference(Arrays.asList()) -> -1\n     */\n    public int maxDifference(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return -1;\n        }\n\n        int min = lst.get(0);\n        int maxDiff = lst.get(1) - lst.get(0);\n\n        for (int i = 1; i < lst.size(); i++) {\n            int diff = lst.get(i) - min;\n            maxDiff = Math.max(maxDiff, diff);\n            min = Math.min(min, lst.get(i));\n        }\n\n        return maxDiff;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of integers, return a list of integers where each\n    integer is the product of all the other integers in the list except\n    for the integer at the current position.\n\n    Examples\n\n}"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if (length < 2) {\n            return \"NO\";\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find the length of the longest substring without repeating characters.\n    For example, the longest substring without repeating letters for \"abcabcbb\" is \"abc\", with a length of 3.\n    For \"bbbbbb\" the longest substring is \"b\", with a length of 1.\n    For \"pwwkew\" the longest substring is \"wke\", with a length of 3.\n    Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n    [input/output] samples:\n    lengthOfLongestSubstring(\"abcabcbb\") == 3\n    lengthOfLongestSubstring(\"bbbbbb\") == 1\n    lengthOfLongestSubstring(\"pwwkew\") == 3\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            }\n            else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int sign = 1;\n\n        for (int num : arr) {\n            if (num < 0) {\n                sign *= -1;\n            } else if (num > 0) {\n                sign *= 1;\n            } else {\n                return Optional.of(0);\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(sum * sign);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        // TODO: implement this method to pass all test cases\n        return null;\n    }\n}\n\n"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n >= 0) {\n            result.add(3);\n        }\n        if (n >= 1) {\n            result.add(2);\n        }\n        if (n >= 2) {\n            result.add(8);\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(2 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        boolean isOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                isOdd = true;\n            }\n            n /= 10;\n        }\n        return isOdd ? product : 0;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        if (Character.isLetter(txt.charAt(txt.length() - 1))) {\n            if (txt.length() == 1 || !Character.isLetter(txt.charAt(txt.length() - 2))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int max = -1;\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> maxNeg = Optional.empty();\n        Optional<Integer> minPos = Optional.empty();\n\n        for(Integer num : lst){\n            if(num < 0){\n                if(maxNeg.isPresent()){\n                    maxNeg = Optional.of(Math.max(maxNeg.get(), num));\n                } else {\n                    maxNeg = Optional.of(num);\n                }\n            } else if(num > 0){\n                if(minPos.isPresent()){\n                    minPos = Optional.of(Math.min(minPos.get(), num));\n                } else {\n                    minPos = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Integer && b instanceof Integer) {\n            return (Integer) a > (Integer) b ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof Float && b instanceof Float) {\n            return (Float) a > (Float) b ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof String && b instanceof String) {\n            String strA = ((String) a).replace(',', '.');\n            String strB = ((String) b).replace(',', '.');\n            return Double.parseDouble(strA) > Double.parseDouble(strB) ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof String && b instanceof Float) {\n            String strA = ((String) a).replace(',', '.');\n            return Double.parseDouble(strA) > (Double) b ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof Float && b instanceof String) {\n            String strB = ((String) b).replace(',', '.');\n            return (Double) a > Double.parseDouble(strB) ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof String && b instanceof Integer) {\n            String strA = ((String) a).replace(',', '.');\n            return Double.parseDouble(strA) > (Integer) b ? Optional.of(a) : Optional.empty();\n        } else if (a instanceof Integer && b instanceof String) {\n            String strB = ((String) b).replace(',', '.');\n            return (Integer) a > Double.parseDouble(strB) ? Optional.of(a) : Optional.empty();\n        }\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n <= 4) {\n            return false;\n        }\n        if (n % 2 != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n                if (count == 1) {\n                    result.append('_');\n                } else if (count > 1) {\n                    result.append('-');\n                }\n            } else {\n                result.append(text.charAt(i));\n                count = 0;\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        // Your code goes here\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        int dotIndex = file_name.lastIndexOf('.');\n        if (dotIndex == -1 || dotIndex == 0 || dotIndex == file_name.length() - 1) {\n            return \"No\";\n        }\n        String name = file_name.substring(0, dotIndex);\n        String extension = file_name.substring(dotIndex + 1);\n        if (!Character.isLetter(name.charAt(0)) || name.matches(\".*\\\\d.*\")) {\n            return \"No\";\n        }\n        if (Arrays.asList(validExtensions).contains(extension)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(lst.get(i), 3);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        return (xNumerator * nDenominator) % (xDenominator * nNumerator) == 0;\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        // your code here\n        return nums;\n    }\n\n    \n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int num) {\n        int lastDigit = Math.abs(num % 10);\n        int firstDigit = Math.abs(num / 10 % 10);\n        return lastDigit % 2 != 0 && firstDigit % 2 != 0;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n+1];\n        for(int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 1; i <= n-2; i++) {\n            for(int j = i+1; j <= n-1; j++) {\n                for(int k = j+1; k <= n; k++) {\n                    if((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 > index2) {\n            return planets.subList(index2 + 1, index1);\n        } else {\n            return planets.subList(index1 + 1, index2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                }\n                return o1.length() - o2.length();\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && (int) obj % 2 != 0 && (int) obj > 0) {\n                sum += Math.pow((int) obj, 2);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return a new string where every occurrence of its first char is changed to '$', except the first char itself.\n\n    example:\n\n    changeChar(\"the\") -> \"th$\"\n    changeChar(\"hello\") -> \"hel$o\"\n    changeChar(\"aardvark\") -> \"a$rdv$rk\"\n     */\n    public String changeChar(String str) {\n        if (str.length() == 0) {\n            return str;\n        }\n        char firstChar = str.charAt(0);\n        StringBuilder result = new StringBuilder(firstChar + \"\");\n        for (int i = 1; i < str.length(); i++) {\n            if (str.charAt(i) == firstChar) {\n                result.append(\"$\");\n            } else {\n                result.append(str.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return a new string where the first and last chars have been exchanged.\n\n    example:\n\n    exchange(\"hello\") -> \"oellh\"\n    exchange(\"world\") -> \"dlrow\"\n    exchange(\"java\") -> \"avaj\"\n     */\n    public String exchange(String str) {\n        if (str.length() <= 1) {\n            return str;\n        }\n        return str.charAt(str.length() - 1) + str.substring(1, str.length() - 1) + str.charAt(0);\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, return a new string where the first\n}"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            int strength = getStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int getStrength(String extension) {\n        int upperCase = 0;\n        int lowerCase = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                upperCase++;\n            } else if (Character.isLowerCase(c)) {\n                lowerCase++;\n            }\n        }\n        return upperCase - lowerCase;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = b.charAt(b.length() - 1) + b.substring(0, b.length() - 1);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        List<Integer> counts = new ArrayList<>(Arrays.asList(0, 0));\n        num = Math.abs(num);\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                counts.set(0, counts.get(0) + 1);\n            } else {\n                counts.set(1, counts.get(1) + 1);\n            }\n            num /= 10;\n        }\n        return counts;\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder roman = new StringBuilder();\n        for (int i = 0; i < values.length && number >= 0; i++) {\n            while (values[i] <= number) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n        return roman.toString();\n    }\n}\n\n// Testing\n"}
{"task_id": "Java/157", "generation": "\n        // your code here\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUnique = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique ||\n                (uniqueChars.size() == maxUnique && word.compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, write a function to check if it is a permutation of a palindrome.\n    A palindrome is a word or phrase that is the same forwards and backwards.\n    A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\n    isPermutationOfPalindrome(\"aabbbb\") == true\n    isPermutationOfPalindrome(\"aabbcc\") == true\n    isPermutationOfPalindrome(\"abc\") == false\n     */\n    public boolean isPermutationOfPalindrome(String str) {\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);\n        }\n\n        int oddCounts = 0;\n        for (int count : charCounts.values()) {\n            if (count % 2 != 0) {\n                oddCounts++;\n            }\n            if (oddCounts > 1) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, write a function to check if it is a permutation of a palindrome.\n    A palindrome is a word or phrase that is the same\n}"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (need <= remaining) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string of lowercase letters. Your task is to count the number of distinct characters in the string.\n\n    Example:\n    * countDistinctCharacters(\"abc\") -> 3\n    * countDistinctCharacters(\"aaa\") -> 1\n    * countDistinctCharacters(\"22222222222Bra1234567890y\") -> 5\n\n    Variables:\n    @str : string\n        the string of lowercase letters\n\n    Constrain:\n    * 1 <= str.length <= 1000\n\n    Have fun :)\n     */\n    public int countDistinctCharacters(String str) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : str.toCharArray()) {\n            distinctChars.add(c);\n        }\n        return distinctChars.size();\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string of lowercase letters. Your task is to count the number of vowels in the string.\n\n    Example:\n    * countVowels(\"abc\") -> 1\n    * countVowels(\"aaa\") -> 3\n    * countVowels(\"22222222222Bra1234567890y\") -> 2\n\n    Variables:\n    @str : string\n        the string of lowercase letters\n\n    Constrain:\n    * 1 <= str.length <= 1000\n\n    Have fun :)\n     */\n    public int countVowels(String str) {\n        int count = 0;\n        for (char c : str.toCharArray"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            switch (operator.get(i - 1)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example:\n    s = \"abcabcbb\"\n    result = 3\n    Explanation: The longest substring without repeating characters is \"abc\", with a length of 3.\n\n    s = \"bbbbbb\"\n    result = 1\n    Explanation: The longest substring without repeating characters is \"b\", with a length of 1.\n\n    s = \"pwwkew\"\n    result = 3\n    Explanation: The longest substring without repeating characters is \"wke\", with a length of 3.\n\n    Note:\n    The input string s consists of English letters, digits, symbols and spaces.\n    The length of the input string s is in the range [0, 5 * 10^4].\n     */\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        Set<Character> set = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) {\n            // try to extend the range [i, j]\n            if (!set.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
