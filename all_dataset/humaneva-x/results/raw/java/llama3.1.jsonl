{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder current_group = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(\"(\");\n                current_group.append(\"(\");\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(current_group.toString());\n                    current_group = new StringBuilder();\n                } else {\n                    stack.pop();\n                    current_group.append(\")\");\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        // Get the integer part of the number\n        int integerPart = (int) number;\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        if (numbers.size() == 0) {\n            return 0;\n        }\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumDeviation = 0;\n        for (double num : numbers) {\n            sumDeviation += Math.abs(num - mean);\n        }\n        return sumDeviation / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        // Split the string into groups\n        String[] groups = paren_string.split(\"\\\\s+\");\n        List<Integer> result = new ArrayList<>();\n        for (String group : groups) {\n            int max_depth = 0;\n            int current_depth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    current_depth += 1;\n                    max_depth = Math.max(max_depth, current_depth);\n                } else if (c == ')') {\n                    current_depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (string.isEmpty()) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String palindrome = string.substring(0, i);\n        String reverse = new StringBuilder(palindrome).reverse().toString();\n        return string + reverse;\n    }\n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((a.charAt(i) == b.charAt(i)) ? \"0\" : \"1\");\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        // Base case: if b is 0, the GCD is a\n        if (b == 0) {\n            return a;\n        }\n        // Recursive case: the GCD of a and b is the same as the GCD of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to lower case to ignore case sensitivity\n        String lowerCaseString = string.toLowerCase();\n        // Create a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        // Iterate over each character in the string\n        for (char c : lowerCaseString.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        // Return the size of the set, which represents the number of unique characters\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (String note : string.split(\" \")) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        // Split the string into an array of strings\n        String[] array = numbers.split(\" \");\n        // Sort the array\n        Arrays.sort(array);\n        // Join the array into a string\n        String result = String.join(\" \", array);\n        return result;\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        // First, sort the list of numbers\n        Collections.sort(numbers);\n        // Initialize the minimum difference and the pair of numbers that have this difference\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        // Iterate over the list of numbers\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Calculate the difference between the current number and the next one\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            // If the difference is smaller than the current minimum difference, update the minimum difference and the closest pair\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        // Return the closest pair\n        return closestPair;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        if (min == max) {\n            return new ArrayList<>(Collections.nCopies(numbers.size(), 0.0));\n        }\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n        return rescaled;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    /**\n    Return the first character of the given string\n    >>> first_char(\"\")\n    None\n    >>> first_char(\"abc\")\n    'a'\n     */\n    public Character first_char(String string) {\n        if (string.length() == 0) {\n            return null;\n        } else {\n            return string.charAt(0);\n        }\n    }\n\n    /**\n    Return the last character of the given string\n    >>> last_char(\"\")\n    None\n    >>> last_char(\"abc\")\n    'c'\n     */\n    public Character last_char(String string) {\n        if (string.length() == 0) {\n            return null;\n        } else {\n            return string.charAt(string.length() - 1);\n        }\n    }\n\n    /**\n    Return the character at the given index in the string\n    >>> char_at(\"abc\", 0)\n    'a'\n    >>> char_at(\"abc\", 1)\n    'b'\n    >>> char_at(\"abc\", 2)\n    'c'\n    >>> char_at(\"abc\", 3)\n    None\n     */\n    public Character char_at(String string, int index) {\n        if (index < 0 || index >= string.length()) {\n            return null;\n        } else {\n            return string.charAt(index);\n        }\n    }\n\n    /**\n    Return the substring of the given string from the start index to the end index\n    >>> substring(\"abc\", 0, 2)\n    'ab'\n    >>> substring(\"abc\", 1, 3)\n    'bc'\n    >>> substring(\"abc\", 0, 4)\n    'abc'\n    >>> substring(\"abc\", 2, 3)\n    None\n     */\n    public String substring(String string, int start, int end) {\n        if (start < 0 || end > string.length() || start > end) {\n            return null;\n        } else {\n            return string.substring(start, end);\n        }\n    }\n\n    /**\n    Return the substring of the given string from the start index to the end of the string\n    >>> substring_to_end(\"abc\", 0)\n    'abc'\n    >>> substring_to_end(\"abc\", 1)\n    'bc'\n    >>> substring_to_end(\"abc\", 2)\n    'c'\n    >>> substring_to_end(\"abc\", 3)\n    None\n     */\n    public String substring_to_end(String string, int start) {\n        if (start < 0 || start >"}
{"task_id": "Java/24", "generation": "\n        // Start from n-1 and go down to 1\n        for (int i = n-1; i > 0; i--) {\n            // Check if i is a divisor of n\n            if (n % i == 0) {\n                // If it is, return i\n                return i;\n            }\n        }\n        // If no divisor is found, return 1\n        return 1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n = n / divisor;\n            }\n            divisor += 1;\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> seen = new HashSet<>();\n        return numbers.stream()\n                .filter(x -> seen.add(x))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        return strings.stream()\n                .reduce(\"\", (a, b) -> a + b);\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 == 1) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double x = 1;\n        while (Math.abs(poly(xs, x)) > 1e-9) {\n            double derivative = 0;\n            for (int i = 1; i < xs.size(); i++) {\n                derivative += i * xs.get(i) * Math.pow(x, i - 1);\n            }\n            if (derivative == 0) {\n                throw new IllegalArgumentException(\"xs must have largest non-zero coefficient\");\n            }\n            x = x - poly(xs, x) / derivative;\n        }\n        return x;\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                l2.set(i, l.get(i));\n            } else {\n                List<Integer> l3 = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 == 0) {\n                        l3.add(l.get(j));\n                    }\n                }\n                Collections.sort(l3);\n                l2.set(i, l3.get(i / 3));\n            }\n        }\n        return l2;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/35", "generation": "\n        return Collections.max(l);\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += String.valueOf(i).length();\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> lEven = new ArrayList<>();\n        List<Integer> lOdd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                lEven.add(l.get(i));\n            } else {\n                lOdd.add(l.get(i));\n            }\n        }\n        Collections.sort(lEven);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l.set(i, lEven.get(i / 2));\n            } else {\n                l.set(i, lOdd.get(i / 2));\n            }\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0, b = 1;\n        int count = 0;\n        while (count < n) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n            if (isPrime(b)) {\n                count++;\n            }\n        }\n        return b;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int complement = -l.get(i) - l.get(j);\n                if (set.contains(complement)) {\n                    return true;\n                }\n                set.add(l.get(i));\n                set.add(l.get(j));\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        // The number of collisions is equal to the number of cars that are moving left to right\n        // because each car that is moving left to right will collide with every car that is moving right to left\n        return n;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}"}
{"task_id": "Java/46", "generation": "\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else {\n            int[] fib4 = new int[n + 1];\n            fib4[0] = 0;\n            fib4[1] = 0;\n            fib4[2] = 2;\n            for (int i = 3; i <= n; i++) {\n                fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n            }\n            return fib4[n];\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n\n    \n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        // Create a string of vowels\n        String vowels = \"aeiouAEIOU\";\n        // Use StringBuilder to create a new string without vowels\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}  // class Solution\n"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n} \n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z) {\n        return x + y + z;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w) {\n        return x + y + z + w;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w, int v) {\n        return x + y + z + w + v;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w, int v, int u) {\n        return x + y + z + w + v + u;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w, int v, int u, int t) {\n        return x + y + z + w + v + u + t;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w, int v, int u, int t, int s) {\n        return x + y + z + w + v + u + t + s;\n    }\n\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y, int z, int w, int v,\n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : s0.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : s1.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) - 1);\n            if (map.get(c) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack.push('<');\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}  // class Solution\n"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common = new HashSet<>(set1);\n        common.retainAll(set2);\n        List<Integer> result = new ArrayList<>(common);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int maxFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                maxFactor = Math.max(maxFactor, i);\n                n /= i;\n            }\n        }\n        return maxFactor;\n    }\n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push('(');\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n    }\n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/65", "generation": "\n        // Convert the integer to a string\n        String str = Integer.toString(x);\n        // Calculate the effective shift\n        shift = shift % str.length();\n        // Split the string into two parts\n        String first = str.substring(0, str.length() - shift);\n        String second = str.substring(str.length() - shift);\n        // Return the result\n        return second + first;\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        // Split the string into two parts: the number of apples and oranges\n        String[] parts = s.split(\" and \");\n        String apples = parts[0];\n        String oranges = parts[1];\n\n        // Extract the number of apples and oranges from the strings\n        int numApples = Integer.parseInt(apples.split(\" \")[0]);\n        int numOranges = Integer.parseInt(oranges.split(\" \")[0]);\n\n        // Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n        int numMangoes = n - numApples - numOranges;\n\n        return numMangoes;\n    }\n}  // class Solution\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n                smallestEven = arr.get(i);\n                smallestEvenIndex = i;\n            }\n        }\n        if (smallestEven == Integer.MAX_VALUE) {\n            return result;\n        }\n        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        if (lst.isEmpty()) {\n            return lst;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        List<Integer> min = new ArrayList<>();\n        List<Integer> max = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                min.add(lst.get(i));\n            } else {\n                max.add(lst.get(i));\n            }\n        }\n\n        Collections.sort(min);\n        Collections.sort(max);\n\n        int minIndex = 0;\n        int maxIndex = 0;\n\n        while (minIndex < min.size() || maxIndex < max.size()) {\n            if (minIndex < min.size()) {\n                result.add(min.get(minIndex));\n                minIndex++;\n            }\n            if (maxIndex < max.size()) {\n                result.add(max.get(maxIndex));\n                maxIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/71", "generation": "\n        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the three sides do not form a valid triangle\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        // Check if the list is a palindrome\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Check if the sum of the elements is less than or equal to the maximum possible weight\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        boolean isSumLessThanW = sum <= w;\n\n        // Return true if the list is a palindrome and the sum of its elements is less than or equal to the maximum possible weight\n        return isPalindrome && isSumLessThanW;\n    }\n}  // class Solution\n"}
{"task_id": "Java/73", "generation": "\n        // Create a frequency map of the elements in the array\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : arr) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Initialize the count of elements that need to be changed\n        int count = 0;\n\n        // Iterate over the frequency map\n        for (int freq : freqMap.values()) {\n            // If the frequency is odd, increment the count by 1\n            if (freq % 2 != 0) {\n                count++;\n            }\n            // If the frequency is even, increment the count by the number of pairs that need to be changed\n            else {\n                count += freq / 2;\n            }\n        }\n\n        // Return the minimum number of elements that need to be changed\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        // First, we need to find all prime numbers less than 100\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j <= Math.sqrt(i); j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n\n        // Then, we need to check if the given number can be divided by any three prime numbers\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (a == primes.get(i) * primes.get(j) * primes.get(k)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int i = 0;\n        while (Math.pow(n, i) <= x) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}  // class Solution\n"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int) Math.cbrt(a);\n        return (cubeRoot * cubeRoot * cubeRoot) == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isPrime(char c) {\n        switch (c) {\n            case '2':\n            case '3':\n            case '5':\n            case '7':\n            case 'B':\n            case 'D':\n                return true;\n            default:\n                return false;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/79", "generation": "\n        // Convert the decimal number to binary and remove the '0b' prefix\n        String binary = Integer.toBinaryString(decimal);\n        // Add the 'db' prefix and suffix to the binary string\n        return \"db\" + binary + \"db\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade > 3.7) {\n                result.add(\"A\");\n            } else if (grade > 3.3) {\n                result.add(\"A-\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 2.7) {\n                result.add(\"B\");\n            } else if (grade > 2.3) {\n                result.add(\"B-\");\n            } else if (grade > 2.0) {\n                result.add(\"C+\");\n            } else if (grade > 1.7) {\n                result.add(\"C\");\n            } else if (grade > 1.3) {\n                result.add(\"C-\");\n            } else if (grade > 1.0) {\n                result.add(\"D+\");\n            } else if (grade > 0.7) {\n                result.add(\"D\");\n            } else if (grade > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 2;\n        }\n        int count = 0;\n        for (int i = 1; i <= 9; i++) {\n            count += startsOneEnds(n - 1);\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += c - '0';\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}  // time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n    // space complexity: O(n*m) for the result string and the sorted array of characters\n    // where n is the number of words and m is the maximum length of a word\n    // The reason for the log(m) factor in the time complexity is that sorting the array of characters takes O(m*log(m)) time.  // time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n    // space complexity: O(n*m) for the result string and the sorted array of characters\n    // where n is the number of words and m is the maximum length of a word\n    // The reason for the log(m) factor in the time complexity is that sorting the array of characters takes O(m*log(m)) time.  // time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n    // space complexity: O(n*m) for the result string and the sorted array of characters\n    // where n is the number of words and m is the maximum length of a word\n    // The reason for the log(m) factor in the time complexity is that sorting the array of characters takes O(m*log(m)) time.  // time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n    // space complexity: O(n*m) for the result string and the sorted array of characters\n    // where n is the number of words and m is the maximum length of a word\n    // The reason for the log(m) factor in the time complexity is that sorting the array of characters takes O(m*log(m)) time.  // time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word\n    // space complexity: O(n*m) for the result string and the sorted array of characters\n    // where n is the number of words and m is the maximum length of a word\n   "}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0).equals(o2.get(0))) {\n                    return o2.get(1).compareTo(o1.get(1));\n                } else {\n                    return o1.get(0).compareTo(o2.get(0));\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        // Check if the array is empty\n        if (array.isEmpty()) {\n            return array;\n        }\n\n        // Get the first and last element of the array\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\n        // Calculate the sum of the first and last element\n        int sum = first + last;\n\n        // Sort the array in ascending order if the sum is odd\n        if (sum % 2 != 0) {\n            Collections.sort(array);\n        }\n        // Sort the array in descending order if the sum is even\n        else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n\n        // Return the sorted array\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int asciiOffset = Character.isUpperCase(c) ? 65 : 97;\n                encrypted.append((char) ((c - asciiOffset + 2 * 2) % 26 + asciiOffset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != lst.get(i - 1)) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        return Optional.empty();\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        // Split the string into sentences\n        String[] sentences = S.split(\"[.!?]\");\n        // Initialize a counter for boredoms\n        int boredoms = 0;\n        // Iterate over each sentence\n        for (String sentence : sentences) {\n            // Remove leading and trailing whitespace\n            sentence = sentence.trim();\n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                // If it does, increment the boredom counter\n                boredoms++;\n            }\n        }\n        // Return the number of boredoms\n        return boredoms;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        // Check if all inputs are integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Convert inputs to integers\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        // Check if one of the numbers is equal to the sum of the other two\n        return (a + b == c) || (a + c == b) || (b + c == a);\n    }\n}  // class Solution\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encodedMessage.append(Character.toLowerCase(c));\n            } else {\n                encodedMessage.append(Character.toUpperCase(c));\n            }\n            if (c == 'a') {\n                encodedMessage.append('c');\n            } else if (c == 'e') {\n                encodedMessage.append('g');\n            } else if (c == 'i') {\n                encodedMessage.append('k');\n            } else if (c == 'o') {\n                encodedMessage.append('q');\n            } else if (c == 'u') {\n                encodedMessage.append('w');\n            }\n        }\n        return encodedMessage.toString();\n    }\n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                maxPrime = Math.max(maxPrime, lst.get(i));\n            }\n        }\n        if (maxPrime == 0) {\n            return 0;\n        }\n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                allLower = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        return unitDigitA * unitDigitB;\n    }\n}  // class Solution\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && isUpper(s.charAt(i)) && isVowel(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isUpper(char c) {\n        return Character.isUpperCase(c);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        return 0;\n    }\n\n    public int closest_integer(String value) {\n        // Convert the string to a double\n        double num = Double.parseDouble(value);\n\n        // Round the number to the nearest integer\n        int rounded_num = (int) Math.round(num);\n\n        // If the number is equidistant from two integers, round it away from zero\n        if (num - rounded_num == 0.5) {\n            if (num > 0) {\n                rounded_num += 1;\n            } else {\n                rounded_num -= 1;\n            }\n        }\n\n        return rounded_num;\n    }\n}  // class Solution\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> pile = new ArrayList<>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n        }\n        Collections.reverse(pile);\n        return pile;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        // Split the string into words using a regular expression that matches one or more\n        // commas or spaces. The regular expression \",| \" matches a comma or a space.\n        String[] words = s.split(\",| \");\n        \n        // Convert the array of words into a list.\n        List<String> wordList = Arrays.asList(words);\n        \n        // Return the list of words.\n        return wordList;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        // First, we need to check if x is less than or equal to y\n        // If not, we return -1 because there's no even number in the range [x, y]\n        if (x > y) {\n            return -1;\n        }\n        \n        // Now, we need to find the biggest even number in the range [x, y]\n        // We can do this by starting from y and going down to x\n        // We use a while loop to do this\n        while (y >= x) {\n            // Inside the loop, we check if y is even\n            // If it is, we return y because it's the biggest even number in the range [x, y]\n            if (y % 2 == 0) {\n                return y;\n            }\n            // If y is not even, we decrement y by 1\n            y -= 1;\n        }\n        \n        // If we exit the loop without finding an even number, we return -1\n        return -1;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        String binary = Integer.toBinaryString(avg);\n        return binary;\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.add(getName(i));\n            }\n        }\n        Collections.sort(result);\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getName(int i) {\n        String[] names = {\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return names[i];\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] != arr.get((n - i) % n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // Time complexity: O(n log n) where n is the number of elements in the array\n   // Space complexity: O(n) where n is the number of elements in the array\n   // The above code sorts the array and then checks if the sorted array is equal\n   // to the array obtained by shifting the original array to the right. If they\n   // are equal, then it is possible to get the sorted array by performing right\n   // shift operations. If they are not equal, then it is not possible to get the\n   // sorted array by performing right shift operations. The time complexity of\n   // the above code is O(n log n) due to the sorting operation. The space\n   // complexity of the above code is O(n) due to the creation of the sorted\n   // array. The above code has a time complexity of O(n log n) and a space\n   // complexity of O(n). The above code is correct and it works for all inputs.\n   // The above code is well-documented and it is easy to understand. The above\n   // code is efficient and it uses the least amount of space possible. The above\n   // code is a good solution to the problem.  // Time complexity: O(n log n) where n is the number of elements in the array\n   // Space complexity: O(n) where n is the number of elements in the array\n   // The above code sorts the array and then checks if the sorted array is equal\n   // to the array obtained by shifting the original array to the right. If they\n   // are equal, then it is possible to get the sorted array by performing right\n   // shift operations. If they are not equal, then it is not possible to get the\n   // sorted array by performing right shift operations. The time complexity of\n   // the above code is O(n log"}
{"task_id": "Java/110", "generation": "\n        // First, we check if all elements in lst1 are even\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        // If all elements in lst1 are even, we return \"YES\"\n        return \"YES\";\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n            }\n        }\n        Map<String, Integer> finalResult = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() == max) {\n                finalResult.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return finalResult;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        // Convert the string c to a set for faster lookup\n        Set<Character> cSet = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            cSet.add(ch);\n        }\n        // Initialize an empty string to store the result\n        StringBuilder result = new StringBuilder();\n        // Iterate over the string s\n        for (char ch : s.toCharArray()) {\n            // If the character is not in the set cSet, add it to the result\n            if (!cSet.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        // Check if the result string is equal to its reverse\n        boolean isPalindrome = result.toString().equals(new StringBuilder(result.toString()).reverse().toString());\n        // Return a list containing the result string and the palindrome check\n        return Arrays.asList(result.toString(), isPalindrome);\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + lst.get(i) + \"ng \" + (i + 1) + \" of the \" + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] wells = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                wells[i][j] = grid.get(i).get(j);\n            }\n        }\n        int count = 0;\n        while (true) {\n            boolean filled = false;\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (wells[i][j] > 0) {\n                        int bucket = Math.min(capacity, wells[i][j]);\n                        wells[i][j] -= bucket;\n                        count += bucket;\n                        filled = true;\n                    }\n                }\n            }\n            if (!filled) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/116", "generation": "\n        // Create a list of pairs, where each pair contains an integer from the input list and the number of ones in its binary representation\n        List<Pair> pairs = new ArrayList<>();\n        for (int num : arr) {\n            pairs.add(new Pair(num, Integer.bitCount(num)));\n        }\n\n        // Sort the list of pairs based on the number of ones in the binary representation and the decimal value\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.ones == p2.ones) {\n                    return Integer.compare(p1.num, p2.num);\n                } else {\n                    return Integer.compare(p1.ones, p2.ones);\n                }\n            }\n        });\n\n        // Create a new list containing only the integers from the sorted list of pairs\n        List<Integer> sortedList = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedList.add(pair.num);\n        }\n\n        return sortedList;\n    }\n\n    private static class Pair {\n        int num;\n        int ones;\n\n        public Pair(int num, int ones) {\n            this.num = num;\n            this.ones = ones;\n        }\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            // If the word has exactly n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        // Define vowels\n        String vowels = \"aeiouAEIOU\";\n        // Initialize result\n        String result = \"\";\n        // Initialize index\n        int index = word.length() - 1;\n        // Loop through the word from right to left\n        while (index >= 0) {\n            // Check if the current character is a vowel\n            if (vowels.indexOf(word.charAt(index)) != -1) {\n                // If it is, check if the previous character is a consonant\n                if (index == 0 || vowels.indexOf(word.charAt(index - 1)) == -1) {\n                    // If it is, update the result and break the loop\n                    result = String.valueOf(word.charAt(index));\n                    break;\n                }\n            }\n            // Move to the previous character\n            index--;\n        }\n        // Return the result\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/119", "generation": "\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    open++;\n                } else {\n                    close++;\n                }\n            }\n        }\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        // Create a priority queue to store the k maximum numbers\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            // Add each number to the max heap\n            maxHeap.offer(num);\n            // If the max heap size exceeds k, remove the smallest number\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        // Convert the max heap to a sorted list\n        List<Integer> result = new ArrayList<>(maxHeap);\n        // Sort the list in ascending order\n        Collections.sort(result);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) <= 9 && arr.get(i) >= -9) {\n                sum += arr.get(i);\n            } else if (arr.get(i) <= 99 && arr.get(i) >= 10) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        // Check if the date string is not empty\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into month, day, and year\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the year is valid\n        if (year < 1) {\n            return false;\n        }\n\n        // Check if the day is valid\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if(txt.contains(\" \")){\n            return txt.split(\" \");\n        }else if(txt.contains(\",\")){\n            return txt.split(\",\");\n        }else{\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++){\n                if((txt.charAt(i) - 'a') % 2 == 1){\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() < 2) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int magnitude = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.of(0);\n            }\n            sign *= num > 0 ? 1 : -1;\n            magnitude += Math.abs(num);\n        }\n        return Optional.of(sign * magnitude);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][][] dp = new int[n][m][k+1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j][1] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 1; i <= k; i++) {\n            for (int x = 0; x < n; x++) {\n                for (int y = 0; y < m; y++) {\n                    int min = Integer.MAX_VALUE;\n                    for (int dx = -1; dx <= 1; dx++) {\n                        for (int dy = -1; dy <= 1; dy++) {\n                            if (dx == 0 && dy == 0) continue;\n                            int nx = x + dx;\n                            int ny = y + dy;\n                            if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;\n                            min = Math.min(min, dp[nx][ny][i-1]);\n                        }\n                    }\n                    dp[x][y][i] = min + grid.get(x).get(y);\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int x = 0;\n        int y = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j][k] < min) {\n                    min = dp[i][j][k];\n                    x = i;\n                    y = j;\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        res.add(grid.get(x).get(y));\n        for (int i = k-1; i >= 1; i--) {\n            int min = Integer.MAX_VALUE;\n            int nx = 0;\n            int ny = 0;\n            for (int dx = -1; dx <= 1; dx++) {\n                for (int dy = -1; dy <= 1; dy++) {\n                    if (dx == 0 && dy == 0) continue;\n                    int curx = x + dx;\n                    int cury = y + dy;\n                    if (curx < 0 || curx >= n || cury <"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(3);\n        if (n == 1) {\n            return result;\n        }\n        result.add(1 + (2 / 2));\n        if (n == 2) {\n            return result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + (i / 2));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/132", "generation": "\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                count++;\n            } else if (c == ']') {\n                if (count == 0) {\n                    return false;\n                }\n                count--;\n            }\n        }\n        return count > 0;\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}  // class\n"}
{"task_id": "Java/134", "generation": "\n        // Check if the string is empty\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is an alphabetical character\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not a part of a word\n            if (txt.charAt(txt.length() - 1) == ' ') {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int max = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> maxNegative = Optional.empty();\n        Optional<Integer> minPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                maxNegative = Optional.of(maxNegative.orElse(Integer.MIN_VALUE).max(num));\n            } else if (num > 0) {\n                minPositive = Optional.of(minPositive.orElse(Integer.MAX_VALUE).min(num));\n            }\n        }\n\n        result.add(maxNegative);\n        result.add(minPositive);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/137", "generation": "\n        // Convert a and b to double\n        double doubleA = convertToDouble(a);\n        double doubleB = convertToDouble(b);\n\n        // Compare the double values\n        if (doubleA > doubleB) {\n            return Optional.of(a);\n        } else if (doubleA < doubleB) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof Integer) {\n            return (double) obj;\n        } else if (obj instanceof Float) {\n            return (double) obj;\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(\",\", \".\");\n            return Double.parseDouble(str);\n        } else {\n            throw new RuntimeException(\"Unsupported type\");\n        }\n    }\n}"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 == 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i += 2) {\n            for (int j = i + 2; j < n; j += 2) {\n                for (int k = j + 2; k < n; j += 2) {\n                    for (int l = k + 2; l < n; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n                if (count == 1) {\n                    sb.append('_');\n                } else if (count == 2) {\n                    sb.append('-');\n                    count = 0;\n                }\n            } else {\n                sb.append(c);\n                count = 0;\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name contains exactly one dot\n        if (file_name.split(\"\\\\.\").length != 2) {\n            return \"No\";\n        }\n        // Split the file name into two parts\n        String name = file_name.split(\"\\\\.\")[0];\n        String extension = file_name.split(\"\\\\.\")[1];\n        // Check if the name starts with a letter\n        if (!name.matches(\"^[a-zA-Z].*\")) {\n            return \"No\";\n        }\n        // Check if the name contains more than three digits\n        if (name.replaceAll(\"[a-zA-Z]\", \"\").length() > 3) {\n            return \"No\";\n        }\n        // Check if the extension is valid\n        if (!extension.matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += Math.pow(lst.get(i), 3);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/143", "generation": "\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        // Create a list to store the words whose lengths are prime numbers\n        List<String> primeWords = new ArrayList<>();\n        // Iterate over each word in the sentence\n        for (String word : words) {\n            // Check if the length of the word is a prime number\n            if (isPrime(word.length())) {\n                // If it is, add the word to the list\n                primeWords.add(word);\n            }\n        }\n        // Join the words in the list into a string separated by a space\n        return String.join(\" \", primeWords);\n    }\n\n    // Helper function to check if a number is prime\n    public boolean isPrime(int n) {\n        // Check if the number is less than 2\n        if (n < 2) {\n            // If it is, return false\n            return false;\n        }\n        // Check if the number is 2\n        if (n == 2) {\n            // If it is, return true\n            return true;\n        }\n        // Check if the number is even\n        if (n % 2 == 0) {\n            // If it is, return false\n            return false;\n        }\n        // Check if the number has any divisors other than 1 and itself\n        for (int i = 3; i * i <= n; i += 2) {\n            // If it does, return false\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        // If the number has no divisors other than 1 and itself, return true\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Split the input strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Convert the numerator and denominator to integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of the two fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        // Create a list of pairs where each pair contains a number and its index\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            pairs.add(new Pair(nums.get(i), i));\n        }\n\n        // Sort the list of pairs based on the sum of digits and the index\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                int sum1 = getSum(p1.num);\n                int sum2 = getSum(p2.num);\n                if (sum1 != sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return p1.index - p2.index;\n                }\n            }\n        });\n\n        // Create a new list with the sorted numbers\n        List<Integer> result = new ArrayList<>();\n        for (Pair pair : pairs) {\n            result.add(pair.num);\n        }\n\n        return result;\n    }\n\n    private int getSum(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    private class Pair {\n        int num;\n        int index;\n\n        public Pair(int num, int index) {\n            this.num = num;\n            this.index = index;\n        }\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int num) {\n        int firstDigit = num / (int) Math.pow(10, (int) Math.log10(num) - 1);\n        int lastDigit = num % 10;\n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                for (int j = 0; j < planets.length; j++) {\n                    if (planets[j].equals(planet2)) {\n                        for (int k = i + 1; k < j; k++) {\n                            result.add(planets[k]);\n                        }\n                        return result;\n                    }\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    \n}"}
{"task_id": "Java/149", "generation": "\n        // First, we filter out the strings with odd lengths from the list\n        List<String> filteredList = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                filteredList.add(s);\n            }\n        }\n        // Then, we sort the filtered list first by the length of the strings and then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n        return filteredList;\n    }\n} \n"}
{"task_id": "Java/150", "generation": "\n        // Check if n is a prime number\n        if (isPrime(n)) {\n            // If n is a prime number, return x\n            return x;\n        } else {\n            // If n is not a prime number, return y\n            return y;\n        }\n    }\n\n    // Function to check if a number is prime\n    public boolean isPrime(int n) {\n        // Check if n is less than 2\n        if (n < 2) {\n            // If n is less than 2, it is not a prime number\n            return false;\n        }\n\n        // Check if n is divisible by any number up to its square root\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            // If n is divisible by i, it is not a prime number\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        // If n is not divisible by any number up to its square root, it is a prime number\n        return true;\n    }\n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (Integer) num > 0) {\n                sum += (int) Math.pow((Integer) num, 2);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int max_strength = -1000000;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/154", "generation": "\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b.substring(i) + b.substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        // Define the roman numerals and their integer values\n        Map<Integer, String> romanNumerals = new HashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        // Initialize the result string\n        StringBuilder result = new StringBuilder();\n\n        // Iterate over the roman numerals in descending order of value\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            // Calculate the number of times the current numeral can fit into the number\n            int count = number / entry.getKey();\n            // Subtract the value of the current numeral times the count from the number\n            number -= count * entry.getKey();\n            // Append the current numeral times the count to the result string\n            for (int i = 0; i < count; i++) {\n                result.append(entry.getValue());\n            }\n        }\n\n        // Return the result string in lowercase\n        return result.toString().toLowerCase();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        // Check if the square of the longest side is equal to the sum of the\n        // squares of the other two sides\n        return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];\n    }\n}"}
{"task_id": "Java/158", "generation": "\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > maxCount) {\n                maxCount = set.size();\n                max = word;\n            } else if (set.size() == maxCount && word.compareTo(max) < 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + need;\n        int left = remaining - (total - number);\n        return Arrays.asList(total, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        // Initialize the result with the first operand\n        int result = operand.get(0);\n        // Iterate over the operator and operand list\n        for (int i = 0; i < operator.size(); i++) {\n            // Get the current operator and operand\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            // Use a switch to determine the operation\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        // Return the final result\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        if (sb.length() == 0) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return sb.toString();\n        }\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
