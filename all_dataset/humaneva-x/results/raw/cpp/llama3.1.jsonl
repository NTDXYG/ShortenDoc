{"task_id": "CPP/0", "generation": "\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i + 1; j < numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> groups;\n    string current_group = \"\";\n    bool in_group = false;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            in_group = true;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            in_group = false;\n            current_group += paren_string[i];\n            groups.push_back(current_group);\n            current_group = \"\";\n        }\n        else{\n            if(in_group){\n                current_group += paren_string[i];\n            }\n        }\n    }\n    return groups;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    float mad = 0;\n    for (int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    return mad / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    for (string group : split_string(paren_string, \" \")) {\n        int level = 0;\n        int max_level = 0;\n        for (char c : group) {\n            if (c == '(') {\n                level += 1;\n                max_level = max(max_level, level);\n            } else if (c == ')') {\n                level -= 1;\n            }\n        }\n        result.push_back(max_level);\n    }\n    return result;\n}\n\nvector<string> split_string(string str, string delimiter) {\n    vector<string> tokens;\n    size_t prev = 0, pos = 0;\n    do {\n        pos = str.find(delimiter, prev);\n        if (pos == string::npos) pos = str.length();\n        string token = str.substr(prev, pos - prev);\n        if (!token.empty()) tokens.push_back(token);\n        prev = pos + delimiter.length();\n    } while (pos < str.length());\n    return tokens;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for (auto str : strings){\n        if (str.find(substring) != string::npos){\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    string s=str;\n    while(is_palindrome(s)){\n        s.pop_back();\n    }\n    string palin=s;\n    reverse(s.begin(),s.end());\n    s+=palin;\n    return s;\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result;\n    for(int i=0;i<a.length();i++){\n        if(a[i]!=b[i]) result+='1';\n        else result+='0';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size() == 0){\n        return \"\";\n    }\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    while (b != 0){\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=1;i<=str.length();i++){\n        prefixes.push_back(str.substr(0,i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\nstring result;\nfor(int i=0;i<=n;i++){\nresult+=to_string(i)+\" \";\n}\nreturn result.substr(0,result.size()-1);\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        char c = tolower(str[i]);\n        if(find(distinct_chars.begin(),distinct_chars.end(),c)==distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    for(int i = 0; i < music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '|'){\n            result.push_back(2);\n            i++;\n        }\n        else if(music_string[i] == '.' && music_string[i+1] == '|'){\n            result.push_back(1);\n            i++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n\tint count=0;\n\tint len=str.length();\n\tint sublen=substring.length();\n\tfor(int i=0;i<len;i++){\n\t\tif(str.substr(i,sublen)==substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> num_dict;\n    num_dict[\"zero\"]=0;\n    num_dict[\"one\"]=1;\n    num_dict[\"two\"]=2;\n    num_dict[\"three\"]=3;\n    num_dict[\"four\"]=4;\n    num_dict[\"five\"]=5;\n    num_dict[\"six\"]=6;\n    num_dict[\"seven\"]=7;\n    num_dict[\"eight\"]=8;\n    num_dict[\"nine\"]=9;\n    string sorted_numbers;\n    string word;\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]!=' '){\n            word+=numbers[i];\n        }\n        else{\n            sorted_numbers+=word;\n            word=\"\";\n        }\n    }\n    sorted_numbers+=word;\n    string sorted_numbers_array[sorted_numbers.length()];\n    int index=0;\n    for(int i=0;i<sorted_numbers.length();i++){\n        if(sorted_numbers[i]!=' '){\n            sorted_numbers_array[index]=sorted_numbers.substr(i,sorted_numbers.length()-i);\n            index++;\n        }\n    }\n    for(int i=0;i<sorted_numbers_array.length();i++){\n        for(int j=i+1;j<sorted_numbers_array.length();j++){\n            if(num_dict[sorted_numbers_array[i]]>num_dict[sorted_numbers_array[j]]){\n                string temp=sorted_numbers_array[i];\n                sorted_numbers_array[i]=sorted_numbers_array[j];\n                sorted_numbers_array[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<sorted_numbers_array.length();i++){\n        sorted_numbers+=sorted_numbers_array[i];\n        if(i<sorted_numbers_array.length()-1){\n            sorted_numbers+=\" \";\n        }\n    }\n    return sorted_numbers;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    float num1, num2;\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i + 1; j < numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                num1 = numbers[i];\n                num2 = numbers[j];\n            }\n        }\n    }\n    return {num1, num2};\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++){\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    vector<float> rescaled;\n    for (int i = 0; i < numbers.size(); i++){\n        rescaled.push_back((numbers[i] - min) / (max - min));\n    }\n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for (auto value : values){\n        if (boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    int i = 2;\n    while(i*i <= n){\n        if(n % i == 0){\n            int count = 0;\n            while(n % i == 0){\n                n /= i;\n                count++;\n            }\n            for(int j = 0; j < count; j++){\n                factors.push_back(i);\n            }\n        }\n        i++;\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++){\n        if (find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for (auto s : strings){\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for (string s : strings){\n        if (s.find(prefix) == 0){\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> result;\n    for (int i = 0; i < l.size(); i++){\n        if (l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1) return false;\n    for(long long i = 2; i * i <= n; i++){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double a = xs[0];\n    double b = xs[1];\n    double c = xs[2];\n    double d = xs[3];\n    double e = xs[4];\n    double f = xs[5];\n    double g = xs[6];\n    double h = xs[7];\n    double i = xs[8];\n    double j = xs[9];\n    double k = xs[10];\n    double l = xs[11];\n    double m = xs[12];\n    double n = xs[13];\n    double o = xs[14];\n    double p = xs[15];\n    double q = xs[16];\n    double r = xs[17];\n    double s = xs[18];\n    double t = xs[19];\n    double u = xs[20];\n    double v = xs[21];\n    double w = xs[22];\n    double x = xs[23];\n    double y = xs[24];\n    double z = xs[25];\n    double aa = xs[26];\n    double bb = xs[27];\n    double cc = xs[28];\n    double dd = xs[29];\n    double ee = xs[30];\n    double ff = xs[31];\n    double gg = xs[32];\n    double hh = xs[33];\n    double ii = xs[34];\n    double jj = xs[35];\n    double kk = xs[36];\n    double ll = xs[37];\n    double mm = xs[38];\n    double nn = xs[39];\n    double oo = xs[40];\n    double pp = xs[41];\n    double qq = xs[42];\n    double rr = xs[43];\n    double ss = xs[44];\n    double tt = xs[45];\n    double uu = xs[46];\n    double vv = xs[47];\n    double ww = xs[48];\n    double xx = xs[49];\n    double yy = xs[50];\n    double zz = xs[51];\n    double aaa = xs[52];\n    double bbb = xs[53];\n    double ccc = xs[54];\n    double ddd = xs[55];\n    double eee = xs[56];\n    double fff = xs[57];\n    double ggg = xs[58];\n    double hhh = xs[59];\n    double iii = xs[60];\n    double jjj = xs[61];\n    double kkk = xs[62"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l2;\n    for(int i = 0; i < l.size(); i++){\n        if(i % 3 == 0){\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(), l2.end());\n    for(int i = 0; i < l.size(); i++){\n        if(i % 3 != 0){\n            l[i] = l2[i/3];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n\tsort(l.begin(), l.end());\n\tl.erase(unique(l.begin(), l.end()), l.end());\n\treturn l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int temp = i;\n            while(temp > 0){\n                if(temp % 10 == 7){\n                    count++;\n                }\n                temp = temp / 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l2;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0){\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(), l2.end());\n    for(int i=0; i<l.size(); i++){\n        if(i%2!=0){\n            l[i]=l2[i/2];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n    int l=s.length();\n    int num=(l+2)/3;\n    string output;\n    int i;\n    for (i=0;i*num<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        string x=s.substr(i*num,num);\n        if (x.length()==num) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=1;\n    while(c<n){\n        a=b;\n        b=c;\n        c=a+b;\n    }\n    if(c==n){\n        return c;\n    }\n    else{\n        return 0;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            for(int k = j + 1; k < l.size(); k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collisions = 0;\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n            if(i != j){\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        l[i] += 1;\n    }\n    return l;\n}\nvector<int> incr_vector(unordered_set<int> s){\n    vector<int> l(s.begin(), s.end());\n    return incr_list(l);\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\nstring s;\nwhile(x>0){\ns=to_string(x%base)+s;\nx/=base;\n}\nreturn s;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n<0){\n        return 0;\n    }\n    int a=0,b=0,c=2,d=0;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[n / 2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i = 0;\n    int j = text.length() - 1;\n    while (i < j){\n        if (text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    while(n){\n        if(n&1) res=(long long)res*p%p;\n        n>>=1;\n        p=(long long)p*p%p;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-(int)'a')%26+5+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++){\n        if(vowels.find(text[i]) == string::npos){\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for (int i = 0; i < l.size(); i++){\n        if (l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n\tsort(s0.begin(),s0.end());\n\tsort(s1.begin(),s1.end());\n\treturn s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size() - 1; i++){\n        if(l[i] > l[i + 1]){\n            increasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> l3;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]==l2[j]){\n            l3.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    sort(l3.begin(),l3.end());\n    l3.erase(unique(l3.begin(),l3.end()),l3.end());\n    return l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i*i<=n;i++){\n        if(n%i==0){\n            n/=i;\n            i--;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '('){\n            count++;\n        }else if(brackets[i] == ')'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i = 1; i < xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n<=1) return 0;\n    if(n==2) return 1;\n    int a=0,b=0,c=1;\n    for(int i=3;i<=n;i++){\n        int temp=a+b+c;\n        a=b;\n        b=c;\n        c=temp;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n        else if(s[i] == 'y' && i == s.length() - 1){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\nstring s=to_string(x);\nif(shift>=s.length()){\nshift=shift%s.length();\n}\nstring s1=s.substr(s.length()-shift,s.length());\nstring s2=s.substr(0,s.length()-shift);\nreturn s1+s2;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isupper(s[i])){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int i = 0;\n    int j = 0;\n    while(s[i]!=' '){\n        j = j*10 + (s[i]-'0');\n        i++;\n    }\n    i++;\n    while(s[i]!=' '){\n        j = j*10 + (s[i]-'0');\n        i++;\n    }\n    return n - j - (s[i+5]-'0');\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> result;\n    int min_even = 100000;\n    int min_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(arr[i] < min_even){\n                min_even = arr[i];\n                min_index = i;\n            }\n        }\n    }\n    if(min_even == 100000){\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_index);\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    for(int i = 1; i < lst.size(); i++){\n        if(lst.count(i) >= i){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> result;\n    while(lst.size() > 0){\n        int min = *min_element(lst.begin(), lst.end());\n        result.push_back(min);\n        lst.erase(find(lst.begin(), lst.end(), min));\n        if(lst.size() > 0){\n            int max = *max_element(lst.begin(), lst.end());\n            result.push_back(max);\n            lst.erase(find(lst.begin(), lst.end(), max));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s=(a+b+c)/2;\n        return round(s*(s-a)*(s-b)*(s-c)*8.0/27.0*100.0)/100.0;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n    }\n    for(int i = 0; i < q.size(); i++){\n        if(q[i] != q[q.size()-i-1]){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(auto i:lst1){\n        sum1+=i.size();\n    }\n    for(auto i:lst2){\n        sum2+=i.size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i < a; i++){\n        if(a % i == 0){\n            count++;\n            while(a % i == 0){\n                a = a / i;\n            }\n        }\n    }\n    if(a > 1){\n        count++;\n    }\n    return count == 3;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    double y=pow(n,log(x)/log(n));\n    if(y==int(y)) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = round(pow(a, 1.0/3));\n    return pow(b, 3) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D' || num[i] == 'F'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    string result = \"db\" + binary + \"db\";\n    return result;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for (int i = 0; i < grades.size(); i++){\n        if (grades[i] == 4.0){\n            letter_grades.push_back(\"A+\");\n        }\n        else if (grades[i] > 3.7){\n            letter_grades.push_back(\"A\");\n        }\n        else if (grades[i] > 3.3){\n            letter_grades.push_back(\"A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push_back(\"B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push_back(\"B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push_back(\"B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push_back(\"C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push_back(\"C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push_back(\"C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push_back(\"D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push_back(\"D\");\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push_back(\"D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= length / 2; i++) {\n        if (length % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 2;\n    int count=0;\n    for(int i=1;i<=n-2;i++){\n        count+=9*power(10,i-1);\n    }\n    count+=2*power(10,n-2);\n    return count;\n}\nint power(int a,int b){\n    int ans=1;\n    for(int i=0;i<b;i++){\n        ans*=a;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N > 0){\n        binary = to_string(N%2) + binary;\n        N = N/2;\n    }\n    int sum = 0;\n    for(int i = 0; i < binary.length(); i++){\n        sum += binary[i] - '0';\n    }\n    string result = \"\";\n    while(sum > 0){\n        result = to_string(sum%2) + result;\n        sum = sum/2;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n} \n"}
{"task_id": "CPP/86", "generation": "\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            s.replace(i,word.length(),\"\");\n            s.insert(i,word);\n            i+=word.length()-1;\n            word=\"\";\n        }\n        else word+=s[i];\n    }\n    sort(word.begin(),word.end());\n    s.replace(s.length()-word.length(),word.length(),\"\");\n    s.insert(s.length(),word);\n    return s;\n}\n"}
{"task_id": "CPP/87", "generation": "\n  vector<vector<int>> res;\n  for(int i = 0; i < lst.size(); i++){\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[i][j] == x){\n        res.push_back({i, j});\n      }\n    }\n  }\n  sort(res.begin(), res.end(), [](vector<int> a, vector<int> b){\n    if(a[0] == b[0]) return a[1] > b[1];\n    return a[0] < b[0];\n  });\n  return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    int first = array[0];\n    int last = array[array.size() - 1];\n    int sum = first + last;\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    }else{\n        sort(array.begin(), array.end());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        int index = alphabet.find(s[i]);\n        if(index != -1){\n            int newIndex = (index + 2 * 2) % 26;\n            result += alphabet[newIndex];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size() < 2) return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] != lst[i-1]) return lst[i];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string sentence;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(sentence.find(\"I\") != string::npos){\n                count++;\n            }\n            sentence = \"\";\n        }else{\n            sentence += S[i];\n        }\n    }\n    if(sentence.find(\"I\") != string::npos){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if (a+b==c && a%1==0 && b%1==0 && c%1==0)\n        return true;\n    if (a+c==b && a%1==0 && b%1==0 && c%1==0)\n        return true;\n    if (b+c==a && a%1==0 && b%1==0 && c%1==0)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(vowels.find(message[i]) != string::npos){\n            result += char(message[i] + 2);\n        } else {\n            result += toupper(message[i]) == message[i] ? tolower(message[i]) : toupper(message[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max && lst[i] != 0){\n            max = lst[i];\n        }\n    }\n    int sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        if(it->first[0] >= 'a' && it->first[0] <= 'z'){\n            if(it->first[0] != 'a'){\n                all_lower = false;\n            }\n        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z'){\n            if(it->first[0] != 'A'){\n                all_upper = false;\n            }\n        }\n        else{\n            all_lower = false;\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool is_prime = true;\n        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}  // please note: this function will return the product of the unit digits, not the product of the numbers themselves. If you want the product of the numbers, you should use a different function. \n"}
{"task_id": "CPP/98", "generation": "\n\tint count = 0;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int int_num = (int)num;\n    if (num - int_num >= 0.5) {\n        return int_num + 1;\n    } else {\n        return int_num;\n    }\n}  // DON'T FORGET TO ADD ; AT THE END OF THE FUNCTION\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            pile.push_back(i + 1);\n        }else{\n            pile.push_back(i - 1);\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '||s[i]==','){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x%2==0 && y%2==0){\n        return y;\n    }\n    else if(x%2==0 && y%2!=0){\n        return x-1;\n    }\n    else if(x%2!=0 && y%2==0){\n        return y-1;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m){\n        return \"-1\";\n    }\n    double sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    double avg=sum/(m-n+1);\n    int rounded_avg=round(avg);\n    string binary;\n    while(rounded_avg>0){\n        binary=to_string(rounded_avg%2)+binary;\n        rounded_avg/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i = 0; i < x.size(); i++){\n        int temp = x[i];\n        bool flag = true;\n        while(temp > 0){\n            if(temp % 10 % 2 == 0){\n                flag = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if(flag){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    sort(res.begin(), res.end());\n    reverse(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res(n);\n    for(int i = 0; i < n; i++){\n        if(i % 2 == 0){\n            int fact = 1;\n            for(int j = 1; j <= i; j++){\n                fact *= j;\n            }\n            res[i] = fact;\n        }else{\n            int sum = 0;\n            for(int j = 1; j <= i; j++){\n                sum += j;\n            }\n            res[i] = sum;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even = 0, odd = 0;\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        if(str == string(str.rbegin(), str.rend())){\n            if(i % 2 == 0) even++;\n            else odd++;\n        }\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int sum = 0;\n        int num = abs(n[i]);\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd = 0;\n    for(int i = 0; i < lst1.size(); i++){\n        if(lst1[i] % 2 != 0){\n            odd++;\n        }\n    }\n    for(int i = 0; i < lst2.size(); i++){\n        if(lst2[i] % 2 != 0){\n            odd--;\n        }\n    }\n    if(odd == 0){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    if(test.empty()) return result;\n    string word;\n    for(int i=0;i<test.length();i++){\n        if(test[i]==' '){\n            if(!word.empty()){\n                if(result.find(word[0])!=result.end()){\n                    result[word[0]]++;\n                }else{\n                    result[word[0]]=1;\n                }\n                word.clear();\n            }\n        }else{\n            word+=test[i];\n        }\n    }\n    if(!word.empty()){\n        if(result.find(word[0])!=result.end()){\n            result[word[0]]++;\n        }else{\n            result[word[0]]=1;\n        }\n    }\n    int max=0;\n    for(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n        if(it->second>max) max=it->second;\n    }\n    map<char,int> result2;\n    for(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n        if(it->second==max) result2[it->first]=it->second;\n    }\n    return result2;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        bool flag=0;\n        for(int j=0;j<c.size();j++){\n            if(s[i]==c[j]){\n                flag=1;\n                break;\n            }\n        }\n        if(!flag){\n            res+=s[i];\n        }\n    }\n    string res2=res;\n    reverse(res2.begin(),res2.end());\n    if(res==res2){\n        return {res,\"True\"};\n    }\n    else{\n        return {res,\"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    map<string, int> result;\n    for(int i = 0; i < lst.size(); i++){\n        int odd = 0;\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] % 2 != 0){\n                odd++;\n            }\n        }\n        string s = \"the number of odd elements \" + to_string(odd) + \"n the str\" + to_string(odd) + \"ng \" + to_string(odd) + \" of the \" + to_string(odd) + \"nput.\";\n        result[\"the number of odd elements \" + to_string(odd) + \"n the str\" + to_string(odd) + \"ng \" + to_string(odd) + \" of the \" + to_string(odd) + \"nput.\"] = odd;\n    }\n    return vector<string>();\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = 0;\n    long long currentSum = 0;\n    for(long long num : nums){\n        currentSum = min(num, currentSum + num);\n        minSum = min(minSum, currentSum);\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill = 0;\n    for(int i = 0; i < grid.size(); i++){\n        int fill = 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            fill += grid[i][j];\n            max_fill = max(max_fill,fill);\n            if(fill >= capacity){\n                fill = capacity;\n                max_fill = max(max_fill,fill);\n            }\n        }\n    }\n    return max_fill;\n}\nint min_bucket(int max_fill,int capacity){\n    return max_fill / capacity + (max_fill % capacity != 0);\n}\nint waterBottles(int n, int capacity, int bottles) {\n    int max_fill = max_fill(vector<vector<int>>({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}},capacity);\n    return min_bucket(max_fill,bottles);\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int ones_a = 0, ones_b = 0;\n        while(a > 0){\n            if(a % 2 == 1) ones_a++;\n            a /= 2;\n        }\n        while(b > 0){\n            if(b % 2 == 1) ones_b++;\n            b /= 2;\n        }\n        if(ones_a == ones_b) return a < b;\n        return ones_a < ones_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n        }\n        else{\n            if(word.length()>=n){\n                int count=0;\n                for(int j=0;j<word.length();j++){\n                    if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                        count++;\n                    }\n                }\n                if(count==n){\n                    result.push_back(word);\n                }\n            }\n            word=\"\";\n        }\n    }\n    if(word.length()>=n){\n        int count=0;\n        for(int j=0;j<word.length();j++){\n            if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                count++;\n            }\n        }\n        if(count==n){\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.length()-1; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos){\n                return word.substr(i,1);\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    int close = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == \"(\"){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    if(open == close){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> result(arr.begin(),arr.begin()+k);\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 != 0 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] < 10 || arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> odd_collatz;\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = n * 3 + 1;\n        }\n        if(n % 2 != 0){\n            odd_collatz.push_back(n);\n        }\n    }\n    odd_collatz.push_back(1);\n    sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int day,month,year;\n    if(date.length()!=10) return false;\n    if(date[2]!='-' || date[5]!='-') return false;\n    sscanf(date.c_str(),\"%d-%d-%d\",&month,&day,&year);\n    if(month<1 || month>12) return false;\n    if(day<1 || day>31) return false;\n    if((month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12) && day>31) return false;\n    if((month==4 || month==6 || month==9 || month==11) && day>30) return false;\n    if(month==2 && day>29) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    int i = 0;\n    while(i < txt.length()){\n        if(txt[i] == ' '){\n            string word = txt.substr(0,i);\n            res.push_back(word);\n            txt.erase(0,i+1);\n            i = 0;\n        }\n        else if(txt[i] == ','){\n            string word = txt.substr(0,i);\n            res.push_back(word);\n            txt.erase(0,i+1);\n            i = 0;\n        }\n        else{\n            i++;\n        }\n    }\n    if(res.size() == 0){\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++){\n            if(islower(txt[i]) && (i % 2) != 0){\n                count++;\n            }\n        }\n        res.push_back(to_string(count));\n    }\n    return res;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size() == 1){\n        return true;\n    }\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n        if(lst[i] == lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end){\n        return \"NO\";\n    }\n    int length = end-start+1;\n    if(length==1){\n        return \"NO\";\n    }\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size() == 0){\n        return -32768;\n    }\n    int sign = 1;\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] == 0){\n            sign = 0;\n        }\n        else if(arr[i] < 0){\n            sign *= -1;\n        }\n        sum += abs(arr[i]) * sign;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> visited(n, vector<int>(n, 0));\n    vector<int> path;\n    int minPathValue = 1e9;\n    int minPathIndex = -1;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(visited[i][j] == 0){\n                vector<int> currentPath;\n                int currentValue = 0;\n                int currentStep = 0;\n                int x = i;\n                int y = j;\n                while(currentStep < k){\n                    currentPath.push_back(grid[x][y]);\n                    currentValue = grid[x][y];\n                    visited[x][y] = 1;\n                    currentStep++;\n                    int minNeighborValue = 1e9;\n                    int minNeighborX = -1;\n                    int minNeighborY = -1;\n                    for(int dx = -1; dx <= 1; dx++){\n                        for(int dy = -1; dy <= 1; dy++){\n                            if(dx == 0 && dy == 0) continue;\n                            int nx = x + dx;\n                            int ny = y + dy;\n                            if(nx >= 0 && nx < n && ny >= 0 && ny < n && visited[nx][ny] == 0){\n                                if(grid[nx][ny] < minNeighborValue){\n                                    minNeighborValue = grid[nx][ny];\n                                    minNeighborX = nx;\n                                    minNeighborY = ny;\n                                }\n                            }\n                        }\n                    }\n                    x = minNeighborX;\n                    y = minNeighborY;\n                }\n                if(currentValue < minPathValue){\n                    minPathValue = currentValue;\n                    minPathIndex = currentPath.size() - 1;\n                }\n                else if(currentValue == minPathValue){\n                    if(currentPath.size() > path.size()){\n                        minPathIndex = currentPath.size() - 1;\n                    }\n                }\n                path = currentPath;\n            }\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n+1);\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 1 + 2/2;\n    for(int i = 3; i <= n; i++){\n        if(i%2 == 0){\n            res[i] = 1 + i/2;\n        }else{\n            res[i] = res[i-1] + res[i-2] + res[i+1];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0) return false;\n    string words[] = {\"apple\", \"pie\", \"pi\", \"e\"};\n    for(int i = 0; i < 4; i++){\n        if(txt.find(words[i]) != string::npos){\n            if(txt.length() == words[i].length() + txt.find(words[i])) return false;\n        }\n    }\n    return isalpha(txt[txt.length() - 1]);\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    for(int i = 1; i < n; i++){\n        if(arr[i] <= arr[i-1]){\n            return i-1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = 0;\n    int min_pos = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > max_neg){\n            max_neg = lst[i];\n        }\n        if(lst[i] > 0 && lst[i] < min_pos){\n            min_pos = lst[i];\n        }\n    }\n    if(max_neg == 0 && min_pos == 0){\n        return {0, 0};\n    }\n    if(max_neg == 0){\n        return {0, min_pos};\n    }\n    if(min_pos == 0){\n        return {max_neg, 0};\n    }\n    return {max_neg, min_pos};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        if((int)a > (int)b) return a;\n        else if((int)a < (int)b) return b;\n        else return boost::any(\"None\");\n    }\n    else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        if((float)a > (float)b) return a;\n        else if((float)a < (float)b) return b;\n        else return boost::any(\"None\");\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string s1 = (string)a;\n        string s2 = (string)b;\n        s1.erase(remove(s1.begin(), s1.end(), ','), s1.end());\n        s2.erase(remove(s2.begin(), s2.end(), ','), s2.end());\n        s1.erase(remove(s1.begin(), s1.end(), '.'), s1.end());\n        s2.erase(remove(s2.begin(), s2.end(), '.'), s2.end());\n        if(stof(s1) > stof(s2)) return a;\n        else if(stof(s1) < stof(s2)) return b;\n        else return boost::any(\"None\");\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(int)){\n        string s1 = (string)a;\n        s1.erase(remove(s1.begin(), s1.end(), ','), s1.end());\n        s1.erase(remove(s1.begin(), s1.end(), '.'), s1.end());\n        if(stof(s1) > (int)b) return a;\n        else if(stof(s1) < (int)b) return b;\n        else return boost::any(\"None\");\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(float)){\n        string s1 = (string)a;\n        s1.erase(remove(s1.begin(), s1.end(), ','), s1.end());\n        s1.erase(remove(s1.begin(), s1.end(), '.'), s1.end());\n        if(stof(s1) > (float)b) return a;\n        else if(stof(s1) < (float)b) return b;\n        else return boost::any(\"None\");\n    }\n    else if(a.type() == typeid(int) && b.type() == typeid(string)){\n        string s2 = (string)b;\n        s2.erase"}
{"task_id": "CPP/138", "generation": "\n    for(int i=2;i<=n/2;i+=2){\n        for(int j=i+2;j<=n/2;j+=2){\n            for(int k=j+2;k<=n/2;k+=2){\n                for(int l=k+2;l<=n/2;l+=2){\n                    if(i+j+k+l==n)\n                        return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1){\n                result += '_';\n            }else if(count == 2){\n                result += '-';\n                count = 0;\n            }\n        }else{\n            result += text[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count = 0;\n    bool flag = false;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n            if(count > 3){\n                return \"No\";\n            }\n        }\n        if(file_name[i] == '.'){\n            flag = true;\n        }\n    }\n    if(!flag){\n        return \"No\";\n    }\n    string name = file_name.substr(0, file_name.find_last_of('.'));\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z'){\n        return \"No\";\n    }\n    string ext = file_name.substr(file_name.find_last_of('.') + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    string word;\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            int length = word.length();\n            if(length > 1){\n                for(int j = 2; j < length; j++){\n                    if(length % j == 0){\n                        break;\n                    }\n                }\n                if(j == length){\n                    result += word + \" \";\n                }\n            }\n            word = \"\";\n        }\n        else{\n            word += sentence[i];\n        }\n    }\n    int length = word.length();\n    if(length > 1){\n        for(int j = 2; j < length; j++){\n            if(length % j == 0){\n                break;\n            }\n        }\n        if(j == length){\n            result += word;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int, int>> points;\n    for(int i = 0; i < nums.size(); i++){\n        int sum = 0;\n        int n = abs(nums[i]);\n        while(n > 0){\n            sum += n % 10;\n            n /= 10;\n        }\n        points.push_back(make_pair(sum, i));\n    }\n    sort(points.begin(), points.end());\n    vector<int> result;\n    for(int i = 0; i < points.size(); i++){\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            int num = abs(nums[i]);\n            int first_digit = num % 10;\n            int last_digit = num / 10 % 10;\n            if(first_digit % 2 != 0 && last_digit % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1 || planets[i]==planet2){\n            if(planets[i]==planet1){\n                for(int j=i+1;j<planets.size();j++){\n                    if(planets[j]==planet2){\n                        for(int k=i+1;k<j;k++){\n                            result.push_back(planets[k]);\n                        }\n                        return result;\n                    }\n                }\n            }\n            else{\n                for(int j=0;j<i;j++){\n                    if(planets[j]==planet1){\n                        for(int k=j+1;k<i;k++){\n                            result.push_back(planets[k]);\n                        }\n                        return result;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for (string s : lst){\n        if (s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](string a, string b){\n        if (a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i] > 0 && lst[i] == (int)lst[i]){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n} \n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension;\n    for (int i = 0; i < extensions.size(); i++){\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++){\n            if (isupper(extensions[i][j])){\n                cap++;\n            }\n            else{\n                sm++;\n            }\n        }\n        int strength = cap - sm;\n        if (strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    for(int i=0;i<a.length();i++){\n        string c=a.substr(i,a.length()-i);\n        if(c.find(b)!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    vector<int> result;\n    result.push_back(even);\n    result.push_back(odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<string> roman_numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = words[0];\n    for(int i = 1; i < words.size(); i++){\n        int max_unique = 0;\n        for(int j = 0; j < words[i].size(); j++){\n            bool unique = true;\n            for(int k = 0; k < words[i].size(); k++){\n                if(j != k && words[i][j] == words[i][k]){\n                    unique = false;\n                    break;\n                }\n            }\n            if(unique){\n                max_unique++;\n            }\n        }\n        if(max_unique > 0 && max_unique > max_word.size() - unique_count(max_word)){\n            max_word = words[i];\n        }\n        else if(max_unique > 0 && max_unique == max_word.size() - unique_count(max_word)){\n            if(words[i] < max_word){\n                max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n}\nint unique_count(string word){\n    int count = 0;\n    for(int i = 0; i < word.size(); i++){\n        bool unique = true;\n        for(int j = 0; j < word.size(); j++){\n            if(i != j && word[i] == word[j]){\n                unique = false;\n                break;\n            }\n        }\n        if(unique){\n            count++;\n        }\n    }\n    return count;\n}*/\n\n\n\n//This is a more efficient solution\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_set>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = words[0];\n    int max_unique = 0;\n    for (int i = 1; i < words.size(); i++) {\n        unordered_set<char> unique_chars(words[i].begin(), words[i].end());\n        if (unique_chars.size() > max_unique) {\n            max_word = words[i];\n            max_unique = unique_chars.size();\n        } else if (unique_chars.size() == max_unique && words[i] < max_word) {\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}  // O(n*m) time complexity where n is the number of words and m is the maximum length of a word. O(m) space complexity.  // O(m) space complexity.  // O(m) space complexity.  // O(m) space complexity.  // O(m) space complexity.  // O(m) space complexity.  //"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    int left = remaining - (total - number);\n    return {total,left};\n}"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=islower(s[i])?toupper(s[i]):tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n        }\n    }\n    if(res.find_first_not_of(\"0123456789\") == string::npos){\n        string res2;\n        for(int i=res.size()-1;i>=0;i--){\n            res2+=res[i];\n        }\n        return res2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), hash);\n    string md5_hash;\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        char hex[3];\n        sprintf(hex, \"%02x\", hash[i]);\n        md5_hash += hex;\n    }\n    return md5_hash;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        int temp=i;\n        while(temp>0){\n            if(temp%10%2==0){\n                result.push_back(temp%10);\n            }\n            temp/=10;\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
