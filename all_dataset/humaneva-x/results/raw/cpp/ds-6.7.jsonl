{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '(') {\n            count++;\n            temp += c;\n        }\n        if(c == ')') {\n            count--;\n            temp += c;\n            if(count == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = fabs(number - integer_part);\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum/numbers.size();\n    float mad = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += fabs(numbers[i] - mean);\n    }\n    return mad/numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int count = 0;\n    int max_count = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            count++;\n            if(count > max_count)\n                max_count = count;\n        }\n        else if(c == ')'){\n            count--;\n        }\n    }\n    result.push_back(max_count);\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(auto &str: strings){\n        if(str.find(substring) != string::npos){\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    int len = str.size();\n    if(len==0 || is_palindrome(str))\n        return str;\n    for(int i=len-1;i>=0;i--){\n        if(is_palindrome(str.substr(0,i+1))){\n            string suffix(str.rbegin(),str.rbegin()+len-i-1);\n            return str+suffix;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.size(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i);\n        if(i<n)\n            result += \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; i<str.size(); i++){\n        count[tolower(str[i])]++;\n    }\n    int distinct_count = 0;\n    for(int i=0; i<256; i++){\n        if(count[i] > 0){\n            distinct_count++;\n        }\n    }\n    return distinct_count;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.size(); i++){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(4);\n            }\n        }\n        else if(music_string[i] == '.'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(1);\n                i++;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    size_t found = str.find(substring);\n    while (found != string::npos){\n        count++;\n        found = str.find(substring, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[temp]) + \" \";\n            temp = \"\";\n        }\n        else{\n            temp += numbers[i];\n        }\n    }\n    result += to_string(num_map[temp]);\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = INFINITY;\n    vector<float> closest_pair;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            closest_pair = {numbers[i], numbers[i+1]};\n        }\n    }\n    return closest_pair;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto & value : values){\n        if(boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i=0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>=1;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i*i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n != 1)\n        factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    int i = 0;\n    while(i < numbers.size()){\n        if(i+1 < numbers.size() && numbers[i] == numbers[i+1]){\n            i += 2;\n        }\n        else{\n            result.push_back(numbers[i]);\n            i++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(auto s: strings){\n        result += s;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(string s: strings){\n        if(s.substr(0, prefix.size()) == prefix){\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    int i;\n    for (i=1;i<xs.size();i++)\n    {\n        if (xs[i]==0) continue;\n        return (double)-xs[i-1]/xs[i];\n    }\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> third;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3==0) third.push_back(l[i]);\n    }\n    sort(third.begin(), third.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if((i+1)%3==0) l[i]=third[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = -INFINITY;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=11; i<n; i++){\n        if(i%11==0 || i%13==0){\n            char buffer[50];\n            sprintf(buffer, \"%d\", i);\n            for(int j=0; buffer[j] != '\\0'; j++){\n                if(buffer[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0; i<l.size(); i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0, j=0; i<l.size(); i+=2, ++j){\n        l[i] = even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int fib[2] = {0, 1};\n    int prime[5] = {2, 3, 5, 7, 11};\n    int i = 2, j = 0, k = 0;\n    while(1){\n        fib[i%2] = fib[0] + fib[1];\n        if(fib[i%2] > 1000000000)\n            break;\n        if(j < 5 && fib[i%2] == prime[j]){\n            n--;\n            if(n == 0)\n                return prime[j];\n            j++;\n        }\n        i++;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if (n < 3)\n        return false;\n    sort(l.begin(), l.end());\n    for (int i = 0; i < n - 1; i++) {\n        int a = l[i];\n        int start = i + 1;\n        int end = n - 1;\n        while (start < end) {\n            if (a + l[start] + l[end] == 0) {\n                return true;\n            }\n            else if (a + l[start] + l[end] < 0) {\n                start += 1;\n            }\n            else {\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++)\n        l[i]++;\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x > 0){\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (0.5*a*h);\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n<=0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 0;\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=0;\n    fib[2]=2;\n    fib[3]=0;\n    for(int i=4;i<=n;i++){\n        fib[i]=fib[i-1]+fib[i-2]+fib[i-3]+fib[i-4];\n    }\n    return fib[n];\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int len = text.length();\n    for(int i=0; i<len/2; i++){\n        if(text[i] != text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    n=n%p;\n    while(n>0){\n        if(n%2==1)\n            res=(res*2)%p;\n        n=n/2;\n        if(n>0)\n            res=(res*res)%p;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.size(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(char c : brackets){\n        if(c == '<'){\n            count++;\n        }else if(c == '>'){\n            if(count == 0){\n                return false;\n            }\n            count--;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n==0 || n==1) return true;\n    bool increasing = true, decreasing = true;\n    for(int i=0; i<n-1; i++){\n        if(l[i]>l[i+1]) increasing = false;\n        if(l[i]<l[i+1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int largest_prime = -1;\n    while(n % 2 == 0){\n        largest_prime = 2;\n        n >>= 1;\n    }\n    for(int i = 3; i <= sqrt(n); i += 2){\n        while(n % i == 0){\n            largest_prime = i;\n            n = n / i;\n        }\n    }\n    if(n > 2)\n        largest_prime = n;\n    return largest_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(char c : brackets){\n        if(c == '(') count++;\n        else if(c == ')') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=0;\n    fib[2]=1;\n    for(int i=3;i<=n;i++)\n        fib[i]=fib[i-1]+fib[i-2]+fib[i-3];\n    return fib[n];\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    string vowels = \"aeiou\";\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for(int i=0; i<s.length(); i++){\n        if(vowels.find(s[i]) != string::npos){\n            count++;\n        }\n    }\n    if(s[s.length()-1] == 'y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.size();\n    if(shift >= n)\n        return s;\n    else{\n        rotate(s.begin(),s.begin()+n-shift,s.end());\n        return s;\n    }\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            sum += (int)s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0;\n    int i = 0;\n    while(s[i] != ' '){\n        i++;\n    }\n    apples = stoi(s.substr(0, i));\n    int j = i + 13;\n    while(s[j] != ' '){\n        j++;\n    }\n    oranges = stoi(s.substr(i + 13, j - i - 13));\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even_value = INT_MAX;\n    int smallest_even_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] < smallest_even_value && arr[i] % 2 == 0){\n            smallest_even_value = arr[i];\n            smallest_even_index = i;\n        }\n    }\n    if(smallest_even_index == -1) return {};\n    return {smallest_even_value, smallest_even_index};\n}\n\n"}
{"task_id": "CPP/69", "generation": "\n    int freq[100] = {0};\n    for(int i=0; i<lst.size(); i++)\n        freq[lst[i]]++;\n    for(int i=lst.size(); i>0; i--)\n        if(freq[i] >= i)\n            return i;\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()){\n            result.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    int n=q.size();\n    for(int i=0;i<n;i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    int i=0,j=n-1;\n    while(i<j){\n        if(q[i]==q[j]){\n            i++;\n            j--;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    vector<int> lps(n);\n    int len = 0;\n    lps[0] = 0;\n    int i = 1;\n    while(i<n){\n        if(arr[i] == arr[len]){\n            len++;\n            lps[i] = len;\n            i++;\n        }\n        else{\n            if(len != 0){\n                len = lps[len-1];\n            }\n            else{\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    int changes = n - lps[n-1];\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1 = 0, sum2 = 0;\n    for(auto &i : lst1) sum1 += i.size();\n    for(auto &i : lst2) sum2 += i.size();\n    return sum1 < sum2 ? lst1 : lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            while(a % i == 0){\n                a /= i;\n                count++;\n            }\n            if(count > 1){\n                return false;\n            }\n        }\n    }\n    if(a == 1 && count == 3){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    int i=2;\n    while(i<=sqrt(x)){\n        if(pow(n,i)==x)\n            return true;\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n = round(pow(abs(a), (1. / 3.)));\n    return n * n * n == abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3){\n        return false;\n    }\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i+1]==s[i+2] || s[i]==s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i] == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i] > 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grades[i] > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i] > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i] > 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grades[i] > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i] > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if(grades[i] > 1.7)\n            letter_grades.push_back(\"C\");\n        else if(grades[i] > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if(grades[i] > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if(grades[i] > 0.7)\n            letter_grades.push_back(\"D\");\n        else if(grades[i] > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int n = str.length();\n    if(n<=1)\n        return false;\n    for(int i=2; i*i<=n; i++){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return 2*starts_one_ends(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N%2;\n        N /= 2;\n    }\n    string res = \"\";\n    while(sum){\n        res = to_string(sum%2) + res;\n        sum /= 2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[100];\n    int i=0, j=0, k=0, l=0, m=0, n=0;\n    string temp = \"\";\n    string result = \"\";\n    while(s[i] != '\\0'){\n        if(s[i] == ' '){\n            words[j] = temp;\n            temp = \"\";\n            j++;\n        }\n        else{\n            temp += s[i];\n        }\n        i++;\n    }\n    words[j] = temp;\n    j++;\n    for(k=0; k<j; k++){\n        temp = words[k];\n        sort(temp.begin(), temp.end());\n        if(k != j-1){\n            temp += ' ';\n        }\n        result += temp;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    for(int i=0; i<res.size(); i++){\n        for(int j=i+1; j<res.size(); j++){\n            if(res[i][0] > res[j][0]){\n                swap(res[i], res[j]);\n            }\n            else if(res[i][0] == res[j][0] && res[i][1] < res[j][1]){\n                swap(res[i], res[j]);\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size()==0) return array;\n    int sum = array[0] + array[array.size()-1];\n    vector<int> result = array;\n    if(sum%2==0){\n        sort(result.begin(), result.end(), greater<int>());\n    }else{\n        sort(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += char(int('a') + (s[i] - 'a' + 2*2) % 26);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += char(int('A') + (s[i] - 'A' + 2*2) % 26);\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i]>lst[0]) return lst[i];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string delimiter = \".?!\", token;\n    size_t pos = 0;\n    while ((pos = S.find(delimiter)) != string::npos) {\n        token = S.substr(0, pos);\n        if(token.find(\"I\") == 0) count++;\n        S.erase(0, pos + delimiter.length());\n    }\n    if(S.find(\"I\") == 0) count++;\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==(int)a && b==(int)b && c==(int)c)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(char& c : message){\n        if(isalpha(c)){\n            c = islower(c) ? toupper(c) : tolower(c);\n        }\n        if(vowels.find(c) != string::npos){\n            c = c + 2 > 'z' ? c - 23 : c + 2;\n            c = c < 'a' ? c + 26 : c;\n        }\n        result += c;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_prime = 0;\n    for(int i=0; i<lst.size(); i++){\n        int num = lst[i];\n        if(num > max_prime){\n            bool is_prime = true;\n            for(int j=2; j*j<=num; j++){\n                if(num % j == 0){\n                    is_prime = false;\n                    break;\n                }\n            }\n            if(is_prime){\n                max_prime = num;\n            }\n        }\n    }\n    int sum_of_digits = 0;\n    while(max_prime > 0){\n        sum_of_digits += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum_of_digits;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool lower = true, upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        for(auto c : it->first){\n            if(islower(c)) lower = false;\n            if(isupper(c)) upper = false;\n        }\n    }\n    return lower || upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    primes.push_back(2);\n    for(int i=3;i<n;i+=2){\n        bool isPrime = true;\n        for(int j=0;j<primes.size();j++){\n            if(i%primes[j]==0){\n                isPrime = false;\n                break;\n            }\n            if(primes[j]*primes[j]>i) break;\n        }\n        if(isPrime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = abs(a%10);\n    int unit_digit_b = abs(b%10);\n    return unit_digit_a*unit_digit_b;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.size(); i += 2){\n        if(s[i] == toupper(s[i])){\n            if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int int_part = (int)num;\n    double frac_part = num - int_part;\n    if(frac_part < 0.5)\n        return int_part;\n    else if(frac_part > 0.5)\n        return int_part + 1;\n    else{\n        if(int_part < 0)\n            return int_part - 1;\n        else\n            return int_part + 1;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0)\n            result.push_back(n+2*i);\n        else\n            result.push_back(n+2*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=y;i>=x;i--){\n        if(i%2==0)\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int avg = (n+m)/2;\n    int rounded_avg = floor(avg + 0.5);\n    return bitset<32>(rounded_avg).to_string();\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        bool isUnique = true;\n        while(num > 0){\n            int digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(isUnique){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n  map<int, string> num_to_name = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n  vector<int> valid_nums;\n  for(int num : arr){\n    if(num >= 1 && num <= 9){\n      valid_nums.push_back(num);\n    }\n  }\n  sort(valid_nums.begin(), valid_nums.end());\n  reverse(valid_nums.begin(), valid_nums.end());\n  vector<string> result;\n  for(int num : valid_nums){\n    result.push_back(num_to_name[num]);\n  }\n  return result;\n}\n\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result(n);\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            int fact = 1;\n            for(int j=1; j<=i; j++){\n                fact *= j;\n            }\n            result[i-1] = fact;\n        }\n        else{\n            int sum = 0;\n            for(int j=1; j<=i; j++){\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i = 1; i <= n; i++){\n        string s = to_string(i);\n        string r = string(s.rbegin(), s.rend());\n        if(s == r){\n            if(s.size() % 2 == 0)\n                even_count++;\n            else\n                odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int sum = 0;\n        if(n[i] < 0){\n            int first_digit = n[i] / (int)pow(10, (int)log10(abs(n[i]))+1);\n            int remaining_num = n[i] % (int)pow(10, (int)log10(abs(n[i]))+1);\n            sum = first_digit + remaining_num;\n        }\n        else{\n            while(n[i]){\n                sum += n[i] % 10;\n                n[i] /= 10;\n            }\n        }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0)\n        return true;\n    int count = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1])\n            count++;\n    }\n    if(arr[n - 1] > arr[0])\n        count++;\n    return count <= 1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1 = 0, odd2 = 0;\n    for(int i = 0; i < lst1.size(); i++){\n        if(lst1[i] % 2 != 0) odd1++;\n    }\n    for(int i = 0; i < lst2.size(); i++){\n        if(lst2[i] % 2 != 0) odd2++;\n    }\n    if(odd1 > odd2) return \"NO\";\n    else return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> count;\n    int max = 0;\n    for(char c : test){\n        if(c != ' '){\n            count[c]++;\n            if(count[c] > max) max = count[c];\n        }\n    }\n    map<char,int> result;\n    for(auto it = count.begin(); it != count.end(); it++){\n        if(it->second == max) result[it->first] = it->second;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "\n    for(char ch:c){\n        s.erase(remove(s.begin(),s.end(),ch),s.end());\n    }\n    string s_rev=s;\n    reverse(s_rev.begin(),s_rev.end());\n    vector<string> res;\n    res.push_back(s);\n    if(s==s_rev) res.push_back(\"True\");\n    else res.push_back(\"False\");\n    return res;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> res;\n    for(auto &s: lst){\n        int count = 0;\n        for(char c: s){\n            if((c-'0')%2 != 0) count++;\n        }\n        string temp = \"the number of odd elements in the string \";\n        temp += to_string(count) + \" of the input.\";\n        res.push_back(temp);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, min_sum = 0;\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum) min_sum = sum;\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size(),m=grid[0].size(),count=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return (count+capacity-1)/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int c = __builtin_popcount(a);\n        int d = __builtin_popcount(b);\n        return c == d ? a < b : c < d;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    vector<string> result;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            words.push_back(word);\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n        for(int j=0;j<words[i].length();j++){\n            char c = tolower(words[i][j]);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.size()-2; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && \n           vowels.find(word[i-1]) == string::npos && \n           vowels.find(word[i+1]) == string::npos){\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0, close = 0;\n    for(auto &s : lst){\n        for(char &c : s){\n            if(c == '(') open++;\n            else if(c == ')'){\n                if(open > 0) open--;\n                else close++;\n            }\n        }\n    }\n    return (open == close) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2==1)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]>=10 && arr[i]<=99 || arr[i]>=-99 && arr[i]<=-10){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0){\n            collatz.push_back(n);\n        }\n        n = n % 2 ? n*3 + 1 : n / 2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 2){\n        if(day > 29)\n            return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30)\n            return false;\n    }\n    else{\n        if(day > 31)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> result;\n    if(txt.find(' ') != string::npos){\n        string temp = \"\";\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] == ' ') {\n                result.push_back(temp);\n                temp = \"\";\n            } else {\n                temp += txt[i];\n            }\n        }\n        if(temp != \"\"){\n            result.push_back(temp);\n        }\n    } else if(txt.find(',') != string::npos){\n        string temp = \"\";\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] == ',') {\n                result.push_back(temp);\n                temp = \"\";\n            } else {\n                temp += txt[i];\n            }\n        }\n        if(temp != \"\"){\n            result.push_back(temp);\n        }\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] >= 'a' && txt[i] <= 'z' && (txt[i] - 'a') % 2 == 1){\n                count++;\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    int n = lst.size();\n    if(n==1) return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>=lst[i+1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int len = end - start;\n    if(len < 2)\n        return \"NO\";\n    for(int i = 2; i * i <= len; i++){\n        if(len % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.empty()) return -32768;\n    int sum = 0, prod = 1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]<0){\n            prod *= -1;\n            sum += abs(arr[i]);\n        }\n        else if(arr[i]>0){\n            prod *= 1;\n            sum += arr[i];\n        }\n        else return 0;\n    }\n    return prod*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n*n+1, vector<int>(k+1, INT_MAX));\n    dp[0][0] = 0;\n    for(int i=1; i<=n*n; i++){\n        for(int j=1; j<=k; j++){\n            for(int x=0; x<n; x++){\n                for(int y=0; y<n; y++){\n                    if(j >= (x+1)*(y+1))\n                        dp[i][j] = min(dp[i][j], max(dp[i-1][j- (x+1)*(y+1)] , grid[x][y]));\n                }\n            }\n        }\n    }\n    vector<int> res;\n    int i = n*n, j = k;\n    while(i > 0){\n        for(int x=0; x<n; x++){\n            for(int y=0; y<n; y++){\n                if(j >= (x+1)*(y+1) && dp[i][j] == max(dp[i-1][j - (x+1)*(y+1)], grid[x][y])){\n                    res.push_back(grid[x][y]);\n                    j -= (x+1)*(y+1);\n                    i--;\n                    goto end;\n                }\n            }\n        }\n        end:;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n+1, 0);\n    if(n>=0) res[0] = 3;\n    if(n>=1) res[1] = 1;\n    if(n>=2) res[2] = 2;\n    for(int i=3; i<=n; i++){\n        if(i%2==0) res[i] = 1 + i/2;\n        else res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    bool isOdd = false;\n    while(n){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n            isOdd = true;\n        }\n        n /= 10;\n    }\n    return isOdd ? product : 0;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0) return false;\n    if(isalpha(txt[txt.length()-1]) && txt[txt.length()-2]==' ') return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    for(int i=n-1; i>0; i--){\n        if(arr[i] < arr[i-1])\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int a = 0, b = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>a) a = lst[i];\n        if(lst[i]>0 && lst[i]<b || b==0) b = lst[i];\n    }\n    return {a, b};\n}\n\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()) {\n        throw std::runtime_error(\"Types are not the same\");\n    }\n    if(a.type() == typeid(int)){\n        int a_val = boost::any_cast<int>(a);\n        int b_val = boost::any_cast<int>(b);\n        if(a_val == b_val) return boost::any();\n        return a_val > b_val ? a : b;\n    }\n    if(a.type() == typeid(float)){\n        float a_val = boost::any_cast<float>(a);\n        float b_val = boost::any_cast<float>(b);\n        if(a_val == b_val) return boost::any();\n        return a_val > b_val ? a : b;\n    }\n    if(a.type() == typeid(string)){\n        string a_val = boost::any_cast<string>(a);\n        string b_val = boost::any_cast<string>(b);\n        a_val.erase(remove(a_val.begin(), a_val.end(), ','), a_val.end());\n        b_val.erase(remove(b_val.begin(), b_val.end(), ','), b_val.end());\n        if(a_val == b_val) return boost::any();\n        return stof(a_val) > stof(b_val) ? a : b;\n    }\n    throw std::runtime_error(\"Unsupported type\");\n}\n\n"}
{"task_id": "CPP/138", "generation": "\n    if(n < 8 || n % 2 != 0)\n        return false;\n    else\n        return true;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long fact = 1;\n        for(int j = i; j > 0; j--){\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result;\n    int count = 0;\n    for(int i=0; i<text.size(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1)\n                result += '_';\n            else if(count > 2)\n                result.back() = '-';\n        }\n        else{\n            while(count > 2){\n                result += '_';\n                count--;\n            }\n            if(count == 2)\n                result += '_';\n            result += text[i];\n            count = 0;\n        }\n    }\n    while(count > 2){\n        result += '_';\n        count--;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count = 0;\n    for(int i=0; file_name[i] != '\\0'; i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n    }\n    if(count > 3){\n        return \"No\";\n    }\n    int dot_pos = file_name.find('.');\n    if(dot_pos == string::npos || dot_pos == 0){\n        return \"No\";\n    }\n    if(!((file_name[dot_pos-1] >= 'a' && file_name[dot_pos-1] <= 'z') || (file_name[dot_pos-1] >= 'A' && file_name[dot_pos-1] <= 'Z'))){\n        return \"No\";\n    }\n    string extension = file_name.substr(dot_pos+1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0 && i%4 != 0)\n            sum += lst[i]*lst[i]*lst[i];\n        else if(i%4 == 0)\n            sum += lst[i]*lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string words[100];\n    string result = \"\";\n    int j = 0;\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            j++;\n            continue;\n        }\n        words[j] += sentence[i];\n    }\n    for(int i = 0; i <= j; i++){\n        int len = words[i].length();\n        if(len == 1 || len == 0){\n            continue;\n        }\n        int flag = 0;\n        for(int k = 2; k*k <= len; k++){\n            if(len % k == 0){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            result += words[i] + \" \";\n        }\n    }\n    if(result.length() > 0){\n        result.pop_back();\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1,den1,num2,den2,gcd;\n    size_t pos = x.find(\"/\");\n    num1 = stoi(x.substr(0, pos));\n    den1 = stoi(x.substr(pos + 1));\n    pos = n.find(\"/\");\n    num2 = stoi(n.substr(0, pos));\n    den2 = stoi(n.substr(pos + 1));\n    gcd = __gcd(den1,den2);\n    if((num1*(den2/gcd))==(num2*(den1/gcd)))\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    int n = nums.size();\n    vector<pair<int, int>> points(n);\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        int num = abs(nums[i]);\n        while(num){\n            sum += num % 10;\n            num /= 10;\n        }\n        points[i] = make_pair(sum, i);\n    }\n    sort(points.begin(), points.end());\n    vector<int> result(n);\n    for(int i = 0; i < n; i++){\n        result[i] = nums[points[i].second];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i]>10){\n            int firstDigit = abs(nums[i])/10;\n            int lastDigit = abs(nums[i])%10;\n            if(firstDigit%2 != 0 && lastDigit%2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=1;i<=n;i++){\n        a[i-1] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n  vector<string> planets_order = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  vector<string> result;\n  int index1 = -1, index2 = -1;\n  for(int i = 0; i < planets_order.size(); i++){\n    if(planets_order[i] == planet1) index1 = i;\n    if(planets_order[i] == planet2) index2 = i;\n  }\n  if(index1 == -1 || index2 == -1) return result;\n  if(index1 > index2){\n    int temp = index1;\n    index1 = index2;\n    index2 = temp;\n  }\n  for(int i = index1 + 1; i < index2; i++){\n    result.push_back(planets_order[i]);\n  }\n  return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    int len = lst[0].size();\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].size() == len){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(auto extension : extensions){\n        int cap = 0, sm = 0;\n        for(auto c : extension){\n            if(isupper(c)) cap++;\n            if(islower(c)) sm++;\n        }\n        int strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int alen = a.length();\n    int blen = b.length();\n    if(alen<blen) return false;\n    for(int i=0;i<blen;i++){\n        bool flag = true;\n        for(int j=0;j<blen;j++){\n            if(a[(i+j)%alen] != b[j]){\n                flag = false;\n                break;\n            }\n        }\n        if(flag) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    vector<int> result(2,0);\n    num = abs(num);\n    while(num){\n        if((num%10)%2==0)\n            result[0]++;\n        else\n            result[1]++;\n        num /= 10;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string roman = \"\";\n    for(int i = 0; i < values.size() && number >= 0; i++){\n        while(number >= values[i]){\n            number -= values[i];\n            roman += symbols[i];\n        }\n    }\n    return roman;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side,square_sum;\n    //find the maximum side\n    if(a>b && a>c)\n        max_side=a;\n    else if(b>a && b>c)\n        max_side=b;\n    else\n        max_side=c;\n    //calculate the square sum of the other two sides\n    square_sum=(a*a+b*b+c*c)-max_side*max_side;\n    //check if the square of the maximum side is equal to the sum of the squares of the other two sides\n    if(max_side*max_side==square_sum)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word;\n    for(string word: words){\n        int unique = unique_count(word);\n        if(unique > max_unique){\n            max_unique = unique;\n            max_word = word;\n        }\n        else if(unique == max_unique){\n            max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n}\n\nint unique_count(string word){\n    int count[256] = {0};\n    for(char c: word){\n        count[c]++;\n    }\n    int unique = 0;\n    for(int i=0; i<256; i++){\n        if(count[i] > 0){\n            unique++;\n        }\n    }\n    return unique;\n}\n\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number;\n    if(need < remaining){\n        total += need;\n        remaining -= need;\n    }\n    else{\n        total += remaining;\n        remaining = 0;\n    }\n    return {total, remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "\n    string res = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        }\n        else{\n            res = s[i] + res;\n        }\n    }\n    if(res == \"\"){\n        for(int i=0; i<s.length(); i++){\n            res += s[s.length()-1-i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return NULL;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++)\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    return string(md5string);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b) swap(a,b);\n    for(int i=a;i<=b;i++){\n        if(i%2==0) result.push_back(i);\n    }\n    return result;\n}\n"}
