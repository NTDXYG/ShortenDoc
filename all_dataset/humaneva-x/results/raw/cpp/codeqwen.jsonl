{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    for(char c : paren_string) {\n        if(c == ' ') continue; // Ignore spaces\n        if(c == '(') {\n            balance++;\n        } else if(c == ')') {\n            balance--;\n        }\n        current_group += c;\n        if(balance == 0) {\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part;\n    float decimal_part;\n    integer_part = floor(number);\n    decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    return mad / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n            }\n            max_depth = 0;\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n    if(str.empty()) return \"\";\n    string s(str.rbegin(),str.rend());\n    for(int i=0;i<str.size();i++){\n        if(str.substr(i)==s.substr(0,str.size()-i)){\n            return str+s.substr(str.size()-i);\n        }\n    }\n    return str+s.substr(1);\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size()==0) return \"\";\n    string longest_string = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].size() > longest_string.size()){\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=1; i<=str.length(); i++){\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 0; i <= n; i++){\n        result += to_string(i);\n        if(i < n){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        str[i]=tolower(str[i]);\n        if(find(v.begin(),v.end(),str[i])==v.end())\n            v.push_back(str[i]);\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0;i<music_string.size();i++){\n        if(music_string[i]=='o'){\n            if(music_string[i+1]=='|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(4);\n            }\n        }\n        else if(music_string[i]=='.'){\n            beats.push_back(1);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0,j=0;\n    while(i<str.length()){\n        if(str[i]==substring[j]){\n            i++;\n            j++;\n            if(j==substring.length()){\n                count++;\n                j=0;\n            }\n        }\n        else{\n            i=i-j;\n            j=0;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> m;\n    m[\"zero\"] = 0;\n    m[\"one\"] = 1;\n    m[\"two\"] = 2;\n    m[\"three\"] = 3;\n    m[\"four\"] = 4;\n    m[\"five\"] = 5;\n    m[\"six\"] = 6;\n    m[\"seven\"] = 7;\n    m[\"eight\"] = 8;\n    m[\"nine\"] = 9;\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += temp;\n            result += \" \";\n            temp = \"\";\n        }\n        else{\n            temp += numbers[i];\n        }\n    }\n    result += temp;\n    temp = \"\";\n    string temp2 = \"\";\n    for(int i = 0; i < result.length(); i++){\n        if(result[i] == ' '){\n            temp2 += to_string(m[temp]);\n            temp2 += \" \";\n            temp = \"\";\n        }\n        else{\n            temp += result[i];\n        }\n    }\n    temp2 += to_string(m[temp]);\n    temp2 += \" \";\n    temp = \"\";\n    string final = \"\";\n    for(int i = 0; i < temp2.length(); i++){\n        if(temp2[i] == ' '){\n            final += temp;\n            final += \" \";\n            temp = \"\";\n        }\n        else{\n            temp += temp2[i];\n        }\n    }\n    final += temp;\n    temp = \"\";\n    string final2 = \"\";\n    for(int i = 0; i < final.length(); i++){\n        if(final[i] == ' '){\n            final2 += temp;\n            final2 += \" \";\n            temp = \"\";\n        }\n        else{\n            temp += final[i];\n        }\n    }\n    final2 += temp;\n    temp = \"\";\n    string final3 = \"\";\n    for(int i = 0; i < final2"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 100000;\n    float a, b;\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i + 1; j < numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                a = numbers[i];\n                b = numbers[j];\n            }\n        }\n    }\n    if(a > b){\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    vector<float> result = {a, b};\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    vector<float> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int len=0;\n    for(int i=0;str[i]!='\\0';i++){\n        len++;\n    }\n    return len;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>=1;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(count(result.begin(), result.end(), numbers[i])==0){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n//Test cases\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n==1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double a=xs[0],b=xs[1],c=xs[2],d=xs[3];\n    double x1=(-b+sqrt(b*b-4*a*c))/(2*a);\n    double x2=(-b-sqrt(b*b-4*a*c))/(2*a);\n    if (poly(xs,x1)==0)\n    {\n        return x1;\n    }\n    else\n    {\n        return x2;\n    }\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> res;\n    vector<int> temp;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            temp.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(),temp.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            res.push_back(temp[j]);\n            j++;\n        }\n        else{\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int>::iterator it = unique(l.begin(), l.end());\n    l.resize(distance(l.begin(), it));\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0; i<l.size(); i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0, j=0; i<l.size(); i+=2, j++){\n        l[i] = even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0,count=0;\n    while(count<n){\n        c=a+b;\n        a=b;\n        b=c;\n        if(c%2!=0){\n            for(int i=2;i<c;i++){\n                if(c%i==0){\n                    break;\n                }\n                else{\n                    count++;\n                }\n            }\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result=\"\";\n    while(x>0){\n        result=(char)(x%base+'0')+result;\n        x/=base;\n    }\n    return result;\n}\n//Test cases\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    int a=0,b=0,c=2,d=0,e;\n    for(int i=4;i<=n;i++){\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 != 0)\n        return (float)l[n / 2];\n    return (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i,j;\n    for(i=0,j=text.length()-1;i<j;i++,j--){\n        if(text[i]!=text[j])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    int base=2;\n    while(n>0){\n        if(n%2==1){\n            res=(res*base)%p;\n        }\n        base=(base*base)%p;\n        n=n/2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&vowels](char c){ return vowels.find(c) != string::npos; }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n  int count=0;\n  for(int i=0;i<brackets.length();i++){\n    if(brackets[i]=='<'){\n      count++;\n    }\n    else if(brackets[i]=='>'){\n      count--;\n    }\n    if(count<0){\n      return false;\n    }\n  }\n  if(count==0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > l[i-1])\n            dec = false;\n        if(l[i] < l[i-1])\n            inc = false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    auto last = unique(result.begin(), result.end());\n    result.erase(last, result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i, max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return n+sum_to_n(n-1);\n}\n"}
{"task_id": "CPP/61", "generation": "\n  int count = 0;\n  for(int i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '(') count++;\n    else if(brackets[i] == ')') count--;\n    if(count < 0) return false;\n  }\n  return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0||n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a=0,b=0,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length()-1)){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int n=s.length();\n    if(shift>n)\n        return string(s.rbegin(),s.rend());\n    else\n        return s.substr(n-shift)+s.substr(0,n-shift);\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples,oranges;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n    return n-apples-oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min_even = 10001;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_even){\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1) return {};\n    return {min_even, index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j])\n                count++;\n        }\n        if(count>=lst[i] && lst[i]>max)\n            max=lst[i];\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> result;\n    while(lst.size()){\n        int min = *min_element(lst.begin(), lst.end());\n        result.push_back(min);\n        lst.erase(remove(lst.begin(), lst.end(), min), lst.end());\n        if(lst.size() == 0) break;\n        int max = *max_element(lst.begin(), lst.end());\n        result.push_back(max);\n        lst.erase(remove(lst.begin(), lst.end(), max), lst.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(a+b>c && a+c>b && b+c>a)\n    return round(area*100)/100;\n    else\n    return -1;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w) return false;\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-i-1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    for(int i=0;i<arr.size()/2;i++){\n        if(arr[i]!=arr[arr.size()-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==1){\n        if(x==1)\n        return true;\n        else\n        return false;\n    }\n    double y=log(x)/log(n);\n    if(y==int(y))\n    return true;\n    else\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=round(pow(abs(a),1.0/3.0));\n    return b*b*b==abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.size();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"db\";\n    while(decimal>0){\n        if(decimal%2==0) binary=\"0\"+binary;\n        else binary=\"1\"+binary;\n        decimal=decimal/2;\n    }\n    return binary+\"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int n=s.length();\n    if(n<3) return false;\n    for(int i=0;i<=n-3;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0) letter_grades.push_back(\"A+\");\n        else if(grades[i]>3.7) letter_grades.push_back(\"A\");\n        else if(grades[i]>3.3) letter_grades.push_back(\"A-\");\n        else if(grades[i]>3.0) letter_grades.push_back(\"B+\");\n        else if(grades[i]>2.7) letter_grades.push_back(\"B\");\n        else if(grades[i]>2.3) letter_grades.push_back(\"B-\");\n        else if(grades[i]>2.0) letter_grades.push_back(\"C+\");\n        else if(grades[i]>1.7) letter_grades.push_back(\"C\");\n        else if(grades[i]>1.3) letter_grades.push_back(\"C-\");\n        else if(grades[i]>1.0) letter_grades.push_back(\"D+\");\n        else if(grades[i]>0.7) letter_grades.push_back(\"D\");\n        else if(grades[i]>0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n//Test cases\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1)\n    return false;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 18;\n    int res=18;\n    for(int i=2;i<n;i++) res*=10;\n    return res;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    string binary=\"\";\n    while(sum>0){\n        binary=to_string(sum%2)+binary;\n        sum/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string ans=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            ans+=word;\n            word=\"\";\n            ans+=\" \";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    sort(word.begin(),word.end());\n    ans+=word;\n    return ans;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    // Sort by row in ascending order\n    // Sort by column in descending order\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        if(a[0] == b[0]){\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.empty()) return array;\n    vector<int> result = array;\n    sort(result.begin(), result.end());\n    if((array.front() + array.back()) % 2 == 0) reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            encrypted+=(s[i]+4);\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            encrypted+=(s[i]+4);\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int boredoms=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'&&S[i-1]=='.'||S[i]=='I'&&S[i-1]=='?'||S[i]=='I'&&S[i-1]=='!'){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==floor(a) && b==floor(b) && c==floor(c)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0;i<message.length();i++){\n        if(message[i]>='a'&&message[i]<='z'){\n            message[i]=message[i]-32;\n        }\n        else if(message[i]>='A'&&message[i]<='Z'){\n            message[i]=message[i]+32;\n        }\n        if(message[i]=='a'||message[i]=='e'||message[i]=='i'||message[i]=='o'||message[i]=='u'){\n            if(message[i]=='a'){\n                message[i]='C';\n            }\n            else if(message[i]=='e'){\n                message[i]='G';\n            }\n            else if(message[i]=='i'){\n                message[i]='K';\n            }\n            else if(message[i]=='o'){\n                message[i]='Q';\n            }\n            else if(message[i]=='u'){\n                message[i]='W';\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum+=max%10;\n        max/=10;\n    }\n    return sum;\n}\nint sum_of_digits_of_largest_prime(vector<int> lst){\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum+=max%10;\n        max/=10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool lower=true,upper=true;\n    for(auto i:dict){\n        for(auto j:i.first){\n            if(islower(j)) lower=false;\n            if(isupper(j)) upper=false;\n        }\n        if(!lower && !upper) return false;\n    }\n    return true;\n}\n#include<assert.h>\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        int flag=0;\n        for(int j=2;j<i;j++){\n            if(i%j==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int x=a%10;\n    int y=b%10;\n    return x*y;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i+=2){\n        if(s[i]>='A'&&s[i]<='Z'){\n            if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i;\n    float num;\n    num=stof(value);\n    if(num>0){\n        i=ceil(num);\n    }\n    else{\n        i=floor(num);\n    }\n    return i;\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int stones = n;\n    for(int i = 0; i < n; i++){\n        pile.push_back(stones);\n        if(n % 2 == 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n    return -1;\n    else if(x%2==0)\n    return x;\n    else if(x%2!=0)\n    return x+1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m)\n    return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++)\n    sum+=i;\n    int avg=round(sum/(float)(m-n+1));\n    string ans=\"\";\n    while(avg>0){\n        ans+=to_string(avg%2);\n        avg/=2;\n    }\n    reverse(ans.begin(),ans.end());\n    return ans;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if((temp%10)%2==0){\n                break;\n            }\n            temp=temp/10;\n        }\n        if(temp==0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<int> temp;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    reverse(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++){\n        result.push_back(m[temp[i]]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            int factorial=1;\n            for(int j=1;j<=i;j++){\n                factorial*=j;\n            }\n            result.push_back(factorial);\n        }\n        else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2, 0);\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string r = string(s.rbegin(), s.rend());\n        if(s == r){\n            if(i%2 == 0) result[0]++;\n            else result[1]++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n            sum-=2*num%10;\n            num/=10;\n        }\n        while(num>0){\n            sum+=num%10;\n            num/=10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.size()==0) return true;\n    int count=0;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<arr[i-1]) count++;\n    }\n    if(arr[arr.size()-1]>arr[0]) count++;\n    if(count<=1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd_count_lst1=0,even_count_lst2=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0) odd_count_lst1++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0) even_count_lst2++;\n    }\n    if(odd_count_lst1<=even_count_lst2) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max = 0;\n    for(int i = 0; i < test.length(); i++){\n        if(test[i] != ' '){\n            result[test[i]]++;\n            if(result[test[i]] > max){\n                max = result[test[i]];\n            }\n        }\n    }\n    map<char,int> final;\n    for(auto i : result){\n        if(i.second == max){\n            final.insert(i);\n        }\n    }\n    return final;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(find(c.begin(),c.end(),s[i])==c.end()) res+=s[i];\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=res==rev;\n    return {res,pal?\"True\":\"False\"};\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0) count++;\n        }\n        string s=\"the number of odd elements \";\n        s+=to_string(count);\n        s+=\"n the str\";\n        s+=to_string(count);\n        s+=\"ng \";\n        s+=to_string(count);\n        s+=\" of the \";\n        s+=to_string(count);\n        s+=\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_water=0;\n    for(int i=0;i<grid.size();i++){\n        int water=0;\n        for(int j=0;j<grid[i].size();j++){\n            water+=grid[i][j];\n        }\n        max_water=max(max_water,water);\n    }\n    return (max_water+capacity-1)/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int count_a = 0, count_b = 0;\n        for(int i = 0; i < 32; i++){\n            if((a >> i) & 1) count_a++;\n            if((b >> i) & 1) count_b++;\n        }\n        if(count_a == count_b) return a < b;\n        return count_a < count_b;\n    });\n    return arr;\n}\nvector<int> sort_vector(vector<int> arr){\n    return sort_array(arr);\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string>v;\n    string word=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(word.size()==n)v.push_back(word);\n            word=\"\";\n        }\n        else{\n            if(isalpha(s[i]))word+=s[i];\n        }\n    }\n    if(word.size()==n)v.push_back(word);\n    return v;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    for(int i=word.size()-2;i>0;i--){\n        if(vowels.find(word[i])!=-1&&vowels.find(word[i+1])==-1&&vowels.find(word[i-1])==-1){\n            return string(1,word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int count=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(') count++;\n            else count--;\n            if(count<0) break;\n        }\n        if(count<0) break;\n    }\n    if(count==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end(),greater<int>());\n    vector<int> ans;\n    for(int i=0;i<k;i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> odd_numbers;\n    while(n != 1){\n        if(n % 2 != 0){\n            odd_numbers.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    odd_numbers.push_back(1);\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    sscanf(date.c_str(),\"%d-%d-%d\",&month,&day,&year);\n    if(month<1 || month>12) return false;\n    if(day<1 || day>31) return false;\n    if(month==2 && day>29) return false;\n    if((month==4 || month==6 || month==9 || month==11) && day>30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else if(txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    if(words.size() == 1){\n        int count = 0;\n        for(int i = 0; i < words[0].length(); i++){\n            if((words[0][i] - 'a') % 2 == 1){\n                count++;\n            }\n        }\n        words.clear();\n        words.push_back(to_string(count));\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end) return \"NO\";\n    int len = end-start+1;\n    if(len==1) return \"NO\";\n    for(int i=2;i*i<=len;i++){\n        if(len%i==0) return \"NO\";\n    }\n    return \"YES\";\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return -32768;\n    int prod=1,sum=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==0) return 0;\n        if(arr[i]<0) prod*=-1;\n        sum+=abs(arr[i]);\n    }\n    return prod*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    int i = 0, j = 0;\n    while(k--){\n        res.push_back(grid[i][j]);\n        if(i == 0 && j < n-1) j++;\n        else if(i < n-1 && j == n-1) i++;\n        else if(i == n-1 && j > 0) j--;\n        else if(i > 0 && j == 0) i--;\n        else if(grid[i][j+1] < grid[i+1][j]) j++;\n        else if(grid[i][j+1] > grid[i+1][j]) i++;\n        else if(grid[i][j+1] == grid[i+1][j] && grid[i+1][j+1] < grid[i][j]) i++;\n        else if(grid[i][j+1] == grid[i+1][j] && grid[i+1][j+1] > grid[i][j]) j++;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(3);\n    for(int i = 2; i <= n; i++){\n        if(i % 2 == 0){\n            v.push_back(1 + i / 2);\n        }\n        else{\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    while(n>0){\n        int digit=n%10;\n        if(digit%2!=0){\n            product*=digit;\n        }\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z'){\n        if(txt.length()==1)\n            return true;\n        if(txt[txt.length()-2]==' ')\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_index = -1;\n    for(int i = 1; i < n; i++){\n        if(arr[i] < arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = 0, min_pos = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > max_neg) max_neg = lst[i];\n        if(lst[i] > 0 && lst[i] < min_pos) min_pos = lst[i];\n    }\n    return {max_neg, min_pos};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    string s1,s2;\n    float f1,f2;\n    if(a.type()==typeid(string)){\n        s1=boost::any_cast<string>(a);\n        replace(s1.begin(),s1.end(),',','.');\n        f1=stof(s1);\n    }\n    else f1=boost::any_cast<float>(a);\n    if(b.type()==typeid(string)){\n        s2=boost::any_cast<string>(b);\n        replace(s2.begin(),s2.end(),',','.');\n        f2=stof(s2);\n    }\n    else f2=boost::any_cast<float>(b);\n    if(f1==f2) return \"None\";\n    else if(f1>f2) return a;\n    else return b;\n}\n#include<assert.h>\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact=fact*i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n        }else{\n            if(count == 1){\n                res += '_';\n            }else if(count > 2){\n                res += '-';\n            }\n            count = 0;\n            res += text[i];\n        }\n    }\n    if(count == 1){\n        res += '_';\n    }else if(count > 2){\n        res += '-';\n    }\n    return res;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0,i,j,k=0;\n    string s[3]={\"txt\",\"exe\",\"dll\"};\n    for(i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    for(i=0;i<file_name.length();i++){\n        if(file_name[i]=='.'){\n            break;\n        }\n    }\n    if(i==file_name.length()-1){\n        return \"No\";\n    }\n    if(file_name[0]<'a'||file_name[0]>'z'&&file_name[0]<'A'||file_name[0]>'Z'){\n        return \"No\";\n    }\n    for(j=i+1;j<file_name.length();j++){\n        if(file_name[j]=='.'){\n            k++;\n        }\n    }\n    if(k>0){\n        return \"No\";\n    }\n    for(j=i+1;j<file_name.length();j++){\n        for(k=0;k<3;k++){\n            if(file_name[j]==s[k][0]&&file_name[j+1]==s[k][1]&&file_name[j+2]==s[k][2]){\n                return \"Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string ans=\"\";\n    int i,j,k,l=0,m=0;\n    for(i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            l++;\n        }\n    }\n    string words[l+1];\n    for(i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            m++;\n        }\n        else{\n            words[m]+=sentence[i];\n        }\n    }\n    for(i=0;i<=l;i++){\n        k=0;\n        for(j=2;j<words[i].length();j++){\n            if(words[i][j]%j==0){\n                k++;\n            }\n        }\n        if(k==0){\n            ans+=words[i];\n            ans+=\" \";\n        }\n    }\n    ans.pop_back();\n    return ans;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;\n}\n//Simplify the expression x * n. Returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\n//>>> simplify(\"1/5\", \"5/1\")\n//(true)\n//>>> simplify(\"1/6\", \"2/1\")\n//(false)\n//>>> simplify(\"7/10\", \"10/2\")\n//(false)\n//>>> simplify(\"1/3\", \"3/1\")\n//(true)\n//>>> simplify(\"4/9\", \"3/2\")\n//(false)\n//>>> simplify(\"2/7\", \"7/2\")\n//(true)\n//>>> simplify(\"3/4\", \"4/3\")\n//(true)\n//>>> simplify(\"5/6\", \"6/5\")\n//(true)\n//>>> simplify(\"8/11\", \"11/8\")\n//(true)\n//>>> simplify(\"9/10\", \"10/9\")\n//(true)\n//>>> simplify(\"10/13\", \"13/10\")\n//(true)\n//>>> simplify(\"11/14\", \"14/11\")\n//(true)\n//>>> simplify(\"12/15\", \"15/12\")\n//(true)\n//>>> simplify(\"13/16\", \"16/13\")\n//(true)\n//>>> simplify(\"14/17\", \"17/14\")\n//(true)\n//>>> simplify(\"15/18\", \"18/15\")\n//(true)\n//>>> simplify(\"16/19\", \"19/16\")\n//(true)\n//>>> simplify"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    vector<int> sums;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int temp=abs(nums[i]);\n        while(temp>0){\n            sum+=temp%10;\n            temp/=10;\n        }\n        sums.push_back(sum);\n    }\n    for(int i=0;i<nums.size();i++){\n        for(int j=i+1;j<nums.size();j++){\n            if(sums[i]>sums[j]){\n                int temp=sums[i];\n                sums[i]=sums[j];\n                sums[j]=temp;\n                temp=nums[i];\n                nums[i]=nums[j];\n                nums[j]=temp;\n            }\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        string s=to_string(abs(nums[i]));\n        if(nums[i]>10 && s[0]%2!=0 && s[s.length()-1]%2!=0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=1;i<=n;i++){\n        a[i-1]=i*i-i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int i=0,j=0;\n    for(i=0;i<planets.size();i++){\n        if(planets[i]==planet1)\n            break;\n    }\n    for(j=0;j<planets.size();j++){\n        if(planets[j]==planet2)\n            break;\n    }\n    if(i==planets.size()||j==planets.size())\n        return result;\n    if(i>j){\n        int temp=i;\n        i=j;\n        j=temp;\n    }\n    for(int k=i+1;k<j;k++){\n        result.push_back(planets[k]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == floor(lst[i]) && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.size(); i++){\n        int uppercase = 0;\n        int lowercase = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                uppercase++;\n            }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n                lowercase++;\n            }\n        }\n        int strength = uppercase - lowercase;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string temp=a+a;\n    for(int i=0;i<b.length();i++){\n        string sub=b.substr(i,b.length());\n        if(temp.find(sub)!=-1)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even = 0, count_odd = 0;\n    num = abs(num);\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0) count_even++;\n        else count_odd++;\n        num /= 10;\n    }\n    return {count_even, count_odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    vector<string> romans = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += romans[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max,x,y;\n    if(a>b){\n        max=a;\n        x=b;\n        y=c;\n    }\n    else if(b>c){\n        max=b;\n        x=a;\n        y=c;\n    }\n    else{\n        max=c;\n        x=a;\n        y=b;\n    }\n    if(pow(max,2)==pow(x,2)+pow(y,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_str = \"\";\n    int max_unique = 0;\n    for(auto word : words){\n        int unique = 0;\n        vector<bool> seen(26, false);\n        for(auto ch : word){\n            if(!seen[ch - 'a']){\n                unique++;\n                seen[ch - 'a'] = true;\n            }\n        }\n        if(unique > max_unique || (unique == max_unique && word < max_str)){\n            max_unique = unique;\n            max_str = word;\n        }\n    }\n    return max_str;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(need<=remaining){\n        result.push_back(number+need);\n        result.push_back(remaining-need);\n    }\n    else{\n        result.push_back(number+remaining);\n        result.push_back(0);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int result = operand[0];\n    for(i=0;i<operato.size();i++){\n        if(operato[i]==\"+\"){\n            result = result + operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            result = result - operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            result = result * operand[i+1];\n        }\n        else if(operato[i]==\"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i]==\"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int flag=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n            flag=1;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n            flag=1;\n        }\n    }\n    if(flag==0){\n        for(int i=0;i<s.length();i++){\n            s[i]=s[i]+1;\n            if(s[i]>'z'){\n                s[i]=s[i]-26;\n            }\n            else if(s[i]>'Z'){\n                s[i]=s[i]-26;\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash-of-a-string-in-cpp/\n//https://www.openssl.org/docs/man1.1.1/man3/MD5.html\n//https://www.geeksforgeeks.org/how-to-convert-a-string-to-md5-in-cpp/\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash-of-a-string-in-cpp/\n//https://www.geeksforgeeks.org/how-to-convert-a-string-to-md5-in-cpp/\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash-of-a-string-in-cpp/\n//https://www.geeksforgeeks.org/how-to-convert-a-string-to-md5-in-cpp/\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash-of-a-string-in-cpp/\n//https://www.geeksforgeeks.org/how-to-convert-a-string-to-md5-in-cpp/\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash-of-a-string-in-cpp/\n//https://www.geeksforgeeks.org/how-to-convert-a-string-to-md5-in-cpp/\n//https://www.geeksforgeeks.org/how-to-calculate-md5-hash"}
{"task_id": "CPP/163", "generation": "\n    vector<int>v;\n    if(a>b){\n        int temp=a;\n        a=b;\n        b=temp;\n    }\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\n"}
