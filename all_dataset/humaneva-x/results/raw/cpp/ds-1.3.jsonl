{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_braces = 0;\n    string current_group;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if(open_braces == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "\n    return number - floor(number);\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++)\n        sum += numbers[i];\n    float mean = sum/numbers.size();\n    float mad = 0.0;\n    for(int i=0; i<numbers.size(); i++)\n        mad += abs(numbers[i] - mean);\n    mad /= numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i=0; i<numbers.size()-1; i++){\n        numbers.insert(numbers.begin()+i+1, delimeter);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int max_level = 0;\n    int current_level = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_level++;\n            if(current_level > max_level)\n                max_level = current_level;\n        }\n        else if(c == ')'){\n            current_level--;\n        }\n        levels.push_back(max_level);\n    }\n    return levels;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "\n    int n = str.length();\n    for(int i=n-1; i>=0; i--){\n        string suffix = str.substr(0,i+1);\n        if(is_palindrome(suffix)){\n            string prefix = str.substr(i,n-i);\n            string rev_prefix = string(prefix.rbegin(), prefix.rend());\n            return str + rev_prefix;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.size();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].size() > longest.size()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0, i+1));\n    }\n    return prefixes;\n}\n\n"}
{"task_id": "CPP/15", "generation": "\n    string sequence = \"\";\n    for(int i=0; i<=n; i++){\n        sequence += to_string(i);\n        if(i<n)\n            sequence += \" \";\n    }\n    return sequence;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0; i<str.length(); i++){\n        if(find(distinct_chars.begin(), distinct_chars.end(), str[i]) == distinct_chars.end()){\n            distinct_chars.push_back(str[i]);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    int beat_count = 0;\n    for(int i = 0; i < music_string.length(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beat_count = 4;\n                break;\n            case 'o':\n                beat_count = 2;\n                break;\n            case '.':\n                beat_count = 1;\n                break;\n        }\n        beats.push_back(beat_count);\n    }\n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    int len_sub = substring.length();\n    int len_str = str.length();\n    for(int i=0; i<=len_str-len_sub; i++){\n        int j;\n        for(j=0; j<len_sub; j++)\n            if(str[i+j] != substring[j])\n                break;\n        if(j == len_sub)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] == ' '){\n            num_map[word] = stoi(word);\n            result += word + \" \";\n            word = \"\";\n        }\n        else{\n            word += numbers[i];\n        }\n    }\n    num_map[word] = stoi(word);\n    result += word;\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    sort(numbers.begin(), numbers.end());\n    float min_diff = FLT_MAX;\n    vector<float> result;\n    for(int i = 0; i < numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            result = {numbers[i], numbers[i+1]};\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i]<min_val)\n            min_val = numbers[i];\n        if(numbers[i]>max_val)\n            max_val = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n    return numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto value : values){\n        if(boost::any_cast<int>(&value) != nullptr){\n            result.push_back(boost::any_cast<int>(&value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        if(i == 0 || numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; str[i]; i++){\n        if(str[i] >= 'a' && str[i] <= 'z')\n            str[i] = str[i] - 32;\n        else if(str[i] >= 'A' && str[i] <= 'Z')\n            str[i] = str[i] + 32;\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    if(n == 2)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    for(long long i = 3; i * i <= n; i += 2){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double l=0, r=1, mid;\n    while (fabs(r-l) > 1e-6){\n        mid = (l+r)/2;\n        if (poly(xs, mid) > 1e-6) l = mid;\n        else r = mid;\n    }\n    return mid;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0)\n            lprime.push_back(l[i]);\n        else\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    res.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0)\n            count += to_string(i).count('7');\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0)\n            lprime.push_back(l[i]);\n        else\n            lprime.push_back(l[i+1]);\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n\n"}
{"task_id": "CPP/38", "generation": "\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[x.length()-1]+x.substr(0,x.length()-1);\n        output=output+x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int i, j, count = 0, fib[1000] = {0, 1};\n    for(i = 2; count < n; i++){\n        for(j = 0; j < i; j++){\n            fib[i] += fib[j];\n        }\n        if(fib[i] < 1000000000 && fib[i] > 1){\n            for(j = 2; j <= fib[i]/2; j++){\n                if(fib[i] % j == 0){\n                    break;\n                }\n            }\n            if(j == fib[i]/2 + 1){\n                count++;\n            }\n        }\n    }\n    return fib[i];\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3)\n        return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        int a = l[i];\n        int start = i+1;\n        int end = n-1;\n        while(start < end){\n            if(a + l[start] + l[end] == 0){\n                return true;\n            }\n            else if(a + l[start] + l[end] < 0){\n                start += 1;\n            }\n            else{\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    // The number of collisions is equal to the number of pairs of cars\n    return n*(n-1)/2;\n}\n\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(l[i] == -l[j]){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x>0){\n        result = to_string(x%base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 2;\n    else if(n==3)\n        return 0;\n    else{\n        int a=0, b=0, c=2, d=0;\n        for(int i=4; i<=n; i++){\n            d=a+b+c+d;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 != 0)\n        return (float)l[n/2];\n    else\n        return (float)(l[(n-1)/2] + l[n/2])/2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i = 0;\n    int j = text.length() - 1;\n    while(i < j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else\n        return (2%p*modp(n-1,p))%p;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=0)\n        return 0;\n    else if(n==1)\n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    if(l.size()<2)\n        return true;\n    bool inc = true, dec = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1])\n            dec = false;\n        if(l[i] < l[i+1])\n            inc = false;\n        if(!inc && !dec)\n            return false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while(n % 2 == 0){\n        max_prime = 2;\n        n /= 2;\n    }\n    for(int i = 3; i * i <= n; i += 2){\n        while(n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        max_prime = n;\n    }\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    for(int i=1; i<xs.size(); i++){\n        xs[i] = xs[i-1]*i;\n    }\n    xs.erase(xs.begin());\n    return xs;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        int a=0, b=0, c=1, d;\n        for(int i=3; i<=n; i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n        else if(s[i] == 'y' && i == s.length()-1){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    int len = str.length();\n    if(shift > len){\n        reverse(str.begin(), str.end());\n    }\n    else{\n        str = str.substr(len - shift) + str.substr(0, len - shift);\n    }\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a,o,m;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&a,&o);\n    m = n - a - o;\n    return m;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even = -1;\n    int smallest_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    if(smallest_even == -1) return {};\n    return {smallest_even, smallest_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    for(int i=lst.size()-1; i>=0; i--){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i])\n                count++;\n        }\n        if(count >= lst[i] && lst[i] >0)\n            return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            result.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/71", "generation": "\n    if(a + b > c && a + c > b && b + c > a){\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w && is_palindrome(q)){\n        return true;\n    }\n    return false;\n}\nbool is_palindrome(vector<int> q){\n    int start=0;\n    int end=q.size()-1;\n    while(start<end){\n        if(q[start] != q[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int changes = 0;\n    int n = arr.size();\n    int i = 0, j = n - 1;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            changes++;\n        }\n        i++;\n        j--;\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1 = 0, count2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n        count1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++)\n        count2 += lst2[i].size();\n    if(count1 <= count2)\n        return lst1;\n    else\n        return lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a/2; i++){\n        if(a % i == 0){\n            count++;\n        }\n    }\n    if(count == 0){\n        return false;\n    }\n    count = 0;\n    for(int i = 2; i <= a/2; i++){\n        if(a % i == 0){\n            count++;\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==1)\n        return false;\n    if(pow(n,floor(log(x)/log(n)))==x)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = (int)sqrt((double)a);\n    return cubeRoot*cubeRoot*cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() < 3)\n        return false;\n    for(int i = 0; i < s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grade > 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grade > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grade > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if(grade > 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grade > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if(grade > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if(grade > 1.7)\n            letter_grades.push_back(\"C\");\n        else if(grade > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if(grade > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if(grade > 0.7)\n            letter_grades.push_back(\"D\");\n        else if(grade > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if(length < 2)\n        return false;\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 10;\n    else\n        return 9*pow(10,n-1)+10*pow(10,n-2);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2){\n        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string temp = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(temp.begin(), temp.end());\n            result += temp;\n            temp = \"\";\n            result += ' ';\n        }\n        else{\n            temp += s[i];\n        }\n    }\n    sort(temp.begin(), temp.end());\n    result += temp;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    for(int i=0; i<res.size(); i++){\n        for(int j=0; j<res.size(); j++){\n            if(res[i][0] < res[j][0] || (res[i][0] == res[j][0] && res[i][1] > res[j][1])){\n                swap(res[i], res[j]);\n            }\n        }\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/88", "generation": "\n    // Your code here\n    if(array.size() == 0)\n        return array;\n    int sum = array[0] + array[array.size()-1];\n    if(sum % 2 == 0)\n        sort(array.begin(), array.end(), greater<int>());\n    else\n        sort(array.begin(), array.end());\n    return array;\n}\n\n"}
{"task_id": "CPP/89", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = (s[i] - 'a' + 2) % 26 + 'a';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = (s[i] - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2)\n        return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i]>lst[0])\n            return lst[i];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n            count++;\n        }\n    }\n    if(S[0] == 'I'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b)\n    return true;\n    else\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(message[i]=='a' || message[i]=='A'){\n            message[i]='c';\n        }\n        else if(message[i]=='e' || message[i]=='E'){\n            message[i]='g';\n        }\n        else if(message[i]=='i' || message[i]=='I'){\n            message[i]='k';\n        }\n        else if(message[i]=='o' || message[i]=='O'){\n            message[i]='q';\n        }\n        else if(message[i]=='u' || message[i]=='U'){\n            message[i]='w';\n        }\n        else if(message[i]=='A' || message[i]=='a'){\n            message[i]='C';\n        }\n        else if(message[i]=='E' || message[i]=='e'){\n            message[i]='G';\n        }\n        else if(message[i]=='I' || message[i]=='i'){\n            message[i]='K';\n        }\n        else if(message[i]=='O' || message[i]=='o'){\n            message[i]='Q';\n        }\n        else if(message[i]=='U' || message[i]=='u'){\n            message[i]='W';\n        }\n    }\n    return message;\n}\n\n"}
{"task_id": "CPP/94", "generation": "\n    int max_prime = -1;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>max_prime && is_prime(lst[i])){\n            max_prime = lst[i];\n        }\n    }\n    int sum = 0;\n    while(max_prime>0){\n        sum += max_prime%10;\n        max_prime /= 10;\n    }\n    return sum;\n}\nbool is_prime(int n){\n    if(n<=1) return false;\n    for(int i=2; i*i<=n; i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n    bool is_lower = true, is_upper = true;\n    for(auto i: dict){\n        if(i.first.find_first_not_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") != string::npos || i.first.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\") != string::npos){\n            is_lower = false;\n        }\n        if(i.first.find_first_not_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos && i.first.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\") == string::npos){\n            is_upper = false;\n        }\n        if(!is_lower && !is_upper)\n            return false;\n    }\n    return is_lower || is_upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool isPrime = true;\n        for(int j = 2; j*j <= i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n"}
{"task_id": "CPP/97", "generation": "\n    int product=a%10*b%10;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "\n    int num = atoi(value.c_str());\n    double fractional_part = fabs(modf(num, &num));\n    if(fractional_part < 0.5){\n        return num;\n    }\n    else{\n        if(num < 0){\n            return num - (int)fractional_part;\n        }\n        else{\n            return num + (int)fractional_part;\n        }\n    }\n}\n\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0){\n            result.push_back(n+2);\n        }\n        else{\n            result.push_back(n+1);\n        }\n        n=result[i];\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ',' || s[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n\n"}
{"task_id": "CPP/102", "generation": "\n    if(y % 2 != 0)\n        y--;\n    if(x % 2 != 0)\n        x++;\n    if(x > y)\n        return -1;\n    return y;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n > m) return \"-1\";\n    int sum = 0;\n    for(int i = n; i <= m; i++) sum += i;\n    int avg = round((double)sum / (m - n + 1));\n    string binary = \"\";\n    while(avg > 0){\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num%2 == 0){\n            num /= 2;\n        }\n        if(num != 0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    vector<int> temp;\n    map<int, string> m = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            temp.push_back(arr[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    for(int i=0; i<temp.size(); i++){\n        result.push_back(m[temp[i]]);\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result(n);\n    for(int i=0; i<n; i++){\n        if(i%2 == 0)\n            result[i] = factorial(i);\n        else\n            result[i] = sum(1, i);\n    }\n    return result;\n}\n\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\n\nint sum(int start, int end){\n    int sum = 0;\n    for(int i=start; i<=end; i++)\n        sum += i;\n    return sum;\n}\n\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        int len = str.length();\n        for(int j = 0; j < len/2; j++){\n            if(str[j] != str[len-1-j]){\n                break;\n            }\n            if(j == len/2 - 1){\n                even_count++;\n            }\n        }\n        if(i % 2 != 0){\n            odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int num = abs(n[i]);\n        int sum = 0;\n        while(num>0){\n            sum += num%10;\n            num /= 10;\n        }\n        if(n[i]<0 && sum%2==0) count++;\n        else if(sum%2==0) count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.size()==0)\n        return true;\n    int n=arr.size();\n    for(int i=0;i<n;i++){\n        if(arr[i]>arr[(i+1)%n]){\n            int j=i;\n            while(j>0 && arr[j]>arr[(j-1)%n]){\n                swap(arr[j],arr[(j-1)%n]);\n                j--;\n            }\n            swap(arr[j],arr[(i+1)%n]);\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count1 = 0, count2 = 0;\n    for(int i=0; i<lst1.size(); i++){\n        if(lst1[i] % 2 != 0)\n            count1++;\n    }\n    for(int i=0; i<lst2.size(); i++){\n        if(lst2[i] % 2 != 0)\n            count2++;\n    }\n    if(count1 > count2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0; i<test.length(); i++){\n        if(result.find(test[i])==result.end()){\n            result[test[i]] = 1;\n        }\n        else{\n            result[test[i]] += 1;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "\n    string temp;\n    for(int i=0;i<s.length();i++){\n        if(s[i] != c[0]){\n            temp += s[i];\n        }\n    }\n    string result = temp;\n    reverse(result.begin(), result.end());\n    if(result == s){\n        return {result,\"True\"};\n    }\n    else{\n        return {result,\"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] - '0' % 2 != 0)\n                count++;\n        }\n        string temp = \"the number of odd elements in the str\";\n        temp += to_string(i+1);\n        temp += \"ng \";\n        temp += to_string(i+1);\n        temp += \" of the \";\n        temp += to_string(i+1);\n        temp += \"nput.\";\n        result.push_back(temp);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0;\n    for(int i=0; i<nums.size(); i++)\n        sum += nums[i];\n    return sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\nint lower_buckets(vector<vector<int>> grid,int capacity){\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n                if(count>capacity){\n                    count=0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones(a);\n        int count_b = count_ones(b);\n        if(count_a == count_b)\n            return a < b;\n        return count_a < count_b;\n    });\n    return arr;\n}\n\nint count_ones(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    int consonants = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            if(word.length() == n){\n                consonants = 0;\n                for(int j=0; j<word.length(); j++){\n                    if(word[j] >= 'a' && word[j] <= 'z'){\n                        consonants++;\n                    }\n                }\n                if(consonants == n){\n                    result.push_back(word);\n                }\n            }\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word.length() == n){\n                consonants = 0;\n                for(int j=0; j<word.length(); j++){\n                    if(word[j] >= 'a' && word[j] <= 'z'){\n                        consonants++;\n                    }\n                }\n                if(consonants == n){\n                    result.push_back(word);\n                }\n            }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.length()-1; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos){\n            for(int j = i-1; j >= 0; j--){\n                if(vowels.find(word[j]) != string::npos){\n                    return word.substr(j, i-j);\n                }\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    int close = 0;\n    for(int i=0; i<lst[0].size(); i++){\n        if(lst[0][i] == '(')\n            open++;\n        else\n            close++;\n        if(close > open)\n            return \"No\";\n    }\n    for(int i=0; i<lst[1].size(); i++){\n        if(lst[1][i] == ')')\n            open++;\n        else\n            close++;\n        if(open > close)\n            return \"No\";\n    }\n    if(open == close)\n        return \"Yes\";\n    else\n        return \"No\";\n}\n\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2==0 && lst[i]%2==1)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<10 && arr[i]>-10){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0)\n            collatz.push_back(n);\n        n = n % 2 ? 3*n + 1 : n/2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n\n"}
{"task_id": "CPP/124", "generation": "\n    // your code here\n    if(date.length() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n    int month = (date[0]-'0')*10+(date[1]-'0');\n    int day = (date[3]-'0')*10+(date[4]-'0');\n    int year = (date[6]-'0')*1000+(date[7]-'0')*100+(date[8]-'0')*10+(date[9]-'0');\n    if(month<1 || month>12 || day<1 || day>31)\n        return false;\n    if(month==4 || month==6 || month==9 || month==11)\n        if(day>30)\n            return false;\n    if(month==2)\n        if(day>29)\n            return false;\n    if(year%4==0 && (year%100 != 0 || year%400 == 0))\n        if(day>29)\n            return false;\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> result;\n    bool has_space = false;\n    bool has_comma = false;\n    for(int i=0; i<txt.length(); i++){\n        if(txt[i] == ' '){\n            has_space = true;\n        }\n        if(txt[i] == ','){\n            has_comma = true;\n        }\n    }\n    if(has_space){\n        stringstream ss(txt);\n        string word;\n        while(getline(ss, word, ' ')){\n            result.push_back(word);\n        }\n    }\n    else if(has_comma){\n        stringstream ss(txt);\n        string word;\n        while(getline(ss, word, ',')){\n            result.push_back(word);\n        }\n    }\n    else{\n        int count = 0;\n        for(int i=0; i<txt.length(); i++){\n            if(islower(txt[i]) && (txt[i] - 'a') % 2 == 1){\n                count++;\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n    int count = 0;\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] == lst[i+1]){\n            count++;\n            if(count > 1)\n                return false;\n        }\n        else if(lst[i] > lst[i+1])\n            return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    else if(start == end)\n        return \"NO\";\n    else{\n        for(int i = start+1; i < end; i++)\n            if(i % 2 == 0)\n                return \"NO\";\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.empty()) return -32768;\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < arr.size(); i++){\n        sum += abs(arr[i]);\n        product *= (arr[i] > 0) - (arr[i] < 0);\n    }\n    return sum * product;\n}\n\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<k; i++){\n        int min_val = INT_MAX;\n        int min_x = -1, min_y = -1;\n        for(int x=0; x<n; x++){\n            for(int y=0; y<n; y++){\n                if(grid[x][y] < min_val){\n                    min_val = grid[x][y];\n                    min_x = x;\n                    min_y = y;\n                }\n            }\n        }\n        res.push_back(min_val);\n        grid[min_x][min_y] = INT_MAX;\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result(n + 1);\n    result[0] = 1;\n    if(n > 0){\n        result[1] = 3;\n        if(n > 1){\n            result[2] = 2;\n            for(int i = 3; i <= n; i++){\n                if(i % 2 == 0)\n                    result[i] = 1 + i / 2;\n                else\n                    result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n>0){\n        int digit = n%10;\n        if(digit%2 != 0)\n            product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]*lst[i];\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    char last_char = txt[txt.length()-1];\n    if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z'))\n        return true;\n    else if(last_char == ' ')\n        return false;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    for(int i=arr.size()-2; i>=0; i--){\n        if(arr[i] >= arr[i+1])\n            return i;\n    }\n    return -1;\n}\n\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = INT_MIN;\n    int min_pos = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>max_neg)\n            max_neg = lst[i];\n        if(lst[i]>0 && lst[i]<min_pos)\n            min_pos = lst[i];\n    }\n    return {max_neg, min_pos};\n}\n\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return \"None\";\n    }\n    if(a.type() == typeid(int) || a.type() == typeid(float)){\n        if(boost::any_cast<int>(a) > boost::any_cast<int>(b) || boost::any_cast<float>(a) > boost::any_cast<float>(b)){\n            return a;\n        }\n        else if(boost::any_cast<int>(a) < boost::any_cast<int>(b) || boost::any_cast<float>(a) < boost::any_cast<float>(b)){\n            return b;\n        }\n        else{\n            return \"None\";\n        }\n    }\n    else if(a.type() == typeid(string)){\n        string a_str = boost::any_cast<string>(a);\n        string b_str = boost::any_cast<string>(b);\n        replace(a_str.begin(), a_str.end(), ',', '.');\n        replace(b_str.begin(), b_str.end(), ',', '.');\n        if(stof(a_str) > stof(b_str) || stof(a_str) > stof(b_str)){\n            return a;\n        }\n        else if(stof(a_str) < stof(b_str) || stof(a_str) < stof(b_str)){\n            return b;\n        }\n        else{\n            return \"None\";\n        }\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2 != 0)\n        return false;\n    int count = 0;\n    for(int i=2; i<=n/2; i+=2){\n        if(n-i == 0)\n            count++;\n        else if((n-i)%2 == 0)\n            count += 2;\n    }\n    if(count == 4)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= factorial(i);\n    }\n    return result;\n}\n\nlong long factorial(int n){\n    if(n==0)\n        return 1;\n    else\n        return n*factorial(n-1);\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i++;\n        }\n        else if(text[i] == ' ' && text[i+1] != ' '){\n            text.replace(i, 1, \"_\");\n        }\n        else if(text[i] != ' ' && text[i+1] == ' '){\n            text.replace(i, 1, \"-\");\n        }\n    }\n    return text;\n}\n\n"}
{"task_id": "CPP/141", "generation": "\n    int count_digit = 0, count_alpha = 0, count_dot = 0;\n    for(int i=0; i<file_name.length(); i++){\n        if(isdigit(file_name[i])) count_digit++;\n        if(isalpha(file_name[i])) count_alpha++;\n        if(file_name[i] == '.') count_dot++;\n    }\n    if(count_digit > 3 || count_alpha == 0 || count_dot != 1) return \"No\";\n    if(file_name[0] < 'a' || (file_name[0] > 'z' && file_name[0] < 'A') || file_name[0] > 'Z') return \"No\";\n    string ext = file_name.substr(file_name.find_last_of(\".\") + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return \"No\";\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            sum += lst[i]*lst[i];\n        }\n        else if(i%4 == 0){\n            sum += lst[i]*lst[i]*lst[i];\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int i = 0;\n    while(i < sentence.length()){\n        int count = 0;\n        for(int j = i; j < sentence.length(); j++){\n            if(sentence[j] == ' ')\n                count++;\n            if(count == 2)\n                break;\n        }\n        if(count == 1){\n            string word = sentence.substr(i, sentence.find(' ', i) - i);\n            if(word.length() > 1 && is_prime(word.length()))\n                result += word + \" \";\n        }\n        i = sentence.find(' ', i) + 1;\n    }\n    return result.substr(0, result.length()-1);\n}\n\nbool is_prime(int n){\n    if(n <= 1)\n        return false;\n    for(int i = 2; i*i <= n; i++)\n        if(n % i == 0)\n            return false;\n    return true;\n}\n\n"}
{"task_id": "CPP/144", "generation": "\n    int num1, den1, num2, den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n    sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    if(num1 * den2 == num2 * den1)\n        return true;\n    else\n        return false;\n}\n\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int, int>> nums_with_sum;\n    for(int i=0; i<nums.size(); i++){\n        int sum = 0;\n        int num = nums[i];\n        while(num){\n            sum += abs(num%10);\n            num /= 10;\n        }\n        nums_with_sum.push_back(make_pair(sum, i));\n    }\n    sort(nums_with_sum.begin(), nums_with_sum.end());\n    vector<int> result;\n    for(int i=0; i<nums_with_sum.size(); i++){\n        result.push_back(nums_with_sum[i].second);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i] > 10 && (nums[i]%10 == 1 || nums[i]%10 == 3 || nums[i]%10 == 5 || nums[i]%10 == 7 || nums[i]%10 == 9)){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int pos1 = -1, pos2 = -1;\n    for(int i=0; i<8; i++){\n        if(planets[i] == planet1) pos1 = i;\n        if(planets[i] == planet2) pos2 = i;\n        if(pos1 != -1 && pos2 != -1) break;\n    }\n    if(pos1 == -1 || pos2 == -1) return result;\n    if(pos1 < pos2)\n        for(int i=pos1+1; i<pos2; i++)\n            result.push_back(planets[i]);\n    else\n        for(int i=pos2+1; i<pos1; i++)\n            result.push_back(planets[i]);\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].size() % 2 == 0)\n            result.push_back(lst[i]);\n    }\n    sort(result.begin(), result.end());\n    sort(result.begin(), result.end(), [](const string &a, const string &b) {\n        if(a.size() == b.size())\n            return a < b;\n        return a.size() < b.size();\n    });\n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] == floor(lst[i])){\n            if((int)lst[i] % 2 != 0){\n                sum += pow((int)lst[i], 2);\n            }\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000;\n    string strongest_extension = \"\";\n    for(int i=0;i<extensions.size();i++){\n        int cap=0, sm=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(isupper(extensions[i][j])){\n                cap++;\n            }\n            else if(islower(extensions[i][j])){\n                sm++;\n            }\n        }\n        int strength = cap-sm;\n        if(strength>max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    if(n==m){\n        return (a==b);\n    }\n    else{\n        for(int i=0;i<m;i++){\n            char c=b[i];\n            string temp=b.substr(i,m-i)+b.substr(0,i);\n            if(a.find(temp)!=string::npos){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    while(num){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}\n\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(int i=0; i<words.size(); i++){\n        int unique_count = 0;\n        for(int j=0; j<words[i].size(); j++){\n            unique_count += unique(words[i].begin(), words[i].end(), words[i][j]) - words[i].begin();\n        }\n        if(unique_count > max_unique){\n            max_unique = unique_count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(remaining >= need){\n        number += need;\n        remaining -= need;\n    }\n    else{\n        number += remaining;\n        remaining = 0;\n    }\n    return {number, remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\")\n            operand[i+1]=operand[i]+operand[i+1];\n        else if(operato[i]==\"-\")\n            operand[i+1]=operand[i]-operand[i+1];\n        else if(operato[i]==\"*\")\n            operand[i+1]=operand[i]*operand[i+1];\n        else if(operato[i]==\"//\")\n            operand[i+1]=floor(operand[i]/operand[i+1]);\n        else if(operato[i]==\"**\")\n            operand[i+1]=pow(operand[i],operand[i+1]);\n    }\n    return operand[operand.size()-1];\n}\n\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z')){\n            if(s[i]>='a' && s[i]<='z')\n                s[i] = s[i] - 32;\n            else\n                s[i] = s[i] + 32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty())\n        return \"\";\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
