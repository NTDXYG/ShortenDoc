{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let result = [];\n  let temp = '';\n  let count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      count++;\n      temp += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      count--;\n      temp += paren_string[i];\n      if (count === 0) {\n        result.push(temp);\n        temp = '';\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((acc, cur) => acc + Math.abs(cur - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  return paren_string.split(' ').map(group => {\n    let count = 0;\n    let max_count = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        count++;\n        if (count > max_count) {\n          max_count = count;\n        }\n      } else if (group[i] === ')') {\n        count--;\n      }\n    }\n    return max_count;\n  });\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  const result = [max];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let postfix = string.split('').reverse().join('');\n  for (let i = postfix.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i + 1))) {\n      return string + postfix.slice(i).split('').reverse().join('');\n    }\n  }\n  return string + postfix.slice(0).split('').reverse().join('');\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for(let i = 0; i < a.length; i++) {\n    if(a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  let distinctChars = new Set(string);\n  return distinctChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n\n  notes.forEach(note => {\n    switch (note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index !== -1) {\n      count++;\n      index += substring.length;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n\n  return numbers\n    .split(' ')\n    .sort((a, b) => numberMap[a] - numberMap[b])\n    .join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((num) => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for(let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  const result = [];\n\n  for (let number of numbers) {\n    if (counts[number] === 0) {\n      counts[number] = 1;\n      result.push(number);\n    } else if (counts[number] === 1) {\n      counts[number] += 1;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  if (xs.length % 2 !== 0) {\n    throw new Error('xs must have even number of coefficients');\n  }\n\n  const [largestCoefficient, ...remainingCoefficients] = xs.sort((a, b) => b - a);\n\n  if (largestCoefficient === 0) {\n    throw new Error('Largest coefficient must be non-zero');\n  }\n\n  return -remainingCoefficients.reduce((prev, item, index) => {\n    return prev + item * Math.pow(largestCoefficient, index);\n  }, 0) / largestCoefficient;\n}"}
{"task_id": "JavaScript/33", "generation": "\n  const thirds = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => (i % 3 === 0 ? thirds.shift() : v)).reverse();\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if ((i % 11 === 0 || i % 13 === 0) && i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  let result = l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v));\n  return result;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(-1) + group.slice(0, -1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let i = 2;\n  while (i < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n - 1];\n};"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      if (l[i] + l[left] + l[right] === 0) {\n        return true;\n      } else if (l[i] + l[left] + l[right] < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  // The number of collisions is equal to the number of pairs of cars\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(num => num + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  let set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  const digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  while (x > 0) {\n    result = digits[x % base] + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib4_n_minus_4 = 0;\n  let fib4_n_minus_3 = 0;\n  let fib4_n_minus_2 = 2;\n  let fib4_n_minus_1 = 0;\n\n  for (let i = 4; i <= n; i++) {\n    let fib4_i = fib4_n_minus_4 + fib4_n_minus_3 + fib4_n_minus_2 + fib4_n_minus_1;\n    fib4_n_minus_4 = fib4_n_minus_3;\n    fib4_n_minus_3 = fib4_n_minus_2;\n    fib4_n_minus_2 = fib4_n_minus_1;\n    fib4_n_minus_1 = fib4_i;\n  }\n\n  return fib4_n_minus_1;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2.0;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  return (Math.pow(2, n) % p);\n}"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for(let i = 0; i < l.length; i++) {\n    if(l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let c of s0) {\n    map.set(c, (map.get(c) || 0) + 1);\n  }\n  for (let c of s1) {\n    if (!map.get(c)) {\n      return false;\n    } else {\n      map.set(c, map.get(c) - 1);\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    let a = 0;\n    let b = 1;\n    for (let i = 2; i <= n; i++) {\n      let c = a + b;\n      a = b;\n      b = c;\n    }\n    return b;\n  }\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) {\n    return true;\n  }\n  const isNonDecreasing = l[0] < l[1] && l.slice(1).every((x, i) => l[i] < x);\n  const isNonIncreasing = l[0] > l[1] && l.slice(1).every((x, i) => l[i] > x);\n  return isNonDecreasing || isNonIncreasing;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let commonElements = [];\n  for(let i = 0; i < l1.length; i++){\n    for(let j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        commonElements.push(l1[i]);\n      }\n    }\n  }\n  return [...new Set(commonElements)];\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for(let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 1;\n\n  for (let i = 3; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n\n  return d;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('');\n  if (shift > digits.length) {\n    return digits.reverse().join('');\n  }\n  return digits.slice(digits.length - shift).concat(digits.slice(0, digits.length - shift)).join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.match(/\\d+/g).map(Number)\n  return n - apples - oranges\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n  return smallestEven === Infinity ? [] : [smallestEven, smallestIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let freq = {};\n  lst.forEach(num => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n\n  for (let i = lst.length; i >= 1; i--) {\n    if (freq[i] >= i) {\n      return i;\n    }\n  }\n\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) {\n      result.push(lst.pop());\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const isPalindrome = (arr) => arr.join('') === arr.slice().reverse().join('');\n  const sum = arr => arr.reduce((a, b) => a + b, 0);\n  return isPalindrome(q) && sum(q) <= w;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n  return sum1 < sum2 ? lst2 : lst1;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const primes = [2, 3, 5];\n  let count = 0;\n\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      count++;\n    }\n  }\n\n  return count === 3;\n}"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (x % i !== 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.cbrt(a);\n  return cubeRoot === Math.floor(cubeRoot);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexToDec = (hex) => {\n    return parseInt(hex, 16);\n  }\n\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n\n  const hexArr = num.split('');\n  let count = 0;\n  for (let i = 0; i < hexArr.length; i++) {\n    if (isPrime(hexToDec(hexArr[i]))) count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map(grade => {\n    if (grade === 4.0) return 'A+';\n    else if (grade > 3.7) return 'A';\n    else if (grade > 3.3) return 'A-';\n    else if (grade > 3.0) return 'B+';\n    else if (grade > 2.7) return 'B';\n    else if (grade > 2.3) return 'B-';\n    else if (grade > 2.0) return 'C+';\n    else if (grade > 1.7) return 'C';\n    else if (grade > 1.3) return 'C-';\n    else if (grade > 1.0) return 'D+';\n    else if (grade > 0.7) return 'D';\n    else if (grade > 0.0) return 'D-';\n    else return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return false;\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 10;\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    count += 9 * Math.pow(10, i - 1) * 10;\n  }\n  return count + Math.pow(10, n - 1) + 1;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while(N) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return array;\n\n  const sum = array[0] + array[array.length - 1];\n\n  if (sum % 2 === 0) {\n    return array.slice().sort((a, b) => b - a);\n  } else {\n    return array.slice().sort((a, b) => a - b);\n  }\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      let ascii = s[i].charCodeAt(0);\n      if (ascii >= 65 && ascii <= 90) {\n        encrypted += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n      } else if (ascii >= 97 && ascii <= 122) {\n        encrypted += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n      }\n    } else {\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  let smallest = Math.min(...lst);\n  lst.splice(lst.indexOf(smallest), 1);\n  if (lst.length < 2) {\n    return null;\n  }\n  return Math.min(...lst);\n};"}
{"task_id": "JavaScript/91", "generation": "\n  // Split the string into sentences\n  let sentences = S.replace(/\\.|\\?|\\!/g, '').split(' ');\n  // Count the number of sentences that start with \"I\"\n  let count = sentences.filter(sentence => sentence.charAt(0) === 'I').length;\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n    return false;\n  }\n  if (Math.floor(x) === y + z || Math.floor(y) === x + z || Math.floor(z) === x + y) {\n    return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const encodedMessage = [];\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i].toLowerCase())) {\n      const index = alphabet.indexOf(message[i].toLowerCase());\n      if (index !== -1) {\n        if (i % 2 === 0) {\n          encodedMessage.push(alphabet[(index + 2) % 26]);\n        } else {\n          encodedMessage.push(alphabet[(index + 1) % 26]);\n        }\n      } else {\n        encodedMessage.push(message[i]);\n      }\n    } else {\n      encodedMessage.push(message[i]);\n    }\n  }\n\n  return encodedMessage.join('');\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let maxPrime = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allStrings = true;\n  let lowerCaseKeys = Object.keys(dict).every(key => typeof key === 'string' && key === key.toLowerCase());\n  let upperCaseKeys = Object.keys(dict).every(key => typeof key === 'string' && key === key.toUpperCase());\n\n  if (!lowerCaseKeys && !upperCaseKeys) {\n    allStrings = false;\n  }\n\n  return allStrings;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  const aDigits = Math.abs(a).toString().split('').map(Number);\n  const bDigits = Math.abs(b).toString().split('').map(Number);\n  const product = aDigits.map((digit, i) => {\n    return digit * bDigits[i]\n  });\n  return product.reduce((a, b) => a + b, 0);\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [n];\n  for (let i = 0; i < n - 1; i++) {\n    pile.push(n + 2 * i);\n  }\n  return pile;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/, |,| /);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  // Check if x and y are both even\n  if (x % 2 === 0 && y % 2 === 0) {\n    // If x is greater than y, return x\n    if (x > y) {\n      return x;\n    }\n    // If y is greater than x, return y\n    else {\n      return y;\n    }\n  }\n  // If x is not even, check if y is even\n  else if (x % 2 !== 0 && y % 2 === 0) {\n    return x;\n  }\n  // If y is not even, return -1\n  else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return \"0b\" + avg.toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  return x.filter(num => {\n    const numStr = num.toString();\n    return numStr.every(digit => {\n      return digit % 2 !== 0;\n    });\n  }).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const one = \"One\";\n  const two = \"Two\";\n  const three = \"Three\";\n  const four = \"Four\";\n  const five = \"Five\";\n  const six = \"Six\";\n  const seven = \"Seven\";\n  const eight = \"Eight\";\n  const nine = \"Nine\";\n\n  const result = arr.filter((num) => num >= 1 && num <= 9)\n    .sort((a, b) => a - b)\n    .reverse()\n    .map((num) => {\n      switch (num) {\n        case 1:\n          return one;\n        case 2:\n          return two;\n        case 3:\n          return three;\n        case 4:\n          return four;\n        case 5:\n          return five;\n        case 6:\n          return six;\n        case 7:\n          return seven;\n        case 8:\n          return eight;\n        case 9:\n          return nine;\n        default:\n          return num.toString();\n      }\n    });\n\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const factorial = (num) => {\n    let result = 1;\n    for(let i = 2; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  }\n\n  const sum = (num) => {\n    return num * (num + 1) / 2;\n  }\n\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/107", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str[0] === str[str.length - 1]) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for(let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    if(num < 0) {\n      num = num * -1;\n    }\n    while(num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) count++;\n  }\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let evenCount1 = lst1.filter(num => num % 2 === 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0 && evenCount2 > 0) {\n      lst1[i] = lst2.pop();\n      evenCount1++;\n      evenCount2--;\n    }\n  }\n\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0 && evenCount1 > 0) {\n      lst2[i] = lst1.pop();\n      evenCount1--;\n      evenCount2++;\n    }\n  }\n\n  if (evenCount1 === 0 && evenCount2 !== 0) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const words = test.split(' ');\n  const hist = {};\n  let max = 0;\n  words.forEach((word) => {\n    if (word in hist) {\n      hist[word]++;\n    } else {\n      hist[word] = 1;\n    }\n    if (hist[word] > max) {\n      max = hist[word];\n    }\n  });\n  const result = {};\n  for (const key in hist) {\n    if (hist[key] === max) {\n      result[key] = max;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c) {\n      newStr = s[i] + newStr;\n    }\n  }\n\n  let reversedStr = '';\n  for (let i = newStr.length - 1; i >= 0; i--) {\n    reversedStr += newStr[i];\n  }\n\n  return (newStr === reversedStr) ? (`${reversedStr}`, true) : (`${reversedStr}`, false);\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str, index) => {\n    const oddCount = str.split('').filter(num => num % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${index + 1} of the ${oddCount}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return Math.floor(count / capacity);\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const countA = a.toString(2).replace(/0/g, '').length;\n    const countB = b.toString(2).replace(/0/g, '').length;\n    return countA - countB || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === '') return [];\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const result = [];\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) count++;\n    }\n    if (count === n) result.push(word);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let lastVowel = '';\n  for (let i = word.length - 1; i >= 2; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(lastVowel) && !vowels.includes(word[i - 1])) {\n      lastVowel = word[i];\n      return lastVowel;\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst.join('');\n  let stack = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length !== 0) {\n    return 'No';\n  }\n  return 'Yes';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  return arr.sort((a, b) => b - a).slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for(let i = 0; i < k; i++) {\n    if(arr[i] < 10) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  const collatz = [n];\n  while (n !== 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    collatz.push(n);\n  }\n  return collatz.filter(num => num % 2 !== 0);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const dateParts = date.split('-');\n\n  if (dateParts.length !== 3) {\n    return false;\n  }\n\n  const month = parseInt(dateParts[0], 10);\n  const day = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[2], 10);\n\n  if (month < 1 || month > 12 || day < 1 || year < 1) {\n    return false;\n  }\n\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  } else if ([4, 6, 9, 11].includes(month) && day > 30) {\n    return false;\n  } else if ([1, 3, 5, 7, 8, 10, 12].includes(month) && day > 31) {\n    return false;\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && isOdd(txt[i])) {\n        count++;\n      }\n    }\n    return count;\n  }\n};\n\nconst isOdd = (char) => {\n  return char.charCodeAt(0) % 2 !== 0;\n}"}
{"task_id": "JavaScript/126", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] == lst[i + 1]) {\n      count++;\n      if (count > 1) {\n        return false;\n      }\n    } else if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Find the start and end of the intersection\n  const intersectionStart = Math.max(start1, start2);\n  const intersectionEnd = Math.min(end1, end2);\n\n  // Check if the intersection is valid (i.e., it's not empty)\n  if (intersectionEnd < intersectionStart) {\n    return \"NO\";\n  }\n\n  // Check if the length of the intersection is a prime number\n  if (intersectionEnd - intersectionStart < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= intersectionEnd - intersectionStart; i++) {\n    if (intersectionEnd - intersectionStart % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let sign = 1;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n    product *= Math.abs(arr[i]);\n  }\n  return sign * product;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const visited = Array(n).fill(0).map(() => Array(n).fill(false));\n  const dp = Array(n).fill(0).map(() => Array(n).fill(Infinity));\n  const dir = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n\n  const dfs = (x, y, k) => {\n    if (k === 0) {\n      dp[x][y] = 0;\n      return grid[x][y];\n    }\n    if (dp[x][y] !== Infinity) {\n      return dp[x][y];\n    }\n    for (let i = 0; i < 4; i++) {\n      const nx = x + dir[i][0], ny = y + dir[i][1];\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n        const val = grid[x][y] + dfs(nx, ny, k - 1);\n        dp[x][y] = Math.min(dp[x][y], val);\n      }\n    }\n    return dp[x][y];\n  };\n\n  let minVal = Infinity, minPath = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const val = dfs(i, j, k - 1);\n      if (val < minVal) {\n        minVal = val;\n        minPath = [grid[i][j]];\n      } else if (val === minVal) {\n        minPath.push(grid[i][j]);\n      }\n    }\n  }\n  return minPath;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [3];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length]);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2), 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  return (\n    /[a-z]/i.test(lastChar) &&\n    !/[a-z\\s]/.test(txt.slice(0, txt.length - 1))\n  );\n};"}
{"task_id": "JavaScript/135", "generation": "\n  for(let i = arr.length - 2; i >= 0; i--) {\n    if(arr[i] >= arr[i+1]) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let negatives = lst.filter(num => num < 0).sort((a, b) => b - a);\n  let positives = lst.filter(num => num > 0).sort((a, b) => a - b);\n  return (negatives[0] || null, positives[0] || null);\n}"}
{"task_id": "JavaScript/137", "generation": "\n  const a1 = parseFloat(a.replace(/[,]/g, \"\"));\n  const b1 = parseFloat(b.replace(/[,]/g, \"\"));\n\n  if (isNaN(a1) || isNaN(b1)) return null;\n\n  return a1 > b1 ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n % 2 !== 0) {\n    return false;\n  }\n\n  let count = 0;\n  for (let i = 2; i <= n; i += 2) {\n    if (n - i === 2) {\n      count++;\n    }\n  }\n\n  return count === 4;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let fact = 1;\n  for(let i = n; i > 0; i--) {\n    fact *= factorial(i);\n  }\n  return fact;\n}\n\nconst factorial = (n) => {\n  if(n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s{2,}/g, \"-\");\n  newText = newText.replace(/ /g, \"_\");\n  return newText;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const arr = file_name.split('.');\n  if (arr.length !== 2) {\n    return 'No';\n  }\n  const [name, extension] = arr;\n  if (name.length > 3 || !/^[a-zA-Z]/.test(name[0])) {\n    return 'No';\n  }\n  if (!['txt', 'exe', 'dll'].includes(extension)) {\n    return 'No';\n  }\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => {\n    const length = word.length;\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n      if(length % i === 0) return false;\n    return length > 1;\n  });\n  return primeWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\n  if (nDen === 0) return false;\n\n  const gcd = (a, b) => {\n    if (!b) return a;\n    return gcd(b, a % b);\n  };\n\n  const numerator = xNum * nNum;\n  const denominator = xDen * nDen;\n\n  return numerator % denominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  if (nums.length === 0) return [];\n  return nums.sort((a, b) => {\n    const sumA = Array.from(String(Math.abs(a)), Number).reduce((a, b) => a + b, 0);\n    const sumB = Array.from(String(Math.abs(b)), Number).reduce((a, b) => a + b, 0);\n    if (sumA === sumB) return nums.indexOf(Math.abs(a)) - nums.indexOf(Math.abs(b));\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for(let i = 0; i < nums.length; i++) {\n    let str = nums[i].toString();\n    if(str[0] % 2 !== 0 && str[str.length - 1] % 2 !== 0 && nums[i] > 10) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for(let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for(let i = 0; i < n; i++) {\n    for(let j = i + 1; j < n; j++) {\n      for(let k = j + 1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 < 0 || index2 < 0) {\n    return [];\n  }\n\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n\n  return planets.slice(index1 + 1, index2);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  // filter out the words with odd length\n  const filteredList = lst.filter(word => word.length % 2 === 0);\n\n  // sort the list by length and then alphabetically\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n\n  return sortedList;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = extensions[0];\n  let strongestStrength = getStrength(extensions[0]);\n\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = getStrength(extensions[i]);\n    if (currentStrength > strongestStrength) {\n      strongest = extensions[i];\n      strongestStrength = currentStrength;\n    }\n  }\n\n  return `${class_name}.${strongest}`;\n};\n\nconst getStrength = (extension) => {\n  let cap = 0;\n  let sm = 0;\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) cap++;\n    else if (extension[i] === extension[i].toLowerCase()) sm++;\n  }\n  return cap - sm;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i))) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n\n  for(let i = 0; i < numString.length; i++) {\n    if(numString[i] % 2 == 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  return (evenCount, oddCount);\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const miniRoman = [\n    ['m', 1000],\n    ['cm', 900],\n    ['d', 500],\n    ['cd', 400],\n    ['c', 100],\n    ['xc', 90],\n    ['l', 50],\n    ['xl', 40],\n    ['x', 10],\n    ['ix', 9],\n    ['v', 5],\n    ['iv', 4],\n    ['i', 1]\n  ];\n\n  let roman = '';\n\n  for (let i = 0; i < miniRoman.length; i++) {\n    while (number >= miniRoman[i][1]) {\n      number -= miniRoman[i][1];\n      roman += miniRoman[i][0];\n    }\n  }\n\n  return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  const sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  return Math.abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 0.00001;\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let uniqueCount = new Set(word).size;\n    if (uniqueCount > maxUnique) {\n      maxUnique = uniqueCount;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      result += s[i] === s[i].toLowerCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for(let i = a; i <= b; i++) {\n    if(i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"}
