{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else if (paren_string[i] === ')') {\n      let temp = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '(') {\n        temp = stack.pop() + temp;\n      }\n      if (stack.length > 0) {\n        stack.pop();\n      }\n      result.push(temp);\n    }\n  }\n  return result;\n}\n\n// Test the function\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));  // Output: ['()', '(())', '(()())']"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}; // O(n) time | O(1) space\n\n// /**\n//  * You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//  * @param {number[]} operations - A list of deposit and withdrawal operations\n//  * @returns {boolean} - True if the balance falls below zero, false otherwise\n//  */\n// const belowZero = (operations) => {\n//   let balance = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     balance += operations[i];\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// }; // O(n) time | O(1) space\n\n// /**\n//  * You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//  * @param {number[]} operations - A list of deposit and withdrawal operations\n//  * @returns {boolean} - True if the balance falls below zero, false otherwise\n//  */\n// const belowZero = (operations) => {\n//   let balance = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     balance += operations[i];\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// }; // O(n) time | O(1) space\n\n// /**\n//  * You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//  * @param {number[]}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const results = [];\n\n  for (const group of groups) {\n    let max_depth = 0;\n    let current_depth = 0;\n    let is_open = false;\n\n    for (const char of group) {\n      if (char === '(') {\n        current_depth += 1;\n        is_open = true;\n      } else if (char === ')') {\n        if (is_open) {\n          current_depth -= 1;\n          is_open = false;\n        }\n      }\n      max_depth = Math.max(max_depth, current_depth);\n    }\n    results.push(max_depth);\n  }\n  return results;\n}\n\n// Test the function\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())')); // Output: [2, 3, 1, 3]"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n  if (isPalindrome(string)) {\n    return string;\n  }\n  let i = 0;\n  while (i < string.length) {\n    if (isPalindrome(string.slice(i))) {\n      return string + string.slice(0, i).split('').reverse().join('');\n    }\n    i += 1;\n  }\n  return string;\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === b[i]) ? '0' : '1';\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n}"}
{"task_id": "JavaScript/14", "generation": "\n  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n}"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const distinctChars = new Set(lowerCaseString);\n  return distinctChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const sortedNumArray = numArray.sort((a, b) => {\n    const numA = getNumber(a);\n    const numB = getNumber(b);\n    return numA - numB;\n  });\n  return sortedNumArray.join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair = [numbers[0], numbers[0]];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closestPair;\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => {\n    return typeof value === 'number' && Number.isInteger(value);\n  });\n}"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  let divisor = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n = n / divisor;\n    }\n    divisor += 1;\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const seen = new Set();\n  return numbers.filter((num) => {\n    if (seen.has(num)) {\n      return false;\n    } else {\n      seen.add(num);\n      return true;\n    }\n  });\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(s => s.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(x => x > 0);\n}\n\n// Return the first element of the list that is greater than 0.\n// If no such element exists, return null.\n// >>> getFirstPositive([-1, 2, -4, 5, 6])\n// 2\n// >>> getFirstPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 5\n// >>> getFirstPositive([-1, -2, -3, -4, -5])\n// null\nconst getFirstPositive = (l) => {\n  return l.find(x => x > 0) || null;\n}\n\n// Return the sum of all elements in the list.\n// >>> sumList([1, 2, 3, 4, 5])\n// 15\n// >>> sumList([-1, 2, -4, 5, 6])\n// 8\n// >>> sumList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 134\nconst sumList = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n// Return the product of all elements in the list.\n// >>> productList([1, 2, 3, 4, 5])\n// 120\n// >>> productList([-1, 2, -4, 5, 6])\n// -240\n// >>> productList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 0\nconst productList = (l) => {\n  return l.reduce((a, b) => a * b, 1);\n}\n\n// Return the average of all elements in the list.\n// >>> averageList([1, 2, 3, 4, 5])\n// 3.0\n// >>> averageList([-1, 2, -4, 5, 6])\n// 1.2\n// >>> averageList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 21.909090909090906\nconst averageList = (l"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  if (xs.length % 2 === 1) {\n    throw new Error(\"xs must have even number of coefficients\");\n  }\n  const n = xs.length;\n  const a = xs.slice(0, n - 1);\n  const b = xs.slice(1, n);\n  const c = xs.slice(2, n);\n  const d = xs.slice(3, n);\n  const e = xs.slice(4, n);\n  const f = xs.slice(5, n);\n  const g = xs.slice(6, n);\n  const h = xs.slice(7, n);\n  const i = xs.slice(8, n);\n  const j = xs.slice(9, n);\n  const k = xs.slice(10, n);\n  const l = xs.slice(11, n);\n  const m = xs.slice(12, n);\n  const n = xs.slice(13, n);\n  const o = xs.slice(14, n);\n  const p = xs.slice(15, n);\n  const q = xs.slice(16, n);\n  const r = xs.slice(17, n);\n  const s = xs.slice(18, n);\n  const t = xs.slice(19, n);\n  const u = xs.slice(20, n);\n  const v = xs.slice(21, n);\n  const w = xs.slice(22, n);\n  const x = xs.slice(23, n);\n  const y = xs.slice(24, n);\n  const z = xs.slice(25, n);\n  const aa = xs.slice(26, n);\n  const bb = xs.slice(27, n);\n  const cc = xs.slice(28, n);\n  const dd = xs.slice(29, n);\n  const ee = xs.slice(30, n);\n  const ff = xs.slice(31, n);\n  const gg = xs.slice(32, n);\n  const hh = xs.slice(33, n);\n  const ii = xs.slice(34, n);\n  const jj = xs.slice(35, n);\n  const kk = xs.slice(36, n);\n  const ll = xs.slice(37, n);\n  const mm = xs.slice(38, n);\n  const nn = xs.slice(39, n);\n  const oo = xs.slice(40, n);\n  const pp = xs.slice(41, n);\n  const qq = xs.slice(42, n);\n "}
{"task_id": "JavaScript/33", "generation": "\n  return l.map((x, i) => i % 3 === 0 ? l.slice(i).sort()[0] : x);\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString()).split('7').length - 1;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const l' = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l'.push(l[i]);\n    } else {\n      l'.push(l[i]);\n    }\n  }\n  return l';\n}"}
{"task_id": "JavaScript/38", "generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group.slice(0, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n// Example usage:\nconst encoded = encodeCyclic(\"Hello, World!\")"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0, b = 1, count = 0;\n  while (count < n) {\n    let temp = a;\n    a = b;\n    b = temp + b;\n    if (isPrime(b)) {\n      count++;\n    }\n  }\n  return b;\n}"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) {\n    return false;\n  }\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      const sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i !== j) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n}\n\n// 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2."}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (const num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base).toString() + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}\n\n// 2. Function to calculate the area of a rectangle\n/**\n  Given length and width return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  15\n  */\nconst rectangleArea = (l, w) => {\n  return l * w;\n}\n\n// 3. Function to calculate the area of a circle\n/**\n  Given radius return area for a circle.\n  >>> circleArea(5)\n  78.5\n  */\nconst circleArea = (r) => {\n  return Math.PI * (r ** 2);\n}\n\n// 4. Function to calculate the area of a trapezoid\n/**\n  Given bases and height return area for a trapezoid.\n  >>> trapezoidArea(5, 3, 4)\n  22.0\n  */\nconst trapezoidArea = (b1, b2, h) => {\n  return ((b1 + b2) * h) / 2;\n}\n\n// 5. Function to calculate the area of a rhombus\n/**\n  Given diagonals return area for a rhombus.\n  >>> rhombusArea(5, 3)\n  12.5\n  */\nconst rhombusArea = (d1, d2) => {\n  return (d1 * d2) / 2;\n}\n\n// 6. Function to calculate the area of a square\n/**\n  Given side return area for a square.\n  >>> squareArea(5)\n  25\n  */\nconst squareArea = (s) => {\n  return s ** 2;\n}\n\n// 7. Function to calculate the area of a parallelogram\n/**\n  Given base and height return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (b, h) => {\n  return b * h;\n}\n\n// 8. Function to calculate the area of a ellipse\n/**\n  Given semi-major and semi-minor axis return area for an ellipse.\n  >>> ellipseArea(5, 3)\n  47.123\n  */\nconst ellipseArea = (a, b) => {\n  return Math.PI * a * b;\n}\n\n// 9. Function to calculate the area of a sector\n/**\n  Given radius and angle return area for a sector.\n  >>>"}
{"task_id": "JavaScript/46", "generation": "\n  if (n <= 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n  } else {\n    let a = 0, b = 0, c = 2, d = 0;\n    for (let i = 3; i <= n; i++) {\n      [a, b, c, d] = [b, c, d, b + c + d];\n    }\n    return d;\n  }\n}; // O(n) time, O(1) space\n\n// Test cases\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14\n\n// The function `fib4` takes an integer `n` as input and returns the `n`-th element of the fib4 number sequence.\n// The function uses a loop to efficiently compute the `n`-th element in O(n) time and O(1) space.\n// The test cases demonstrate the function's correctness for different inputs."}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  const n = l.length;\n  if (n % 2 === 0) {\n    return (l[n / 2 - 1] + l[n / 2]) / 2;\n  } else {\n    return l[Math.floor(n / 2)];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/49", "generation": "\n  let result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = (result * p) % p;\n    }\n    n = n >> 1;\n    p = (p * p) % p;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n// Example usage:\nconst encoded = encodeShift(\"hello\")"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(x => x < t);\n}\n\n//Test the function\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); //true\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); //false\n"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}\n\n// Define a function to calculate the area of a rectangle\n/**\n  Calculate the area of a rectangle given its length and width\n  >>> area(5, 3)\n  15\n  >>> area(10, 2)\n  20\n  */\nconst area = (length, width) => {\n  return length * width;\n}\n\n// Define a function to calculate the volume of a cube\n/**\n  Calculate the volume of a cube given its side length\n  >>> volume(3)\n  27\n  >>> volume(5)\n  125\n  */\nconst volume = (side) => {\n  return side ** 3;\n}\n\n// Define a function to calculate the factorial of a number\n/**\n  Calculate the factorial of a number\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// Define a function to calculate the sum of an array of numbers\n/**\n  Calculate the sum of an array of numbers\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([10, 20, 30])\n  60\n  */\nconst sum = (arr) => {\n  return arr.reduce((a, b) => a + b, 0);\n}\n\n// Define a function to calculate the average of an array of numbers\n/**\n  Calculate the average of an array of numbers\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  >>> average([10, 20, 30])\n  20.0\n  */\nconst average = (arr) => {\n  return sum(arr) / arr.length;\n}\n\n// Define a function to calculate the median of an array of numbers\n/**\n  Calculate the median of an array of numbers\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([10, 20, 30])\n  20\n  */\nconst median = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2"}
{"task_id": "JavaScript/54", "generation": "\n  const s0Set = new Set(s0);\n  const s1Set = new Set(s1);\n  return s0Set.size === s1Set.size && [...s0Set].every(c => s1Set.has(c));\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let bracket of brackets) {\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\n// 2.2\n/**\n  Given a string of numbers separated by commas, return the sum of the numbers.\n\n  >>> sumNumbers(\"1,2,3,4,5\")\n  15\n  >>> sumNumbers(\"10,20,30,40,50\")\n  150\n  >>> sumNumbers(\"100,200,300,400,500\")\n  1500\n  */\nconst sumNumbers = (numbers) => {\n  return numbers.split(\",\").map(Number).reduce((a, b) => a + b, 0);\n}\n\n// 2.3\n/**\n  Given a string of numbers separated by commas, return the average of the numbers.\n\n  >>> averageNumbers(\"1,2,3,4,5\")\n  3.0\n  >>> averageNumbers(\"10,20,30,40,50\")\n  30.0\n  >>> averageNumbers(\"100,200,300,400,500\")\n  350.0\n  */\nconst averageNumbers = (numbers) => {\n  return sumNumbers(numbers) / numbers.split(\",\").length;\n}\n\n// 2.4\n/**\n  Given a string of numbers separated by commas, return the median of the numbers.\n\n  >>> medianNumbers(\"1,2,3,4,5\")\n  3\n  >>> medianNumbers(\"10,20,30,40,50\")\n  30\n  >>> medianNumbers(\"100,200,300,400,500\")\n  350\n  */\nconst medianNumbers = (numbers) => {\n  let sorted = numbers.split(\",\").map(Number).sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  } else {\n    return sorted[middle];\n  }\n}\n\n// 2.5\n/**\n  Given a string of numbers separated by commas, return the mode of the numbers.\n\n  >>> modeNumbers(\"1,2,3,"}
{"task_id": "JavaScript/57", "generation": "\n  const increasing = l.every((x, i, a) => i === 0 || x >= a[i - 1]);\n  const decreasing = l.every((x, i, a) => i === 0 || x <= a[i - 1]);\n  return increasing || decreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const commonSet = new Set([...set1].filter(x => set2.has(x)));\n  return [...commonSet].sort((a, b) => a - b);\n}\n\n//Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]*/</pre>\n</article>\n</body>\n</html> \n"}
{"task_id": "JavaScript/59", "generation": "\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i !== 0) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n    }\n  }\n  return n;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let bracket of brackets) {\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\n// 2. Implement a function called `isPalindrome` that takes a string as input and returns true if the string is a palindrome, false otherwise. A palindrome is a string that reads the same backwards as forwards.\n\nconst isPalindrome = (s) => {\n  return s === s.split(\"\").reverse().join(\"\");\n}\n\n// 3. Implement a function called `findLongestWord` that takes a list of words as input and returns the longest word in the list.\n\nconst findLongestWord = (words) => {\n  let longestWord = \"\";\n  for (let word of words) {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }\n  return longestWord;\n}\n\n// 4. Implement a function called `findLongestWordInSentence` that takes a sentence as input and returns the longest word in the sentence.\n\nconst findLongestWordInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let longestWord = \"\";\n  for (let word of words) {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }\n  return longestWord;\n}\n\n// 5. Implement a function called `findLongestWordInText` that takes a text as input and returns the longest word in the text.\n\nconst findLongestWordInText = (text) => {\n  let words = text.split(\" \");\n  let longestWord = \"\";\n  for (let word of words) {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }\n  return longestWord;\n}\n\n// 6. Implement a function called `findLongestWordInParagraph` that takes a paragraph as input and returns the longest word in the paragraph.\n\nconst findLongestWordInParagraph = (paragraph) => {\n  let words = paragraph.split(\" \");\n  let longestWord = \"\";\n  for (let word of words) {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }\n  return longestWord;\n}\n\n// 7."}
{"task_id": "JavaScript/62", "generation": "\n  if (xs.length === 1) {\n    return [0];\n  }\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/63", "generation": "\n  if (n <= 1) {\n    return 0;\n  } else if (n == 2) {\n    return 1;\n  } else {\n    let a = 0, b = 0, c = 1;\n    for (let i = 3; i <= n; i++) {\n      let temp = a + b + c;\n      a = b;\n      b = c;\n      c = temp;\n    }\n    return c;\n  }\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if ('aeiou'.includes(s[i].toLowerCase())) {\n      count++;\n    } else if (s[i].toLowerCase() === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const numStr = x.toString();\n  const numDigits = numStr.length;\n  const shiftMod = shift % numDigits;\n  const left = numStr.slice(-shiftMod);\n  const right = numStr.slice(0, -shiftMod);\n  return left + right;\n}"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let char of s) {\n    if (char === char.toUpperCase()) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 131\n\n// 2. Task\n/**\n * Returns the sum of the ASCII values of the characters in the string that are not digits.\n * @param {string} str - The input string.\n * @returns {number} The sum of the ASCII values of the non-digit characters.\n */\nconst nonDigitSum = (str) => {\n  let sum = 0;\n  for (let char of str) {\n    if (!/\\d/.test(char)) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 131\n\n// 3. Task\n/**\n * Returns the sum of the ASCII values of the characters in the string that are not letters.\n * @param {string} str - The input string.\n * @returns {number} The sum of the ASCII values of the non-letter characters.\n */\nconst nonLetterSum = (str) => {\n  let sum = 0;\n  for (let char of str) {\n    if (!/[a-zA-Z]/.test(char)) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 131\n\n// 4. Task\n/**\n * Returns the sum of the ASCII values of the characters in the string that are not whitespace.\n * @param {string} str - The input string.\n * @returns {number} The sum of the ASCII values of the non-whitespace characters.\n */\nconst nonWhitespaceSum = (str) => {\n  let sum = 0;\n  for (let char of str) {\n    if (!/\\s/.test(char)) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 131\n\n// 5. Task\n/**\n * Returns the sum of the ASCII values of the characters in the string that are not punctuation.\n * @param {string} str - The input string.\n * @returns {number} The sum of the ASCII values of the non-punctuation characters.\n */\nconst nonPunctuationSum = (str) => {\n  let sum = 0;\n  for (let char of str) {\n    if (!/[^\\w\\s]/.test(char)) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 131\n\n//"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n}; // time complexity is O(n) where n is the length of the string s\n// space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges.  // space complexity is O(1) because we are using a constant amount of space to store the variables apples and oranges."}
{"task_id": "JavaScript/68", "generation": "\n  let smallest = Infinity;\n  let smallestIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallest) {\n      smallest = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallest === Infinity) {\n    return [];\n  }\n  return [smallest, smallestIndex];\n}"}
{"task_id": "JavaScript/69", "generation": "\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}; // O(n) time, O(n) space\n// or\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}; // O(n) time, O(n) space\n// or\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}; // O(n) time, O(n) space\n// or\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}; // O(n) time, O(n) space\n// or\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}; // O(n) time, O(n) space\n// or\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n      max = Math.max(max,"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return lst;\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  while (sorted.length > 0) {\n    result.push(sorted[i]);\n    sorted.splice(i, 1);\n    if (sorted.length > 0) {\n      i = sorted.length - 1;\n      result.push(sorted[i]);\n      sorted.splice(i, 1);\n    }\n  }\n  return result;\n}\n\n// Test cases\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([])); // []"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}; // eslint-disable-line no-unused-vars\n\n// eslint-disable-next-line no-undef\nconsole.log(triangleArea(3, 4, 5)); // 6.00\n// eslint-disable-next-line no-undef\nconsole.log(triangleArea(1, 2, 10)); // -1\n"}
{"task_id": "JavaScript/72", "generation": "\n  // Check if the list is a palindrome\n  const isPalindrome = (arr) => arr.join('') === arr.join('').split('').reverse().join('');\n  // Check if the sum of the elements is less than or equal to the maximum possible weight\n  const isSumLessThanWeight = (arr, w) => arr.reduce((a, b) => a + b, 0) <= w;\n  // Return true if the list is a palindrome and the sum of its elements is less than or equal to the maximum possible weight\n  return isPalindrome(q) && isSumLessThanWeight(q, w);\n}  // eslint-disable-line no-unused-vars\n\n// Test the function\nconsole.log(willItFly([1, 2], 5)); // false\nconsole.log(willItFly([3, 2, 3], 1)); // false\nconsole.log(willItFly([3, 2, 3], 9)); // true\nconsole.log(willItFly([3], 5)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 10)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 5)); // false\nconsole.log(willItFly([1, 2, 3, 2, 1], 15)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 20)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 25)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 30)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 35)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 40)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 45)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 50)); // true\nconsole.log(willItFly([1, 2, 3, 2, 1], 55));"}
{"task_id": "JavaScript/73", "generation": "\n  const n = arr.length;\n  const count = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    count[i] = arr[n - 1 - i];\n  }\n  let changes = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] !== count[i]) {\n      changes++;\n    }\n  }\n  return changes;\n}; // O(n) time, O(n) space\n\n// Example usage:\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // Output: 0\n"}
{"task_id": "JavaScript/74", "generation": "\n  let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (sum1 < sum2) return lst1;\n  else if (sum1 > sum2) return lst2;\n  else return lst1;\n};  // eslint-disable-line no-unused-vars\n\n// console.log(totalMatch([], [])); // \u279e []\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\n// console.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\n// console.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']  // eslint-disable-line no-console\n\n// const totalMatch = (lst1, lst2) => {\n//   let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n//   let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n//   if (sum1 < sum2) return lst1;\n//   else if (sum1 > sum2) return lst2;\n//   else return lst1;\n// };  // eslint-disable-line no-unused-vars\n\n// console.log(totalMatch([], [])); // \u279e []\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\n// console.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\n// console.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']  // eslint-disable-line no-console\n\n// const totalMatch = (lst1, lst2) => {\n//   let sum1 = lst1.reduce((acc, curr) => acc + curr"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      count++;\n      a = Math.floor(a / i);\n    } else {\n      i++;\n    }\n  }\n  return count === 3;\n}"}
{"task_id": "JavaScript/76", "generation": "\n  if (x === 1) return true;\n  if (x < 1) return false;\n  let i = 0;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) return true;\n    i++;\n  }\n  return false;\n}; // Do not change this line\n// console.log(isSimplePower(1, 4)); // true\n// console.log(isSimplePower(2, 2)); // true\n// console.log(isSimplePower(8, 2)); // true\n// console.log(isSimplePower(3, 2)); // false\n// console.log(isSimplePower(3, 1)); // false\n// console.log(isSimplePower(5, 3)); // false\n// console.log(isSimplePower(4, 2)); // true\n// console.log(isSimplePower(16, 2)); // true\n// console.log(isSimplePower(27, 3)); // true\n// console.log(isSimplePower(32, 2)); // true\n// console.log(isSimplePower(81, 3)); // true\n// console.log(isSimplePower(100, 2)); // false\n// console.log(isSimplePower(100, 5)); // false\n// console.log(isSimplePower(100, 10)); // false\n// console.log(isSimplePower(100, 20)); // false\n// console.log(isSimplePower(100, 25)); // false\n// console.log(isSimplePower(100, 50)); // false\n// console.log(isSimplePower(100, 100)); // false\n// console.log(isSimplePower(100, 200)); // false\n// console.log(isSimplePower(100, 500)); // false\n// console.log(isSimplePower(100, 1000)); // false\n// console.log(isSimplePower(100, 2000)); // false\n// console.log(isSimplePower(100, 5000)); // false\n// console.log(isSimplePower(100, 10000)); // false\n// console.log(isSimplePower(100, 20000)); // false\n// console.log(isSimplePower(100, 50000)); // false\n// console.log(isSimplePower(100, 100000)); // false\n// console.log(isSimplePower(100, 200000)); // false\n// console.log(isSimplePower(100, "}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.round(Math.cbrt(a));\n  return Math.pow(cubeRoot, 3) === a;\n}; // 1.5 lines\n// or\nconst iscube = (a) => Math.cbrt(a) % 1 === 0; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.round(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.floor(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.ceil(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.round(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.floor(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.ceil(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.round(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.floor(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.ceil(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.round(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.floor(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.ceil(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.round(Math.cbrt(a)), 3) === a; // 1 line\n// or\nconst iscube = (a) => Math.pow(Math.floor(Math.cbrt(a)), 3) === a; // 1 line\n//"}
{"task_id": "JavaScript/78", "generation": "\n  let count = 0;\n  const hexDigits = \"0123456789ABCDEF\";\n  const primeDigits = \"2357\";\n  for (let i = 0; i < num.length; i++) {\n    if (primeDigits.includes(hexDigits[i])) {\n      count++;\n    }\n  }\n  return count;\n};// eslint-disable-next-line no-undef\nconsole.log(hexKey(\"AB\")); // 1\nconsole.log(hexKey(\"1077E\")); // 2\nconsole.log(hexKey(\"ABED1A33\")); // 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // 6\nconsole.log(hexKey(\"2020\")); // 2\n// console.log(hexKey(\"\")); // 0\n// console.log(hexKey(\"A\")); // 0\n// console.log(hexKey(\"B\")); // 1\n// console.log(hexKey(\"C\")); // 0\n// console.log(hexKey(\"D\")); // 1\n// console.log(hexKey(\"E\")); // 0\n// console.log(hexKey(\"F\")); // 0\n// console.log(hexKey(\"0\")); // 0\n// console.log(hexKey(\"1\")); // 1\n// console.log(hexKey(\"2\")); // 1\n// console.log(hexKey(\"3\")); // 1\n// console.log(hexKey(\"4\")); // 0\n// console.log(hexKey(\"5\")); // 1\n// console.log(hexKey(\"6\")); // 0\n// console.log(hexKey(\"7\")); // 1\n// console.log(hexKey(\"8\")); // 0\n// console.log(hexKey(\"9\")); // 0\n// console.log(hexKey(\"A\")); // 0\n// console.log(hexKey(\"B\")); // 1\n// console.log(hexKey(\"C\")); // 0\n// console.log(hexKey(\"D\")); // 1\n// console.log(hexKey(\"E\")); // 0\n// console.log(hexKey(\"F\")); // 0\n// console.log(hexKey(\"10\")); // 1\n// console.log(hexKey(\"11\")); // 1\n// console.log(hexKey(\"12\")); // 0\n// console.log(hexKey(\"13\")); // 1\n// console.log(hexKey(\"14\")); // 0\n// console.log(hexKey(\"15\")); // 1\n// console.log(hexKey(\"16\")); // 0\n// console.log(hexKey(\"17\"));"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}; // This function takes a decimal number, converts it to binary, and returns the binary number as a string with \"db\" at the beginning and end.\n\n// Test the function\nconsole.log(decimalToBinary(15));   // \"db1111db\"\nconsole.log(decimalToBinary(32));   // \"db100000db\"  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs.  // These are the expected outputs"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] > 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] > 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] > 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] > 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] > 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] > 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] > 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] > 1.3) {\n      letterGrades.push('C-');\n    } else if (grades[i] > 1.0) {\n      letterGrades.push('D+');\n    } else if (grades[i] > 0.7) {\n      letterGrades.push('D');\n    } else if (grades[i] > 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n  return letterGrades;\n}\n\n// Test the function\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', 'C-', 'C', 'A-']  // Output: ['A+', 'B', '"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  let count = 0;\n  for (let i = 1; i <= 9; i++) {\n    let num = 1;\n    for (let j = 0; j < n - 2; j++) {\n      num = num * 10 + i;\n    }\n    if (num.toString().startsWith('1') || num.toString().endsWith('1')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  let binary = N.toString(2);\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split(' ').map((word) => {\n    return Array.from(word).sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n};  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word. Space complexity: O(n*m) for the output string.  // Time complexity: O(n*m*log(m)) where n is the number of words and m is the maximum length of a word."}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}; // O(n*m) time, O(n*m) space\n\n// const getRow = (lst, x) => {\n//   let result = [];\n//   for (let i = 0; i < lst.length; i++) {\n//     for (let j = 0; j < lst[i].length; j++) {\n//       if (lst[i][j] === x) {\n//         result.push([i, j]);\n//       }\n//     }\n//   }\n//   result.sort((a, b) => a[0] - b[0]);\n//   result.sort((a, b) => b[1] - a[1]);\n//   return result;\n// }; // O(n*m) time, O(n*m) space\n\n// const getRow = (lst, x) => {\n//   let result = [];\n//   for (let i = 0; i < lst.length; i++) {\n//     for (let j = 0; j < lst[i].length; j++) {\n//       if (lst[i][j] === x) {\n//         result.push([i, j]);\n//       }\n//     }\n//   }\n//   result.sort((a, b) => a[0] - b[0]);\n//   result.sort((a, b) => b[1] - a[1]);\n//   return result;\n// }; // O(n*m) time, O(n*m) space\n\n// const getRow = (lst, x) => {\n//   let result = [];\n//   for (let i = 0; i < lst.length; i++) {\n//     for (let j = 0; j < lst[i].length; j++) {\n//       if (lst[i][j] === x) {\n//         result.push([i, j]);\n//       }\n//     }\n//   }\n//   result.sort((a, b) => a[0]"}
{"task_id": "JavaScript/88", "generation": "\n  const sum = array[0] + array[array.length - 1];\n  const isOdd = sum % 2 !== 0;\n  const sortedArray = [...array].sort((a, b) => isOdd ? a - b : b - a);\n  return sortedArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 2 * 2) % 26 + 97);\n    } else if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 2 * 2) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  lst.sort((a, b) => a - b);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] !== lst[i - 1]) {\n      return lst[i];\n    }\n  }\n  return null;\n};  // O(n log n) time complexity due to sorting, O(n) space complexity due to sorting in place.  O(n) time complexity if we use a set to remove duplicates.  O(n) space complexity for the set.  O(n) time complexity for the for loop.  O(1) space complexity for the for loop.  O(n) time complexity for the return statement.  O(1) space complexity for the return statement.  O(n) time complexity for the function.  O(n) space complexity for the function.  O(n) time complexity for the if statement.  O(1) space complexity for the if statement.  O(n) time complexity for the for loop.  O(1) space complexity for the for loop.  O(n) time complexity for the return statement.  O(1) space complexity for the return statement.  O(n) time complexity for the function.  O(n) space complexity for the function.  O(n) time complexity for the if statement.  O(1) space complexity for the if statement.  O(n) time complexity for the for loop.  O(1) space complexity for the for loop.  O(n) time complexity for the return statement.  O(1) space complexity for the return statement.  O(n) time complexity for the function.  O(n) space complexity for the function.  O(n) time complexity for the if statement.  O(1) space complexity for the if statement.  O(n) time complexity for the for loop.  O(1) space complexity for the for loop.  O(n) time complexity for the return statement.  O(1) space complexity for the return statement.  O(n) time complexity for the function.  O(n) space complexity for the function.  O(n) time complexity for the if statement.  O(1) space complexity for the if statement.  O(n) time complexity for the for loop.  O(1) space complexity for the for loop.  O(n) time complexity for the return statement"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let sentence = \"\";\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (sentence.trim().toLowerCase().startsWith(\"i\")) {\n        count++;\n      }\n      sentence = \"\";\n    } else {\n      sentence += S[i];\n    }\n  }\n  return count;\n} \n\n// Test cases\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\nconsole.log(isBored(\"I am bored. I am so bored. I am extremely bored.\")); // 3\nconsole.log(isBored(\"This is a test. I am not bored.\")); // 1\nconsole.log(isBored(\"I am not bored. I am just tired.\")); // 2\n"}
{"task_id": "JavaScript/92", "generation": "\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n    return false;\n  }\n  if (x + y === z || x + z === y || y + z === x) {\n    return true;\n  }\n  return false;\n};//end of anyInt function\n\n//test cases\nconsole.log(anyInt(5, 2, 7)); // \u279e true\nconsole.log(anyInt(3, 2, 2)); // \u279e false\nconsole.log(anyInt(3, -2, 1)); // \u279e true\nconsole.log(anyInt(3.6, -2.2, 2)); // \u279e false\n\n//2. Create a function that takes a string and returns the string with all vowels removed.\nconst removeVowels = (str) => {\n  const vowels = 'aeiouAEIOU';\n  return str.split('').filter(char => !vowels.includes(char)).join('');\n};//end of removeVowels function\n\n//test cases\nconsole.log(removeVowels('Hello World')); // \u279e 'Hll Wrld'\nconsole.log(removeVowels('Python is fun')); // \u279e 'Pythn s fn'\n\n//3. Create a function that takes a string and returns the string with all vowels removed, but only if the string is longer than 5 characters.\nconst removeVowelsLong = (str) => {\n  if (str.length <= 5) {\n    return str;\n  }\n  const vowels = 'aeiouAEIOU';\n  return str.split('').filter(char => !vowels.includes(char)).join('');\n};//end of removeVowelsLong function\n\n//test cases\nconsole.log(removeVowelsLong('Hello World')); // \u279e 'Hll Wrld'\nconsole.log(removeVowelsLong('Python')); // \u279e 'Python'\nconsole.log(removeVowelsLong('a')); // \u279e 'a'\n\n//4. Create a function that takes a string and returns the string with all vowels removed, but only if the string is longer than 5 characters and contains at least one vowel.\nconst removeVowelsLongVowel = (str) => {\n  if (str.length <= 5 || !str.match(/[aeiouAEIOU]/)) {\n    return str;\n  }\n  const vowels = 'aeiouAEIOU';\n  return str.split('').filter(char"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const encodedMessage = message.split('').map(char => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n  return encodedMessage.split('').map(char => {\n    if (vowels.includes(char)) {\n      return String.fromCharCode(char.charCodeAt(0) + 2);\n    } else {\n      return char;\n    }\n  }).join('');\n} \n\n// Test the function\nconsole.log(encode('test'));  // 'TGST'\nconsole.log(encode('This is a message'));  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MGSSCGG'  // 'tHKS KS C MG"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  const maxPrime = Math.max(...lst.filter(isPrime));\n  return Array.from(maxPrime.toString()).reduce((acc, cur) => acc + parseInt(cur), 0);\n};// eslint-disable-line no-unused-vars\n\n//Test the function\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // Output: 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // Output: 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // Output: 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // Output: 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // Output: 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // Output: 7\n"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let allLower = true;\n  let allUpper = true;\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      return false;\n    }\n    if (key === key.toUpperCase()) {\n      allLower = false;\n    }\n    if (key === key.toLowerCase()) {\n      allUpper = false;\n    }\n  }\n  return allLower || allUpper;\n};//end of checkDictCase\n\n// 2. Write a function that takes a string and returns the string with all vowels removed.\n//  The function should be case insensitive and should handle strings with non-ASCII characters.\n//  Examples:\n//  removeVowels(\"Hello World\") should return \"Hll Wrld\".\n//  removeVowels(\"AEIOU\") should return \"\".\n//  removeVowels(\"aeiou\") should return \"\".\n//  removeVowels(\"Hello, World!\") should return \"Hll, Wrld!\".\n//  removeVowels(\"Bonjour, comment \u00e7a va?\") should return \"BNJR, cmnt c v?\".\nconst removeVowels = (str) => {\n  const vowels = \"aeiouAEIOU\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00c0\u00c8\u00c9\u00cc\u00d2\u00d9\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00e2\u00ea\u00ee\u00f4\u00fb\u00c2\u00ca\u00ce\u00d4\u00db\u00e5\u00f8\u00c5\u00d8\";\n  return str.split('').filter(char => !vowels.includes(char)).join('');\n};//end of removeVowels\n\n// 3. Write a function that takes a string and returns the string with all vowels removed.\n//  The function should be case insensitive and should handle strings with non-ASCII characters.\n//  Examples:\n//  removeVowels(\"Hello World\") should return \"Hll Wrld\".\n//  removeVowels(\"AEIOU\") should return \"\".\n//  removeVowels(\"aeiou\") should return \"\".\n//  removeVowels(\"Hello, World!\") should return \"Hll, Wrld!\".\n//  removeVowels(\"Bonjour, comment \u00e7a va?\") should return \"BNJR, cmnt c v?\".\nconst removeVowels2 = (str) => {\n  const vowels = \"aeiouAEIOU\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00c0\u00c8\u00c9\u00cc\u00d2\u00d9\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00e2\u00ea"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\n// console.log(countUpTo(5)); // [2,3]\n// console.log(countUpTo(11)); // [2,3,5,7]\n// console.log(countUpTo(0)); // []\n// console.log(countUpTo(20)); // [2,3,5,7,11,13,17,19]\n// console.log(countUpTo(1)); // []\n// console.log(countUpTo(18)); // [2,3,5,7,11,13,17]  // [2,3,5,7,11,13,17,19]  // [2,3,5,7,11,13,17,19,23]  // [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\n// console.log(countUpTo(100)); // [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]  // [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101]  // [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239"}
{"task_id": "JavaScript/97", "generation": "\n  return (a % 10) * (b % 10);\n};//end of multiply function\n\n//Test the function\nconsole.log(multiply(148, 412)); //should return 16\nconsole.log(multiply(19, 28)); //should return 72\nconsole.log(multiply(2020, 1851)); //should return 0\nconsole.log(multiply(14,-15)); //should return 20\n\n//Problem 2: \n//Write a function that takes a string and returns the string with all vowels removed.\n//Examples:\n//removeVowels(\"Hello World\") should return \"Hll Wrld\"\n//removeVowels(\"Python is fun\") should return \"Pythn s fn\"\n//removeVowels(\"AEIOU\") should return \"\"\n//removeVowels(\"bcdfghjklmnpqrstvwxyz\") should return \"bcdfghjklmnpqrstvwxyz\"\nconst removeVowels = (str) => {\n  return str.replace(/[aeiou]/gi, '');\n};//end of removeVowels function\n\n//Test the function\nconsole.log(removeVowels(\"Hello World\")); //should return \"Hll Wrld\"\nconsole.log(removeVowels(\"Python is fun\")); //should return \"Pythn s fn\"\nconsole.log(removeVowels(\"AEIOU\")); //should return \"\"\nconsole.log(removeVowels(\"bcdfghjklmnpqrstvwxyz\")); //should return \"bcdfghjklmnpqrstvwxyz\"\n\n//Problem 3: \n//Write a function that takes a string and returns the string with all vowels removed, \n//but only if the string is longer than 5 characters.\n//Examples:\n//removeVowels(\"Hello World\") should return \"Hll Wrld\"\n//removeVowels(\"Python is fun\") should return \"Python is fun\"\n//removeVowels(\"AEIOU\") should return \"AEIOU\"\n//removeVowels(\"bcdfghjklmnpqrstvwxyz\") should return \"bcdfghjklmnpqrstvwxyz\"\nconst removeVowels = (str) => {\n  if (str.length > 5) {\n    return str.replace(/[aeiou]/gi, '');\n  } else {\n    return str;\n  }\n};//end of removeVowels function\n\n//Test the function\nconsole.log(removeVowels(\"Hello World\"));"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 2 === 0 && 'AEIOU'.includes(s[i].toUpperCase())) {\n      count++;\n    }\n  }\n  return count;\n}; // O(n) time, O(1) space\n\n// 2. Write a function that takes a string of digits and returns the largest possible integer that can be formed by rearranging the digits.\nconst largestInteger = (s) => {\n  const digits = s.split('').map(Number);\n  digits.sort((a, b) => b - a);\n  return digits.join('');\n}; // O(n log n) time, O(n) space\n\n// 3. Write a function that takes a string of digits and returns the smallest possible integer that can be formed by rearranging the digits.\nconst smallestInteger = (s) => {\n  const digits = s.split('').map(Number);\n  digits.sort((a, b) => a - b);\n  return digits.join('');\n}; // O(n log n) time, O(n) space\n\n// 4. Write a function that takes a string of digits and returns the sum of the digits.\nconst sumDigits = (s) => {\n  return s.split('').map(Number).reduce((a, b) => a + b, 0);\n}; // O(n) time, O(1) space\n\n// 5. Write a function that takes a string of digits and returns the product of the digits.\nconst productDigits = (s) => {\n  const digits = s.split('').map(Number);\n  return digits.reduce((a, b) => a * b, 1);\n}; // O(n) time, O(1) space\n\n// 6. Write a function that takes a string of digits and returns the number of times each digit appears.\nconst countDigits = (s) => {\n  const digits = s.split('').map(Number);\n  const count = {};\n  for (let i = 0; i < digits.length; i++) {\n    if (count[digits[i]]) {\n      count[digits[i]]++;\n    } else {\n      count[digits[i]] = 1;\n    }\n  }\n  return count;\n}; // O(n) time, O(n) space\n\n// 7. Write a function that takes a string of digits and returns the number of times each digit appears, sorted by frequency.\nconst countDigitsSorted ="}
{"task_id": "JavaScript/99", "generation": "\n  const number = parseFloat(value);\n  const integer = Math.round(number);\n  if (number - integer === 0.5) {\n    return number > 0 ? integer + 1 : integer - 1;\n  }\n  return integer;\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [n];\n  while (pile.length < n) {\n    let nextLevel = pile[pile.length - 1];\n    if (nextLevel % 2 === 0) {\n      pile.push(nextLevel + 2);\n    } else {\n      pile.push(nextLevel + 1);\n    }\n  }\n  return pile;\n}\n\n// Test the function\nconsole.log(makeAPile(3));  // Output: [3, 5, 7]\nconsole.log(makeAPile(4));  // Output: [4, 6, 8]\nconsole.log(makeAPile(5));  // Output: [5, 7, 9]  */</code></pre>\n<p>Explanation:</p>\n<p>The function <code>makeAPile</code> takes a positive integer <code>n</code> as input and returns a list of integers representing the number of stones in each level of the pile. The function starts by initializing the pile with the first level, which has <code>n</code> stones. It then enters a loop that continues until the pile has <code>n</code> levels. In each iteration of the loop, the function calculates the number of stones in the next level based on the number of stones in the previous level. If the previous level has an even number of stones, the next level has one more stone than the previous level. If the previous level has an odd number of stones, the next level has two more stones than the previous level. The function then adds the number of stones in the next level to the pile and continues to the next iteration of the loop. Once the pile has <code>n</code> levels, the function returns the pile.</p>\n<p>Time complexity: O(n), where n is the number of levels in the pile. This is because the function iterates over the levels of the pile once.</p>\n<p>Space complexity: O(n), where n is the number of levels in the pile. This is because the function stores the number of stones in each level in a list.</p> </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n"}
{"task_id": "JavaScript/101", "generation": "\n  return s.replace(/,/g, ' ').split(' ').filter(word => word !== '');\n}; // O(n) time, O(n) space\n\n// Example usage:\nconsole.log(wordsString(\"Hi, my name is John\")); // Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]  // Output: [\"One\", \"two\", \"three\","}
{"task_id": "JavaScript/102", "generation": "\n  // Check if x is greater than y, if so, return -1\n  if (x > y) {\n    return -1;\n  }\n  // Loop through all numbers from x to y\n  for (let i = x; i <= y; i++) {\n    // Check if the current number is even\n    if (i % 2 === 0) {\n      // If the number is even, return it\n      return i;\n    }\n  }\n  // If no even number is found, return -1\n  return -1;\n}\n\n// Test the function\nconsole.log(chooseNum(12, 15)); // Expected output: 14\nconsole.log(chooseNum(13, 12)); // Expected output: -1\n"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  const sum = (m + n) * (Math.floor((m - n + 1) / 2));\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // 0b11010\n\n// 2. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 3. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits2 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 4. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits3 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 5. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits4 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 6. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits5 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 7. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits6 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 8. Write a function that takes a string of digits and returns the sum of all the digits in the string.\nconst sumOfDigits7 = (s) => {\n  return s.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n}; // 1\n\n// 9. Write a function that takes a string of digits and returns"}
{"task_id": "JavaScript/104", "generation": "\n  return x.filter(num => {\n    let hasEven = false;\n    for (let i = 0; i < num.toString().length; i++) {\n      if (parseInt(num.toString()[i]) % 2 === 0) {\n        hasEven = true;\n        break;\n      }\n    }\n    return !hasEven;\n  }).sort((a, b) => a - b);\n} \n\n// Test cases\nconsole.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10])); // []"}
{"task_id": "JavaScript/105", "generation": "\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed.map(num => {\n    const names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return names[num];\n  });\n}; \n\n// Test cases\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(byLength([])); // []\nconsole.log(byLength([1, -1, 55])); // [\"One\"] \nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"] \nconsole.log(byLength([1, 1, 1, 1, 1, 1, 1, 1, 1])); // [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"] \nconsole.log(byLength([9, 9, 9, 9, 9, 9, 9, 9, 9])); // [\"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\"] \nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"] \nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])); // [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"] \nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n  const numStr = num.toString();\n  const reversed = numStr.split(\"\").reverse().join(\"\");\n  return numStr === reversed;\n}; // O(n) time complexity, O(n) space complexity\n\n// Example usage:\nconst result = evenOddPalindrome(12)"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let num of arr) {\n    let sum = 0;\n    let sign = 1;\n    if (num < 0) {\n      sign = -1;\n      num = num * -1;\n    }\n    while (num > 0) {\n      sum += num % 10 * sign;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}; // O(n*m) time, O(1) space\n// where n is the number of elements in the array and m is the maximum number of digits in the numbers in the array.  The space complexity is O(1) because we are not using any data structures that scale with the input size.  We are using a constant amount of space to store the count and the sum.  The time complexity is O(n*m) because we are iterating over each number in the array and for each number, we are iterating over each digit.  The number of digits in a number is proportional to the number of digits in the maximum number in the array.  Therefore, the time complexity is O(n*m).  The space complexity is O(1) because we are not using any data structures that scale with the input size.  We are using a constant amount of space to store the count and the sum.  Therefore, the space complexity is O(1).  The time complexity is O(n*m) because we are iterating over each number in the array and for each number, we are iterating over each digit.  The number of digits in a number is proportional to the number of digits in the maximum number in the array.  Therefore, the time complexity is O(n*m).  The space complexity is O(1) because we are not using any data structures that scale with the input size.  We are using a constant amount of space to store the count and the sum.  Therefore, the space complexity is O(1).  The time complexity is O(n*m) because we are iterating over each number in the array and for each number, we are iterating over each digit.  The number of digits in a number is proportional to the number of digits in the maximum number in the array.  Therefore, the time complexity is O(n*m).  The space complexity is O(1) because we are not using any data structures that scale with the input size.  We"}
{"task_id": "JavaScript/109", "generation": "\n    let n = arr.length;\n    let sortedArr = [...arr].sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] !== sortedArr[i]) {\n            count++;\n        }\n    }\n    return count <= n / 2;\n};;[3, 4, 5, 1, 2]//true\n[3, 5, 4, 1, 2]//false\n[1, 2, 3, 4, 5]//true\n[5, 4, 3, 2, 1]//false\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]//true\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]//false\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]//true\n[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]//false\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]//true\n[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]//false\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, "}
{"task_id": "JavaScript/110", "generation": "\n  let oddCount = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      oddCount++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 !== 0) {\n      oddCount--;\n    }\n  }\n  return oddCount === 0 ? \"YES\" : \"NO\";\n};/*/end of exchange function*/\n\n//Test the function\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\"*/</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let max = 0;\n  let maxLetters = [];\n\n  if (test === '') {\n    return result;\n  }\n\n  let words = test.split(' ');\n\n  for (let i = 0; i < words.length; i++) {\n    let letter = words[i];\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  }\n\n  for (let key in result) {\n    if (result[key] > max) {\n      max = result[key];\n      maxLetters = [key];\n    } else if (result[key] === max) {\n      maxLetters.push(key);\n    }\n  }\n\n  if (maxLetters.length === 1) {\n    result = { [maxLetters[0]]: max };\n  } else {\n    result = {};\n    for (let i = 0; i < maxLetters.length; i++) {\n      result[maxLetters[i]] = max;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  let isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}; // O(n) time complexity, O(n) space complexity\n\n// Example usage:\nconsole.log(reverseDelete('abcde', 'ae')); // Output: ['bcd', false]\nconsole.log(reverseDelete('abcdef', 'b')); // Output: ['acdef', false]\nconsole.log(reverseDelete('abcdedcba', 'ab')); // Output: ['cdedc', true]"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (parseInt(s[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${s}ng ${s} of the ${s}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n}\n\n// Test cases\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0\n"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const onesA = a.toString(2).split('1').length - 1;\n    const onesB = b.toString(2).split('1').length - 1;\n    if (onesA === onesB) {\n      return a - b;\n    } else {\n      return onesA - onesB;\n    }\n  });\n}; // eslint-disable-line no-unused-vars\n\nexport default sortArray; // eslint-disable-line no-unused-vars\nexport { sortArray }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnes }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinary }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByBinaryOnes }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentation }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrder }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreaker }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnes }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnesInBinaryRepresentation }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnesInBinaryRepresentationInAscendingOrder }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreaker }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnes }; // eslint-disable-line no-unused-vars\nexport { sortArray as sortArrayByOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTieBreakerForSimilarOnesInBinaryRepresentationInAscendingOrderWithDecimalValueTie"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const result = [];\n  for (let word of words) {\n    const consonants = word.replace(/[aeiouAEIOU]/g, '');\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  let index = word.length - 1;\n  while (index >= 0) {\n    if (vowels.includes(word[index])) {\n      let left = index - 1;\n      while (left >= 0 && !vowels.includes(word[left])) {\n        left--;\n      }\n      if (left >= 0) {\n        result = word[index];\n        break;\n      }\n    }\n    index--;\n  }\n  return result;\n}; // O(n) time, O(1) space\n\n// Test cases\nconsole.log(getClosestVowel(\"yogurt\")); // \"u\"\nconsole.log(getClosestVowel(\"FULL\")); // \"U\"\nconsole.log(getClosestVowel(\"quick\")); // \"\"\nconsole.log(getClosestVowel(\"ab\")); // \"\"\nconsole.log(getClosestVowel(\"hello\")); // \"e\" // Added this test case\nconsole.log(getClosestVowel(\"world\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"aeiou\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"bcdfg\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"xyz\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"a\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"z\")); // \"\" // Added this test case\nconsole.log(getClosestVowel(\"az\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"za\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"azb\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"bza\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"azbc\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"bzca\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"azbca\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"bzcaz\")); // \"a\" // Added this test case\nconsole.log(getClosestVowel(\"azbcaz\")); // \"a\""}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open--;\n    } else {\n      close--;\n    }\n  }\n  if (open === 0 && close === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"}
{"task_id": "JavaScript/120", "generation": "\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // Return the first k elements of the sorted array\n  return arr.slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a, b) => a + b, 0);\n}; // 12\n\n// 2. Write a function that takes a string of digits and returns the largest number that can be formed using each of the digits exactly once.\nconst largestNumber = (s) => {\n  const digits = s.split(\"\");\n  digits.sort((a, b) => b - a);\n  return digits.join(\"\");\n}; // \"987654321\"\n\n// 3. Write a function that takes a string of digits and returns the smallest number that can be formed using each of the digits exactly once.\nconst smallestNumber = (s) => {\n  const digits = s.split(\"\");\n  digits.sort((a, b) => a - b);\n  return digits.join(\"\");\n}; // \"0123456789\"\n\n// 4. Write a function that takes a string of digits and returns the sum of all the numbers that can be formed using each of the digits exactly once.\nconst sumOfNumbers = (s) => {\n  const digits = s.split(\"\");\n  const numbers = [];\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = i + 1; j < digits.length; j++) {\n      numbers.push(parseInt(digits[i] + digits[j]));\n    }\n  }\n  return numbers.reduce((a, b) => a + b, 0);\n}; // 45\n\n// 5. Write a function that takes a string of digits and returns the sum of all the numbers that can be formed using each of the digits exactly once, where the numbers are in descending order.\nconst sumOfNumbersDescending = (s) => {\n  const digits = s.split(\"\");\n  const numbers = [];\n  for (let i = 0; i < digits.length; i++) {\n    for (let j = i + 1; j < digits.length; j++) {\n      numbers.push(parseInt(digits[i] + digits[j]));\n    }\n  }\n  numbers.sort((a, b) => b - a);\n  return numbers.reduce((a, b) => a + b, 0);\n}; // 45\n\n// 6. Write a function that takes a string of digits and returns the sum of all the numbers that can be formed using each of the digits exactly once, where the numbers are in ascending order.\nconst sumOfNumbersAscending"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i].toString().length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let collatz = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = Math.floor(n / 2);\n    } else {\n      n = n * 3 + 1;\n    }\n    collatz.push(n);\n  }\n  return collatz.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}; // O(n) time complexity, O(n) space complexity\n\n// Example usage:\nconsole.log(getOddCollatz(5)); // Output: [1, 5] // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.  // The collatz sequence for 5 is [5, 16,"}
{"task_id": "JavaScript/124", "generation": "\n  // Check if the date string is not empty\n  if (!date) {\n    return false;\n  }\n  // Check if the date string is in the correct format\n  if (!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)) {\n    return false;\n  }\n  // Split the date string into month, day, and year\n  const [month, day, year] = date.split('-');\n  // Check if the month is valid\n  if (isNaN(month) || month < 1 || month > 12) {\n    return false;\n  }\n  // Check if the day is valid\n  if (isNaN(day) || (month === '2' && (day < 1 || day > 29)) || (month === '4' || month === '6' || month === '9' || month === '11' && (day < 1 || day > 30)) || (month === '1' || month === '3' || month === '5' || month === '7' || month === '8' || month === '10' || month === '12' && (day < 1 || day > 31))) {\n    return false;\n  }\n  // If all checks pass, the date is valid\n  return true;\n};// eslint-disable-next-line no-undef"}
{"task_id": "JavaScript/125", "generation": "\n  let words = txt.split(/\\s*,\\s*/);\n  if (words.length === 1 && words[0].length === txt.length) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].toLowerCase() === txt[i] && (i & 1) === 1) {\n        count++;\n      }\n    }\n    return count;\n  } else {\n    return words;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  if (lst.length < 2) return true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n    if (lst[i] === lst[i + 1]) return false;\n  }\n  return true;\n}; // O(n) time complexity\n\n// Example usage:\nconsole.log(isSorted([5])); // true\nconsole.log(isSorted([1, 2, 3, 4, 5])); // true\nconsole.log(isSorted([1, 3, 2, 4, 5])); // false\nconsole.log(isSorted([1, 2, 3, 4, 5, 6])); // true\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7])); // true\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7])); // false\nconsole.log(isSorted([1, 2, 2, 3, 3, 4])); // true\nconsole.log(isSorted([1, 2, 2, 2, 3, 4])); // false\n\n// Another example with a larger list\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // true\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7, 8, 9, 10])); // false\nconsole.log(isSorted([1, 2, 2, 3, 3, 4, 4, 5, 5, 6])); // true\nconsole.log(isSorted([1, 2, 2, 2, 3, 3, 3, 4, 4, 4])); // false\n"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  let length = end - start + 1;\n  if (isPrime(length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) {\n    return null;\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      return 0;\n    }\n    product *= Math.sign(arr[i]);\n  }\n  return arr.reduce((acc, curr) => acc + Math.abs(curr) * product, 0);\n}; // eslint-disable-line no-undef\n\n// Test cases\nconsole.log(prodSigns([1, 2, 2, -4]) === -9); // Expected output: true\nconsole.log(prodSigns([0, 1]) === 0); // Expected output: true\nconsole.log(prodSigns([]) === null); // Expected output: true\n"}
{"task_id": "JavaScript/129", "generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n  const queue = [];\n  const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n  let minPath = [];\n  let minPathValue = Infinity;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      queue.push([i, j, grid[i][j]]);\n      visited[i][j] = true;\n    }\n  }\n\n  while (queue.length) {\n    const [x, y, value] = queue.shift();\n    if (k === 0) {\n      if (value < minPathValue) {\n        minPathValue = value;\n        minPath = [value];\n      }\n    } else {\n      for (const [dx, dy] of directions) {\n        const nx = x + dx;\n        const ny = y + dy;\n        if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny]) {\n          queue.push([nx, ny, value]);\n          visited[nx][ny] = true;\n        }\n      }\n    }\n  }\n\n  return minPath;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let sequence = [1, 3, 2];\n  while (sequence.length < n + 1) {\n    let next = 0;\n    if (sequence[sequence.length - 1] % 2 === 0) {\n      next = 1 + sequence[sequence.length - 1] / 2;\n    } else {\n      next = sequence[sequence.length - 1] + sequence[sequence.length - 2] + sequence[sequence.length - 3];\n    }\n    sequence.push(next);\n  }\n  return sequence;\n}\n\n// Test the function\nconsole.log(tri(3)); // [1, 3, 2, 8]\nconsole.log(tri(5)); // [1, 3, 2, 8, 21]\nconsole.log(tri(10)); // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]  // [1, 3, "}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return true;\n      }\n    }\n  }\n  return count > 0;\n}; // 1\n\n// 2\nconst isNested = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return true;\n      }\n    }\n  }\n  return count > 0;\n}; // 1\n\n// 3\nconst isNested = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return true;\n      }\n    }\n  }\n  return count > 0;\n}; // 1\n\n// 4\nconst isNested = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return true;\n      }\n    }\n  }\n  return count > 0;\n}; // 1\n\n// 5\nconst isNested = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n      if (count < 0) {\n        return true;\n      }\n    }\n  }\n  return count > 0;\n}; // 1\n\n// 6\nconst isNested = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '['"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n};// eslint-disable-line no-undef\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n}; // eslint-disable-line no-undef\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n}; // eslint-disable-line no-undef\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) return false;\n  const lastChar = txt.charAt(txt.length - 1);\n  const lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  const lastCharIsPartOfWord = txt.charAt(txt.length - 1) === \" \";\n  return lastCharIsLetter && !lastCharIsPartOfWord;\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let negatives = lst.filter(x => x < 0);\n  let positives = lst.filter(x => x > 0);\n  if (negatives.length === 0) {\n    return [null, positives.length > 0 ? Math.min(...positives) : null];\n  } else if (positives.length === 0) {\n    return [Math.max(...negatives), null];\n  } else {\n    return [Math.max(...negatives), Math.min(...positives)];\n  }\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === typeof b) {\n    if (a === b) {\n      return null;\n    } else if (typeof a === \"string\") {\n      a = parseFloat(a.replace(/,/g, '.'));\n      b = parseFloat(b.replace(/,/g, '.'));\n    } else {\n      a = parseFloat(a);\n      b = parseFloat(b);\n    }\n    return a > b ? a : b;\n  } else {\n    return null;\n  }\n}; // eslint-disable-line no-unused-vars\n\n// console.log(compareOne(1, 2.5)); // \u279e 2.5\n// console.log(compareOne(1, \"2,3\")); // \u279e \"2,3\"\n// console.log(compareOne(\"5,1\", \"6\")); // \u279e \"6\"\n// console.log(compareOne(\"1\", 1)); // \u279e null\n\n// const compareTwo = (a, b, c) => {\n//   if (typeof a === typeof b && typeof a === typeof c) {\n//     if (a === b && a === c) {\n//       return null;\n//     } else if (typeof a === \"string\") {\n//       a = parseFloat(a.replace(/,/g, '.'));\n//       b = parseFloat(b.replace(/,/g, '.'));\n//       c = parseFloat(c.replace(/,/g, '.'));\n//     } else {\n//       a = parseFloat(a);\n//       b = parseFloat(b);\n//       c = parseFloat(c);\n//     }\n//     return a > b && a > c ? a : b > c ? b : c;\n//   } else {\n//     return null;\n//   }\n// }; // eslint-disable-line no-unused-vars\n\n// console.log(compareTwo(1, 2.5, 3)); // \u279e 3\n// console.log(compareTwo(1, \"2,3\", \"6\")); // \u279e \"6\"\n// console.log(compareTwo(\"5,1\", \"6\", \"7\")); // \u279e \"7\"\n// console.log(compareTwo(\"1\", 1, 1)); // \u279e null\n\n// const compareThree = (a, b, c) => {\n//   if (typeof a === typeof b && typeof a === typeof c) {\n//     if (a === b && a === c) {\n//       return null;\n//     } else if (typeof a === \"string\") {\n//       a = parseFloat(a.replace(/,/"}
{"task_id": "JavaScript/138", "generation": "\n  for (let i = 2; i < n; i += 2) {\n    for (let j = i + 2; j < n; j += 2) {\n      for (let k = j + 2; k < n; j += 2) {\n        for (let l = k + 2; l < n; l += 2) {\n          if (i + j + k + l === n) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let result = text.replace(/\\s+/g, (match) => {\n    if (match.length > 2) {\n      return '-';\n    } else {\n      return '_';\n    }\n  });\n  return result;\n}; \n\n// Test cases\nconsole.log(fixSpaces(\"Example\")); // \"Example\"\nconsole.log(fixSpaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fixSpaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fixSpaces(\" Example   3\")); // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\"  // \"_Example-3\" "}
{"task_id": "JavaScript/141", "generation": "\n  // Check if the file name contains exactly one dot\n  if (file_name.split('.').length - 1 !== 1) {\n    return 'No';\n  }\n  // Split the file name into two parts: the name and the extension\n  const [name, extension] = file_name.split('.');\n  // Check if the name starts with a latin alphabet letter\n  if (!/^[a-zA-Z]/.test(name)) {\n    return 'No';\n  }\n  // Check if the extension is one of the allowed extensions\n  if (!['txt', 'exe', 'dll'].includes(extension)) {\n    return 'No';\n  }\n  // Check if there are more than three digits in the file name\n  if (/(\\d)\\1{3,}/.test(file_name)) {\n    return 'No';\n  }\n  // If all conditions are met, return 'Yes'\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    }\n  }\n  return sum;\n}*/\n\n\n\n// 2. Write a function that takes a list of integers and returns the sum of the squares of the integers in the list that are greater than 5.\n// If the list is empty, the function should return 0.\n// If the list contains no integers greater than 5, the function should return 0.\n// Examples:\n// For lst = [1,2,3,4,5,6,7,8,9] the output should be 65\n// For lst = [] the output should be 0\n// For lst = [1,2,3,4,5] the output should be 0\nconst sumSquaresGT5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 5) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}*/\n\n\n\n// 3. Write a function that takes a list of integers and returns the sum of the cubes of the integers in the list that are less than or equal to 5.\n// If the list is empty, the function should return 0.\n// If the list contains no integers less than or equal to 5, the function should return 0.\n// Examples:\n// For lst = [1,2,3,4,5,6,7,8,9] the output should be 225\n// For lst = [] the output should be 0\n// For lst = [6,7,8,9] the output should be 0\nconst sumCubesLE5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 5) {\n      sum += lst[i] ** 3;\n    }\n  }\n  return sum;\n}*/\n\n\n\n// 4. Write a function that takes a list of integers and returns the sum"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => {\n    const isPrime = (num) => {\n      if (num < 2) return false;\n      for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n      }\n      return true;\n    };\n    return isPrime(word.length);\n  });\n  return primeWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n  const resultNum = xNum * nDen;\n  const resultDen = xDen * nNum;\n  return resultNum % resultDen === 0;\n}; // eslint-disable-line no-unused-vars\n\n// You can also use the following function to test the simplify function\nconst testSimplify = () => {\n  console.log(simplify(\"1/5\", \"5/1\")); // true\n  console.log(simplify(\"1/6\", \"2/1\")); // false\n  console.log(simplify(\"7/10\", \"10/2\")); // false\n};\n\ntestSimplify(); // eslint-disable-line no-undef\n"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA - sumB;\n    }\n  });\n};  // eslint-disable-line no-unused-vars\n\n// To fix the warning, you can export the function or use it somewhere in your code\nexport default orderByPoints;  // eslint-disable-line no-unused-vars\n"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // 1\n\n// 2\nconst specialFilter2 = (nums) => {\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // 1\n\n// 3\nconst specialFilter3 = (nums) => {\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // 1\n\n// 4\nconst specialFilter4 = (nums) => {\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // 1\n\n// 5\nconst specialFilter5 = (nums) => {\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // 1\n\n// 6\nconst specialFilter6 = (nums) => {\n  let count = 0;\n  for (let num of nums) {\n    if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n      count++;\n    }\n  }\n  return count;\n}; // "}
{"task_id": "JavaScript/147", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};  // O(n^3) time complexity\n\n// Optimized solution\nconst getMaxTriplesOptimized = (n) => {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            let sum = (i * i - i + 1 + j * j - j + 1) % 3;\n            if (sum === 0) {\n                count += Math.floor((n - j - 1) / 2);\n            } else if (sum === 1) {\n                count += Math.floor((n - j - 1) / 3);\n            }\n        }\n    }\n    return count;\n};  // O(n^2) time complexity\n\n// Test cases\nconsole.log(getMaxTriples(5));  // Output: 1\nconsole.log(getMaxTriplesOptimized(5));  // Output: 1\n"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  const result = planets.slice(start + 1, end);\n  return result;\n}"}
{"task_id": "JavaScript/149", "generation": "\n  const filteredList = lst.filter(str => str.length % 2 === 0);\n  return filteredList.sort((a, b) => a.length - b.length || a.localeCompare(b));\n}"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};//end compare\n\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])); // -> [0,0,0,0,3,3]\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])); // -> [4,4,1,0,0,6]\n\n// 2. Write a function that takes a string of numbers separated by spaces and returns an array of integers.\n//   The string can contain decimal numbers, and the function should round the numbers to the nearest integer.\n//   If the string is empty, the function should return an empty array.\n\nconst stringToIntArray = (str) => {\n  if (str === '') return [];\n  return str.split(' ').map(num => Math.round(parseFloat(num)));\n};//end stringToIntArray\n\n// console.log(stringToIntArray('1 2.5 3 4.7 5')); // -> [1, 3, 3, 5, 5]\n// console.log(stringToIntArray('')); // -> []\n\n// 3. Write a function that takes a string of numbers separated by spaces and returns an array of integers.\n//   The string can contain decimal numbers, and the function should round the numbers to the nearest integer.\n//   If the string is empty, the function should return an empty array.\n//   The function should also handle cases where the string contains non-numeric characters.\n\nconst stringToIntArray2 = (str) => {\n  if (str === '') return [];\n  return str.split(' ').filter(num => !isNaN(parseFloat(num))).map(num => Math.round(parseFloat(num)));\n};//end stringToIntArray2\n\n// console.log(stringToIntArray2('1 2.5 3 4.7 5')); // -> [1, 3, 3, 5, 5]\n// console.log(stringToIntArray2('')); // -> []\n// console.log(stringToIntArray2('1 2.5 3 4.7 5 a')); // -> [1, 3, 3, 5, 5]\n\n// 4. Write a function that takes a string of numbers separated by spaces and returns an array of integers.\n//   The string can contain decimal numbers, and the function should round"}
{"task_id": "JavaScript/153", "generation": "\n  let max_strength = -Infinity;\n  let strongest = '';\n  for (let extension of extensions) {\n    let cap = 0;\n    let sm = 0;\n    for (let char of extension) {\n      if (char === char.toUpperCase()) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    let strength = cap - sm;\n    if (strength > max_strength) {\n      max_strength = strength;\n      strongest = extension;\n    }\n  }\n  return class_name + '.' + strongest;\n};// eslint-disable-next-line no-undef\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // 'my_class.AA'\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // 'Slices.SErviNGSliCes'"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length < b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a.slice(i, i + b.length) === b) return true;\n  }\n  return false;\n}; // O(n*m) time complexity, O(1) space complexity\n\n// 2\n/*You are given a string of numbers separated by spaces. You need to return the sum of all the numbers in the string.\n  sumOfNumbers(\"1 2 3 4 5\") => 15\n  sumOfNumbers(\"10 20 30 40 50\") => 150\n  sumOfNumbers(\"1 2 3 4 5 6 7 8 9 10\") => 55\n  sumOfNumbers(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") => 210\n  */\nconst sumOfNumbers = (a) => {\n  return a.split(\" \").map(Number).reduce((a, b) => a + b, 0);\n}; // O(n) time complexity, O(n) space complexity\n\n// 3\n/*You are given a string of numbers separated by spaces. You need to return the average of all the numbers in the string.\n  averageOfNumbers(\"1 2 3 4 5\") => 3\n  averageOfNumbers(\"10 20 30 40 50\") => 30\n  averageOfNumbers(\"1 2 3 4 5 6 7 8 9 10\") => 5.5\n  averageOfNumbers(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") => 10.5\n  */\nconst averageOfNumbers = (a) => {\n  return sumOfNumbers(a) / a.split(\" \").length;\n}; // O(n) time complexity, O(n) space complexity\n\n// 4\n/*You are given a string of numbers separated by spaces. You need to return the median of all the numbers in the string.\n  medianOfNumbers(\"1 2 3 4 5\") => 3\n  medianOfNumbers(\"10 20 "}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (parseInt(num.toString()[i]) % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n\n  let result = '';\n  let i = 1000;\n\n  while (number > 0) {\n    const value = Object.keys(romanNumerals).find((key) => key <= number);\n    const numeral = romanNumerals[value];\n\n    result += numeral.repeat(Math.floor(number / value));\n    number %= value;\n    i = value;\n  }\n\n  return result.toLowerCase();\n};"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) ||\n      Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) ||\n      Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let max = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > maxCount) {\n      max = word;\n      maxCount = count;\n    } else if (count === maxCount && word < max) {\n      max = word;\n    }\n  }\n  return max;\n}; // O(n*m) time, O(n*m) space\n\n// Another solution\nconst findMax = (words) => {\n  let max = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > maxCount) {\n      max = word;\n      maxCount = count;\n    } else if (count === maxCount && word < max) {\n      max = word;\n    }\n  }\n  return max;\n}; // O(n*m) time, O(n*m) space\n\n// Another solution\nconst findMax = (words) => {\n  let max = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > maxCount) {\n      max = word;\n      maxCount = count;\n    } else if (count === maxCount && word < max) {\n      max = word;\n    }\n  }\n  return max;\n}; // O(n*m) time, O(n*m) space\n\n// Another solution\nconst findMax = (words) => {\n  let max = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > maxCount) {\n      max = word;\n      maxCount = count;\n    } else if (count === maxCount && word < max) {\n      max = word;\n    }\n  }\n  return max;\n}; // O(n*m) time, O(n*m) space\n\n// Another solution\nconst findMax = (words) => {\n  let max = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > maxCount) {\n      max = word;\n      maxCount = count;\n    } else if (count === maxCount && word < max) {\n      max = word;\n    }\n  }\n  return max;\n}; // O(n"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + need;\n  let left = remaining - (total - number);\n  return [total, left];\n} \n\n// Test cases\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9)); // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      default:\n        return \"Invalid operator\";\n    }\n  }\n  return result;\n}\n\n// Test the function\nconst operator = ['+', '*', '-'];\nconst operand = [2, 3, 4, 5]"}
{"task_id": "JavaScript/161", "generation": "\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      if (s[i] === s[i].toUpperCase()) {\n        result += s[i].toLowerCase();\n      } else {\n        result += s[i].toUpperCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  if (!/[a-zA-Z]/.test(result)) {\n    result = result.split(\"\").reverse().join(\"\");\n  }\n  return result;\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"}
