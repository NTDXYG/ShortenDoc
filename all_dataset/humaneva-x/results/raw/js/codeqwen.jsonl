{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  // Remove spaces from the string\n  const noSpaces = paren_string.replace(/\\s/g, '');\n  // Initialize an array to hold the separated groups\n  const separatedGroups = [];\n  // Initialize a counter for the current group\n  let currentGroup = '';\n  // Initialize a counter for the depth of nesting\n  let depth = 0;\n\n  // Iterate over each character in the string\n  for (let i = 0; i < noSpaces.length; i++) {\n    // If the character is an open parenthesis, increase the depth and add it to the current group\n    if (noSpaces[i] === '(') {\n      depth++;\n      currentGroup += noSpaces[i];\n    }\n    // If the character is a close parenthesis, decrease the depth and add it to the current group\n    else if (noSpaces[i] === ')') {\n      depth--;\n      currentGroup += noSpaces[i];\n      // If the depth reaches zero, the current group is complete, so add it to the separated groups array\n      if (depth === 0) {\n        separatedGroups.push(currentGroup);\n        // Reset the current group to an empty string\n        currentGroup = '';\n      }\n    }\n  }\n\n  // Return the array of separated groups\n  return separatedGroups;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let operation of operations) {\n    balance += operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const absoluteDeviations = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDeviations.reduce((a, b) => a + b, 0) / numbers.length;\n};\n\nexport default meanAbsoluteDeviation;"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const maxDepths = groups.map(group => {\n    let currentDepth = 0;\n    let maxDepth = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (group[i] === ')') {\n        currentDepth--;\n      }\n    }\n    return maxDepth;\n  });\n  return maxDepths;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let maxSoFar = numbers[0];\n  return numbers.map(num => {\n    maxSoFar = Math.max(maxSoFar, num);\n    return maxSoFar;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (string.length === 0) return '';\n  let palindromeSuffix = '';\n  for (let i = string.length; i > 0; i--) {\n    if (isPalindrome(string.substring(i - 1))) {\n      palindromeSuffix = string.substring(i - 1);\n      break;\n    }\n  }\n  return string + palindromeSuffix.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\nexport default greatestCommonDivisor;"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 1; i <= string.length; i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n};\n\nexport default allPrefixes;"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const uniqueChars = new Set(lowerCaseString);\n  return uniqueChars.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = notes.map(note => {\n    switch (note) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return 1;\n      default:\n        return 0;\n    }\n  });\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  if (substring.length === 0) return 0;\n  let count = 0;\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedArray = numArray.sort((a, b) => numMap[a] - numMap[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n      }\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  numbers.forEach((num) => {\n    counts[num] = (counts[num] || 0) + 1;\n  });\n  return numbers.filter((num) => counts[num] === 1);\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const a = xs[n - 1];\n  const b = xs[n - 2] / 2;\n  const c = (xs[n - 3] - xs[n - 1]) / 6;\n  const d = (xs[n - 4] - 3 * xs[n - 2] + 2 * xs[n - 1]) / 24;\n\n  const f = (x) => {\n    return a + b * x + c * Math.pow(x, 2) + d * Math.pow(x, 3);\n  }\n\n  const df = (x) => {\n    return b + 2 * c * x + 3 * d * Math.pow(x, 2);\n  }\n\n  let x = -b / (2 * c);\n  let epsilon = 1e-6;\n  while (Math.abs(f(x)) > epsilon) {\n    x = x - f(x) / df(x);\n  }\n  return x;\n}\n\nconst round = (num, decimals) => {\n  return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}"}
{"task_id": "JavaScript/33", "generation": "\n  let sorted = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((e, i) => i % 3 === 0 ? sorted.shift() : e);\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!uniqueList.includes(l[i])) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let evenIndices = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evenIndices.push(l[i]);\n  }\n  evenIndices.sort((a, b) => a - b);\n  let lPrime = [];\n  for (let i = 0, j = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      lPrime.push(evenIndices[j]);\n      j++;\n    } else {\n      lPrime.push(l[i]);\n    }\n  }\n  return lPrime;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group.slice(0, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const fib = (num) => {\n    if (num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  };\n\n  let count = 0;\n  let i = 0;\n  while (true) {\n    const fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) {\n        return fibNum;\n      }\n    }\n    i++;\n  }\n};"}
{"task_id": "JavaScript/40", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n};\nmodule.exports = triangleArea;"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1 || n === 3) return 0;\n  if (n === 2) return 2;\n  let a = 0, b = 0, c = 2, d = 0, e;\n  for (let i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n};\n\nexport default isPalindrome;"}
{"task_id": "JavaScript/49", "generation": "\n  let result = 1;\n  let base = 2;\n\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result = (result * base) % p;\n    }\n    base = (base * base) % p;\n    n = Math.floor(n / 2);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const count = (s) => {\n    const c = {};\n    for (const ch of s) {\n      c[ch] = (c[ch] || 0) + 1;\n    }\n    return c;\n  };\n  return JSON.stringify(count(s0)) === JSON.stringify(count(s1));\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      count++;\n    } else if (brackets[i] === '>') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  let inc = true;\n  let dec = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) dec = false;\n    if (l[i] > l[i + 1]) inc = false;\n  }\n  return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let set1 = new Set(l1);\n  let set2 = new Set(l2);\n  let commonElements = new Set([...set1].filter(x => set2.has(x)));\n  return [...commonElements].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  let lastFactor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      lastFactor = factor;\n      n /= factor;\n      while (n % factor === 0) {\n        n /= factor;\n      }\n    }\n    factor === 2 ? factor++ : factor += 2;\n  }\n  return lastFactor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let counter = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      counter++;\n    } else if (brackets[i] === \")\") {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  return counter === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  return xs.map((coeff, index) => coeff * index).slice(1);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n  let a = 0, b = 0, c = 1, d;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/65", "generation": "\n  let str = x.toString();\n  let len = str.length;\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  }\n  let shiftMod = shift % len;\n  return str.slice(-shiftMod) + str.slice(0, len - shiftMod);\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let apples = parseInt(s.match(/\\d+/g)[0]);\n  let oranges = parseInt(s.match(/\\d+/g)[1]);\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  return smallestEven === Infinity ? [] : [smallestEven, smallestIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n  let result = -1;\n  Object.keys(freq).forEach((num) => {\n    const numInt = parseInt(num);\n    if (numInt <= freq[num] && numInt > result) {\n      result = numInt;\n    }\n  });\n  return result;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  let sorted = [];\n  while (lst.length > 0) {\n    sorted.push(Math.min(...lst));\n    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n    if (lst.length === 0) break;\n    sorted.push(Math.max(...lst));\n    lst.splice(lst.indexOf(Math.max(...lst)), 1);\n  }\n  return sorted;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area.toFixed(2);\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const isPalindrome = (arr) => {\n    for (let i = 0; i < arr.length / 2; i++) {\n      if (arr[i] !== arr[arr.length - 1 - i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const sum = q.reduce((acc, curr) => acc + curr, 0);\n  return isPalindrome(q) && sum <= w;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const countChars = (lst) => lst.reduce((acc, curr) => acc + curr.length, 0);\n  return countChars(lst1) <= countChars(lst2) ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  };\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      count++;\n      a /= i;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n  return Math.pow(cubeRoot, 3) === Math.abs(a);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = num.split('');\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    for (let j = 0; j < primeHex.length; j++) {\n      if (hex[i] === primeHex[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  // Your code here\n}"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map(grade => {\n    if (grade === 4.0) return 'A+';\n    if (grade > 3.7) return 'A';\n    if (grade > 3.3) return 'A-';\n    if (grade > 3.0) return 'B+';\n    if (grade > 2.7) return 'B';\n    if (grade > 2.3) return 'B-';\n    if (grade > 2.0) return 'C+';\n    if (grade > 1.7) return 'C';\n    if (grade > 1.3) return 'C-';\n    if (grade > 1.0) return 'D+';\n    if (grade > 0.7) return 'D';\n    if (grade > 0.0) return 'D-';\n    return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 18 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"110\"\nconsole.log(solve(147)); // \"1100\"\n/*\n  The function solve takes a positive integer N as input.\n  It initializes a variable sum to 0.\n  It then enters a loop that continues until N is greater than 0.\n  In each iteration of the loop, it adds the remainder of N divided by 10 to sum and updates N to be the integer part of N divided by 10.\n  After the loop finishes, it returns the binary representation of sum as a string.\n*/"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  // Split the string into words\n  const words = s.split(' ');\n  // Sort the characters in each word\n  const sortedWords = words.map(word => word.split('').sort().join(''));\n  // Join the sorted words back into a string\n  return sortedWords.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return [];\n  }\n  const newArray = [...array];\n  const sum = newArray[0] + newArray[newArray.length - 1];\n  if (sum % 2 === 0) {\n    return newArray.sort((a, b) => b - a);\n  }\n  return newArray.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  const sentences = S.split(/[\\.\\?\\!]\\s*/);\n  let boredomCount = 0;\n  for (let sentence of sentences) {\n    if (sentence.startsWith(\"I\")) {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z || y === x + z || z === x + y;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const shiftVowel = (vowel) => {\n    const index = vowels.indexOf(vowel.toLowerCase());\n    const shiftedIndex = (index + 2) % vowels.length;\n    return vowels[shiftedIndex];\n  };\n\n  return message.split('').map((char) => {\n    if (char.toLowerCase() === char.toUpperCase()) {\n      return char;\n    } else if (vowels.includes(char.toLowerCase())) {\n      return shiftVowel(char);\n    } else {\n      return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }\n  }).join('');\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let maxPrime = 0;\n  for (let num of lst) {\n    if (isPrime(num) && num > maxPrime) maxPrime = num;\n  }\n\n  return maxPrime\n    .toString()\n    .split(\"\")\n    .reduce((acc, digit) => acc + parseInt(digit), 0);\n};"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const allLower = Object.keys(dict).every((key) =>\n    typeof key === \"string\" && key.toLowerCase() === key\n  );\n  const allUpper = Object.keys(dict).every((key) =>\n    typeof key === \"string\" && key.toUpperCase() === key\n  );\n  return allLower || allUpper;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let lastDigitA = Math.abs(a % 10);\n  let lastDigitB = Math.abs(b % 10);\n  return lastDigitA * lastDigitB;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if ('AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor < ceil - num ? floor : ceil;\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let stones = [];\n  let currentStones = n;\n  for (let i = 0; i < n; i++) {\n    stones.push(currentStones);\n    // If n is odd, add the next odd number, else add the next even number\n    currentStones += n % 2 === 0 ? 2 : 2;\n  }\n  return stones;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  // Split the string by commas or spaces and return the resulting array\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  // Check if x is greater than y\n  if (x > y) {\n    return -1;\n  }\n\n  // Check if y is even\n  if (y % 2 === 0) {\n    return y;\n  }\n\n  // Check if y - 1 is greater than or equal to x\n  if (y - 1 >= x) {\n    return y - 1;\n  }\n\n  // If none of the above conditions are met, return -1\n  return -1;\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst sortAndName = (arr) => {\n  const nums = arr.filter((num) => num >= 1 && num <= 9);\n  const sortedNums = nums.sort((a, b) => a - b);\n  const reversedNums = sortedNums.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversedNums.map((num) => names[num - 1]);\n  return result;\n};\n\nconst strangeSortList = (arr) => {\n  const sortedArr = byLength(arr);\n  const result = sortAndName(sortedArr);\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  const isPalindrome = (num) => {\n    const str = num.toString();\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n  };\n\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "JavaScript/108", "generation": "\n  const digitSum = (num) => {\n    return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n  };\n\n  return arr.filter(num => digitSum(num) > 0).length;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i - 1] > arr[i]) {\n      count++;\n    }\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n}"}
{"task_id": "JavaScript/110", "generation": "\n  // Check if lst1 can be made of only even numbers by exchanging elements with lst2\n  let oddCountLst1 = lst1.filter(num => num % 2 !== 0).length;\n  let evenCountLst2 = lst2.filter(num => num % 2 === 0).length;\n\n  // If there are enough even numbers in lst2 to exchange with all odd numbers in lst1\n  if (oddCountLst1 <= evenCountLst2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let max = 0;\n  test.split(' ').forEach(char => {\n    if (char) {\n      result[char] = (result[char] || 0) + 1;\n      max = Math.max(max, result[char]);\n    }\n  });\n  return Object.fromEntries(Object.entries(result).filter(([key, value]) => value === max));\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  let reversed = result.split('').reverse().join('');\n  return [result, result === reversed];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    const oddCount = [...str].filter((digit) => parseInt(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let water = row.reduce((a, b) => a + b, 0);\n    count += Math.ceil(water / capacity);\n  }\n  return count;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('').filter(char => char === '1').length;\n    const bOnes = b.toString(2).split('').filter(char => char === '1').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  //split the string into words\n  let words = s.split(\" \");\n  //filter the words to only include those with exactly n consonants\n  let filteredWords = words.filter(word => {\n    //remove any non-letter characters from the word\n    let letters = word.replace(/[^a-zA-Z]/g, \"\");\n    //count the number of consonants in the word\n    let consonants = letters.replace(/[aeiouAEIOU]/g, \"\").length;\n    //return true if the word has exactly n consonants, false otherwise\n    return consonants === n;\n  });\n  //return the filtered words\n  return filteredWords;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = \"aeiouAEIOU\";\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n      return word[i];\n    }\n  }\n  return \"\";\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let first = lst[0];\n  let second = lst[1];\n  let count = 0;\n  for (let i = 0; i < first.length; i++) {\n    if (first[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      break;\n    }\n  }\n  if (count >= 0) {\n    for (let i = 0; i < second.length; i++) {\n      if (second[i] === '(') {\n        count++;\n      } else {\n        count--;\n      }\n      if (count < 0) {\n        return 'No';\n      }\n    }\n    return count === 0 ? 'Yes' : 'No';\n  }\n  count = 0;\n  for (let i = 0; i < second.length; i++) {\n    if (second[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      break;\n    }\n  }\n  if (count >= 0) {\n    for (let i = 0; i < first.length; i++) {\n      if (first[i] === '(') {\n        count++;\n      } else {\n        count--;\n      }\n      if (count < 0) {\n        return 'No';\n      }\n    }\n    return count === 0 ? 'Yes' : 'No';\n  }\n  return 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // return the first k elements\n  return arr.slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    sequence.push(n);\n  }\n  let oddNumbers = sequence.filter((num) => num % 2 !== 0);\n  return oddNumbers.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const regex = /^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])-([0-9]{4})$/;\n  if (regex.test(date)) {\n    const [month, day, year] = date.split('-');\n    const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > monthDays[month - 1]) return false;\n    if (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)) {\n      monthDays[1] = 29;\n    }\n    if (day < 1 || day > monthDays[month - 1]) return false;\n    return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    return [...txt].filter((char) => char === char.toLowerCase() && (char.charCodeAt(0) - 97) % 2 === 1).length;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  let length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) return 0;\n    product *= Math.sign(arr[i]);\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const N = grid.length;\n  const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const visited = new Set();\n  const result = [];\n\n  const dfs = (x, y, path) => {\n    if (path.length === k) {\n      if (!result.length || path < result) {\n        result.length = 0;\n        result.push(...path);\n      }\n      return;\n    }\n\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited.has(`${nx},${ny}`)) {\n        visited.add(`${nx},${ny}`);\n        dfs(nx, ny, path.concat(grid[nx][ny]));\n        visited.delete(`${nx},${ny}`);\n      }\n    }\n  };\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      visited.add(`${i},${j}`);\n      dfs(i, j, [grid[i][j]]);\n      visited.delete(`${i},${j}`);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [3, 2];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') counter++;\n    if (string[i] === ']') counter--;\n    if (counter < 0) return false;\n  }\n  return counter !== 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  // Check if the string is empty\n  if (txt.length === 0) {\n    return false;\n  }\n  // Get the last character of the string\n  const lastChar = txt[txt.length - 1];\n  // Check if the last character is an alphabetical character\n  // and is not a part of a word\n  if (lastChar.match(/[a-zA-Z]/i) && (txt.length === 1 || txt[txt.length - 2] === ' ')) {\n    return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/135", "generation": "\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (let num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    } else if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "JavaScript/137", "generation": "\n  const numA = parseFloat(a.toString().replace(\",\", \".\"));\n  const numB = parseFloat(b.toString().replace(\",\", \".\"));\n  if (numA === numB) return null;\n  return numA > numB ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  // Check if n is less than the smallest possible sum of 4 positive even numbers (8)\n  if (n < 8) {\n    return false;\n  }\n  // Check if n is even\n  if (n % 2 !== 0) {\n    return false;\n  }\n  // If n is greater than or equal to 8 and even, it can be written as the sum of 4 positive even numbers\n  return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]{3}$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        } else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/143", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  return sentence\n    .split(\" \")\n    .filter((word) => isPrime(word.length))\n    .join(\" \");\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const xNumerator = parseInt(x.split('/')[0]);\n  const xDenominator = parseInt(x.split('/')[1]);\n  const nNumerator = parseInt(n.split('/')[0]);\n  const nDenominator = parseInt(n.split('/')[1]);\n\n  const resultNumerator = xNumerator * nNumerator;\n  const resultDenominator = xDenominator * nDenominator;\n\n  return resultNumerator % resultDenominator === 0;\n};\n\nexport default simplify;"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumDigits = (num) => {\n      return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    };\n\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  return nums.filter(num => {\n    if (num <= 10) return false;\n    const numStr = Math.abs(num).toString();\n    const firstDigit = parseInt(numStr[0], 10);\n    const lastDigit = parseInt(numStr[numStr.length - 1], 10);\n    return firstDigit % 2 !== 0 && lastDigit % 2 !== 0;\n  }).length;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  if (index1 > index2) [index1, index2] = [index2, index1];\n  return planets.slice(index1 + 1, index2);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  // Filter out strings with odd lengths\n  const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  \n  // Sort the filtered list by length, then alphabetically\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b); // Alphabetical sorting\n    }\n    return a.length - b.length; // Sort by length\n  });\n  \n  return evenLengthStrings;\n}"}
{"task_id": "JavaScript/150", "generation": "\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime ? x : y;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  return lst.reduce((sum, num) => {\n    if (num > 0 && num % 2 !== 0) {\n      return sum + num * num;\n    }\n    return sum;\n  }, 0);\n};"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = '';\n  let maxStrength = -Infinity;\n  for (let extension of extensions) {\n    let upperCaseCount = (extension.match(/[A-Z]/g) || []).length;\n    let lowerCaseCount = (extension.match(/[a-z]/g) || []).length;\n    let strength = upperCaseCount - lowerCaseCount;\n    if (strength > maxStrength) {\n      strongest = extension;\n      maxStrength = strength;\n    }\n  }\n  return `${class_name}.${strongest}`;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  let len = b.length;\n  let temp = b + b;\n  for (let i = 0; i < len; i++) {\n    let sub = temp.substring(i, i + len);\n    if (a.includes(sub)) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let strNum = Math.abs(num).toString();\n  for (let i = 0; i < strNum.length; i++) {\n    if (strNum[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = [\n    { value: 1000, numeral: 'm' },\n    { value: 900, numeral: 'cm' },\n    { value: 500, numeral: 'd' },\n    { value: 400, numeral: 'cd' },\n    { value: 100, numeral: 'c' },\n    { value: 90, numeral: 'xc' },\n    { value: 50, numeral: 'l' },\n    { value: 40, numeral: 'xl' },\n    { value: 10, numeral: 'x' },\n    { value: 9, numeral: 'ix' },\n    { value: 5, numeral: 'v' },\n    { value: 4, numeral: 'iv' },\n    { value: 1, numeral: 'i' },\n  ];\n\n  let roman = '';\n\n  for (let i = 0; i < romanNumerals.length; i++) {\n    while (number >= romanNumerals[i].value) {\n      roman += romanNumerals[i].numeral;\n      number -= romanNumerals[i].value;\n    }\n  }\n\n  return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  // Sort the sides in ascending order\n  const sides = [a, b, c].sort((x, y) => x - y);\n  // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let totalEaten = number + Math.min(need, remaining);\n  let left = Math.max(remaining - need, 0);\n  return [totalEaten, left];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let hasLetter = false;\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() != s[i].toUpperCase()) {\n      hasLetter = true;\n      result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : result.split(\"\").reverse().join(\"\");\n}"}
{"task_id": "JavaScript/162", "generation": "\n  // Your code here\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};"}
