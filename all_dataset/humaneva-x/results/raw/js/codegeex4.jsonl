{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let paren_groups = [];\n  let paren_stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push('(');\n      current_group += '(';\n    } else if (paren_string[i] === ')') {\n      paren_stack.pop();\n      current_group += ')';\n      if (paren_stack.length === 0) {\n        paren_groups.push(current_group);\n        current_group = '';\n      }\n    }\n  }\n  return paren_groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = average(numbers);\n  return average(numbers.map((num) => Math.abs(num - mean)));\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const paren_groups = paren_string.split(' ');\n  const max_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let level = 0;\n    let max_level = 0;\n    for (let j = 0; j < paren_groups[i].length; j++) {\n      if (paren_groups[i][j] === '(') {\n        level += 1;\n        if (level > max_level) {\n          max_level = level;\n        }\n      } else if (paren_groups[i][j] === ')') {\n        level -= 1;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter((string) => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((num) => {\n    if (num > max) {\n      max = num;\n    }\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let postfix = string;\n  let prefix = '';\n  while (!isPalindrome(postfix)) {\n    prefix = postfix[0] + prefix;\n    postfix = postfix.slice(1);\n  }\n  return string + prefix;\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const distinctCharacters = new Set(lowerCaseString);\n  return distinctCharacters.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const music_notes = music_string.split(' ');\n  const music_notes_duration = music_notes.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_notes_duration;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberals = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedNumbers = numbers.split(' ').sort((a, b) => numberals[a] - numberals[b]);\n  return sortedNumbers.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => {\n    return Number.isInteger(value);\n  });\n};"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map((char) => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  }).join('');\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((num) => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const a = xs[0];\n  const b = xs[n - 1];\n  const c = xs[n / 2];\n  const d = xs[n / 2 - 1];\n  const x = (a * d - b * c) / (b * d - a * c);\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero2 find x such that poly(x) = 0.\n  findZero2 returns only only zero point, even if there are many.\n  Moreover, findZero2 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  const a = xs[0];\n  const b = xs[n - 1];\n  const c = xs[n / 2];\n  const d = xs[n / 2 - 1];\n  const x = (a * d - b * c) / (b * d - a * c);\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero3 find x such that poly(x) = 0.\n  findZero3 returns only only zero point, even if there are many.\n  Moreover, findZero3 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero3([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs)"}
{"task_id": "JavaScript/33", "generation": "\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  l1.sort((a, b) => a - b);\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l1.shift());\n    } else {\n      l3.push(l2.shift());\n    }\n  }\n  return l3;\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  let even = l.filter((_, i) => i % 2 === 0);\n  even.sort((a, b) => a - b);\n  return l.map((x, i) => (i % 2 === 0 ? even[i / 2] : x));\n}"}
{"task_id": "JavaScript/38", "generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let prime = [2];\n  let i = 2;\n  while (prime.length < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    if (isPrime(fib[i])) {\n      prime.push(fib[i]);\n    }\n    i++;\n  }\n  return prime[n - 1];\n}"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n};"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  if (n === 0) return 1;\n  if (n === 1) return p;\n  let res = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res = (res * p) % n;\n    }\n    p = (p * p) % n;\n    n = Math.floor(n / 2);\n  }\n  return res;\n}"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".charCodeAt(0)) % 26) + \"A\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"A\".charCodeAt(0)) % 26) + \"A\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"0\".charCodeAt(0)) % 10) + \"0\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"0\".charCodeAt(0)) % 10) + \"0\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" \".charCodeAt(0)) % 2) + \" \".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \" \".charCodeAt(0)) % 2) + \" \".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = '';\n  for (let i = 0; i < text.length; i += 1) {\n    if (!vowels.includes(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const s0Map = {};\n  const s1Map = {};\n  for (let i = 0; i < s0.length; i += 1) {\n    if (s0Map[s0[i]] === undefined) s0Map[s0[i]] = 0;\n    if (s1Map[s1[i]] === undefined) s1Map[s1[i]] = 0;\n    s0Map[s0[i]] += 1;\n    s1Map[s1[i]] += 1;\n  }\n  return Object.keys(s0Map).every((key) => s0Map[key] === s1Map[key]);\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "JavaScript/56", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  const increasing = l[0] < l[1];\n  for (let i = 1; i < l.length; i++) {\n    if (increasing && l[i] < l[i - 1]) return false;\n    if (!increasing && l[i] > l[i - 1]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.includes(l1[i]) && !common.includes(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  return common.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let largest = 2;\n  while (n > largest) {\n    if (n % largest === 0) {\n      n = n / largest;\n    } else {\n      largest++;\n    }\n  }\n  return largest;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  return xs.slice(1).map((x, i) => x * (i + 1));\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  if (s[s.length - 1].toLowerCase() === 'y') {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return digits.reverse().join('');\n  }\n  const shiftedDigits = digits.slice(shift).concat(digits.slice(0, shift));\n  return shiftedDigits.join('');\n}"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.split(' ').map((el) => Number(el));\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestEvenIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEven === Infinity) return [];\n  return [smallestEven, smallestEvenIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[lst[i]]) {\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n  const sorted = Object.keys(freq).sort((a, b) => b - a);\n  for (let i = 0; i < sorted.length; i++) {\n    if (freq[sorted[i]] >= sorted[i]) {\n      return sorted[i];\n    }\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minCount = 0;\n  let maxCount = 0;\n  let minFlag = true;\n  let maxFlag = true;\n  let i = 0;\n  while (i < lst.length) {\n    if (minFlag) {\n      if (lst[i] < min) {\n        min = lst[i];\n        minIndex = i;\n        minCount = 1;\n      } else if (lst[i] === min) {\n        minCount++;\n      }\n    }\n    if (maxFlag) {\n      if (lst[i] > max) {\n        max = lst[i];\n        maxIndex = i;\n        maxCount = 1;\n      } else if (lst[i] === max) {\n        maxCount++;\n      }\n    }\n    i++;\n  }\n  if (minCount === lst.length) {\n    return lst;\n  }\n  if (maxCount === lst.length) {\n    return lst.reverse();\n  }\n  result.push(min);\n  lst.splice(minIndex, 1);\n  minFlag = false;\n  i = 0;\n  while (i < lst.length) {\n    if (maxFlag) {\n      if (lst[i] > max) {\n        max = lst[i];\n        maxIndex = i;\n        maxCount = 1;\n      } else if (lst[i] === max) {\n        maxCount++;\n      }\n    }\n    i++;\n  }\n  result.push(max);\n  lst.splice(maxIndex, 1);\n  maxFlag = false;\n  while (lst.length > 0) {\n    i = 0;\n    while (i < lst.length) {\n      if (minFlag) {\n        if (lst[i] < min) {\n          min = lst[i];\n          minIndex = i;\n          minCount = 1;\n        } else if (lst[i] === min) {\n          minCount++;\n        }\n      }\n      if (maxFlag) {\n        if (lst[i] > max) {\n          max = lst[i];\n          maxIndex = i;\n          maxCount = 1;\n        } else if (lst[i] === max) {\n          maxCount++;\n        }\n      }\n      i++;\n    }\n    if (minCount === lst.length) {\n      result.push(min);\n      return result;\n    }\n"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c);\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  if (q.length === 0) {\n    return false;\n  }\n  if (q[0] === q[q.length - 1]) {\n    return willItFly(q.slice(1, q.length - 1), w);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  const totalChars = (lst) => lst.reduce((acc, curr) => acc + curr.length, 0);\n  const total1 = totalChars(lst1);\n  const total2 = totalChars(lst2);\n  if (total1 < total2) return lst1;\n  if (total1 > total2) return lst2;\n  return lst1;\n}"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num > 1;\n  };\n\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0 && isPrime(i)) {\n      factors.push(i);\n      if (isPrime(a / i)) {\n        factors.push(a / i);\n      }\n    }\n  }\n\n  return factors.length === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  let result = 1;\n  while (result < x) {\n    result *= n;\n  }\n  return result === x;\n}"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) {\n    a = -a;\n  }\n  let i = 0;\n  while (i * i * i < a) {\n    i++;\n  }\n  return i * i * i === a;\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexDigits = num.split(\"\");\n  const primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n  let count = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (primes.includes(hexDigits[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] > 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] > 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] > 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] > 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] > 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] > 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] > 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] > 1.3) {\n      letterGrades.push('C-');\n    } else if (grades[i] > 1.0) {\n      letterGrades.push('D+');\n    } else if (grades[i] > 0.7) {\n      letterGrades.push('D');\n    } else if (grades[i] > 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n  return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 2;\n  if (n === 2) return 4;\n  return 18 * Math.pow(10, n - 3);\n}"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.map((word) => {\n    return word.split('').sort().join('');\n  });\n  return sortedWords.join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n  const sum = array[0] + array[array.length - 1];\n  const sortedArray = [...array].sort((a, b) => (sum % 2 === 0 ? b - a : a - b));\n  return sortedArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index === -1) {\n      encrypted += s[i];\n    } else {\n      let newIndex = (index + 4) % 26;\n      encrypted += alphabet[newIndex];\n    }\n  }\n  return encrypted;\n}"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  if (smallest > secondSmallest) {\n    [smallest, secondSmallest] = [secondSmallest, smallest];\n  }\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      [smallest, secondSmallest] = [lst[i], smallest];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}"}
{"task_id": "JavaScript/91", "generation": "\n  const regex = /I/g;\n  const sentences = S.split(/[.?!]/);\n  let count = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].match(regex)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      encodedMessage += String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n  }\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  if (max === 0) {\n    return 0;\n  }\n  if (max === 1) {\n    return 1;\n  }\n  if (max === 2) {\n    return 2;\n  }\n  if (max === 3) {\n    return 3;\n  }\n  if (max === 5) {\n    return 5;\n  }\n  if (max === 7) {\n    return 7;\n  }\n  if (max % 2 === 0) {\n    return 0;\n  }\n  if (max % 3 === 0) {\n    return 0;\n  }\n  if (max % 5 === 0) {\n    return 0;\n  }\n  if (max % 7 === 0) {\n    return 0;\n  }\n  let sum = 0;\n  while (max > 0) {\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  const firstKey = keys[0];\n  const firstKeyIsLower = firstKey === firstKey.toLowerCase();\n  const firstKeyIsUpper = firstKey === firstKey.toUpperCase();\n  if (firstKeyIsLower) {\n    return keys.every(key => key === key.toLowerCase());\n  } else if (firstKeyIsUpper) {\n    return keys.every(key => key === key.toUpperCase());\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let unitA = a % 10;\n  let unitB = b % 10;\n  return unitA * unitB;\n}"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === ceil - num) {\n    return num > 0 ? ceil : floor;\n  }\n  return num > 0 ? ceil : floor;\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [n];\n  let next = n;\n  for (let i = 1; i < n; i++) {\n    next += n % 2 === 0 ? 2 : 1;\n    pile.push(next);\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n}"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let hasEvenDigit = false;\n    let num = x[i];\n    while (num > 0) {\n      let digit = num % 10;\n      if (digit % 2 === 0) {\n        hasEvenDigit = true;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if (!hasEvenDigit) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst sortNums = (arr) => {\n  return arr\n    .filter((num) => num >= 1 && num <= 9)\n    .sort((a, b) => a - b)\n    .reverse();\n};\n\nconst numToWord = (num) => {\n  const words = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  return words[num - 1];\n};\n\nconst sortNumsToWords = (arr) => {\n  return byLength(arr)\n    .map((num) => numToWord(num))\n    .filter((word) => word !== undefined);\n}"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num !== 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  let minIndex = arr.indexOf(sortedArr[0]);\n  let shiftedArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n  return JSON.stringify(shiftedArr) === JSON.stringify(sortedArr);\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let even = lst1.filter((num) => num % 2 === 0);\n  let odd = lst1.filter((num) => num % 2 !== 0);\n  let even2 = lst2.filter((num) => num % 2 === 0);\n  let odd2 = lst2.filter((num) => num % 2 !== 0);\n  if (odd.length === 0) {\n    return \"YES\";\n  } else if (odd.length > even2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  let arr = test.split(' ');\n  let obj = {};\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]]) {\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  for (let key in obj) {\n    if (obj[key] > max) {\n      max = obj[key];\n    }\n  }\n  let result = {};\n  for (let key in obj) {\n    if (obj[key] === max) {\n      result[key] = max;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = s.split('').filter(x => !c.includes(x)).join('')\n  return [result, result === result.split('').reverse().join('')]\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil(grid[i][j] / capacity);\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('1').length - 1;\n    const bOnes = b.toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let consonants = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (!vowels.includes(words[i][j].toLowerCase())) {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 1; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1])) {\n      return word[i];\n    }\n  }\n  return '';\n}"}
{"task_id": "JavaScript/119", "generation": "\n  const str = lst.join('');\n  const open = str.split('').filter((x) => x === '(').length;\n  const close = str.split('').filter((x) => x === ')').length;\n  if (open === close) {\n    return 'Yes';\n  }\n  return 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n  if (k === 0) return [];\n  if (k >= arr.length) return arr.sort((a, b) => b - a);\n  let left = 0;\n  let right = arr.length - 1;\n  let pivot = partition(arr, left, right);\n  while (pivot !== k - 1) {\n    if (pivot > k - 1) {\n      right = pivot - 1;\n      pivot = partition(arr, left, right);\n    } else {\n      left = pivot + 1;\n      pivot = partition(arr, left, right);\n    }\n  }\n  return arr.slice(0, k).sort((a, b) => b - a);\n};\n\nconst partition = (arr, left, right) => {\n  let pivot = arr[right];\n  let i = left - 1;\n  for (let j = left; j < right; j++) {\n    if (arr[j] >= pivot) {\n      i++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  [arr[i + 1], arr[right]] = [arr[right], arr[i + 1]];\n  return i + 1;\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i].toString().length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    arr.push(n);\n  }\n  return arr.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const dateArr = date.split('-');\n  const month = parseInt(dateArr[0]);\n  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n  const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > monthDays[month - 1]) return false;\n  if (month === 2 && day > 29) return false;\n  if (year < 1) return false;\n  return true;\n}"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter((char) => char === char.toLowerCase() && char.charCodeAt(0) % 2 !== 0).length;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = true;\n  let duplicates = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i + 1]) {\n      duplicates++;\n    }\n    if (duplicates > 1) {\n      sorted = false;\n    }\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n    }\n  }\n  return sorted;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start;\n  if (length < 0) return \"NO\";\n  if (length === 1) return \"NO\";\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return \"NO\";\n  }\n  return \"YES\";\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    } else if (arr[i] === 0) {\n      product = 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  const minHeap = new MinPriorityQueue({\n    priority: (node) => node.value,\n  });\n  minHeap.enqueue({ value: grid[0][0], path: [grid[0][0]], steps: 1 });\n  let result = [];\n\n  while (!minHeap.isEmpty()) {\n    const { value, path, steps } = minHeap.dequeue().element;\n    if (steps === k) {\n      result = path;\n      break;\n    }\n    const x = path[path.length - 1][0];\n    const y = path[path.length - 1][1];\n    visited[x][y] = true;\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        minHeap.enqueue({\n          value: grid[nx][ny],\n          path: [...path, [nx, ny]],\n          steps: steps + 1,\n        });\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [1, 3];\n  if (n === 0) return [1];\n  if (n === 1) return [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let isOdd = false;\n  let arr = Array.from(String(n), Number);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      product *= arr[i];\n      isOdd = true;\n    }\n  }\n  return isOdd ? product : 0;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length > 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) return false;\n  const lastChar = txt[txt.length - 1];\n  const lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  const lastCharIsNotPartOfWord = txt[txt.length - 2] === \" \";\n  return lastCharIsALetter && lastCharIsNotPartOfWord;\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      maxIndex = i - 1;\n    }\n  }\n  return maxIndex;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return (largestNegative, smallestPositive);\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) return null;\n  if (typeof a === \"string\") a = a.replace(\",\", \".\");\n  if (typeof b === \"string\") b = b.replace(\",\", \".\");\n  return Number(a) > Number(b) ? a : b;\n}"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 8) return false;\n  if (n % 2 === 0) return true;\n  return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s+/g, ' ');\n  newText = newText.replace(/\\s{2,}/g, '-');\n  newText = newText.replace(/^\\s/, '_');\n  newText = newText.replace(/\\s$/, '_');\n  return newText;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  let count = 0;\n  let dot = 0;\n  let valid = true;\n  let valid2 = true;\n  let valid3 = true;\n  let valid4 = true;\n  let valid5 = true;\n  let valid6 = true;\n  let valid7 = true;\n  let valid8 = true;\n  let valid9 = true;\n  let valid10 = true;\n  let valid11 = true;\n  let valid12 = true;\n  let valid13 = true;\n  let valid14 = true;\n  let valid15 = true;\n  let valid16 = true;\n  let valid17 = true;\n  let valid18 = true;\n  let valid19 = true;\n  let valid20 = true;\n  let valid21 = true;\n  let valid22 = true;\n  let valid23 = true;\n  let valid24 = true;\n  let valid25 = true;\n  let valid26 = true;\n  let valid27 = true;\n  let valid28 = true;\n  let valid29 = true;\n  let valid30 = true;\n  let valid31 = true;\n  let valid32 = true;\n  let valid33 = true;\n  let valid34 = true;\n  let valid35 = true;\n  let valid36 = true;\n  let valid37 = true;\n  let valid38 = true;\n  let valid39 = true;\n  let valid40 = true;\n  let valid41 = true;\n  let valid42 = true;\n  let valid43 = true;\n  let valid44 = true;\n  let valid45 = true;\n  let valid46 = true;\n  let valid47 = true;\n  let valid48 = true;\n  let valid49 = true;\n  let valid50 = true;\n  let valid51 = true;\n  let valid52 = true;\n  let valid53 = true;\n  let valid54 = true;\n  let valid55 = true;\n  let valid56 = true;\n  let valid57 = true;\n  let valid58 = true;\n  let valid59 = true;\n  let valid60 = true;\n  let valid61 = true;\n  let valid62 = true;\n  let valid63 = true;\n  let valid64 = true;\n  let valid65 = true;\n  let valid66 = true;\n  let valid67 = true;\n  let valid68 = true;\n  let valid69 = true;\n  let valid70 = true;\n  let valid71 = true;\n  let"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => isPrime(word.length));\n  return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n  const numerator = xNum * nDen;\n  const denominator = xDen * nNum;\n  return numerator % denominator === 0;\n}"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0) {\n      let firstDigit = Math.abs(nums[i]) % 10;\n      let lastDigit = Math.floor(Math.abs(nums[i]) / 10) % 10;\n      if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n  return planets.slice(start, end);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (n < 2) return y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return y;\n  }\n  return x;\n}"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]))\n  }\n  return result\n}\n\n//best\nconst compare = (game, guess) => game.map((x, i) => Math.abs(x - guess[i]))"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = extensions[0];\n  let strength = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let cap = 0;\n    let sm = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    if (strength < cap - sm) {\n      strength = cap - sm;\n      strongest = extensions[i];\n    }\n  }\n  return class_name + '.' + strongest;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  let bLen = b.length;\n  let aLen = a.length;\n  let bRotations = [];\n  for (let i = 0; i < bLen; i++) {\n    bRotations.push(b.slice(i) + b.slice(0, i));\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (a.slice(i, i + bLen) === b) {\n      return true;\n    }\n    for (let j = 0; j < bRotations.length; j++) {\n      if (a.slice(i, i + bLen) === bRotations[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n  let result = '';\n  for (let i = 1000; i >= 1; i /= 10) {\n    const digit = Math.floor(number / i);\n    if (digit === 0) continue;\n    if (digit === 4 || digit === 9) {\n      result += roman[i * digit];\n    } else {\n      result += roman[i].repeat(digit);\n    }\n    number %= i;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/157", "generation": "\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUnique) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === maxUnique) {\n      maxWord = word < maxWord ? word : maxWord;\n    }\n  }\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let eaten = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let str = '';\n  let isLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      isLetter = true;\n      if (s[i] === s[i].toLowerCase()) {\n        str += s[i].toUpperCase();\n      } else {\n        str += s[i].toLowerCase();\n      }\n    } else {\n      str += s[i];\n    }\n  }\n  if (!isLetter) {\n    return str.split('').reverse().join('');\n  }\n  return str;\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') return null;\n  return md5(text);\n}"}
{"task_id": "JavaScript/163", "generation": "\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    for (let j = 0; j < num.length; j++) {\n      if (num[j] % 2 === 0) {\n        arr.push(Number(num[j]));\n      }\n    }\n  }\n  return arr;\n}"}
