{"task_id": "JavaScript/0", "generation": "\n  numbers.sort((a, b) => a - b);\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (numbers[i + 1] - numbers[i] < threshold) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let result = [];\n  let group = '';\n  let count = 0;\n\n  for (let char of paren_string) {\n    if (char === ' ') continue;\n\n    group += char;\n\n    if (char === '(') count++;\n    if (char === ')') count--;\n\n    if (count === 0) {\n      result.push(group);\n      group = '';\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let op of operations) {\n    balance += op;\n    if (balance < 0) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxNesting = [];\n  let groups = paren_string.split(' ');\n\n  for (let group of groups) {\n    let count = 0;\n    let max = 0;\n    for (let char of group) {\n      if (char === '(') {\n        count++;\n        if (count > max) {\n          max = count;\n        }\n      } else if (char === ')') {\n        count--;\n      }\n    }\n    maxNesting.push(max);\n  }\n\n  return maxNesting;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((number) => {\n    max = Math.max(max, number);\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (isPalindrome(string)) {\n    return string;\n  }\n  for (let i = string.length; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i))) {\n      return string + string.slice(0, string.length - i).split('').reverse().join('');\n    }\n  }\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) return null;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let sequence = [];\n  for (let i = 0; i <= n; i++) {\n    sequence.push(i.toString());\n  }\n  return sequence.join(' ');\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const distinctCharacters = new Set(string.toLowerCase());\n  return Array.from(distinctCharacters).length;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  let notes = music_string.split(' ');\n  let beats = [];\n\n  notes.forEach(note => {\n    if (note === 'o') beats.push(4);\n    if (note === 'o|') beats.push(2);\n    if (note === '.|') beats.push(1);\n  });\n\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(\" \")\n    .sort((a, b) => nums[a] - nums[b])\n    .join(\" \");\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair;\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closestPair.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(n => (n - min) / (max - min));\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; string[i] !== undefined; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (counts[numbers[i]]) {\n      counts[numbers[i]]++;\n    } else {\n      counts[numbers[i]] = 1;\n      result.push(numbers[i]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let flipped = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((n) => n > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  if (xs.length % 2 === 1) {\n    throw new Error('xs must have even number of coefficients');\n  }\n  if (xs[xs.length - 1] === 0) {\n    throw new Error('largest coefficient must not be zero');\n  }\n  let a = xs[0];\n  let b = xs[1];\n  let c = xs[2];\n  let d = xs[3];\n  let x = 0;\n  for (let i = 0; i < 10000; i++) {\n    let fx = poly(xs, x);\n    if (Math.abs(fx) < 1e-6) {\n      return x;\n    }\n    let fpx = poly(xs.slice(1), x);\n    if (Math.abs(fpx) < 1e-6) {\n      throw new Error('f\\'(x) is zero');\n    }\n    x = x - fx / fpx;\n  }\n  throw new Error('failed to converge');\n}"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((el, i) => (i % 3 === 0 ? divisibleByThree.shift() : el));\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 11; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().match(/7/g) || []).length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, i) => i % 2 === 0);\n  evenIndices.sort((a, b) => a - b);\n  return l.map((_, i) => (i % 2 === 0 ? evenIndices.shift() : l[i]));\n};"}
{"task_id": "JavaScript/38", "generation": "\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[group.length - 1] + group.slice(0, group.length - 1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const fib = (n) => {\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n      [a, b] = [b, a + b];\n    }\n    return b;\n  };\n\n  let count = 0, i = 1;\n  while (count < n) {\n    if (isPrime(fib(i))) count++;\n    i++;\n  }\n  return fib(i - 1);\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (i > 0 && l[i] === l[i - 1]) continue;\n    let j = i + 1;\n    let k = l.length - 1;\n    while (j < k) {\n      const sum = l[i] + l[j] + l[k];\n      if (sum < 0) {\n        j++;\n      } else if (sum > 0) {\n        k--;\n      } else {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  return x.toString(base);\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    let temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let median;\n  if (l.length % 2 === 0) {\n    median = (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  } else {\n    median = l[(l.length - 1) / 2];\n  }\n  return median;\n};"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let res = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res = (res * 2) % p;\n    }\n    n = Math.floor(n / 2);\n  }\n  return res;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const count = (s) => s.split('').reduce((acc, char) => {\n    acc[char] = (acc[char] || 0) + 1;\n    return acc;\n  }, {});\n  const count0 = count(s0);\n  const count1 = count(s1);\n  return Object.keys(count0).every(key => count0[key] === count1[key])\n    && Object.keys(count1).every(key => count0[key] === count1[key]);\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) return 1;\n  let fibNums = [1, 1];\n  for (let i = 2; i < n; i++) {\n    fibNums.push(fibNums[i - 1] + fibNums[i - 2]);\n  }\n  return fibNums[n - 1];\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) {\n    return true;\n  }\n  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let commonElements = l1.filter(value => l2.includes(value));\n  return [...new Set(commonElements)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  while (factor <= n) {\n    if (n % factor === 0) {\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  const stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  // remove the first element (constant term)\n  return xs.slice(1).map((x, i) => (i + 1) * x);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n\n  let fibfibNums = [0, 0, 1];\n\n  for (let i = 3; i <= n; i++) {\n    fibfibNums[i] = fibfibNums[i - 1] + fibfibNums[i - 2] + fibfibNums[i - 3];\n  }\n\n  return fibfibNums[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('');\n  if (shift > digits.length) {\n    return digits.reverse().join('');\n  }\n  return digits.slice(shift).concat(digits.slice(0, shift)).join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n\n  let smallestEvenValue = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEvenValue && arr[i] % 2 === 0) {\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  return smallestEvenIndex === -1 ? [] : [smallestEvenValue, smallestEvenIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const count = {};\n  for (let num of lst) {\n    count[num] = (count[num] || 0) + 1;\n  }\n  for (let num of lst) {\n    if (count[num] >= num) return num;\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  let sorted = lst.sort((a, b) => a - b);\n  let result = [];\n  while (sorted.length) {\n    result.push(sorted.shift());\n    if (sorted.length) {\n      result.push(sorted.pop());\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const isBalanced = q.join('') === q.reverse().join('');\n  return sum <= w && isBalanced;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return sum1 < sum2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    while (a % i === 0) {\n      a /= i;\n      count++;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) {\n    return x > 0;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n    if (power === x) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let x = Math.round(Math.pow(a, (1 / 3)));\n  return x * x * x === a || (x + 1) * (x + 1) * (x + 1) === a || (x - 1) * (x - 1) * (x - 1) === a;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  const hexPrime = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hexPrime.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length; i += 3) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n\n  return grades.map((grade) => {\n    for (const key in letterGrades) {\n      if (grade >= parseFloat(key)) {\n        return letterGrades[key];\n      }\n    }\n    return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return false;\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 2;\n  return 2 * startsOneEnds(n - 1);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  return lst.reduce((acc, cur, idx) => {\n    if (idx % 2 !== 0 && cur % 2 === 0) {\n      return acc + cur;\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s\n    .split(' ')\n    .map((word) =>\n      word\n        .split('')\n        .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n        .join('')\n    )\n    .join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let coordinates = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coordinates.push([i, j]);\n      }\n    }\n  }\n  return coordinates.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  }).map(coord => ({x: coord[0], y: coord[1]}));\n}"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return array;\n  const sortedArray = [...array];\n  const sum = array[0] + array[array.length - 1];\n  return sum % 2 === 0\n    ? sortedArray.sort((a, b) => b - a)\n    : sortedArray.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s[i].charCodeAt();\n    if ((charCode >= 65 && charCode <= 87) || (charCode >= 97 && charCode <= 119)) {\n      result += String.fromCharCode(charCode + 2 * 2);\n    } else if (charCode > 87 && charCode < 97) {\n      result += String.fromCharCode(charCode - 24);\n    } else if (charCode > 119) {\n      result += String.fromCharCode(charCode - 24);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  let min = Infinity;\n  let secondMin = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      secondMin = min;\n      min = lst[i];\n    } else if (lst[i] > min && lst[i] < secondMin) {\n      secondMin = lst[i];\n    }\n  }\n  return secondMin === Infinity ? null : secondMin;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let sentences = S.split(/[.?!]/);\n  let count = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      encodedMessage += String.fromCharCode(\n        message[i].toLowerCase() === message[i] ? \n        message[i].charCodeAt() + 2 : \n        message[i].charCodeAt() + 2\n      ).toUpperCase();\n    } else {\n      encodedMessage += message[i] === message[i].toUpperCase() ? \n      message[i].toLowerCase() : \n      message[i].toUpperCase();\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n  }\n\n  let maxPrime = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      maxPrime = Math.max(maxPrime, lst[i]);\n    }\n  }\n  return sumDigits(maxPrime);\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (key !== key.toLowerCase()) {\n      lowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upperCase = false;\n    }\n    if (!lowerCase && !upperCase) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  let primes = [];\n  for(let i = 2; i < n; i++)\n    if(isPrime(i)) primes.push(i);\n  return primes;\n}"}
{"task_id": "JavaScript/97", "generation": "\n  let aUnit = Math.abs(a) % 10;\n  let bUnit = Math.abs(b) % 10;\n  return aUnit * bUnit;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if ('AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return num < 0 ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      result.push(n + 2 * i);\n    } else {\n      result.push(n + 2 * i);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.replace(/[,]/g, '').split(/\\s/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  } else {\n    let avg = Math.round((n + m) / 2);\n    return (avg >>> 0).toString(2);\n  }\n};"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (!hasEvenDigit(x[i])) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\nconst hasEvenDigit = (num) => {\n  let strNum = num.toString();\n  for (let i = 0; i < strNum.length; i++) {\n    if (parseInt(strNum[i]) % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst replaceNumbers = (arr) => {\n  const numbers = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  return arr.map((num) => numbers[num]);\n};\n\nconst sortReverseReplace = (arr) => {\n  if (arr.length === 0) return [];\n\n  const filteredArr = arr.filter((num) => num >= 1 && num <= 9);\n  const sortedArr = byLength(filteredArr);\n  const reversedArr = sortedArr.reverse();\n\n  return replaceNumbers(reversedArr);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return (evenCount, oddCount);\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) count++;\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let oddLst1 = lst1.filter(num => num % 2 !== 0);\n  let evenLst2 = lst2.filter(num => num % 2 === 0);\n  return oddLst1.length <= evenLst2.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let count = {};\n  let max = 0;\n  let result = {};\n\n  test.split(' ').forEach((c) => {\n    count[c] = (count[c] || 0) + 1;\n    if (count[c] > max) {\n      max = count[c];\n    }\n  });\n\n  for (let key in count) {\n    if (count[key] === max) {\n      result[key] = max;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let str = [...s];\n  let chars = [...c];\n  let result = str.filter(x => !chars.includes(x)).join('');\n  let isPalindrome = result === [...result].reverse().join('');\n  return [result, isPalindrome];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let buckets = 0;\n  let totalWells = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets++;\n        totalWells++;\n      }\n    }\n  }\n\n  return Math.ceil(totalWells / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2);\n    const bBinary = b.toString(2);\n    const aOnes = aBinary.split('1').length - 1;\n    const bOnes = bBinary.split('1').length - 1;\n\n    return aOnes - bOnes || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  return words.filter(word => {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) count++;\n    }\n    return count === n;\n  });\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n}"}
{"task_id": "JavaScript/119", "generation": "\n  let str1 = lst[0];\n  let str2 = lst[1];\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count++;\n    } else {\n      if (count === 0) {\n        return 'No';\n      }\n      count--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count++;\n    } else {\n      if (count === 0) {\n        return 'No';\n      }\n      count--;\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // Sort the array in descending order\n  arr.sort((a, b) => b - a);\n\n  // Return the first k elements\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10 || (arr[i] >= 100 && arr[i] < 1000)) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let collatz = [n];\n  while (n != 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    if (n % 2 !== 0) collatz.push(n);\n  }\n  return collatz.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  if (date === '') return false;\n  const dateArray = date.split('-');\n  if (dateArray.length !== 3) return false;\n  const [month, day, year] = dateArray;\n  if (\n    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    ((month === 4 ||\n      month === 6 ||\n      month === 9 ||\n      month === 11) &&\n      day > 30) ||\n    (month === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n    day > 31\n  )\n    return false;\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    return txt.split('').reduce((acc, char) => {\n      if (char === char.toLowerCase() && char.charCodeAt() % 2 !== 0) {\n        acc += 1;\n      }\n      return acc;\n    }, 0);\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = [...lst].sort((a, b) => a - b);\n  let duplicate = [...lst].filter((n, i) => n === lst[i + 1]);\n  return JSON.stringify(lst) === JSON.stringify(sorted) && duplicate.length === 1;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start + 1;\n  if (length < 2) return \"NO\";\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return \"NO\";\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n\n  let sum = 0;\n  let sign = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      sum += Math.abs(arr[i]);\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n\n  return sign * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const dp = Array.from({ length: n }, () =>\n    Array.from({ length: n }, () => Array(k + 1).fill(Infinity))\n  );\n  dp[0][0][0] = grid[0][0];\n  const queue = [[0, 0, 0]];\n  while (queue.length) {\n    const [x, y, z] = queue.shift();\n    for (let i = 0; i < 4; i++) {\n      const nx = x + directions[i][0];\n      const ny = y + directions[i][1];\n      if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;\n      for (let j = z + 1; j <= k && dp[nx][ny][j - 1] > dp[x][y][z] + grid[nx][ny]; j++) {\n        dp[nx][ny][j] = dp[x][y][z] + grid[nx][ny];\n        queue.push([nx, ny, j]);\n      }\n    }\n  }\n  return dp[n - 1][n - 1].slice(k).sort((a, b) => a - b)[0];\n};"}
{"task_id": "JavaScript/130", "generation": "\n  if (n < 0) {\n    return 'Input must be a non-negative integer';\n  }\n  let sequence = [1, 3, 2];\n  if (n < 3) {\n    return sequence.slice(0, n + 1);\n  }\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      sequence[i] = 1 + i / 2;\n    } else {\n      sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];\n    }\n  }\n  return sequence;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let digits = n.toString().split('');\n  let product = 1;\n  let isOdd = false;\n\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 !== 0) {\n      product *= parseInt(digits[i]);\n      isOdd = true;\n    }\n  }\n\n  return isOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0 ? false : true;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((acc, curr) => {\n    return acc + Math.pow(Math.ceil(curr), 2);\n  }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt[txt.length - 1];\n  const secondLastChar = txt[txt.length - 2];\n  return /[a-z]/i.test(lastChar) && secondLastChar !== ' ';\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[i - 1]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let neg = null;\n  let pos = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (neg === null || lst[i] > neg) neg = lst[i];\n    } else if (lst[i] > 0) {\n      if (pos === null || lst[i] < pos) pos = lst[i];\n    }\n  }\n  return (neg, pos);\n};"}
{"task_id": "JavaScript/137", "generation": "\n  const aType = typeof a;\n  const bType = typeof b;\n\n  if (aType !== bType) {\n    if (aType === \"string\") {\n      a = parseFloat(a.replace(\",\", \".\"));\n    } else if (bType === \"string\") {\n      b = parseFloat(b.replace(\",\", \".\"));\n    }\n  }\n\n  if (a > b) {\n    return aType === \"string\" ? b.toString() : a;\n  } else if (b > a) {\n    return bType === \"string\" ? a.toString() : b;\n  }\n\n  return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 8 || n % 2 !== 0) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 !== 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => isPrime(word.length));\n  return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\n  return xNum * nDen === xDen * nNum;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      let strNum = Math.abs(nums[i]).toString();\n      if (strNum[0] % 2 !== 0 && strNum[strNum.length - 1] % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let count = [0, 0, 0];\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    let val = (i * i - i + 1) % 3;\n    count[val]++;\n  }\n  result += count[0] * (count[0] - 1) * (count[0] - 2) / 6;\n  result += count[1] * (count[1] - 1) / 2 * count[2];\n  result += count[2] * (count[2] - 1) / 2 * count[1];\n  return result;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return ();\n  if (index1 > index2) return planets.slice(index2 + 1, index1);\n  else return planets.slice(index1 + 1, index2);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  //filter out strings with odd lengths\n  const filteredList = lst.filter((str) => str.length % 2 === 0);\n  //sort the list by length and then alphabetically\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sortedList;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  for(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n    if(n % i === 0) return y;\n  return x;\n}"}
{"task_id": "JavaScript/151", "generation": "\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = {\n    name: '',\n    strength: 0,\n  };\n\n  for (let ext of extensions) {\n    let strength = ext.split('').reduce((acc, char) => {\n      if (char === char.toUpperCase()) acc.cap++;\n      if (char === char.toLowerCase()) acc.sm++;\n      return acc;\n    }, { cap: 0, sm: 0 });\n\n    strength = strength.cap - strength.sm;\n\n    if (strength > strongest.strength) {\n      strongest.name = ext;\n      strongest.strength = strength;\n    }\n  }\n\n  return `${class_name}.${strongest.name}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b)) return true;\n    b = b.slice(1) + b[0];\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  const numArr = Math.abs(num).toString().split('');\n  numArr.forEach((n) => (n % 2 === 0 ? even++ : odd++));\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n  for (const key in map) {\n    while (number >= map[key]) {\n      result += key;\n      number -= map[key];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  // sort the sides in ascending order\n  const sides = [a, b, c].sort((a, b) => a - b);\n\n  // check if the square of the largest side is equal to the sum of the squares of the other two sides\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = '';\n\n  for (let word of words) {\n    const uniqueCount = new Set(word.split('')).size;\n    if (uniqueCount > maxUnique) {\n      maxUnique = uniqueCount;\n      maxWord = word;\n    } else if (uniqueCount === maxUnique) {\n      maxWord = maxWord < word ? maxWord : word;\n    }\n  }\n\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number;\n  if (need < remaining) {\n    total += need;\n    remaining -= need;\n  } else {\n    total += remaining;\n    remaining = 0;\n  }\n  return [total, remaining];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case \"+\":\n        result += operand[i];\n        break;\n      case \"-\":\n        result -= operand[i];\n        break;\n      case \"*\":\n        result *= operand[i];\n        break;\n      case \"//\":\n        result = Math.floor(result / operand[i]);\n        break;\n      case \"**\":\n        result = Math.pow(result, operand[i]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split('');\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].match(/[a-z]/i)){\n      arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n    }\n  }\n  return arr.join('');\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};"}
