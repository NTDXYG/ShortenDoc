{"task_id": "Go/0", "generation": "\n    for i, num1 := range numbers {\n        for j, num2 := range numbers {\n            if i != j && math.Abs(num1-num2) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var temp string\n    var openBraceCount int\n\n    for _, c := range paren_string {\n        if c == '(' {\n            openBraceCount++\n        } else if c == ')' {\n            openBraceCount--\n        }\n\n        if openBraceCount == 0 && temp != \"\" {\n            result = append(result, temp)\n            temp = \"\"\n        }\n\n        temp += string(c)\n    }\n\n    if temp != \"\" {\n        result = append(result, temp)\n    }\n\n    return result\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/4", "generation": "\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\n    var sumDeviation float64 = 0.0\n    for _, num := range numbers {\n        deviation := math.Abs(num - mean)\n        sumDeviation += deviation\n    }\n\n    return sumDeviation / float64(len(numbers))\n}\n"}
{"task_id": "Go/5", "generation": "\n    var interspersed []int\n    for i, num := range numbers {\n        interspersed = append(interspersed, num)\n        if i != len(numbers)-1 {\n            interspersed = append(interspersed, delimeter)\n        }\n    }\n    return interspersed\n}\n\n"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    max_level := 0\n    current_level := 0\n    for _, char := range strings.Split(paren_string, \" \") {\n        if char == \"(\" {\n            current_level++\n            if current_level > max_level {\n                max_level = current_level\n            }\n        } else if char == \")\" {\n            current_level--\n        }\n        levels = append(levels, current_level)\n    }\n    return levels\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum += num\n        product *= num\n    }\n    return [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    rollingMax := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        rollingMax[i] = max\n    }\n    return rollingMax\n}\n\n"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes) - 1; i >= 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes) + string(runes[:i+1]) + strings.Reversed(string(runes[:i+1])).String()\n        }\n    }\n    return string(runes) + string(runes)\n}\n"}
{"task_id": "Go/11", "generation": "\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}\n\n"}
{"task_id": "Go/13", "generation": "\n    if b==0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}\n\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[0:i+1])\n    }\n    return prefixes\n}\n\n"}
{"task_id": "Go/15", "generation": "\n    sequence := \"\"\n    for i := 0; i <= n; i++ {\n        sequence += strconv.Itoa(i) + \" \"\n    }\n    return sequence[:len(sequence)-1] // remove last space\n}\n"}
{"task_id": "Go/16", "generation": "\n    distinct_chars := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        if _, ok := distinct_chars[char]; !ok {\n            distinct_chars[char] = true\n        }\n    }\n    return len(distinct_chars)\n}\n\n"}
{"task_id": "Go/17", "generation": "\n    var beats []int\n    notes := strings.Split(music_string, \" \")\n    for _, note := range notes {\n        switch note {\n        case \"o\":\n            beats = append(beats, 4)\n        case \"o|\":\n            beats = append(beats, 2)\n        case \".|\":\n            beats = append(beats, 1)\n        }\n    }\n    return beats\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if strings.Contains(str[i:], substring) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    numberMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numberSlice := []string{}\n\n    for _, number := range strings.Split(numbers, \" \") {\n        numberSlice = append(numberSlice, number)\n    }\n\n    sort.Slice(numberSlice, func(i, j int) bool {\n        return numberMap[numberSlice[i]] < numberMap[numberSlice[j]]\n    })\n\n    return strings.Join(numberSlice, \" \")\n}\n"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    minDiff := numbers[1] - numbers[0]\n    minIndex := 0\n    for i := 1; i < len(numbers); i++ {\n        if diff := numbers[i] - numbers[i-1]; diff < minDiff {\n            minDiff = diff\n            minIndex = i - 1\n        }\n    }\n    return [2]float64{numbers[minIndex], numbers[minIndex+1]}\n}\n\n"}
{"task_id": "Go/21", "generation": "\n\tmin := numbers[0]\n\tmax := numbers[0]\n\n\t// find the min and max\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\n\t// rescale\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\n\treturn numbers\n}\n\n"}
{"task_id": "Go/22", "generation": "\n    var integers []int\n    for _, value := range values {\n        if integer, ok := value.(int); ok {\n            integers = append(integers, integer)\n        }\n    }\n    return integers\n}\n\n"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n\tkeys := make(map[int]bool)\n\tlist := []int{}\n\tfor _, entry := range numbers {\n\t\tif _, value := keys[entry]; !value {\n\t\t\tkeys[entry] = true\n\t\t\tlist = append(list, entry)\n\t\t}\n\t}\n\treturn list\n}\n\n"}
{"task_id": "Go/27", "generation": "\n    result := make([]rune, len(str))\n    for i, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result[i] = c - 'a' + 'A'\n        } else if 'A' <= c && c <= 'Z' {\n            result[i] = c - 'A' + 'a'\n        } else {\n            result[i] = c\n        }\n    }\n    return string(result)\n}\n\n"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}\n\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/30", "generation": "\n    var pos []int\n    for _, v := range l {\n        if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return pos\n}\n\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    x := 0.0\n    for {\n        y := Poly(xs, x)\n        if y == 0 {\n            return x\n        }\n        if x > 0 {\n            x -= y / float64(xs[0])\n        } else {\n            x += y / float64(xs[0])\n        }\n    }\n}\n"}
{"task_id": "Go/33", "generation": "\n    var third []int\n    for i := 0; i < len(l); i += 3 {\n        if i+2 < len(l) {\n            third = append(third, l[i+2])\n        }\n    }\n    sort.Ints(third)\n\n    var j int\n    for i := 0; i < len(l); i += 3 {\n        if j < len(third) {\n            l[i] = third[j]\n            j++\n        }\n    }\n    return l\n}\n\n"}
{"task_id": "Go/34", "generation": "\n    keys := make(map[int]bool)\n    list := make([]int, 0)\n    for _, entry := range l {\n        if _, value := keys[entry]; !value {\n            keys[entry] = true\n            list = append(list, entry)\n        }\n    }\n    return list\n}\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i <= n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\tvar evenIndices []int\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tvar result []int\n\tj := 0\n\tfor i := 0; i < len(l); i += 2 {\n\t\tresult = append(result, evenIndices[j])\n\t\tj++\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[len(runes)-1]}, runes[:len(runes)-1]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\n\ta, b := 2, 3\n\tfor i := 3; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\n\treturn b\n}\n"}
{"task_id": "Go/40", "generation": "\n    sort.Ints(l)\n    for i := 0; i < len(l)-2; i++ {\n        left, right := i+1, len(l)-1\n        while left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/41", "generation": "\n    if n < 2 {\n        return 0\n    }\n    return n * (n - 1) / 2\n}\n\n"}
{"task_id": "Go/42", "generation": "\n    for i := 0; i < len(l); i++ {\n        l[i]++\n    }\n    return l\n}\n\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[-num]; ok {\n            return true\n        }\n        m[num] = true\n    }\n    return false\n}\n\n"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return strconv.Itoa(x)\n    } else {\n        return ChangeBase(x/base, base) + strconv.Itoa(x%base)\n    }\n}\n\n"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n    }\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1] + l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}\n\n"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/49", "generation": "\n    return n%p\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    reg, _ := regexp.Compile(\"[aeiouAEIOU]\")\n    return reg.ReplaceAllString(text, \"\")\n}\n\n"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n\n"}
{"task_id": "Go/54", "generation": "\n    if len(s0) != len(s1) {\n        return false\n    }\n\n    m0 := make(map[rune]int)\n    m1 := make(map[rune]int)\n\n    for _, c := range s0 {\n        m0[c]++\n    }\n\n    for _, c := range s1 {\n        m1[c]++\n    }\n\n    for k, v := range m0 {\n        if m1[k] != v {\n            return false\n        }\n    }\n\n    return true\n}\n\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}\n\n"}
{"task_id": "Go/56", "generation": "\n    var stack []rune\n    for _, c := range brackets {\n        switch c {\n        case '(', '[', '<', '{':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '>':\n            if len(stack) == 0 || stack[len(stack)-1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    increase := true\n    decrease := true\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decrease = false\n        }\n        if l[i] < l[i-1] {\n            increase = false\n        }\n    }\n\n    return increase || decrease\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m1 := make(map[int]bool)\n    for _, item := range l1 {\n        m1[item] = true\n    }\n\n    common := make([]int, 0)\n    for _, item := range l2 {\n        if _, ok := m1[item]; ok {\n            common = append(common, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}\n\n"}
{"task_id": "Go/59", "generation": "\n    for i := 2; i * i <= n; i++ {\n        if n % i != 0 {\n            continue\n        }\n        for n % i == 0 {\n            n /= i\n        }\n    }\n    return n\n}\n\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, c := range brackets {\n        switch c {\n        case '(', '[', '{', '<':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '>':\n            if len(stack) == 0 || stack[len(stack)-1] != '<' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/62", "generation": "\n\tn := len(xs)\n\tderivative := make([]int, n-1)\n\tfor i := 1; i < n; i++ {\n\t\tderivative[i-1] = xs[i] * i\n\t}\n\treturn derivative\n}\n\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        var fibfibArray = make([]int, n+1)\n        fibfibArray[0] = 0\n        fibfibArray[1] = 0\n        fibfibArray[2] = 1\n        for i := 3; i <= n; i++ {\n            fibfibArray[i] = fibfibArray[i-1] + (i-2) + (i-3)\n        }\n        return fibfibArray[n]\n    }\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(\"aeiou\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    x_str := strconv.Itoa(x)\n    shift = shift % len(x_str)\n    return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n}\n\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, c := range x {\n        if 'A' <= c && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tsplit := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(split[0])\n\toranges, _ := strconv.Atoi(split[2])\n\treturn n - apples - oranges\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEvenValue := math.MaxInt64\n    smallestIndex := -1\n    for index, value := range arr {\n        if value%2 == 0 && value < smallestEvenValue {\n            smallestEvenValue = value\n            smallestIndex = index\n        }\n    }\n    if smallestIndex == -1 {\n        return []int{}\n    }\n    return []int{smallestEvenValue, smallestIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    for i := 1; ; i++ {\n        if _, ok := freq[i]; ok {\n            if freq[i] >= i {\n                return i\n            }\n        } else {\n            return -1\n        }\n    }\n}\n"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    min := lst[0]\n    lst = append(lst[1:], min)\n    return lst\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        s := (a + b + c) / 2\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}\n\n"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    return sum <= w\n}\n"}
{"task_id": "Go/73", "generation": "\n    n := len(arr)\n    if n == 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i < n/2; i++ {\n        if arr[i] != arr[n-i-1] {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/74", "generation": "\n    count1 := 0\n    count2 := 0\n    for _, v := range lst1 {\n        count1 += countChars(v)\n    }\n    for _, v := range lst2 {\n        count2 += countChars(v)\n    }\n    if count1 < count2 {\n        return lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\nfunc countChars(s string) int {\n    count := 0\n    for _, v := range s {\n        if unicode.IsLetter(v) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/75", "generation": "\n\tprimes := []int{2, 3, 5}\n\tfor _, prime := range primes {\n\t\tif a%prime != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if n==0 {\n        return x>1\n    }\n    if x==1 {\n        return n==1\n    }\n    if x<=0 {\n        return false\n    }\n    for i:=2; i*i<=x; i++ {\n        if x%i==0 {\n            return IsSimplePower(x/i,n)\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/77", "generation": "\n    n := int(math.Cbrt(float64(a)))\n    return n*n*n == a\n}\n"}
{"task_id": "Go/78", "generation": "\n\thexToDec := map[rune]int{\n\t\t'0': 0,\n\t\t'1': 1,\n\t\t'2': 2,\n\t\t'3': 3,\n\t\t'4': 4,\n\t\t'5': 5,\n\t\t'6': 6,\n\t\t'7': 7,\n\t\t'8': 8,\n\t\t'9': 9,\n\t\t'A': 10,\n\t\t'B': 11,\n\t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t'F': 15,\n\t\t'G': 16,\n\t\t'H': 17,\n\t\t'I': 18,\n\t\t'J': 19,\n\t\t'K': 20,\n\t\t'L': 21,\n\t\t'M': 22,\n\t\t'N': 23,\n\t\t'O': 24,\n\t\t'P': 25,\n\t\t'Q': 26,\n\t\t'R': 27,\n\t\t'S': 28,\n\t\t'T': 29,\n\t\t'U': 30,\n\t\t'V': 31,\n\t\t'W': 32,\n\t\t'X': 33,\n\t\t'Y': 34,\n\t\t'Z': 35,\n\t}\n\n\tcount := 0\n\tfor _, c := range num {\n\t\tif _, ok := hexToDec[c]; ok {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count\n}\n\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tdecimal = decimal / 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n"}
{"task_id": "Go/80", "generation": "\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var letterGrades []string\n    for _, grade := range grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades, \"A-\")\n        } else if grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades, \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades, \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades, \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades, \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades, \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades, \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades, \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n"}
{"task_id": "Go/82", "generation": "\n    if len(s)%2 == 0 {\n        return false\n    }\n    for i := 2; i*i <= len(s); i++ {\n        if len(s)%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/83", "generation": "\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 10\n    }\n    return 9 * (10 ^ (n - 1))\n}\n"}
{"task_id": "Go/84", "generation": "\n    binary := \"\"\n    for N > 0 {\n        remainder := N % 2\n        binary = strconv.Itoa(remainder) + binary\n        N = N / 2\n    }\n    return binary\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    sort.Strings(words)\n    return strings.Join(words, \"\")\n}\n"}
{"task_id": "Go/87", "generation": "\n    var res [] [2]int\n    for i, row := range lst {\n        for j, num := range row {\n            if num == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n\n    var odd, even []int\n    for _, num := range array {\n        if num%2 == 0 {\n            even = append(even, num)\n        } else {\n            odd = append(odd, num)\n        }\n    }\n\n    sort.Ints(even)\n    sort.Slice(odd, func(i, j int) bool {\n        return odd[i] > odd[j]\n    })\n\n    result := make([]int, 0, len(array))\n    result = append(result, even...)\n    result = append(result, odd...)\n\n    return result\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create a map to hold the encrypted characters\n    encrypted := make(map[rune]rune)\n\n    // Create a map to hold the original characters\n    original := make(map[rune]rune)\n\n    // Create a string to hold the encrypted string\n    encryptedStr := \"\"\n\n    // Loop through the string\n    for _, c := range s {\n        // If the character is a letter\n        if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n            // If the character is uppercase\n            if strings.ContainsRune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n                // Encrypt the character\n                encrypted[c] = rune(int(c) + 2*2)\n                // Store the original character\n                original[c] = c\n            } else {\n                // Encrypt the character\n                encrypted[c] = rune(int(c) + 2)\n                // Store the original character\n                original[c] = c\n            }\n        } else {\n            // If the character is not a letter, just add it to the encrypted string\n            encryptedStr += string(c)\n        }\n    }\n\n    // Loop through the encrypted string\n    for i, c := range encryptedStr {\n        // If the character is a letter\n        if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n            // If the character is uppercase\n            if strings.ContainsRune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", c) {\n                // Add the encrypted character\n                encryptedStr = encryptedStr[:i] + string(encrypted[c]) + encryptedStr[i+1:]\n            } else {\n                // Add the encrypted character\n                encryptedStr = encryptedStr[:i] + string(encrypted[c]) + encryptedStr[i+1:]\n            }\n        }\n    }\n\n    // Return the encrypted string\n   "}
{"task_id": "Go/90", "generation": "\n    if lst == nil || len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > lst[0] {\n            return lst[i]\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`^I[^.!\\?]*`)\n    if re.MatchString(S) {\n        return 1\n    }\n    return 0\n}\n\n"}
{"task_id": "Go/92", "generation": "\n\tswitch v := x.(type) {\n\tcase int:\n\t\treturn v == y || v == z\n\tcase float64:\n\t\treturn v == y && v == z\n\tdefault:\n\t\treturn false\n\t}\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encodedMessage := \"\"\n\n    for _, char := range message {\n        if strings.ContainsRune(\"aeiou\", char) {\n            encodedMessage += string(char)\n        } else {\n            encodedMessage += string(char + 2)\n        }\n    }\n\n    return encodedMessage\n}\n\n"}
{"task_id": "Go/94", "generation": "\n    var sum int\n    for _, num := range lst {\n        if num > 1 && isPrime(num) {\n            sum += sumDigits(num)\n        }\n    }\n    return sum\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    str := strconv.Itoa(n)\n    sum := 0\n    for _, r := range str {\n        digit, _ := strconv.Atoi(string(r))\n        sum += digit\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    for key, value := range dict {\n        if strings.ToLower(key.(string)) != key.(string) {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n    if n < 2 {\n        return []int{}\n    }\n    primes := make([]int, 0, n/2)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/97", "generation": "\n    if a == 0 || b == 0 {\n        return 0\n    }\n    sign := 1\n    if (a < 0) != (b < 0) {\n        sign = -1\n    }\n    a, b = abs(a), abs(b)\n    result := 0\n    for b > 0 {\n        if b%2 != 0 {\n            result += a\n        }\n        a <<= 1\n        b >>= 1\n    }\n    return sign * result\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    vowels := \"AEIOU\"\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(math.Round(num))\n    }\n    return int(math.Ceil(num))\n}\n"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    for i := 1; i <= n; i++ {\n        if n%2 == 0 {\n            result = append(result, n+2*i)\n        } else {\n            result = append(result, n+2*i-1)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/101", "generation": "\n    return strings.FieldsFunc(s, func(r rune) bool {\n        return !strings.In(r, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    })\n}\n"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return -1\n    }\n    return y\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := float64(sum) / float64(m-n+1)\n    roundedAvg := math.Round(avg)\n    return fmt.Sprintf(\"0b%b\", int(roundedAvg))\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var res []int\n    m := make(map[int]bool)\n    for _, v := range x {\n        if v%2 == 0 {\n            s := strconv.Itoa(v)\n            for _, c := range s {\n                if string(c) == \"0\" {\n                    continue\n                }\n                if _, ok := m[int(c) - '0']; !ok {\n                    res = append(res, v)\n                    m[int(c) - '0'] = true\n                    break\n                }\n            }\n        }\n    }\n    sort.Ints(res)\n    return res\n}\n\n\n"}
{"task_id": "Go/105", "generation": "\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var res []string\n    for _, num := range arr {\n        if num > 0 && num <= 9 {\n            res = append(res, getName(num))\n        }\n    }\n    sort.Ints(arr)\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    return res\n}\n\nfunc getName(num int) string {\n    switch num {\n    case 1:\n        return \"One\"\n    case 2:\n        return \"Two\"\n    case 3:\n        return \"Three\"\n    case 4:\n        return \"Four\"\n    case 5:\n        return \"Five\"\n    case 6:\n        return \"Six\"\n    case 7:\n        return \"Seven\"\n    case 8:\n        return \"Eight\"\n    case 9:\n        return \"Nine\"\n    default:\n        return \"\"\n    }\n}\n\nfunc Reverse(arr []int) []int {\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    return arr\n}\n\n"}
{"task_id": "Go/106", "generation": "\n\tfactorial := make([]int, n)\n\tsum := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tfactorial[i] = factorialSum(i)\n\t\t} else {\n\t\t\tsum[i] = sumNumbers(i)\n\t\t}\n\t}\n\treturn factorial\n}\n\nfunc factorialSum(n int) int {\n\tfactorial := 1\n\tfor i := 1; i <= n; i++ {\n\t\tfactorial *= i\n\t}\n\treturn factorial\n}\n\nfunc sumNumbers(n int) int {\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/107", "generation": "\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++ {\n        str := strconv.Itoa(i)\n        if str == reverse(str) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/108", "generation": "\n    sum := 0\n    firstNegative := -1\n    for _, num := range arr {\n        if num > 0 {\n            sum += num\n        } else if num < 0 && firstNegative == -1 {\n            firstNegative = num\n        }\n    }\n    if firstNegative != -1 {\n        return sum + firstNegative\n    }\n    return sum\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            for j := i+1; j < len(arr); j++ {\n                if arr[j] < arr[i] {\n                    return false\n                }\n            }\n            arr = append(arr[:i], arr[i+1:]...)\n            return MoveOneBall(arr)\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n                }\n            }\n        }\n    }\n    return \"NO\"\n}\n"}
{"task_id": "Go/111", "generation": "\n    test = strings.Replace(test, \" \", \"\", -1)\n    histogram := make(map[rune]int)\n    for _, char := range test {\n        histogram[char]++\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result [2]interface{}\n    var str, rev string\n    str = s\n    rev = reverse(s)\n    if strings.Contains(rev, c) {\n        for strings.Contains(rev, c) {\n            index := strings.LastIndex(rev, c)\n            rev = rev[:index] + rev[index+1:]\n        }\n    }\n    if str == reverse(rev) {\n        result[0] = str\n        result[1] = true\n    } else {\n        result[0] = str\n        result[1] = false\n    }\n    return result\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        count := 0\n        for _, c := range s {\n            if int(c)%2 != 0 {\n                count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"number of odd elements %dn str%dng %d  %dnput\", count, i+1, count)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt64\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}\n\n"}
{"task_id": "Go/115", "generation": "\n    m, n := len(grid), len(grid[0])\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n    }\n    for i := m-1; i >= 0; i-- {\n        for j := n-1; j >= 0; j-- {\n            if grid[i][j] == 1 {\n                dp[i][j] = dp[i+1][j] + 1\n            }\n        }\n    }\n    ans := 0\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                minBucket := int(math.Max(0, float64(dp[i][j]/capacity)))\n                ans += minBucket\n            }\n        }\n    }\n    return ans\n}\n"}
{"task_id": "Go/116", "generation": "\n    sort.Ints(arr)\n    return arr\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        count := 0\n        for _, r := range word {\n            if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' || r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n                count++\n            }\n        }\n        if count != n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n            for j := i - 1; j >= 0; j-- {\n                if strings.ContainsRune(vowels, rune(word[j])) {\n                    return string(word[i])\n                }\n            }\n        }\n    }\n    return \"\"\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/119", "generation": "\n    open, close := 0, 0\n    for _, s := range lst {\n        for _, c := range s {\n            if c == '(' {\n                open++\n            } else if c == ')' {\n                close++\n            }\n            if close > open {\n                return \"No\"\n            }\n        }\n    }\n    if open != close {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[:k]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        }\n        if n % 2 != 0 {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    sort.Ints(collatz)\n    return collatz\n}\n"}
{"task_id": "Go/124", "generation": "\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n    if err != nil || month < 1 || month > 12 {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil || day < 1 {\n        return false\n    }\n\n    year, err := strconv.Atoi(parts[2])\n    if err != nil {\n        return false\n    }\n\n    if day > 31 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day > 30 {\n                return false\n            }\n        } else if month == 2 {\n            if day > 29 {\n                return false\n            }\n        } else {\n            if day > 31 {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, r := range txt {\n            if r >= 'a' && r <= 'z' {\n                count++\n            }\n        }\n        return count % 2\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) < 2 {\n        return true\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n\n    if start > end {\n        return \"NO\"\n    }\n\n    if isPrime(end - start + 1) {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n    }\n    if n%2 == 0 || n%3 == 0 {\n        return false\n    }\n    i := 5\n    for i*i <= n {\n        if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    sign := 1\n    product := 1\n    for _, num := range arr {\n        if num < 0 {\n            sign *= -1\n        }\n        product *= int(math.Abs(float64(num)))\n    }\n    return sign * product\n}\n"}
{"task_id": "Go/129", "generation": "\n\tn := len(grid)\n\tvisited := make([][]bool, n)\n\tfor i := range visited {\n\t\tvisited[i] = make([]bool, n)\n\t}\n\tminPath := make([]int, k)\n\tminPathIndex := 0\n\tminPath[0] = grid[0][0]\n\tvisited[0][0] = true\n\tdir := [][]int{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}\n\ttype pair struct {\n\t\tx, y int\n\t}\n\tqueue := []pair{{0, 0}}\n\tfor len(queue) > 0 {\n\t\tcur := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, d := range dir {\n\t\t\tnx, ny := cur.x+d[0], cur.y+d[1]\n\t\t\tif nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] {\n\t\t\t\tvisited[nx][ny] = true\n\t\t\t\tqueue = append(queue, pair{nx, ny})\n\t\t\t\tminPath[minPathIndex+1] = grid[nx][ny]\n\t\t\t\tminPathIndex++\n\t\t\t}\n\t\t}\n\t}\n\treturn minPath\n}\n\n"}
{"task_id": "Go/130", "generation": "\n    var res []float64\n    res = append(res, 1)\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, float64(i / 2))\n        } else {\n            res = append(res, float64((i - 1) + (i - 2) + (i + 1)))\n        }\n    }\n    return res\n}\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    hasOdd := false\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n            hasOdd = true\n        }\n        n /= 10\n    }\n    if !hasOdd {\n        return 0\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        num = math.Ceil(num)\n        sum += num * num\n    }\n    return int(sum)\n}\n"}
{"task_id": "Go/134", "generation": "\n    lastChar := txt[len(txt)-1:]\n    return strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(lastChar[0]))\n}\n"}
{"task_id": "Go/135", "generation": "\n    n := len(arr)\n    if n < 2 {\n        return -1\n    }\n    sort.Ints(arr)\n    max := arr[n-1]\n    for i := 1; i < n; i++ {\n        if arr[i] != arr[i-1] {\n            max = arr[i-1]\n        }\n    }\n    for i := 1; i < n-1; i++ {\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return i\n        }\n    }\n    if arr[n-1] != arr[n-2] {\n        return n-1\n    }\n    return -1\n}\n"}
{"task_id": "Go/136", "generation": "\n    var largestNegative, smallestPositive int\n    largestNegative = math.MinInt64\n    smallestPositive = math.MaxInt64\n    for _, num := range lst {\n        if num < 0 && num > largestNegative {\n            largestNegative = num\n        }\n        if num > 0 && num < smallestPositive {\n            smallestPositive = num\n        }\n    }\n    if largestNegative == math.MinInt64 {\n        return [2]interface{}{nil, nil}\n    }\n    return [2]interface{}{largestNegative, smallestPositive}\n}\n"}
{"task_id": "Go/137", "generation": "\n    var result interface{} = nil\n\n    switch a := a.(type) {\n    case int:\n        switch b := b.(type) {\n        case int:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case float64:\n            if float64(a) > b {\n                result = a\n            } else if float64(a) < b {\n                result = b\n            }\n        case string:\n            if strings.Contains(b.(string), \".\") {\n                bFloat, _ := strconv.ParseFloat(b.(string), 64)\n                if float64(a) > bFloat {\n                    result = a\n                } else if float64(a) < bFloat {\n                    result = b\n                }\n            } else {\n                if a > b {\n                    result = a\n                } else if a < b {\n                    result = b\n                }\n            }\n        }\n    case float64:\n        switch b := b.(type) {\n        case int:\n            if float64(a) > b {\n                result = a\n            } else if float64(a) < b {\n                result = b\n            }\n        case float64:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case string:\n            if strings.Contains(b.(string), \".\") {\n                if float64(a) > b {\n                    result = a\n                } else if float64(a) < b {\n                    result = b\n                }\n            } else {\n                if a > b {\n                    result = a\n                } else if a < b {\n                    result = b\n                }\n            }\n        }\n    case string:\n        switch b := b.(type) {\n        case int:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case float64:\n            if a > b {\n                result = a\n            } else if a < b {\n"}
{"task_id": "Go/138", "generation": "\n    if n < 4 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n    }\n    return sum == n\n}\n"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\n"}
{"task_id": "Go/140", "generation": "\n\tcount := 0\n\tnewText := \"\"\n\tfor _, c := range text {\n\t\tif string(c) == \" \" {\n\t\t\tcount++\n\t\t\tif count > 2 {\n\t\t\t\tnewText += \"-\"\n\t\t\t} else {\n\t\t\t\tnewText += \"_\"\n\t\t\t}\n\t\t} else {\n\t\t\tnewText += string(c)\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn newText\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if len(file_name) > 3 && strings.Contains(file_name, \".\") {\n        file_name_split := strings.Split(file_name, \".\")\n        if len(file_name_split) == 2 {\n            if (file_name_split[0][0] >= 'a' && file_name_split[0][0] <= 'z' && file_name_split[0][0] >= 'A' && file_name_split[0][0] <= 'Z') {\n                if file_name_split[1] == \"txt\" || file_name_split[1] == \"exe\" || file_name_split[1] == \"dll\" {\n                    return \"Yes\"\n                }\n            }\n        }\n    }\n    return \"No\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    result := make([]string, 0, len(words))\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    // split the string into numerator and denominator\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    // convert the numerator and denominator to integers\n    xNum, _ := strconv.Atoi(xParts[0])\n    xDen, _ := strconv.Atoi(xParts[1])\n    nNum, _ := strconv.Atoi(nParts[0])\n    nDen, _ := strconv.Atoi(nParts[1])\n\n    // check if the numerator is equal to the product of the numerator and denominator\n    // and the denominator is equal to the numerator\n    if xNum == nNum*xDen && xDen == nNum {\n        return true\n    }\n\n    return false\n}\n"}
{"task_id": "Go/145", "generation": "\n    sort.Slice(nums, func(i, j int) bool {\n        sum1, sum2 := sumDigits(nums[i]), sumDigits(nums[j])\n        if sum1 == sum2 {\n            return i < j\n        }\n        return sum1 < sum2\n    })\n    return nums\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n != 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            str := strconv.Itoa(num)\n            lastDigit, _ := strconv.Atoi(string(str[len(str)-1]))\n            if lastDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/147", "generation": "\n\ta := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\ta[i] = i*i - i + 1\n\t}\n\tcount := 0\n\tfor i := 0; i < n-2; i++ {\n\t\tfor j := i + 1; j < n-1; j++ {\n\t\t\tfor k := j + 1; k < n; k++ {\n\t\t\t\tif a[i]+a[j]+a[k]%3 == 0 {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tplanet1Index := -1\n\tplanet2Index := -1\n\tfor i, v := range planets {\n\t\tif v == planet1 {\n\t\t\tplanet1Index = i\n\t\t}\n\t\tif v == planet2 {\n\t\t\tplanet2Index = i\n\t\t}\n\t}\n\tif planet1Index == -1 || planet2Index == -1 {\n\t\treturn []string{}\n\t}\n\tif planet1Index > planet2Index {\n\t\tplanet1Index, planet2Index = planet2Index, planet1Index\n\t}\n\treturn planets[planet1Index+1 : planet2Index]\n}\n\n"}
{"task_id": "Go/149", "generation": "\n    var res []string\n    for _, v := range lst {\n        if len(v)%2 == 0 {\n            res = append(res, v)\n        }\n    }\n    sort.Strings(res)\n    return res\n}\n"}
{"task_id": "Go/150", "generation": "\n    if n%2 == 0 {\n        return x\n    } else {\n        return y\n    }\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        if num >= 0 {\n            sum += math.Pow(num, 2)\n        }\n    }\n    return int(sum)\n}\n"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i, num := range game {\n        if num == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = int(math.Abs(float64(num - guess[i])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    maxStrength := -1\n    strongestExtension := \"\"\n    for _, extension := range extensions {\n        strength := countStrength(extension)\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return class_name + \".\" + strongestExtension\n}\n\nfunc countStrength(extension string) int {\n    capCount := 0\n    lowCount := 0\n    for _, char := range extension {\n        if unicode.IsUpper(char) {\n            capCount++\n        } else if unicode.IsLower(char) {\n            lowCount++\n        }\n    }\n    return capCount - lowCount\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) < len(b) {\n        return false\n    }\n    if len(a) == len(b) && a == b {\n        return true\n    }\n    for i := 0; i < len(a)-len(b)+1; i++ {\n        if a[i:i+len(b)] == b {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/155", "generation": "\n    numStr := strconv.Itoa(num)\n    evenCount := 0\n    oddCount := 0\n    for _, char := range numStr {\n        digit, _ := strconv.Atoi(string(char))\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n"}
{"task_id": "Go/156", "generation": "\n    val := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    syb := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    roman := \"\"\n    for i := 0; i < len(val); i++ {\n        for number >= val[i] {\n            number -= val[i]\n            roman += syb[i]\n        }\n    }\n    return strings.ToLower(roman)\n}\n"}
{"task_id": "Go/157", "generation": "\n    if a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a {\n        return true\n    }\n    return false\n}\n\n"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    return words[len(words)-1]\n}\n"}
{"task_id": "Go/159", "generation": "\n    if need > remaining {\n        return []int{number + remaining, remaining}\n    } else if need <= remaining {\n        return []int{number + need, remaining - need}\n    }\n    return nil\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"//\":\n            result = int(math.Floor(float64(result) / float64(operand[i])))\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n    if len(s) == 0 {\n        return s\n    }\n    if unicode.IsLetter(rune(s[0])) {\n        return strings.ToUpper(s)\n    }\n    return s\n}\n\n"}
{"task_id": "Go/162", "generation": "\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    if a > b {\n        a, b = b, a\n    }\n\n    var result []int\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n\n    return result\n}\n"}
