{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    var current_group []rune\n\n    for _, char := range paren_string {\n        if char == ' ' {\n            continue\n        }\n        if char == '(' {\n            stack = append(stack, char)\n            current_group = append(current_group, char)\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n            current_group = append(current_group, char)\n            if len(stack) == 0 {\n                result = append(result, string(current_group))\n                current_group = []rune{}\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Mod(number, 1)\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/4", "generation": "\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 = 0\n\n    // calculate mean\n    for _, number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    // calculate mean absolute deviation\n    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n}\n"}
{"task_id": "Go/5", "generation": "\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    result := make([]int, 0, len(numbers)*2-1)\n    for i, num := range numbers {\n        result = append(result, num)\n        if i < len(numbers)-1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/6", "generation": "\n    var result []int\n    groups := strings.Split(paren_string, \" \")\n    for _, group := range groups {\n        max_depth := 0\n        current_depth := 0\n        for _, char := range group {\n            if char == '(' {\n                current_depth++\n                if current_depth > max_depth {\n                    max_depth = current_depth\n                }\n            } else if char == ')' {\n                current_depth--\n            }\n        }\n        result = append(result, max_depth)\n    }\n    return result\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    return [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    maxSoFar := math.MinInt64\n    result := make([]int, len(numbers))\n\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if str == \"\" {\n        return \"\"\n    }\n    for i := 0; i < len(str); i++ {\n        if IsPalindrome(str[i:]) {\n            return str + strings.Replace(str[:i], \"\", \"\", -1)\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    var result string\n    for i := range a {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    maxLen := 0\n    var longestStr string\n    for _, str := range strings {\n        if len(str) > maxLen {\n            maxLen = len(str)\n            longestStr = str\n        }\n    }\n    return longestStr\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 1; i <= len(str); i++ {\n        prefixes = append(prefixes, str[:i])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}\n"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    charMap := make(map[rune]bool)\n    for _, char := range str {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n"}
{"task_id": "Go/17", "generation": "\n    // Your code here\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i <= len(str)-len(substring); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    // Create a slice of strings to hold the numbers\n    numSlice := strings.Fields(numbers)\n    // Create a map to hold the number values\n    numMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    // Sort the slice of strings based on the number values\n    sort.Slice(numSlice, func(i, j int) bool {\n        return numMap[numSlice[i]] < numMap[numSlice[j]]\n    })\n    // Join the sorted slice of strings into a single string\n    return strings.Join(numSlice, \" \")\n}\n"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    smallestDiff := math.MaxFloat64\n    closestPair := [2]float64{0, 0}\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < smallestDiff {\n            smallestDiff = diff\n            closestPair = [2]float64{numbers[i], numbers[i+1]}\n        }\n    }\n\n    return closestPair\n}\n"}
{"task_id": "Go/21", "generation": "\n    min, max := numbers[0], numbers[0]\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    rangeVal := max - min\n    rescaled := make([]float64, len(numbers))\n    for i, num := range numbers {\n        rescaled[i] = (num - min) / rangeVal\n    }\n    return rescaled\n}\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i >= 1; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n"}
{"task_id": "Go/25", "generation": "\n    var factors []int\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number := range numbers {\n        if _, ok := seen[number]; !ok {\n            result = append(result, number)\n            seen[number] = true\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result string\n    for _, char := range str {\n        if strings.ToLower(string(char)) == string(char) {\n            result += strings.ToUpper(string(char))\n        } else {\n            result += strings.ToLower(string(char))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive\n}"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n    }\n    if n%2 == 0 || n%3 == 0 {\n        return false\n    }\n    i := 5\n    for i*i <= n {\n        if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n\nfunc Prime(n int) bool {\n    return IsPrime(n)\n}\n\n"}
{"task_id": "Go/32", "generation": "\n    var x float64 = 0\n    for {\n        if Poly(xs, x) == 0 {\n            return x\n        }\n        x -= Poly(xs, x) / (Poly(xs, x+0.0001) - Poly(xs, x))\n    }\n}"}
{"task_id": "Go/33", "generation": "\n    // create a copy of l\n    lCopy := make([]int, len(l))\n    copy(lCopy, l)\n\n    // sort the copy of l\n    sort.Ints(lCopy)\n\n    // create a slice to hold the indices divisible by three\n    indices := make([]int, 0)\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            indices = append(indices, i)\n        }\n    }\n\n    // create a slice to hold the values at the indices divisible by three\n    values := make([]int, len(indices))\n    for i, index := range indices {\n        values[i] = l[index]\n    }\n\n    // create a slice to hold the sorted values\n    sortedValues := make([]int, len(values))\n    copy(sortedValues, values)\n    sort.Ints(sortedValues)\n\n    // replace the values at the indices divisible by three with the sorted values\n    for i, index := range indices {\n        l[index] = sortedValues[i]\n    }\n\n    return l\n}\n"}
{"task_id": "Go/34", "generation": "\n    sort.Ints(l)\n    unique := make([]int, 0)\n    for i := 0; i < len(l); i++ {\n        if i == 0 || l[i] != l[i-1] {\n            unique = append(unique, l[i])\n        }\n    }\n    return unique\n}\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i <= n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += countSevens(i)\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// create a new slice to hold the even indices\n\tevenIndices := make([]int, 0)\n\t// iterate over the slice and add the even indices to the new slice\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tevenIndices = append(evenIndices, v)\n\t\t}\n\t}\n\t// sort the new slice\n\tsort.Ints(evenIndices)\n\t// create a new slice to hold the sorted even indices\n\tsortedEvenIndices := make([]int, 0)\n\t// iterate over the original slice and add the sorted even indices to the new slice\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tsortedEvenIndices = append(sortedEvenIndices, evenIndices[i/2])\n\t\t} else {\n\t\t\tsortedEvenIndices = append(sortedEvenIndices, v)\n\t\t}\n\t}\n\treturn sortedEvenIndices\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tvar fib1, fib2, fib3 int\n\tfib1, fib2, fib3 = 0, 1, 1\n\tfor i := 0; i < n; {\n\t\tfib1, fib2, fib3 = fib2, fib3, fib1+fib2+fib3\n\t\tif isPrime(fib3) {\n\t\t\ti++\n\t\t}\n\t}\n\treturn fib3\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/40", "generation": "\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/41", "generation": "\n    return n * n\n}"}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n"}
{"task_id": "Go/43", "generation": "\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return strconv.Itoa(x)\n    }\n    return ChangeBase(x / base, base) + strconv.Itoa(x % base)\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn (a * h) / 2\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n    }\n}\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 1 {\n\t\treturn float64(l[n/2])\n\t}\n\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n}\n"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n % 2 == 0 {\n        return Modp(n / 2, p) * Modp(n / 2, p) % p\n    } else {\n        return Modp(n / 2, p) * Modp(n / 2, p) * p % p\n    }\n}\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _,i := range l {\n        if i >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n\tif len(s0) != len(s1) {\n\t\treturn false\n\t}\n\tcount := make(map[rune]int)\n\tfor _, c := range s0 {\n\t\tcount[c]++\n\t}\n\tfor _, c := range s1 {\n\t\tif count[c] == 0 {\n\t\t\treturn false\n\t\t}\n\t\tcount[c]--\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, char)\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}"}
{"task_id": "Go/57", "generation": "\n    increasing := true\n    decreasing := true\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        } else if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n"}
{"task_id": "Go/58", "generation": "\n    sort.Ints(l1)\n    sort.Ints(l2)\n    var result []int\n    i, j := 0, 0\n    for i < len(l1) && j < len(l2) {\n        if l1[i] == l2[j] {\n            result = append(result, l1[i])\n            i++\n            j++\n        } else if l1[i] < l2[j] {\n            i++\n        } else {\n            j++\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    var maxPrime int = -1\n    // Divide n by 2 to remove all even factors\n    for n%2 == 0 {\n        maxPrime = 2\n        n = n / 2\n    }\n    // n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i := 3; i <= int(math.Sqrt(float64(n))); i = i + 2 {\n        // While i divides n, remove i and set maxPrime to i\n        for n%i == 0 {\n            maxPrime = i\n            n = n / i\n        }\n    }\n    // This condition is to handle the case when n is a prime number greater than 2\n    if n > 2 {\n        maxPrime = n\n    }\n    return maxPrime\n}\n\n"}
{"task_id": "Go/60", "generation": "\n    if n == 0 {\n        return 0\n    }\n    return n + SumToN(n-1)\n}\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '(' {\n            stack = append(stack, char)\n        } else if char == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n    // Your code here\n}"}
{"task_id": "Go/63", "generation": "\n    if n == 0 || n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n    }\n}\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n\n    if strings.HasSuffix(s, \"y\") {\n        count++\n    }\n\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    s := strconv.Itoa(x)\n    n := len(s)\n    shift = shift % n\n    return s[n-shift:] + s[:n-shift]\n}"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, v := range x {\n\t\tif v >= 'A' && v <= 'Z' {\n\t\t\tsum += int(v)\n\t\t}\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/67", "generation": "\n\t// split string into words\n\twords := strings.Fields(s)\n\t// convert words to integers\n\tapples, _ := strconv.Atoi(words[0])\n\toranges, _ := strconv.Atoi(words[2])\n\t// return number of mangoes\n\treturn n - apples - oranges\n}\n"}
{"task_id": "Go/68", "generation": "\n    min := math.MaxInt32\n    index := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < min {\n            min = v\n            index = i\n        }\n    }\n    if index == -1 {\n        return []int{}\n    }\n    return []int{min, index}\n}\n"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    max := -1\n    for k, v := range freq {\n        if v >= k && k > max {\n            max = k\n        }\n    }\n    return max\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    result := make([]int, 0)\n    for i, j := 0, len(lst)-1; i <= j; i, j = i+1, j-1 {\n        if i != j {\n            result = append(result, lst[i], lst[j])\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}"}
{"task_id": "Go/71", "generation": "\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n//please upvote me it would encourage me alot\n\n//please upvote me it would encourage me alot"}
{"task_id": "Go/73", "generation": "\n    min := arr[0]\n    for _, v := range arr {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}"}
{"task_id": "Go/74", "generation": "\n    var result []string\n    for _, v := range lst1 {\n        if len(v) < len(lst2) {\n            result = append(result, v)\n        }\n    }\n    if len(result) == 0 {\n        return lst1\n    }\n    return result\n}"}
{"task_id": "Go/75", "generation": "\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= a; i++ {\n\t\tif a%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc IsMultiplyThreePrime(a int) bool {\n\tcount := 0\n\tfor i := 2; i <= a; i++ {\n\t\tif a%i == 0 && IsMultiplyPrime(i) {\n\t\t\tcount++\n\t\t\ta /= i\n\t\t}\n\t}\n\treturn count == 3\n}\n\nfunc MultiplyThreePrime(a int) bool {\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= a; i++ {\n\t\tif a%i == 0 && IsMultiplyPrime(i) {\n\t\t\ta /= i\n\t\t\tif IsMultiplyThreePrime(a) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nfunc MultiplyThreePrimeLess100(a int) bool {\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= a; i++ {\n\t\tif a%i == 0 && IsMultiplyPrime(i) {\n\t\t\ta /= i\n\t\t\tif IsMultiplyThreePrime(a) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nfunc MultiplyThreePrimeLess1000(a int) bool {\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= a; i++ {\n\t\tif a%i == 0 && IsMultiplyPrime(i) {\n\t\t\ta /= i\n\t\t\tif IsMultiplyThreePrime(a) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nfunc MultiplyThreePrimeLess10000(a int) bool {\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2;"}
{"task_id": "Go/76", "generation": "\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    }\n    for i:=2;i<=n;i++{\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\nfunc SimplePower(x int,n int) bool {\n    if x==1{\n        return true\n    }\n    if n==1{\n        return false\n    "}
{"task_id": "Go/77", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    cubeRoot := math.Cbrt(float64(a))\n    return cubeRoot == float64(int(cubeRoot))\n}\n"}
{"task_id": "Go/78", "generation": "\n\tcount := 0\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1] && s[i+1] != s[i+2] && s[i] != s[i+2] {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/81", "generation": "\n\tvar letterGrades []string\n\tfor _, grade := range grades {\n\t\tswitch {\n\t\tcase grade == 4.0:\n\t\t\tletterGrades = append(letterGrades, \"A+\")\n\t\tcase grade > 3.7:\n\t\t\tletterGrades = append(letterGrades, \"A\")\n\t\tcase grade > 3.3:\n\t\t\tletterGrades = append(letterGrades, \"A-\")\n\t\tcase grade > 3.0:\n\t\t\tletterGrades = append(letterGrades, \"B+\")\n\t\tcase grade > 2.7:\n\t\t\tletterGrades = append(letterGrades, \"B\")\n\t\tcase grade > 2.3:\n\t\t\tletterGrades = append(letterGrades, \"B-\")\n\t\tcase grade > 2.0:\n\t\t\tletterGrades = append(letterGrades, \"C+\")\n\t\tcase grade > 1.7:\n\t\t\tletterGrades = append(letterGrades, \"C\")\n\t\tcase grade > 1.3:\n\t\t\tletterGrades = append(letterGrades, \"C-\")\n\t\tcase grade > 1.0:\n\t\t\tletterGrades = append(letterGrades, \"D+\")\n\t\tcase grade > 0.7:\n\t\t\tletterGrades = append(letterGrades, \"D\")\n\t\tcase grade > 0.0:\n\t\t\tletterGrades = append(letterGrades, \"D-\")\n\t\tdefault:\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t}\n\t}\n\treturn letterGrades\n}\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length <= 1 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1)))*2 - int(math.Pow(10, float64(n-2)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 != 0 && v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = sortWord(word)\n    }\n    return strings.Join(words, \" \")\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}\n"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n    \n    // copy array\n    newArray := make([]int, len(array))\n    copy(newArray, array)\n    \n    // sort\n    if newArray[0]%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(newArray)))\n    } else {\n        sort.Ints(newArray)\n    }\n    \n    return newArray\n}"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            result += string((v-'a'+2*2)%26 + 'a')\n        } else if v >= 'A' && v <= 'Z' {\n            result += string((v-'A'+2*2)%26 + 'A')\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/90", "generation": "\n    if lst == nil || len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    return lst[1]\n}\n"}
{"task_id": "Go/91", "generation": "\n    // split string into sentences\n    sentences := regexp.MustCompile(`[.?!]`).Split(S, -1)\n    count := 0\n    for _, sentence := range sentences {\n        // check if sentence starts with \"I\"\n        if regexp.MustCompile(`^I `).MatchString(sentence) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/92", "generation": "\n\ta, ok1 := x.(int)\n\tb, ok2 := y.(int)\n\tc, ok3 := z.(int)\n\n\tif !ok1 || !ok2 || !ok3 {\n\t\treturn false\n\t}\n\n\treturn a+b == c || a+c == b || b+c == a\n}\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    vowelMap := map[rune]rune{'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    var encoded strings.Builder\n\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            encoded.WriteRune(vowelMap[char])\n        } else if char >= 'a' && char <= 'z' {\n            encoded.WriteRune(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded.WriteRune(char + 32)\n        } else {\n            encoded.WriteRune(char)\n        }\n    }\n\n    return encoded.String()\n}\n"}
{"task_id": "Go/94", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if isPrime(num) {\n            sum += sumDigits(num)\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n    for key := range dict {\n        strKey := key.(string)\n        if strings.ToLower(strKey) != strKey && strings.ToUpper(strKey) != strKey {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n    var primes []int\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a % 10))) * int(math.Abs(float64(b % 10)))\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    num, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n    }\n    if num < 0 {\n        return int(math.Ceil(num - 0.5))\n    }\n    return int(math.Floor(num + 0.5))\n}\n"}
{"task_id": "Go/100", "generation": "\n\tvar result []int\n\tfor i := 0; i < n; i++ {\n\t\tresult = append(result, n+2*i)\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/101", "generation": "\n    // replace commas with spaces\n    s = strings.Replace(s, \",\", \" \", -1)\n    // split string into words\n    words := strings.Fields(s)\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif x > y {\n\t\treturn -1\n\t}\n\treturn y - 1\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := float64(sum) / float64(m-n+1)\n    roundedAvg := int(math.Round(avg))\n    return fmt.Sprintf(\"0b%b\", roundedAvg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var evenDigits []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            evenDigits = append(evenDigits, num)\n        }\n    }\n    sort.Ints(evenDigits)\n    return evenDigits\n}\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var temp []int\n    var temp2 []int\n    var temp3 []int\n    var temp4 []int\n    var temp5 []int\n    var temp6 []int\n    var temp7 []int\n    var temp8 []int\n    var temp9 []int\n    var temp10 []int\n    var temp11 []int\n    var temp12 []int\n    var temp13 []int\n    var temp14 []int\n    var temp15 []int\n    var temp16 []int\n    var temp17 []int\n    var temp18 []int\n    var temp19 []int\n    var temp20 []int\n    var temp21 []int\n    var temp22 []int\n    var temp23 []int\n    var temp24 []int\n    var temp25 []int\n    var temp26 []int\n    var temp27 []int\n    var temp28 []int\n    var temp29 []int\n    var temp30 []int\n    var temp31 []int\n    var temp32 []int\n    var temp33 []int\n    var temp34 []int\n    var temp35 []int\n    var temp36 []int\n    var temp37 []int\n    var temp38 []int\n    var temp39 []int\n    var temp40 []int\n    var temp41 []int\n    var temp42 []int\n    var temp43 []int\n    var temp44 []int\n    var temp45 []int\n    var temp46 []int\n    var temp47 []int\n    var temp48 []int\n    var temp49 []int\n    var temp50 []int\n    var temp51 []int\n    var temp52 []int\n    var temp53 []int\n    var temp54 []int\n    var temp55 []int\n    var temp56 []int\n    var temp57 []int\n    var temp58 []int\n    var temp59 []int\n    var temp60 []int\n    var temp61 []int\n    var temp62 []int\n    var temp63 []int\n    var temp64 []int\n    var temp65 []int\n    var temp66 []int\n    var temp67 []int\n    var temp68 []int\n    var temp69 []int\n    var temp70 []int\n    var temp71 []int\n    var temp72 []int\n    var temp"}
{"task_id": "Go/106", "generation": "\n\tvar result []int\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, factorial(i))\n\t\t} else {\n\t\t\tresult = append(result, sum(i))\n\t\t}\n\t}\n\treturn result\n}\n\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n"}
{"task_id": "Go/107", "generation": "\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num > 0 {\n            count++\n        } else {\n            digits := strconv.Itoa(int(math.Abs(float64(num))))\n            firstDigit := int(digits[0] - '0')\n            if firstDigit < 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    \n    // find index of minimum element\n    minIndex := sort.Search(len(arr), func(i int) bool {\n        return arr[i] < arr[0]\n    })\n    \n    // check if array is already sorted\n    if minIndex == 0 {\n        return true\n    }\n    \n    // check if array is sorted after performing right shift operation\n    for i := 0; i < len(arr); i++ {\n        if arr[(i+minIndex)%len(arr)] != arr[i] {\n            return false\n        }\n    }\n    \n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n    oddCount := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCount++\n        }\n    }\n    evenCount := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCount++\n        }\n    }\n    if oddCount <= evenCount {\n        return \"YES\"\n    }\n    return \"NO\"\n}"}
{"task_id": "Go/111", "generation": "\n    histogram := make(map[rune]int)\n    maxCount := 0\n    for _, char := range test {\n        if char != ' ' {\n            histogram[char]++\n            if histogram[char] > maxCount {\n                maxCount = histogram[char]\n            }\n        }\n    }\n    for key, value := range histogram {\n        if value != maxCount {\n            delete(histogram, key)\n        }\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, v := range s {\n        if strings.ContainsRune(c, v) {\n            continue\n        }\n        result += string(v)\n    }\n    reverse := \"\"\n    for i := len(result) - 1; i >= 0; i-- {\n        reverse += string(result[i])\n    }\n    if result == reverse {\n        return [2]interface{}{reverse, true}\n    }\n    return [2]interface{}{reverse, false}\n}\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, char := range str {\n            if (char-'0')%2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"number of odd elements %dn str%dnng %d %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n\n    for _, num := range nums {\n        currentSum += num\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    var max int\n    for _, row := range grid {\n        var sum int\n        for _, cell := range row {\n            sum += cell\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return int(math.Ceil(float64(max) / float64(capacity)))\n}\n"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if !strings.ContainsRune(vowels, rune(word[i])) && strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i+1])\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 == 0 && v%2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n//"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) == 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/123", "generation": "\n    var result []int\n    for n != 1 {\n        if n % 2 != 0 {\n            result = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n    month, err1 := strconv.Atoi(parts[0])\n    day, err2 := strconv.Atoi(parts[1])\n    year, err3 := strconv.Atoi(parts[2])\n    if err1 != nil || err2 != nil || err3 != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Fields(txt)\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, char := range txt {\n            if char >= 'a' && char <= 'z' {\n                if int(char-'a')%2 == 0 {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/127", "generation": "\n\tstart := max(interval1[0], interval2[0])\n\tend := min(interval1[1], interval2[1])\n\tif start > end {\n\t\treturn \"NO\"\n\t}\n\tlength := end - start + 1\n\tif isPrime(length) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    sum := 0\n    product := 1\n    for _, num := range arr {\n        if num == 0 {\n            return 0\n        }\n        sum += int(math.Abs(float64(num)))\n        if num < 0 {\n            product *= -1\n        }\n    }\n    return sum * product\n}"}
{"task_id": "Go/129", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/130", "generation": "\n\tif n < 0 {\n\t\treturn []float64{}\n\t}\n\tif n == 0 {\n\t\treturn []float64{1}\n\t}\n\tif n == 1 {\n\t\treturn []float64{1, 3}\n\t}\n\tif n == 2 {\n\t\treturn []float64{1, 3, 2}\n\t}\n\tif n == 3 {\n\t\treturn []float64{1, 3, 2, 8}\n\t}\n\tif n == 4 {\n\t\treturn []float64{1, 3, 2, 8, 3}\n\t}\n\tif n == 5 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13}\n\t}\n\tif n == 6 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5}\n\t}\n\tif n == 7 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21}\n\t}\n\tif n == 8 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21, 9}\n\t}\n\tif n == 9 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21, 9, 31}\n\t}\n\tif n == 10 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21, 9, 31, 7}\n\t}\n\tif n == 11 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21, 9, 31, 7, 15}\n\t}\n\tif n == 12 {\n\t\treturn []float64{1, 3, 2, 8, 3, 13, 5, 21, 9, 31, 7, 15, 25}\n\t}\n"}
{"task_id": "Go/131", "generation": "\n    sum := 1\n    hasOdd := false\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n            hasOdd = true\n        }\n        n /= 10\n    }\n    if hasOdd {\n        return sum\n    }\n    return 0\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) > 0\n}"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, v := range lst {\n        sum += int(math.Pow(math.Ceil(v), 2))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/135", "generation": "\n    max := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == max {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var largestNegative, smallestPositive *int\n    for _, num := range lst {\n        if num < 0 {\n            if largestNegative == nil || num > *largestNegative {\n                largestNegative = &num\n            }\n        } else if num > 0 {\n            if smallestPositive == nil || num < *smallestPositive {\n                smallestPositive = &num\n            }\n        }\n    }\n    return [2]interface{}{largestNegative, smallestPositive}\n}"}
{"task_id": "Go/137", "generation": "\n    var aStr, bStr string\n    var aFloat, bFloat float64\n    var err error\n\n    switch a.(type) {\n    case int:\n        aStr = strconv.Itoa(a.(int))\n    case float64:\n        aStr = strconv.FormatFloat(a.(float64), 'f', -1, 64)\n    case string:\n        aStr = a.(string)\n    default:\n        return nil\n    }\n\n    switch b.(type) {\n    case int:\n        bStr = strconv.Itoa(b.(int))\n    case float64:\n        bStr = strconv.FormatFloat(b.(float64), 'f', -1, 64)\n    case string:\n        bStr = b.(string)\n    default:\n        return nil\n    }\n\n    aStr = strings.Replace(aStr, \",\", \".\", -1)\n    bStr = strings.Replace(bStr, \",\", \".\", -1)\n\n    aFloat, err = strconv.ParseFloat(aStr, 64)\n    if err != nil {\n        return nil\n    }\n\n    bFloat, err = strconv.ParseFloat(bStr, 64)\n    if err != nil {\n        return nil\n    }\n\n    if aFloat > bFloat {\n        return a\n    } else if aFloat < bFloat {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n < 4 {\n        return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n == 6 {\n        return false\n    }\n    if n == 8 {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/139", "generation": "\n    result := 1\n    for i := 1; i <= n; i++ {\n        factorial := 1\n        for j := 1; j <= i; j++ {\n            factorial *= j\n        }\n        result *= factorial\n    }\n    return result\n}"}
{"task_id": "Go/140", "generation": "\n    var result string\n    var spaceCount int\n    for _, char := range text {\n        if char == ' ' {\n            spaceCount++\n        } else {\n            if spaceCount > 2 {\n                result += \"-\"\n            } else {\n                result += strings.Repeat(\"_\", spaceCount)\n            }\n            spaceCount = 0\n            result += string(char)\n        }\n    }\n    if spaceCount > 2 {\n        result += \"-\"\n    } else {\n        result += strings.Repeat(\"_\", spaceCount)\n    }\n    return result\n}\n"}
{"task_id": "Go/141", "generation": "\n    var count int = 0\n    var dot int = strings.Index(file_name, \".\")\n    var extension string = file_name[dot+1:]\n    var valid_extensions = []string{\"txt\", \"exe\", \"dll\"}\n\n    if dot == -1 {\n        return \"No\"\n    }\n\n    for _, c := range file_name {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n\n    if count > 3 {\n        return \"No\"\n    }\n\n    if file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z' {\n        return \"No\"\n    }\n\n    for _, valid_extension := range valid_extensions {\n        if extension == valid_extension {\n            return \"Yes\"\n        }\n    }\n\n    return \"No\"\n}"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n            sum += int(math.Pow(float64(v), 2))\n        } else if i % 4 == 0 {\n            sum += int(math.Pow(float64(v), 3))\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Split(sentence, \" \")\n    var result []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator, nDenominator := parseFraction(n)\n\n    // multiply numerators and denominators\n    numerator := xNumerator * nNumerator\n    denominator := xDenominator * nDenominator\n\n    // check if numerator is divisible by denominator\n    return numerator%denominator == 0\n}\n"}
{"task_id": "Go/145", "generation": "\n    sort.SliceStable(nums, func(i, j int) bool {\n        return sumDigits(nums[i]) < sumDigits(nums[j])\n    })\n    return nums\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            firstDigit := strconv.Itoa(num)[0]\n            lastDigit := strconv.Itoa(num)[len(strconv.Itoa(num))-1]\n            if (firstDigit-'0')%2 != 0 && (lastDigit-'0')%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tplanetMap := make(map[string]int)\n\tfor i, planet := range planets {\n\t\tplanetMap[planet] = i\n\t}\n\n\tif _, ok := planetMap[planet1]; !ok {\n\t\treturn []string{}\n\t}\n\tif _, ok := planetMap[planet2]; !ok {\n\t\treturn []string{}\n\t}\n\n\tstart, end := planetMap[planet1], planetMap[planet2]\n\tif start > end {\n\t\tstart, end = end, start\n\t}\n\n\tvar result []string\n\tfor i := start + 1; i < end; i++ {\n\t\tresult = append(result, planets[i])\n\t}\n\n\treturn result\n}\n"}
{"task_id": "Go/149", "generation": "\n    // Remove strings with odd lengths\n    evenLengthStrings := make([]string, 0)\n    for _, str := range lst {\n        if len(str)%2 == 0 {\n            evenLengthStrings = append(evenLengthStrings, str)\n        }\n    }\n\n    // Sort the list by length and then alphabetically\n    sort.Slice(evenLengthStrings, func(i, j int) bool {\n        if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n            return evenLengthStrings[i] < evenLengthStrings[j]\n        }\n        return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n    })\n\n    return evenLengthStrings\n}\n"}
{"task_id": "Go/150", "generation": "\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num >= 0 && math.Mod(num, 2) != 0 {\n            sum += int(math.Pow(num, 2))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i:=0;i<len(game);i++{\n        if game[i]==guess[i]{\n            result = append(result,0)\n        }else{\n            result = append(result,int(math.Abs(float64(game[i]-guess[i]))))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.Inf(-1)\n    strongest_extension := \"\"\n    for _, extension := range extensions {\n        upper_count := 0\n        lower_count := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                upper_count++\n            } else if char >= 'a' && char <= 'z' {\n                lower_count++\n            }\n        }\n        strength := float64(upper_count - lower_count)\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}"}
{"task_id": "Go/154", "generation": "\n    if len(b) > len(a) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i:] + a[:i] == b {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    for _, v := range strconv.Itoa(num) {\n        if int(v-'0')%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    var roman_numerals = []struct {\n        Value  int\n        Symbol string\n    }{\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    }\n\n    var roman strings.Builder\n    for _, numeral := range roman_numerals {\n        for number >= numeral.Value {\n            roman.WriteString(numeral.Symbol)\n            number -= numeral.Value\n        }\n    }\n    return roman.String()\n}\n"}
{"task_id": "Go/157", "generation": "\n    // Sort the sides\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n\n    // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]*sides[2] == sides[0]*sides[0]+sides[1]*sides[1]\n}"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    max := 0\n    var maxWord string\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > max {\n            max = len(uniqueChars)\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n"}
{"task_id": "Go/159", "generation": "\n\tif number+need <= remaining {\n\t\treturn []int{number + need, remaining - number - need}\n\t}\n\treturn []int{number + remaining, 0}\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n    var result string\n    var hasLetter bool\n    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n            hasLetter = true\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n            hasLetter = true\n        } else {\n            result += string(char)\n        }\n    }\n    if !hasLetter {\n        return reverseString(s)\n    }\n    return result\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"}
