{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers)-1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) <= threshold {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/1", "generation": "\n\tvar paren_groups []string\n\tvar open_braces []int\n\tvar current_group string\n\tfor i, c := range paren_string {\n\t\tif c == '(' {\n\t\t\topen_braces = append(open_braces, i)\n\t\t} else if c == ')' {\n\t\t\tif len(open_braces) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tstart := open_braces[len(open_braces)-1]\n\t\t\topen_braces = open_braces[:len(open_braces)-1]\n\t\t\tcurrent_group = paren_string[start+1 : i]\n\t\t\tparen_groups = append(paren_groups, current_group)\n\t\t}\n\t}\n\treturn paren_groups\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Mod(number, 1)\n}"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    sum := 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n\tvar result []int\n\tfor i := 0; i < len(numbers); i++ {\n\t\tresult = append(result, numbers[i])\n\t\tif i != len(numbers)-1 {\n\t\t\tresult = append(result, delimeter)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/6", "generation": "\n    var result []int\n    var stack []int\n    var max_depth int\n    for i, c := range paren_string {\n        if c == '(' {\n            stack = append(stack, i)\n        } else if c == ')' {\n            if len(stack) == 0 {\n                continue\n            }\n            start := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            depth := i - start + 1\n            if depth > max_depth {\n                max_depth = depth\n            }\n            if len(stack) == 0 {\n                result = append(result, max_depth)\n                max_depth = 0\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    max := numbers[0]\n    result := []int{max}\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n        result = append(result, max)\n    }\n\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes); i > 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return str + Reverse(string(runes[:i]))\n        }\n    }\n    return str\n}\n"}
{"task_id": "Go/11", "generation": "\n    if len(a) != len(b) {\n        panic(\"Strings must be of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    maxLen := 0\n    maxStr := \"\"\n    for _, str := range strings {\n        if len(str) > maxLen {\n            maxLen = len(str)\n            maxStr = str\n        }\n    }\n    return maxStr\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[:i+1])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    var s string\n    for i := 0; i <= n; i++ {\n        s += strconv.Itoa(i) + \" \"\n    }\n    return s\n}"}
{"task_id": "Go/16", "generation": "\n    distinct := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        distinct[char] = true\n    }\n    return len(distinct)\n}"}
{"task_id": "Go/17", "generation": "\n    var music []int\n    var note string\n    for _, c := range music_string {\n        if c == ' ' {\n            continue\n        }\n        note += string(c)\n        if note == \"o\" {\n            music = append(music, 4)\n            note = \"\"\n        } else if note == \"o|\" {\n            music = append(music, 2)\n            note = \"\"\n        } else if note == \".|\" {\n            music = append(music, 1)\n            note = \"\"\n        }\n    }\n    return music\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/19", "generation": "\n    // Split the input string into a slice of strings\n    numSlice := strings.Fields(numbers)\n\n    // Create a slice of integers to store the converted numbers\n    intSlice := make([]int, len(numSlice))\n\n    // Convert each string in the slice to an integer and store it in the intSlice\n    for i, num := range numSlice {\n        switch num {\n        case \"zero\":\n            intSlice[i] = 0\n        case \"one\":\n            intSlice[i] = 1\n        case \"two\":\n            intSlice[i] = 2\n        case \"four\":\n            intSlice[i] = 4\n        case \"five\":\n            intSlice[i] = 5\n        case \"six\":\n            intSlice[i] = 6\n        case \"seven\":\n            intSlice[i] = 7\n        case \"eight\":\n            intSlice[i] = 8\n        case \"nine\":\n            intSlice[i] = 9\n        default:\n            // If the string is not a valid number, return an error\n            return \"Error: Invalid number\"\n        }\n    }\n\n    // Sort the intSlice in ascending order\n    sort.Ints(intSlice)\n\n    // Create a slice of strings to store the converted numbers\n    strSlice := make([]string, len(intSlice))\n\n    // Convert each integer in the intSlice to a string and store it in the strSlice\n    for i, num := range intSlice {\n        switch num {\n        case 0:\n            strSlice[i] = \"zero\"\n        case 1:\n            strSlice[i] = \"one\"\n        case 2:\n            strSlice[i] = \"two\"\n        case 4:\n            strSlice[i] = \"four\"\n        case 5:\n            strSlice[i] = \"five\"\n        case 6:\n            strSlice[i] = \"six\"\n        case 7:\n            strSlice[i] = \"seven\"\n        case 8:\n            strSlice[i] = \"eight\"\n        case 9:\n            strSlice[i] = \"nine\"\n        default:\n            // If the integer is not a valid number, return an error\n            return \"Error: Invalid number\"\n        }\n    }\n\n    // Join the strSlice into a single string with spaces between each element\n    result := strings.Join(strSlice, \" \")\n\n    return result\n}\n"}
{"task_id": "Go/20", "generation": "\n\tif len(numbers) < 2 {\n\t\treturn [2]float64{}\n\t}\n\tsort.Float64s(numbers)\n\tvar minDiff float64 = 1e10\n\tvar result [2]float64\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tdiff := numbers[i+1] - numbers[i]\n\t\tif diff < minDiff {\n\t\t\tminDiff = diff\n\t\t\tresult[0] = numbers[i]\n\t\t\tresult[1] = numbers[i+1]\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/21", "generation": "\n\tif len(numbers) < 2 {\n\t\treturn numbers\n\t}\n\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, n := range numbers {\n\t\tif n < min {\n\t\t\tmin = n\n\t\t}\n\t\tif n > max {\n\t\t\tmax = n\n\t\t}\n\t}\n\tif min == max {\n\t\treturn numbers\n\t}\n\tfor i, n := range numbers {\n\t\tnumbers[i] = (n - min) / (max - min)\n\t}\n\treturn numbers\n}\n"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, v := range values {\n\t\tif i, ok := v.(int); ok {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n"}
{"task_id": "Go/25", "generation": "\n    factors := []int{}\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n            i--\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n    var result []int\n    for _, number := range numbers {\n        if !Contains(result, number) {\n            result = append(result, number)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result strings.Builder\n    for _, c := range str {\n        if c >= 'a' && c <= 'z' {\n            result.WriteRune(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result.WriteRune(c + 32)\n        } else {\n            result.WriteRune(c)\n        }\n    }\n    return result.String()\n}"}
{"task_id": "Go/28", "generation": "\n\treturn strings[0] + strings[1] + strings[2]\n}\n"}
{"task_id": "Go/29", "generation": "\n\tvar result []string\n\tfor _, s := range strings {\n\t\tif strings.HasPrefix(s, prefix) {\n\t\t\tresult = append(result, s)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/30", "generation": "\n\tvar positive []int\n\tfor _, v := range l {\n\t\tif v > 0 {\n\t\t\tpositive = append(positive, v)\n\t\t}\n\t}\n\treturn positive\n}\n"}
{"task_id": "Go/31", "generation": "\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tfor i*i <= n {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/32", "generation": "\n    // largest non zero coefficient guarantees\n    // solution\n    for i := len(xs) - 1; i >= 0; i -= 2 {\n        if xs[i] != 0 {\n            return float64(i) / 2\n        }\n    }\n    return 0\n}\n"}
{"task_id": "Go/33", "generation": "\n    // create a new slice to store the sorted values\n    sorted := make([]int, len(l))\n    // copy the values from the original slice to the new slice\n    copy(sorted, l)\n    // sort the values at indicies divisible by three\n    sort.Slice(sorted, func(i, j int) bool {\n        return sorted[i]%3 < sorted[j]%3\n    })\n    return sorted\n}\n"}
{"task_id": "Go/34", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l {\n        if _, ok := m[item]; !ok {\n            m[item] = true\n        }\n    }\n    result := make([]int, 0, len(m))\n    for item := range m {\n        result = append(result, item)\n    }\n    return result\n}\n"}
{"task_id": "Go/35", "generation": "\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i <= n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tif strings.Contains(strconv.Itoa(i), \"7\") {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// create a slice of even indicies\n\teven := make([]int, 0)\n\t// create a slice of odd indicies\n\todd := make([]int, 0)\n\t// iterate over the list\n\tfor i, v := range l {\n\t\t// if the index is even\n\t\tif i%2 == 0 {\n\t\t\t// append the value to the even slice\n\t\t\teven = append(even, v)\n\t\t} else {\n\t\t\t// append the value to the odd slice\n\t\t\todd = append(odd, v)\n\t\t}\n\t}\n\t// sort the even slice\n\tsort.Ints(even)\n\t// create a new slice to store the result\n\tresult := make([]int, 0)\n\t// iterate over the even and odd slices\n\tfor i := 0; i < len(even); i++ {\n\t\t// append the even value to the result slice\n\t\tresult = append(result, even[i])\n\t\t// if there is an odd value\n\t\tif i < len(odd) {\n\t\t\t// append the odd value to the result slice\n\t\t\tresult = append(result, odd[i])\n\t\t}\n\t}\n\t// return the result slice\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\tif n == 6 {\n\t\treturn 233\n\t}\n\tif n == 7 {\n\t\treturn 1597\n\t}\n\tif n == 8 {\n\t\treturn 28657\n\t}\n\tif n == 9 {\n\t\treturn 514229\n\t}\n\tif n == 10 {\n\t\treturn 433494437\n\t}\n\tif n == 11 {\n\t\treturn 2971215073\n\t}\n\tif n == 12 {\n\t\treturn 99194853094755497\n\t}\n\tif n == 13 {\n\t\treturn 1065005695080729359\n\t}\n\tif n == 14 {\n\t\treturn 1134903170\n\t}\n\tif n == 15 {\n\t\treturn 1278525968\n\t}\n\tif n == 16 {\n\t\treturn 1708979837\n\t}\n\tif n == 17 {\n\t\treturn 192900153\n\t}\n\tif n == 18 {\n\t\treturn 249575148\n\t}\n\tif n == 19 {\n\t\treturn 262800212\n\t}\n\tif n == 20 {\n\t\treturn 362780780\n\t}\n\tif n == 21 {\n\t\treturn 53316291173\n\t}\n\tif n == 22 {\n\t\treturn 756872327473\n\t}\n\tif n == 23 {\n\t\treturn 102948193224\n\t}\n\tif n == 24 {\n\t\treturn 1385289810354\n\t}\n\tif n == 25 {\n\t\treturn 1798809874815\n\t}\n\tif n == 26 {\n\t\treturn 24024827138305\n\t}\n\tif n == 27 {\n\t\treturn 316293918598040\n\t}\n\tif n == 28 {\n\t\treturn 427488328406002\n\t}\n\tif n == 29 {\n\t\treturn 570288729542603\n\t}\n\tif n == "}
{"task_id": "Go/40", "generation": "\n    if len(l) < 3 {\n        return false\n    }\n    sort.Ints(l)\n    for i := 0; i < len(l)-2; i++ {\n        if l[i] > 0 {\n            return false\n        }\n        j := i + 1\n        k := len(l) - 1\n        for j < k {\n            if l[i]+l[j]+l[k] == 0 {\n                return true\n            } else if l[i]+l[j]+l[k] < 0 {\n                j++\n            } else {\n                k--\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/41", "generation": "\n\treturn n * (n - 1) / 2\n}\n"}
{"task_id": "Go/42", "generation": "\n\tfor i := range l {\n\t\tl[i]++\n\t}\n\treturn l\n}\n"}
{"task_id": "Go/43", "generation": "\n    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i]+l[j] == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if x < 0 {\n        return \"-\" + ChangeBase(-x, base)\n    }\n    if x < base {\n        return strconv.Itoa(x)\n    }\n    return ChangeBase(x/base, base) + strconv.Itoa(x%base)\n}"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 0\n\t}\n\treturn Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n}\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2\n\t}\n\treturn float64(l[n/2])\n}\n"}
{"task_id": "Go/48", "generation": "\n\tif len(text) == 0 {\n\t\treturn true\n\t}\n\tfor i := 0; i < len(text)/2; i++ {\n\t\tif text[i] != text[len(text)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n % 2 == 0 {\n        return Modp(n/2,p)*Modp(n/2,p)\n    } else {\n        return Modp(n/2,p)*Modp(n/2,p)*p\n    }\n}\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(runes)\n}"}
{"task_id": "Go/51", "generation": "\n    return regexp.MustCompile(\"[aeiouAEIOU]\").ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n    for _,v := range l {\n        if v < t {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n\tif len(s0) != len(s1) {\n\t\treturn false\n\t}\n\tchars := make(map[rune]bool)\n\tfor _, c := range s0 {\n\t\tchars[c] = true\n\t}\n\tfor _, c := range s1 {\n\t\tif !chars[c] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/55", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n\tif len(brackets) == 0 {\n\t\treturn true\n\t}\n\tif len(brackets)%2 != 0 {\n\t\treturn false\n\t}\n\topen := 0\n\tfor _, b := range brackets {\n\t\tif b == '<' {\n\t\t\topen++\n\t\t} else {\n\t\t\topen--\n\t\t}\n\t\tif open < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn open == 0\n}\n"}
{"task_id": "Go/57", "generation": "\n\tif len(l) <= 1 {\n\t\treturn true\n\t}\n\tincreasing := l[0] < l[1]\n\tfor i := 1; i < len(l); i++ {\n\t\tif increasing && l[i] < l[i-1] {\n\t\t\treturn false\n\t\t}\n\t\tif !increasing && l[i] > l[i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/58", "generation": "\n    var result []int\n    for _, v := range l1 {\n        if Contains(l2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    if n <= 1 {\n        return -1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n%2 == 0 {\n        return 2\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return n\n}\n"}
{"task_id": "Go/60", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n + SumToN(n-1)\n}\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if len(stack) == 0 || stack[len(stack)-1] != '(' {\n            return false\n        } else {\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n\tif len(xs) < 2 {\n\t\treturn []int{}\n\t}\n\tcoefficients := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tcoefficients[i-1] = xs[i] * i\n\t}\n\treturn coefficients\n}\n"}
{"task_id": "Go/63", "generation": "\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n}\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    if shift == 0 {\n        return strconv.Itoa(x)\n    }\n    if shift < 0 {\n        shift = -shift\n        x = ReverseDigits(x)\n    }\n    str := strconv.Itoa(x)\n    length := len(str)\n    shift = shift % length\n    if shift == 0 {\n        return str\n    }\n    return str[shift:] + str[:shift]\n}\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, v := range x {\n        if v >= 'A' && v <= 'Z' {\n            sum += int(v)\n        }\n    }\n    return sum\n}package kata\n\nimport (\n    \"testing\"\n)\n\nfunc TestDigitsum(t *testing.T) {\n    t.Log(\"Basic Tests\")\n    if Digitsum(\"\") != 0 {\n        t.Errorf(\"Expected 0, got %v\", Digitsum(\"\"))\n    }\n    if Digitsum(\"abAB\") != 131 {\n        t.Errorf(\"Expected 131, got %v\", Digitsum(\"abAB\"))\n    }\n    if Digitsum(\"abcCd\") != 67 {\n        t.Errorf(\"Expected 67, got %v\", Digitsum(\"abcCd\"))\n    }\n    if Digitsum(\"helloE\") != 69 {\n        t.Errorf(\"Expected 69, got %v\", Digitsum(\"helloE\"))\n    }\n    if Digitsum(\"woArBld\") != 131 {\n        t.Errorf(\"Expected 131, got %v\", Digitsum(\"woArBld\"))\n    }\n    if Digitsum(\"aAaaaXa\") != 153 {\n        t.Errorf(\"Expected 153, got %v\", Digitsum(\"aAaaaXa\"))\n    }\n\n}\n"}
{"task_id": "Go/67", "generation": "\n\t// your code here\n\t// split the string into two parts\n\t// split the first part into two parts\n\t// split the second part into two parts\n\t// convert the second part into an integer\n\t// subtract the first part from the second part\n\t// subtract the second part from the third part\n\t// return the result\n\t// split the string into two parts\n\tparts := strings.Split(s, \" \")\n\t// split the first part into two parts\n\tapples, oranges := parts[0], parts[2]\n\t// split the second part into two parts\n\tapplesCount, _ := strconv.Atoi(apples)\n\torangesCount, _ := strconv.Atoi(oranges)\n\t// convert the second part into an integer\n\ttotalFruits := n\n\t// subtract the first part from the second part\n\tmangoes := totalFruits - applesCount - orangesCount\n\t// subtract the second part from the third part\n\treturn mangoes\n}\n"}
{"task_id": "Go/68", "generation": "\n    if len(arr) == 0 {\n        return []int{}\n    }\n    minEven := math.MaxInt32\n    minIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < minEven {\n            minEven = v\n            minIndex = i\n        }\n    }\n    if minIndex == -1 {\n        return []int{}\n    }\n    return []int{minEven, minIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n\t// create a map to store the frequency of each integer\n\tfreq := make(map[int]int)\n\tfor _, num := range lst {\n\t\tfreq[num]++\n\t}\n\n\t// find the greatest integer with frequency greater than or equal to value\n\tmaxFreq := -1\n\tmaxNum := -1\n\tfor num, count := range freq {\n\t\tif count >= value && count > maxFreq {\n\t\t\tmaxFreq = count\n\t\t\tmaxNum = num\n\t\t}\n\t}\n\n\treturn maxNum\n}\n"}
{"task_id": "Go/70", "generation": "\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n    // Sort the list in ascending order\n    sort.Ints(lst)\n\n    // Initialize the result list\n    result := make([]int, 0, len(lst))\n\n    // Initialize the index for the remaining integers\n    remainingIndex := 0\n\n    // Iterate over the sorted list\n    for i := 0; i < len(lst); i++ {\n        // Add the minimum value to the result list\n        result = append(result, lst[i])\n\n        // If there are remaining integers, add the next minimum value\n        if remainingIndex < len(lst)-1 {\n            result = append(result, lst[remainingIndex+1])\n            remainingIndex++\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    p := (a + b + c) / 2\n    area := math.Sqrt(p * (p - a) * (p - b) * (p - c))\n    return math.Round(area*100) / 100\n}\n"}
{"task_id": "Go/72", "generation": "\n    var sum int\n    for _,v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    if sum % 2 == 0 {\n        return true\n    }\n    return false\n}package kata\n\nimport (\n    \"math\"\n)\n"}
{"task_id": "Go/73", "generation": "\n\t// check if array is already palindromic\n\tif IsPalindromic(arr) {\n\t\treturn 0\n\t}\n\t// find the minimum number of changes needed to make the array palindromic\n\tminChanges := len(arr)\n\tfor i := 0; i < len(arr)/2; i++ {\n\t\tif arr[i] != arr[len(arr)-1-i] {\n\t\t\tminChanges--\n\t\t}\n\t}\n\treturn minChanges\n}\n"}
{"task_id": "Go/74", "generation": "\n    var result []string\n    var count1 int\n    var count2 int\n    for _,v := range lst1 {\n        count1 += len(v)\n    }\n    for _,v := range lst2 {\n        count2 += len(v)\n    }\n    if count1 < count2 {\n        return lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n"}
{"task_id": "Go/75", "generation": "\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= a/2; i++ {\n\t\tif a%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/76", "generation": "\n    if x==1 {\n        return true\n    }\n    if x==n {\n        return true\n    }\n    if x%n!=0 {\n        return false\n    }\n    return IsSimplePower(x/n,n)\n}\n"}
{"task_id": "Go/77", "generation": "\n    if a == 0 {\n        return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    var i int\n    for i = 1; i*i*i <= a; i++ {\n    }\n    return i*i*i == a\n}\n"}
{"task_id": "Go/78", "generation": "\n\tcount := 0\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D', 'F':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}package kata\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n"}
{"task_id": "Go/79", "generation": "\n\t// your code here\n\treturn fmt.Sprintf(\"db%bdb\", decimal)\n}\n"}
{"task_id": "Go/80", "generation": "\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(s)-2; i++ {\n\t\tif s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {\n\t\t\tcontinue\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/81", "generation": "\n\t// TODO: Implement this function\n\treturn nil\n}\n"}
{"task_id": "Go/82", "generation": "\n    if s == \"\" {\n        return false\n    }\n    if len(s) == 1 {\n        return true\n    }\n    if len(s) == 2 {\n        return false\n    }\n    if len(s) == 3 {\n        return true\n    }\n    if len(s) == 5 {\n        return true\n    }\n    if len(s) == 7 {\n        return true\n    }\n    if len(s) == 11 {\n        return true\n    }\n    if len(s) == 13 {\n        return true\n    }\n    if len(s) == 17 {\n        return true\n    }\n    if len(s) == 19 {\n        return true\n    }\n    if len(s) == 23 {\n        return true\n    }\n    if len(s) == 29 {\n        return true\n    }\n    if len(s) == 31 {\n        return true\n    }\n    if len(s) == 37 {\n        return true\n    }\n    if len(s) == 41 {\n        return true\n    }\n    if len(s) == 43 {\n        return true\n    }\n    if len(s) == 47 {\n        return true\n    }\n    if len(s) == 53 {\n        return true\n    }\n    if len(s) == 59 {\n        return true\n    }\n    if len(s) == 61 {\n        return true\n    }\n    if len(s) == 67 {\n        return true\n    }\n    if len(s) == 71 {\n        return true\n    }\n    if len(s) == 73 {\n        return true\n    }\n    if len(s) == 79 {\n        return true\n    }\n    if len(s) == 83 {\n        return true\n    }\n    if len(s) == 89 {\n        return true\n    }\n    if len(s) == 97 {\n        return true\n    }\n    if len(s) == 101 {\n        return true\n    }\n    if len(s) == 103 {\n        return true\n    }\n    if len(s) == 107 {\n        return true\n    }\n    if len(s) == 109 {\n        return true\n    }\n    if len(s) == 113 {\n        return true\n    }\n    if len(s) == 127 {\n        return true\n    }\n    if len(s) == 131 {\n        return true\n    }\n    if len(s)"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(9, float64(n-1)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    // Convert the integer to binary\n    binary := strconv.FormatInt(int64(N), 2)\n    \n    // Initialize a variable to store the sum of digits\n    sum := 0\n    \n    // Iterate through each digit in the binary string\n    for _, digit := range binary {\n        // Convert the digit to an integer and add it to the sum\n        sum += int(digit - '0')\n    }\n    \n    // Convert the sum back to a string and return it\n    return strconv.Itoa(sum)\n}\n\nfunc TestSolve() {\n    fmt.Println(Solve(1000)) // \"1\"\n    fmt.Println(Solve(150))  // \"110\"\n    fmt.Println(Solve(147))  // \"1100\"\n}"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        runes := []rune(word)\n        sort.Slice(runes, func(j, k int) bool {\n            return runes[j] < runes[k]\n        })\n        words[i] = string(runes)\n    }\n    return strings.Join(words, \" \")\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}\n"}
{"task_id": "Go/88", "generation": "\n    copy := make([]int, len(array))\n    copy = append(copy, array...)\n    sort.Ints(copy)\n    if len(array)%2 == 0 {\n        sort.Slice(copy, func(i, j int) bool {\n            return copy[i] > copy[j]\n        })\n    }\n    return copy\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create alphabet string\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    // Create shift string\n    shift := alphabet[2:] + alphabet[:2]\n    // Create encrypted string\n    encrypted := \"\"\n    // Loop through string\n    for _, c := range s {\n        // If character is in alphabet\n        if strings.ContainsRune(alphabet, c) {\n            // Find index of character in alphabet\n            index := strings.IndexRune(alphabet, c)\n            // Find index of character in shift\n            shiftIndex := strings.IndexRune(shift, alphabet[index])\n            // Append character to encrypted string\n            encrypted += string(shift[shiftIndex])\n        } else {\n            // Append character to encrypted string\n            encrypted += string(c)\n        }\n    }\n    // Return encrypted string\n    return encrypted\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != lst[i-1] {\n            return lst[i]\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    // split the string into sentences\n    sentences := regexp.MustCompile(`[.!?]`).Split(S, -1)\n    // count the number of sentences that start with \"I\"\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) > 0 && sentence[0] == 'I' {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/92", "generation": "\n\t// TODO: Your code goes here.\n\treturn false\n}\n"}
{"task_id": "Go/93", "generation": "\n    encoded := \"\"\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n            char = char - 'a' + 'A'\n        }\n        if strings.ContainsRune(\"AEIOU\", char) {\n            char = (char - 'A' + 1) % 26 + 'A'\n        }\n        if strings.ContainsRune(\"BCDFGHJKLMNPQRSTVWXYZ\", char) {\n            char = (char - 'A' + 2) % 26 + 'A'\n        }\n        encoded += string(char)\n    }\n    return encoded\n}\n"}
{"task_id": "Go/94", "generation": "\n    var sum int\n    for _, v := range lst {\n        if isPrime(v) {\n            sum += sumDigits(v)\n        }\n    }\n    return sum\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n    for key := range dict {\n        if _, ok := key.(string); !ok {\n            return false\n        }\n        if !strings.EqualFold(key.(string), strings.ToLower(key.(string))) && !strings.EqualFold(key.(string), strings.ToUpper(key.(string))) {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n\tif n < 2 {\n\t\treturn []int{}\n\t}\n\tvar primes []int\n\tfor i := 2; i <= n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a * b))) % 10\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if strings.ToUpper(string(c)) == string(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    var result int\n    var decimalPart float64\n    var integerPart float64\n    var rounded float64\n\n    // Convert string to float64\n    number, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n    }\n\n    // Split number into integer and decimal parts\n    integerPart = math.Floor(number)\n    decimalPart = number - integerPart\n\n    // Round decimal part to nearest integer\n    rounded = math.Round(decimalPart)\n\n    // Add rounded decimal part to integer part\n    result = int(integerPart + rounded)\n\n    return result\n}\n"}
{"task_id": "Go/100", "generation": "\n\tvar result []int\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, n+i)\n\t\t} else {\n\t\t\tresult = append(result, n+2*i)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/101", "generation": "\n    // split string into words\n    words := strings.Fields(s)\n    // return array of words\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif x > y {\n\t\treturn -1\n\t}\n\treturn y - 1\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    avg := math.Round(float64(n+m) / 2)\n    return fmt.Sprintf(\"0b%b\", int(avg))\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, v := range x {\n        if len(strconv.Itoa(v)) == len(uniqueDigits(strconv.Itoa(v))) {\n            result = append(result, v)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc uniqueDigits(s string) string {\n    var result string\n    for _, v := range s {\n        if !strings.Contains(result, string(v)) {\n            result += string(v)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result, \"One\")\n        case 2:\n            result = append(result, \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n        case 8:\n            result = append(result, \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/107", "generation": "\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc isPalindrome(n int) bool {\n    s := strconv.Itoa(n)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num < 0 {\n            num = -num\n        }\n        sum := 0\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    minIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    if minIndex == 0 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[(i+minIndex)%len(arr)] > arr[(i+minIndex+1)%len(arr)] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n\t// check if lst1 contains odd numbers\n\tfor _, v := range lst1 {\n\t\tif v%2 != 0 {\n\t\t\t// check if lst2 contains even numbers\n\t\t\tfor _, v := range lst2 {\n\t\t\t\tif v%2 == 0 {\n\t\t\t\t\treturn \"YES\"\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"NO\"\n\t\t}\n\t}\n\treturn \"YES\"\n}\n"}
{"task_id": "Go/111", "generation": "\n    var result = make(map[rune]int)\n    var letters = strings.Fields(test)\n    for _, letter := range letters {\n        result[rune(letter[0])]++\n    }\n    return result\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, v := range s {\n        if strings.Contains(c, string(v)) {\n            continue\n        }\n        result += string(v)\n    }\n    return [2]interface{}{result, result == Reverse(result)}\n}\n\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, c := range str {\n            if c%2 == 1 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"number of odd elements %dn str%dng %dn input.\", count, len(str), count))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := math.MaxInt32\n    currentSum := 0\n    for i := 0; i < len(nums); i++ {\n        currentSum += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    // TODO: your code here\n    return 0\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    return arr\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    var result []string\n    words := strings.Fields(s)\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc countConsonants(s string) int {\n    count := 0\n    for _, c := range s {\n        if isConsonant(c) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc isConsonant(c rune) bool {\n    return !isVowel(c) && isLetter(c)\n}\n\nfunc isVowel(c rune) bool {\n    vowels := \"aeiouAEIOU\"\n    return strings.ContainsRune(vowels, c)\n}\n\nfunc isLetter(c rune) bool {\n    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    closestVowel := \"\"\n    minDistance := len(word)\n\n    for i := 1; i < len(word)-1; i++ {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n            if word[i-1] != word[i] && word[i+1] != word[i] {\n                distance := i\n                if distance < minDistance {\n                    minDistance = distance\n                    closestVowel = string(word[i])\n                }\n            }\n        }\n    }\n\n    return closestVowel\n}\n"}
{"task_id": "Go/119", "generation": "\n\tif len(lst) != 2 {\n\t\treturn \"No\"\n\t}\n\tif len(lst[0]) == 0 || len(lst[1]) == 0 {\n\t\treturn \"No\"\n\t}\n\tif lst[0][0] == ')' || lst[1][0] == '(' {\n\t\treturn \"No\"\n\t}\n\tif lst[0][len(lst[0])-1] == '(' || lst[1][len(lst[1])-1] == ')' {\n\t\treturn \"No\"\n\t}\n\treturn \"Yes\"\n}\n"}
{"task_id": "Go/120", "generation": "\n    // sort array\n    sort.Ints(arr)\n    // return array length k\n    return arr[len(arr)-k:]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n"}
{"task_id": "Go/123", "generation": "\n    sequence := []int{n}\n    for n != 1 {\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n        sequence = append(sequence, n)\n    }\n    var oddSequence []int\n    for _, num := range sequence {\n        if num%2 != 0 {\n            oddSequence = append(oddSequence, num)\n        }\n    }\n    sort.Ints(oddSequence)\n    return oddSequence\n}\n"}
{"task_id": "Go/124", "generation": "\n    // check if date string is empty\n    if date == \"\" {\n        return false\n    }\n\n    // check if date string has correct format\n    if !strings.Contains(date, \"-\") {\n        return false\n    }\n\n    // split date string into month, day and year\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n\n    // convert month, day and year to integers\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n        return false\n    }\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return false\n    }\n    year, err := strconv.Atoi(parts[2])\n    if err != nil {\n        return false\n    }\n\n    // check if month, day and year are within valid range\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if year < 1 {\n        return false\n    }\n\n    // check if day is within valid range for the given month\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n\n    // date is valid\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if c >= 'a' && c <= 'z' {\n                count++\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n\tif len(lst) == 0 {\n\t\treturn true\n\t}\n\tfor i := 1; i < len(lst); i++ {\n\t\tif lst[i-1] > lst[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/127", "generation": "\n\t// find the start and end of the intersection\n\tstart := max(interval1[0], interval2[0])\n\tend := min(interval1[1], interval2[1])\n\n\t// if the start is greater than the end, there is no intersection\n\tif start > end {\n\t\treturn \"NO\"\n\t}\n\n\t// check if the length of the intersection is a prime number\n\tif IsPrime(end-start+1) {\n\t\treturn \"YES\"\n\t}\n\n\treturn \"NO\"\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    var sum int\n    for _, num := range arr {\n        if num == 0 {\n            return 0\n        }\n        sum += num / math.Abs(float64(num))\n    }\n    if sum%2 == 0 {\n        return 1\n    }\n    return -1\n}\n"}
{"task_id": "Go/129", "generation": "\n\tn := len(grid)\n\t// 1. find all neighbors\n\t// 2. find all paths\n\t// 3. find min path\n\t// 4. return min path\n\t// 1. find all neighbors\n\tneighbors := make([][]int, n*n)\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tneighbors[grid[i][j]-1] = make([]int, 0)\n\t\t\tif i > 0 {\n\t\t\t\tneighbors[grid[i][j]-1] = append(neighbors[grid[i][j]-1], grid[i-1][j])\n\t\t\t}\n\t\t\tif i < n-1 {\n\t\t\t\tneighbors[grid[i][j]-1] = append(neighbors[grid[i][j]-1], grid[i+1][j])\n\t\t\t}\n\t\t\tif j > 0 {\n\t\t\t\tneighbors[grid[i][j]-1] = append(neighbors[grid[i][j]-1], grid[i][j-1])\n\t\t\t}\n\t\t\tif j < n-1 {\n\t\t\t\tneighbors[grid[i][j]-1] = append(neighbors[grid[i][j]-1], grid[i][j+1])\n\t\t\t}\n\t\t}\n\t}\n\t// 2. find all paths\n\tpaths := make([][]int, 0)\n\tfor i := 0; i < n*n; i++ {\n\t\tpath := make([]int, 0)\n\t\tpath = append(path, i+1)\n\t\tpaths = append(paths, path)\n\t}\n\tfor i := 0; i < k-1; i++ {\n\t\tnewPaths := make([][]int, 0)\n\t\tfor _, path := range paths {\n\t\t\tfor _, neighbor := range neighbors[path[len(path)-1]-1] {\n\t\t\t\tnewPath := make([]int, len(path))\n\t\t\t\tcopy(newPath, path)\n\t\t\t\tnewPath = append(newPath, neighbor)\n\t\t\t\tnewPaths = append(newPaths, newPath)\n\t\t\t}\n\t\t}\n\t\tpaths = newPaths\n\t}\n\t// 3. find min path\n\tminPath := paths[0]\n\tfor _, path := range paths {\n\t\tif lexicographicallyLess(path, minPath) {\n\t\t\tminPath = path\n\t\t}\n\t}\n\t// 4. return min path\n\treturn minPath\n}\n\nfunc lexicographicallyLess(a, b []"}
{"task_id": "Go/130", "generation": "\n\tif n == 0 {\n\t\treturn []float64{}\n\t}\n\tif n == 1 {\n\t\treturn []float64{1}\n\t}\n\tif n == 2 {\n\t\treturn []float64{1, 3}\n\t}\n\tif n == 3 {\n\t\treturn []float64{1, 3, 2, 8}\n\t}\n\tif n == 4 {\n\t\treturn []float64{1, 3, 2, 8, 4}\n\t}\n\tif n == 5 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14}\n\t}\n\tif n == 6 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11}\n\t}\n\tif n == 7 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26}\n\t}\n\tif n == 8 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15}\n\t}\n\tif n == 9 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15, 50}\n\t}\n\tif n == 10 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15, 50, 17}\n\t}\n\tif n == 11 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15, 50, 17, 77}\n\t}\n\tif n == 12 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15, 50, 17, 77, 28}\n\t}\n\tif n == 13 {\n\t\treturn []float64{1, 3, 2, 8, 4, 14, 11, 26, 15, 50, 17, 77, 28, 106}\n\t}\n\tif n == 14 {\n\t\treturn []float64{1, 3, 2, 8,"}
{"task_id": "Go/131", "generation": "\n    sum := 0\n    for n > 0 {\n        digit := n % 10\n        if digit%2 == 0 {\n            return 0\n        }\n        sum += digit\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/132", "generation": "\n\tif len(s) < 2 {\n\t\treturn false\n\t}\n\topen := 0\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\topen++\n\t\t} else if c == ']' {\n\t\t\topen--\n\t\t}\n\t\tif open < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn open == 0\n}\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, num := range lst {\n        sum += int(math.Ceil(num)) * int(math.Ceil(num))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    return lastChar >= 'a' && lastChar <= 'z' || lastChar >= 'A' && lastChar <= 'Z'\n}\n"}
{"task_id": "Go/135", "generation": "\n    if len(arr) == 0 {\n        return -1\n    }\n    sort.Ints(arr)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >= arr[i-1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n"}
{"task_id": "Go/136", "generation": "\n\tif len(lst) == 0 {\n\t\treturn [2]interface{}{nil, nil}\n\t}\n\tif len(lst) == 1 {\n\t\tif lst[0] == 0 {\n\t\t\treturn [2]interface{}{nil, nil}\n\t\t}\n\t\tif lst[0] > 0 {\n\t\t\treturn [2]interface{}{nil, lst[0]}\n\t\t}\n\t\treturn [2]interface{}{lst[0], nil}\n\t}\n\tvar a, b int\n\tfor _, v := range lst {\n\t\tif v < 0 {\n\t\t\tif a == 0 || v > a {\n\t\t\t\ta = v\n\t\t\t}\n\t\t} else if v > 0 {\n\t\t\tif b == 0 || v < b {\n\t\t\t\tb = v\n\t\t\t}\n\t\t}\n\t}\n\treturn [2]interface{}{a, b}\n}\n"}
{"task_id": "Go/137", "generation": "\n    // Convert a and b to float64\n    aFloat, errA := strconv.ParseFloat(fmt.Sprintf(\"%v\", a), 64)\n    bFloat, errB := strconv.ParseFloat(fmt.Sprintf(\"%v\", b), 64)\n\n    // If both a and b are numbers, compare them\n    if errA == nil && errB == nil {\n        if aFloat > bFloat {\n            return a\n        } else if aFloat < bFloat {\n            return b\n        } else {\n            return nil\n        }\n    }\n\n    // If a is a number and b is a string, compare them\n    if errA == nil && errB != nil {\n        if aFloat > bFloat {\n            return a\n        } else if aFloat < bFloat {\n            return b\n        } else {\n            return nil\n        }\n    }\n\n    // If a is a string and b is a number, compare them\n    if errA != nil && errB == nil {\n        if aFloat > bFloat {\n            return a\n        } else if aFloat < bFloat {\n            return b\n        } else {\n            return nil\n        }\n    }\n\n    // If both a and b are strings, compare them\n    if errA != nil && errB != nil {\n        aStr := fmt.Sprintf(\"%v\", a)\n        bStr := fmt.Sprintf(\"%v\", b)\n\n        // Remove commas from strings\n        aStr = strings.ReplaceAll(aStr, \",\", \"\")\n        bStr = strings.ReplaceAll(bStr, \",\", \"\")\n\n        // Convert strings to float64\n        aFloat, errA = strconv.ParseFloat(aStr, 64)\n        bFloat, errB = strconv.ParseFloat(bStr, 64)\n\n        // If both strings are numbers, compare them\n        if errA == nil && errB == nil {\n            if aFloat > bFloat {\n                return a\n            } else if aFloat < bFloat {\n                return b\n            } else {\n                return nil\n            }\n        }\n\n        // If a is a number and b is a string, compare them\n        if errA == nil && errB != nil {\n            if aFloat > bFloat {\n                return a\n            } else if aFloat < bFloat {\n                return b\n            } else {\n                return nil\n            }\n        }\n\n        // If a is a string and b is a number, compare them\n        if errA != nil"}
{"task_id": "Go/138", "generation": "\n\tif n%2 != 0 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= n; i += 2 {\n\t\tif n == i+(n-i) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/139", "generation": "\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * SpecialFactorial(n-1)\n}\n"}
{"task_id": "Go/140", "generation": "\n\ttext = strings.ReplaceAll(text, \" \", \"_\")\n\ttext = strings.ReplaceAll(text, \"__\", \"-\")\n\ttext = strings.ReplaceAll(text, \"---\", \"-\")\n\ttext = strings.ReplaceAll(text, \"___\", \"-\")\n\ttext = strings.ReplaceAll(text, \"____\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_____\", \"-\")\n\ttext = strings.ReplaceAll(text, \"______\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_______\", \"-\")\n\ttext = strings.ReplaceAll(text, \"________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"__________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"___________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"____________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_____________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"______________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_______________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"__________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"___________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"____________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_____________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"______________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_______________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"__________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"___________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"____________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_____________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"______________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_______________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"__________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"___________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"____________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"_____________________________________\", \"-\")\n\ttext = strings.ReplaceAll(text, \"______________________________________"}
{"task_id": "Go/141", "generation": "\n    // Write your code here\n    var result string\n    var count int\n    var dot bool\n    var letter bool\n    var ext bool\n    var exts = []string{\"txt\", \"exe\", \"dll\"}\n\n    for _, c := range file_name {\n        if c >= '0' && c <= '9' {\n            count++\n        } else if c == '.' {\n            dot = true\n        } else if (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') {\n            letter = true\n        }\n    }\n\n    if count > 3 {\n        result = \"No\"\n    } else if !dot {\n        result = \"No\"\n    } else if !letter {\n        result = \"No\"\n    } else {\n        for _, e := range exts {\n            if strings.HasSuffix(file_name, \".\"+e) {\n                ext = true\n                break\n            }\n        }\n        if !ext {\n            result = \"No\"\n        } else {\n            result = \"Yes\"\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += int(math.Pow(float64(v), 3))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var result []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    xNum, xDenom := getNumDenom(x)\n    nNum, nDenom := getNumDenom(n)\n\n    if xNum*nDenom == xDenom*nNum {\n        return true\n    }\n\n    return false\n}\n"}
{"task_id": "Go/145", "generation": "\n    if len(nums) == 0 {\n        return nums\n    }\n    var sumDigits = make([]int, len(nums))\n    for i, num := range nums {\n        sumDigits[i] = sumOfDigits(num)\n    }\n    sort.Slice(nums, func(i, j int) bool {\n        if sumDigits[i] == sumDigits[j] {\n            return i < j\n        }\n        return sumDigits[i] < sumDigits[j]\n    })\n    return nums\n}\n\nfunc sumOfDigits(num int) int {\n    sum := 0\n    for num != 0 {\n        digit := num % 10\n        sum += digit\n        num /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            firstDigit := num\n            lastDigit := num\n            for firstDigit >= 10 {\n                firstDigit /= 10\n            }\n            for lastDigit >= 10 {\n                lastDigit %= 10\n            }\n            if firstDigit%2 == 1 && lastDigit%2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n\ta := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\ta[i] = i*i - i + 1\n\t}\n\tcount := 0\n\tfor i := 0; i < n-2; i++ {\n\t\tfor j := i + 1; j < n-1; j++ {\n\t\t\tfor k := j + 1; k < n; k++ {\n\t\t\t\tif (a[i]+a[j]+a[k])%3 == 0 {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tvar res []string\n\tfor i := 0; i < len(planets); i++ {\n\t\tif planets[i] == planet1 {\n\t\t\tfor j := i + 1; j < len(planets); j++ {\n\t\t\t\tif planets[j] == planet2 {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\tres = append(res, planets[j])\n\t\t\t}\n\t\t}\n\t\tif planets[i] == planet2 {\n\t\t\tfor j := i - 1; j >= 0; j-- {\n\t\t\t\tif planets[j] == planet1 {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\tres = append(res, planets[j])\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n"}
{"task_id": "Go/149", "generation": "\n    // Write your code here\n    var result []string\n    for _, v := range lst {\n        if len(v)%2 == 0 {\n            result = append(result, v)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n"}
{"task_id": "Go/150", "generation": "\n\tif n == 2 {\n\t\treturn x\n\t}\n\tif n%2 == 0 {\n\t\treturn y\n\t}\n\tfor i := 3; i*i <= n; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, v := range lst {\n        if v >= 0 {\n            sum += int(math.Pow(v, 2))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, int(math.Abs(float64(game[i]-guess[i]))))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    var maxStrength float64 = math.Inf(-1)\n    var strongestExtension string = \"\"\n\n    for _, extension := range extensions {\n        capCount := 0\n        lowCount := 0\n\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                capCount++\n            } else if char >= 'a' && char <= 'z' {\n                lowCount++\n            }\n        }\n\n        strength := float64(capCount) - float64(lowCount)\n\n        if strength > maxStrength {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return class_name + \".\" + strongestExtension\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[0] {\n            if a[i:] + a[:i] == b {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    if num < 0 {\n        num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    roman := \"\"\n    for number > 0 {\n        if number >= 1000 {\n            roman += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n            roman += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n            roman += \"d\"\n            number -= 500\n        } else if number >= 400 {\n            roman += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n            number -= 100\n        } else if number >= 90 {\n            roman += \"xc\"\n            number -= 90\n        } else if number >= 50 {\n            roman += \"l\"\n            number -= 50\n        } else if number >= 40 {\n            roman += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n            roman += \"x\"\n            number -= 10\n        } else if number >= 9 {\n            roman += \"ix\"\n            number -= 9\n        } else if number >= 5 {\n            roman += \"v\"\n            number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n            number -= 4\n        } else {\n            roman += \"i\"\n            number -= 1\n        }\n    }\n    return strings.ToLower(roman)\n}\n"}
{"task_id": "Go/157", "generation": "\n\tif a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a {\n\t\treturn true\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/158", "generation": "\n    max := 0\n    result := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > max {\n            max = len(uniqueChars)\n            result = word\n        } else if len(uniqueChars) == max {\n            if word < result {\n                result = word\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFindMax(t *testing.T) {\n    assert.Equal(t, \"string\", FindMax([]string{\"name\", \"string\"}))\n    assert.Equal(t, \"enam\", FindMax([]string{\"name\", \"enam\"}))\n    assert.Equal(t, \"aaaaaaa\", FindMax([]string{\"aaaaaaa\", \"bb\", \"cc\"}))\n}"}
{"task_id": "Go/159", "generation": "\n    if number + need > remaining {\n        return []int{remaining, 0}\n    }\n    return []int{number + need, remaining - number - need}\n}\n"}
{"task_id": "Go/160", "generation": "\n    if len(operator) != len(operand)-1 {\n        return -1\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n            result = result / operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        default:\n            return -1\n    }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n\tvar result string\n\tfor _, v := range s {\n\t\tif unicode.IsLetter(v) {\n\t\t\tif unicode.IsUpper(v) {\n\t\t\t\tresult += strings.ToLower(string(v))\n\t\t\t} else {\n\t\t\t\tresult += strings.ToUpper(string(v))\n\t\t\t}\n\t\t} else {\n\t\t\tresult += string(v)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hash := md5.Sum([]byte(text))\n    return fmt.Sprintf(\"%x\", hash)\n}"}
{"task_id": "Go/163", "generation": "\n\tvar result []int\n\tfor i := a; i <= b; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
