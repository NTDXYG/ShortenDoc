{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let result = [];\n  let stack = [];\n  let current = '';\n\n  for (let char of paren_string.replace(/\\s/g, '')) {\n    if (char === '(') {\n      stack.push(char);\n      current += char;\n    } else if (char === ')') {\n      stack.pop();\n      current += char;\n      if (stack.length === 0) {\n        result.push(current);\n        current = '';\n      }\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const absoluteDeviations = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDeviations.reduce((a, b) => a + b, 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0]];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const max_depths = groups.map(group => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n      } else if (group[i] === ')') {\n        current_depth--;\n      }\n    }\n    return max_depth;\n  });\n  return max_depths;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map(num => {\n    max = Math.max(max, num);\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (string.length === 0) {\n    return '';\n  }\n  let reverseString = string.split('').reverse().join('');\n  for (let i = 0; i < string.length; i++) {\n    if (string.substring(i) === reverseString.substring(0, string.length - i)) {\n      return string + reverseString.substring(string.length - i);\n    }\n  }\n  return string + reverseString.substring(1);\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 1; i <= string.length; i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const uniqueChars = new Set(lowerCaseString);\n  return uniqueChars.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = notes.map(note => {\n    switch (note) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return 1;\n      default:\n        return 0;\n    }\n  });\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let pos = 0;\n\n  while ((pos = string.indexOf(substring, pos)) !== -1) {\n    count++;\n    pos++;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const numObj = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedArray = numArray.sort((a, b) => numObj[a] - numObj[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  let divisor = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const result = [];\n  const seen = new Set();\n\n  for (const num of numbers) {\n    if (!seen.has(num)) {\n      result.push(num);\n      seen.add(num);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  let result = '';\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result += l[i] + ' ';\n    }\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let x = 0;\n  let dx = 1;\n  let epsilon = 1e-6;\n  while (Math.abs(dx) > epsilon) {\n    let fx = evaluate(xs, x);\n    let dfx = evaluateDerivative(xs, x);\n    dx = -fx / dfx;\n    x += dx;\n  }\n  return x;\n};\n\nconst evaluate = (xs, x) => {\n  let result = 0;\n  for (let i = 0; i < xs.length; i++) {\n    result += xs[i] * Math.pow(x, i);\n  }\n  return result;\n};\n\nconst evaluateDerivative = (xs, x) => {\n  let result = 0;\n  for (let i = 1; i < xs.length; i++) {\n    result += i * xs[i] * Math.pow(x, i - 1);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/33", "generation": "\n    let sorted = l.slice().sort((a, b) => a - b);\n    let result = l.map((value, index) => {\n        if (index % 3 === 0) {\n            return sorted.shift();\n        }\n        return value;\n    });\n    return result;\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!result.includes(l[i])) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += i.toString().split('').filter(digit => digit === '7').length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < even.length; i++) {\n    result.push(even[i]);\n    if (odd[i]) {\n      result.push(odd[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      const [a, b, c] = group.split('');\n      decoded += `${c}${a}${b}`;\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n};\n\nconst encodeCyclic = (s) => {\n  let encoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      const [a, b, c] = group.split('');\n      encoded += `${a}${c}${b}`;\n    } else {\n      encoded += group;\n    }\n  }\n  return encoded;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let count = 0;\n  let i = 2;\n  while (true) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    if (isPrime(fib[i])) {\n      count++;\n      if (count === n) {\n        return fib[i];\n      }\n    }\n    i++;\n  }\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      let sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  let seen = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (seen.has(-l[i])) {\n      return true;\n    }\n    seen.add(l[i]);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1 || n === 3) return 0;\n  if (n === 2) return 2;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let result = 1;\n  let base = n;\n\n  while (p > 0) {\n    if (p % 2 === 1) {\n      result = (result * base) % p;\n    }\n    base = (base * base) % p;\n    p = Math.floor(p / 2);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  return s.split('').map(c => String.fromCharCode(c.charCodeAt(0) - 5)).join('');\n};\n\nconst encodeShift = (s) => {\n  return s.split('').map(c => String.fromCharCode(c.charCodeAt(0) + 5)).join('');\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(num => num < t);\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let char of s0) {\n    map.set(char, (map.get(char) || 0) + 1);\n  }\n  for (let char of s1) {\n    if (!map.has(char) || map.get(char) === 0) {\n      return false;\n    }\n    map.set(char, map.get(char) - 1);\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  let inc = true;\n  let dec = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) dec = false;\n    if (l[i] > l[i + 1]) inc = false;\n  }\n  return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let result = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n >>= 1;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n = n / i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  return xs.map((x, i) => x * i).slice(1);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n  let a = 0, b = 0, c = 1, d;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  if (s.endsWith('y') || s.endsWith('Y')) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  let str = x.toString();\n  let len = str.length;\n  shift = shift % len;\n  return str.slice(-shift) + str.slice(0, len - shift);\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallestIndex === -1) {\n    return [];\n  }\n  return [smallestEven, smallestIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n  const keys = Object.keys(freq).map((key) => parseInt(key));\n  keys.sort((a, b) => b - a);\n  for (let i = 0; i < keys.length; i++) {\n    if (freq[keys[i]] >= keys[i]) {\n      return keys[i];\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  let result = [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  while (lst.length > 0) {\n    result.push(min);\n    lst.splice(lst.indexOf(min), 1);\n    if (lst.length > 0) {\n      result.push(max);\n      lst.splice(lst.indexOf(max), 1);\n      max = Math.max(...lst);\n    }\n    min = Math.min(...lst);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const semiPerimeter = (a + b + c) / 2;\n    const area = Math.sqrt(\n      semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c)\n    );\n    return parseFloat(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const isPalindrome = (arr) => {\n    return arr.toString() === arr.slice().reverse().toString();\n  };\n  const isBalanced = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n      if (arr[left] !== arr[right]) {\n        return false;\n      }\n      left++;\n      right--;\n    }\n    return true;\n  };\n  const sum = q.reduce((acc, val) => acc + val, 0);\n  return isPalindrome(q) && isBalanced(q) && sum <= w;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  let count1 = 0;\n  let count2 = 0;\n  lst1.forEach(element => {\n    count1 += element.length;\n  });\n  lst2.forEach(element => {\n    count2 += element.length;\n  });\n  if (count1 < count2) {\n    return lst1;\n  } else if (count1 > count2) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  };\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      count++;\n      a /= i;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) {\n    return x === 1;\n  }\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n  return Math.pow(cubeRoot, 3) === Math.abs(a);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = num.split('');\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    for (let j = 0; j < primeHex.length; j++) {\n      if (hex[i] === primeHex[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] !== s[i + 1] && s[i + 1] !== s[i + 2] && s[i] !== s[i + 2]) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map(grade => {\n    if (grade === 4.0) return 'A+';\n    if (grade > 3.7) return 'A';\n    if (grade > 3.3) return 'A-';\n    if (grade > 3.0) return 'B+';\n    if (grade > 2.7) return 'B';\n    if (grade > 2.3) return 'B-';\n    if (grade > 2.0) return 'C+';\n    if (grade > 1.7) return 'C';\n    if (grade > 1.3) return 'C-';\n    if (grade > 1.0) return 'D+';\n    if (grade > 0.7) return 'D';\n    if (grade > 0.0) return 'D-';\n    return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n  return isPrime(string.length);\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 18 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"110\"\nconsole.log(solve(147)); // \"1100\"\n/*\n  The function solve takes an integer N as input.\n  It initializes a variable sum to 0.\n  It then enters a while loop that continues until N is greater than 0.\n  In each iteration of the loop, it adds the remainder of N divided by 10 to sum and updates N to be the integer part of N divided by 10.\n  After the loop finishes, it returns the binary representation of sum using the toString(2) method.\n*/"}
{"task_id": "JavaScript/85", "generation": "\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      lst[i] += lst[i - 1];\n    }\n  }\n  return lst;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return result;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return [];\n  }\n  const copyArray = [...array];\n  if (copyArray[0] % 2 === 0) {\n    copyArray.sort((a, b) => b - a);\n  } else {\n    copyArray.sort((a, b) => a - b);\n  }\n  return copyArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 4) % 26 + 97);\n    } else if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 4) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (!lst || lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity ? null : secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  const sentences = S.split(/[\\.\\?\\!]\\s*/);\n  let boredCount = 0;\n  for (let sentence of sentences) {\n    if (sentence.startsWith(\"I\")) {\n      boredCount++;\n    }\n  }\n  return boredCount;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z) && (x + y === z || x + z === y || y + z === x);\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    let isUpperCase = char === char.toUpperCase();\n    char = char.toLowerCase();\n\n    if (vowels.includes(char)) {\n      let vowelIndex = alphabet.indexOf(char);\n      let newVowelIndex = (vowelIndex + 2) % 26;\n      char = alphabet[newVowelIndex];\n    }\n\n    char = isUpperCase ? char.toUpperCase() : char.toLowerCase();\n    encodedMessage += char;\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n  };\n\n  let largestPrime = 0;\n\n  for (let num of lst) {\n    if (isPrime(num) && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n\n  return sumDigits(largestPrime);\n};"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const allLower = Object.keys(dict).every((key) =>\n    typeof key === \"string\" && key.toLowerCase() === key\n  );\n  const allUpper = Object.keys(dict).every((key) =>\n    typeof key === \"string\" && key.toUpperCase() === key\n  );\n  return allLower || allUpper;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let product = a * b;\n  let unitDigit = product % 10;\n  return unitDigit;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor < ceil - num ? floor : ceil;\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let current = n;\n  for (let i = 0; i < n; i++) {\n    result.push(current);\n    current += n % 2 === 0 ? 2 : 1;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/).filter(Boolean);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  return y - 1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return `0b${avg.toString(2)}`;\n}"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let even = true;\n    while (num > 0) {\n      let digit = num % 10;\n      if (digit % 2 !== 0) {\n        even = false;\n        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if (even) {\n      result.push(x[i]);\n    }\n  }\n  result.sort((a, b) => a - b);\n  return result;\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst sortArray = (arr) => {\n  const sortArr = arr.sort((a, b) => a - b);\n  const reverseArr = sortArr.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reverseArr.map((num) => {\n    if (num >= 1 && num <= 9) {\n      return names[num - 1];\n    }\n  });\n  return byLength(result);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = Math.abs(arr[i]);\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (arr[i] < 0) {\n      sum = -sum;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (count > 1) return false;\n  return true;\n}"}
{"task_id": "JavaScript/110", "generation": "\n  const oddNumbers = lst1.filter(num => num % 2 !== 0);\n  const evenNumbers = lst2.filter(num => num % 2 === 0);\n  if (oddNumbers.length <= evenNumbers.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const result = {};\n  const arr = test.split(' ');\n  arr.forEach((el) => {\n    if (el) {\n      if (result[el]) {\n        result[el] += 1;\n      } else {\n        result[el] = 1;\n      }\n    }\n  });\n  const max = Math.max(...Object.values(result));\n  const res = {};\n  Object.keys(result).forEach((key) => {\n    if (result[key] === max) {\n      res[key] = max;\n    }\n  });\n  return res;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c) {\n      result += s[i];\n    }\n  }\n  let reversed = result.split('').reverse().join('');\n  let isPalindrome = result === reversed;\n  return [reversed, isPalindrome];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    const oddCount = [...str].filter((char) => parseInt(char) % 2 !== 0).length;\n    return `number of odd elements ${oddCount}n str${oddCount}ng ${oddCount}nput.\"`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(nums[i], currentSum + nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let water = row.reduce((a, b) => a + b, 0);\n    count += Math.ceil(water / capacity);\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('').filter(char => char === '1').length;\n    const bOnes = b.toString(2).split('').filter(char => char === '1').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (!s) return [];\n  const words = s.split(' ');\n  const result = words.filter(word => {\n    const consonants = word.replace(/[aeiou]/gi, '');\n    return consonants.length === n;\n  });\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (!vowels.includes(word[i - 1]) && vowels.includes(word[i]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    arr.push(n);\n  }\n  return arr.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  if (date === '') return false;\n  const dateArr = date.split('-');\n  if (dateArr.length !== 3) return false;\n  const month = parseInt(dateArr[0], 10);\n  const day = parseInt(dateArr[1], 10);\n  const year = parseInt(dateArr[2], 10);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if ((month === 4 || month === 6 || month === 9 || month === 11) && day === 31) return false;\n  if (month === 2 && day > 29) return false;\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(char => char >= 'a' && char <= 'z').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).filter((char, index) => (index + 1) % 2 !== 0).length;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst hasDuplicates = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length !== lst.length;\n};\n\nconst _sorted = (lst) => {\n  if (lst.length <= 1) {\n    return true;\n  }\n  if (hasDuplicates(lst)) {\n    return false;\n  }\n  return isSorted(lst);\n};"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) return 0;\n    product *= Math.sign(arr[i]);\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const N = grid.length;\n  const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const visited = new Set();\n  const dfs = (x, y, path) => {\n    if (path.length === k) {\n      return path;\n    }\n    visited.add(`${x},${y}`);\n    let minPath = [];\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited.has(`${nx},${ny}`)) {\n        const newPath = dfs(nx, ny, path.concat(grid[nx][ny]));\n        if (!minPath.length || newPath.length < minPath.length || (newPath.length === minPath.length && newPath < minPath)) {\n          minPath = newPath;\n        }\n      }\n    }\n    visited.delete(`${x},${y}`);\n    return minPath;\n  };\n  let minPath = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      const path = dfs(i, j, [grid[i][j]]);\n      if (!minPath.length || path.length < minPath.length || (path.length === minPath.length && path < minPath)) {\n        minPath = path;\n      }\n    }\n  }\n  return minPath;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [3];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(i - 1 + i - 2 + i + 1);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  // Check if string is empty\n  if (txt.length === 0) {\n    return false;\n  }\n  // Check if last character is a letter\n  const lastChar = txt[txt.length - 1];\n  return /^[a-zA-Z]$/.test(lastChar);\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] < arr[i + 1]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let neg = lst.filter(n => n < 0);\n  let pos = lst.filter(n => n > 0);\n  return [neg.length ? Math.max(...neg) : null, pos.length ? Math.min(...pos) : null];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  let numA = Number(a.toString().replace(\",\", \".\"));\n  let numB = Number(b.toString().replace(\",\", \".\"));\n  if (numA === numB) return null;\n  return numA > numB ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    let factorial = 1;\n    for (let j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const arr = file_name.split('.');\n  const reg = /^[a-zA-Z]+$/;\n  const reg2 = /^[0-9]{0,3}$/;\n  const arr2 = ['txt', 'exe', 'dll'];\n  if (arr.length === 2 && reg.test(arr[0]) && reg2.test(arr[0]) && arr2.includes(arr[1])) {\n    return 'Yes';\n  }\n  return 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  return lst.reduce((acc, curr, index) => {\n    if (index % 3 === 0) {\n      return acc + Math.pow(curr, 2);\n    } else if (index % 4 === 0) {\n      return acc + Math.pow(curr, 3);\n    } else {\n      return acc + curr;\n    }\n  }, 0);\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeLengthWords = words.filter(word => isPrime(word.length));\n  return primeLengthWords.join(' ');\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const xParts = x.split('/').map(Number);\n  const nParts = n.split('/').map(Number);\n  const xNumerator = xParts[0];\n  const xDenominator = xParts[1];\n  const nNumerator = nParts[0];\n  const nDenominator = nParts[1];\n  const productNumerator = xNumerator * nNumerator;\n  const productDenominator = xDenominator * nDenominator;\n  const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\n  const simplifiedNumerator = productNumerator / gcd(productNumerator, productDenominator);\n  const simplifiedDenominator = productDenominator / gcd(productNumerator, productDenominator);\n  return simplifiedNumerator % simplifiedDenominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumDigits = (num) => {\n      return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    };\n\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  return nums.filter(num => {\n    let strNum = Math.abs(num).toString();\n    let firstDigit = parseInt(strNum.charAt(0));\n    let lastDigit = parseInt(strNum.charAt(strNum.length - 1));\n    return num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0;\n  }).length;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  if (index1 < index2) return planets.slice(index1 + 1, index2);\n  return planets.slice(index2 + 1, index1);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  // filter out strings with odd lengths\n  const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  // sort the filtered list by length, then alphabetically\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b); // sort alphabetically if lengths are equal\n    }\n    return a.length - b.length; // sort by length\n  });\n  return evenLengthStrings;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  const isPrime = (num) => {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if(num % i === 0) return false; \n    return num > 1;\n  }\n  return isPrime(n) ? x : y;\n}"}
{"task_id": "JavaScript/151", "generation": "\n  return lst.reduce((acc, curr) => {\n    if (curr > 0 && curr % 2 !== 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = '';\n  let max = -Infinity;\n  for (let extension of extensions) {\n    let cap = [...extension].filter(char => char === char.toUpperCase()).length;\n    let sm = [...extension].filter(char => char === char.toLowerCase()).length;\n    let strength = cap - sm;\n    if (strength > max) {\n      strongest = extension;\n      max = strength;\n    }\n  }\n  return `${class_name}.${strongest}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (b.length > a.length) return false;\n  let temp = b + b;\n  return temp.includes(a);\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let absNum = Math.abs(num);\n  while (absNum > 0) {\n    let digit = absNum % 10;\n    if (digit % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    absNum = Math.floor(absNum / 10);\n  }\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = [\n    { value: 1000, numeral: 'm' },\n    { value: 900, numeral: 'cm' },\n    { value: 500, numeral: 'd' },\n    { value: 400, numeral: 'cd' },\n    { value: 100, numeral: 'c' },\n    { value: 90, numeral: 'xc' },\n    { value: 50, numeral: 'l' },\n    { value: 40, numeral: 'xl' },\n    { value: 10, numeral: 'x' },\n    { value: 9, numeral: 'ix' },\n    { value: 5, numeral: 'v' },\n    { value: 4, numeral: 'iv' },\n    { value: 1, numeral: 'i' },\n  ];\n\n  let roman = '';\n\n  for (let i = 0; i < romanNumerals.length; i++) {\n    while (number >= romanNumerals[i].value) {\n      roman += romanNumerals[i].numeral;\n      number -= romanNumerals[i].value;\n    }\n  }\n\n  return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  let sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > max) {\n      max = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === max) {\n      if (word < maxWord) {\n        maxWord = word;\n      }\n    }\n  });\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + Math.min(need, remaining);\n  let left = Math.max(remaining - need, 0);\n  return [total, left];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = '';\n  let hasLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n      hasLetter = true;\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n      hasLetter = true;\n    } else {\n      result += s[i];\n    }\n  }\n  return hasLetter ? result : result.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
