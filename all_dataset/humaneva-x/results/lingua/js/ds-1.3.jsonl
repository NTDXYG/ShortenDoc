{"task_id": "JavaScript/0", "generation": "\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n\n  for (let i = 0; i < sortedNumbers.length - 1; i++) {\n    if (Math.abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(temp);\n      temp = '';\n    } else if (paren_string[i] === ')') {\n      temp += ')';\n      if (stack[stack.length - 1] === temp) {\n        stack.pop();\n        result.push(temp);\n        temp = '';\n      } else {\n        temp += ') ';\n      }\n    } else {\n      temp += paren_string[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map((num) => Math.abs(num - mean)).reduce((a, b) => a + b, 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  return groups.map(group => {\n    let count = 0;\n    let max_count = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        count++;\n        if (count > max_count) {\n          max_count = count;\n        }\n      } else if (group[i] === ')') {\n        count--;\n      }\n    }\n    return max_count;\n  });\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  const result = [max];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reverseString = string.split('').reverse().join('');\n  for(let i = string.length; i >= 0; i--){\n    let prefix = string.substring(0, i);\n    let postfix = string.substring(i);\n    if(prefix === reverseString.substring(0, postfix.length)){\n      return string + reverseString.substring(postfix.length);\n    }\n  }\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  let distinctChars = {};\n  let count = 0;\n  for(let i = 0; i < string.length; i++) {\n    let char = string[i].toLowerCase();\n    if(distinctChars[char] === undefined) {\n      distinctChars[char] = true;\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  notes.forEach((note) => {\n    switch (note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n      default:\n        break;\n    }\n  });\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index !== -1) {\n      count++;\n      index += substring.length;\n    } else {\n      break;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  return Object.keys(numberMap)\n    .sort((a, b) => numberMap[a] - numberMap[b])\n    .map(key => numberMap[key]);\n};"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((num) => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for(let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!result.includes(numbers[i])) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  let positive = l.filter((num) => num > 0);\n  return positive;\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let n = xs.length - 1;\n  let h = xs[n];\n  for (let i = n - 1; i >= 0; i--) {\n    h = (h * xs[i]) / (i + 1) + xs[i + 1];\n  }\n  return h;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const thirds = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  let j = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l[i] = thirds[j++];\n    }\n  }\n  return l;\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    count += str.split('7').length - 1;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, i) => i % 2 === 0);\n  return l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v)).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    result += s[i + 1] + s[i + 2] + s[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n\n  let fib = [2, 3, 5, 13, 89];\n  let i = 5;\n\n  while (fib.length < n + 1) {\n    fib[i] = fib[i - 2] + fib[i - 3] + fib[i - 5];\n    i++;\n  }\n\n  return fib[n];\n};"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      let sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  // calculate the number of collisions\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      // if cars are moving in opposite directions\n      if ((i % 2 === 0 && j % 2 !== 0) || (i % 2 !== 0 && j % 2 === 0)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n}\n\nconst list = [5, 3, 2, 3, 9, 0, 123, 6, 4, 3, 10, 1, 124]"}
{"task_id": "JavaScript/43", "generation": "\n  let hashSet = new Set();\n  for (let num of l) {\n    if (hashSet.has(-num)) {\n      return true;\n    }\n    hashSet.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  if (x < base) {\n    return String(x);\n  } else {\n    return changeBase(Math.floor(x / base), base) + String(x % base);\n  }\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n    const reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  return n % p;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      let code = s.charCodeAt(i) + 5;\n      if (code > 'z'.charCodeAt(0)) {\n        code -= 26;\n      }\n      result += String.fromCharCode(code);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n\n  return newText;\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let c of s0) {\n    map.set(c, (map.get(c) || 0) + 1);\n  }\n  for (let c of s1) {\n    if (!map.get(c)) {\n      return false;\n    } else {\n      map.set(c, map.get(c) - 1);\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (brackets[i] === \">\") {\n        if (stack[stack.length - 1] !== \"<\") {\n          return false;\n        }\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  let isIncreasing = l[1] > l[0];\n  let isDecreasing = l[1] < l[0];\n\n  for (let i = 2; i < l.length; i++) {\n    if ((isIncreasing && l[i] > l[i - 1]) || (isDecreasing && l[i] < l[i - 1])) {\n      return false;\n    }\n    isIncreasing = l[i] > l[i - 1];\n    isDecreasing = l[i] < l[i - 1];\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let commonElements = [];\n  for(let i = 0; i < l1.length; i++){\n    for(let j = 0; j < l2.length; j++){\n      if(l1[i] === l2[j]){\n        commonElements.push(l1[i]);\n      }\n    }\n  }\n  return commonElements;\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for(let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === \"(\") {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let derivative = [];\n  for (let i = 1; i < xs[0].length - 1; i++) {\n    derivative.push(xs[0][i - 1] * xs[1][i] + xs[0][i + 1] * xs[2][i]);\n  }\n  return derivative;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    let fibfibArray = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n      fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n    }\n    return fibfibArray[n];\n  }\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  let str = x.toString();\n  let length = str.length;\n  let result = '';\n\n  for (let i = 0; i < length; i++) {\n    let newIndex = (i + shift) % length;\n    result += str[newIndex];\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && isNaN(s[i])) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.match(/\\d+/g).map(Number)\n  return n - apples - oranges\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = [Infinity, -1];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven[0]) {\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven;\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n\n  for (let i = lst.length; i >= 0; i--) {\n    if (freq[i] >= i) return i;\n  }\n\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) {\n    return lst;\n  }\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length !== 0) {\n    result.push(lst.pop());\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const maxPossibleWeight = w / 2;\n  return sum <= maxPossibleWeight;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  if(lst1.length === 0 && lst2.length === 0) return [];\n  let count1 = lst1.reduce((acc, val) => acc + val.length, 0);\n  let count2 = lst2.reduce((acc, val) => acc + val.length, 0);\n  return count1 <= count2 ? lst1 : lst2;\n}"}
{"task_id": "JavaScript/75", "generation": "\n  if (a < 100) {\n    return false;\n  }\n  const primes = [2, 3, 5];\n  for (let i = 0; i < primes.length; i++) {\n    while (a % primes[i] === 0) {\n      a /= primes[i];\n    }\n  }\n  return a === 1;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) return false;\n  if (x === 1) return true;\n  if (n === 2) return true;\n  if (x === 2) return true;\n  if (n === 3) return false;\n  if (x === 3) return false;\n  if (n === 4) return false;\n  if (x === 4) return false;\n  if (n === 5) return false;\n  if (x === 5) return false;\n  if (n === 6) return false;\n  if (x === 6) return false;\n  if (n === 7) return false;\n  if (x === 7) return false;\n  if (n === 8) return false;\n  if (x === 8) return false;\n  if (n === 9) return false;\n  if (x === 9) return false;\n  if (n === 10) return false;\n  if (x === 10) return false;\n  if (n === 11) return false;\n  if (x === 11) return false;\n  if (n === 12) return false;\n  if (x === 12) return false;\n  if (n === 13) return false;\n  if (x === 13) return false;\n  if (n === 14) return false;\n  if (x === 14) return false;\n  if (n === 15) return false;\n  if (x === 15) return false;\n  if (n === 16) return false;\n  if (x === 16) return false;\n  if (n === 17) return false;\n  if (x === 17) return false;\n  if (n === 18) return false;\n  if (x === 18) return false;\n  if (n === 19) return false;\n  if (x === 19) return false;\n  if (n === 20) return false;\n  if (x === 20) return false;\n  if (n === 21) return false;\n  if (x === 21) return false;\n  if (n === 22) return false;\n  if (x === 22) return false;\n  if"}
{"task_id": "JavaScript/77", "generation": "\n    let cube = Math.cbrt(a);\n    return cube === Math.floor(cube);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let count = 0;\n\n  for (let i = 0; i < num.length; i++) {\n    if (hexDigits.includes(num[i])) {\n      count++;\n    } else if (primes.includes(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map(grade => {\n    if (grade === 4.0) return 'A+';\n    else if (grade > 3.7) return 'A';\n    else if (grade > 3.3) return 'A-';\n    else if (grade > 3.0) return 'B+';\n    else if (grade > 2.7) return 'B';\n    else if (grade > 2.3) return 'B-';\n    else if (grade > 2.0) return 'C+';\n    else if (grade > 1.7) return 'C';\n    else if (grade > 1.3) return 'C-';\n    else if (grade > 1.0) return 'D+';\n    else if (grade > 0.7) return 'D';\n    else if (grade > 0.0) return 'D-';\n    else return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return false;\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n < 1) {\n    return 0;\n  }\n  let count = 0;\n  let start = 1;\n  let end = 10;\n  for (let i = 2; i <= n; i++) {\n    start *= 10;\n    end *= 10;\n    end += 9;\n    count += end - start + 1;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  let sum = binary.split('').reduce((a, b) => a + Number(b), 0);\n  return sum;\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sorted = words.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\n  return sorted.join('');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let row = [];\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        row.push([i, j]);\n      }\n    }\n    row.sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n    result.push(row);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  let even = array.filter(num => num % 2 === 0).sort((a, b) => a - b);\n  let odd = array.filter(num => num % 2 !== 0).sort((a, b) => b - a);\n  return [...even, ...odd];\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ' ') {\n      result += ' ';\n    } else {\n      let charCode = s[i].charCodeAt() - 2;\n      if (charCode < 'a'.charCodeAt()) {\n        charCode = String.fromCharCode(97 + (charCode - 'a'.charCodeAt() + 2) % 26);\n      } else {\n        charCode = String.fromCharCode(charCode - 2);\n      }\n      result += charCode;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst === null || lst.length < 2) {\n    return null;\n  }\n  let smallest = Math.min(...lst);\n  lst.splice(lst.indexOf(smallest), 1);\n  if (lst.length === 0) {\n    return null;\n  }\n  let secondSmallest = Math.min(...lst);\n  return secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  const sentences = S.split(/[.?!]/);\n  let count = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else if (char === char.toLowerCase()) {\n      encodedMessage += char.toUpperCase();\n    } else if ('AEIOU'.includes(char)) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let prime = lst.filter((num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false; \n    return num > 1;\n  });\n  let sum = prime.reduce((a, b) => a + b, 0);\n  return sum;\n}\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (key !== key.toLowerCase() && key !== key.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  if (n < 2) return [];\n  let primes = [2];\n  for (let i = 3; i < n; i += 2) {\n    let isPrime = primes.every((prime) => i % prime !== 0);\n    if (isPrime) primes.push(i);\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  let sign = (a < 0) ^ (b < 0) ? -1 : 1;\n  a = Math.abs(a);\n  b = Math.abs(b);\n  let result = 0;\n  for (let i = 0; i < b; i++) {\n    result += a;\n  }\n  return sign * result;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(n + (2 * i));\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.replace(/,/g, ' ').split(' ');\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  let max = Math.floor(y / 2) * 2;\n  if (max < x) {\n    return -1;\n  }\n  return max;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let avg = Math.floor((n + m) / 2);\n  return '0b' + avg.toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for(let i = 0; i < x.length; i++) {\n    if(x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const name = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      result.push(name[arr[i] - 1]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(factorial(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for(let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if(str[0] === str[str.length - 1]) {\n      if(i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for(let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if(num > 0) {\n      count += num.toString().split('').reduce((a, b) => a + +b, 0);\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let evenCount1 = lst1.filter(num => num % 2 === 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (evenCount1 > evenCount2) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let words = test.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (result[words[i]]) {\n      result[words[i]]++;\n    } else {\n      result[words[i]] = 1;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  let isPalindrome = false;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c) {\n      result += s[i];\n    }\n  }\n\n  let reversedResult = result.split('').reverse().join('');\n\n  if (result === reversedResult) {\n    isPalindrome = true;\n  }\n\n  return (result, isPalindrome);\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str, i) => {\n    const oddCount = str.split('').filter(digit => digit % 2 !== 0).length;\n    return `number of odd elements in string ${i+1} input is ${oddCount}`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = nums[0];\n  let currentSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum = Math.min(minSum, currentSum);\n  }\n\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return Math.floor(count / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  const result = [];\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let closestVowel = '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      closestVowel = word[i];\n      break;\n    }\n  }\n  return closestVowel;\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst.join('');\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else if (str[i] === ')') {\n      count--;\n      if (count < 0) {\n        return 'No';\n      }\n    }\n  }\n  if (count === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // return the first k elements of the sorted array\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  return lst.reduce((sum, num, i) => (num % 2 !== 0 && i % 2 === 0) ? sum + num : sum, 0);\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  const collatz = [n];\n  while (n !== 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    collatz.push(n);\n  }\n  return collatz.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const dateParts = date.split('-');\n  if (dateParts.length !== 3) {\n    return false;\n  }\n  const month = parseInt(dateParts[0], 10);\n  const day = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[2], 10);\n\n  if (month < 1 || month > 12 || day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  } else if (month === 2) {\n    if (year % 4 !== 0 || (year % 100 === 0 && year % 400 !== 0)) {\n      if (day > 28) {\n        return false;\n      }\n    } else {\n      if (day > 29) {\n        return false;\n      }\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let sum = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && isNaN(txt[i])) {\n        sum += txt[i].charCodeAt(0) - 96;\n      }\n    }\n    return sum;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  if (lst.length < 2) return true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // check if intervals are overlapping\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\";\n  }\n\n  // check if intersection is a prime number\n  const intersectionStart = Math.max(start1, start2);\n  const intersectionEnd = Math.min(end1, end2);\n  for (let i = 2; i < intersectionEnd; i++) {\n    if (intersectionEnd % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let productSign = 1;\n  let sumMagnitude = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sumMagnitude += Math.abs(arr[i]);\n    productSign *= arr[i] < 0 ? -1 : 1;\n  }\n  return productSign * sumMagnitude;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const m = grid.length;\n  const n = grid[0].length;\n  const visited = new Array(m).fill(0).map(() => new Array(n).fill(false));\n  let res = [];\n  let min = Infinity;\n  let minPath = [];\n\n  const dfs = (x, y, path) => {\n    if (path.length === k) {\n      if (min > path.length) {\n        min = path.length;\n        res = [...path];\n      }\n      return;\n    }\n    if (x < 0 || y < 0 || x >= m || y >= n || visited[x][y]) {\n      return;\n    }\n    visited[x][y] = true;\n    path.push(grid[x][y]);\n    dfs(x - 1, y, [...path]);\n    dfs(x + 1, y, [...path]);\n    dfs(x, y - 1, [...path]);\n    dfs(x, y + 1, [...path]);\n    visited[x][y] = false;\n  };\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, []);\n    }\n  }\n\n  return res;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [1, 3, 2];\n  for(let i = 3; i <= n; i++) {\n    if(i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(i - 1 + i - 2 + i + 1);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map(Math.ceil).reduce((sum, num) => sum + num * num, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) {\n    return false;\n  }\n  return !isNaN(txt[txt.length - 1]);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let sortedArr = arr.slice().sort((a, b) => a - b);\n  let left = 0;\n  let right = sortedArr.length - 1;\n  while (left < right) {\n    if (sortedArr[left] + sortedArr[right] !== arr[left + right]) {\n      return -1;\n    }\n    left++;\n    right--;\n  }\n  return left;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  if (lst.length === 0) return (null, null);\n\n  let negatives = lst.filter(n => n < 0).sort((a, b) => b - a);\n  let positives = lst.filter(n => n > 0).sort((a, b) => a - b);\n\n  if (negatives.length === 0) return (null, positives[0]);\n  if (positives.length === 0) return (negatives[0], null);\n\n  return (negatives[0], positives[0]);\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === 'string' && typeof b === 'string') {\n    if (a.replace(',', '') > b.replace(',', '')) {\n      return a;\n    } else if (a.replace(',', '') < b.replace(',', '')) {\n      return b;\n    } else {\n      return null;\n    }\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a;\n    } else if (a < b) {\n      return b;\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}"}
{"task_id": "JavaScript/138", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * specialFactorial(n - 1);\n  }\n};"}
{"task_id": "JavaScript/140", "generation": "\n  if (text.includes('  ')) {\n    text = text.replace(/\\s{2,}/g, '-');\n  }\n  if (text.includes(' ')) {\n    text = text.replace(/\\s/g, '_');\n  }\n  return text;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const nameParts = file_name.split('.');\n  const name = nameParts[0];\n  const extension = nameParts[1];\n\n  if (name.length > 3 || !/^[a-zA-Z]/.test(name[0])) {\n    return 'No';\n  }\n\n  if (extension !== 'txt' && extension !== 'exe' && extension !== 'dll') {\n    return 'No';\n  }\n\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => {\n    const length = word.length;\n    for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n      if(length % i === 0) return false; \n    return length > 1;\n  });\n  return primeWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const xNum = parseInt(x.split('/')[0]);\n  const xDen = parseInt(x.split('/')[1]);\n  const nNum = parseInt(n.split('/')[0]);\n  const nDen = parseInt(n.split('/')[1]);\n\n  if (xNum * nDen === nNum * xDen) {\n    return true;\n  } else {\n    return `${xNum}/${nDen}`;\n  }\n};"}
{"task_id": "JavaScript/145", "generation": "\n  if (nums.length === 0) return [];\n  return nums.sort((a, b) => {\n    const sumA = String(a).split('').reduce((acc, cur) => acc + Number(cur), 0);\n    const sumB = String(b).split('').reduce((acc, cur) => acc + Number(cur), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const planetIndex1 = planets.indexOf(planet1);\n  const planetIndex2 = planets.indexOf(planet2);\n\n  if (planetIndex1 < 0 || planetIndex2 < 0) {\n    return [];\n  }\n\n  if (planetIndex1 > planetIndex2) {\n    [planetIndex1, planetIndex2] = [planetIndex2, planetIndex1];\n  }\n\n  return planets.slice(planetIndex1 + 1, planetIndex2);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  return lst.filter(word => word.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] >= 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((num, index) => {\n    return Math.abs(num - guess[index]);\n  });\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let maxStrength = -Infinity;\n  let strongestExtension = null;\n\n  for (let extension of extensions) {\n    let cap = extension.match(/[A-Z]/g) ? extension.match(/[A-Z]/g).length : 0;\n    let sm = extension.match(/[a-z]/g) ? extension.match(/[a-z]/g).length : 0;\n    let strength = cap - sm;\n\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = class_name + '.' + extension;\n    }\n  }\n\n  return strongestExtension;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (b.length > a.length) {\n    return false;\n  }\n  let pattern = b;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === pattern[0]) {\n      let match = true;\n      for (let j = 0; j < b.length; j++) {\n        if (a[i + j] !== pattern[j]) {\n          match = false;\n        }\n      }\n      if (match) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let numStr = Math.abs(num).toString();\n\n  for(let i = 0; i < numStr.length; i++) {\n    if(numStr[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n\n  return (even, odd);\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const miniRomanNumerals = [\n    {value: 1000, symbol: 'm'},\n    {value: 900, symbol: 'cm'},\n    {value: 500, symbol: 'd'},\n    {value: 400, symbol: 'cd'},\n    {value: 100, symbol: 'c'},\n    {value: 90, symbol: 'xc'},\n    {value: 50, symbol: 'l'},\n    {value: 40, symbol: 'xl'},\n    {value: 10, symbol: 'x'},\n    {value: 9, symbol: 'ix'},\n    {value: 5, symbol: 'v'},\n    {value: 4, symbol: 'iv'},\n    {value: 1, symbol: 'i'}\n  ];\n\n  let result = '';\n\n  miniRomanNumerals.forEach((numeral) => {\n    while (number >= numeral.value) {\n      result += numeral.symbol;\n      number -= numeral.value;\n    }\n  });\n\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/158", "generation": "\n  return words.sort((a, b) => {\n    if (a.length !== b.length) {\n      return b.length - a.length;\n    } else {\n      return a.localeCompare(b);\n    }\n  })[0];\n}"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  if (s.length === 0) return s;\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i].match(/[a-z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  return md5.update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
