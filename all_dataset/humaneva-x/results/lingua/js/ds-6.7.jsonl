{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let groups = [];\n  let stack = [];\n  let group = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (group) {\n        groups.push(group.trim());\n        group = '';\n      }\n      stack.push(paren_string[i]);\n    } else if (paren_string[i] === ')') {\n      stack.pop();\n      group += paren_string[i];\n      if (stack.length === 0) {\n        groups.push(group.trim());\n        group = '';\n      }\n    } else {\n      group += paren_string[i];\n    }\n  }\n\n  return groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let op of operations) {\n    balance += op;\n    if (balance < 0) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let max_nesting_levels = [];\n  let groups = paren_string.split(' ');\n  for (let group of groups) {\n    let count = 0;\n    let max_count = 0;\n    for (let char of group) {\n      if (char === '(') {\n        count++;\n        if (count > max_count) {\n          max_count = count;\n        }\n      } else if (char === ')') {\n        count--;\n      }\n    }\n    max_nesting_levels.push(max_count);\n  }\n  return max_nesting_levels;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((number) => {\n    max = Math.max(max, number);\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reversed = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substr(0, i) === reversed.substr(reversed.length - i)) {\n      return string + reversed.substr(0, reversed.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (!strings.length) return null;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let sequence = [];\n  for (let i = 0; i <= n; i++) {\n    sequence.push(i);\n  }\n  return sequence.join(' ');\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const distinctCharacters = new Set(lowerCaseString.split(''));\n  return distinctCharacters.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = notes.map((note) => {\n    switch (note) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return 1;\n      default:\n        return 0;\n    }\n  });\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(' ')\n    .sort((a, b) => numMap[a] - numMap[b])\n    .join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  if (numbers.length < 2) {\n    return null;\n  }\n\n  let minDiff = Infinity;\n  let closestPair = [null, null];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(n => (n - min) / (max - min));\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let divisor = 2; n > 1; divisor++) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (counts[numbers[i]]) {\n      counts[numbers[i]]++;\n    } else {\n      counts[numbers[i]] = 1;\n      result.push(numbers[i]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((n) => n > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  let a = xs[0];\n  let b = xs[1];\n  let c = xs[2];\n  let d = xs[3];\n\n  let f = (x) => a + b * x + c * x * x + d * x * x * x;\n  let g = (x) => 2 * b + 4 * c * x + 3 * d * x * x;\n\n  let x = 0.0;\n  for (let i = 0; i < 10000; i++) {\n    if (Math.abs(f(x)) < 1e-6) return x;\n    x = x - f(x) / g(x);\n  }\n  throw \"Method failed after 10000 iterations\";\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.map((el, i) => i % 3 === 0).filter(Boolean);\n  const sorted = divisibleByThree.sort((a, b) => a - b);\n  return l.map((el, i) => (i % 3 === 0 ? sorted.shift() : el));\n};"}
{"task_id": "JavaScript/34", "generation": "\n  const set = new Set(l);\n  return Array.from(set);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().match(/7/g) || []).length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, index) => index % 2 === 0);\n  const sortedEvenIndices = evenIndices.sort((a, b) => a - b);\n\n  return l.map((_, index) =>\n    index % 2 === 0 ? sortedEvenIndices.shift() : l[index]\n  );\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    result += String.fromCharCode(parseInt(s.slice(i, i + 3), 16));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n\n  let i = 0;\n  while (true) {\n    const f = fib(i);\n    if (isPrime(f)) {\n      if (--n === 0) return f;\n    }\n    i++;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) {\n    return false;\n  }\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (i > 0 && l[i] === l[i - 1]) {\n      continue;\n    }\n    let j = i + 1;\n    let k = l.length - 1;\n    while (j < k) {\n      const sum = l[i] + l[j] + l[k];\n      if (sum < 0) {\n        j++;\n      } else if (sum > 0) {\n        k--;\n      } else {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((e, i) => e + i + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  const map = {};\n  for (let i = 0; i < l.length; i++) {\n    if (map[-l[i]]) {\n      return true;\n    }\n    map[l[i]] = true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  return x.toString(base);\n};"}
{"task_id": "JavaScript/45", "generation": "\n    return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = [...l].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n\n  return sorted[middle];\n};"}
{"task_id": "JavaScript/48", "generation": "\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  return ((n % p) + p) % p;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  return l.some(num => num < t)\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const count = (s, c) => [...s].reduce((a, v) => a + (v === c ? 1 : 0), 0);\n  const chars = [...new Set([...s0, ...s1])];\n  return chars.every(c => count(s0, c) === count(s1, c));\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  const bracketPairs = {\n    '<': '>',\n    '(': ')',\n    '[': ']',\n    '{': '}',\n  };\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (bracketPairs[brackets[i]]) {\n      stack.push(brackets[i]);\n    } else {\n      if (brackets[i] !== bracketPairs[stack.pop()]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length <= 2) return true;\n\n  let increasing = null;\n\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      l.splice(i, 1);\n      i--;\n    } else if (l[i] < l[i + 1]) {\n      if (increasing === null) increasing = true;\n      else if (increasing !== true) return false;\n    } else {\n      if (increasing === null) increasing = false;\n      else if (increasing !== false) return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\n  for (let item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  while (factor <= n) {\n    if (n % factor === 0) {\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  const stack = [];\n  const bracketMap = {\n    ')': '(',\n    ']': '[',\n    '}': '{',\n    '>': '<',\n  };\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(' || brackets[i] === '[' || brackets[i] === '{' || brackets[i] === '<') {\n      stack.push(brackets[i]);\n    } else if (stack.length === 0 || bracketMap[brackets[i]] !== stack.pop()) {\n      return false;\n    }\n  }\n\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  const len = xs.length;\n  if (len === 1) return [0];\n  const res = [];\n  for (let i = 1; i < len; i++) {\n    res.push(i * xs[i]);\n  }\n  return res;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n < 0) {\n    return 'Invalid input';\n  }\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let fibfibNums = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fibfibNums[i] = fibfibNums[i - 1] + fibfibNums[i - 2] + fibfibNums[i - 3];\n  }\n  return fibfibNums[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('');\n  for (let i = 0; i < shift; i++) {\n    digits.unshift(digits.pop());\n  }\n  return digits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEvenValue = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEvenValue && arr[i] % 2 === 0) {\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  let max = Math.max(...Object.values(count));\n  for (let i = 1; i <= max; i++) {\n    if (!Object.values(count).includes(i)) return i;\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  while (sorted.length > 0) {\n    result.push(sorted.shift());\n    if (sorted.length > 0) {\n      result.push(sorted.pop());\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const maxWeight = (w * 2) / 3;\n  return sum <= maxWeight;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  return lst1.length < lst2.length ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  if (a < 2) return false;\n  let factors = [];\n  for (let i = 2; i <= a; i++) {\n    while (a % i === 0) {\n      factors.push(i);\n      a /= i;\n    }\n  }\n  return factors.every((n) => isPrime(n)) && factors.length === 3;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n    if (n % i === 0) return false;\n  return n > 1;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) {\n    return x > 1;\n  }\n  while (x > 1) {\n    x /= n;\n    if (x === 1) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let root = Math.round(Math.pow(a, (1 / 3)));\n  return a === root * root * root;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  let count = 0;\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  for (let i = 0; i < num.length; i++) {\n    if (primeHex.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] && s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n  };\n\n  return grades.map((grade) => {\n    for (const key in letterGrades) {\n      if (grade >= parseFloat(key)) {\n        return letterGrades[key];\n      }\n    }\n    return 'E';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return false;\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 9 * (10 ** (n - 2));\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const result = words.map((word) => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n  return result;\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push((i, j));\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return array;\n  if (array[0] % 2 === 1 && array[array.length - 1] % 2 === 1) {\n    return array.slice().sort((a, b) => a - b);\n  } else {\n    return array.slice().sort((a, b) => b - a);\n  }\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s[i].charCodeAt();\n    if ((charCode >= 65 && charCode <= 87) || (charCode >= 97 && charCode <= 119)) {\n      result += String.fromCharCode(charCode + 2);\n    } else if ((charCode >= 88 && charCode <= 90) || (charCode >= 120 && charCode <= 122)) {\n      result += String.fromCharCode(charCode - 24);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst === null || lst.length < 2) {\n    return null;\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n  let secondMin = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      secondMin = min;\n      min = lst[i];\n    } else if (lst[i] < secondMin && lst[i] > min) {\n      secondMin = lst[i];\n    }\n  }\n  return secondMin === Number.MAX_SAFE_INTEGER ? null : secondMin;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let sentences = S.split(/[.?!]/);\n  let count = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith(\"I\")) count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  return (\n    Number.isInteger(x + y + z) &&\n    Number.isInteger(x) &&\n    Number.isInteger(y) &&\n    Number.isInteger(z)\n  );\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n\n    if (vowels.includes(char.toLowerCase())) {\n      encodedMessage += char.toUpperCase();\n    } else if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char;\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const sumDigits = (num) => {\n    let sum = 0, temp;\n    while (num) {\n      temp = num % 10;\n      num = Math.floor(num / 10);\n      sum += temp;\n    }\n    return sum;\n  }\n\n  let maxPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  return sumDigits(maxPrime);\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) return false;\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return (\n    keys.every(key => key === lowerCaseKeys[keys.indexOf(key)]) ||\n    keys.every(key => key === upperCaseKeys[keys.indexOf(key)])\n  );\n};"}
{"task_id": "JavaScript/96", "generation": "\n  if (n < 2) {\n    return [];\n  }\n\n  const sieve = Array(n).fill(true);\n\n  for (let i = 2; i * i <= n; i++) {\n    if (!sieve[i]) continue;\n    for (let j = i * i; j < n; j += i) {\n      sieve[j] = false;\n    }\n  }\n\n  return sieve.reduce((acc, val, i) => (val ? [...acc, i] : acc), []);\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let product = a * b;\n  while (product >= 10) {\n    product = product.toString().split('').reduce((acc, curr) => acc * curr, 1);\n  }\n  return product;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return num < 0 ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      result.push(n + 2 * i);\n    } else {\n      result.push(n + 2 * i);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.replace(/[.,]/g, '').split(/\\s/);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  } else {\n    return y;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return (avg >>> 0).toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  return x.filter((num) => {\n    return num > 0 && num.toString().split('').every((digit) => {\n      return digit % 2 === 0;\n    });\n  }).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/105", "generation": "\n  if (arr.length === 0) return [];\n  const words = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const result = [];\n  const sortedArr = arr\n    .filter((num) => num > 0 && num < 10)\n    .sort((a, b) => a - b);\n  for (let i = sortedArr.length - 1; i >= 0; i--) {\n    result.push(words[sortedArr[i] - 1]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const factorial = (num) => {\n    let result = 1;\n    for (let i = 1; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  };\n\n  const sum = (num) => {\n    let result = 0;\n    for (let i = 1; i <= num; i++) {\n      result += i;\n    }\n    return result;\n  };\n\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2 === 0 ? factorial(i) : sum(i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return (even, odd);\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[(i + 1) % arr.length]) count++;\n  }\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  const oddLst1 = lst1.filter(num => num % 2 !== 0);\n  const evenLst2 = lst2.filter(num => num % 2 === 0);\n  return oddLst1.length <= evenLst2.length ? 'YES' : 'NO';\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const count = {};\n  const words = test.split(' ');\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    count[word] = (count[word] || 0) + 1;\n  }\n\n  let maxCount = 0;\n  for (const key in count) {\n    if (count[key] > maxCount) {\n      maxCount = count[key];\n    }\n  }\n\n  const result = {};\n  for (const key in count) {\n    if (count[key] === maxCount) {\n      result[key] = count[key];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  let isPalindrome = false;\n  let reversedS = s.split('').reverse().join('');\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c) {\n      result += s[i];\n    }\n    if (reversedS[i] !== c) {\n      result += reversedS[i];\n    }\n  }\n  let reversedResult = result.split('').reverse().join('');\n  if (result === reversedResult) {\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str, i) => {\n    const oddDigits = [1, 3, 5, 7, 9].reduce((acc, digit) => {\n      return acc + [...str].filter(char => char === digit.toString()).length;\n    }, 0);\n    return `number of odd elements ${oddDigits}n str${i + 1}ng ${i + 1} ${oddDigits === 1 ? 'nput' : 'nputs'}.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = 0;\n\n  for (let num of nums) {\n    sum += num;\n    min = Math.min(min, sum);\n    if (sum > 0) sum = 0;\n  }\n\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let buckets = 0;\n  let waterUnits = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        waterUnits++;\n      }\n    }\n  }\n\n  while (waterUnits > 0) {\n    buckets++;\n    waterUnits -= capacity;\n  }\n\n  return buckets;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2);\n    const bBinary = b.toString(2);\n\n    const aOnes = aBinary.split('1').length - 1;\n    const bOnes = bBinary.split('1').length - 1;\n\n    return aOnes - bOnes || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === \"\") return [];\n  const words = s.split(\" \");\n  const result = [];\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".includes(char)) {\n        count++;\n      }\n    }\n    if (count === n) result.push(word);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let closestVowel = '';\n  let minDistance = Infinity;\n\n  for (let i = word.length - 1; i >= 0; i--) {\n    const char = word[i];\n    if (vowels.includes(char)) {\n      if (i < minDistance) {\n        closestVowel = char;\n        minDistance = i;\n      }\n    }\n  }\n\n  return closestVowel || '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let s = lst[0] + lst[1];\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(s[i]);\n    } else if (s[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  const sortedArr = arr.sort((a, b) => b - a);\n  return sortedArr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let str = arr[i].toString();\n    if (str.length > 1) {\n      sum += parseInt(str[0]) + parseInt(str[1]);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  const collatz = [n];\n  while (n !== 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    if (n % 2 !== 0) {\n      collatz.push(n);\n    }\n  }\n  return collatz.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split(\"-\");\n  if (dateArray.length !== 3) {\n    return false;\n  }\n  const [month, day, year] = dateArray;\n  if (\n    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    ((month === 4 ||\n      month === 6 ||\n      month === 9 ||\n      month === 11) &&\n      day > 30) ||\n    ((month === 1 ||\n      month === 3 ||\n      month === 5 ||\n      month === 7 ||\n      month === 8 ||\n      month === 10 ||\n      month === 12) &&\n      day > 31)\n  ) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.indexOf(' ') === -1 && txt.indexOf(',') === -1) {\n    const lowerCase = txt.toLowerCase();\n    const alphabetOrder = lowerCase.split('').sort().map((char) => char.charCodeAt(0) - 97);\n    return alphabetOrder;\n  }\n\n  if (txt.indexOf(' ') !== -1) {\n    return txt.split(' ');\n  }\n\n  return txt.split(',');\n};"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] >= lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start + 1;\n  if (length < 2) return \"NO\";\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return \"NO\";\n  return \"YES\";\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1 || arr[i] === -1) {\n      product *= arr[i];\n    } else if (arr[i] === 0) {\n      sum += arr[i];\n    }\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  const path = [];\n  const result = [];\n\n  const dfs = (x, y, k) => {\n    if (k === 0) {\n      result.push([...path]);\n      return;\n    }\n\n    for (let i = 0; i < directions.length; i++) {\n      const nx = x + directions[i][0];\n      const ny = y + directions[i][1];\n\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        visited[nx][ny] = true;\n        path.push(grid[nx][ny]);\n        dfs(nx, ny, k - 1);\n        path.pop();\n        visited[nx][ny] = false;\n      }\n    }\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      visited[i][j] = true;\n      path.push(grid[i][j]);\n      dfs(i, j, k - 1);\n      path.pop();\n      visited[i][j] = false;\n    }\n  }\n\n  result.sort((a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return a[i] - b[i];\n    }\n    return 0;\n  });\n\n  return result[0];\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [1, 3, 2];\n  if (n < 4) {\n    return arr.slice(0, n);\n  } else {\n    for (let i = 3; i < n; i++) {\n      if (i % 2 === 0) {\n        arr.push(1 + i / 2);\n      } else {\n        arr.push((i - 1) + (i - 2) + (i + 1));\n      }\n    }\n    return arr;\n  }\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let arr = String(n).split('');\n  let product = 1;\n  let isOdd = false;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      product *= Number(arr[i]);\n      isOdd = true;\n    }\n  }\n\n  return isOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0 ? false : true;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((acc, curr) => {\n    return acc + Math.pow(Math.ceil(curr), 2);\n  }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(' ');\n  const lastWord = words[words.length - 1];\n  return /[a-z]/i.test(lastWord.slice(-1));\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      max = Math.max(max, arr[i]);\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  if (lst.length === 0) return (null, null);\n\n  let negatives = lst.filter((num) => num < 0);\n  let positives = lst.filter((num) => num > 0);\n\n  if (negatives.length === 0 || positives.length === 0) return (null, null);\n\n  let largestNegative = Math.max(...negatives);\n  let smallestPositive = Math.min(...positives);\n\n  return (largestNegative, smallestPositive);\n};"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === \"string\") a = parseFloat(a.replace(\",\", \".\"));\n  if (typeof b === \"string\") b = parseFloat(b.replace(\",\", \".\"));\n\n  if (a > b) return a;\n  if (b > a) return b;\n  return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  let sum = 0;\n  for (let i = 2; i <= n * 2; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n < 0) {\n    return 'Invalid input. Please enter a positive integer.';\n  }\n  if (n === 0) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n < 0) {\n    return 'Invalid input. Please enter a positive integer.';\n  }\n  if (n === 0) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  return lst.reduce((acc, val, i) => {\n    if (i % 3 === 0) {\n      return acc + Math.pow(val, 2);\n    } else if (i % 4 === 0) {\n      return acc + Math.pow(val, 3);\n    } else {\n      return acc + val;\n    }\n  }, 0);\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let result = '';\n\n  for (let i = 0; i < words.length; i++) {\n    if (primes.includes(words[i].length)) {\n      result += words[i] + ' ';\n    }\n  }\n\n  return result.trim();\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\n  return xNum * nDen === xDen * nNum;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = String(Math.abs(a)).split('').reduce((acc, v) => acc + Number(v), 0);\n    const sumB = String(Math.abs(b)).split('').reduce((acc, v) => acc + Number(v), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      let strNum = Math.abs(nums[i]).toString();\n      if (\n        (strNum[0] === \"1\" ||\n          strNum[0] === \"3\" ||\n          strNum[0] === \"5\" ||\n          strNum[0] === \"7\" ||\n          strNum[0] === \"9\") &&\n        (strNum[strNum.length - 1] === \"1\" ||\n          strNum[strNum.length - 1] === \"3\" ||\n          strNum[strNum.length - 1] === \"5\" ||\n          strNum[strNum.length - 1] === \"7\" ||\n          strNum[strNum.length - 1] === \"9\")\n      ) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  const arr = new Array(n).fill(0).map((_, i) => (i + 1) * (i + 1) - i);\n  const map = {};\n  for (let i = 0; i < n; i++) {\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if ((arr[i] + arr[j]) % 3 === 0) {\n        count += map[(arr[i] + arr[j]) / 3] - 1;\n      }\n    }\n  }\n  return count / 3;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  if (\n    planets.includes(planet1) &&\n    planets.includes(planet2) &&\n    planets.indexOf(planet1) < planets.indexOf(planet2)\n  ) {\n    return planets.slice(planets.indexOf(planet1), planets.indexOf(planet2) + 1);\n  } else {\n    return ();\n  }\n}"}
{"task_id": "JavaScript/149", "generation": "\n  // filter out odd length strings\n  const filteredList = lst.filter((word) => word.length % 2 === 0);\n\n  // sort list by length and alphabetically\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n\n  return sortedList;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n    if (n % i === 0) return y;\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum * 2;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = {\n    name: '',\n    strength: 0,\n  };\n\n  for (let ext of extensions) {\n    let strength =\n      [...ext].filter((c) => c === c.toUpperCase()).length -\n      [...ext].filter((c) => c === c.toLowerCase()).length;\n    if (strength > strongest.strength) {\n      strongest.name = ext;\n      strongest.strength = strength;\n    }\n  }\n\n  return `${class_name}.${strongest.name}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  let c = a + a;\n  return c.includes(b);\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  const digits = Math.abs(num).toString().split('');\n  digits.forEach((digit) => {\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return (num < 0 ? [odd, even] : [even, odd]);\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n  let result = '';\n  let num = number;\n  const keys = Object.keys(map).sort((a, b) => b - a);\n  for (let i = 0; i < keys.length; i++) {\n    while (num >= keys[i]) {\n      num -= keys[i];\n      result += map[keys[i]];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  // sort the sides in ascending order\n  const sides = [a, b, c].sort((a, b) => a - b);\n\n  // calculate the square of the hypotenuse\n  const hypotenuseSquare = Math.pow(sides[2], 2);\n\n  // calculate the sum of the squares of the other two sides\n  const otherSidesSquare = Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n\n  // return true if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n  return hypotenuseSquare === otherSidesSquare;\n};"}
{"task_id": "JavaScript/158", "generation": "\n  const countUniqueChars = (word) =>\n    new Set(word.split('')).size;\n  const maxUniqueChars = Math.max(...words.map(countUniqueChars));\n  const wordsWithMaxUniqueChars = words.filter(word => countUniqueChars(word) === maxUniqueChars);\n  return wordsWithMaxUniqueChars.reduce((a, b) => a < b ? b : a);\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number;\n  if (number < need) {\n    total += remaining;\n    remaining = 0;\n  } else {\n    remaining -= (number - need);\n  }\n  return [total, remaining < 0 ? 0 : remaining];\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"+\":\n        result += operand[i + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n        break;\n      case \"*\":\n        result *= operand[i + 1];\n        break;\n      case \"/\":\n        result /= operand[i + 1];\n        break;\n      case \"**\":\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split('');\n  let reversed = arr.reverse();\n  let result = reversed.join('');\n  return result;\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  let start = Math.min(a, b);\n  let end = Math.max(a, b);\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
