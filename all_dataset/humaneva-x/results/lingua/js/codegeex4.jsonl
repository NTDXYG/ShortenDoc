{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  const paren_array = paren_string.split('');\n  const paren_groups = [];\n  let group = '';\n  let open_braces = 0;\n  for (let i = 0; i < paren_array.length; i++) {\n    if (paren_array[i] === '(') {\n      open_braces += 1;\n    } else if (paren_array[i] === ')') {\n      open_braces -= 1;\n    }\n    if (open_braces === 0) {\n      paren_groups.push(group);\n      group = '';\n    } else {\n      group += paren_array[i];\n    }\n  }\n  return paren_groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  const [integerPart, leftoverPart] = number.toString().split('.');\n  return leftoverPart ? leftoverPart : '0';\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = average(numbers);\n  return numbers.reduce((sum, number) => sum + Math.abs(number - mean), 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const paren_groups = paren_string.split(' ');\n  const paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let level = 0;\n    let max_level = 0;\n    for (let j = 0; j < paren_groups[i].length; j++) {\n      if (paren_groups[i][j] === '(') {\n        level++;\n        if (level > max_level) {\n          max_level = level;\n        }\n      } else if (paren_groups[i][j] === ')') {\n        level--;\n      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter((string) => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((n) => {\n    if (n > max) {\n      max = n;\n    }\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  const reverse = string.split('').reverse().join('');\n  const prefix = string.split('').slice(0, string.length - 1).join('');\n  const postfix = string.split('').slice(1).join('');\n  const prefixReverse = prefix.split('').reverse().join('');\n  const postfixReverse = postfix.split('').reverse().join('');\n  if (string === reverse) {\n    return string;\n  }\n  if (string === prefixReverse) {\n    return string + postfix;\n  }\n  if (string === postfixReverse) {\n    return prefix + string;\n  }\n  return prefixReverse + string + postfix;\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += i + ' ';\n  }\n  return str.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const distinctCharacters = new Set(string.toLowerCase());\n  return distinctCharacters.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const music_notes = music_string.split(' ');\n  const music_notes_values = music_notes.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music_notes_values;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numberArray = numbers.split(' ');\n  const sortedArray = numberArray.sort((a, b) => numberMap[a] - numberMap[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let closest = [numbers[0], numbers[1]];\n  let minDiff = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closest = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value));\n};"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      newString += string[i].toUpperCase();\n    } else {\n      newString += string[i].toLowerCase();\n    }\n  }\n  return newString;\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  let positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = xs.length;\n  let m = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let p = 0;\n "}
{"task_id": "JavaScript/33", "generation": "\n  const l2 = l.map((x, i) => (i % 3 === 2 ? l2[i] : x));\n  const l3 = l2.sort((a, b) => a - b);\n  return l3;\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n}"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < even.length; i++) {\n    result.push(even[i]);\n    result.push(odd[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = \"\";\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c === \" \") {\n      decoded += \" \";\n      i++;\n    } else {\n      let next = s[i + 1];\n      let next2 = s[i + 2];\n      if (next === \" \") {\n        decoded += c;\n        i++;\n      } else if (next2 === \" \") {\n        decoded += c + next;\n        i += 2;\n      } else {\n        decoded += c + next + next2;\n        i += 3;\n      }\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  const fib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  let count = 0;\n  let i = 0;\n  while (count < n) {\n    if (isPrime(fib(i))) {\n      count++;\n    }\n    i++;\n  }\n  return fib(i - 1);\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      let sum = l[i] + l[left] + l[right];\n      if (sum === 0) return true;\n      else if (sum < 0) left++;\n      else right--;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return Math.floor(n / 2);\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 0 ? true : false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + (n - 3) + fib4(n - 4);\n};"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return [sorted[mid - 1], sorted[mid]];\n  } else {\n    return [sorted[mid]];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let r = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      r = (r + p) % 2;\n    }\n    n = Math.floor(n / 2);\n    p = (p + p) % 2;\n  }\n  return r;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[a-z]/i)) {\n      let code = char.charCodeAt(0);\n      if (code >= 65 && code <= 90) {\n        decoded += String.fromCharCode((code - 65 - 5 + 26) % 26 + 65);\n      } else if (code >= 97 && code <= 122) {\n        decoded += String.fromCharCode((code - 97 - 5 + 26) % 26 + 97);\n      }\n    } else {\n      decoded += char;\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const _chars = (s0, s1) => {\n    const chars = {};\n    for (let i = 0; i < s0.length; i++) {\n      const c = s0[i];\n      if (chars[c]) {\n        chars[c]++;\n      } else {\n        chars[c] = 1;\n      }\n    }\n    for (let i = 0; i < s1.length; i++) {\n      const c = s1[i];\n      if (chars[c]) {\n        chars[c]--;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  };\n  return _chars(s0, s1);\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  let increasing = l[0] < l[1];\n  for (let i = 1; i < l.length; i++) {\n    if (increasing && l[i] < l[i - 1]) return false;\n    if (!increasing && l[i] > l[i - 1]) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.includes(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let largest = 2;\n  while (n > largest) {\n    if (n % largest === 0) {\n      n = n / largest;\n    } else {\n      largest++;\n    }\n  }\n  return largest;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split('');\n  const shiftDigits = digits.splice(digits.length - shift, shift);\n  return [...shiftDigits, ...digits].join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[2]);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let smallestEvenIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEvenIndex === -1) {\n    return [];\n  } else {\n    return [smallestEven, smallestEvenIndex];\n  }\n}"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[lst[i]]) {\n      freq[lst[i]]++;\n    } else {\n      freq[lst[i]] = 1;\n    }\n  }\n  const sorted = Object.keys(freq).sort((a, b) => freq[b] - freq[a]);\n  for (let i = 0; i < sorted.length; i++) {\n    if (freq[sorted[i]] >= sorted[i]) {\n      return sorted[i];\n    }\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  let sorted = lst.sort((a, b) => a - b);\n  let result = [];\n  let min = sorted[0];\n  let max = sorted[sorted.length - 1];\n  let minCount = 0;\n  let maxCount = 0;\n  while (minCount < sorted.length / 2 || maxCount < sorted.length / 2) {\n    if (minCount < sorted.length / 2) {\n      result.push(min);\n      minCount++;\n    }\n    if (maxCount < sorted.length / 2) {\n      result.push(max);\n      maxCount++;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c);\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    max += w;\n  }\n  return sum <= max && sum % 2 === max % 2;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  let count1 = 0;\n  let count2 = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    count1 += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    count2 += lst2[i].length;\n  }\n  if (count1 < count2) {\n    return lst1;\n  } else if (count1 > count2) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num > 1;\n  };\n  const factors = [];\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  return factors.length === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 0) return x === 1;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === 0) return false;\n  if (x % n !== 0) return false;\n  return isSimplePower(x / n, n);\n};"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) {\n    a = -a;\n  }\n  let b = Math.pow(a, 1 / 3);\n  return Math.round(b) ** 3 === a;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  const hexDigits = num.split(\"\");\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  let count = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (primes.includes(parseInt(hexDigits[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  return `db${decimal.toString(2)}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2]) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] > 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] > 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] > 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] > 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] > 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] > 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] > 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] > 1.3) {\n      letterGrades.push('C-');\n    } else if (grades[i] > 1.0) {\n      letterGrades.push('D+');\n    } else if (grades[i] > 0.7) {\n      letterGrades.push('D');\n    } else if (grades[i] > 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n  return letterGrades;\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  return primes.includes(length);\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 9 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.map((word) => {\n    const chars = word.split('');\n    const sortedChars = chars.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n    return sortedChars.join('');\n  });\n  return sortedWords.join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n  let copy = [...array];\n  if (copy.length === 0) return [];\n  if (copy[0] % 2 === 0 && copy[copy.length - 1] % 2 === 0) {\n    copy.sort((a, b) => b - a);\n  } else {\n    copy.sort((a, b) => a - b);\n  }\n  return copy;\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index === -1) {\n      encrypted += s[i];\n    } else {\n      encrypted += alphabet[(index + 2 * 2) % 26];\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  if (smallest > secondSmallest) {\n    [smallest, secondSmallest] = [secondSmallest, smallest];\n  }\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let words = S.split(\" \");\n  let sentences = S.split(/[.!?]/);\n  for (let i = 0; i < sentences.length; i++) {\n    let sentence = sentences[i].split(\" \");\n    if (sentence[0] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return x + y === z || x + z === y || y + z === x;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n    } else {\n      letter = letter.toUpperCase();\n    }\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      letter = String.fromCharCode(letter.charCodeAt(0) + 2);\n    }\n    encoded += letter;\n  }\n  return encoded;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n  };\n  const primes = lst.filter((num) => isPrime(num));\n  const sums = primes.map((num) => sumDigits(num));\n  return sums.reduce((acc, curr) => acc + curr, 0);\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  const values = Object.values(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof keys[i] !== \"string\" || typeof values[i] !== \"string\") {\n      return false;\n    }\n    if (keys[i] !== keys[i].toLowerCase() && keys[i] !== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  const unitA = a % 10;\n  const unitB = b % 10;\n  return unitA * unitB;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = Number(value);\n  const floored = Math.floor(num);\n  const ceiled = Math.ceil(num);\n  if (num - floored === 0.5) {\n    return ceiled;\n  }\n  if (num - ceiled === 0.5) {\n    return floored;\n  }\n  return num - floored < ceiled - num ? floored : ceiled;\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    if (stones % 2 === 0) {\n      stones += 2;\n    } else {\n      stones += 2;\n    }\n  }\n  return pile;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n}"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let digits = num.toString().split(\"\");\n    let unique = true;\n    for (let j = 0; j < digits.length; j++) {\n      if (digits.indexOf(digits[j]) !== j) {\n        unique = false;\n        break;\n      }\n    }\n    if (unique) {\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst reverse = (arr) => {\n  return arr.reverse();\n};\n\nconst replace = (arr) => {\n  const names = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  return arr.map((num) => names[num - 1]);\n};\n\nconst sortAndReplace = (arr) => {\n  if (arr.length === 0) return [];\n  const sorted = byLength(arr);\n  const reversed = reverse(sorted);\n  return replace(reversed);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let digits = num.toString().split('');\n    let sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      let digit = parseInt(digits[j]);\n      if (digit > 0) {\n        sum += digit;\n      }\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let shiftedArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n  for (let i = 0; i < shiftedArr.length - 1; i++) {\n    if (shiftedArr[i] > shiftedArr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  if (even === lst1.length) {\n    return \"YES\";\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    for (let j = 0; j < lst2[i].length; j++) {\n      if (lst2[i][j] % 2 === 0) {\n        even++;\n      }\n    }\n  }\n  if (even === lst1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};"}
{"task_id": "JavaScript/111", "generation": "\n  let result = {};\n  let arr = test.split(' ');\n  for (let i = 0; i < arr.length; i++) {\n    if (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n      result[arr[i]] = 1;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = s.split('').filter((el) => !c.includes(el)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 !== 0) {\n        count++;\n      }\n    }\n    return `number of odd elements ${count}n str${str.length}ng ${count}n input`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil(grid[i][j] / capacity);\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    if (a < 0 && b < 0) {\n      return b - a;\n    } else if (a < 0) {\n      return 1;\n    } else if (b < 0) {\n      return -1;\n    } else {\n      return a - b;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = \"aeiouAEIOU\";\n  const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  let vowel = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i]) && consonants.includes(word[i - 1]) && consonants.includes(word[i + 1])) {\n      vowel = word[i];\n      break;\n    }\n  }\n  return vowel;\n}"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst[0] + lst[1];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i].toString().split('').reduce((a, b) => a + Number(b), 0);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  const collatz = [n];\n  while (n !== 1) {\n    n = n % 2 === 0 ? n / 2 : n * 3 + 1;\n    collatz.push(n);\n  }\n  return collatz.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const dateArr = date.split('-');\n  if (dateArr.length !== 3) {\n    return false;\n  }\n  const month = parseInt(dateArr[0], 10);\n  const day = parseInt(dateArr[1], 10);\n  const year = parseInt(dateArr[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) {\n    return false;\n  }\n  if (year < 1) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.indexOf(' ') === -1) {\n    return txt.split(',');\n  }\n  return txt.split(' ');\n};"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if (start > end) return \"NO\";\n  const length = end - start + 1;\n  if (length === 1) return \"NO\";\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return \"NO\";\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) return 0;\n    product *= arr[i] > 0 ? 1 : -1;\n  }\n  return product;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  const dist = Array.from({ length: n }, () => Array(n).fill(Infinity));\n  const queue = [[0, 0]];\n  dist[0][0] = grid[0][0];\n  while (queue.length) {\n    const [x, y] = queue.shift();\n    for (const [dx, dy] of dirs) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n        const newDist = dist[x][y] + grid[nx][ny];\n        if (newDist < dist[nx][ny]) {\n          dist[nx][ny] = newDist;\n          queue.push([nx, ny]);\n        }\n      }\n    }\n  }\n  const path = [];\n  let x = n - 1;\n  let y = n - 1;\n  while (x > 0 || y > 0) {\n    path.unshift(grid[x][y]);\n    let minDist = Infinity;\n    let minDir = null;\n    for (const [dx, dy] of dirs) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && dist[nx][ny] < minDist) {\n        minDist = dist[nx][ny];\n        minDir = [dx, dy];\n      }\n    }\n    x += minDir[0];\n    y += minDir[1];\n  }\n  path.unshift(grid[0][0]);\n  return path;\n};\n/* grid with N rows N columns (N >= 2) positive integer k\n   each cell contains value Every integer in range [1, N * N]\n   appears once on cells grid.\n   find minimum path of length k in grid start\n   from any cell move to neighbor cells\n   go to cells share edge with current\n   cell\n   path of length k means visiting k cells (not\n   distinct).\n   CANNOT go off grid.\n   path A (of length k) less than path B (of length k) if\n   after ordered lists of values on cells A and B\n   through lst_A and lst_B"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 1) return [3];\n  if (n === 2) return [1, 3];\n  if (n === 3) return [1, 3, 2];\n  let arr = [1, 3, 2];\n  for (let i = 3; i < n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let isEven = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 === 0) {\n      isEven = true;\n    } else {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return isEven ? 0 : product;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt[txt.length - 1];\n  const lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  const lastCharIsNotPartOfWord = txt[txt.length - 2] === \" \";\n  return lastCharIsALetter && lastCharIsNotPartOfWord;\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let a = null;\n  let b = null;\n  if (lst.length === 0) {\n    return [a, b];\n  }\n  if (lst.length === 1) {\n    if (lst[0] < 0) {\n      return [a, b];\n    }\n    if (lst[0] > 0) {\n      return [a, lst[0]];\n    }\n  }\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      a = lst[i];\n    }\n    if (lst[i] > 0) {\n      b = lst[i];\n      break;\n    }\n  }\n  return [a, b];\n};"}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) return null;\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a.includes(\".\") || b.includes(\".\")) {\n      return Number(a) > Number(b) ? a : b;\n    } else {\n      return Number(a) > Number(b) ? a : b;\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a.includes(\".\")) {\n      return Number(a) > b ? a : b;\n    } else {\n      return Number(a) > b ? a : b;\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (b.includes(\".\")) {\n      return a > Number(b) ? a : b;\n    } else {\n      return a > Number(b) ? a : b;\n    }\n  } else {\n    return a > b ? a : b;\n  }\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 4) return false;\n  for (let i = 2; i <= n; i += 2) {\n    if (n - i < 2) return false;\n    if (n - i % 2 === 0) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n < 0) {\n    throw new Error('Input must be a positive integer');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s+/g, ' ');\n  newText = newText.replace(/\\s{2,}/g, '-');\n  newText = newText.replace(/\\s/g, '_');\n  return newText;\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regExp = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/;\n  return regExp.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(\" \");\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (primeNumbers.includes(words[i].length)) {\n      result.push(words[i]);\n    }\n  }\n  return result.join(\" \");\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [x1, x2] = x.split('/').map(Number);\n  const [n1, n2] = n.split('/').map(Number);\n  const gcd = (a, b) => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  const common = gcd(x1, x2);\n  const common2 = gcd(n1, n2);\n  const x3 = x1 / common;\n  const x4 = x2 / common;\n  const n3 = n1 / common2;\n  const n4 = n2 / common2;\n  if (x3 * n4 === x4 * n3) return true;\n  return `${x3}/${x4} * ${n3}/${n4}`;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    const sumB = b.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      let firstDigit = Math.abs(nums[i]).toString()[0];\n      let lastDigit = Math.abs(nums[i]).toString().slice(-1);\n      if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n  return planets.slice(start, end);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n}"}
{"task_id": "JavaScript/150", "generation": "\n  if (n < 2) return y;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return y;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].length - extensions[i].toLowerCase().length > strongest.length - strongest.toLowerCase().length) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  let i = 0;\n  let j = 0;\n  while (i < a.length) {\n    if (a[i] === b[j]) {\n      j++;\n      if (j === b.length) {\n        return true;\n      }\n    }\n    i++;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n  let result = '';\n  for (let key in roman) {\n    while (number >= key) {\n      result += roman[key];\n      number -= key;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n};"}
{"task_id": "JavaScript/158", "generation": "\n  let max = 0;\n  let result = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = {};\n    for (let j = 0; j < words[i].length; j++) {\n      if (count[words[i][j]]) {\n        count[words[i][j]]++;\n      } else {\n        count[words[i][j]] = 1;\n      }\n    }\n    if (Object.keys(count).length > max) {\n      max = Object.keys(count).length;\n      result = words[i];\n    } else if (Object.keys(count).length === max) {\n      if (words[i] < result) {\n        result = words[i];\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/159", "generation": "\n  let eaten = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    eaten = eaten + left;\n    left = 0;\n  }\n  return [eaten, left];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '%':\n        result %= operand[i + 1];\n        break;\n      case '**':\n        result **= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let str = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      str += s[i].toUpperCase();\n    } else {\n      str += s[i].toLowerCase();\n    }\n  }\n  if (str.match(/[a-z]/i)) {\n    return str;\n  } else {\n    return str.split('').reverse().join('');\n  }\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
