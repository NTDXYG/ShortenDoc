{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) <= threshold) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else if (paren_string[i] === ')') {\n      if (stack.length > 0) {\n        stack.pop();\n        if (stack.length === 0) {\n          result.push(paren_string.slice(result.length * 2, i + 1));\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = mean(numbers);\n  return numbers.reduce((sum, x) => sum + Math.abs(x - mean), 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i > 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const max_depth = Math.max(...groups.map((group) => {\n    let depth = 0;\n    let max_depth = 0;\n    for (const char of group) {\n      if (char === '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else if (char === ')') {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }));\n  return groups.map((group) => {\n    let depth = 0;\n    let max_depth = 0;\n    for (const char of group) {\n      if (char === '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else if (char === ')') {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  });\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n// Filter input list strings substring\nfilterBySubstring([], 'a')\n\n// Filter input list strings substring\nfilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array'] */\n\n\n\n// Filter input list strings substring\nconst filterBySubstring = (strings, substring) => {\n  return"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n  let prefix = '';\n  let suffix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] === string[j]) {\n      prefix += string[i];\n      suffix = string[j] + suffix;\n      i += 1;\n      j -= 1;\n    } else {\n      break;\n    }\n  }\n  return prefix + suffix + prefix.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1' && b[i] === '1') ? '0' : '1';\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n} */\n\n// Return first string same length Return None input list empty.\n/* list strings return first one same length Return None input list empty.\n   >>> firstsame(['a', 'b', 'c'])\n   'a'\n   >>> firstsame(['a', 'bb', 'ccc'])\n   'a'\n   >>> firstsame([])\n   None */\nconst firstsame = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length === first.length) {\n      return first;\n    }\n  }\n  return first;\n} */\n\n// Return first string same length Return None input list empty.\n/* list strings return first one same length Return None input list empty.\n   >>> firstsame(['a', 'b', 'c'])\n   'a'\n   >>> firstsame(['a', 'bb', 'ccc'])\n   'a'\n   >>> firstsame([])\n   None */\nconst firstsame = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length === first.length) {\n      return first;\n    }\n  }\n  return first;\n} */\n\n// Return first string same length Return None input list empty.\n/* list strings return first one same length Return None input list empty.\n   >>> firstsame(['a', 'b', 'c'])\n   'a'\n   >>> firstsame(['a', 'bb', 'ccc'])\n   'a'\n   >>> firstsame([])\n   None */\nconst firstsame = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let first = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length === first.length) {\n      return first;\n    }\n  }\n  return first;\n} */\n\n// Return first string same length Return None input list empty"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n}"}
{"task_id": "JavaScript/14", "generation": "\n  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const charSet = new Set(lowerCaseString);\n  return charSet.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = notes.map((note) => {\n    if (note === 'o') return 4;\n    if (note === 'o|') return 2;\n    if (note === '.|') return 1;\n    return 0;\n  });\n  return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const sortedNums = numArray.sort((a, b) => {\n    const numA = getNumber(a);\n    const numB = getNumber(b);\n    return numA - numB;\n  });\n  return sortedNums.join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  const sorted = numbers.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  const left = sorted.slice(0, mid);\n  const right = sorted.slice(mid);\n  const closest = [];\n  let min = Infinity;\n  for (let i = 0; i < left.length; i++) {\n    const diff = Math.abs(left[i] - right[i]);\n    if (diff < min) {\n      min = diff;\n      closest = [left[i], right[i]];\n    }\n  }\n  return closest;\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  let divisor = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n = n / divisor;\n    }\n    divisor++;\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  return [...new Set(numbers)];\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}\n\n// console.log(flipCase('Hello')); // 'hELLO'\n\n// 2. Given an array of numbers, return a new array with each number multiplied by 2\n   /* given array of numbers double each number\n   double_numbers([1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10] */\nconst doubleNumbers = (array) => {\n  return array.map(num => num * 2);\n}\n\n// console.log(doubleNumbers([1, 2, 3, 4, 5])); // [2, 4, 6, 8, 10]\n\n// 3. Given an object, return a new object with the same keys but with the values doubled\n   /* given object double each value\n   double_values({a: 1, b: 2, c: 3})\n  {a: 2, b: 4, c: 6} */\nconst doubleValues = (object) => {\n  return Object.keys(object).reduce((acc, key) => {\n    acc[key] = object[key] * 2;\n    return acc;\n  }, {});\n}\n\n// console.log(doubleValues({a: 1, b: 2, c: 3})); // {a: 2, b: 4, c: 6}\n\n// 4. Given an array of strings, return a new array with each string reversed\n   /* given array of strings reverse each string\n   reverse_strings(['hello', 'world'])\n  ['olleh', 'dlrow'] */\nconst reverseStrings = (array) => {\n  return array.map(string => string.split('').reverse().join(''));\n}\n\n// console.log(reverseStrings(['hello', 'world'])); // ['olleh', 'dlrow']\n\n// 5. Given an object, return a new object with the same keys but with the values incremented by 1\n   /* given object increment each value\n   increment_values({a: 1, b: 2, c: 3})\n  {a: 2, b: 3, c: 4} */\nconst incrementValues = (object) => {\n  return Object.keys(object).reduce((acc, key) => {\n    acc[key] = object[key] + 1;\n    return acc"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}\n\n// Filter input list strings start prefix\nfilterByPrefix([], 'a')\n// Output: []\n\nfilterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// Output: ['abc', 'array'] */"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n}\n\n// Test cases\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // 5 6\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1])); // 3 2 9 123 1\n"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const f = (x) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n      result += xs[i] * Math.pow(x, i);\n    }\n    return result;\n  };\n  const df = (x) => {\n    let result = 0;\n    for (let i = 1; i < n; i++) {\n      result += i * xs[i] * Math.pow(x, i - 1);\n    }\n    return result;\n  };\n  const eps = 1e-6;\n  let x = 1;\n  while (Math.abs(f(x)) > eps) {\n    const x1 = x - f(x) / df(x);\n    x = x1;\n  }\n  return x;\n}"}
{"task_id": "JavaScript/33", "generation": "\n  const sorted = l.slice().sort((a, b) => a - b);\n  return l.map((value, index) => index % 3 === 0 ? sorted[index] : value);\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  if (l.length === 0) {\n    return null;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i + '').split('7').length - 1;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const even = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => i % 2 === 0 ? even.shift() : v);\n}"}
{"task_id": "JavaScript/38", "generation": "\n  const n = s.length;\n  const decoded = new Array(n);\n  for (let i = 0; i < n; i++) {\n    decoded[i] = s[(i * 3) % n];\n  }\n  return decoded.join('');\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0;\n  let b = 1;\n  let count = 0;\n  let fib = 0;\n  while (count < n) {\n    fib = a + b;\n    a = b;\n    b = fib;\n    if (isPrime(fib)) {\n      count++;\n    }\n  }\n  return fib;\n}"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      const sum = l[i] + l[left] + l[right];\n      if (sum === 0) return true;\n      if (sum < 0) left++;\n      else right--;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    let collisions = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (i !== j && i + j === n + 1) {\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}\n\n// Test the function\nconsole.log(carRaceCollision(5));  // Output: 6\nconsole.log(carRaceCollision(10));  // Output: 45\nconsole.log(carRaceCollision(15));  // Output: 141\n"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const complement = -l[i];\n    if (set.has(complement)) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  const convert = (x, base) => {\n    if (x < base) {\n      return x.toString();\n    } else {\n      return convert(Math.floor(x / base), base) + (x % base).toString();\n    }\n  };\n  return convert(x, base);\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}\n\n// Test the function\nconsole.log(triangleArea(5, 3)); // Output: 7.5\n"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + (n - 3) + fib4(n - 4);\n}"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(isPalindrome('')); // Expected output: true\nconsole.log(isPalindrome('aba')); // Expected output: true\nconsole.log(isPalindrome('aaaaa')); // Expected output: true\nconsole.log(isPalindrome('zbcd')); // Expected output: false"}
{"task_id": "JavaScript/49", "generation": "\n  if (n < 0) {\n    return modp(n + p, p);\n  } else if (n < p) {\n    return n;\n  } else {\n    return modp(n - p, p);\n  }\n}; // O(1) time, O(1) space\n\n// 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s[i];\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n}"}
{"task_id": "JavaScript/52", "generation": "\n  return l.filter(num => num < t).length > 0;\n}\n\n// Return True if all numbers are below threshold\nconst allBelowThreshold = (l, t) => {\n  return l.every(num => num < t);\n}\n\n// Return True if any number is below threshold\nconst anyBelowThreshold = (l, t) => {\n  return l.some(num => num < t);\n}\n\n// Return True if all numbers are above threshold\nconst allAboveThreshold = (l, t) => {\n  return l.every(num => num > t);\n}\n\n// Return True if any number is above threshold\nconst anyAboveThreshold = (l, t) => {\n  return l.some(num => num > t);\n}\n\n// Return True if all numbers are equal to threshold\nconst allEqualThreshold = (l, t) => {\n  return l.every(num => num === t);\n}\n\n// Return True if any number is equal to threshold\nconst anyEqualThreshold = (l, t) => {\n  return l.some(num => num === t);\n}\n\n// Return True if all numbers are greater than threshold\nconst allGreaterThanThreshold = (l, t) => {\n  return l.every(num => num > t);\n}\n\n// Return True if any number is greater than threshold\nconst anyGreaterThanThreshold = (l, t) => {\n  return l.some(num => num > t);\n}\n\n// Return True if all numbers are less than threshold\nconst allLessThanThreshold = (l, t) => {\n  return l.every(num => num < t);\n}\n\n// Return True if any number is less than threshold\nconst anyLessThanThreshold = (l, t) => {\n  return l.some(num => num < t);\n}\n\n// Return True if all numbers are greater than or equal to threshold\nconst allGreaterThanOrEqualToThreshold = (l, t) => {\n  return l.every(num => num >= t);\n}\n\n// Return True if any number is greater than or equal to threshold\nconst anyGreaterThanOrEqualToThreshold = (l, t) => {\n  return l.some(num => num >= t);\n}\n\n// Return True if all numbers are less than or equal to threshold\nconst allLessThanOrEqualToThreshold = (l, t) => {\n  return l.every(num => num <= t);\n}\n\n// Return True if any number is less than or equal to threshold\nconst anyLessThanOrEqualToThreshold = (l, t) => {\n  return l.some(num => num <= t);\n}\n\n// Return True if all numbers"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const s0Chars = s0.split('');\n  const s1Chars = s1.split('');\n  for (let i = 0; i < s0.length; i++) {\n    if (s0Chars[i] !== s1Chars[i]) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  const bracketMap = {\n    \")\": \"(\",\n    \"]\": \"[\",\n    \"}\": \"{\",\n  };\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (Object.values(bracketMap).includes(bracket)) {\n      stack.push(bracket);\n    } else if (Object.keys(bracketMap).includes(bracket)) {\n      if (stack.length === 0 || stack.pop() !== bracketMap[bracket]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/57", "generation": "\n  const increasing = l.every((x, i, a) => i === 0 || x >= a[i - 1]);\n  const decreasing = l.every((x, i, a) => i === 0 || x <= a[i - 1]);\n  return increasing || decreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  return l1.filter(x => l2.includes(x));\n}\n\n// Test the function\nconsole.log(common([1, 4, 3, 34, 2, 5, 7, 5, 9, 121], [1, 5, 653]))"}
{"task_id": "JavaScript/59", "generation": "\n  let max = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      max = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    max = n;\n  }\n  return max;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  const stack = [];\n  const bracketMap = { \")\": \"(\", \"}\": \"{\", \"]\": \"[\" };\n  for (let bracket of brackets) {\n    if (Object.values(bracketMap).includes(bracket)) {\n      stack.push(bracket);\n    } else if (Object.keys(bracketMap).includes(bracket)) {\n      if (stack.length === 0 || bracketMap[bracket] !== stack.pop()) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const derivative = new Array(n - 1);\n  for (let i = 1; i < n; i++) {\n    derivative[i - 1] = i * xs[i];\n  }\n  return derivative;\n}"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + (n - 2) + (n - 3);\n  }\n}"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split(\"\");\n  const result = digits.slice(-shift).concat(digits.slice(0, -shift));\n  return result.join(\"\");\n}"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let char of s) {\n    if (char === char.toUpperCase()) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 1.5\n\n// 2.1\n/* Task\n   Write function takes string input returns sum lower characters\n   ASCII codes\n  \n   lowerSum(\"\") 0\n   lowerSum(\"abAB\") => 130\n   lowerSum(\"abcCd\") => 98\n   lowerSum(\"helloE\") => 104\n   lowerSum(\"woArBld\") => 130\n   lowerSum(\"aAaaaXa\") => 147 */\nconst lowerSum = (s) => {\n  let sum = 0;\n  for (let char of s) {\n    if (char === char.toLowerCase()) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 1.5\n\n// 2.2\n/* Task\n   Write function takes string input returns sum all characters\n   ASCII codes\n  \n   allSum(\"\") 0\n   allSum(\"abAB\") => 261\n   allSum(\"abcCd\") => 165\n   allSum(\"helloE\") => 173\n   allSum(\"woArBld\") => 261\n   allSum(\"aAaaaXa\") => 300 */\nconst allSum = (s) => {\n  let sum = 0;\n  for (let char of s) {\n    sum += char.charCodeAt(0);\n  }\n  return sum;\n}; // 1.5\n\n// 2.3\n/* Task\n   Write function takes string input returns sum all characters\n   ASCII codes, but only for characters that are in the string\n   \"hello\"\n  \n   helloSum(\"\") 0\n   helloSum(\"abAB\") => 0\n   helloSum(\"helloE\") => 320\n   helloSum(\"woArBld\") => 0\n   helloSum(\"aAaaaXa\") => 0 */\nconst helloSum = (s) => {\n  let sum = 0;\n  for (let char of s) {\n    if (\"hello\".includes(char)) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}; // 1.5\n\n// 2.4\n/* Task\n   Write function takes string input returns sum all characters\n   ASCII codes, but only for"}
{"task_id": "JavaScript/67", "generation": "\n    let [apples, oranges] = s.split(\" \").map(Number);\n    return n - apples - oranges;\n};//time complexity O(n) space complexity O(1) where n is the number of fruits in the string\n\n// 2. Find the first duplicate in an array\n/* task given array of integers find first duplicate\n   duplicate first integer array integers\n   return integer duplicate\n   array integers duplicate first\n   return integer\n   duplicate first array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n   first duplicate array integers\n   return integer\n   array integers duplicate first\n   return integer\n   first duplicate array integers\n   return integer\n   array integers first duplicate\n   return integer\n"}
{"task_id": "JavaScript/68", "generation": "\n  let smallest = Infinity;\n  let smallestIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallest) {\n      smallest = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallest === Infinity) {\n    return [];\n  }\n  return [smallest, smallestIndex];\n}"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  for (const num of lst) {\n    freq[num] = (freq[num] || 0) + 1;\n  }\n  let max = 0;\n  for (const num in freq) {\n    if (freq[num] > max) {\n      max = freq[num];\n    }\n  }\n  for (const num in freq) {\n    if (freq[num] === max) {\n      return parseInt(num);\n    }\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n  const minList = lst.slice(0, minIndex);\n  const maxList = lst.slice(minIndex + 1, maxIndex);\n  const middleList = lst.slice(maxIndex + 1);\n  return [...minList, max, ...middleList, ...maxList];\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n}"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let arrCopy = [...arr];\n  arrCopy.sort((a, b) => a - b);\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] !== arrCopy[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  const count1 = lst1.map((str) => str.length).sort((a, b) => a - b);\n  const count2 = lst2.map((str) => str.length).sort((a, b) => a - b);\n  const diff = count1.filter((num, i) => num !== count2[i]);\n  return diff.length === 0 ? lst1 : diff;\n}"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  for (let i = 2; i < a; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/76", "generation": "\n  if (x < 0) return false;\n  if (x === 0 || n === 0) return true;\n  if (n === 1) return true;\n  if (x % n !== 0) return false;\n  return isSimplePower(x / n, n);\n}"}
{"task_id": "JavaScript/77", "generation": "\n  return Math.cbrt(a) % 1 === 0;\n}"}
{"task_id": "JavaScript/78", "generation": "\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isPrime(parseInt(num[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}; */\n\n\n\n// 2. Write a function that takes a string of hexadecimal digits and returns the number of prime digits.\n// A prime digit is a hexadecimal digit that is a prime number.\n// The function should work for any string of hexadecimal digits, including an empty string.\n// The function should not modify the input string.\n// The function should return 0 if the input string is empty.\n// Examples:\n// countPrimeHexDigits(\"AB\") returns 2\n// countPrimeHexDigits(\"1077E\") returns 2\n// countPrimeHexDigits(\"ABED1A33\") returns 4\n// countPrimeHexDigits(\"123456789ABCDEF0\") returns 6\n// countPrimeHexDigits(\"2020\") returns 2\n\nconst countPrimeHexDigits = (hexString) => {\n  // First, we define a helper function to check if a number is prime\n  const isPrime = (n) => {\n    // A prime number must be greater than 1\n    if (n <= 1) return false;\n    // 2 is the only even prime number\n    if (n == 2) return true;\n    // All other even numbers are not prime\n    if (n % 2 == 0) return false;\n    // We only need to check odd factors up to the square root of n\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i == 0) return false;\n    }\n    return true;\n  };\n\n  // Initialize a counter for prime digits\n  let count = 0;\n\n  // Iterate over each character in the input string\n  for (let i = 0; i < hexString.length; i++) {\n    // Convert the character to a hexadecimal number\n   "}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] !== s[i + 1] && s[i + 1] !== s[i + 2] && s[i] !== s[i + 2]) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/81", "generation": "\n    let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4.0) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else if (grades[i] > 3.3) {\n            letterGrades.push('A-');\n        } else if (grades[i] > 3.0) {\n            letterGrades.push('B+');\n        } else if (grades[i] > 2.7) {\n            letterGrades.push('B');\n        } else if (grades[i] > 2.3) {\n            letterGrades.push('B-');\n        } else if (grades[i] > 2.0) {\n            letterGrades.push('C+');\n        } else if (grades[i] > 1.7) {\n            letterGrades.push('C');\n        } else if (grades[i] > 1.3) {\n            letterGrades.push('C-');\n        } else if (grades[i] > 1.0) {\n            letterGrades.push('D+');\n        } else if (grades[i] > 0.7) {\n            letterGrades.push('D');\n        } else if (grades[i] > 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n};//end of function\n\n//test the function\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); //should return ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-'] */  //output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n    let count = 0;\n    for (let i = Math.pow(10, n - 1); i < Math.pow(10, n); i++) {\n        let str = i.toString();\n        if (str[0] === '1' && str[str.length - 1] === '1') {\n            count++;\n        }\n    }\n    return count;\n};*/\n\n// 2. Given positive integer n return count numbers n-digit\n// positive integers start end 2.\nconst startsOneEndsTwo = (n) => {\n    let count = 0;\n    for (let i = Math.pow(10, n - 1); i < Math.pow(10, n); i++) {\n        let str = i.toString();\n        if (str[0] === '1' && str[str.length - 1] === '2') {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  let binary = N.toString(2);\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && i % 2 !== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.map((word) => [...word].sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join(''));\n  return sortedWords.join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n      if (result.length === 1) {\n        break;\n      }\n    }\n    if (result.length === 1) {\n      break;\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return array;\n  }\n  const first = array[0];\n  const last = array[array.length - 1];\n  if (first % 2 === 0 && last % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}"}
{"task_id": "JavaScript/89", "generation": "\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (alphabet.includes(char)) {\n      const index = alphabet.indexOf(char);\n      const newIndex = (index * 2) % 26;\n      result += alphabet[newIndex];\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/90", "generation": "\n  if (!lst || lst.length < 2) return null;\n  lst.sort((a, b) => a - b);\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] !== lst[i - 1]) return lst[i];\n  }\n  return null;\n}; // O(n log n) time complexity due to sort\n\n// Example usage:\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // Output: 1\nconsole.log(nextSmallest(null)); // Output: null\nconsole.log(nextSmallest([1, 1])); // Output: null\n\n// Alternative solution using a single pass through the list\nconst nextSmallestAlt = (lst) => {\n  if (!lst || lst.length < 2) return null;\n  let min = Infinity;\n  let secondMin = Infinity;\n  for (let num of lst) {\n    if (num < min) {\n      secondMin = min;\n      min = num;\n    } else if (num < secondMin && num !== min) {\n      secondMin = num;\n    }\n  }\n  return secondMin === Infinity ? null : secondMin;\n}; // O(n) time complexity\n\n// Example usage:\nconsole.log(nextSmallestAlt([1, 2, 3, 4, 5])); // Output: 2\nconsole.log(nextSmallestAlt([5, 1, 4, 3, 2])); // Output: 1\nconsole.log(nextSmallestAlt(null)); // Output: null\nconsole.log(nextSmallestAlt([1, 1])); // Output: null\n"}
{"task_id": "JavaScript/91", "generation": "\n  const words = S.split(' ');\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I' && (i + 1 < words.length && ['.', '?', '!'].includes(words[i + 1]))) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  return (x + y === z || x + z === y || y + z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n} \n\n// Test cases\nconsole.log(anyInt(5, 2, 7)); // Expected output: true\nconsole.log(anyInt(3, 2, 2)); // Expected output: false\nconsole.log(anyInt(3, -2, 1)); // Expected output: true\nconsole.log(anyInt(3.6, -2.2, 2)); // Expected output: false\n"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += String.fromCharCode(char.charCodeAt(0) - 32);\n    } else {\n      encodedMessage += String.fromCharCode(char.charCodeAt(0) + 32);\n    }\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      encodedMessage += String.fromCharCode(char.charCodeAt(0) + 2);\n    } else {\n      encodedMessage += String.fromCharCode(char.charCodeAt(0) + 2);\n    }\n  }\n  return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 1) {\n      let isPrime = true;\n      for (let j = 2; j < lst[i]; j++) {\n        if (lst[i] % j === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        let str = lst[i].toString();\n        for (let k = 0; k < str.length; k++) {\n          sum += parseInt(str[k]);\n        }\n      }\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (const key in dict) {\n    if (key[0] !== key[0].toLowerCase() && key[0] !== key[0].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}; */\n\n\n\n\n// 2. Implement function takes non-negative integer returns array first n\n// integers prime numbers less n\n// count_up_to(5) [2,3]\n// count_up_to(11) [2,3,5,7]\n// count_up_to(0)\n// count_up_to(20) [2,3,5,7,11,13,17,19]\n// count_up_to(1)\n// count_up_to(18) [2,3,13,17]\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/97", "generation": "\n  const product = a * b;\n  const unitDigit = product % 10;\n  return unitDigit;\n}\n\n// Test cases\nconsole.log(multiply(148, 412)); // 16\nconsole.log(multiply(19, 28)); // 72\nconsole.log(multiply(2020, 1851)); // 0\nconsole.log(multiply(14, -15)); // 20\n"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const number = Number(value);\n  return Math.round(number);\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      pile.push(i + 1);\n    } else {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  const words = s.split(/[\\s,]+/);\n  return words.filter((word) => word.trim() !== '');\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x <= y) {\n    return y - 1;\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}"}
{"task_id": "JavaScript/104", "generation": "\n  const evenDigits = x.filter((num) => {\n    const strNum = num.toString();\n    return strNum.split('').every((digit) => {\n      return parseInt(digit) % 2 === 0;\n    });\n  });\n  return evenDigits.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  if (arr.length === 0) return [];\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num) => {\n    if (num < 0) return \"Zero\";\n    if (num === 0) return \"Zero\";\n    if (num > 9) return \"\";\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n  });\n  return result.filter((num) => num !== \"\");\n}"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (isEven(i)) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    return str === reversed;\n};\n\nconst isEven = (num) => {\n    return num % 2 === 0;\n}; */\n\n\n\n// 2. Given a string of digits, return the number of times a digit appears in the string.\n// Example:\n// Input: \"123456\"\n// Output: 3\n// Explanation:\n// The digit 1 appears 1 time, 2 appears 1 time, 3 appears 1 time, 4 appears 1 time, 5 appears 1 time, 6 appears 1 time.\n// So the total number of times a digit appears is 6.\n// Note:\n// 1. The string will only contain digits.\n// 2. The string will not be empty.\n// 3. The string will not contain any leading zeros.\n// 4. The string will not contain any duplicate digits.\n// 5. The string will not contain any non-digit characters.\n// 6. The string will not be longer than 10 characters.\n// 7. The string will not be shorter than 1 character.\n// 8. The string will not be empty.\n// 9. The string will not contain any whitespace characters.\n// 10. The string will not contain any special characters.\n// 11. The string will not contain any decimal points.\n// 12. The string will not contain any commas.\n// 13. The string will not contain any semicolons.\n// 14. The string will not contain any colons.\n// 15. The string will not contain any forward slashes.\n// 16. The string will not contain any backslashes.\n// 17. The string will not contain any pipe characters.\n// 18. The string will not contain any caret characters.\n// 19. The string will not contain any ampersand characters.\n// 20. The string will not contain any tilde characters.\n// 21. The string will not contain any underscore characters.\n// 22. The string will not"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = Math.abs(arr[i]);\n    let strNum = num.toString();\n    for (let j = 0; j < strNum.length; j++) {\n      if (parseInt(strNum[j]) > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let sortedArr = [...arr].sort((a, b) => a - b);\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== sortedArr[i]) {\n      count++;\n    }\n  }\n  return count <= Math.floor(arr.length / 2);\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst1.filter(x => x % 2 !== 0);\n  let even2 = lst2.filter(x => x % 2 === 0);\n  let odd2 = lst2.filter(x => x % 2 !== 0);\n  if (odd.length + even2.length >= even.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  let dict = {};\n  let words = test.split(' ');\n  for (let word of words) {\n    if (dict[word]) {\n      dict[word] += 1;\n    } else {\n      dict[word] = 1;\n    }\n  }\n  return dict;\n}\n\n// console.log(histogram('a b c'));\n// console.log(histogram('a b b a'));\n// console.log(histogram('a b c b'));\n// console.log(histogram('b b a'));\n// console.log(histogram('')); // empty string\n\n// 2. string of numbers return sum\n// sum of all numbers in string\n// Example\n// sum('1 2 3 4 5') == 15\n// sum('1 2 3 4 5 6 7 8 9 10') == 55\n// sum('') == 0\nconst sum = (test) => {\n  let sum = 0;\n  let numbers = test.split(' ');\n  for (let number of numbers) {\n    sum += parseInt(number);\n  }\n  return sum;\n}\n\n// console.log(sum('1 2 3 4 5'));\n// console.log(sum('1 2 3 4 5 6 7 8 9 10'));\n// console.log(sum(''));\n// console.log(sum('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'))"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (c.includes(s[i])) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n}\n\n// Test cases\nconsole.log(reverseDelete('abcde', 'ae')); // Expected output: ['bcd', false]\nconsole.log(reverseDelete('abcdef', 'b')); // Expected output: ['acdef', false]\nconsole.log(reverseDelete('abcdedcba', 'ab')); // Expected output: ['cdedc', true] */"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `number of odd elements ${count}n str${str}ng ${count}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum === Infinity ? 0 : minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let row of grid) {\n    let bucket = 0;\n    for (let well of row) {\n      if (well === 1) {\n        bucket++;\n        if (bucket === capacity) {\n          count += bucket;\n          bucket = 0;\n        }\n      } else {\n        if (bucket > 0) {\n          count += bucket;\n          bucket = 0;\n        }\n      }\n    }\n    if (bucket > 0) {\n      count += bucket;\n      bucket = 0;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const binaryA = a.toString(2);\n    const binaryB = b.toString(2);\n    const decimalA = parseInt(binaryA, 2);\n    const decimalB = parseInt(binaryB, 2);\n    return decimalA - decimalB;\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const result = [];\n\n  for (const word of words) {\n    let count = 0;\n    for (const char of word) {\n      if (consonants.includes(char)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = \"aeiou\";\n  let result = \"\";\n  for (let i = 0; i < word.length - 1; i++) {\n    if (vowels.includes(word[i]) || vowels.includes(word[i + 1])) {\n      continue;\n    }\n    if (vowels.includes(word[i + 1])) {\n      result = word[i + 1];\n      break;\n    } else {\n      for (let j = i + 1; j < word.length; j++) {\n        if (vowels.includes(word[j])) {\n          result = word[j];\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      open++;\n    } else {\n      open--;\n    }\n    if (open < 0) {\n      return 'No';\n    }\n  }\n  return open === 0 ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted.slice(-k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    const numStr = num.toString();\n    if (numStr.length === 2) {\n      sum += num;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = Math.floor(n / 2);\n    } else {\n      n = n * 3 + 1;\n    }\n    sequence.push(n);\n  }\n  return sequence.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const dateRegex = /^\\d{2}-\\d{2}-\\d{4}$/;\n  if (!dateRegex.test(date)) {\n    return false;\n  }\n  const [month, day, year] = date.split('-').map(Number);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || (day > 31 && [1, 3, 5, 7, 8, 10, 12].includes(month))) {\n    return false;\n  }\n  if (day < 1 || (day > 30 && [4, 6, 9, 11].includes(month))) {\n    return false;\n  }\n  if (month === 2 && (day < 1 || day > 29)) {\n    return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].toLowerCase() === txt[i]) {\n        count++;\n      }\n    }\n    return count % 2 !== 0 ? count : count - 1;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  const intersectionStart = Math.max(start1, start2);\n  const intersectionEnd = Math.min(end1, end2);\n  if (intersectionStart > intersectionEnd) {\n    return \"NO\";\n  }\n  const intersectionLength = intersectionEnd - intersectionStart + 1;\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrtN = Math.sqrt(n);\n  for (let i = 3; i <= sqrtN; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) {\n    return null;\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(product);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n  const queue = [];\n  const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  let minPath = [];\n  let minPathValue = Infinity;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      queue.push([i, j, 0, []]);\n      visited[i][j] = true;\n    }\n  }\n\n  while (queue.length) {\n    const [x, y, step, path] = queue.shift();\n    if (step === k) {\n      if (path.join(',') < minPath.join(',')) {\n        minPath = path;\n        minPathValue = Math.min(minPathValue, path.join('').split('').map(Number).reduce((a, b) => a + b, 0));\n      }\n    } else {\n      for (const [dx, dy] of directions) {\n        const nx = x + dx;\n        const ny = y + dy;\n        if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny]) {\n          queue.push([nx, ny, step + 1, [...path, grid[nx][ny]]]);\n          visited[nx][ny] = true;\n        }\n      }\n    }\n  }\n\n  return minPath;\n}; // time O(N^2 * k) space O(N^2) where N is the number of cells in the grid\n\n// Example usage:\nconst grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst k = 3;\nconst result = minPath(grid, k);\n// console.log(result); // Output: [1, 2, 1] (Note: The actual output may vary due to the lexicographical comparison) // eslint-disable-line no-console\n\n// Example usage:\nconst grid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]];\nconst k2 = 1;\nconst result2 = minPath(grid2, k2);\n// console.log(result2); // Output: ["}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 1) return [3];\n  if (n === 2) return [1, 3];\n  if (n === 3) return [1, 3, 2, 8];\n  let sequence = [1, 3, 2, 8];\n  for (let i = 4; i <= n; i++) {\n    if (i % 2 === 0) {\n      sequence.push(1 + i / 2);\n    } else {\n      sequence.push((i - 1) + (i - 2) + (i + 1));\n    }\n  }\n  return sequence;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  for (let i = 0; i < n.toString().length; i++) {\n    if (parseInt(n.toString()[i]) % 2 !== 0) {\n      product *= parseInt(n.toString()[i]);\n    }\n  }\n  return product;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count > 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord[lastWord.length - 1];\n  return lastChar.match(/[a-zA-Z]/);\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    let j = i - 1;\n    while (j >= 0 && arr[j] < arr[i]) {\n      j--;\n    }\n    if (j >= 0 && arr[j] >= arr[i]) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const negative = lst.filter(num => num < 0);\n  const positive = lst.filter(num => num > 0);\n  if (negative.length === 0 && positive.length === 0) {\n    return [null, null];\n  }\n  const largestNegative = negative.length > 0 ? Math.min(...negative) : null;\n  const smallestPositive = positive.length > 0 ? Math.max(...positive) : null;\n  return [largestNegative, smallestPositive];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b ? a : b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > parseFloat(b.replace(\",\", \".\")) ? a : parseFloat(b.replace(\",\", \".\"));\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a.replace(\",\", \".\")) > b ? parseFloat(a.replace(\",\", \".\")) : b;\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    return parseFloat(a.replace(\",\", \".\")) > parseFloat(b.replace(\",\", \".\")) ? parseFloat(a.replace(\",\", \".\")) : parseFloat(b.replace(\",\", \".\"));\n  } else {\n    return null;\n  }\n}"}
{"task_id": "JavaScript/138", "generation": "\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n    if (sum === n) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let result = text.replace(/ +/g, \"-\");\n  return result;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*(\\.[a-zA-Z]{3})?$/;\n  if (regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            sum += lst[i] ** 3;\n        }\n    }\n    return sum;\n}; \n\n// test cases\nconsole.log(sumSquares([1, 2, 3])); // 6\nconsole.log(sumSquares([])); // 0\nconsole.log(sumSquares([-1, -5, 2, -1, -5])); // -126\n"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const primeLengths = words.filter((word) => {\n    const length = word.length;\n    let isPrime = true;\n    for (let i = 2; i < length; i++) {\n      if (length % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime;\n  });\n  return primeLengths.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n  return xNum * nDen === nNum * xDen;\n}"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc + Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc + Number(cur), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA - sumB;\n    }\n  });\n}"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[i] % 10 % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  let arr = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n}"}
{"task_id": "JavaScript/149", "generation": "\n  const filteredList = lst.filter((word) => word.length % 2 === 0);\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sortedList;\n}; */ // eslint-disable-line no-unused-vars\n\n// const list = [\"aa\", \"a\", \"aaa\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n// const list = [\"ab\", \"a\", \"aaa\", \"cd\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n\n// const list = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n\n// const list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n\n// const list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n\n// const list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"aa\", \"ab\", \"ac\", \"ad\", \"ae\", \"af\", \"ag\", \"ah\", \"ai\", \"aj\", \"ak\", \"al\", \"am\", \"an\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"av\", \"aw\", \"ax\", \"ay\", \"az\"];\n// console.log(list_sort(list)); // eslint-disable-line no-console\n\n// const list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\","}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => {\n    if (score === guess[index]) {\n      return 0;\n    } else {\n      return Math.abs(score - guess[index]);\n    }\n  });\n}"}
{"task_id": "JavaScript/153", "generation": "\n  let max_strength = -Infinity;\n  let strongest_extension = '';\n  for (const extension of extensions) {\n    const strength = extension.toUpperCase().length - extension.toLowerCase().length;\n    if (strength > max_strength) {\n      max_strength = strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length < b.length) return false;\n  return a.includes(b);\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let numStr = Math.abs(num).toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n\n  let result = '';\n\n  Object.keys(romanNumerals).sort((a, b) => b - a).forEach((key) => {\n    while (number >= key) {\n      result += romanNumerals[key];\n      number -= key;\n    }\n  });\n\n  return result.toLowerCase();\n}"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let max = \"\";\n  for (let word of words) {\n    if (word.length > max.length) {\n      max = word;\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    total = number + remaining;\n    left = 0;\n  }\n  return [total, left];\n} \n\n// Test cases\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9)); // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]  */ \n\n// 2. \n/* \n   You're a teacher and you have a list of students' names and their respective ages\n   return a list of students who are older than 18\n   return a list of students who are younger than 18\n   return a list of students who are 18 years old\n   return a list of students who are 18 years old and have a name that starts with 'A'\n   return a list of students who are 18 years old and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with 'A' and have a name that starts with"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        return \"Invalid operator\";\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result.split(\"\").reverse().join(\"\");\n}; // do not change this line\n// console.log(solve(\"1234\")); // \"4321\"\n// console.log(solve(\"ab\")); // \"AB\"\n// console.log(solve(\"#a@C\")); // \"#A@c}
{"task_id": "JavaScript/162", "generation": "\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"}
