{"task_id": "Java/0", "generation": "\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            currentGroup.append(c);\n\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup = new StringBuilder();\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        return number - Math.floor(number);\n    }\n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0, mean = 0.0, standardDeviation = 0.0;\n        int length = numbers.size();\n\n        for(double num: numbers) {\n            sum += num;\n        }\n\n        mean = sum/length;\n\n        for(double num: numbers) {\n            standardDeviation += Math.pow(num - mean, 2);\n        }\n\n        return Math.sqrt(standardDeviation/length);\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        while (!isPalindrome(string.substring(i))) {\n            i++;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i);\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n        return string + reversedPrefix;\n    }\n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n    \n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        String[] numArray = numbers.split(\" \");\n        Arrays.sort(numArray);\n        return String.join(\" \", numArray);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n        \n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        \n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / range;\n            rescaled.add(rescaledValue);\n        }\n        \n        return rescaled;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int factor = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        // Create a HashSet to store unique elements\n        Set<Integer> uniqueElements = new HashSet<>(numbers);\n        // Convert the HashSet back to a List to maintain the order\n        return new ArrayList<>(uniqueElements);\n    }\n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/32", "generation": "\n        double left = -1000;\n        double right = 1000;\n        while (right - left > 0.0001) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) * poly(xs, left) <= 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sorted.add(l.get(i));\n            }\n        }\n        Collections.sort(sorted);\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, sorted.get(j++));\n            }\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private int countSevens(int num) {\n        int count = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                count++;\n            }\n            num /= 10;\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        for (int i = 0; i < even.size(); i++) {\n            result.add(even.get(i));\n            if (i < odd.size()) {\n                result.add(odd.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // decycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int fib1 = 0;\n        int fib2 = 1;\n        while (true) {\n            int fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n            if (isPrime(fib)) {\n                count++;\n                if (count == n) {\n                    return fib;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        return n * n;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements squared.\n    square_list([1, 2, 3]\n    [1, 4, 9\n    _square_list([5, 3, 2 3 9 0 123]\n    [25, 9, 4 9 81 0 15129]\n     */\n    public List<Integer> squareList(List<Integer> l) {\n        return l.stream()\n                .map(i -> i * i)\n                .collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements cubed.\n    cube_list([1, 2, 3]\n    [1, 8, 27\n    _cube_list([5, 3, 2 3 9 0 123]\n    [125, 27, 8 27 729 0 13824]\n     */\n    public List<Integer> cubeList(List<Integer> l) {\n        return l.stream()\n                .map(i -> i * i * i)\n                .collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements multiplied by themselves.\n    multiply_list([1, 2, 3]\n    [1, 4, 9\n    _multiply_list([5, 3, 2 3 9 0 123]\n    [25, 9, 4 9 81 0 15129]\n     */\n    public List<Integer> multiplyList(List<Integer> l) {\n        return l.stream()\n                .map(i -> i * i)\n                .collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements multiplied by themselves.\n    multiply_list([1, 2, 3]\n    [1, 4, 9\n    _multiply_list([5, 3, 2 3 9 0 123]\n    [25, 9,\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n    \n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/49", "generation": "\n        int result = 1;\n        n = n % p;\n        while (n > 0) {\n            if ((n & 1) == 1)\n                result = (result * n) % p;\n            n = n >> 1;\n            result = (result * result) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i) - 'a']++;\n            count[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) return n;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "\n        boolean inc = true;\n        boolean dec = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                dec = false;\n            }\n            if (l.get(i) > l.get(i + 1)) {\n                inc = false;\n            }\n        }\n        return inc || dec;\n    }\n}"}
{"task_id": "Java/58", "generation": "\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>(l2);\n        for (int num : l1) {\n            if (set.contains(num)) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int maxPrime = -1;\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n        // n must be odd at this point, so we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n        return maxPrime;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++){\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0, b = 0, c = 1, d;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        s = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/65", "generation": "\n        String str = String.valueOf(x);\n        int len = str.length();\n        shift = shift % len;\n        if (shift == 0) {\n            return str;\n        }\n        StringBuilder sb = new StringBuilder(str);\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                index = i;\n            }\n        }\n        if (index != -1) {\n            result.add(smallestEven);\n            result.add(index);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            result.add(Collections.min(lst));\n            lst.remove(Collections.min(lst));\n            // If the list is empty, break the loop\n            if (lst.isEmpty()) {\n                break;\n            }\n            // Add the maximum value\n            result.add(Collections.max(lst));\n            lst.remove(Collections.max(lst));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (!arr.get(i).equals(arr.get(j))) {\n                changes++;\n            }\n            i++;\n            j--;\n        }\n        return changes;\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else if (count1 > count2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0 && isPrime(i)) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/76", "generation": "\n        if (n == 1) {\n            return x == 1;\n        }\n        double power = Math.log(x) / Math.log(n);\n        return Math.floor(power) == power;\n    }\n}"}
{"task_id": "Java/77", "generation": "\n        double cubeRoot = Math.cbrt(a);\n        return Math.round(cubeRoot) == cubeRoot;\n    }\n}"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/79", "generation": "\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) return false;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i + 1) != s.charAt(i + 2) && s.charAt(i) != s.charAt(i + 2)) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) letterGrades.add(\"A+\");\n            else if (grade > 3.7) letterGrades.add(\"A\");\n            else if (grade > 3.3) letterGrades.add(\"A-\");\n            else if (grade > 3.0) letterGrades.add(\"B+\");\n            else if (grade > 2.7) letterGrades.add(\"B\");\n            else if (grade > 2.3) letterGrades.add(\"B-\");\n            else if (grade > 2.0) letterGrades.add(\"C+\");\n            else if (grade > 1.7) letterGrades.add(\"C\");\n            else if (grade > 1.3) letterGrades.add(\"C-\");\n            else if (grade > 1.0) letterGrades.add(\"D+\");\n            else if (grade > 0.7) letterGrades.add(\"D\");\n            else if (grade > 0.0) letterGrades.add(\"D-\");\n            else letterGrades.add(\"E\");\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        if (number == 2) {\n            return true;\n        }\n        if (number % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= number; i += 2) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) return 1;\n        return 18 * (int)Math.pow(10, n - 2);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(i);\n                    temp.add(j);\n                    result.add(temp);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) != o2.get(0)) {\n                    return o1.get(0) - o2.get(0);\n                } else {\n                    return o2.get(1) - o1.get(1);\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        List<Integer> result = new ArrayList<>(array);\n        if (array.isEmpty()) {\n            return result;\n        }\n        if (array.get(0) % 2 == 0 && array.get(array.size() - 1) % 2 == 0) {\n            result.sort(Collections.reverseOrder());\n        } else {\n            result.sort(Comparator.naturalOrder());\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char shifted = (char) ((c - base + 4) % 26 + base);\n                encrypted.append(shifted);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Set<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        set.pollFirst();\n        return Optional.of(set.first());\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        int boredCount = 0;\n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\"\\\\s+\");\n            if (words.length > 0 && words[0].equalsIgnoreCase(\"I\")) {\n                boredCount++;\n            }\n        }\n        return boredCount;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/93", "generation": "\n        Map<Character, Character> vowelMap = new HashMap<>();\n        vowelMap.put('a', 'c');\n        vowelMap.put('e', 'g');\n        vowelMap.put('i', 'k');\n        vowelMap.put('o', 'q');\n        vowelMap.put('u', 'w');\n        vowelMap.put('A', 'C');\n        vowelMap.put('E', 'G');\n        vowelMap.put('I', 'K');\n        vowelMap.put('O', 'Q');\n        vowelMap.put('U', 'W');\n\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n\n                if (vowelMap.containsKey(c)) {\n                    c = vowelMap.get(c);\n                }\n            }\n            encodedMessage.append(c);\n        }\n        return encodedMessage.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int sum = 0;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                sum += sumDigits(num);\n            }\n        }\n        return sum;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/97", "generation": "\n        int lastDigitA = Math.abs(a) % 10;\n        int lastDigitB = Math.abs(b) % 10;\n        return lastDigitA * lastDigitB;\n    }\n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int current = n;\n        for (int i = 0; i < n; i++) {\n            result.add(current);\n            if (n % 2 == 0) {\n                current += 2;\n            } else {\n                current += 2;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[ ,]+\");\n        for (String word : split) {\n            if (!word.isEmpty()) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        } else {\n            return y - 1;\n        }\n    }\n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int average = Math.round((float) sum / (m - n + 1));\n        return \"0b\" + Integer.toBinaryString(average);\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : x) {\n            if (i % 2 == 0) {\n                set.add(i);\n            }\n        }\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedList = new ArrayList<>(arr);\n        sortedList.sort(Comparator.naturalOrder());\n        Collections.reverse(sortedList);\n        for (Integer num : sortedList) {\n            if (num >= 1 && num <= 9) {\n                result.add(names[num - 1]);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (sumDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -sum : sum;\n    }\n\n    \n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) return true;\n        int count = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i - 1) > arr.get(i)) {\n                count++;\n            }\n        }\n        if (arr.get(arr.size() - 1) > arr.get(0)) count++;\n        return count <= 1;\n    }\n}"}
{"task_id": "Java/110", "generation": "\n        int oddCountLst1 = 0;\n        int evenCountLst2 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n        return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (!word.equals(\"\")) {\n                if (result.containsKey(word)) {\n                    result.put(word, result.get(word) + 1);\n                } else {\n                    result.put(word, 1);\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!s.substring(i, i + 1).equals(c)) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String result = sb.toString();\n        String reversed = sb.reverse().toString();\n        boolean isPalindrome = result.equals(reversed);\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            long count = s.chars().filter(c -> (c - '0') % 2 != 0).count();\n            result.add(\" number of odd elements \" + count + \"n str\" + count + \"ng \" + count + \" 4nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = nums.get(0);\n        int currentSum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            minSum = Math.min(minSum, currentSum);\n        }\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "\n        int maxFill = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = well.stream().filter(unit -> unit == 1).count();\n            maxFill += (int) Math.ceil((double) waterUnits / capacity);\n        }\n        return maxFill;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        arr.sort((a, b) -> {\n            int onesA = Integer.bitCount(a);\n            int onesB = Integer.bitCount(b);\n            if (onesA == onesB) {\n                return a - b;\n            }\n            return onesA - onesB;\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n && isConsonant(word)) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(String word) {\n        for (char c : word.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (!vowels.contains(word.charAt(i - 1) + \"\") && vowels.contains(word.charAt(i) + \"\") && !vowels.contains(word.charAt(i + 1) + \"\")) {\n                return word.charAt(i) + \"\";\n            }\n        }\n        return \"\";\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        int balance = 0;\n        for (char c : s1.toCharArray()) {\n            if (c == '(') balance++;\n            else balance--;\n            if (balance < 0) return \"No\";\n        }\n        for (char c : s2.toCharArray()) {\n            if (c == '(') balance++;\n            else balance--;\n            if (balance < 0) return \"No\";\n        }\n        return balance == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        Collections.sort(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - k; i < arr.size(); i++){\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++){\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> list = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                list.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        list.add(1);\n        Collections.sort(list);\n        return list;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day == 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            long count = txt.chars()\n                            .filter(Character::isLowerCase)\n                            .mapToObj(c -> (char) c)\n                            .sorted()\n                            .filter(c -> (c - 'a') % 2 == 0)\n                            .count();\n            return count;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        // Check if the list is empty or contains only one element\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Iterate through the list and compare each element with the next one\n        for (int i = 0; i < lst.size() - 1; i++) {\n            // If the current element is greater than the next one, return false\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // If all elements are in ascending order, return true\n        return true;\n    }\n}"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int productSign = 1;\n        int sumOfMagnitudes = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.of(0);\n            }\n            productSign *= Math.signum(num);\n            sumOfMagnitudes += Math.abs(num);\n        }\n        return Optional.of(productSign * sumOfMagnitudes);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        // Your code here\n    }\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            result.add(1);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(3);\n            result.add(2);\n            return result;\n        }\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? product : 0;\n    }\n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return !stack.isEmpty();\n    }\n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "\n        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] count = new int[n];\n        for(int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        int max = -1;\n        for(int i = n - 1; i >= 0; i--) {\n            if(count[i] > 0) {\n                max = i;\n                break;\n            }\n        }\n        for(int i = n - 1; i >= 0; i--) {\n            if(count[i] > 0) {\n                count[i]--;\n                if(count[i - 1] > 0) {\n                    count[i - 1]--;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> largestNegative = lst.stream()\n                                                .filter(i -> i < 0)\n                                                .max(Integer::compare);\n        Optional<Integer> smallestPositive = lst.stream()\n                                                .filter(i -> i > 0)\n                                                .min(Integer::compare);\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        double aVal = convertToDouble(a);\n        double bVal = convertToDouble(b);\n\n        if (aVal == bVal) {\n            return Optional.empty();\n        }\n\n        return aVal > bVal ? Optional.of(a) : Optional.of(b);\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.');\n            return Double.parseDouble(str);\n        } else if (obj instanceof Integer) {\n            return (Integer) obj;\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass().getName());\n        }\n    }\n\n    \n}"}
{"task_id": "Java/138", "generation": "\n        if (n < 4 || n % 2 != 0) {\n            return false;\n        }\n        int count = 0;\n        int sum = 0;\n        for (int i = 2; i <= n; i += 2) {\n            count++;\n            sum += i;\n            if (sum == n) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            long factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int spaceCount = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    sb.append('-');\n                } else {\n                    sb.append(String.join(\"\", Collections.nCopies(spaceCount, \"_\")));\n                }\n                sb.append(c);\n                spaceCount = 0;\n            }\n        }\n        if (spaceCount > 2) {\n            sb.append('-');\n        } else {\n            sb.append(String.join(\"\", Collections.nCopies(spaceCount, \"_\")));\n        }\n        return sb.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/141", "generation": "\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String namePart = parts[0];\n        String extensionPart = parts[1];\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n        if (namePart.chars().filter(Character::isDigit).count() > 3) {\n            return \"No\";\n        }\n        if (!Arrays.asList(validExtensions).contains(extensionPart)) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        if (productNumerator % productDenominator == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        return nums.stream()\n                .sorted(Comparator.comparingInt(Solution::sumDigits).thenComparingInt(nums::indexOf))\n                .collect(Collectors.toList());\n    }\n\n    private static int sumDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstLastDigitOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n\n    \n}"}
{"task_id": "Java/147", "generation": "\n        int[] arr = new int[n];\n        for(int i = 1; i <= n; i++){\n            arr[i-1] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                for(int k = j+1; k < n; k++){\n                    if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        return new ArrayList<>(planets.subList(index1 + 1, index2));\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        // Remove strings with odd lengths\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthStrings.add(str);\n            }\n        }\n\n        // Sort the list by length, then alphabetically\n        Collections.sort(evenLengthStrings, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return evenLengthStrings;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            if(n % i == 0){\n                count++;\n            }\n        }\n        if(count == 2){\n            return x;\n        }else{\n            return y;\n        }\n    }\n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++){\n            if(game.get(i) == guess.get(i)){\n                result.add(0);\n            }else{\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        String strongest = \"\";\n        double max = Double.MIN_VALUE;\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            double strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}"}
{"task_id": "Java/154", "generation": "\n        if (b.length() > a.length()) {\n            return false;\n        }\n        StringBuilder sb = new StringBuilder(b);\n        sb.append(b);\n        return sb.toString().contains(a);\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        int even = 0, odd = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        LinkedHashMap<Integer, String> romanNumerals = new LinkedHashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        StringBuilder roman = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        return roman.toString();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Sort the sides of the triangle\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n}"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n        return maxWord;\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + Math.min(need, remaining);\n        int left = Math.max(remaining - need, 0);\n        return Arrays.asList(total, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            int nextOperand = operand.get(i + 1);\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"//\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetter) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n\n    \n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
