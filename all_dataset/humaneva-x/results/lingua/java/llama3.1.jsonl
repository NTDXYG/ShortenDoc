{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        StringBuilder current_group = new StringBuilder();\n        int open_count = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == ' ') {\n                continue;\n            }\n            if (c == '(') {\n                open_count++;\n                current_group.append(c);\n            } else if (c == ')') {\n                open_count--;\n                current_group.append(c);\n                if (open_count == 0) {\n                    result.add(current_group.toString());\n                    current_group.setLength(0);\n                }\n            } else {\n                current_group.append(c);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/2", "generation": "\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        if (numbers.size() == 0) {\n            return 0;\n        }\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumDeviation = 0;\n        for (double num : numbers) {\n            sumDeviation += Math.abs(num - mean);\n        }\n        return sumDeviation / numbers.size();\n    }\n} \n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\"\\\\s+\");\n        for (String group : groups) {\n            int level = 0;\n            int max_level = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    level += 1;\n                    max_level = Math.max(max_level, level);\n                } else if (c == ')') {\n                    level -= 1;\n                }\n            }\n            result.add(max_level);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n} \n\nclass Main {\n    \n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        String postfix = string;\n        while (true) {\n            if (isPalindrome(postfix)) {\n                break;\n            }\n            postfix = postfix.substring(1) + postfix.charAt(0);\n        }\n        return postfix + postfix.substring(0, postfix.length() - postfix.indexOf(postfix.substring(postfix.length() - postfix.indexOf(postfix.substring(postfix.length() - postfix.indexOf(postfix.substring(0, postfix.length() - postfix.indexOf(postfix.substring(0, postfix.length()))))))))));\n    }\n    \n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((a.charAt(i) == '1' && b.charAt(i) == '1') ? '0' : (a.charAt(i) == '0' && b.charAt(i) == '0') ? '0' : '1');\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        // If b is 0, return a\n        if (b == 0) {\n            return a;\n        }\n        // Otherwise, return the greatest common divisor of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  \n     */\n    public int greatestCommonDivisor(int a, int b) {\n        // If b is 0, return a\n        if (b == 0) {\n            return a;\n        }\n        // Otherwise, return the greatest common divisor of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  \n     */\n    public int greatestCommonDivisor(int a, int b) {\n        // If b is 0, return a\n        if (b == 0) {\n            return a;\n        }\n        // Otherwise, return the greatest common divisor of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  \n     */\n    public int greatestCommonDivisor(int a, int b) {\n        // If b is 0, return a\n        if (b == 0) {\n            return a;\n        }\n        // Otherwise, return the greatest common divisor of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  \n     */\n    public int greatestCommonDivisor(int a, int b) {\n        // If b is 0, return a\n        if (b =="}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to lower case\n        string = string.toLowerCase();\n        // Create a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        // Return the number of unique characters\n        return uniqueChars.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (String note : string.split(\" \")) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n\n    \n}"}
{"task_id": "Java/20", "generation": "\n        // sort the list\n        Collections.sort(numbers);\n        // find the closest elements\n        List<Double> closestElements = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < 0.00001) {\n                closestElements.add(numbers.get(i));\n                closestElements.add(numbers.get(i + 1));\n            }\n        }\n        return closestElements;\n    }\n\n    \n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        if (min == max) {\n            return numbers;\n        }\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n        return rescaled;\n    }\n\n    \n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n} \n\nclass Solution {\n    /**\n    Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n} \n\nclass Solution {\n    /**\n    Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n} \n\nclass Solution {\n    /**\n    Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n} \n\nclass Solution {\n    /**\n    Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/24", "generation": "\n        int divisor = 1;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n = n / divisor;\n            }\n            divisor += 1;\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                set.add(num);\n                result.add(num);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        // Use StringBuilder to concatenate strings\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n} \n\nclass Main {\n    \n}"}
{"task_id": "Java/29", "generation": "\n        // filter the list of strings to include only those that start with the given prefix\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n} \n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        double precision = 0.00001;\n        while (true) {\n            double f_x = poly(xs, x);\n            if (Math.abs(f_x) < precision) {\n                return x;\n            }\n            double f_x_prime = poly(xs.subList(1, xs.size()), x);\n            x -= f_x / f_x_prime;\n        }\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            } else {\n                int index = Collections.binarySearch(result, l.get(i));\n                if (index < 0) {\n                    index = -index - 1;\n                }\n                result.add(index, l.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            if (set.add(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/35", "generation": "\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                count += countSevens(str);\n            }\n        }\n        return count;\n    }\n\n    public int countSevens(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(even.get(i / 2));\n            } else {\n                result.add(odd.get(i / 2));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        int[] fib = new int[n + 1];\n        fib[1] = 2;\n        fib[2] = 3;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 3; i <= n; i++) {\n            if (isPrime(fib[i])) return fib[i];\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Arrays.sort(l.stream().mapToInt(i -> i).toArray());\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n} \n"}
{"task_id": "Java/41", "generation": "\n        int collision = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i != j && i + j == n + 1) {\n                    collision++;\n                }\n            }\n        }\n        return collision;\n    }\n\n    \n}"}
{"task_id": "Java/42", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            result.add(l.get(i) + 1);\n        }\n        return result;\n    }\n\n    public List<Integer> incrList2(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n\n    public List<Integer> incrList3(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n     */\n    public double triangleArea(double a, double h) {\n        return 0.5 * a * h;\n    }\n}  //"}
{"task_id": "Java/46", "generation": "\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + (n - 3) + fib4(n - 4);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, 4, 6, 1000, 10, 20]\n  \n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, 4, 6, 1000, 10, 20]\n  \n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, 4, 6, 1000, 10, 20]\n  \n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, \n}"}
{"task_id": "Java/48", "generation": "\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n     */\n    public boolean isPalindrome(String text) {\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n     */\n    public boolean isPalindrome(String text) {\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n     */\n    public boolean isPalindrome(String text) {\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n     */\n    public boolean isPalindrome(String text) {\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if the reversed string is equal to the original string\n        return text.equals(reversed);\n    }\n} \n\nclass Solution {\n    /**\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n     */\n    public boolean isPalindrome(String text) {\n        // Reverse the string\n        String reversed = new StringBuilder(text).reverse().toString();\n        // Check if"}
{"task_id": "Java/49", "generation": "\n        if (p == 0) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (p == 1) {\n            return n;\n        }\n        if (p % 2 == 0) {\n            return modp(n, p / 2) * modp(n, p / 2) % p;\n        } else {\n            return (modp(n, p - 1) * n) % p;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return 2 modulo\n   modp(3, 5)\n   3\n   modp(1101, 101)\n   2\n   modp(0, 101)\n   1\n   modp(3, 11)\n   8\n   modp(100, 101)\n   1\n     */\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (p == 1) {\n            return n;\n        }\n        if (p % 2 == 0) {\n            return modp(n, p / 2) * modp(n, p / 2) % p;\n        } else {\n            return (modp(n, p - 1) * n) % p;\n        }\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return 2 modulo\n   modp(3, 5)\n   3\n   modp(1101, 101)\n   2\n   modp(0, 101)\n   1\n   modp(3, 11)\n   8\n   modp(100, 101)\n   1\n     */\n    public int modp(int n, int p) {\n        if (p == 0) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (p == 1) {\n            return n;\n        }\n        if (p % 2 == 0) {\n            return modp(n, p / 2) * modp(n, p / 2) % p;\n        } else {\n            return (modp(n, p - 1) *"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c);\n//             }\n//         }\n//         return sb.toString();\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public String removeVowels(String text) {\n//         StringBuilder sb = new StringBuilder();\n//         for (char c : text.toCharArray()) {\n//             if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n//                 sb.append(c"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i < t) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().anyMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().anyMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().anyMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().anyMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().anyMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n   \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Check two words same characters\n  _chars'eabcdzzzz' 'dddzzzzzzzddeddabc'\n   True\n  _chars('abcd' 'dddddddabc')\n   True\n  _chars'dddddddabc'\n   True\n  _chars'eabcd' 'dddddddabc')\n   False\n  _chars'abcd' 'dddddddabce')\n   False\n  _chars'eabcdzzzz' 'dddzzzzzzzddddabc')\n   False\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Check two words same characters\n  _chars'eabcdzzzz' 'dddzzzzzzzddeddabc'\n   True\n  _chars('abcd' 'dddddddabc')\n   True\n  _chars'dddddddabc'\n   True\n  _chars'eabcd' 'dddddddabc')\n   False\n  _chars'abcd' 'dddddddabce')\n   False\n  _chars'eabcdzzzz' 'dddzzzzzzzddddabc')\n   False\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i <"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}  // Time complexity: O(n), Space complexity: O(n)  // 1ms, beats 100% of submissions\n\nclass Solution {\n    /**\n    Return Fibonacci number\n   fib(10)\n   55\n   fib(1)\n  \n   fib(8)\n   21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}  // Time complexity: O(n), Space complexity: O(1)  // 0ms, beats 100% of submissions\n\nclass Solution {\n    /**\n    Return Fibonacci number\n   fib(10)\n   55\n   fib(1)\n  \n   fib(8)\n   21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}  // Time complexity: O(2^n), Space complexity: O(n)  // 0ms, beats 100% of submissions\n\nclass Solution {\n    /**\n    Return Fibonacci number\n   fib(10)\n   55\n   fib(1)\n  \n   fib(8)\n   21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}  // Time complexity: O(n), Space complexity: O(n) "}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i).equals(l2.get(j))) {\n                    result.add(l1.get(i));\n                }\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/59", "generation": "\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        return max;\n    }\n}  // class Solution\n\nclass Solution2 {\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        if (n > 1) {\n            return n;\n        }\n        return max;\n    }\n}  // class Solution2\n\nclass Solution3 {\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        if (n > 1) {\n            return n;\n        }\n        return max;\n    }\n}  // class Solution3\n\nclass Solution4 {\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        if (n > 1) {\n            return n;\n        }\n        return max;\n    }\n}  // class Solution4\n\nclass Solution5 {\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                while (n % i == 0) {\n                    n = n / i;\n                }\n            }\n        }\n        if (n > 1) {\n            return n;\n        }\n        return"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> derivative = new ArrayList<>();\n        if (xs.size() == 1) {\n            return derivative;\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(i * xs.get(i));\n        }\n        return derivative;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 1;\n            for (int i = 3; i <= n; i++) {\n                int temp = a + (i - 2) + (i - 3);\n                a = b;\n                b = c;\n                c = temp;\n            }\n            return c;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            } else if (s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n"}
{"task_id": "Java/65", "generation": "\n        // Convert integer to string\n        String str = Integer.toString(x);\n        // Get the length of the string\n        int len = str.length();\n        // Calculate the actual shift number\n        shift = shift % len;\n        // Split the string into two parts\n        String first = str.substring(0, len - shift);\n        String second = str.substring(len - shift);\n        // Return the result string\n        return second + first;\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        return n - apples - oranges;\n    }\n}  // class Solution\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int smallest = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallest) {\n                smallest = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n        if (smallest == Integer.MAX_VALUE) {\n            return result;\n        }\n        result.add(smallest);\n        result.add(smallestIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = 0;\n        for (int i : map.keySet()) {\n            if (map.get(i) > max) {\n                max = map.get(i);\n            }\n        }\n        for (int i : map.keySet()) {\n            if (map.get(i) == max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n        Collections.sort(lst);\n        int min = lst.get(0);\n        int max = lst.get(lst.size() - 1);\n        List<Integer> result = new ArrayList<>();\n        result.add(min);\n        lst.remove(min);\n        lst.remove(max);\n        while (!lst.isEmpty()) {\n            int min2 = Collections.min(lst);\n            result.add(min2);\n            lst.remove(min2);\n        }\n        result.add(max);\n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int n = arr.size();\n        int[] freq = new int[100000];\n        for (int i = 0; i < n; i++) {\n            freq[arr.get(i)]++;\n        }\n        int count = 0;\n        for (int i = 0; i < 100000; i++) {\n            if (freq[i] % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            for (String s2 : lst2) {\n                if (s.equals(s2)) {\n                    count1++;\n                    count2++;\n                    break;\n                }\n            }\n        }\n        if (count1 == count2) {\n            return lst1;\n        } else if (count1 > count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        if (a < 2) {\n            return false;\n        }\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        for (int i = 0; i < primes.length; i++) {\n            if (a % primes[i] == 0) {\n                a = a / primes[i];\n                if (a % primes[i] == 0) {\n                    a = a / primes[i];\n                    if (a % primes[i] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}  // class Solution\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int base = (int) Math.pow(x, 1.0 / n);\n        return base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base * base"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int)Math.cbrt(a);\n        return (cubeRoot * cubeRoot * cubeRoot) == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isPrime(char c) {\n        int decimal = Character.getNumericValue(c);\n        if (decimal < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(decimal); i++) {\n            if (decimal % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/79", "generation": "\n        // Convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n        // Add extra characters to the beginning and end of the string\n        return \"db\" + binary + \"db\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade > 3.7) {\n                result.add(\"A\");\n            } else if (grade > 3.3) {\n                result.add(\"A-\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 2.7) {\n                result.add(\"B\");\n            } else if (grade > 2.3) {\n                result.add(\"B-\");\n            } else if (grade > 2.0) {\n                result.add(\"C+\");\n            } else if (grade > 1.7) {\n                result.add(\"C\");\n            } else if (grade > 1.3) {\n                result.add(\"C-\");\n            } else if (grade > 1.0) {\n                result.add(\"D+\");\n            } else if (grade > 0.7) {\n                result.add(\"D\");\n            } else if (grade > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i % 10 == 1 && j % 10 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += c - '0';\n        }\n        return String.valueOf(sum);\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0).equals(o2.get(0))) {\n                    return o2.get(1).compareTo(o1.get(1));\n                } else {\n                    return o1.get(0).compareTo(o2.get(0));\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        if (first % 2 == 0 && last % 2 == 0) {\n            Collections.sort(array);\n            return array;\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n            return array;\n        }\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int asciiOffset = Character.isUpperCase(c) ? 65 : 97;\n                encrypted.append((char) ((c - asciiOffset + 2 * 2) % 26 + asciiOffset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}  // class Solution\n"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        int smallest = lst.get(0);\n        int secondSmallest = lst.get(1);\n        if (smallest == secondSmallest) {\n            return Optional.empty();\n        }\n        return Optional.of(secondSmallest);\n    }\n} \n"}
{"task_id": "Java/91", "generation": "\n        String[] words = S.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\") && (i == 0 || !words[i - 1].equals(\"I\"))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return (a + b == c) || (a + c == b) || (b + c == a);\n        } else {\n            return false;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char newChar = (char) ((c - base + 2) % 26 + base);\n                encodedMessage.append(newChar);\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n} \n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                maxPrime = Math.max(maxPrime, lst.get(i));\n            }\n        }\n        return sumDigits(maxPrime);\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int sumDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (!key.matches(\"[a-zA-Z]+\")) {\n                return false;\n            }\n            if (!key.equals(key.toLowerCase()) && !key.equals(key.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n} \n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false;\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/97", "generation": "\n        int product = a * b;\n        int unitDigit = product % 10;\n        return unitDigit;\n    }\n}  // class Solution\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && \"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        int num = Integer.parseInt(value);\n        return (int) Math.round(num);\n    }\n}  // class Solution\n\\end{code}\n\nComment: Your code is correct and it should work as expected. However, you might want to add some error handling to handle cases where the input string cannot be parsed to an integer. You can use a try-catch block to catch the `NumberFormatException` that is thrown when the input string is not a valid integer.\n\nAnswer: Here is a more robust version of your code with error handling:\n\n\\begin{code}\nclass Solution {\n    /**\n    Create function takes value representing number\n   returns closest integer If number equidistant\n   from two integers round away from zero.\n   Examples\n   >>> closest_integer(\"10\")\n   10\n   >>> closest_integer(\"15.3\")\n   15\n   Note\n   Rounding away from zero means if given number equidistant\n   from two integers one return\n   farthest from zero. example closest_integer(\"14.5\")\n   return 15 closest_integer(\"-14.5\") return.\n     */\n    public int countUpper(String value) {\n        try {\n            int num = Integer.parseInt(value);\n            return (int) Math.round(num);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input: \" + value);\n            return 0; // or throw an exception, depending on your requirements\n        }\n    }\n}  // class Solution\n\\end{code}\n\nThis code will catch any `NumberFormatException` that is thrown when the input string cannot be parsed to an integer, and will print an error message to the console. It will then return 0 (or you can throw an exception, depending on your requirements). This way, your code will be more robust and will handle unexpected input correctly.  You can also use `Integer.parseInt(value, 10)` to specify the radix (base) of the number, in this case 10 for decimal. This can help prevent unexpected behavior if the input string is a hexadecimal or octal number.  Here is how you can do it:\n\n\\begin{code}\nint num = Integer.parseInt(value, 10);\n\\end{code}\n\nThis will throw a `NumberFormatException` if the input string is not a valid decimal number.  You can also use `Integer.parseInt(value, 16)` for hexadecimal numbers and `Integer.parseInt(value, 8)` for octal numbers.  You can also use `Integer.parseInt(value, 2"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int level = 1;\n        while (n > 0) {\n            result.add(n);\n            if (level % 2 == 0) {\n                n = n - (level + 1);\n            } else {\n                n = n - (level + 2);\n            }\n            level++;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        //split string by comma and space\n        String[] words = s.split(\"[,\\\\s]+\");\n        //convert array to list\n        List<String> list = new ArrayList<>(Arrays.asList(words));\n        return list;\n    }\n} \n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        return x + (y - x) / 2;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n        String binary = Integer.toBinaryString(roundedAvg);\n        return \"0b\" + binary;\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i : x) {\n            int num = i;\n            while (num > 0) {\n                int digit = num % 10;\n                if (digit % 2 == 0) {\n                    result.add(digit);\n                }\n                num = num / 10;\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n} \n"}
{"task_id": "Java/105", "generation": "\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0 || arr.get(i) > 9) {\n                continue;\n            }\n            arr.set(i, Collections.binarySearch(arr, arr.get(i)));\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0 || arr.get(i) > 9) {\n                continue;\n            }\n            result.add(getName(arr.get(i)));\n        }\n        return result;\n    }\n\n    private String getName(int num) {\n        String[] names = {\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return names[num];\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/110", "generation": "\n        // filter out even numbers from lst1\n        List<Integer> evenNums = new ArrayList<>();\n        for (int num : lst1) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n            }\n        }\n        // filter out odd numbers from lst2\n        List<Integer> oddNums = new ArrayList<>();\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n            }\n        }\n        // if there are enough odd numbers in lst2 to replace all even numbers in lst1\n        if (oddNums.size() >= evenNums.size()) {\n            // replace all even numbers in lst1 with odd numbers from lst2\n            for (int i = 0; i < evenNums.size(); i++) {\n                lst1.set(i, oddNums.get(i));\n            }\n            // check if all numbers in lst1 are even\n            for (int num : lst1) {\n                if (num % 2 != 0) {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    \n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n} \n"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        result.add(sb.toString());\n        result.add(sb.toString().equals(new StringBuilder(sb.toString()).reverse().toString()));\n        return result;\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"number of odd elements \" + count + \"n str\" + str.length() + \"ng \" + count + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}  // class Solution\n\n// Time Complexity: O(n)\n// Space Complexity: O(1)  // constant space\n"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] wells = new int[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                wells[i][j] = grid.get(i).get(j);\n            }\n        }\n        int maxFill = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (wells[i][j] == 1) {\n                    maxFill += Math.min(capacity, wells[i][j]);\n                    wells[i][j] = 0;\n                    if (i + 1 < rows && wells[i + 1][j] == 1) {\n                        maxFill += Math.min(capacity, wells[i + 1][j]);\n                        wells[i + 1][j] = 0;\n                    }\n                    if (j + 1 < cols && wells[i][j + 1] == 1) {\n                        maxFill += Math.min(capacity, wells[i][j + 1]);\n                        wells[i][j + 1] = 0;\n                    }\n                }\n            }\n        }\n        return maxFill;\n    }\n\n    \n}"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                String binA = Integer.toBinaryString(a);\n                String binB = Integer.toBinaryString(b);\n                int lenA = binA.length();\n                int lenB = binB.length();\n                int minLen = Math.min(lenA, lenB);\n                for (int i = 0; i < minLen; i++) {\n                    if (binA.charAt(i) != binB.charAt(i)) {\n                        return binA.charAt(i) - binB.charAt(i);\n                    }\n                }\n                return lenA - lenB;\n            }\n        });\n        return arr;\n    }\n\n    \n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonantCount++;\n                }\n            }\n            // If the word contains n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/118", "generation": "\n        char[] wordArray = word.toCharArray();\n        int n = wordArray.length;\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isVowel(wordArray[mid])) {\n                left = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        if (left == 0) {\n            return \"\";\n        }\n        if (isVowel(wordArray[left - 1])) {\n            return String.valueOf(wordArray[left - 1]);\n        }\n        if (isVowel(wordArray[left])) {\n            return String.valueOf(wordArray[left]);\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        int open = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else {\n                open--;\n                if (open < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return open == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        // sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        // return the first k elements\n        return arr.subList(0, k);\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\n// class Solution {\n//     public int solution(List<Integer> lst) {\n//         int sum = 0;\n//         for (int i = 0; i < lst.size(); i++) {\n//             if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n//                 sum += lst.get(i);\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int solution(List<Integer> lst) {\n//         int sum = 0;\n//         for (int i = 0; i < lst.size(); i++) {\n//             if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n//                 sum += lst.get(i);\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int solution(List<Integer> lst) {\n//         int sum = 0;\n//         for (int i = 0; i < lst.size(); i++) {\n//             if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n//                 sum += lst.get(i);\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int solution(List<Integer> lst) {\n//         int sum = 0;\n//         for (int i = 0; i < lst.size(); i++) {\n//             if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n//                 sum += lst.get(i);\n//             }\n//         }\n//         return sum;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int solution(List<Integer> lst) {\n//         int sum = 0;\n//         for (int i = 0; i < lst.size(); i++) {\n//             if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n//"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        // check if date string not empty\n        if (date.isEmpty()) {\n            return false;\n        }\n        // split date string into array of strings\n        String[] dateParts = date.split(\"-\");\n        // check if date format is mm-dd-yyyy\n        if (dateParts.length != 3) {\n            return false;\n        }\n        // check if month is not less than 1 or higher than 12\n        if (Integer.parseInt(dateParts[0]) < 1 || Integer.parseInt(dateParts[0]) > 12) {\n            return false;\n        }\n        // check if day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n        if (Integer.parseInt(dateParts[0]) == 1 || Integer.parseInt(dateParts[0]) == 3 || Integer.parseInt(dateParts[0]) == 5 || Integer.parseInt(dateParts[0]) == 7 || Integer.parseInt(dateParts[0]) == 8 || Integer.parseInt(dateParts[0]) == 10 || Integer.parseInt(dateParts[0]) == 12) {\n            if (Integer.parseInt(dateParts[1]) < 1 || Integer.parseInt(dateParts[1]) > 31) {\n                return false;\n            }\n        }\n        // check if day is not less than 1 or higher than 30 days for months 4,6,9,11\n        else if (Integer.parseInt(dateParts[0]) == 4 || Integer.parseInt(dateParts[0]) == 6 || Integer.parseInt(dateParts[0]) == 9 || Integer.parseInt(dateParts[0]) == 11) {\n            if (Integer.parseInt(dateParts[1]) < 1 || Integer.parseInt(dateParts[1]) > 30) {\n                return false;\n            }\n        }\n        // check if day is not less than 1 higher than 29 for month 2\n        else if (Integer.parseInt(dateParts[0]) == 2) {\n            if (Integer.parseInt(dateParts[1]) < 1 || Integer.parseInt(dateParts[1]) > 29) {\n                return false;\n            }\n        }\n        // check if year is not empty\n        if (dateParts[2].isEmpty()) {\n            return false;\n        }\n        // check if year is not less than 1\n        if (Integer.parseInt(dateParts[2]) < 1) {\n            return false;\n        }\n        // if all checks"}
{"task_id": "Java/125", "generation": "\n        if(txt.contains(\" \")){\n            String[] words = txt.split(\" \");\n            List<String> list = new ArrayList<String>();\n            for(String word : words){\n                list.add(word);\n            }\n            return list;\n        }else if(txt.contains(\",\")){\n            String[] words = txt.split(\",\");\n            List<String> list = new ArrayList<String>();\n            for(String word : words){\n                list.add(word);\n            }\n            return list;\n        }else{\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++){\n                if(Character.isLowerCase(txt.charAt(i))){\n                    count++;\n                }\n            }\n            return count % 2;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() -"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int magnitude = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.empty();\n            }\n            if (num < 0) {\n                sign *= -1;\n            }\n            magnitude += Math.abs(num);\n        }\n        return Optional.of(sign * magnitude);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] visited = new int[rows][cols];\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        Queue<int[]> queue = new LinkedList<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                queue.offer(new int[]{i, j, 0});\n                visited[i][j] = 1;\n            }\n        }\n        while (!queue.isEmpty()) {\n            int[] current = queue.poll();\n            int x = current[0];\n            int y = current[1];\n            int step = current[2];\n            if (step == k) {\n                result.add(grid.get(x).get(y));\n                return result;\n            }\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n                if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && visited[newX][newY] == 0) {\n                    queue.offer(new int[]{newX, newY, step + 1});\n                    visited[newX][newY] = 1;\n                }\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        result.add(1);\n        result.add(3);\n        for (int i = 2; i < n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add((i - 1) + (i - 2) + (i + 1));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}  // class Solution\n\n// class Solution {\n//     public int digits(int n) {\n//         int product = 1;\n//         while (n > 0) {\n//             int digit = n % 10;\n//             if (digit % 2 == 0) {\n//                 return 0;\n//             } else {\n//                 product *= digit;\n//             }\n//             n /= 10;\n//         }\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int digits(int n) {\n//         int product = 1;\n//         while (n > 0) {\n//             int digit = n % 10;\n//             if (digit % 2 == 0) {\n//                 return 0;\n//             } else {\n//                 product *= digit;\n//             }\n//             n /= 10;\n//         }\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int digits(int n) {\n//         int product = 1;\n//         while (n > 0) {\n//             int digit = n % 10;\n//             if (digit % 2 == 0) {\n//                 return 0;\n//             } else {\n//                 product *= digit;\n//             }\n//             n /= 10;\n//         }\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int digits(int n) {\n//         int product = 1;\n//         while (n > 0) {\n//             int digit = n % 10;\n//             if (digit % 2 == 0) {\n//                 return 0;\n//             } else {\n//                 product *= digit;\n//             }\n//             n /= 10;\n//         }\n//         return product;\n//     }\n// }  // class Solution\n\n// class Solution {\n//     public int digits(int n) {\n//         int product = 1;\n//         while (n > 0) {\n//             int digit = n % 10;\n//             if (digit % 2 == 0"}
{"task_id": "Java/132", "generation": "\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count > 0;\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/134", "generation": "\n        String[] words = txt.split(\" \");\n        if (words.length == 0) {\n            return false;\n        }\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 0) {\n            return false;\n        }\n        return Character.isLetter(lastWord.charAt(lastWord.length() - 1));\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) <= arr.get(j)) {\n                    max = Math.max(max, j);\n                }\n            }\n        }\n        return max == 0 ? -1 : max;\n    }\n\n    \n}"}
{"task_id": "Java/136", "generation": "\n        if(lst.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0 && i > max){\n                max = i;\n            }\n            if(i > 0 && i < min){\n                min = i;\n            }\n        }\n        if(max == Integer.MIN_VALUE && min == Integer.MAX_VALUE){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        return Arrays.asList(Optional.of(max), Optional.of(min));\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) a < (Integer) b) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Integer && b instanceof Float) {\n            if ((Integer) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Integer) a < (Float) b) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Integer && b instanceof String) {\n            try {\n                int bInt = Integer.parseInt(b.toString().replace(\",\", \"\"));\n                if ((Integer) a > bInt) {\n                    return Optional.of(a);\n                } else if ((Integer) a < bInt) {\n                    return Optional.of(b);\n                } else {\n                    return Optional.empty();\n                }\n            } catch (NumberFormatException e) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Integer) {\n            if ((Float) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Float) a < (Integer) b) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) a < (Float) b) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float && b instanceof String) {\n            try {\n                float bFloat = Float.parseFloat(b.toString().replace(\",\", \"\"));\n                if ((Float) a > bFloat) {\n                    return Optional.of(a);\n                } else if ((Float) a < bFloat) {\n                    return Optional.of(b);\n                } else {\n                    return Optional.empty();\n                }\n            } catch (NumberFormatException e) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof Integer) {\n            try {\n                int aInt = Integer.parseInt(a.toString().replace(\",\", \"\"));\n                if (aInt > (Integer) b) {\n                    return Optional.of(a);\n                } else if (aInt < (Integer) b) {\n                    return Optional.of(b);\n"}
{"task_id": "Java/138", "generation": "\n        for (int i = 0; i < 1000; i++) {\n            for (int j = 0; j < 1000; j++) {\n                for (int k = 0; k < 1000; k++) {\n                    for (int l = 0; l < 1000; l++) {\n                        if (i + j + k + l == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n                    if (i + 1 < text.length() && text.charAt(i + 1) == ' ') {\n                        sb.append('-');\n                    } else {\n                        sb.append('_');\n                    }\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n} \n\nclass Solution {\n    /**\n    string text replace spaces with underscores\n   if string more than 2 consecutive spaces\n   replace consecutive spaces with -\n  \n   fix_spaces(\"Example\") ==\"\n   fix_spaces 1\") \"Example_1\"\n   fix_spaces Example 2\")_2\"\n   fix_spaces Example   3\")_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n                    if (i + 1 < text.length() && text.charAt(i + 1) == ' ') {\n                        sb.append('-');\n                    } else {\n                        sb.append('_');\n                    }\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n} \n\nclass Solution {\n    /**\n    string text replace spaces with underscores\n   if string more than 2 consecutive spaces\n   replace consecutive spaces with -\n  \n   fix_spaces(\"Example\") ==\"\n   fix_spaces 1\") \"Example_1\"\n   fix_spaces Example 2\")_2\"\n   fix_spaces Example   3\")_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n                    if (i + 1 < text.length() && text.charAt(i + 1) == ' ') {\n                       "}
{"task_id": "Java/141", "generation": "\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n        String extension = parts[1];\n        if (name.isEmpty() || !name.matches(\"[a-zA-Z][a-zA-Z0-9]*\") || extension.matches(\"[a-zA-Z]{3}\")) {\n            return \"No\";\n        }\n        int count = 0;\n        for (char c : name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        if (count > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}  // class Solution\n\\end{code}\n\nComment: Your code seems to be correct and follows the problem's requirements. However, I would like to suggest a few improvements for better readability and maintainability.\n\n1. You can use a more descriptive variable name instead of `parts`. For example, `fileParts`.\n\n2. You can use a more descriptive variable name instead of `name`. For example, `fileName`.\n\n3. You can use a more descriptive variable name instead of `extension`. For example, `fileExtension`.\n\n4. You can use a more descriptive variable name instead of `count`. For example, `digitCount`.\n\n5. You can use a more descriptive variable name instead of `c`. For example, `char`.\n\n6. You can use a more descriptive variable name instead of `file_name`. For example, `fileName`.\n\n7. You can use a more descriptive variable name instead of `file_name_check`. For example, `isValidFileName`.\n\nHere is the improved code:\n\n\\begin{code}\npublic String isValidFileName(String fileName) {\n    String[] fileParts = fileName.split(\"\\\\.\");\n    if (fileParts.length != 2) {\n        return \"No\";\n    }\n    String fileNamePart = fileParts[0];\n    String fileExtension = fileParts[1];\n    if (fileNamePart.isEmpty() || !fileNamePart.matches(\"[a-zA-Z][a-zA-Z0-9]*\") || fileExtension.matches(\"[a-zA-Z]{3}\")) {\n        return \"No\";\n    }\n    int digitCount = 0;\n    for (char char : fileNamePart.toCharArray()) {\n        if (Character.isDigit(char)) {\n            digitCount++;\n        }\n    }\n    if (digitCount > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\\end{\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // convert string to fraction\n        int[] xNum = convert(x);\n        int[] nNum = convert(n);\n        // multiply fractions\n        int[] result = multiply(xNum, nNum);\n        // check if result is whole number\n        return result[1] == 0;\n    }\n\n    private int[] convert(String s) {\n        String[] parts = s.split(\"/\");\n        int numerator = Integer.parseInt(parts[0]);\n        int denominator = Integer.parseInt(parts[1]);\n        return new int[]{numerator, denominator};\n    }\n\n    private int[] multiply(int[] x, int[] n) {\n        int numerator = x[0] * n[0];\n        int denominator = x[1] * n[1];\n        return new int[]{numerator, denominator};\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        if (nums == null || nums.isEmpty()) {\n            return nums;\n        }\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = getSum(a);\n                int sumB = getSum(b);\n                if (sumA == sumB) {\n                    return nums.indexOf(a) - nums.indexOf(b);\n                } else {\n                    return sumA - sumB;\n                }\n            }\n\n            private int getSum(Integer num) {\n                int sum = 0;\n                while (num != 0) {\n                    sum += num % 10;\n                    num /= 10;\n                }\n                return sum;\n            }\n        });\n        return nums;\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/147", "generation": "\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets.length; j++) {\n                if (planets[i].equals(planet1) && planets[j].equals(planet2)) {\n                    for (int k = i + 1; k < j; k++) {\n                        result.add(planets[k]);\n                    }\n                    return result;\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    public List<String> bf2(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        int index1 = -1;\n        int index2 = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets[i]);\n        }\n        return result;\n    }\n\n    public List<String> bf3(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        int index1 = -1;\n        int index2 = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, Comparator.comparingInt(String::length)\n                .thenComparing(Comparator.naturalOrder()));\n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if ((int) num > 0 && num % 2 == 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int max_strength = -1;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length() - b.length() + 1; i++) {\n            if (a.substring(i, i + b.length()).equals(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int remainder = num % 10;\n            if (remainder % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/156", "generation": "\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                result.append(roman[i]);\n                number -= values[i];\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Check if the sides can form a right-angled triangle\n        // using the Pythagorean theorem\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n    }\n}"}
{"task_id": "Java/158", "generation": "\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            int unique = countUnique(word);\n            if (unique > max) {\n                max = unique;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\n    private int countUnique(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + need;\n        int left = remaining - (total - number);\n        return Arrays.asList(total, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        if (operator.size() != operand.size() - 1) {\n            return -1;\n        }\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"//\")) {\n                result = result / operand.get(i + 1);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n} \n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
