{"task_id": "Java/0", "generation": "\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n\n        double diff = numbers.get(1) - numbers.get(0);\n        for (int i = 2; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i - 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int open = 0;\n        StringBuilder current = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                open++;\n                current.append(c);\n            } else if (c == ')') {\n                open--;\n                current.append(c);\n                if (open == 0) {\n                    result.add(current.toString());\n                    current = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return (double) (int) number;\n    }\n}\n\n"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        sum = 0.0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int level = 0;\n            int max_level = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    level++;\n                    if (level > max_level) {\n                        max_level = level;\n                    }\n                } else if (c == ')') {\n                    level--;\n                }\n            }\n            levels.add(max_level);\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        for (int i = string.length(); i >= 0; i--) {\n            if (isPalindrome(string.substring(0, i))) {\n                return string + new StringBuilder(string.substring(0, i)).reverse().toString();\n            }\n        }\n        return string;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for(int i = 0; i < a.length(); i++){\n            if(a.charAt(i) == b.charAt(i))\n                result.append('0');\n            else\n                result.append('1');\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if(strings.isEmpty()){\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for(String s: strings){\n            if(s.length() > longest.length()){\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            String sub = string.substring(i, i + substring.length());\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        String[] validNums = {\"zero\", \"one\", \"two\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[] sortedNums = {\"zero\", \"one\", \"two\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < validNums.length; j++) {\n                if (nums[i].equals(validNums[j])) {\n                    sortedNums[i] = nums[i];\n                }\n            }\n        }\n\n        return String.join(\" \", sortedNums);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        for(int i = n/2; i > 0; i--) {\n            if(n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        double left = -1000000;\n        double right = 1000000;\n        while ((right - left) > 0.00001) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) > 0) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        List<Integer> third = new ArrayList<>();\n\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                third.add(l.get(i));\n            }\n        }\n\n        Collections.sort(third);\n\n        int j = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                result.add(third.get(j++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        if (l == null || l.size() == 0) {\n            throw new IllegalArgumentException(\"List is null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n\n        int j = 0;\n        for (int i = 1; i < l.size(); i += 2) {\n            l.set(i, evenIndices.get(j++));\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        List<String> groups = new ArrayList<>(Arrays.asList(s.split(\"\")));\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        if (n == 1) {\n            return 2;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 3) {\n            return 5;\n        } else if (n == 4) {\n            return 13;\n        } else {\n            int fib1 = 2;\n            int fib2 = 3;\n            int fib3 = 5;\n            int fib4 = 13;\n            int fibN = 0;\n            for (int i = 4; i <= n; i++) {\n                fibN = fib1 + fib2;\n                fib1 = fib2;\n                fib2 = fib3;\n                fib3 = fib4;\n                fib4 = fibN;\n            }\n            return fibN;\n        }\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        s.add(l.get(i));\n                        s.add(l.get(j));\n                        s.add(l.get(k));\n                        if (s.size() > 3) {\n                            return true;\n                        }\n                    }\n                }\n                s.clear();\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // write your code here\n        if (n <= 0) {\n            return 0;\n        }\n\n        int totalCollisions = 0;\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                totalCollisions++;\n            }\n        }\n\n        return totalCollisions;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            } else {\n                set.add(i);\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        boolean isNegative = false;\n        if (x < 0) {\n            isNegative = true;\n            x = -x;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        if (isNegative) {\n            sb.append('-');\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 2;\n        if(n == 3) return 0;\n        \n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        if(n == 0) {\n            return 1;\n        }\n        if(p == 0) {\n            return 0;\n        }\n        if(n < p) {\n            return n;\n        }\n        return modp(n % p, p);\n    }\n\n    \n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        return Arrays.equals(chars0, chars1);\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if(n<=0) {\n            return 0;\n        }\n        if(n==1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int fib = 0;\n        for(int i=2; i<=n; i++) {\n            fib = a + b;\n            a = b;\n            b = fib;\n        }\n        return fib;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '<') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        List<Integer> commonList = new ArrayList<>();\n        for(int i=0; i<l1.size(); i++) {\n            for(int j=0; j<l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    commonList.add(l1.get(i));\n                }\n            }\n        }\n        return commonList;\n    }\n\n    \n}"}
{"task_id": "Java/59", "generation": "\n        int max = -1;\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n /= i;\n            }\n        }\n        if (n > 2)\n            max = n;\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/63", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        \n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        \n        for(int i = 3; i <= n; i++){\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return dp[n];\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiouyAEIOUY\";\n        for(int i = 0; i < s.length(); i++) {\n            if(vowels.indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int n = str.length();\n        StringBuilder sb = new StringBuilder(str);\n        sb.reverse();\n        String reversed = sb.toString();\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            if (i < shift) {\n                result += reversed.charAt(i);\n            } else {\n                result += str.charAt(i - shift);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[1]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEvenValue = -1;\n        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue == -1 || arr.get(i) < smallestEvenValue) {\n                    smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n                }\n            }\n        }\n        if (smallestEvenValue != -1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for(int num : lst){\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        for(int i = 1; i <= lst.size(); i++){\n            if(freqMap.get(i) != null && freqMap.get(i) >= i){\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        // sort the list in ascending order\n        Collections.sort(lst);\n\n        List<Integer> result = new ArrayList<>();\n\n        // while there are still elements in the list\n        while (!lst.isEmpty()) {\n            // add the smallest element to the result\n            result.add(lst.remove(0));\n\n            // if there are still elements in the list, add the largest to the result\n            if (!lst.isEmpty()) {\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i: q){\n            sum += i;\n        }\n        return sum <= w;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int n = arr.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                changes++;\n            }\n        }\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        if(lst1.isEmpty() || lst2.isEmpty()){\n            return lst1.isEmpty() ? lst2 : lst1;\n        }\n        int count1 = 0;\n        int count2 = 0;\n        for(String s : lst1){\n            for(char c : s.toCharArray()){\n                if(Character.isDigit(c)){\n                    count1 += Character.getNumericValue(c);\n                }\n            }\n        }\n        for(String s : lst2){\n            for(char c : s.toCharArray()){\n                if(Character.isDigit(c)){\n                    count2 += Character.getNumericValue(c);\n                }\n            }\n        }\n        if(count1 < count2){\n            return lst1;\n        }else if(count1 > count2){\n            return lst2;\n        }else{\n            return lst1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 100) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int j = 2;\n                while (i * j <= a) {\n                    if (a % (i * j) == 0) {\n                        return false;\n                    }\n                    j++;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (n == 1) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (x == 2) {\n            return true;\n        }\n        if (n % x != 0) {\n            return false;\n        }\n        int temp = n;\n        while (temp % x == 0) {\n            temp = temp / x;\n        }\n        if (temp == 1) {\n            return true;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.round(Math.cbrt(a));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        if(num.length() == 0) return count;\n        for(int i=0; i<num.length(); i++){\n            char c = num.charAt(i);\n            if(c == '2' || c == '3' || c == '5' || c == '7') count++;\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            set.add(a);\n            set.add(b);\n            set.add(c);\n            if (set.size() == 3) {\n                return true;\n            }\n            set.remove(a);\n            set.remove(b);\n            set.remove(c);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        if (string.length() % 2 == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(string.length()); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n < 1) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            count += (int) Math.pow(10, i - 1) * 9 * (n - i);\n        }\n        count += (n == 1) ? 1 : (int) Math.pow(10, n - 1) + 1;\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while(N > 0){\n            sum += N % 2;\n            N = N / 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        Arrays.sort(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> temp = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                temp.add(lst.get(i).get(j));\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n\n    \n}"}
{"task_id": "Java/88", "generation": "\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i : array) {\n            if (i % 2 == 0) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        Collections.sort(odd);\n        Collections.reverse(even);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(odd);\n        result.addAll(even);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encrypted.append((char) (((c - 'A') + 2) % 26 + 'A'));\n            } else {\n                encrypted.append((char) (((c - 'a') + 2) % 26 + 'a'));\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int first = lst.get(0);\n        int second = lst.get(1);\n\n        if (first > second) {\n            return Optional.of(second);\n        }\n\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                return Optional.of(lst.get(i));\n            }\n            first = second;\n            second = lst.get(i);\n        }\n\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a + b == c || a + c == b || b + c == a;\n        } else {\n            return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encodedMessage.append(Character.toLowerCase(c));\n                } else {\n                    encodedMessage.append(Character.toUpperCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(isPrime(lst.get(i))){\n                sum += sumDigits(lst.get(i));\n            }\n        }\n        return sum;\n    }\n\n    public boolean isPrime(int n){\n        if(n <= 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i * i <= n; i += 2){\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public int sumDigits(int n){\n        int sum = 0;\n        while(n > 0){\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (String key : dict.keySet()) {\n            if (!key.matches(\"[a-zA-Z]+\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int result = a * b;\n        return result % 10;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int num = Integer.parseInt(value);\n        return num + 1;\n    }\n\n    public int countLower(String value) {\n        int num = Integer.parseInt(value);\n        return num - 1;\n    }\n\n    public int closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        if (num % 2 == 0) {\n            if (num > 0) {\n                return countUpper(String.valueOf(num));\n            } else {\n                return countLower(String.valueOf(num));\n            }\n        } else {\n            if (num > 0) {\n                return countUpper(String.valueOf(num));\n            } else {\n                return countLower(String.valueOf(num));\n            }\n        }\n    }\n}\n\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            if(n % 2 == 0) {\n                result.add(n + 2 * i);\n            } else {\n                result.add(n + 2 * i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<String>();\n        String[] splitWords = s.split(\"[, ]\");\n        for(String word : splitWords) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        int max = y;\n        while (y > 0) {\n            if (max - y < y - x) {\n                max -= y;\n            } else {\n                max += y;\n            }\n            y--;\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n        return Integer.toBinaryString(roundedAvg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (isEvenDigit(x.get(i))) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean isEvenDigit(int n) {\n        while (n > 0) {\n            if ((n % 10) % 2 != 0) {\n                return false;\n            }\n            n = n / 10;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<String> names = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        List<Integer> sorted = new ArrayList<>();\n        List<Integer> reversed = new ArrayList<>();\n\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                sorted.add(num);\n                reversed.add(num);\n            }\n        }\n\n        Collections.sort(sorted);\n        Collections.reverse(reversed);\n\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(names.get(reversed.get(i) - 1));\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(i);\n            } else {\n                int factorial = 1;\n                for(int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n            if(isPalindrome(i)){\n                if(i % 2 == 0) result.add(i);\n                else result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public boolean isPalindrome(int n){\n        String str = Integer.toString(n);\n        int start = 0, end = str.length() - 1;\n        while(start < end){\n            if(str.charAt(start) != str.charAt(end)) return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) > 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int inversions = 0;\n\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                inversions++;\n            }\n        }\n\n        if (arr.get(n - 1) > arr.get(0)) {\n            inversions++;\n        }\n\n        return inversions % 2 == 0;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        if (count % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> histogram = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder(s);\n        StringBuilder sb2 = new StringBuilder(c);\n        StringBuilder sb3 = new StringBuilder();\n        List<Object> result = new ArrayList<>();\n        while (sb.length() > 0) {\n            if (sb.charAt(0) == sb2.charAt(0)) {\n                sb.deleteCharAt(0);\n                sb2.deleteCharAt(0);\n            } else {\n                sb3.append(sb.charAt(0));\n                sb.deleteCharAt(0);\n            }\n        }\n        result.add(sb3.toString());\n        result.add(sb.toString().equals(sb2.reverse().toString()));\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"number of odd elements in string \" + (i + 1) + \" is \" + count);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            minSum = Math.min(minSum, curSum);\n            curSum = Math.min(curSum, 0);\n        }\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        int[][] bucket = new int[n][m];\n        int res = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1;\n                    if(i>0 && j>0 && grid.get(i-1).get(j-1) == 1 && grid.get(i-1).get(j) == 0 && grid.get(i).get(j) == 0){\n                        res = Math.max(res, dp[i][j] - bucket[i-1][j]);\n                    }\n                    if(i>0 && grid.get(i-1).get(j) == 1){\n                        bucket[i][j] = bucket[i-1][j] + 1;\n                    }\n                    if(j>0 && grid.get(i).get(j-1) == 1){\n                        bucket[i][j] = Math.min(bucket[i][j], bucket[i][j-1] + 1);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                String aBinary = Integer.toBinaryString(a);\n                String bBinary = Integer.toBinaryString(b);\n                int aDecimal = Integer.parseInt(aBinary, 2);\n                int bDecimal = Integer.parseInt(bBinary, 2);\n                return aDecimal - bDecimal;\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if(s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for(String word : words){\n            int count = 0;\n            for(char c : word.toCharArray()){\n                if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && Character.isLetter(c)){\n                    count++;\n                }\n            }\n            if(count == n){\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"AEIOUaeiou\";\n        String consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n        StringBuilder result = new StringBuilder();\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                if (i < word.length() - 1 && consonants.indexOf(word.charAt(i + 1)) != -1) {\n                    result.append(c);\n                    break;\n                }\n            }\n        }\n        return result.length() > 0 ? result.toString() : \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String str = \"\";\n        for(String s : lst) {\n            str += s;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if(c == '(') {\n                stack.push(c);\n            } else {\n                if(stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n\n        if(!stack.isEmpty()) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.add(num);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 != 0 && lst.get(i) % 2 != 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || date.indexOf('-') != 2) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12 || day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0)) {\n                if (day > 28) {\n                    return false;\n                }\n            } else {\n                if (day > 29) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    count++;\n                }\n            }\n            return count % 2 == 0 ? count : (int) (count / Math.log10(2));\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() < 2) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (end1 < start2 || end2 < start1) {\n            return \"NO\";\n        }\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionEnd - intersectionStart < 2) {\n            return \"NO\";\n        }\n\n        for (int i = intersectionStart + 1; i < intersectionEnd; i++) {\n            if (isPrime(i)) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if(arr.isEmpty()){\n            return Optional.empty();\n        }\n        int sign = 1;\n        int product = 1;\n        for(int num : arr){\n            if(num < 0){\n                sign *= -1;\n            }\n            product *= num;\n        }\n        return Optional.of(sign * product);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        PriorityQueue<Path> pq = new PriorityQueue<>((a, b) -> a.val - b.val);\n        boolean[][] visited = new boolean[n][n];\n        pq.add(new Path(grid[0][0], 0, 0));\n        while (!pq.isEmpty()) {\n            Path cur = pq.poll();\n            if (cur.dist == k) {\n                return cur.path;\n            }\n            if (cur.x > 0 && !visited[cur.x - 1][cur.y]) {\n                List<Integer> newPath = new ArrayList<>(cur.path);\n                newPath.add(grid[cur.x - 1][cur.y]);\n                pq.add(new Path(grid[cur.x - 1][cur.y], cur.x - 1, cur.y));\n                visited[cur.x - 1][cur.y] = true;\n            }\n            if (cur.y > 0 && !visited[cur.x][cur.y - 1]) {\n                List<Integer> newPath = new ArrayList<>(cur.path);\n                newPath.add(grid[cur.x][cur.y - 1]);\n                pq.add(new Path(grid[cur.x][cur.y - 1], cur.x, cur.y - 1));\n                visited[cur.x][cur.y - 1] = true;\n            }\n            if (cur.x < n - 1 && !visited[cur.x + 1][cur.y]) {\n                List<Integer> newPath = new ArrayList<>(cur.path);\n                newPath.add(grid[cur.x + 1][cur.y]);\n                pq.add(new Path(grid[cur.x + 1][cur.y], cur.x + 1, cur.y));\n                visited[cur.x + 1][cur.y] = true;\n            }\n            if (cur.y < n - 1 && !visited[cur.x][cur.y + 1]) {\n                List<Integer> newPath = new ArrayList<>(cur."}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 1) return result;\n        result.add(1);\n        if (n == 1) return result;\n        result.add(2);\n        if (n == 2) return result;\n        if (n == 3) {\n            result.add(8);\n            return result;\n        }\n        int a = 1, b = 2, c = 8;\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                c = a + b + c;\n            } else {\n                c = a + (b - 1) + (c + 1);\n            }\n            result.add(c);\n            a = b;\n            b = c;\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for(Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if(txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        if(n < 2) return -1;\n        int maxIndex = -1;\n        int maxValue = -1;\n        for(int i=0; i<n-1; i++){\n            if(arr.get(i) < arr.get(i+1)){\n                maxIndex = i;\n                maxValue = arr.get(i+1);\n                for(int j=i+2; j<n; j++){\n                    if(arr.get(j) > maxValue){\n                        maxIndex = j;\n                        maxValue = arr.get(j);\n                    }\n                }\n            }\n        }\n        return maxIndex;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        if(lst.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        Optional<Integer> maxOpt = Optional.empty();\n        Optional<Integer> minOpt = Optional.empty();\n        for(int num : lst){\n            if(num < 0 && num > max){\n                max = num;\n                maxOpt = Optional.of(max);\n            }\n            if(num >= 0 && num < min){\n                min = num;\n                minOpt = Optional.of(min);\n            }\n        }\n        return Arrays.asList(maxOpt, minOpt);\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof String && b instanceof String) {\n            return compareStrings((String) a, (String) b);\n        } else if (a instanceof String) {\n            return compareStrings((String) a, String.valueOf(b));\n        } else if (b instanceof String) {\n            return compareStrings(String.valueOf(a), (String) b);\n        } else {\n            return compareNumbers((Integer) a, (Integer) b);\n        }\n    }\n\n    private Optional<Object> compareStrings(String a, String b) {\n        List<String> listA = new ArrayList<>(Arrays.asList(a.split(\",\")));\n        List<String> listB = new ArrayList<>(Arrays.asList(b.split(\",\")));\n        listA.sort(Comparator.reverseOrder());\n        listB.sort(Comparator.reverseOrder());\n        if (listA.equals(listB)) {\n            return Optional.empty();\n        } else if (listA.compareTo(listB) > 0) {\n            return Optional.of(b);\n        } else {\n            return Optional.of(a);\n        }\n    }\n\n    private Optional<Object> compareNumbers(Integer a, Integer b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        } else if (a > b) {\n            return Optional.of(b);\n        } else {\n            return Optional.of(a);\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 2; i <= n; i += 2) {\n            sum += i;\n        }\n        return sum == n;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for(int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        if(n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n\n"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n                if (count > 2) {\n                    sb.append('-');\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(c);\n                count = 0;\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        String[] splitName = file_name.split(\"\\\\.\");\n        if (splitName.length != 2) {\n            return \"No\";\n        }\n        String name = splitName[0];\n        if (name.length() > 3 || !Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        for (int i = 1; i < name.length(); i++) {\n            if (!Character.isLetter(name.charAt(i)) && !Character.isDigit(name.charAt(i))) {\n                return \"No\";\n            }\n        }\n        String extension = splitName[1];\n        if (!(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"dll\"))) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int gcd = gcd(xDenominator, nDenominator);\n\n        int newNumerator = xNumerator * nNumerator / gcd;\n        int newDenominator = xDenominator * nDenominator / gcd;\n\n        return newNumerator == newDenominator;\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        if (nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        List<Integer> indexedNums = new ArrayList<>();\n\n        for (int i = 0; i < nums.size(); i++) {\n            indexedNums.add(nums.get(i));\n            indexedNums.add(i);\n        }\n\n        Collections.sort(indexedNums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumDigits(a);\n                int sumB = sumDigits(b);\n\n                if (sumA == sumB) {\n                    return a.compareTo(b);\n                }\n\n                return sumA - sumB;\n            }\n        });\n\n        for (int i = 0; i < indexedNums.size(); i += 2) {\n            result.add(indexedNums.get(i + 1));\n        }\n\n        return result;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 < index2) {\n            result.addAll(planets.subList(index1 + 1, index2));\n        } else {\n            result.addAll(planets.subList(index2 + 1, index1));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        lst.removeIf(s -> s.length() % 2 != 0);\n        Collections.sort(lst, Comparator.comparing(String::length).thenComparing(String::compareTo));\n        return lst;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for(Object num : lst) {\n            int n = (int) num;\n            if(n < 0) continue;\n            if(n % 2 != 0) sum += n * n;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            if(game.get(i) == guess.get(i)){\n                result.add(0);\n            } else {\n                result.add(diff);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = -1;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            int strength = countStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int countStrength(String extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return cap - sm;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (b.length() > a.length()) {\n            return false;\n        }\n        String bb = b + b;\n        return bb.contains(a);\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        if (number == 0) {\n            return \"\";\n        }\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n\n        return roman.toString();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {\n            return true;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        Collections.sort(words, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                int count1 = (int) o1.chars().distinct().count();\n                int count2 = (int) o2.chars().distinct().count();\n                if (count1 != count2) {\n                    return count2 - count1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return words.get(0);\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(remaining >= need) {\n            remaining -= need;\n            result.add(remaining + number);\n            result.add(need);\n        } else {\n            result.add(remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n\n        for (int i = 1; i < operand.size(); i++) {\n            String op = operator.get(i - 1);\n            int num = operand.get(i);\n\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"//\")) {\n                result /= num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n\n        return Optional.of(hashtext);\n    }\n}\n\n// Test the function\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
