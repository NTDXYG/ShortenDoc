{"task_id": "Java/0", "generation": "\n        // Write your code here\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> paren_groups = new ArrayList<>();\n        int open_brace_count = 0;\n        int start_index = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                open_brace_count++;\n            } else if (c == ')') {\n                open_brace_count--;\n            }\n            if (open_brace_count == 0) {\n                paren_groups.add(paren_string.substring(start_index, i + 1));\n                start_index = i + 1;\n            }\n        }\n        return paren_groups;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        double mean = 0.0;\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double deviation = 0.0;\n        for (double number : numbers) {\n            deviation += Math.abs(number - mean);\n        }\n        return deviation / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int level = 0;\n            int max_level = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    level++;\n                    max_level = Math.max(level, max_level);\n                } else if (c == ')') {\n                    level--;\n                }\n            }\n            result.add(max_level);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        if (i == j) {\n            return string + new StringBuilder(string).reverse().toString();\n        }\n        return string + new StringBuilder(string.substring(0, i)).reverse().toString();\n    }\n    \n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        if (n == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        return distinctCharacters.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        // Create a map to store the number values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        // Split the input string into an array of numbers\n        String[] numberArray = numbers.split(\" \");\n\n        // Create a list to store the number values\n        List<Integer> numberList = new ArrayList<>();\n\n        // Convert each number string to an integer and add it to the list\n        for (String number : numberArray) {\n            numberList.add(numberMap.get(number));\n        }\n\n        // Sort the list in ascending order\n        Collections.sort(numberList);\n\n        // Create a string to store the sorted numbers\n        StringBuilder sortedNumbers = new StringBuilder();\n\n        // Convert each number in the list back to a string and append it to the sortedNumbers string\n        for (int number : numberList) {\n            sortedNumbers.append(number).append(\" \");\n        }\n\n        // Remove the trailing space and return the sorted numbers string\n        return sortedNumbers.toString().trim();\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        // Sort the list in ascending order\n        Collections.sort(numbers);\n\n        // Initialize variables to store the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        // Iterate through the list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        // Return the closest pair\n        return closestPair;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        // Write your code here\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        List<Double> res = new ArrayList<>();\n        for (Double num : numbers) {\n            res.add((num - min) / (max - min));\n        }\n        return res;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n    \n    /**\n    Return string with reversed order\n    reverse('abc')\n    'cba'\n    reverse('1234567890')\n    '0987654321'\n     */\n    public String reverse(String string) {\n        return new StringBuilder(string).reverse().toString();\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, char oldChar, char newChar) {\n        return string.replace(oldChar, newChar);\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, String oldString, String newString) {\n        return string.replace(oldString, newString);\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, char oldChar, String newString) {\n        return string.replace(oldChar, newString.charAt(0));\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, String oldString, char newChar) {\n        return string.replace(oldString.charAt(0), newChar);\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, char oldChar, char newChar, int count) {\n        return string.replace(oldChar, newChar, count);\n    }\n    \n    /**\n    Return string with replaced character\n    replace('abc', 'a', 'd')\n    'dbc'\n    replace('abc', 'b', 'd')\n    'adc'\n     */\n    public String replace(String string, String oldString, String newString, int count) {\n        return string.replace(oldString, newString, count);\n    }\n    \n    /**\n    Return string with replaced\n}"}
{"task_id": "Java/24", "generation": "\n        int largestDivisor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n    }\n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (!set.contains(number)) {\n                set.add(number);\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        double step = 0.01;\n        double result = poly(xs, x);\n        while (result != 0) {\n            x += step;\n            result = poly(xs, x);\n        }\n        return x;\n    }\n    \n    \n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l2.size(); i++) {\n            l.set(i * 3, l2.get(i));\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        return new ArrayList<>(set);\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        for (int i = 0; i < even.size(); i++) {\n            l.set(i * 2, even.get(i));\n        }\n        for (int i = 0; i < odd.size(); i++) {\n            l.set(i * 2 + 1, odd.get(i));\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int count = 0;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        // Write your code here\n        if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        return 0;\n    }\n}"}
{"task_id": "Java/42", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            result.add(l.get(i) + 1);\n        }\n        return result;\n    }\n\n    /**\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]\n     */\n    public List<Integer> incrList2(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]\n     */\n    public List<Integer> incrList3(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]\n     */\n    public List<Integer> incrList4(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]\n     */\n    public List<Integer> incrList5(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 \n}"}
{"task_id": "Java/43", "generation": "\n        // Write your code here\n        if(l.size() < 2) {\n            return false;\n        }\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(set.contains(-l.get(i))) {\n                return true;\n            }\n            set.add(l.get(i));\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return n % p;\n        }\n        if (n % 2 == 0) {\n            return (modp(n / 2, p) * modp(n / 2, p)) % p;\n        } else {\n            return ((n % p) * modp(n / 2, p) * modp(n / 2, p)) % p;\n        }\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!vowels.contains(String.valueOf(c))) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    /**\n   \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            set.add(s0.charAt(i));\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            if (!set.contains(s1.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "\n        if (l.size() <= 1) {\n            return true;\n        }\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (!increasing && !decreasing) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j < i; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n    }\n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/65", "generation": "\n        String s = Integer.toString(x);\n        int n = s.length();\n        shift %= n;\n        return s.substring(n - shift) + s.substring(0, n - shift);\n    }\n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[2]);\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n        result.add(minIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n            } else {\n                map.put(lst.get(i), 1);\n            }\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        int min = Collections.min(lst);\n        result.add(min);\n        lst.remove(Integer.valueOf(min));\n        if (lst.size() == 0) {\n            return result;\n        }\n        int max = Collections.max(lst);\n        result.add(max);\n        lst.remove(Integer.valueOf(max));\n        if (lst.size() == 0) {\n            return result;\n        }\n        min = Collections.min(lst);\n        result.add(min);\n        lst.remove(Integer.valueOf(min));\n        if (lst.size() == 0) {\n            return result;\n        }\n        max = Collections.max(lst);\n        result.add(max);\n        lst.remove(Integer.valueOf(max));\n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double p = (a + b + c) / 2;\n            return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum <= w) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int count = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                count++;\n            }\n            i++;\n            j--;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        List<String> result = new ArrayList<>();\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else if (count1 > count2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (n == 0) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n == 1;\n        }\n        if (x == 0) {\n            return n == 0;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 4 || x == 9 || x == 16 || x == 25 || x == 36 || x == 49 || x == 64 || x == 81 || x == 100;\n        }\n        if (n == 3) {\n            return x == 8 || x == 27 || x == 64 || x == 125 || x == 216 || x == 343 || x == 512 || x == 729 || x == 1000;\n        }\n        if (n == 4) {\n            return x == 16 || x == 81 || x == 256 || x == 625 || x == 1296 || x == 2401 || x == 4096 || x == 6561 || x == 10000;\n        }\n        if (n == 5) {\n            return x == 32 || x == 243 || x == 1024 || x == 3125 || x == 7776 || x == 16807 || x == 32768 || x == 59049 || x == 100000;\n        }\n        if (n == 6) {\n            return x == 64 || x == 729 || x == 4096 || x == 15625 || x == 46656 || x == 117649 || x == 262144 || x == 531441 || x == 1000000;\n        }\n        if (n == 7) {\n            return x == 128 || x == 2187 || x == 16384 || x == 4913 || x == 117649 || x == 262144 || x == 531441 || x == 1000000;\n        }\n        if (n == 8) {\n            return x == 256 || x == 6561 || x == 65536 || x == 15625 || x == 46656 || x == "}
{"task_id": "Java/77", "generation": "\n        if (a == 0) {\n            return true;\n        }\n        int b = (int) Math.round(Math.cbrt(a));\n        return b * b * b == a;\n    }\n}"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 9;\n        }\n        int count = 9;\n        for (int i = 2; i < n; i++) {\n            count *= 9;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n        }\n        return String.valueOf(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        // Split the string into words\n        String[] words = s.split(\" \");\n        \n        // Sort the words based on the ASCII values of their characters\n        Arrays.sort(words, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                int len1 = s1.length();\n                int len2 = s2.length();\n                int minLen = Math.min(len1, len2);\n                \n                for (int i = 0; i < minLen; i++) {\n                    char c1 = s1.charAt(i);\n                    char c2 = s2.charAt(i);\n                    \n                    if (c1 != c2) {\n                        return c1 - c2;\n                    }\n                }\n                \n                return len1 - len2;\n            }\n        });\n        \n        // Reconstruct the string from the sorted words\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word);\n            sb.append(\" \");\n        }\n        \n        // Remove the trailing space and return the result\n        return sb.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        List<Integer> copy = new ArrayList<>(array);\n        Collections.sort(copy);\n        if (array.get(0) % 2 == 0 && array.get(array.size() - 1) % 2 == 0) {\n            Collections.reverse(copy);\n        }\n        return copy;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        // TODO: Implement this method\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int index = alphabet.indexOf(c);\n            if (index == -1) {\n                encrypted += c;\n            } else {\n                int newIndex = (index + 20) % 26;\n                encrypted += alphabet.charAt(newIndex);\n            }\n        }\n        return encrypted;\n    }\n}"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        Set<Integer> set = new HashSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        List<Integer> sortedList = new ArrayList<>(set);\n        Collections.sort(sortedList);\n        return Optional.of(sortedList.get(1));\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        int count = 0;\n        String[] words = S.split(\"[.?!]\");\n        for (String word : words) {\n            if (word.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "\n        // TODO: Implement this method\n        String encodedMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                        c = (char) (c + 2);\n                        if (c > 'Z') {\n                            c = (char) (c - 26);\n                        }\n                    } else {\n                        c = (char) (c + 1);\n                        if (c > 'Z') {\n                            c = (char) (c - 26);\n                        }\n                    }\n                } else {\n                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                        c = (char) (c + 2);\n                        if (c > 'z') {\n                            c = (char) (c - 26);\n                        }\n                    } else {\n                        c = (char) (c + 1);\n                        if (c > 'z') {\n                            c = (char) (c - 26);\n                        }\n                    }\n                }\n            }\n            encodedMessage += c;\n        }\n        return encodedMessage;\n    }\n}\n"}
{"task_id": "Java/94", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                sum += sumDigits(lst.get(i));\n            }\n        }\n        return sum;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int sumDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase()) && !keyStr.equals(keyStr.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n        primes.add(2);\n        for (int i = 3; i < n; i += 2) {\n            if (isPrime(i, primes)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num, List<Integer> primes) {\n        for (int prime : primes) {\n            if (num % prime == 0) {\n                return false;\n            }\n            if (prime * prime > num) {\n                break;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && \"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == '.') {\n                count = value.length() - i - 1;\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int closest_integer(String value) {\n        int count = countUpper(value);\n        int result = 0;\n        if (count == 0) {\n            result = Integer.parseInt(value);\n        } else {\n            double num = Double.parseDouble(value);\n            if (num > 0) {\n                if (num - (int) num >= 0.5) {\n                    result = (int) num + 1;\n                } else {\n                    result = (int) num;\n                }\n            } else {\n                if (num - (int) num <= -0.5) {\n                    result = (int) num - 1;\n                } else {\n                    result = (int) num;\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> pile = new ArrayList<>();\n        int stones = n;\n        for (int i = 0; i < n; i++) {\n            pile.add(stones);\n            if (n % 2 == 0) {\n                stones += 2;\n            } else {\n                stones += 2;\n            }\n        }\n        return pile;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[,\\\\s]+\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        if (x == y) {\n            return x;\n        }\n        if (x % 2 == 0) {\n            return x;\n        }\n        return x + 1;\n    }\n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        double avg = (double) sum / count;\n        int roundedAvg = (int) Math.round(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num < 10) {\n                result.add(num);\n            } else {\n                int count = 0;\n                while (num > 0) {\n                    int digit = num % 10;\n                    if (digit % 2 == 0) {\n                        count++;\n                    }\n                    num /= 10;\n                }\n                if (count == 0) {\n                    result.add(x.get(i));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        arr.sort(Comparator.naturalOrder());\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0 || arr.get(i) > 9) {\n                continue;\n            }\n            result.add(getName(arr.get(i)));\n        }\n        return result;\n    }\n    \n    private String getName(int num) {\n        switch (num) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n            default:\n                return \"\";\n        }\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            int absNum = Math.abs(num);\n            int sum = 0;\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int minIndex = arr.indexOf(Collections.min(arr));\n        int maxIndex = arr.indexOf(Collections.max(arr));\n        if (minIndex > maxIndex) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        return count <= 1;\n    }\n}The provided solution has a logical error in the condition for checking if it's possible to sort the array using right shift operations. The current condition `if (minIndex > maxIndex)` is incorrect because it only checks if the minimum element is after the maximum element in the array, which is not the correct condition for determining if a right shift can sort the array.\n\nTo correctly determine if the array can be sorted using right shift operations, we need to check if the array is already sorted or if there is only one inversion (i.e., one pair of elements that are out of order). An inversion is a pair of elements `arr[i]` and `arr[j]` such that `i < j` and `arr[i] > arr[j]`.\n\nHere's the corrected solution:\n\n"}
{"task_id": "Java/110", "generation": "\n        // Write your code here\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                oddCount--;\n            }\n        }\n        return oddCount <= 0 ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] arr = test.split(\" \");\n        for (String s : arr) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        return map;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String result = sb.toString();\n        boolean isPalindrome = result.equals(new StringBuilder(result).reverse().toString());\n        return Arrays.asList(result, isPalindrome);\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"number of odd elements \" + count + \"n str\" + s.length() + \"ng \" + s + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            currentSum += nums.get(i);\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int totalWater = 0;\n        int totalBuckets = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                totalWater += grid.get(i).get(j);\n            }\n        }\n        if (totalWater == 0) {\n            return 0;\n        }\n        int[] buckets = new int[capacity];\n        for (int i = 0; i < capacity; i++) {\n            buckets[i] = 0;\n        }\n        int maxBuckets = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    int bucketIndex = 0;\n                    while (bucketIndex < capacity && buckets[bucketIndex] == 1) {\n                        bucketIndex++;\n                    }\n                    if (bucketIndex < capacity) {\n                        buckets[bucketIndex] = 1;\n                        totalBuckets++;\n                        maxBuckets = Math.max(maxBuckets, totalBuckets);\n                    }\n                }\n            }\n        }\n        return maxBuckets;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int min = Integer.MAX_VALUE;\n            int minIndex = -1;\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) >= 0 && arr.get(j) < min) {\n                    min = arr.get(j);\n                    minIndex = j;\n                }\n            }\n            if (minIndex != -1) {\n                result.add(arr.get(minIndex));\n                arr.set(minIndex, Integer.MAX_VALUE);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() >= n && countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return c >= 'b' && c <= 'z' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        // Write your code here\n        String vowels = \"aeiouAEIOU\";\n        int n = word.length();\n        for (int i = 0; i < n - 1; i++) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) == -1) {\n                char next = word.charAt(i + 1);\n                if (vowels.indexOf(next) != -1) {\n                    return String.valueOf(next);\n                }\n            }\n        }\n        return \"\";\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        int open = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return \"No\";\n            }\n        }\n        return open == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (arr == null || arr.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            pq.offer(arr.get(i));\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int current = n;\n        while (current != 1) {\n            if (current % 2 != 0) {\n                result.add(current);\n            }\n            if (current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = 3 * current + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n            if (day == 29 && !isLeapYear(year)) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if (txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        List<Integer> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        return lst.equals(sorted);\n    }\n}"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                return Optional.empty();\n            } else if (arr.get(i) < 0) {\n                product *= -1;\n            }\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * product);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dp = new int[n][n];\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        pq.offer(new int[]{grid.get(0).get(0), 0, 0, 0});\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            int val = cur[0], x = cur[1], y = cur[2], dist = cur[3];\n            if (dist == k) {\n                List<Integer> res = new ArrayList<>();\n                while (x != 0 || y != 0) {\n                    res.add(0, val);\n                    for (int[] d : dir) {\n                        int nx = x + d[0], ny = y + d[1];\n                        if (nx >= 0 && nx < n && ny >= 0 && ny < n && dp[nx][ny] == val - 1) {\n                            x = nx;\n                            y = ny;\n                            val = dp[x][y];\n                            break;\n                        }\n                    }\n                }\n                res.add(0, val);\n                return res;\n            }\n            for (int[] d : dir) {\n                int nx = x + d[0], ny = y + d[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n && dp[nx][ny] == 0) {\n                    dp[nx][ny] = val + 1;\n                    pq.offer(new int[]{grid.get(nx).get(ny), nx, ny, dist + 1});\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(3);\n        if (n == 1) {\n            return result;\n        }\n        result.add(1);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        if (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        boolean isEven = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                isEven = true;\n                break;\n            }\n            product *= digit;\n            n /= 10;\n        }\n        return isEven ? 0 : product;\n    }\n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.size() == 1;\n    }\n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double d : lst) {\n            sum += Math.pow(Math.ceil(d), 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < 0) {\n                if (largest.isEmpty() || lst.get(i) > largest.get()) {\n                    largest = Optional.of(lst.get(i));\n                }\n            } else if (lst.get(i) > 0) {\n                if (smallest.isEmpty() || lst.get(i) < smallest.get()) {\n                    smallest = Optional.of(lst.get(i));\n                }\n            }\n        }\n        result.add(largest);\n        result.add(smallest);\n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (a instanceof String && b instanceof String) {\n            return Optional.of(a);\n        }\n        if (a instanceof String) {\n            try {\n                Float.parseFloat((String) a);\n                return Optional.of(a);\n            } catch (NumberFormatException e) {\n                return Optional.of(b);\n            }\n        }\n        if (b instanceof String) {\n            try {\n                Float.parseFloat((String) b);\n                return Optional.of(b);\n            } catch (NumberFormatException e) {\n                return Optional.of(a);\n            }\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return Optional.of(a);\n        }\n        if (a instanceof Float) {\n            return Optional.of(a);\n        }\n        if (b instanceof Float) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i += 2) {\n            if (n - i == i) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n    \n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/140", "generation": "\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 0) {\n                sb.append(words[i]);\n                if (i < words.length - 1) {\n                    sb.append(\"_\");\n                }\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/141", "generation": "\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        String name = parts[0];\n        String extension = parts[1];\n        if (!name.matches(\"[a-zA-Z][a-zA-Z0-9]*\")) {\n            return \"No\";\n        }\n        if (!extension.matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Write your code here\n        int numeratorX = Integer.parseInt(x.split(\"/\")[0]);\n        int denominatorX = Integer.parseInt(x.split(\"/\")[1]);\n        int numeratorN = Integer.parseInt(n.split(\"/\")[0]);\n        int denominatorN = Integer.parseInt(n.split(\"/\")[1]);\n        if (numeratorX * denominatorN == numeratorN * denominatorX) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((a, b) -> {\n            int sumA = sumDigits(a);\n            int sumB = sumDigits(b);\n            if (sumA == sumB) {\n                return nums.indexOf(a) - nums.indexOf(b);\n            }\n            return sumA - sumB;\n        });\n        return result;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int num) {\n        int firstDigit = Math.abs(num) % 10;\n        int lastDigit = Math.abs(num) % 10;\n        return firstDigit % 2 == 1 && lastDigit % 2 == 1;\n    }\n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n            return new ArrayList<>();\n        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = i1 + 1; i < i2; i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                } else {\n                    return o1.length() - o2.length();\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object i : lst) {\n            if (i instanceof Integer) {\n                int num = (int) i;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int max = Integer.MIN_VALUE;\n        String maxName = \"\";\n        for (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                maxName = ext;\n            }\n        }\n        return class_name + \".\" + maxName;\n    }\n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.substring(i).startsWith(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "\n        int even = 0;\n        int odd = 0;\n        String str = String.valueOf(Math.abs(num));\n        for (int i = 0; i < str.length(); i++) {\n            if (Integer.parseInt(String.valueOf(str.charAt(i))) % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return Arrays.asList(even, odd);\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        String[] roman = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n        int[] arabic = {1, 5, 10, 50, 100, 500, 1000};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 6; i >= 0; i--) {\n            while (number >= arabic[i]) {\n                sb.append(roman[i]);\n                number -= arabic[i];\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sum of the squares of the two smaller sides is equal to the square of the largest side\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n        for (String word : words) {\n            int uniqueChars = countUniqueChars(word);\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars;\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\n    private int countUniqueChars(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        // TODO: Write your code here\n        int total = number + need;\n        if (total > remaining) {\n            return Arrays.asList(remaining, 0);\n        } else {\n            return Arrays.asList(total, remaining - total);\n        }\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num2;\n                    break;\n                case \"-\":\n                    result -= num2;\n                    break;\n                case \"*\":\n                    result *= num2;\n                    break;\n                case \"//\":\n                    result /= num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n}The code provided is a Java solution to the problem of evaluating an algebraic expression constructed from two lists: one for operators and one for operands. The `doAlgebra` method takes two parameters: `operator` and `operand`, both of which are `List` objects. The `operator` list contains strings representing algebraic operators, and the `operand` list contains integers representing the operands.\n\nThe method starts by initializing the `result` variable with the first operand from the `operand` list. It then iterates over the `operator` list, using a `for` loop. For each operator, it retrieves the corresponding operands from the `operand` list. The method uses a `switch` statement to perform the appropriate operation based on the operator string. The result of each operation is stored back in the `result` variable.\n\nFinally, the method returns the `result` variable, which contains the evaluated value of the algebraic expression.\n\nThe code is well-structured and follows good programming practices. It uses meaningful variable names and includes comments to explain the purpose of each part of the code. The use of a `switch` statement for the different operations makes the code easy to read and understand.\n\nHowever, there are a few improvements that can be made to the code:\n\n1. The method name `doAlgebra` is not very descriptive. It would be better to use a name that clearly indicates the purpose of the method, such as `evaluateExpression`.\n\n2. The method does not handle the case where the `operator` list is empty or the `operand` list has fewer elements than the `operator` list. This could lead to an `IndexOutOfBoundsException`. It would be better to add checks for these cases and handle them appropriately.\n\n3. The method uses a `switch` statement to perform the different operations"}
{"task_id": "Java/161", "generation": "\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        while (md5.length() < 32) {\n            md5 = \"0\" + md5;\n        }\n        return Optional.of(md5);\n    }\n}\n\n// You can test your code here\nclass Main {\n    \n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEvenDigit(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean isEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}"}
