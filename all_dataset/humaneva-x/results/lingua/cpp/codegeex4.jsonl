{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+2;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> paren_groups;\n    string current_group = \"\";\n    int open_braces = 0;\n    for (int i = 0; i < paren_string.length(); i++){\n        if (paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if (paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if (open_braces == 0){\n                paren_groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return paren_groups;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    float mean = 0.0;\n    float deviation = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++){\n        deviation += abs(numbers[i] - mean);\n    }\n    return deviation / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n    }\n    result.pop_back();\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(paren_string[i] == ')'){\n            current_depth--;\n        }else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0, product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction make_palindrome(s) {\n  var i = 0;\n  var j = s.length - 1;\n  while (i < j) {\n    if (s[i] === s[j]) {\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  if (i === j) {\n    return s + s.split('').reverse().join('');\n  } else {\n    return s + s.slice(i).split('').reverse().join('');\n  }\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]) result+='0';\n        else result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    int max=0;\n    vector<string> maxs;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].length()>max){\n            maxs.clear();\n            maxs.push_back(strings[i]);\n            max=strings[i].length();\n        }\n        else if(strings[i].length()==max){\n            maxs.push_back(strings[i]);\n        }\n    }\n    if(maxs.size()==1) return maxs[0];\n    else return \"\";\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b,a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s;\n    for(int i=0;i<=n;i++){\n        s+=to_string(i);\n        if(i!=n) s+=' ';\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        char c=str[i];\n        if(find(distinct_chars.begin(),distinct_chars.end(),c)==distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    int i=0;\n    while(i<music_string.length()){\n        if(music_string[i]=='o'){\n            result.push_back(4);\n            i+=2;\n        }\n        else if(music_string[i]=='o' && music_string[i+1]=='|'){\n            result.push_back(2);\n            i+=3;\n        }\n        else if(music_string[i]=='.'){\n            result.push_back(1);\n            i+=3;\n        }\n        else if(music_string[i]==' '){\n            i++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]==substring[0]){\n            int j=0;\n            for(;j<substring.length();j++){\n                if(str[i+j]!=substring[j]) break;\n            }\n            if(j==substring.length()) count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> number_map;\n    number_map[\"zero\"]=0;\n    number_map[\"one\"]=1;\n    number_map[\"two\"]=2;\n    number_map[\"three\"]=3;\n    number_map[\"four\"]=4;\n    number_map[\"five\"]=5;\n    number_map[\"six\"]=6;\n    number_map[\"seven\"]=7;\n    number_map[\"eight\"]=8;\n    number_map[\"nine\"]=9;\n    string result=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]==' '){\n            result+=to_string(number_map[temp])+' ';\n            temp=\"\";\n        }\n        else{\n            temp+=numbers[i];\n        }\n    }\n    result+=to_string(number_map[temp]);\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    vector<float> closest_elements;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_elements.clear();\n                closest_elements.push_back(numbers[i]);\n                closest_elements.push_back(numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(list_any::iterator it = values.begin(); it != values.end(); ++it){\n        if(boost::any_cast<int>(*it) != 0){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int len = 0;\n    for(int i = 0; i < str.length(); i++){\n        len++;\n    }\n    return len;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n/2;i>0;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>=65 && str[i]<=90){\n            str[i]=str[i]+32;\n        }\n        else if(str[i]>=97 && str[i]<=122){\n            str[i]=str[i]-32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<2) return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double result = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\ndouble find_zero(vector<double> xs, double x0, double x1, double tol){\n    /* \n    Finds zero of polynomial with coefficients xs between x0 and x1 with tolerance tol. \n    *//*\n    round(find_zero([1, 2], 0, 1, 0.01), 2) f(x) = 1 + 2x\n    round(find_zero([-6, 11, -6, 1], 0, 3, 0.01), 2) (x - 1) * (x - 2) - 3) = -6 + 11x - 6x^2 + x^3\n    */\n    double x = (x0 + x1) / 2;\n    while (fabs(poly(xs, x)) > tol) {\n        if (poly(xs, x0) * poly(xs, x) < 0) {\n            x1 = x;\n        } else {\n            x0 = x;\n        }\n        x = (x0 + x1) / 2;\n    }\n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l1;\n    vector<int> l2;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l1.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l2.begin(),l2.end());\n    for(int i=0;i<l1.size();i++){\n        l[i]=l1[i];\n    }\n    for(int i=0;i<l2.size();i++){\n        l[i+1]=l2[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i] != l[i-1]){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%11==0||i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l1;\n    vector<float> l2;\n    for(int i=0;i<l.size();i++){\n        if(i%2==0){\n            l1.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n        }\n    }\n    sort(l1.begin(),l1.end());\n    for(int i=0;i<l1.size();i++){\n        l[i*2]=l1[i];\n    }\n    for(int i=0;i<l2.size();i++){\n        l[i*2+1]=l2[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nchar *decode_cyclic(char *encoded_cyclic)\n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i1, j1, k1, l1, m1, n1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a2, b2, c2, d2, e2, f2, g2, h2, i3, j3, k3, l3, m3, n3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a4, b4, c4, d4, e4, f4, g4, h4, i5, j5, k5, l5, m5, n5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a5, b5, c5, d5, e5, f5, g5, h5, i6, j6, k6, l6, m6, n6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a6, b6, c6, d6, e6, f6, g6, h"}
{"task_id": "CPP/39", "generation": "\n    int a=1,b=1,c=2;\n    if(n==1) return 2;\n    if(n==2) return 3;\n    for(int i=3;i<=n;i++){\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int i, j, count = 0;\n    for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            if(i < j){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]+=1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=to_string(x%base)+s;\n        x=x/base;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(),l.end());\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0;\n    int j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int ans=1;\n    while(p>0){\n        if(p%2==1){\n            ans=(ans*n)%10;\n        }\n        n=(n*n)%10;\n        p=p/2;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded_string += (s[i] - 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded_string += (s[i] - 3);\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\nstring decode_shift(string s){\n    /* input string decode_shift function Returns decoded string */\n    string decoded_string = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded_string += (s[i] + 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded_string += (s[i] + 3);\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n  string _chars;\n  for(int i=0;i<s0.length();i++){\n    if(s0[i]!=s1[i]){\n      _chars+=s0[i];\n      _chars+=s1[i];\n    }\n  }\n  sort(_chars.begin(),_chars.end());\n  _chars.erase(unique(_chars.begin(),_chars.end()),_chars.end());\n  if(_chars.length()==0) return true;\n  else return false;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int i=0;\n    int count=0;\n    while(i<brackets.length()){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n        i++;\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> l3;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                l3.push_back(l1[i]);\n            }\n        }\n    }\n    return l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            n=n/i;\n            i--;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int len=brackets.length();\n    if(len%2!=0)\n        return false;\n    string stack;\n    for(int i=0;i<len;i++){\n        if(brackets[i]=='(')\n            stack.push_back(brackets[i]);\n        else{\n            if(stack.empty())\n                return false;\n            else\n                stack.pop_back();\n        }\n    }\n    if(stack.empty())\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/62", "generation": "\n  vector<float> dxs;\n  for(int i=1; i<xs.size(); i++){\n    dxs.push_back(i*xs[i]);\n  }\n  return dxs;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0||n==1) return 0;\n    if(n==2) return 1;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=s+(char)(x%10+'0');\n        x=x/10;\n    }\n    for(int i=0;i<shift;i++){\n        char c=s[s.length()-1];\n        s=s.substr(0,s.length()-1);\n        s=c+s;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a=0,o=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            a=atoi(s.substr(i+1,2).c_str());\n        }\n        if(s[i]=='o'){\n            o=atoi(s.substr(i+1,2).c_str());\n        }\n    }\n    return n-a-o;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=INT_MAX;\n    int index=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min){\n                min=arr[i];\n                index=i;\n            }\n        }\n    }\n    if(min==INT_MAX){\n        return {};\n    }\n    return {min,index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = -1;\n    for(int i = 0; i < lst.size(); i++){\n        int count = 0;\n        for(int j = 0; j < lst.size(); j++){\n            if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        int count = 0;\n        for(int j = 0; j < lst.size(); j++){\n            if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n        if(count == max){\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    while(!lst.empty()){\n        int min=lst[0];\n        for(int i=0;i<lst.size();i++){\n            if(lst[i]<min){\n                min=lst[i];\n            }\n        }\n        res.push_back(min);\n        lst.erase(remove(lst.begin(),lst.end(),min),lst.end());\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        return round((sqrt((a+b+c)/2)*sqrt((a+b+c)/2-a)*sqrt((a+b+c)/2-b)*sqrt((a+b+c)/2-c))/100)*100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1=0,count2=0;\n    for(int i=0;i<lst1.size();i++){\n        count1+=lst1[i].length();\n    }\n    for(int i=0;i<lst2.size();i++){\n        count2+=lst2[i].length();\n    }\n    if(count1<count2){\n        return lst1;\n    }\n    else if(count1>count2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            count++;\n            a = a / i;\n            i--;\n        }\n    }\n    if(count == 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1) return true;\n    if(x==0) return false;\n    if(n==1) return true;\n    if(n==0) return false;\n    if(x==n) return true;\n    if(x%n!=0) return false;\n    int i=2;\n    while(i<=sqrt(n)){\n        if(n%i==0) return false;\n        i++;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = sqrt(a);\n    if(b*b == a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'||num[i]=='F'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"db\";\n    while(decimal>0){\n        binary += (decimal%2)+'0';\n        decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]!=s[i+1] && s[i+1]!=s[i+2] && s[i]!=s[i+2]) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0){\n            result.push_back(\"A+\");\n        }\n        else if(grades[i]>3.7){\n            result.push_back(\"A\");\n        }\n        else if(grades[i]>3.3){\n            result.push_back(\"A-\");\n        }\n        else if(grades[i]>3.0){\n            result.push_back(\"B+\");\n        }\n        else if(grades[i]>2.7){\n            result.push_back(\"B\");\n        }\n        else if(grades[i]>2.3){\n            result.push_back(\"B-\");\n        }\n        else if(grades[i]>2.0){\n            result.push_back(\"C+\");\n        }\n        else if(grades[i]>1.7){\n            result.push_back(\"C\");\n        }\n        else if(grades[i]>1.3){\n            result.push_back(\"C-\");\n        }\n        else if(grades[i]>1.0){\n            result.push_back(\"D+\");\n        }\n        else if(grades[i]>0.7){\n            result.push_back(\"D\");\n        }\n        else if(grades[i]>0.0){\n            result.push_back(\"D-\");\n        }\n        else{\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len == 2 || len == 3 || len == 5 || len == 7) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%10==1){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N > 0){\n        binary = to_string(N % 2) + binary;\n        N /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==1 && lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string temp=\"\";\n    string ans=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            ans+=temp;\n            ans+=' ';\n            temp=\"\";\n        }\n        else{\n            temp+=s[i];\n        }\n    }\n    ans+=temp;\n    sort(ans.begin(),ans.end());\n    temp=\"\";\n    for(int i=0;i<ans.length();i++){\n        if(ans[i]==' '){\n            sort(temp.begin(),temp.end());\n            ans=ans.substr(0,i)+temp+ans.substr(i+1);\n            temp=\"\";\n        }\n        else{\n            temp+=ans[i];\n        }\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j]==x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> copy = array;\n    sort(copy.begin(), copy.end());\n    if(array[0]%2==0 && array[array.size()-1]%2==0){\n        reverse(copy.begin(), copy.end());\n    }\n    return copy;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++){\n        for(int j = 0; j < alphabet.length(); j++){\n            if(s[i] == alphabet[j]){\n                encrypted += alphabet[(j+4)%26];\n            }\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size() < 2) return -1;\n    sort(lst.begin(), lst.end());\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] != lst[i-1]) return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int i=0,ans=0;\n    while(i<S.length()){\n        if(S[i]=='I'){\n            ans++;\n        }\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            i++;\n            while(i<S.length()&&S[i]==' '){\n                i++;\n            }\n        }\n        i++;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b){\n        if(floor(a)==a && floor(b)==b && floor(c)==c){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(islower(message[i])){\n            if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u'){\n                encoded += 'a';\n            }\n            else{\n                encoded += message[i] + 2;\n            }\n        }\n        else{\n            if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U'){\n                encoded += 'A';\n            }\n            else{\n                encoded += message[i] + 2;\n            }\n        }\n    }\n    return encoded;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        int num=lst[i];\n        if(num==1) continue;\n        bool isPrime=true;\n        for(int j=2;j*j<=num;j++){\n            if(num%j==0){\n                isPrime=false;\n                break;\n            }\n        }\n        if(isPrime){\n            int temp=num;\n            while(temp>0){\n                sum+=temp%10;\n                temp/=10;\n            }\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first[0]<'A' || it->first[0]>'Z' && it->first[0]<'a' || it->first[0]>'z') return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    primes.push_back(2);\n    for(int i=3;i<n;i+=2){\n        bool is_prime=true;\n        for(int j=0;j<primes.size();j++){\n            if(i%primes[j]==0){\n                is_prime=false;\n                break;\n            }\n        }\n        if(is_prime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int product=0;\n    int unit_digit;\n    while(a>0){\n        unit_digit=a%10;\n        product+=unit_digit*b;\n        a/=10;\n    }\n    return product%10;\n}\n"}
{"task_id": "CPP/98", "generation": "\n  int count=0;\n  for(int i=0;i<s.length();i++){\n    if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int i1;\n    int j1;\n    int k1;\n    int l1;\n    int m1;\n    int n1;\n    int o1;\n    int p1;\n    int q1;\n    int r1;\n    int s1;\n    int t1;\n    int u1;\n    int v1;\n    int w1;\n    int x1;\n    int y1;\n    int z1;\n    int a1;\n    int b1;\n    int c1;\n    int d1;\n    int e1;\n    int f1;\n    int g1;\n    int h1;\n    int i2;\n    int j2;\n    int k2;\n    int l2;\n    int m2;\n    int n2;\n    int o2;\n    int p2;\n    int q2;\n    int r2;\n    int s2;\n    int t2;\n    int u2;\n    int v2;\n    int w2;\n    int x2;\n    int y2;\n    int z2;\n    int a2;\n    int b2;\n    int c2;\n    int d2;\n    int e2;\n    int f2;\n    int g2;\n    int h2;\n    int i3;\n    int j3;\n    int k3;\n    int l3;\n    int m3;\n    int n3;\n    int o3;\n    int p3;\n    int q3;\n    int r3;\n    int s3;\n    int t3;\n    int u3;\n    int v3;\n    int w3;\n    int x3;\n    int y3;\n    int z3;\n    int a3;\n    int b3;\n    int c3;\n    int d3;\n    int e3;\n    int f3;\n    int g3;\n    int h3;\n    int i4;\n    int j4;\n    int k4;\n    int l"}
{"task_id": "CPP/100", "generation": "\n    vector<int> v;\n    int i=0;\n    for(i=0;i<n;i++){\n        v.push_back(n);\n        if(n%2==0)\n            n+=2;\n        else\n            n+=2;\n    }\n    return v;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y) return -1;\n    if(x%2==0) return x;\n    else return x+1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    int avg=round((double)sum/(m-n+1));\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> y;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        int count=0;\n        while(temp>0){\n            int digit=temp%10;\n            if(digit%2==0){\n                count++;\n            }\n            temp=temp/10;\n        }\n        if(count==0){\n            y.push_back(x[i]);\n        }\n    }\n    sort(y.begin(),y.end());\n    return y;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, vector<int>> m;\n    for(int i=0; i<arr.size(); i++){\n        m[arr[i]].push_back(i);\n    }\n    vector<int> v;\n    for(auto it=m.begin(); it!=m.end(); it++){\n        for(int i=0; i<it->second.size(); i++){\n            v.push_back(it->second[i]);\n        }\n    }\n    return v;\n}\nvector<string> replace(vector<int> arr){\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> v;\n    for(int i=0; i<arr.size(); i++){\n        v.push_back(m[arr[i]]);\n    }\n    return v;\n}\nvector<string> sort_reverse(vector<int> arr){\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    return replace(arr);\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> v;\n    int i, j, sum = 0, fact = 1;\n    for(i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            for(j = 1; j <= i; j++){\n                fact *= j;\n            }\n            v.push_back(fact);\n            fact = 1;\n        }\n        else{\n            for(j = 1; j <= i; j++){\n                sum += j;\n            }\n            v.push_back(sum);\n            sum = 0;\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> v;\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        string r=s;\n        reverse(r.begin(),r.end());\n        if(s==r){\n            v.push_back(i);\n        }\n    }\n    int even=0,odd=0;\n    for(int i=0;i<v.size();i++){\n        if(v[i]%2==0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    vector<int> ans;\n    ans.push_back(even);\n    ans.push_back(odd);\n    return ans;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int sum = 0;\n    for(int i = 0; i < n.size(); i++){\n        int num = abs(n[i]);\n        while(num > 0){\n            int digit = num % 10;\n            if(digit > 0){\n                sum++;\n            }\n            num /= 10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n=arr.size();\n    if(n==0) return true;\n    int i=0;\n    while(i<n){\n        if(arr[i]<=arr[(i+1)%n]) i++;\n        else break;\n    }\n    if(i==n-1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int even=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==0){\n            even++;\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0){\n            even++;\n        }\n    }\n    if(even==lst1.size()){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> hist;\n    for(int i=0;i<test.length();i++){\n        hist[test[i]]++;\n    }\n    return hist;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> result;\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(c.find(s[i])!=string::npos){\n            continue;\n        }\n        temp+=s[i];\n    }\n    result.push_back(temp);\n    string rev=temp;\n    reverse(rev.begin(),rev.end());\n    if(temp==rev){\n        result.push_back(\"True\");\n    }\n    else{\n        result.push_back(\"False\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    map<char,int> mp;\n    mp['0']=0;mp['1']=1;mp['2']=0;mp['3']=1;mp['4']=0;mp['5']=1;mp['6']=0;mp['7']=1;mp['8']=0;mp['9']=1;\n    vector<string> out;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if(mp[lst[i][j]]==1) count++;\n        }\n        string s=\"number of odd elements \";\n        s+=to_string(count);\n        s+=\"n str\";\n        s+=to_string(i);\n        s+=\"ng \";\n        s+=to_string(count);\n        s+=\"n input.\";\n        out.push_back(s);\n    }\n    return out;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0;\n    long long minSum = 0;\n    long long minSubArray = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        minSum = min(minSum, sum);\n        if(sum - minSum > minSubArray){\n            minSubArray = sum - minSum;\n        }\n    }\n    return minSubArray;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                max_fill+=capacity;\n            }\n        }\n    }\n    return max_fill;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    int n = arr.size();\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n-i-1;j++){\n            if(arr[j]>arr[j+1]){\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> v;\n    string word=\"\";\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n            if(s[i]!='a'&&s[i]!='e'&&s[i]!='i'&&s[i]!='o'&&s[i]!='u')\n                count++;\n        }\n        else{\n            if(count==n)\n                v.push_back(word);\n            word=\"\";\n            count=0;\n        }\n    }\n    if(count==n)\n        v.push_back(word);\n    return v;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=0;i<word.length();i++){\n        if(vowels.find(word[i])!=string::npos){\n            if(i>0 && i<word.length()-1){\n                if(word[i-1]!='a' && word[i-1]!='e' && word[i-1]!='i' && word[i-1]!='o' && word[i-1]!='u' && word[i-1]!='A' && word[i-1]!='E' && word[i-1]!='I' && word[i-1]!='O' && word[i-1]!='U' && word[i+1]!='a' && word[i+1]!='e' && word[i+1]!='i' && word[i+1]!='o' && word[i+1]!='u' && word[i+1]!='A' && word[i+1]!='E' && word[i+1]!='I' && word[i+1]!='O' && word[i+1]!='U'){\n                    result+=word[i];\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s;\n    for(int i=0;i<lst.size();i++){\n        s+=lst[i];\n    }\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='(') count++;\n        else count--;\n        if(count<0) return \"No\";\n    }\n    if(count==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        int num=arr[i];\n        int first_digit=num%10;\n        int second_digit=(num/10)%10;\n        sum+=first_digit+second_digit;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n        }\n        else{\n            v.push_back(n);\n            n=3*n+1;\n        }\n    }\n    v.push_back(1);\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    if(date.length()==0) return false;\n    sscanf(date.c_str(),\"%d-%d-%d\",&month,&day,&year);\n    if(month<1 || month>12) return false;\n    if(day<1 || day>31) return false;\n    if(month==2){\n        if(day>29) return false;\n    }\n    if(month==4 || month==6 || month==9 || month==11){\n        if(day>30) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    int i = 0;\n    while(txt[i] != '\\0'){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else if(txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += txt[i];\n        }\n        i++;\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\nint count_odd_order(string txt){\n    int count = 0;\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            if((int)txt[i] % 2 == 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start > end) return \"NO\";\n    int length = end - start + 1;\n    if(length == 1) return \"NO\";\n    for(int i = 2; i < length; i++){\n        if(length % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    int sum = 0;\n    int product = 1;\n    if(arr.size() == 0){\n        return 0;\n    }\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] == 0){\n            return 0;\n        }\n        else if(arr[i] < 0){\n            product *= -1;\n        }\n        sum += abs(arr[i]);\n    }\n    return sum * product;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};\n    vector<int> res;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            dp[i][j] = grid[i][j];\n            for(int d = 0; d < 4; d++){\n                int ni = i + dir[d][0];\n                int nj = j + dir[d][1];\n                if(ni >= 0 && ni < n && nj >= 0 && nj < n){\n                    dp[i][j] = min(dp[i][j], dp[ni][nj] + grid[i][j]);\n                }\n            }\n        }\n    }\n    int i = 0, j = 0;\n    while(k > 0){\n        res.push_back(grid[i][j]);\n        int minVal = INT_MAX;\n        for(int d = 0; d < 4; d++){\n            int ni = i + dir[d][0];\n            int nj = j + dir[d][1];\n            if(ni >= 0 && ni < n && nj >= 0 && nj < n){\n                if(dp[ni][nj] + grid[i][j] == dp[i][j]){\n                    minVal = min(minVal, grid[ni][nj]);\n                }\n            }\n        }\n        for(int d = 0; d < 4; d++){\n            int ni = i + dir[d][0];\n            int nj = j + dir[d][1];\n            if(ni >= 0 && ni < n && nj >= 0 && nj < n){\n                if(dp[ni][nj] + grid[i][j] == dp[i][j] && grid[ni][nj] == minVal){\n                    i = ni;\n                    j = nj;\n                    break;\n                }\n            }\n        }\n        k--;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> v;\n    if(n==1){\n        v.push_back(3);\n        return v;\n    }\n    if(n==2){\n        v.push_back(1);\n        v.push_back(3);\n        return v;\n    }\n    v.push_back(1);\n    v.push_back(3);\n    for(int i=2;i<n;i++){\n        if(i%2==0){\n            v.push_back(1+i/2);\n        }\n        else{\n            v.push_back(v[i-1]+v[i-2]+v[i+1]);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    string s=to_string(n);\n    for(int i=0;i<s.length();i++){\n        if(s[i]%2==0){\n            return 0;\n        }\n        else{\n            product*=s[i]-48;\n        }\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int i=0;\n    int count=0;\n    while(i<str.length()){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n        i++;\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0) return false;\n    if(txt[txt.length()-1]==' ') return false;\n    if((txt[txt.length()-1]>='a' && txt[txt.length()-1]<='z')||(txt[txt.length()-1]>='A' && txt[txt.length()-1]<='Z')) return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_index = -1;\n    for(int i = 0; i < n; i++){\n        if(arr[i] >= arr[max_index]){\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int a = 0, b = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] < a){\n            a = lst[i];\n        }\n        if(lst[i] > 0 && lst[i] > b){\n            b = lst[i];\n        }\n    }\n    if(a == 0 && b == 0){\n        return {0, 0};\n    }\n    if(a == 0){\n        return {0, b};\n    }\n    if(b == 0){\n        return {a, 0};\n    }\n    return {a, b};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==b.type()){\n        if(a==b) return boost::any();\n        else if(a.type()==typeid(int)) return a;\n        else if(a.type()==typeid(float)) return a;\n        else if(a.type()==typeid(string)) return a;\n    }\n    else if(a.type()==typeid(int)){\n        if(b.type()==typeid(float)) return b;\n        else if(b.type()==typeid(string)) return b;\n    }\n    else if(a.type()==typeid(float)){\n        if(b.type()==typeid(int)) return a;\n        else if(b.type()==typeid(string)) return a;\n    }\n    else if(a.type()==typeid(string)){\n        if(b.type()==typeid(int)) return a;\n        else if(b.type()==typeid(float)) return a;\n    }\n    return boost::any();\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        for(int i=2;i<=n;i+=2){\n            if(n-i==i){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    int i=0;\n    while(text[i]!='\\0'){\n        if(text[i]==' '){\n            if(text[i+1]==' '){\n                text[i]='-';\n                while(text[i+1]==' '){\n                    text.erase(i+1,1);\n                }\n            }\n            else{\n                text[i]='_';\n            }\n        }\n        i++;\n    }\n    return text;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int i=0;\n    int count=0;\n    int count2=0;\n    int count3=0;\n    int count4=0;\n    int count5=0;\n    int count6=0;\n    int count7=0;\n    int count8=0;\n    int count9=0;\n    int count10=0;\n    int count11=0;\n    int count12=0;\n    int count13=0;\n    int count14=0;\n    int count15=0;\n    int count16=0;\n    int count17=0;\n    int count18=0;\n    int count19=0;\n    int count20=0;\n    int count21=0;\n    int count22=0;\n    int count23=0;\n    int count24=0;\n    int count25=0;\n    int count26=0;\n    int count27=0;\n    int count28=0;\n    int count29=0;\n    int count30=0;\n    int count31=0;\n    int count32=0;\n    int count33=0;\n    int count34=0;\n    int count35=0;\n    int count36=0;\n    int count37=0;\n    int count38=0;\n    int count39=0;\n    int count40=0;\n    int count41=0;\n    int count42=0;\n    int count43=0;\n    int count44=0;\n    int count45=0;\n    int count46=0;\n    int count47=0;\n    int count48=0;\n    int count49=0;\n    int count50=0;\n    int count51=0;\n    int count52=0;\n    int count53=0;\n    int count54=0;\n    int count55=0;\n    int count56=0;\n    int count57=0;\n    int count58=0;\n    int count59=0;\n    int count60=0;\n    int count61=0;\n    int count62=0;\n    int count63=0;\n    int count64=0;\n    int count65=0;\n    int count66=0;\n    int count67=0;\n    int count68=0;\n    int count69=0;\n    int count70=0;\n    int count71=0;\n    int count72=0;\n    int count"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            if(is_prime(word.length())){\n                result+=word;\n                result+=\" \";\n            }\n            word=\"\";\n        }\n        else{\n            word+=sentence[i];\n        }\n    }\n    if(is_prime(word.length())){\n        result+=word;\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n<=1){\n        return false;\n    }\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int numerator1,denominator1,numerator2,denominator2;\n    int i=0;\n    while(x[i]!='/'){\n        numerator1=numerator1*10+(x[i]-'0');\n        i++;\n    }\n    i++;\n    while(i<x.length()){\n        denominator1=denominator1*10+(x[i]-'0');\n        i++;\n    }\n    i=0;\n    while(n[i]!='/'){\n        numerator2=numerator2*10+(n[i]-'0');\n        i++;\n    }\n    i++;\n    while(i<n.length()){\n        denominator2=denominator2*10+(n[i]-'0');\n        i++;\n    }\n    if(numerator1*denominator2==numerator2*denominator1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/145", "generation": "\n    int n = nums.size();\n    vector<int> res;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        int num = nums[i];\n        while(num != 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        res.push_back(sum);\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            if(res[i] > res[j]){\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                temp = res[i];\n                res[i] = res[j];\n                res[j] = temp;\n            }\n            else if(res[i] == res[j]){\n                if(nums[i] > nums[j]){\n                    int temp = nums[i];\n                    nums[i] = nums[j];\n                    nums[j] = temp;\n                    temp = res[i];\n                    res[i] = res[j];\n                    res[j] = temp;\n                }\n            }\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            string str = to_string(nums[i]);\n            if((str[0] % 2 == 1) && (str[str.length() - 1] % 2 == 1)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> v;\n    if(planet1==\"Mercury\" && planet2==\"Venus\"){\n        v.push_back(\"Mercury\");\n        v.push_back(\"Venus\");\n    }\n    else if(planet1==\"Venus\" && planet2==\"Earth\"){\n        v.push_back(\"Venus\");\n        v.push_back(\"Earth\");\n    }\n    else if(planet1==\"Earth\" && planet2==\"Mars\"){\n        v.push_back(\"Earth\");\n        v.push_back(\"Mars\");\n    }\n    else if(planet1==\"Mars\" && planet2==\"Jupiter\"){\n        v.push_back(\"Mars\");\n        v.push_back(\"Jupiter\");\n    }\n    else if(planet1==\"Jupiter\" && planet2==\"Saturn\"){\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n    }\n    else if(planet1==\"Saturn\" && planet2==\"Uranus\"){\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n    }\n    else if(planet1==\"Uranus\" && planet2==\"Neptune\"){\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1==\"Mercury\" && planet2==\"Earth\"){\n        v.push_back(\"Mercury\");\n        v.push_back(\"Venus\");\n        v.push_back(\"Earth\");\n    }\n    else if(planet1==\"Venus\" && planet2==\"Mars\"){\n        v.push_back(\"Venus\");\n        v.push_back(\"Earth\");\n        v.push_back(\"Mars\");\n    }\n    else if(planet1==\"Earth\" && planet2==\"Jupiter\"){\n        v.push_back(\"Earth\");\n        v.push_back(\"Mars\");\n        v.push_back(\"Jupiter\");\n    }\n    else if(planet1==\"Mars\" && planet2==\"Saturn\"){\n        v.push_back(\"Mars\");\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n    }\n    else if(planet1==\"Jupiter\" && planet2==\"Uranus\"){\n        v.push_back(\"Jupiter\");\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n    }\n    else if(planet1==\"Saturn\" && planet2==\"Neptune\"){\n        v.push_back(\"Saturn\");\n        v.push_back(\"Uranus\");\n        v.push_back(\"Neptune\");\n    }\n    else if(planet1"}
{"task_id": "CPP/149", "generation": "\n    vector<string> res;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            res.push_back(lst[i]);\n        }\n    }\n    sort(res.begin(),res.end(),[](string a,string b){\n        if(a.length()==b.length()){\n            return a<b;\n        }\n        return a.length()<b.length();\n    });\n    return res;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 || lst[i] % 2 == 0) continue;\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max=-1000;\n    string max_name=\"\";\n    for(int i=0;i<extensions.size();i++){\n        int cap=0,sm=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(extensions[i][j]>=65 && extensions[i][j]<=90) cap++;\n            else if(extensions[i][j]>=97 && extensions[i][j]<=122) sm++;\n        }\n        if(cap-sm>max){\n            max=cap-sm;\n            max_name=extensions[i];\n        }\n    }\n    return class_name+\".\"+max_name;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int i,j;\n    for(i=0;i<a.length();i++){\n        for(j=0;j<b.length();j++){\n            if(a[i+j]!=b[j]) break;\n        }\n        if(j==b.length()) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even=0,odd=0;\n    string s=to_string(abs(num));\n    for(int i=0;i<s.length();i++){\n        if(s[i]%2==0) even++;\n        else odd++;\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    string result=\"\";\n    vector<int> mini_roman={1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    vector<string> mini_roman_str={\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\"};\n    int i=mini_roman.size()-1;\n    while(number>0){\n        if(number>=mini_roman[i]){\n            result+=mini_roman_str[i];\n            number-=mini_roman[i];\n        }\n        else{\n            i--;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max;\n    if(a>b){\n        if(a>c){\n            max=a;\n        }\n        else{\n            max=c;\n        }\n    }\n    else{\n        if(b>c){\n            max=b;\n        }\n        else{\n            max=c;\n        }\n    }\n    if(max==a){\n        if(pow(a,2)==pow(b,2)+pow(c,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else if(max==b){\n        if(pow(b,2)==pow(a,2)+pow(c,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        if(pow(c,2)==pow(a,2)+pow(b,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max=\"\";\n    int max_count=0;\n    for(int i=0;i<words.size();i++){\n        int count=0;\n        string temp=\"\";\n        for(int j=0;j<words[i].length();j++){\n            if(temp.find(words[i][j])==string::npos){\n                temp+=words[i][j];\n                count++;\n            }\n        }\n        if(count>max_count){\n            max_count=count;\n            max=words[i];\n        }\n        else if(count==max_count){\n            if(max>words[i]){\n                max=words[i];\n            }\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(need>remaining){\n        result.push_back(number+remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number+need);\n        result.push_back(remaining-need);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string result=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            result+=s[i]+32;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            result+=s[i]-32;\n        }\n        else{\n            result+=s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    if(text.empty()) return \"\";\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return mdString;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> v;\n    for(int i=a;i<=b;i++){\n        int x=i;\n        while(x>0){\n            int d=x%10;\n            if(d%2==0){\n                v.push_back(d);\n            }\n            x=x/10;\n        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
