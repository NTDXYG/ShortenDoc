{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<=threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp;\n    int balance = 0;\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '('){\n            balance++;\n        }else if(c == ')'){\n            balance--;\n        }\n        temp += c;\n        if(balance == 0){\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n  float integer_part;\n  float decimal_part;\n  integer_part = floor(number);\n  decimal_part = number - integer_part;\n  return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(c == ')'){\n            current_depth--;\n        }else if(c == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n                max_depth = 0;\n            }\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0,product=1;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction make_palindrome(s) {\n    if (s.length === 0) {\n        return s;\n    }\n    var reverse = s.split('').reverse().join('');\n    for (var i = 0; i < s.length; i++) {\n        if (s.substring(i) === reverse.substring(0, s.length - i)) {\n            return s + reverse.substring(s.length - i);\n        }\n    }\n}\n\nconsole.log(make_palindrome('')); // ''\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('cata')); // 'catac'\nconsole.log(make_palindrome('race')); // 'racecar'\nconsole.log(make_palindrome('red')); // 'redder'\nconsole.log(make_palindrome('green')); // 'greenneerg'\nconsole.log(make_palindrome('blue')); // 'blueulb'\nconsole.log(make_palindrome('yellow')); // 'yellowoyellow'\nconsole.log(make_palindrome('black')); // 'blackcab'\nconsole.log(make_palindrome('white')); // 'whiteetihw'\nconsole.log(make_palindrome('purple')); // 'purplelepurp'\nconsole.log(make_palindrome('orange')); // 'orangegenaro'\nconsole.log(make_palindrome('pink')); // 'pinknikp'\nconsole.log(make_palindrome('brown')); // 'brownnorwb'\nconsole.log(make_palindrome('gray')); // 'grayyag'\nconsole.log(make_palindrome('black')); // 'blackcab'\nconsole.log(make_palindrome('white')); // 'whiteetihw'\nconsole.log(make_palindrome('purple')); // 'purplelepurp'\nconsole.log(make_palindrome('orange')); // 'orangegenaro'\nconsole.log(make_palindrome('pink')); // 'pinknikp'\nconsole.log("}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest_str = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest_str.length()){\n            longest_str = strings[i];\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n    return a;\n    else\n    return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=1;i<=str.length();i++){\n        prefixes.push_back(str.substr(0,i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s=\"\";\n    for(int i=0;i<=n;i++){\n        s+=to_string(i);\n        if(i!=n) s+=\" \";\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        str[i]=tolower(str[i]);\n        if(find(v.begin(),v.end(),str[i])==v.end())\n            v.push_back(str[i]);\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    for(int i=0;i<music_string.size();i++){\n        if(music_string[i]=='o'){\n            if(music_string[i+1]=='|'){\n                result.push_back(2);\n                i++;\n            }\n            else result.push_back(4);\n        }\n        else if(music_string[i]=='.'){\n            if(music_string[i+1]=='|'){\n                result.push_back(1);\n                i++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int len=str.length();\n    int sublen=substring.length();\n    for(i=0;i<len;i++){\n        if(str[i]==substring[0]){\n            count++;\n            for(j=1;j<sublen;j++){\n                if(str[i+j]!=substring[j]){\n                    count--;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string s=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]==' '){\n            s+=temp;\n            temp=\"\";\n        }\n        else{\n            temp+=numbers[i];\n        }\n    }\n    s+=temp;\n    temp=\"\";\n    for(int i=0;i<s.length();i++){\n        for(int j=i+1;j<s.length();j++){\n            if(m[s.substr(i,s.substr(i,s.length()).find(' '))]>m[s.substr(j,s.substr(j,s.length()).find(' '))]){\n                temp=s.substr(i,s.substr(i,s.length()).find(' '));\n                s.erase(i,s.substr(i,s.length()).find(' ')+1);\n                s.insert(i,temp);\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 100000;\n    float min_num1 = 0;\n    float min_num2 = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i + 1; j < numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n            }\n        }\n    }\n    if(min_num1 > min_num2){\n        float temp = min_num1;\n        min_num1 = min_num2;\n        min_num2 = temp;\n    }\n    vector<float> result;\n    result.push_back(min_num1);\n    result.push_back(min_num2);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    vector<float> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;str[i]!='\\0';i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int i;\n    for(i=n/2;i>=1;i--){\n        if(n%i==0){\n            break;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i*i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double x = 0;\n    double epsilon = 0.00001;\n    double dx = 0.00001;\n    while(true){\n        double fx = poly(xs, x);\n        double fx_dx = poly(xs, x + dx);\n        double df = (fx_dx - fx) / dx;\n        double x_new = x - fx / df;\n        if(abs(x_new - x) < epsilon){\n            return x_new;\n        }\n        x = x_new;\n    }\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l_prime;\n    vector<int> l_sorted;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_prime.push_back(l[i]);\n        }\n    }\n    l_sorted=l_prime;\n    sort(l_sorted.begin(),l_sorted.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_prime[j]=l_sorted[j];\n            j++;\n        }\n    }\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l[i]=l_prime[i/3];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        if(i==0 || l[i]!=l[i-1]){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    vector<float> odd;\n    for(int i=0;i<l.size();i++){\n        if(i%2==0){\n            even.push_back(l[i]);\n        }\n        else{\n            odd.push_back(l[i]);\n        }\n    }\n    sort(even.begin(),even.end());\n    for(int i=0;i<even.size();i++){\n        l[2*i]=even[i];\n    }\n    for(int i=0;i<odd.size();i++){\n        l[2*i+1]=odd[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring decode_cyclic(string encoded_cyclic) {\n    string decoded_string = \"\";\n    int length = encoded_cyclic.length();\n    for (int i = 0; i < length; i++) {\n        char c = encoded_cyclic[i];\n        if (c >= 'a' && c <= 'z') {\n            // decode lowercase letters\n            c = 'a' + (c - 'a' - 2 + 26) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // decode uppercase letters\n            c = 'A' + (c - 'A' - 2 + 26) % 26;\n        }\n        decoded_string += c;\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0,i=2,count=0;\n    while(count<n){\n        c=a+b;\n        a=b;\n        b=c;\n        for(i=2;i<c;i++){\n            if(c%i==0){\n                break;\n            }\n        }\n        if(i==c){\n            count++;\n        }\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n=l.size();\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        count+=n-i+1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]++;\n    }\n    return l;\n}\nvector<int> incr_list(vector<int> l){\n    for(int i=0;i<l.size();i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string res=\"\";\n    while(x>0){\n        res=(char)(x%base+'0')+res;\n        x/=base;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0 || n==1 || n==3)\n        return 0;\n    if(n==2)\n        return 2;\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0){\n        return (l[n/2] + l[n/2 - 1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i,j;\n    for(i=0,j=text.length()-1;i<j;i++,j--){\n        if(text[i]!=text[j])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else{\n        int x=modp(n/2,p);\n        if(n%2==0)\n            return (x*x)%p;\n        else\n            return (((x*x)%p)*(n%p))%p;\n    }\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            encoded+=char(int(s[i]+s[i]-97+13)%26+97);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            encoded+=char(int(s[i]+s[i]-65+13)%26+65);\n        }\n        else{\n            encoded+=s[i];\n        }\n    }\n    return encoded;\n}\nstring decode_shift(string s){\n    /* input string decode_shift function Returns decoded string */\n    string decoded=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            decoded+=char(int(s[i]+s[i]-97-13)%26+97);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            decoded+=char(int(s[i]+s[i]-65-13)%26+65);\n        }\n        else{\n            decoded+=s[i];\n        }\n    }\n    return decoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]<t){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n    return n;\n    else\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int i,count=0;\n    for(i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc=true, dec=true;\n    for(int i=1; i<l.size(); i++){\n        if(l[i]>l[i-1]) dec=false;\n        if(l[i]<l[i-1]) inc=false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                result.push_back(l1[i]);\n            }\n        }\n    }\n    sort(result.begin(),result.end());\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    if(n==1){\n        return 1;\n    }\n    else{\n        return n+sum_to_n(n-1);\n    }\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> derivative;\n    for(int i=1; i<xs.size(); i++){\n        derivative.push_back(xs[i]*i);\n    }\n    return derivative;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0||n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a=0,b=0,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int len=s.length();\n    shift=shift%len;\n    return s.substr(len-shift)+s.substr(0,len-shift);\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n  int apples,oranges,mango;\n  sscanf(s.c_str(),\"%d apples %d oranges\",&apples,&oranges);\n  mango=n-(apples+oranges);\n  return mango;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=10001;\n    int index=-1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min){\n                min=arr[i];\n                index=i;\n            }\n        }\n    }\n    if(index==-1){\n        return {};\n    }\n    return {min,index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n  int max = 0;\n  int max_val = 0;\n  for(int i = 0; i < lst.size(); i++){\n    int count = 0;\n    for(int j = 0; j < lst.size(); j++){\n      if(lst[i] == lst[j])\n        count++;\n    }\n    if(count > max){\n      max = count;\n      max_val = lst[i];\n    }\n  }\n  if(max_val == 0)\n    return -1;\n  else\n    return max_val;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(),lst.end());\n    vector<int> res;\n    int i=0,j=lst.size()-1;\n    while(i<=j){\n        if(i==j){\n            res.push_back(lst[i]);\n            break;\n        }\n        res.push_back(lst[i++]);\n        res.push_back(lst[j--]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s,area;\n    if(a+b>c && a+c>b && b+c>a){\n        s=(a+b+c)/2;\n        area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n        int n=q.size();\n        for(int i=0;i<n/2;i++){\n            if(q[i]!=q[n-i-1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    int i=0;\n    int j=arr.size()-1;\n    while(i<j){\n        if(arr[i]!=arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1=0,count2=0;\n    vector<string> result;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst1[i].size();j++){\n            count1++;\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        for(int j=0;j<lst2[i].size();j++){\n            count2++;\n        }\n    }\n    if(count1<count2){\n        result=lst1;\n    }\n    else if(count1>count2){\n        result=lst2;\n    }\n    else{\n        result=lst1;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nbool multiply_prime(int a){\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(is_multiply_prime(i)){\n            count++;\n        }\n    }\n    if(count==3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1) return true;\n    if(n==1) return false;\n    double y=log(x)/log(n);\n    if(y==int(y)) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=round(pow(abs(a),1.0/3.0));\n    return b*b*b==abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n  int count=0;\n  for(int i=0;i<num.size();i++){\n    if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"\";\n    while(decimal>0){\n        binary=(decimal%2==0?\"0\":\"1\")+binary;\n        decimal/=2;\n    }\n    return \"db\"+binary+\"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]!=s[i+1]&&s[i+1]!=s[i+2]&&s[i]!=s[i+2]) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]==4.0) letter_grades.push_back(\"A+\");\n        else if(grades[i]>3.7) letter_grades.push_back(\"A\");\n        else if(grades[i]>3.3) letter_grades.push_back(\"A-\");\n        else if(grades[i]>3.0) letter_grades.push_back(\"B+\");\n        else if(grades[i]>2.7) letter_grades.push_back(\"B\");\n        else if(grades[i]>2.3) letter_grades.push_back(\"B-\");\n        else if(grades[i]>2.0) letter_grades.push_back(\"C+\");\n        else if(grades[i]>1.7) letter_grades.push_back(\"C\");\n        else if(grades[i]>1.3) letter_grades.push_back(\"C-\");\n        else if(grades[i]>1.0) letter_grades.push_back(\"D+\");\n        else if(grades[i]>0.7) letter_grades.push_back(\"D\");\n        else if(grades[i]>0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1)\n    return false;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 18;\n    if(n==3) return 180;\n    if(n==4) return 1800;\n    if(n==5) return 18000;\n    if(n==6) return 180000;\n    if(n==7) return 1800000;\n    if(n==8) return 18000000;\n    if(n==9) return 180000000;\n    if(n==10) return 1800000000;\n    return 0;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    string binary=\"\";\n    while(sum>0){\n        binary=(sum%2==0?\"0\":\"1\")+binary;\n        sum/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2!=0&&lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string res=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            res+=word;\n            res+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    sort(word.begin(),word.end());\n    res+=word;\n    return res;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    // sort by row ascending order\n    sort(result.begin(), result.end());\n    // sort by column descending order\n    for(int i = 0; i < result.size(); i++){\n        for(int j = 0; j < result.size() - 1; j++){\n            if(result[j][1] < result[j + 1][1]){\n                swap(result[j], result[j + 1]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> result;\n    if(array.empty()) return result;\n    if(array[0]%2==0){\n        sort(array.begin(),array.end(),greater<int>());\n    }\n    else{\n        sort(array.begin(),array.end());\n    }\n    for(int i=0;i<array.size();i++){\n        result.push_back(array[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            encrypted+=(s[i]+4);\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            encrypted+=(s[i]+4);\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int bored=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            if(S[i-1]==' '&&S[i-2]=='I'){\n                bored++;\n            }\n        }\n    }\n    return bored;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==floor(a) && b==floor(b) && c==floor(c)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0;i<message.length();i++){\n        if(message[i]>='a'&&message[i]<='z'){\n            message[i]=message[i]-32;\n        }\n        else if(message[i]>='A'&&message[i]<='Z'){\n            message[i]=message[i]+32;\n        }\n        if(message[i]=='a'||message[i]=='e'||message[i]=='i'||message[i]=='o'||message[i]=='u'){\n            message[i]=message[i]+2;\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>sum){\n            sum=lst[i];\n        }\n    }\n    while(sum>0){\n        sum=sum%10;\n        sum+=sum/10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool all_upper=true,all_lower=true;\n    for(auto i:dict){\n        for(auto j:i.first){\n            if(j>='a'&&j<='z') all_upper=false;\n            if(j>='A'&&j<='Z') all_lower=false;\n        }\n        if(!all_upper&&!all_lower) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        int flag=0;\n        for(int j=2;j<i;j++){\n            if(i%j==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int x=a%10;\n    int y=b%10;\n    int z=x*y;\n    return z;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int n=value.length();\n    int i;\n    float num=0;\n    for(i=0;i<n;i++){\n        if(value[i]=='.'){\n            break;\n        }\n        num=num*10+value[i]-'0';\n    }\n    float dec=0;\n    int j=i+1;\n    for(j=i+1;j<n;j++){\n        dec=dec*10+value[j]-'0';\n    }\n    dec=dec/pow(10,n-i-1);\n    num=num+dec;\n    if(num>0){\n        if(num-floor(num)>=0.5){\n            return ceil(num);\n        }\n        else{\n            return floor(num);\n        }\n    }\n    else{\n        if(ceil(num)-num>=0.5){\n            return floor(num);\n        }\n        else{\n            return ceil(num);\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int i;\n    for(i=0;i<n;i++){\n        pile.push_back(n+2*i);\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n    return -1;\n    else\n    return y-1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m)\n    return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++)\n    sum+=i;\n    int avg=round(sum/(m-n+1.0));\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if((temp%10)%2==0){\n                break;\n            }\n            temp=temp/10;\n        }\n        if(temp==0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push_back(m[arr[i]]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            int factorial = 1;\n            for(int j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        }\n        else{\n            int sum = 0;\n            for(int j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result;\n    int even=0, odd=0;\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string r = s;\n        reverse(r.begin(), r.end());\n        if(s==r){\n            if(i%2==0) even++;\n            else odd++;\n        }\n    }\n    result.push_back(even);\n    result.push_back(odd);\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int sum = 0;\n        int num = abs(n[i]);\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(n[i] < 0){\n            sum = -sum;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n=arr.size();\n    if(n==0) return true;\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(arr[i]<arr[i-1]) count++;\n    }\n    if(arr[n-1]>arr[0]) count++;\n    if(count<=1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n  int odd_count = 0;\n  for(int i = 0; i < lst1.size(); i++){\n    if(lst1[i] % 2 != 0) odd_count++;\n  }\n  for(int i = 0; i < lst2.size(); i++){\n    if(lst2[i] % 2 == 0) odd_count--;\n  }\n  if(odd_count == 0) return \"YES\";\n  else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max = 0;\n    for(int i = 0; i < test.length(); i++){\n        if(test[i] != ' '){\n            result[test[i]]++;\n            if(result[test[i]] > max){\n                max = result[test[i]];\n            }\n        }\n    }\n    map<char,int> final;\n    for(map<char,int>::iterator it = result.begin(); it != result.end(); it++){\n        if(it->second == max){\n            final[it->first] = it->second;\n        }\n    }\n    return final;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=c[0]){\n            res+=s[i];\n        }\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=true;\n    for(int i=0;i<res.size();i++){\n        if(res[i]!=rev[i]){\n            pal=false;\n            break;\n        }\n    }\n    vector<string> ans;\n    ans.push_back(res);\n    ans.push_back(pal+\"\");\n    return ans;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0){\n                count++;\n            }\n        }\n        string s=\"number of odd elements \";\n        s+=to_string(count);\n        s+=\"n str\";\n        s+=to_string(i+1);\n        s+=\"ng \";\n        s+=to_string(i+1);\n        s+=\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill=0;\n    for(int i=0;i<grid.size();i++){\n        int count=0;\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n        max_fill+=(count/capacity);\n        if(count%capacity!=0){\n            max_fill++;\n        }\n    }\n    return max_fill;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> ones;\n    vector<int> zeros;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int temp=arr[i];\n        while(temp!=0){\n            if(temp%2==1){\n                count++;\n            }\n            temp=temp/2;\n        }\n        if(count==0){\n            zeros.push_back(arr[i]);\n        }\n        else{\n            ones.push_back(arr[i]);\n        }\n    }\n    sort(ones.begin(),ones.end());\n    sort(zeros.begin(),zeros.end());\n    vector<int> result;\n    for(int i=0;i<ones.size();i++){\n        result.push_back(ones[i]);\n    }\n    for(int i=0;i<zeros.size();i++){\n        result.push_back(zeros[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(word.size()==n) words.push_back(word);\n            word=\"\";\n        }\n        else if(s[i]>='a'&&s[i]<='z') word+=s[i];\n    }\n    if(word.size()==n) words.push_back(word);\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    for(int i=word.size()-2;i>0;i--){\n        if(vowels.find(word[i])!=-1&&vowels.find(word[i+1])==-1&&vowels.find(word[i-1])==-1){\n            return string(1,word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int count=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(') count++;\n            else count--;\n            if(count<0) return \"No\";\n        }\n    }\n    if(count==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end(),greater<int>());\n    vector<int> result;\n    for(int i=0;i<k;i++){\n        result.push_back(arr[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "\n  int sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]%2!=0&&i%2==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]>=10){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2==1){\n            v.push_back(n);\n        }\n        n=n%2==0?n/2:3*n+1;\n    }\n    v.push_back(1);\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int day,month,year;\n    if(date.size()!=10) return false;\n    if(date[2]!='-'||date[5]!='-') return false;\n    for(int i=0;i<10;i++){\n        if(i==2||i==5) continue;\n        if(date[i]<'0'||date[i]>'9') return false;\n    }\n    month=((date[0]-'0')*10+(date[1]-'0'));\n    day=((date[3]-'0')*10+(date[4]-'0'));\n    year=((date[6]-'0')*1000+(date[7]-'0')*100+(date[8]-'0')*10+(date[9]-'0'));\n    if(month<1||month>12) return false;\n    if(day<1||day>31) return false;\n    if(month==2&&day>29) return false;\n    if(month==4||month==6||month==9||month==11&&day>30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word;\n    for(char c:txt){\n        if(c==' '){\n            if(word.size()>0) words.push_back(word);\n            word=\"\";\n        }else if(c==','){\n            if(word.size()>0) words.push_back(word);\n            word=\"\";\n        }else{\n            word+=c;\n        }\n    }\n    if(word.size()>0) words.push_back(word);\n    if(words.size()>0) return words;\n    int count=0;\n    for(char c:txt){\n        if(c>='a'&&c<='z'){\n            if((c-'a')%2==1) count++;\n        }\n    }\n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> lst2 = lst;\n    sort(lst2.begin(), lst2.end());\n    if(lst2 == lst){\n        for(int i = 0; i < lst.size() - 1; i++){\n            if(lst[i] == lst[i + 1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end) return \"NO\";\n    int length = end-start+1;\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int sum=0,product=1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==0) return 0;\n        else if(arr[i]<0){\n            product*=-1;\n            sum+=abs(arr[i]);\n        }\n        else sum+=arr[i];\n    }\n    return sum*product;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            for(int d = 0; d < 4; d++){\n                int x = i + dir[d][0], y = j + dir[d][1];\n                if(x >= 0 && x < n && y >= 0 && y < n){\n                    dp[i][j] = max(dp[i][j], dp[x][y]);\n                }\n            }\n            dp[i][j]++;\n        }\n    }\n    int x = 0, y = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(dp[i][j] == k){\n                x = i;\n                y = j;\n                break;\n            }\n        }\n        if(x != 0 || y != 0) break;\n    }\n    res.push_back(grid[x][y]);\n    for(int i = 1; i < k; i++){\n        int mx = -1, mx_d = -1;\n        for(int d = 0; d < 4; d++){\n            int xx = x + dir[d][0], yy = y + dir[d][1];\n            if(xx >= 0 && xx < n && yy >= 0 && yy < n && dp[xx][yy] == dp[x][y] - 1){\n                if(mx == -1 || grid[xx][yy] < mx){\n                    mx = grid[xx][yy];\n                    mx_d = d;\n                }\n            }\n        }\n        x += dir"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result;\n    result.push_back(3);\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        }\n        else{\n            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n  int product=1;\n  while(n>0){\n    int digit=n%10;\n    if(digit%2!=0){\n      product*=digit;\n    }\n    n/=10;\n  }\n  return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty())\n        return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z')\n        return true;\n    if(txt[txt.length()-1]>='A'&&txt[txt.length()-1]<='Z')\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n=arr.size();\n    int max_index=-1;\n    for(int i=n-1;i>0;i--){\n        if(arr[i]>arr[i-1]){\n            max_index=i;\n            break;\n        }\n    }\n    if(max_index==-1){\n        return -1;\n    }\n    int max_value=arr[max_index];\n    int max_index_value=-1;\n    for(int i=max_index-1;i>=0;i--){\n        if(arr[i]<max_value){\n            max_index_value=i;\n            break;\n        }\n    }\n    swap(arr[max_index_value],arr[max_index-1]);\n    int j=n-1;\n    while(j>max_index_value){\n        if(arr[j]<arr[max_index-1]){\n            swap(arr[j],arr[j-1]);\n            j--;\n        }\n        else{\n            break;\n        }\n    }\n    return max_index-1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int a=0,b=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>a){\n            a=lst[i];\n        }\n        if(lst[i]<b){\n            b=lst[i];\n        }\n    }\n    if(a==0&&b==0){\n        return {0,0};\n    }\n    return {a,b};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    string s1,s2;\n    if(a.type()==typeid(int)){\n        s1=to_string(boost::any_cast<int>(a));\n    }\n    else if(a.type()==typeid(float)){\n        s1=to_string(boost::any_cast<float>(a));\n    }\n    else if(a.type()==typeid(string)){\n        s1=boost::any_cast<string>(a);\n    }\n    if(b.type()==typeid(int)){\n        s2=to_string(boost::any_cast<int>(b));\n    }\n    else if(b.type()==typeid(float)){\n        s2=to_string(boost::any_cast<float>(b));\n    }\n    else if(b.type()==typeid(string)){\n        s2=boost::any_cast<string>(b);\n    }\n    if(s1==s2) return boost::any();\n    if(s1.find(',')!=string::npos) s1.replace(s1.find(','),1,'.');\n    if(s2.find(',')!=string::npos) s2.replace(s2.find(','),1,'.');\n    float f1=stof(s1),f2=stof(s2);\n    if(f1>f2) return a;\n    else return b;\n}\n#include<iostream>\n"}
{"task_id": "CPP/138", "generation": "\n    if(n==4 || n==6 || n==8)\n    return false;\n    else\n    return true;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact*=i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int spaceCount = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            spaceCount++;\n        } else {\n            if(spaceCount == 1){\n                result += \"_\";\n            } else if(spaceCount > 1){\n                result += \"-\";\n            }\n            spaceCount = 0;\n            result += text[i];\n        }\n    }\n    if(spaceCount == 1){\n        result += \"_\";\n    } else if(spaceCount > 1){\n        result += \"-\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0,i=0,j=0;\n    string str[3]={\"txt\",\"exe\",\"dll\"};\n    while(file_name[i]!='.')\n    {\n        if(file_name[i]>='0'&&file_name[i]<='9')\n        {\n            count++;\n        }\n        i++;\n    }\n    if(count>3)\n    {\n        return \"No\";\n    }\n    else\n    {\n        if(file_name[0]<'a'||file_name[0]>'z'&&file_name[0]<'A'||file_name[0]>'Z')\n        {\n            return \"No\";\n        }\n        else\n        {\n            for(j=i+1;j<file_name.length();j++)\n            {\n                if(file_name[j]=='.')\n                {\n                    break;\n                }\n            }\n            if(j==file_name.length())\n            {\n                return \"No\";\n            }\n            else\n            {\n                string sub=file_name.substr(j+1);\n                for(int k=0;k<3;k++)\n                {\n                    if(sub==str[k])\n                    {\n                        return \"Yes\";\n                    }\n                }\n                return \"No\";\n            }\n        }\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            if(word.length()>0 && isPrime(word.length())){\n                if(result.length()>0){\n                    result+=\" \";\n                }\n                result+=word;\n            }\n            word=\"\";\n        }else{\n            word+=sentence[i];\n        }\n    }\n    if(word.length()>0 && isPrime(word.length())){\n        if(result.length()>0){\n            result+=\" \";\n        }\n        result+=word;\n    }\n    return result;\n}\nbool isPrime(int n){\n    if(n<=1){\n        return false;\n    }\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    if(x2*n2==x1*n1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    vector<int> index;\n    vector<int> sum;\n    int i,j,k,l,m,n;\n    for(i=0;i<nums.size();i++){\n        index.push_back(i);\n        sum.push_back(0);\n        n=abs(nums[i]);\n        while(n>0){\n            sum[i]+=n%10;\n            n/=10;\n        }\n    }\n    for(i=0;i<nums.size();i++){\n        for(j=i+1;j<nums.size();j++){\n            if(sum[i]>sum[j]){\n                k=sum[i];\n                sum[i]=sum[j];\n                sum[j]=k;\n                l=index[i];\n                index[i]=index[j];\n                index[j]=l;\n            }\n        }\n    }\n    for(i=0;i<nums.size();i++){\n        for(j=i+1;j<nums.size();j++){\n            if(sum[i]==sum[j]){\n                if(index[i]>index[j]){\n                    k=sum[i];\n                    sum[i]=sum[j];\n                    sum[j]=k;\n                    l=index[i];\n                    index[i]=index[j];\n                    index[j]=l;\n                }\n            }\n        }\n    }\n    for(i=0;i<nums.size();i++){\n        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        int n=nums[i];\n        if(n>10){\n            string s=to_string(n);\n            int first=s[0]-'0';\n            int last=s[s.length()-1]-'0';\n            if(first%2!=0 && last%2!=0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int i,j;\n    for(i=0;i<planets.size();i++){\n        if(planets[i]==planet1){\n            break;\n        }\n    }\n    for(j=0;j<planets.size();j++){\n        if(planets[j]==planet2){\n            break;\n        }\n    }\n    if(i==planets.size()||j==planets.size()){\n        return result;\n    }\n    if(i>j){\n        swap(i,j);\n    }\n    for(int k=i+1;k<j;k++){\n        result.push_back(planets[k]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.size(); i++){\n        int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') cap++;\n            if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z') sm++;\n        }\n        int strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    if(m>n)return false;\n    for(int i=0;i<n;i++){\n        if(a[i]==b[0]){\n            int j=0;\n            int k=i;\n            while(j<m && k<n && a[k]==b[j])j++,k++;\n            if(j==m)return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even=0,count_odd=0;\n    while(num!=0){\n        int digit=num%10;\n        if(digit%2==0){\n            count_even++;\n        }\n        else{\n            count_odd++;\n        }\n        num=num/10;\n    }\n    vector<int> result;\n    result.push_back(count_even);\n    result.push_back(count_odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    vector<string> romans = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += romans[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float x,y,z;\n    x=a*a;\n    y=b*b;\n    z=c*c;\n    if(x==y+z||y==x+z||z==x+y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique = 0;\n    for(string word : words){\n        vector<bool> seen(26, false);\n        int unique = 0;\n        for(char c : word){\n            if(!seen[c - 'a']){\n                seen[c - 'a'] = true;\n                unique++;\n            }\n        }\n        if(unique > max_unique || (unique == max_unique && word < max_word)){\n            max_word = word;\n            max_unique = unique;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    int total = number + min(need, remaining);\n    result.push_back(total);\n    result.push_back(max(0, remaining - need));\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i + 1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i + 1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i + 1];\n        }\n        else if(operato[i] == \"//\"){\n            result /= operand[i + 1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int i=0;\n    int j=s.length()-1;\n    while(i<j){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        if(s[j]>='A'&&s[j]<='Z'){\n            s[j]=s[j]+32;\n        }\n        i++;\n        j--;\n    }\n    if(i==j){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n    }\n    if(i>j){\n        string s1=\"\";\n        for(int k=i;k<=j;k++){\n            s1=s1+s[k];\n        }\n        s=s1;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int>v;\n    if(a>b){\n        for(int i=b;i<=a;i++){\n            if(i%2==0){\n                v.push_back(i);\n            }\n        }\n    }\n    else{\n        for(int i=a;i<=b;i++){\n            if(i%2==0){\n                v.push_back(i);\n            }\n        }\n    }\n    return v;\n}\n"}
