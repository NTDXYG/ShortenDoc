{"task_id": "CPP/0", "generation": "\n  for(int i = 0; i < numbers.size() - 1; i++){\n    if(abs(numbers[i] - numbers[i + 1]) < threshold){\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string current_group;\n    int open_count = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_count++;\n        }else if(paren_string[i] == ')'){\n            open_count--;\n        }\n        if(open_count == 0){\n            result.push_back(current_group);\n            current_group = \"\";\n        }else{\n            current_group += paren_string[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i < numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++){\n        int depth = 0;\n        for (int j = i; j < paren_string.size(); j++){\n            if (paren_string[j] == '(') depth++;\n            else if (paren_string[j] == ')') depth--;\n            if (depth < 0) break;\n            if (depth > max_depth) max_depth = depth;\n        }\n        if (i + max_depth < paren_string.size() && paren_string[i + max_depth] == ')'){\n            result.push_back(max_depth);\n            i += max_depth;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n  vector<string> result;\n  for (int i = 0; i < strings.size(); i++){\n    if (strings[i].find(substring) != string::npos){\n      result.push_back(strings[i]);\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n  def make_palindrome(s):\n    if not s:\n      return ''\n    i = 0\n    j = len(s) - 1\n    while i < j:\n      if s[i] != s[j]:\n        break\n      i += 1\n      j -= 1\n    return s + s[j+1: i][::-1]\n  \n  # Test the function\n  print(make_palindrome(''))  # Output: ''\n  print(make_palindrome('cat'))  # Output: 'catac'\n  print(make_palindrome('cata'))  # Output: 'catac' */"}
{"task_id": "CPP/11", "generation": "\n    string result;\n    for(int i=0;i<a.length();i++){\n        if(a[i]=='1' && b[i]=='1') result+='0';\n        else if(a[i]=='0' && b[i]=='0') result+='0';\n        else result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n  if(strings.size() == 0){\n    return \"\";\n  }\n  string longest = strings[0];\n  for(int i = 1; i < strings.size(); i++){\n    if(strings[i].length() > longest.length()){\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n  while (b != 0){\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=1; i<=str.length(); i++){\n        prefixes.push_back(str.substr(0,i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n  string s;\n  for(int i=0;i<n;i++){\n    s+=to_string(i);\n    if(i!=n-1) s+=\" \";\n  }\n  return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        char c=str[i];\n        if(isalpha(c)){\n            c=toupper(c);\n            if(find(v.begin(),v.end(),c)==v.end()){\n                v.push_back(c);\n            }\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    for(int i = 0; i < music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n        }\n        else if(music_string[i] == '|'){\n            result.push_back(2);\n        }\n        else if(music_string[i] == '.'){\n            result.push_back(1);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int index=str.find(substring);\n    while(index!=-1){\n        count++;\n        index=str.find(substring,index+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_dict;\n    num_dict[\"zero\"]=0;\n    num_dict[\"one\"]=1;\n    num_dict[\"two\"]=2;\n    num_dict[\"four\"]=4;\n    num_dict[\"five\"]=5;\n    num_dict[\"six\"]=6;\n    num_dict[\"seven\"]=7;\n    num_dict[\"eight\"]=8;\n    num_dict[\"nine\"]=9;\n    string sorted_numbers;\n    string temp;\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i]!=' '){\n            temp+=numbers[i];\n        }\n        else{\n            sorted_numbers+=temp;\n            temp=\"\";\n        }\n    }\n    sorted_numbers+=temp;\n    string sorted_numbers_array[sorted_numbers.length()];\n    int j=0;\n    for(int i=0; i<sorted_numbers.length(); i++){\n        if(sorted_numbers[i]!=' '){\n            sorted_numbers_array[j]=sorted_numbers.substr(i, sorted_numbers.length()-i);\n            j++;\n        }\n    }\n    for(int i=0; i<sorted_numbers_array.length(); i++){\n        for(int k=0; k<sorted_numbers_array.length()-1; k++){\n            if(num_dict[sorted_numbers_array[k]] > num_dict[sorted_numbers_array[k+1]]){\n                string temp=sorted_numbers_array[k];\n                sorted_numbers_array[k]=sorted_numbers_array[k+1];\n                sorted_numbers_array[k+1]=temp;\n            }\n        }\n    }\n    for(int i=0; i<sorted_numbers_array.length(); i++){\n        cout<<sorted_numbers_array[i]<<\" \";\n    }\n    return sorted_numbers;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    int min_index = 0;\n    int max_index = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] < numbers[min_index]){\n            min_index = i;\n        }\n        if(numbers[i] > numbers[max_index]){\n            max_index = i;\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++){\n        float diff = abs(numbers[i] - numbers[min_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index = i;\n        }\n        diff = abs(numbers[i] - numbers[max_index]);\n        if(diff < min_diff){\n            min_diff = diff;\n            max_index = i;\n        }\n    }\n    vector<float> result;\n    result.push_back(numbers[min_index]);\n    result.push_back(numbers[max_index]);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n  float min = numbers[0];\n  float max = numbers[0];\n  for(int i = 1; i < numbers.size(); i++){\n    if(numbers[i] < min) min = numbers[i];\n    if(numbers[i] > max) max = numbers[i];\n  }\n  vector<float> rescaled;\n  for(int i = 0; i < numbers.size(); i++){\n    rescaled.push_back((numbers[i] - min) / (max - min));\n  }\n  return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "\n  vector<int> result;\n  for (auto value : values){\n    if (boost::any_cast<int>(&value)){\n      result.push_back(boost::any_cast<int>(value));\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n  int count = 0;\n  for(int i = 0; i < str.length(); i++){\n    count++;\n  }\n  return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i = n-1; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n /= i;\n            factors.push_back(i);\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n  string result = \"\";\n  for(int i = 0; i < strings.size(); i++){\n    result += strings[i];\n  }\n  return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n  vector<string> result;\n  for (int i = 0; i < strings.size(); i++){\n    if (strings[i].find(prefix) == 0){\n      result.push_back(strings[i]);\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> pos;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    for(long long i=2;i*i<=n;i++)\n        if(n%i==0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double x = 0;\n    double eps}
{"task_id": "CPP/33", "generation": "\n  vector<int> sorted_l = l;\n  sort(sorted_l.begin(), sorted_l.end());\n  for(int i = 0; i < l.size(); i++){\n    if(i % 3 == 0){\n      l[i] = sorted_l[i/3];\n    }\n  }\n  return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(),l.end());\n    vector<int> result;\n    for(int i=0;i<l.size();i++){\n        if(i==0 || l[i]!=l[i-1]){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n  int count = 0;\n  for(int i = 1; i <= n; i++){\n    if(i % 11 == 0 || i % 13 == 0){\n      int temp = i;\n      while(temp > 0){\n        if(temp % 10 == 7){\n          count++;\n        }\n        temp = temp / 10;\n      }\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n  vector<float> odd;\n  vector<float> even;\n  for(int i=0; i<l.size(); i++){\n    if(i%2==0){\n      even.push_back(l[i]);\n    }\n    else{\n      odd.push_back(l[i]);\n    }\n  }\n  sort(even.begin(), even.end());\n  for(int i=0; i<even.size(); i++){\n    l[i]=even[i];\n  }\n  return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction encoded_cyclic(encoded_str) {\n    let decoded_str = \"\";\n    let i = 0;\n    while (i < encoded_str.length) {\n        let j = i + 1;\n        while (j < encoded_str.length && encoded_str[j] === encoded_str[i]) {\n            j++;\n        }\n        decoded_str += String.fromCharCode(encoded_str.charCodeAt(i) + (j - i));\n        i = j;\n    }\n    return decoded_str;\n}\n\n// Example usage:\nlet encoded_str = \"a2b3c4\";\nlet decoded_str = encoded_cyclic(encoded_str);\nconsole.log(decoded_str); // Output: \"def\" */\n"}
{"task_id": "CPP/39", "generation": "\n    if(n==1)\n        return 2;\n    else if(n==2)\n        return 3;\n    else{\n        int a=2,b=3;\n        for(int i=3;i<=n;i++){\n            int temp=a+b;\n            a=b;\n            b=temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    if(l.size() < 3){\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            for(int k = j + 1; k < l.size(); k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision = 0;\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n            if(i != j && i + j == n + 1){\n                collision++;\n            }\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\n  vector<int> result;\n  for(int i = 0; i < l.size(); i++){\n    result.push_back(l[i] + 1);\n  }\n  return result;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i+1; j < l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n   string result;\n   while(x>0){\n      result=to_string(x%base)+result;\n      x/=base;\n   }\n   return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\n  if(n==0 || n==1)\n    return 0;\n  else if(n==2)\n    return 2;\n  else if(n==3)\n    return 0;\n  else\n    return fib4(n-1)+fib4(n-2)+(n-3)+fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n  sort(l.begin(), l.end());\n  int n = l.size();\n  if(n%2 == 0){\n    return (l[n/2 - 1] + l[n/2])/2;\n  }\n  else{\n    return l[n/2];\n  }\n}\n"}
{"task_id": "CPP/48", "generation": "\n  int i = 0;\n  int j = text.length() - 1;\n  while(i < j){\n    if(text[i] != text[j]){\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(p==0)\n        return 1;\n    if(p%2==0)\n        return modp(n*n%p,p/2);\n    return n*modp(n,n-1)%p;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                encoded += char(((s[i] - 'a' + 3) % 26) + 'a');\n            } else {\n                encoded += char(((s[i] - 'A' + 3) % 26) + 'A');\n            }\n        } else {\n            encoded += s[i];\n        }\n    }\n    return encoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = 0; i < text.length(); i++){\n        if(vowels.find(text[i]) != string::npos){\n            text.erase(i,1);\n            i--;\n        }\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n  for(int i = 0; i < l.size(); i++){\n    if(l[i] < t){\n      return true;\n    }\n  }\n  return false;\n}  // O(n) time, O(1) space\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n  if(s0.size()!=s1.size()) return false;\n  sort(s0.begin(),s0.end());\n  sort(s1.begin(),s1.end());\n  for(int i=0;i<s0.size();i++){\n    if(s0[i]!=s1[i]) return false;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n   stack<char> s;\n   for(int i=0;i<brackets.length();i++){\n      if(brackets[i]=='<'){\n         s.push(brackets[i]);\n      }\n      else if(brackets[i]=='>'){\n         if(s.empty()){\n            return false;\n         }\n         else{\n            s.pop();\n         }\n      }\n   }\n   if(s.empty()){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                result.push_back(l1[i]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i*i<=n;i++){\n        if(n%i==0){\n            n=n/i;\n            i--;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n  if(n==1){\n    return 1;\n  }\n  else{\n    return n+sum_to_n(n-1);\n  }\n}\n"}
{"task_id": "CPP/61", "generation": "\n  int count = 0;\n  for(int i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '('){\n      count++;\n    }else if(brackets[i] == ')'){\n      count--;\n      if(count < 0){\n        return false;\n      }\n    }\n  }\n  if(count == 0){\n    return true;\n  }else{\n    return false;\n  }\n}\n"}
{"task_id": "CPP/62", "generation": "\n  vector<float> derivative;\n  int n = xs.size();\n  for(int i = 1; i < n - 1; i++){\n    derivative.push_back((n - 1) * xs[i]);\n  }\n  return derivative;\n}\n"}
{"task_id": "CPP/63", "generation": "\n  if(n==0 || n==1)\n    return 0;\n  else if(n==2)\n    return 1;\n  else\n    return fibfib(n-1)+(n-2)+(n-3);\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n        else if(s[i] == 'y' && i == s.length() - 1){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    string result=s.substr(shift,s.length()-shift)+s.substr(0,shift);\n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isupper(s[i])){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int i=0;\n    int total=0;\n    while(i<s.length()){\n        if(s[i]=='0'){\n            i++;\n            continue;\n        }\n        int j=i;\n        while(j<s.length() && s[j]!=' '){\n            j++;\n        }\n        int num=stoi(s.substr(i,j-i));\n        i=j+1;\n        if(s[i]=='a'){\n            total+=num;\n        }\n        else if(s[i]=='o'){\n            total+=num*2;\n        }\n        else if(s[i]=='m'){\n            total+=num*3;\n        }\n    }\n    return n-total;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> even;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            even.push_back(arr[i]);\n        }\n    }\n    if(even.size() == 0){\n        return {};\n    }\n    int min = even[0];\n    int min_index = 0;\n    for(int i = 1; i < even.size(); i++){\n        if(even[i] < min){\n            min = even[i];\n            min_index = i;\n        }\n    }\n    return {min, min_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int count = 0;\n        for(int j = 0; j < lst.size(); j++){\n            if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n            return lst[i];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    if(lst.size() == 0){\n        return lst;\n    }\n    sort(lst.begin(), lst.end());\n    int min = lst[0];\n    lst.erase(lst.begin());\n    lst.push_back(min);\n    return lst;\n}\n"}
{"task_id": "CPP/71", "generation": "\n  if(a+b>c && a+c>b && b+c>a){\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    return round(area*100)/100;\n  }\n  else return -1;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    return sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1=0;\n    int count2=0;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst2.size();j++){\n            if(lst1[i]==lst2[j]){\n                count1++;\n                count2++;\n                lst1.erase(lst1.begin()+i);\n                lst2.erase(lst2.begin()+j);\n                i--;\n                j--;\n                break;\n            }\n        }\n    }\n    if(count1>count2){\n        return lst1;\n    }\n    else if(count1<count2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n  int i = 2;\n  while (i < a){\n    if (a % i == 0){\n      int j = 2;\n      while (j < i){\n        if (i % j == 0){\n          j++;\n        } else {\n          break;\n        }\n      }\n      if (j == i){\n        int k = 2;\n        while (k < a / i){\n          if ((a / i) % k == 0){\n            k++;\n          } else {\n            break;\n          }\n        }\n        if (k == (a / i)){\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    i++;\n  }\n  return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==0){\n        return true;\n    }\n    if(n<0){\n        return false;\n    }\n    if(x==1){\n        return true;\n    }\n    if(x==2){\n        return n%2==0;\n    }\n    if(x==3){\n        return n==1;\n    }\n    if(x==4){\n        return n%2==0;\n    }\n    if(x==5){\n        return n==0;\n    }\n    if(x==6){\n        return n==1;\n    }\n    if(x==7){\n        return n==1;\n    }\n    if(x==8){\n        return n%3==0;\n    }\n    if(x==9){\n        return n%2==0;\n    }\n    if(x==10){\n        return n==0;\n    }\n    if(x==11){\n        return n==1;\n    }\n    if(x==12){\n        return n==1;\n    }\n    if(x==13){\n        return n==1;\n    }\n    if(x==14){\n        return n==0;\n    }\n    if(x==15){\n        return n==1;\n    }\n    if(x==16){\n        return n%4==0;\n    }\n    if(x==17){\n        return n==1;\n    }\n    if(x==18){\n        return n==1;\n    }\n    if(x==19){\n        return n==1;\n    }\n    if(x==20){\n        return n==2;\n    }\n    if(x==21){\n        return n==1;\n    }\n    if(x==22){\n        return n==1;\n    }\n    if(x==23){\n        return n==1;\n    }\n    if(x==24){\n        return n==3;\n    }\n    if(x==25){\n        return n==0;\n    }\n    if(x==26){\n        return n==1;\n    }\n    if(x==27){\n        return n==1;\n    }\n    if(x==28){\n        return n==1;\n    }\n    if(x==29){\n        return n==1;\n    }\n    if(x==30){\n        return n==1;\n    }\n    if(x==31){\n        return n==1;\n    }\n    if(x==32){\n        return n%5==0;\n    }\n    if(x==33){\n        return n==1;\n    }\n    if(x==34){\n        return n==1;\n    }\n    if"}
{"task_id": "CPP/77", "generation": "\n    int cube_root = pow(a, 1.0/3.0);\n    return (cube_root * cube_root * cube_root) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(isalpha(num[i])){\n            if(isupper(num[i])){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n  string binary;\n  while(decimal>0){\n    binary=to_string(decimal%2)+binary;\n    decimal=decimal/2;\n  }\n  string result=\"db\"+binary+\"db\";\n  return result;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int len = s.length();\n    for(int i = 0; i < len - 2; i++){\n        if(s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2]){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/81", "generation": "\n  vector<string> letter_grades;\n  for (int i = 0; i < grades.size(); i++){\n    if (grades[i] >= 4.0){\n      letter_grades.push_back(\"A+\");\n    } else if (grades[i] > 3.7){\n      letter_grades.push_back(\"A\");\n    } else if (grades[i] > 3.3){\n      letter_grades.push_back(\"A-\");\n    } else if (grades[i] > 3.0){\n      letter_grades.push_back(\"B+\");\n    } else if (grades[i] > 2.7){\n      letter_grades.push_back(\"B\");\n    } else if (grades[i] > 2.3){\n      letter_grades.push_back(\"B-\");\n    } else if (grades[i] > 2.0){\n      letter_grades.push_back(\"C+\");\n    } else if (grades[i] > 1.7){\n      letter_grades.push_back(\"C\");\n    } else if (grades[i] > 1.3){\n      letter_grades.push_back(\"C-\");\n    } else if (grades[i] > 1.0){\n      letter_grades.push_back(\"D+\");\n    } else if (grades[i] > 0.7){\n      letter_grades.push_back(\"D\");\n    } else if (grades[i] > 0.0){\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if(length <= 1) return false;\n    for(int i = 2; i <= length/2; i++){\n        if(length % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count = 0;\n    for(int i = 1; i <= 9; i++){\n        count += 9 * pow(10, n - 2);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string binary = \"\";\n    while(N > 0){\n        binary = to_string(N%2) + binary;\n        N = N/2;\n    }\n    int sum = 0;\n    for(int i = 0; i < binary.length(); i++){\n        sum += binary[i] - '0';\n    }\n    string ans = \"\";\n    while(sum > 0){\n        ans = to_string(sum%2) + ans;\n        sum = sum/2;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            for(int j=0;j<word.length();j++){\n                s[i-j]='a'+word[j];\n            }\n            word.clear();\n        }\n        else{\n            word.push_back(s[i]);\n        }\n    }\n    sort(word.begin(),word.end());\n    for(int j=0;j<word.length();j++){\n        s[s.length()-j-1]='a'+word[j];\n    }\n    return s;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int, int>> res;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back(make_pair(i, j));\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    sort(res.begin(), res.end(), [](pair<int, int> a, pair<int, int> b){\n        if(a.first == b.first){\n            return a.second > b.second;\n        }\n        return a.first < b.first;\n    });\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    if(array.size() == 1){\n        return array;\n    }\n    if(array.size() % 2 == 0){\n        sort(array.begin(), array.end());\n        return array;\n    }\n    else{\n        sort(array.begin(), array.end());\n        reverse(array.begin(), array.end());\n        return array;\n    }\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string rotated = \"\";\n    for(int i = 0; i < s.length(); i++){\n        int index = alphabet.find(s[i]);\n        if(index == -1){\n            rotated += s[i];\n        }else{\n            int newindex = (index * 2) % 26;\n            rotated += alphabet[newindex];\n        }\n    }\n    return rotated;\n}\n"}
{"task_id": "CPP/90", "generation": "\n  if(lst.empty()) return 0;\n  sort(lst.begin(), lst.end());\n  int count = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] != lst[i+1]){\n      count++;\n      if(count == 2) return lst[i];\n    }\n  }\n  return 0;\n}\n"}
{"task_id": "CPP/91", "generation": "\n  int count = 0;\n  string words[100];\n  int word_count = 0;\n  string sentence;\n  for(int i = 0; i < S.length(); i++){\n    if(S[i] == ' '){\n      words[word_count] = S.substr(0, i);\n      word_count++;\n      S = S.substr(i+1, S.length());\n      i = 0;\n    }\n  }\n  words[word_count] = S;\n  word_count++;\n  for(int i = 0; i < word_count; i++){\n    if(words[i] == \"I\"){\n      sentence = words[i];\n      for(int j = i+1; j < word_count; j++){\n        if(words[j] == \".\" || words[j] == \"?\" || words[j] == \"!\"){\n          break;\n        }\n        sentence = sentence + \" \" + words[j];\n      }\n      if(sentence.find(\"bored\") != string::npos){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n  if (a+b==c || a+c==b || b+c==a)\n    return true;\n  else\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string encoded;\n    for(int i=0;i<message.length();i++){\n        if(isupper(message[i])){\n            encoded+=tolower(message[i]);\n        }else{\n            encoded+=toupper(message[i]);\n        }\n        if(message[i]=='a'){\n            encoded+=message[i+2];\n            i++;\n        }else if(message[i]=='e'){\n            encoded+=message[i+2];\n            i++;\n        }else if(message[i]=='i'){\n            encoded+=message[i+2];\n            i++;\n        }else if(message[i]=='o'){\n            encoded+=message[i+2];\n            i++;\n        }else if(message[i]=='u'){\n            encoded+=message[i+2];\n            i++;\n        }else{\n            encoded+=message[i];\n        }\n    }\n    return encoded;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int num = lst[i];\n        int count = 0;\n        while(num > 0){\n            num = num / 10;\n            count++;\n        }\n        num = lst[i];\n        int temp = 0;\n        while(num > 0){\n            temp = temp + (num % 10);\n            num = num / 10;\n        }\n        if(temp > 1){\n            for(int j = 2; j < temp; j++){\n                if(temp % j == 0){\n                    break;\n                }\n                if(j == temp - 1){\n                    sum = sum + temp;\n                }\n            }\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first.find_first_not_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")!=-1) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n  vector<int> primes;\n  for(int i = 2; i < n; i++){\n    bool is_prime = true;\n    for(int j = 2; j < i; j++){\n      if(i % j == 0){\n        is_prime = false;\n        break;\n      }\n    }\n    if(is_prime){\n      primes.push_back(i);\n    }\n  }\n  return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int product = a*b;\n    int unit_digit = product%10;\n    return unit_digit;\n}\n"}
{"task_id": "CPP/98", "generation": "\n  int count = 0;\n  for(int i = 0; i < s.length(); i++){\n    if(isupper(s[i]) && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double number = stod(value);\n    int integer = (int)number;\n    if (number - integer == 0.5){\n        if (number > 0){\n            return integer + 1;\n        }\n        else{\n            return integer - 1;\n        }\n    }\n    else{\n        return integer;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            pile.push_back(i + 1);\n        }else{\n            pile.push_back(i - 1);\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','||s[i]==' '){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word.push_back(s[i]);\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n        return -1;\n    return x+y-1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n  if(n>m) return \"-1\";\n  double sum=0;\n  for(int i=n;i<=m;i++) sum+=i;\n  double avg=sum/(m-n+1);\n  int rounded_avg=round(avg);\n  string binary;\n  while(rounded_avg>0){\n    binary=to_string(rounded_avg%2)+binary;\n    rounded_avg/=2;\n  }\n  return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n  vector<int> result;\n  for(int i = 0; i < x.size(); i++){\n    int temp = x[i];\n    while(temp > 0){\n      if(temp % 10 % 2 == 0){\n        result.push_back(temp % 10);\n      }\n      temp /= 10;\n    }\n  }\n  sort(result.begin(), result.end());\n  return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        res.push_back(m[arr[i]]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            int fact = 1;\n            for(int j = 1; j <= i; j++){\n                fact *= j;\n            }\n            res.push_back(fact);\n        }else{\n            int sum = 0;\n            for(int j = 1; j <= i; j++){\n                sum += j;\n            }\n            res.push_back(sum);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2, 0);\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        if(str == string(str.rbegin(), str.rend())){\n            if(i % 2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n  int count = 0;\n  for (int i = 0; i < n.size(); i++){\n    int num = abs(n[i]);\n    while (num > 0){\n      int digit = num % 10;\n      if (digit > 0){\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst2.size();j++){\n            if(lst1[i]%2==0 && lst2[j]%2!=0){\n                lst1[i]=lst2[j];\n                lst2[j]=lst1[i];\n            }\n        }\n    }\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n  map<char,int> result;\n  for(int i=0;i<test.length();i++){\n    if(result.find(test[i])!=result.end()){\n      result[test[i]]++;\n    }else{\n      result[test[i]]=1;\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> result;\n    string temp = s;\n    while(temp.find(c)!=string::npos){\n        temp.erase(temp.find(c),1);\n    }\n    result.push_back(temp);\n    while(temp.length()>1){\n        string temp2 = temp;\n        reverse(temp2.begin(),temp2.end());\n        result.push_back(temp2);\n        temp.erase(temp.begin());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<int> odd;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]-'0'%2==1){\n                count++;\n            }\n        }\n        odd.push_back(count);\n    }\n    vector<string> ans;\n    for(int i=0;i<odd.size();i++){\n        string s=to_string(odd[i]);\n        string t=lst[i];\n        string res=s+\"n str\"+t+\"n input.\";\n        ans.push_back(res);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = 0;\n    long long currentSum = 0;\n    for(long long num : nums){\n        currentSum += num;\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n = grid.size();\n    int m = grid[0].size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                count++;\n            }\n        }\n    }\n    return count / capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        if(a<0 && b<0){\n            return a<b;\n        }\n        else if(a<0 && b>=0){\n            return true;\n        }\n        else if(a>=0 && b<0){\n            return false;\n        }\n        else{\n            return a<b;\n        }\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n        }\n        else{\n            if(word.size()>0){\n                int count=0;\n                for(int j=0;j<word.size();j++){\n                    if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                        count++;\n                    }\n                }\n                if(count==n){\n                    words.push_back(word);\n                }\n                word=\"\";\n            }\n        }\n    }\n    if(word.size()>0){\n        int count=0;\n        for(int j=0;j<word.size();j++){\n            if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                count++;\n            }\n        }\n        if(count==n){\n            words.push_back(word);\n        }\n    }\n    return words;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiou\";\n    int n = word.size();\n    for(int i = 0; i < n - 1; i++){\n        if(isalpha(word[i]) && !isalpha(word[i + 1])){\n            for(int j = i + 1; j < n; j++){\n                if(isalpha(word[j]) && vowels.find(word[j]) != string::npos){\n                    return word[j];\n                }\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == \"(\"){\n            open++;\n        }else{\n            open--;\n            if(open < 0){\n                return \"No\";\n            }\n        }\n    }\n    if(open == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> ans;\n    for(int i=arr.size()-k;i<arr.size();i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> odd_collatz;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n        }\n        else{\n            n=3*n+1;\n        }\n        if(n%2!=0){\n            odd_collatz.push_back(n);\n        }\n    }\n    sort(odd_collatz.begin(),odd_collatz.end());\n    return odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n  int day,month,year;\n  char delimiter;\n  if(date.length() != 10) return false;\n  delimiter = date[2];\n  if(delimiter != '-' && delimiter != '/') return false;\n  if(delimiter == '-') {\n    day = stoi(date.substr(0,2));\n    month = stoi(date.substr(3,2));\n    year = stoi(date.substr(6,4));\n  } else {\n    day = stoi(date.substr(0,2));\n    month = stoi(date.substr(3,2));\n    year = stoi(date.substr(6,4));\n  }\n  if(day < 1 || day > 31 || month < 1 || month > 12 || year < 1) return false;\n  if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day > 31)) return false;\n  if((month == 4 || month == 6 || month == 9 || month == 11) && (day > 30)) return false;\n  if(month == 2 && (day > 29 || (day == 29 && !(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))))) return false;\n  return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    if(txt.find(' ') != string::npos){\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos){\n            words.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        words.push_back(txt);\n    }\n    else if(txt.find(',') != string::npos){\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos){\n            words.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        words.push_back(txt);\n    }\n    else{\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++){\n            if(islower(txt[i])){\n                count++;\n            }\n        }\n        for(int i = 0; i < count; i++){\n            words.push_back(string(1, txt[i]));\n        }\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n  for(int i = 0; i < lst.size()-1; i++){\n    if(lst[i] > lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if (start > end) return \"NO\";\n    int length = end - start + 1;\n    if (length == 1 || length == 2 || length == 3 || length == 5 || length == 7 || length == 11 || length == 13 || length == 17 || length == 19) return \"YES\";\n    return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n  if(arr.size() == 0){\n    return NULL;\n  }\n  int product = 1;\n  for(int i = 0; i < arr.size(); i++){\n    if(arr[i] == 0){\n      return 0;\n    }\n    product *= arr[i];\n  }\n  int sum = 0;\n  for(int i = 0; i < arr.size(); i++){\n    sum += abs(arr[i]) * (product / abs(arr[i]));\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int N = grid.size();\n    vector<vector<int>> visited(N, vector<int>(N, 0));\n    vector<vector<int>> queue;\n    vector<int> start;\n    for(int i = 0; i < N; i++){\n        for(int j = 0; j < N; j++){\n            if(visited[i][j] == 0){\n                queue.push_back({i, j, 0});\n                visited[i][j] = 1;\n                start.push_back(grid[i][j]);\n            }\n        }\n    }\n    vector<int> path;\n    while(!queue.empty()){\n        vector<int> cur = queue[0];\n        queue.erase(queue.begin());\n        path.push_back(grid[cur[0]][cur[1]]);\n        if(cur[2] == k - 1){\n            return path;\n        }\n        int x = cur[0];\n        int y = cur[1];\n        if(x > 0 && visited[x - 1][y] == 0){\n            queue.push_back({x - 1, y, cur[2] + 1});\n            visited[x - 1][y] = 1;\n        }\n        if(x < N - 1 && visited[x + 1][y] == 0){\n            queue.push_back({x + 1, y, cur[2] + 1});\n            visited[x + 1][y] = 1;\n        }\n        if(y > 0 && visited[x][y - 1] == 0){\n            queue.push_back({x, y - 1, cur[2] + 1});\n            visited[x][y - 1] = 1;\n        }\n        if(y < N - 1 && visited[x][y + 1] == 0){\n            queue.push_back({x, y + 1, cur[2] + 1});\n            visited[x][y + 1] = 1;\n        }\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "\n  vector<int> res;\n  if(n == 1){\n    res.push_back(3);\n    return res;\n  }\n  if(n == 2){\n    res.push_back(1);\n    res.push_back(3);\n    return res;\n  }\n  vector<int> prev = tri(n - 1);\n  vector<int> prev2 = tri(n - 2);\n  vector<int> prev3 = tri(n - 3);\n  if(n % 2 == 0){\n    res.push_back(1 + n / 2);\n  }else{\n    res.push_back(prev[n - 3] + prev[n - 2] + prev[n - 1]);\n  }\n  for(int i = 0; i < n - 1; i++){\n    res.push_back(prev[i]);\n  }\n  return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    string str = to_string(n);\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] % 2 != 0){\n            product *= (str[i] - '0');\n        }\n    }\n    return product;\n}  // time O(n) space O(n) where n is the number of digits in the number\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += pow(lst[i], 2);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0) return false;\n    if(isalpha(txt[txt.length()-1])) return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max = -1;\n    for(int i = n-1; i >= 0; i--){\n        if(arr[i] > max){\n            max = arr[i];\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    if(lst.empty()){\n        return vector<int>(2, 0);\n    }\n    int a = *max_element(lst.begin(), lst.end());\n    int b = *min_element(lst.begin(), lst.end());\n    if(a < 0 && b > 0){\n        return vector<int>(2, 0);\n    }\n    return vector<int>(a, 'a') + vector<int>(b, 'b');\n}\n"}
{"task_id": "CPP/137", "generation": "\n  if(a.type() == typeid(int) && b.type() == typeid(float)){\n    return b;\n  }\n  if(a.type() == typeid(float) && b.type() == typeid(int)){\n    return b;\n  }\n  if(a.type() == typeid(string) && b.type() == typeid(string)){\n    string a1 = boost::any_cast<string>(a);\n    string b1 = boost::any_cast<string>(b);\n    if(a1.find('.') != string::npos && b1.find('.') != string::npos){\n      float a2 = stof(a1);\n      float b2 = stof(b1);\n      if(a2 > b2){\n        return a;\n      }\n      else if(a2 < b2){\n        return b;\n      }\n      else{\n        return boost::any();\n      }\n    }\n    else{\n      if(a1 > b1){\n        return a;\n      }\n      else if(a1 < b1){\n        return b;\n      }\n      else{\n        return boost::any();\n      }\n    }\n  }\n  if(a.type() == typeid(string) && b.type() == typeid(int)){\n    string a1 = boost::any_cast<string>(a);\n    int b1 = boost::any_cast<int>(b);\n    if(a1.find('.') != string::npos){\n      float a2 = stof(a1);\n      if(a2 > b1){\n        return a;\n      }\n      else if(a2 < b1){\n        return b;\n      }\n      else{\n        return boost::any();\n      }\n    }\n    else{\n      if(a1 > to_string(b1)){\n        return a;\n      }\n      else if(a1 < to_string(b1)){\n        return b;\n      }\n      else{\n        return boost::any();\n      }\n    }\n  }\n  if(a.type() == typeid(int) && b.type() == typeid(string)){\n    int a1 = boost::any_cast<int>(a);\n    string b1 = boost::any_cast<string>(b);\n    if(b1.find('.') != string::npos){\n      float b2 = stof(b1);\n      if(a1 > b2){\n        return a;\n      }\n      else if(a1 < b2){\n        return b;\n      }\n      else{\n        return boost::any();\n      }\n    }\n    else{\n      if(to_string(a1) > b1){\n        return a;\n      }\n      else if(to_string(a1) < b1"}
{"task_id": "CPP/138", "generation": "\n  int i = 0;\n  while (i < n){\n    i += 2;\n  }\n  return i == n;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n  string result = \"\";\n  for(int i = 0; i < text.length(); i++){\n    if(text[i] == ' '){\n      if(result.length() > 0 && result[result.length()-1] == ' '){\n        result[result.length()-1] = '-';\n      }else{\n        result += '_';\n      }\n    }else{\n      result += text[i];\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count = 0;\n    bool flag = false;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n        if(file_name[i] == '.'){\n            flag = true;\n        }\n    }\n    if(count > 3 || !flag){\n        return \"No\";\n    }\n    string first_part = file_name.substr(0, file_name.find_last_of('.'));\n    if(first_part.empty() || first_part[0] < 'a' || first_part[0] > 'z' && first_part[0] < 'A' || first_part[0] > 'Z'){\n        return \"No\";\n    }\n    string second_part = file_name.substr(file_name.find_last_of('.') + 1);\n    if(second_part != \"txt\" && second_part != \"exe\" && second_part != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int length = 0;\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            length = 0;\n        }else{\n            length++;\n        }\n        if(length == 2 || length == 3 || length == 5 || length == 7 || length == 11 || length == 13 || length == 17 || length == 19){\n            result += sentence[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return a*d==b*c;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int, int>> points;\n    for (int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        int n = nums[i];\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        points.push_back(make_pair(sum, i));\n    }\n    sort(points.begin(), points.end());\n    vector<int> result;\n    for (int i = 0; i < points.size(); i++) {\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 == 1 || nums[i] % 10 == 9){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n  vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n  vector<string> result;\n  for(int i=0;i<planets.size();i++){\n    if(planets[i]==planet1){\n      for(int j=i+1;j<planets.size();j++){\n        if(planets[j]==planet2){\n          for(int k=i+1;k<j;k++){\n            result.push_back(planets[k]);\n          }\n          return result;\n        }\n      }\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i].length() % 2 == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string &a, const string &b){\n        if (a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n  long long sum = 0;\n  for (int i = 0; i < lst.size(); i++){\n    if (lst[i] > 0 && lst[i] % 2 != 0){\n      sum += pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(guess[i]-game[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension;\n    for (int i = 0; i < extensions.size(); i++){\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size(); j++){\n            if (isupper(extensions[i][j])) strength++;\n            else strength--;\n        }\n        if (strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n  if(a.length()<b.length()) return false;\n  int i=0;\n  while(i<a.length()){\n    if(a.substr(i,b.length())==b) return true;\n    i++;\n  }\n  return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0, odd = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<string> roman_numerals = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n    vector<int> values = {1, 5, 10, 50, 100, 500, 1000};\n    string result = \"\";\n    for(int i = 0; i < 6; i++){\n        while(number >= values[i]){\n            result += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        if(pow(a,2)+pow(b,2)==pow(c,2) || pow(a,2)+pow(c,2)==pow(b,2) || pow(b,2)+pow(c,2)==pow(a,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = words[0];\n    for(int i = 1; i < words.size(); i++){\n        if(words[i].size() > max_word.size()){\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    if(total > remaining){\n        return {total - remaining,0};\n    }\n    else{\n        return {total,remaining - total};\n    }\n}"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                res += toupper(s[i]);\n            }else{\n                res += tolower(s[i]);\n            }\n        }else{\n            res += s[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),text.length(),hash);\n    stringstream ss;\n    for(int i=0;i<MD5_DIGEST_LENGTH;i++){\n        ss<<hash[i];\n    }\n    return ss.str();\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        int count=0;\n        int temp=i;\n        while(temp>0){\n            if(temp%10%2==0){\n                count++;\n            }\n            temp=temp/10;\n        }\n        if(count>0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
