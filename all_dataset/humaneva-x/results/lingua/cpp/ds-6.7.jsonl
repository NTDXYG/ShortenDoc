{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j]) <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '(') {\n            count++;\n            temp += c;\n        }\n        if(c == ')') {\n            count--;\n            temp += c;\n            if(count == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int int_part = (int)number;\n    float decimal_part = fabs(number - int_part);\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float deviation_sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        deviation_sum += fabs(numbers[i] - mean);\n    }\n    return deviation_sum / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int count = 0;\n    int max_count = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            count++;\n            if(count > max_count) max_count = count;\n        }\n        else if(c == ')'){\n            count--;\n        }\n        else if(c == ' '){\n            result.push_back(max_count);\n            count = 0;\n            max_count = 0;\n        }\n    }\n    result.push_back(max_count);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\n#include <iostream>\n#include <string>\n\nstd::string make_palindrome(const std::string& str) {\n    std::string rev_str = std::string(str.rbegin(), str.rend());\n    for (size_t i = 0; i < str.size(); ++i) {\n        if (str.substr(0, str.size() - i) == rev_str.substr(i)) {\n            return str + rev_str.substr(0, i);\n        }\n    }\n    return str + rev_str;\n}\n\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.size(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i);\n        if(i<n) result += \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; i<str.size(); i++){\n        count[tolower(str[i])]++;\n    }\n    int distinct_count = 0;\n    for(int i=0; i<256; i++){\n        if(count[i] > 0){\n            distinct_count++;\n        }\n    }\n    return distinct_count;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    int i = 0;\n    while(i < music_string.size()){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(1);\n                i += 2;\n            }\n            else{\n                beats.push_back(4);\n                i += 2;\n            }\n        }\n        else if(music_string[i] == '.'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(2);\n                i += 2;\n            }\n            else{\n                beats.push_back(8);\n                i += 2;\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    string::size_type start=0;\n    while((start=str.find(substring,start)) != string::npos){\n        ++count;\n        start += substring.length();\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string word = \"\";\n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[word]) + \" \";\n            word = \"\";\n        } else {\n            word += numbers[i];\n        }\n    }\n    result += to_string(num_map[word]);\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = INFINITY;\n    vector<float> closest_pair;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            closest_pair = {numbers[i], numbers[i+1]};\n        }\n    }\n    return closest_pair;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]<min) min = numbers[i];\n        if(numbers[i]>max) max = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i]-min)/(max-min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto & value : values){\n        if(boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i=0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>=1;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i*i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n != 1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end())\n            result.push_back(numbers[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(islower(str[i])){\n            str[i]=toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i]=tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble find_zero(vector<double> xs, double start, double end){\n    /* \n    Finds zero of polynomial with coefficients xs in interval [start, end].\n    *//* xs coefficients polynomial\n   find_zero x poly(x) = 0.\n   find_zero returns zero point\n   find_zero takes xs even coefficients\n   largest non zero coefficient guarantees\n   solution\n   round(find_zero([1, 2]), 2) f(x) = 1 + 2x\n  \n   round(find_zero([-6, 11, -6, 1]), 2) (x - 1) * (x - 2) - 3) = -6 + 11x - 6x^2 + x^3\n   */\n    double mid = (start + end) / 2;\n    while(abs(poly(xs, mid)) > 1e-6){\n        if(poly(xs, mid) * poly(xs, start) < 0){\n            end = mid;\n        }else{\n            start = mid;\n        }\n        mid = (start + end) / 2;\n    }\n    return mid;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> temp;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0)\n            temp.push_back(l[i]);\n    }\n    sort(temp.begin(),temp.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0)\n            l[i]=temp[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%11==0 || i%13==0){\n            int num=i;\n            while(num>0){\n                if(num%10==7)\n                    count++;\n                num=num/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    vector<float> odd_indices;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0){\n            even_indices.push_back(l[i]);\n        }\n        else{\n            odd_indices.push_back(l[i]);\n        }\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0; i<even_indices.size(); i++){\n        l[2*i] = even_indices[i];\n    }\n    for(int i=0; i<odd_indices.size(); i++){\n        l[2*i+1] = odd_indices[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *decoded_cyclic(char *encoded, int k) {\n    int len = strlen(encoded);\n    char *decoded = (char *)malloc(sizeof(char) * (len + 1));\n    for (int i = 0; i < len; i++) {\n        decoded[i] = encoded[(i + k) % len];\n    }\n    decoded[len] = '\\0';\n    return decoded;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=1;\n    for(int i=2;i<=n;i++){\n        fib[i]=fib[i-1]+fib[i-2];\n    }\n    return fib[n];\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3) return false;\n    sort(l.begin(), l.end());\n    for(int i = 0; i < n - 1; i++){\n        if(i > 0 && l[i] == l[i - 1]) continue;\n        int j = i + 1, k = n - 1;\n        while(j < k){\n            if(l[i] + l[j] + l[k] == 0){\n                return true;\n            }\n            else if(l[i] + l[j] + l[k] < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            collision++;\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x > 0){\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (0.5*a*h);\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int len = text.length();\n    for(int i=0; i<len/2; i++){\n        if(text[i] != text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n<p)\n        return n;\n    else\n        return modp(n-p,p);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            if(s[i] >= 'a' && s[i] <= 'z'){\n                encoded_string += char(int(s[i]+26-5)%26 + 'a');\n            }\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            encoded_string += char(int(s[i]+26-5)%26 + 'A');\n        }\n        else{\n            encoded_string += s[i];\n        }\n    }\n    return encoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.size(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i]<t){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n==0 || n==1)\n        return true;\n    if(l[0]<=l[n-1]){\n        for(int i=0;i<n-1;i++){\n            if(l[i]>l[i+1])\n                return false;\n        }\n    }\n    else{\n        for(int i=0;i<n-1;i++){\n            if(l[i]<l[i+1])\n                return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i = 2;\n    while(i * i <= n){\n        if(n % i != 0)\n            i++;\n        else\n            n /= i;\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i=0; i<brackets.size(); i++){\n        if(brackets[i] == '(') count++;\n        else if(brackets[i] == ')') count--;\n        if(count < 0) return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/62", "generation": "\n    int n = xs.size();\n    vector<float> res(n-1);\n    for(int i=1; i<n; i++){\n        res[i-1] = i * xs[i];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    string vowels = \"aeiouy\";\n    for(int i=0; i<s.size(); i++){\n        if(vowels.find(tolower(s[i])) != string::npos){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.size();\n    shift %= n;\n    rotate(s.begin(),s.begin()+n-shift,s.end());\n    return s;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            sum += (int)s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples,oranges;\n    sscanf(s.c_str(),\"%d apples %d oranges\",&apples,&oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even_value = INT_MAX;\n    int smallest_even_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] <= smallest_even_value){\n            smallest_even_value = arr[i];\n            smallest_even_index = i;\n        }\n    }\n    if(smallest_even_index == -1)\n        return {};\n    else\n        return {smallest_even_value, smallest_even_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int freq[6] = {0};\n    for(int i = 0; i < lst.size(); i++)\n        freq[lst[i]]++;\n    for(int i = 5; i > 0; i--)\n        if(freq[i] >= i)\n            return i;\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> result;\n    if(lst.size()==0) return result;\n    sort(lst.begin(), lst.end());\n    while(lst.size()>1){\n        result.push_back(lst.front());\n        lst.erase(lst.begin());\n        result.push_back(lst.back());\n        lst.pop_back();\n    }\n    if(lst.size()==1) result.push_back(lst.front());\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w && q.size()%2==0){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int changes = 0;\n    for(int i=0; i<(n+1)/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1=0,count2=0;\n    for(int i=0;i<lst1.size();i++){\n        count1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        count2+=lst2[i].size();\n    }\n    if(count1<count2){\n        return lst1;\n    }\n    else if(count1>count2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<=a;i++){\n        if(a%i==0){\n            while(a%i==0){\n                a=a/i;\n            }\n            count++;\n        }\n    }\n    if(count==3)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    if(n==1)\n        return false;\n    while(x%n==0){\n        x=x/n;\n        if(x==1)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n = round(pow(a, (1. / 3)));\n    return n * n * n == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.size(); i++){\n        if(num[i]=='2' || num[i]=='3' || num[i]=='5' || num[i]=='7' || num[i]=='B' || num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"db\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int n = s.length();\n    if(n<3) return false;\n    for(int i=0;i<n-2;i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i] == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i] > 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grades[i] > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i] > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i] > 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grades[i] > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i] > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if(grades[i] > 1.7)\n            letter_grades.push_back(\"C\");\n        else if(grades[i] > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if(grades[i] > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if(grades[i] > 0.7)\n            letter_grades.push_back(\"D\");\n        else if(grades[i] > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n = str.length();\n    if(n<=1) return false;\n    for(int i=2; i*i<=n; i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return 9 * starts_one_ends(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    string binary = \"\";\n    while(N){\n        sum += N%2;\n        N /= 2;\n    }\n    while(sum){\n        binary = to_string(sum%2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 != 0 && lst[i]%2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[100];\n    int i=0, j=0;\n    string temp = \"\";\n    for(i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            words[j] = temp;\n            temp = \"\";\n            j++;\n        }\n        else{\n            temp += s[i];\n        }\n    }\n    words[j] = temp;\n    for(i=0; i<=j; i++){\n        sort(words[i].begin(), words[i].end());\n    }\n    string result = \"\";\n    for(i=0; i<j; i++){\n        result += words[i] + \" \";\n    }\n    result += words[i];\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int, int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> odd, even;\n    for(int i=0; i<array.size(); i++){\n        if(array[i]%2==0) even.push_back(array[i]);\n        else odd.push_back(array[i]);\n    }\n    if(odd.size()%2==1){\n        sort(odd.begin(), odd.end());\n        sort(even.begin(), even.end(), greater<int>());\n    }\n    else{\n        sort(odd.begin(), odd.end(), greater<int>());\n        sort(even.begin(), even.end());\n    }\n    vector<int> result;\n    for(int i=0; i<odd.size(); i++) result.push_back(odd[i]);\n    for(int i=0; i<even.size(); i++) result.push_back(even[i]);\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += char(int(s[i]+4-96)*2%26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += char(int(s[i]+4-65)*2%26 + 65);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i]<lst[i+1]) return lst[i+1];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i=0; i<S.size(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == 'b'){\n            if(S[i-1] == 'I' && (S[i-2] == ' ' || i == 1)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a+b==(int)c)\n        return true;\n    else if(a+c==(int)b)\n        return true;\n    else if(b+c==(int)a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string encoded_message = \"\";\n    for(char& c : message){\n        if(isalpha(c)){\n            if(vowels.find(c)!=string::npos){\n                encoded_message += toupper(c);\n            }\n            else{\n                encoded_message += tolower(c);\n            }\n        }\n        else{\n            encoded_message += c;\n        }\n    }\n    for(int i=0; i<encoded_message.size(); i++){\n        if(isalpha(encoded_message[i])){\n            if(encoded_message[i] == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i] == 'o' || encoded_message[i] == 'u' || encoded_message[i] == 'A' || encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i] == 'O' || encoded_message[i] == 'U'){\n                encoded_message[i] = encoded_message[i] + 2;\n            }\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();it != dict.end();++it){\n        string key = it->first;\n        for(auto &c : key)\n            if(!islower(c) && !isupper(c))\n                return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    vector<bool> prime(n+1,true);\n    prime[0]=prime[1]=false;\n    for(int i=2;i*i<=n;i++){\n        if(prime[i]==true){\n            for(int j=i*i;j<=n;j+=i)\n                prime[j]=false;\n        }\n    }\n    for(int i=2;i<n;i++){\n        if(prime[i])\n            primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int product = a*b;\n    int unit_digit = product%10;\n    return unit_digit;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.size(); i++){\n        if(s[i]>='A' && s[i]<='Z'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int int_part = (int)num;\n    double frac_part = num - int_part;\n    if(frac_part < 0.5){\n        return int_part;\n    }\n    else if(frac_part > 0.5){\n        return int_part + 1;\n    }\n    else{\n        if(int_part < 0){\n            return int_part;\n        }\n        else{\n            return int_part + 1;\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0)\n            result.push_back(n+(2*i));\n        else\n            result.push_back(n+(2*i));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++){\n        if (s[i] == ' ' || s[i] == ','){\n            if (word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    if (word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n        return -1;\n    else\n        return y-1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int avg=ceil((n+m)/2.0);\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> even_digits;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num){\n            int digit = num%10;\n            if(digit%2 == 0){\n                even_digits.push_back(x[i]);\n                break;\n            }\n            num /= 10;\n        }\n    }\n    sort(even_digits.begin(), even_digits.end());\n    return even_digits;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> num_to_name = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<string> result;\n    if(arr.empty()) return result;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push_back(num_to_name[arr[i]]);\n        }\n    }\n    sort(result.begin(), result.end(), [](string a, string b){return a.size() < b.size();});\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        int factorial = 1;\n        for(int j=1; j<=i; j++){\n            factorial *= j;\n        }\n        if(i%2 == 0){\n            result.push_back(factorial);\n        }else{\n            int sum = 0;\n            for(int k=1; k<=i; k++){\n                sum += k;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even=0,odd=0;\n    for(int i=1;i<=n;i++){\n        string s = to_string(i);\n        if(s[0]==s[s.size()-1]){\n            if(s.size()%2==0) even++;\n            else odd++;\n        }\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        if(n[i]<0){\n            int temp = abs(n[i]);\n            while(temp>0){\n                if(temp%10>0) count++;\n                temp /= 10;\n            }\n        }\n        else{\n            while(n[i]>0){\n                if(n[i]%10>0) count++;\n                n[i] /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0) return true;\n    int count = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i+1]) count++;\n    }\n    if(arr[n-1] > arr[0]) count++;\n    return count <= 1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1 = 0, odd2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n        if(lst1[i] % 2 != 0)\n            odd1++;\n    for(int i = 0; i < lst2.size(); i++)\n        if(lst2[i] % 2 != 0)\n            odd2++;\n    if(odd1 > odd2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> count;\n    for(int i=0;i<test.length();i++){\n        if(test[i] != ' '){\n            count[test[i]]++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    for(int i=0;i<s.size();i++){\n        if(c.find(s[i])==string::npos){\n            temp+=s[i];\n        }\n    }\n    res.push_back(temp);\n    reverse(temp.begin(),temp.end());\n    res.push_back(temp==s?\"True\":\"False\");\n    return res;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2==1)\n                count++;\n        }\n        result.push_back(\"number of odd elements \"+to_string(count)+\"n str\"+to_string(i+1)+\"ng \"+to_string(i+1)+\"nput.\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, min_sum = 0;\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum) min_sum = sum;\n    }\n    return -min_sum + 1;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size();\n    int m=grid[0].size();\n    int buckets=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                buckets++;\n                if(buckets%capacity==0){\n                    buckets++;\n                }\n            }\n        }\n    }\n    return buckets/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        if(a<0) a*=-1;\n        if(b<0) b*=-1;\n        int count_a=0, count_b=0;\n        for(int i=0; i<32; i++){\n            if(a & (1<<i)) count_a++;\n            if(b & (1<<i)) count_b++;\n        }\n        if(count_a==count_b) return a<b;\n        return count_a<count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    vector<string> result;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] != ' '){\n            word += s[i];\n        }\n        else{\n            words.push_back(word);\n            word = \"\";\n        }\n    }\n    words.push_back(word);\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n        for(int j=0;j<words[i].length();j++){\n            char c = tolower(words[i][j]);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.size()-1; i > 1; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos && vowels.find(word[i-2]) != string::npos){\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0, close = 0;\n    for(auto &s : lst){\n        for(char &c : s){\n            if(c == '(') open++;\n            else if(open > 0) open--;\n            else return \"No\";\n        }\n    }\n    return open == 0 ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2==1)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        int num=arr[i];\n        while(num>9){\n            num/=10;\n        }\n        sum+=num;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> result;\n    while(n != 1){\n        if(n % 2 != 0){\n            result.push_back(n);\n        }\n        n = n % 2 ? n*3 + 1 : n / 2;\n    }\n    result.push_back(1);\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())\n        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return false;\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n        return false;\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31)\n        return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<txt.length(); i++){\n        if(txt[i] == ' ' || txt[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    if(words.size() == 0){\n        for(char c='a'; c<='z'; c++){\n            if(txt.find(c) % 2 == 1){\n                words.push_back(string(1, c));\n            }\n        }\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> sorted_lst(lst);\n    sort(sorted_lst.begin(), sorted_lst.end());\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] != sorted_lst[i]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int length = end - start + 1;\n    if(length < 2)\n        return \"NO\";\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.empty()) return NULL;\n    int prod = 1;\n    int sum = 0;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 1 || arr[i] == -1)\n            prod *= arr[i];\n        else if(arr[i] == 0)\n            continue;\n        else\n            return NULL;\n        sum += abs(arr[i]);\n    }\n    return prod * sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n*n+1, vector<int>(k+1, INT_MAX));\n    dp[1][0] = 0;\n    for(int len = 1; len <= k; len++){\n        for(int cell = 1; cell <= n*n; cell++){\n            for(int prev = 1; prev <= n*n; prev++){\n                if(grid[i/n][i%n] == cell)\n                    dp[cell][len] = min(dp[cell][len], dp[prev][len-1] + abs(i/n - prev/n) + abs(i%n - prev%n));\n            }\n        }\n    }\n    int min_path = INT_MAX;\n    for(int cell = 1; cell <= n*n; cell++)\n        min_path = min(min_path, dp[cell][k]);\n    vector<int> res;\n    int cur = min_path, len = k;\n    for(int cell = 1; cell <= n*n; cell++){\n        for(int prev = 1; prev <= n*n; prev++){\n            if(dp[prev][len-1] + abs(i/n - prev/n) + abs(i%n - prev%n) == cur - 1){\n                res.push_back(grid[i/n][i%n]);\n                cur = dp[prev][len-1];\n                len--;\n                break;\n            }\n        }\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    if(n<1) return res;\n    res.push_back(3);\n    if(n==1) return res;\n    res.push_back(2);\n    if(n==2) return res;\n    res.push_back(8);\n    for(int i=4;i<=n;i++){\n        if(i%2==0) res.push_back(1+i/2);\n        else res.push_back((i-1)+(i-2)+(i+1));\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    int digit;\n    while(n>0){\n        digit = n%10;\n        if(digit%2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0 ? false : true;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty()) return false;\n    if(txt[txt.length()-1] == ' ') return false;\n    return isalpha(txt[txt.length()-1]);\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_index = -1;\n    for(int i=n-1; i>0; i--){\n        if(arr[i] < arr[i-1]){\n            max_index = i-1;\n            break;\n        }\n    }\n    if(max_index == -1) return -1;\n    for(int i=max_index+1; i<n; i++){\n        if(arr[i] < arr[max_index]){\n            max_index = i;\n            break;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int largest = INT_MIN;\n    int smallest = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>0){\n            if(lst[i]>largest)\n                largest = lst[i];\n            if(lst[i]<smallest)\n                smallest = lst[i];\n        }\n    }\n    if(smallest==INT_MAX && largest==INT_MIN)\n        return {None, None};\n    else\n        return {largest, smallest};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==typeid(int) && b.type()==typeid(int)){\n        if(boost::any_cast<int>(a)>boost::any_cast<int>(b))\n            return a;\n        else if(boost::any_cast<int>(a)<boost::any_cast<int>(b))\n            return b;\n        else\n            return boost::any();\n    }\n    else if(a.type()==typeid(float) && b.type()==typeid(float)){\n        if(boost::any_cast<float>(a)>boost::any_cast<float>(b))\n            return a;\n        else if(boost::any_cast<float>(a)<boost::any_cast<float>(b))\n            return b;\n        else\n            return boost::any();\n    }\n    else if(a.type()==typeid(string) && b.type()==typeid(string)){\n        if(stof(boost::any_cast<string>(a))>stof(boost::any_cast<string>(b)))\n            return a;\n        else if(stof(boost::any_cast<string>(a))<stof(boost::any_cast<string>(b)))\n            return b;\n        else\n            return boost::any();\n    }\n    else if(a.type()==typeid(float) && b.type()==typeid(string)){\n        if(boost::any_cast<float>(a)>stof(boost::any_cast<string>(b)))\n            return a;\n        else if(boost::any_cast<float>(a)<stof(boost::any_cast<string>(b)))\n            return b;\n        else\n            return boost::any();\n    }\n    else if(a.type()==typeid(string) && b.type()==typeid(float)){\n        if(stof(boost::any_cast<string>(a))>boost::any_cast<float>(b))\n            return a;\n        else if(stof(boost::any_cast<string>(a))"}
{"task_id": "CPP/138", "generation": "\n    int sum = 0;\n    for(int i=2; i<=n; i+=2){\n        sum += i;\n    }\n    return sum == n;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        long long fact = 1;\n        for(int j=1; j<=i; j++){\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0;i<text.size();i++){\n        if(text[i]==' '){\n            if(i+1<text.size() && text[i+1]==' '){\n                text.replace(i,2,\"_\");\n            }\n            else{\n                text.replace(i,1,\"-\");\n            }\n        }\n    }\n    return text;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count_digits = 0;\n    for(int i = 0; i < file_name.size(); i++){\n        if(isdigit(file_name[i])){\n            count_digits++;\n        }\n    }\n    if(count_digits > 3){\n        return \"No\";\n    }\n    int dot_position = file_name.find('.');\n    if(dot_position == string::npos){\n        return \"No\";\n    }\n    if(dot_position == 0 || dot_position == file_name.size()-1){\n        return \"No\";\n    }\n    if(!isalpha(file_name[0])){\n        return \"No\";\n    }\n    string extension = file_name.substr(dot_position+1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3==0 && i%4==0){\n            sum += lst[i]*lst[i]*lst[i];\n        }\n        else if(i%3==0){\n            sum += lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum += lst[i]*lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    int n = sentence.length();\n    int i=0, j=0;\n    string words[100];\n    string word = \"\";\n    string result = \"\";\n    while(i<n){\n        if(sentence[i] == ' '){\n            words[j] = word;\n            word = \"\";\n            j++;\n        }\n        else{\n            word += sentence[i];\n        }\n        i++;\n    }\n    words[j] = word;\n    for(int k=0; k<=j; k++){\n        if(words[k].length() == 2 || words[k].length() == 3 || words[k].length() == 5 || words[k].length() == 7){\n            if(result != \"\"){\n                result += \" \";\n            }\n            result += words[k];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int x_num = stoi(x.substr(0, x.find('/')));\n    int x_den = stoi(x.substr(x.find('/') + 1));\n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_den = stoi(n.substr(n.find('/') + 1));\n    if(x_num * n_den == n_num * x_den)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int, int>> points;\n    for(int i = 0; i < nums.size(); i++){\n        int sum = 0;\n        int num = abs(nums[i]);\n        while(num){\n            sum += num % 10;\n            num /= 10;\n        }\n        points.push_back(make_pair(sum, i));\n    }\n    sort(points.begin(), points.end());\n    vector<int> res;\n    for(int i = 0; i < points.size(); i++){\n        res.push_back(nums[points[i].second]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            int first_digit = abs(nums[i]) / 10;\n            int last_digit = abs(nums[i]) % 10;\n            if(first_digit % 2 != 0 && last_digit % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> arr(n+1, 0);\n    for(int i=1; i<=n; i++){\n        arr[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=1; i<n-1; i++){\n        for(int j=i+1; j<n; j++){\n            for(int k=j+1; k<=n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int i1=-1,i2=-1;\n    for(int i=0;i<8;i++){\n        if(planets[i]==planet1) i1=i;\n        if(planets[i]==planet2) i2=i;\n    }\n    if(i1==-1||i2==-1) return result;\n    if(i1>i2){\n        int temp=i1;\n        i1=i2;\n        i2=temp;\n    }\n    for(int i=i1+1;i<i2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].length() % 2 == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n  long long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]>0 && (int)lst[i]%2==1)\n      sum+=pow(lst[i],2);\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i] ));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(auto extension : extensions){\n        int cap = 0, sm = 0;\n        for(auto ch : extension){\n            if(isupper(ch)) cap++;\n            if(islower(ch)) sm++;\n        }\n        int strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int a_len = a.length();\n    int b_len = b.length();\n    if(a_len<b_len)\n        return false;\n    for(int i=0;i<a_len;i++){\n        int j;\n        for(j=0;j<b_len;j++){\n            if(a[(i+j)%a_len] != b[j])\n                break;\n        }\n        if(j==b_len)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    vector<int> result(2,0);\n    num = abs(num);\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            result[0]++;\n        else\n            result[1]++;\n        num /= 10;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            res += roman[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max,x,y,z;\n    x=a*a;\n    y=b*b;\n    z=c*c;\n    if(a>b && a>c){\n        max=a;\n    }\n    else if(b>a && b>c){\n        max=b;\n    }\n    else{\n        max=c;\n    }\n    if(max==a){\n        return (x==(y+z));\n    }\n    else if(max==b){\n        return (y==(x+z));\n    }\n    else{\n        return (z==(x+y));\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(auto word: words){\n        sort(word.begin(), word.end());\n        auto it = unique(word.begin(), word.end());\n        word.resize(distance(word.begin(), it));\n        if(word.size() > max_unique){\n            max_unique = word.size();\n            max_word = it->second;\n        }\n        else if(word.size() == max_unique){\n            max_word = min(max_word, it->second);\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result(2);\n    if(number>need){\n        result[0]=number;\n        result[1]=remaining;\n    }\n    else{\n        result[0]=number+need;\n        if(result[0]>remaining+need){\n            result[1]=0;\n            result[0]-=need;\n        }\n        else{\n            result[1]=remaining+need-result[0];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n  int l = s.length();\n  for(int i=0; i<l; i++){\n    if(islower(s[i])){\n      s[i] = toupper(s[i]);\n    }\n    else if(isupper(s[i])){\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return NULL;\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<16; i++){\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    }\n    return string(md5string);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        int temp=a;\n        a=b;\n        b=temp;\n    }\n    for(int i=a;i<=b;i++){\n        if(i%2==0)\n            result.push_back(i);\n    }\n    return result;\n}\n"}
