{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size()-1; i++){\n        if(fabs(numbers[i] - numbers[i+1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int open_braces = 0;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_braces--;\n            temp += paren_string[i];\n            if(open_braces == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float leftover = number - integer_part;\n    return leftover;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    float mean = 0.0;\n    int n = numbers.size();\n    for(int i=0; i<n; i++){\n        sum += numbers[i];\n    }\n    mean = sum/n;\n    float sq_sum = 0.0;\n    for(int i=0; i<n; i++){\n        sq_sum += pow(numbers[i] - mean, 2);\n    }\n    float std_dev = sqrt(sq_sum/n);\n    return std_dev;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i = 0; i < numbers.size(); i++){\n        printf(\"%d \", numbers[i]);\n        if(i != numbers.size() - 1)\n            printf(\"%d \", delimeter);\n    }\n    return numbers;\n}\n\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int level = 0;\n    int max_level = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            level++;\n            if(level > max_level)\n                max_level = level;\n        }\n        else if(c == ')'){\n            level--;\n        }\n        levels.push_back(level);\n    }\n    return levels;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return make_pair(sum, product);\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\nfunction make_palindrome(s) {\n  let end = s.length - 1;\n  let prefix = s.slice(0, end);\n  let reversed_prefix = prefix.split('').reverse().join('');\n  let palindrome = s + reversed_prefix;\n  return palindrome;\n}\n\nconsole.log(make_palindrome('')); // 'catac'\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('cata')); // 'catac'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()){\n        return \"\";\n    }\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0){\n        return a;\n    }\n    else{\n        return greatest_common_divisor(b, a%b);\n    }\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string sequence = \"\";\n    for(int i=0; i<=n; i++){\n        sequence += to_string(i);\n        if(i<n)\n            sequence += \" \";\n    }\n    return sequence;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0; i<str.length(); i++){\n        if(find(v.begin(), v.end(), str[i]) == v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.length(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beats.push_back(4);\n                break;\n            case 'o':\n                beats.push_back(2);\n                break;\n            case '.':\n                beats.push_back(1);\n                break;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    for(int i = 0; i <= str.length() - substring.length(); i++){\n        if(str.substr(i, substring.length()) == substring){\n            count++;\n            i += substring.length() - 1;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result;\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[result]);\n            result.clear();\n        }\n        else{\n            result += numbers[i];\n        }\n    }\n    result += to_string(num_map[result]);\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    vector<float> result;\n    float min_diff = FLT_MAX;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = numbers[i] - numbers[j];\n            if(diff<min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n            else if(diff==min_diff){\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i]<min)\n            min = numbers[i];\n        if(numbers[i]>max)\n            max = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n  vector<int> result;\n  for(list_any::iterator it = values.begin(); it != values.end(); ++it){\n    if(boost::any_cast<int>(*it) != NULL){\n      result.push_back(boost::any_cast<int>(*it));\n    }\n  }\n  return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    result.push_back(numbers[0]);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; i<str.length(); i++){\n        if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n        else if(str[i] >= 'a' && str[i] <= 'z'){\n            str[i] = str[i] - 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "\n  vector<float> positive_numbers;\n  for(int i=0; i<l.size(); i++){\n    if(l[i]>0){\n      positive_numbers.push_back(l[i]);\n    }\n  }\n  return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    for(long long i = 2; i*i <= n; i++){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double result = 0;\n    for(int i = 0; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    find_zero takes a vector of coefficients of a polynomial and returns the root of the polynomial.\n    The function uses the Newton-Raphson method to find the root of the polynomial.\n    The function returns the root of the polynomial.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x[i])\n    where f(x) is the function of the polynomial and f'(x) is the derivative of the function.\n    The function uses the formula:\n    x[i+1] = x[i] - f(x[i])/f'(x"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0)\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    return lprime;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    res.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n  float max = l[0];\n  for(int i=0; i<l.size(); i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    while(n>0){\n        if(n%11==0 || n%13==0)\n            count++;\n        n--;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> l_prime;\n    for(int i=0; i<l.size(); i++){\n        if(i%2==0)\n            l_prime.push_back(l[i]);\n    }\n    sort(l_prime.begin(), l_prime.end());\n    return l_prime;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n \nfunction decoded_cyclic(encoded_string) {\n \n  // Initialize an empty string to store the decoded string\n  let decoded_string = '';\n \n  // Loop through the encoded string\n  for (let i = 0; i < encoded_string.length; i++) {\n    // If the character is a letter, add it to the decoded string\n    if (encoded_string[i].match(/[a-z]/i)) {\n      decoded_string += String.fromCharCode(\n        (encoded_string[i].charCodeAt() - 97 + 26 - 1) % 26 + 97\n      );\n    } else {\n      // If the character is not a letter, add it to the decoded string as is\n      decoded_string += encoded_string[i];\n    }\n  }\n \n  // Return the decoded string\n  return decoded_string;\n}\n \n// Test the function\nconsole.log(decoded_cyclic('bcd')); // Output: \"fff\"\nconsole.log(decoded_cyclic('efg')); // Output: \"hij\"\nconsole.log(decoded_cyclic('jkl')); // Output: \"mno\"\nconsole.log(decoded_cyclic('pqr')); // Output: \"stu\"\nconsole.log(decoded_cyclic('vwx')); // Output: \"yza\"\nconsole.log(decoded_cyclic('zab')); // Output: \"cde\"\nconsole.log(decoded_cyclic('cde')); // Output: \"vwx\"\nconsole.log(decoded_cyclic('stu')); // Output: \"pqr\"\nconsole.log(decoded_cyclic('mno')); // Output: \"jkl\"\nconsole.log(decoded_cyclic('hij')); // Output: \"efg\"\nconsole.log(decoded_cyclic('fff')); // Output: \"bcd\"\nconsole.log(decoded_cyclic('ghi')); // Output: \"jkl\"\nconsole.log(decoded_cyclic('jkl')); //"}
{"task_id": "CPP/39", "generation": "\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 3;\n    if(n==3)\n        return 5;\n    if(n==4)\n        return 13;\n    if(n==5)\n        return 89;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3)\n        return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        int a = l[i];\n        int start = i+1;\n        int end = n-1;\n        while(start < end){\n            if(a + l[start] + l[end] == 0){\n                return true;\n            }\n            else if(a + l[start] + l[end] < 0){\n                start += 1;\n            }\n            else{\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collide_count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            collide_count++;\n        }\n    }\n    return collide_count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n\n"}
{"task_id": "CPP/43", "generation": "\n    if(l.size()<2)\n        return false;\n    sort(l.begin(), l.end());\n    int left = 0;\n    int right = l.size() - 1;\n    while(left < right){\n        if(l[left] + l[right] == 0){\n            return true;\n        }\n        else if(l[left] + l[right] < 0){\n            left++;\n        }\n        else{\n            right--;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x>0){\n        int digit = x % base;\n        if(digit<10)\n            result = to_string(digit) + result;\n        else\n            result = char(digit+55) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 2;\n    else if(n==3)\n        return 0;\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 != 0)\n        return (float)l[n/2];\n    else\n        return (float)(l[(n-1)/2] + l[n/2])/2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end){\n        if(text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n<p)\n        return n;\n    else\n        return modp(n/p,p);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    int length = s.length();\n    for(int i=0; i<length; i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = ((s[i] - 'A') + 1) % 26 + 'A';\n        }\n        else if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = ((s[i] - 'a') + 1) % 26 + 'a';\n        }\n    }\n    return s;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\nbool _chars(string s0,string s1){\n    string s2=s0+s1;\n    sort(s2.begin(),s2.end());\n    return s2.size()==2*s0.size()+1 && same_chars(s0,s1);\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n<=2)\n        return true;\n    bool inc = true, dec = true;\n    for(int i=1; i<n; i++){\n        if(l[i]<l[i-1])\n            dec = false;\n        if(l[i]>l[i-1])\n            inc = false;\n        if(!inc && !dec)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n            if(l1[i]==l2[j]){\n                result.push_back(l1[i]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    for (i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1; i<xs.size()-1; i++){\n        result.push_back(xs[i-1]*xs[i+1] - xs[i]*xs[i-1]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        int a=0, b=0, c=1, d;\n        for(int i=3; i<=n; i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' || s[i] == 'Y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    for(int i=0; i<shift; i++){\n        str = str.substr(1) + str.substr(0,1);\n    }\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a,o,m;\n    sscanf(s.c_str(),\"%d apples %d oranges\",&a,&o);\n    m = n - a - o;\n    return m;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> result;\n    int smallest_value = INT_MAX;\n    int smallest_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]<smallest_value && arr[i]%2==0){\n            smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n    if(smallest_index != -1)\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    for(int i = lst.size()-1; i >= 0; i--){\n        int count = 0;\n        for(int j = 0; j < lst.size(); j++){\n            if(lst[j] == lst[i])\n                count++;\n        }\n        if(count > i)\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> res;\n    while(!lst.empty()){\n        res.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            res.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a + b > c && a + c > b && b + c > a){\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++)\n        sum+=q[i];\n    if(sum<=w)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int changes = 0;\n    int n = arr.size();\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int count1=0, count2=0;\n    for(int i=0; i<lst1.size(); i++){\n        count1+=lst1[i].size();\n    }\n    for(int i=0; i<lst2.size(); i++){\n        count2+=lst2[i].size();\n    }\n    if(count1<count2){\n        return lst1;\n    }\n    else if(count1>count2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int i, count = 0;\n    for(i=2; i<=a/2; i++){\n        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==0 && a>1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==0)\n        return x>1;\n    if(x==1)\n        return n==1;\n    if(n==1)\n        return x==1;\n    return x==pow(x,n);\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = round(pow(a, (1.0/3.0)));\n    return cubeRoot*cubeRoot*cubeRoot == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i]=='2' || num[i]=='3' || num[i]=='5' || num[i]=='7')\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n}\n\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() < 3)\n        return false;\n    for(int i = 0; i < s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grade > 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grade > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grade > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if(grade > 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grade > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if(grade > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if(grade > 1.7)\n            letter_grades.push_back(\"C\");\n        else if(grade > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if(grade > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if(grade > 0.7)\n            letter_grades.push_back(\"D\");\n        else if(grade > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if(length < 2) return false;\n    for(int i = 2; i * i <= length; i++)\n        if(length % i == 0) return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 10;\n    else\n        return 9*pow(10,n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N % 2;\n        N /= 2;\n    }\n    return to_string(sum);\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    sort(s.begin(), s.end(), [](char a, char b) {\n        return a < b ? true : false;\n    });\n    return s;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/88", "generation": "\n  if(array.size() == 0) return array;\n  sort(array.begin(), array.end());\n  if(array[0] % 2 != 0 && array[array.size()-1] % 2 != 0)\n    reverse(array.begin(), array.end());\n  return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = s[i] + 2;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = s[i] + 2;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2)\n        return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] != lst[i+1])\n            return lst[i+1];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I' && S[i+1] == ' ' && S[i+2] == 'b' && S[i+3] == 'o' && S[i+4] == 'r' && S[i+5] == 'e' && S[i+6] == 'm'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n  if(a==b+c || b==a+c || c==a+b)\n    return true;\n  else\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(islower(message[i])){\n            message[i] = toupper(message[i]);\n        }\n        else if(isupper(message[i])){\n            message[i] = tolower(message[i]);\n        }\n        if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U'){\n            message[i] = message[i] + 2;\n        }\n    }\n    return message;\n}\n\n"}
{"task_id": "CPP/94", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>1){\n            for(int j=2; j*j<=lst[i]; j++){\n                if(lst[i]%j==0)\n                    break;\n                if(j*j>lst[i]){\n                    sum += lst[i];\n                    break;\n                }\n            }\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n    for(auto i:dict){\n        if(i.first != i.second)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool isPrime = true;\n        for(int j = 2; j * j <= i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n"}
{"task_id": "CPP/97", "generation": "\n    int product = a * b;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n  int count = 0;\n  for(int i=0; i<s.length(); i++){\n    if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n      count++;\n    }\n  }\n  return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "\n    int num = atoi(value.c_str());\n    double fractional_part = fabs(modf(num, &num));\n    if(fractional_part < 0.5){\n        return num;\n    }\n    else{\n        if(num > 0){\n            return num;\n        }\n        else{\n            return num - 1;\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0){\n            result.push_back(n+2*i);\n        }\n        else{\n            result.push_back(n+2*i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ',' || s[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y) return -1;\n    int max_num = y;\n    while(x<y){\n        y--;\n        if(y%10==max_num%10) return y;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n  if(n > m) return \"-1\";\n  double avg = (n + m) / 2.0;\n  int rounded_avg = round(avg);\n  string binary = \"\";\n  while(rounded_avg > 0){\n    binary = to_string(rounded_avg % 2) + binary;\n    rounded_avg /= 2;\n  }\n  return \"0b\" + binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num>0){\n            int digit = num%10;\n            if(digit%2==0){\n                result.push_back(digit);\n                break;\n            }\n            num = num/10;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<int> sorted_arr, reversed_arr;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            sorted_arr.push_back(arr[i]);\n            reversed_arr.push_back(arr[i]);\n            result.push_back(num_to_word[arr[i]]);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(reversed_arr.begin(), reversed_arr.end());\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res;\n    for(int i=1; i<=n; i++){\n        if(i%2==0)\n            res.push_back(i);\n        else\n            res.push_back(factorial(i));\n    }\n    return res;\n}\n\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\n\n"}
{"task_id": "CPP/107", "generation": "\n    int even=0, odd=0;\n    for(int i=1; i<=n; i++){\n        string str = to_string(i);\n        int len = str.length();\n        if(len % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        if(str == string(str.rbegin(), str.rend())){\n            if(len % 2 == 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] > 0){\n            count += floor(log10(n[i]) + 1);\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.empty())\n        return true;\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        if(arr[i] > arr[(i+1)%n]){\n            int j = (i+1)%n;\n            while(j != i){\n                if(arr[j] < arr[(j+1)%n]){\n                    break;\n                }\n                j = (j+1)%n;\n            }\n            if(j == i){\n                return false;\n            }\n            else{\n                int temp = arr[i];\n                arr[i] = arr[(i+1)%n];\n                arr[(i+1)%n] = arr[j];\n                arr[j] = temp;\n                return true;\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count = 0;\n    for(int i=0; i<lst1.size(); i++){\n        for(int j=0; j<lst2.size(); j++){\n            if(lst1[i] % 2 == 0 && lst2[j] % 2 != 0){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0; i<test.length(); i++){\n        result[test[i]]++;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "\n    string result=\"\";\n    string palindrome=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==c[0]){\n            result+=s[i];\n            palindrome=s[i]+palindrome;\n        }\n    }\n    string rev=\"\";\n    for(int i=0;i<result.length();i++){\n        rev+=result[result.length()-i-1];\n    }\n    if(result==rev)\n        return {rev,1};\n    else\n        return {rev,0};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j]%2 != 0)\n                count++;\n        }\n        string temp = \"Number of odd elements in string \" + to_string(i+1) + \" input is \" + to_string(count) + \".\";\n        result.push_back(temp);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < nums.size(); i++)\n        sum += nums[i];\n    return sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\nint count_lower_buckets(vector<vector<int>> grid,int capacity){\n    int count = 0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count%capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n-i-1; j++){\n            if((arr[j] & 1) > (arr[j+1] & 1)){\n                swap(arr[j], arr[j+1]);\n            }\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word = \"\";\n    int consonants = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            if(consonants == n){\n                result.push_back(word);\n            }\n            consonants = 0;\n            word = \"\";\n        }\n        else{\n            if(s[i] >= 'a' && s[i] <= 'z' && s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i] != 'A' && s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U'){\n                consonants++;\n                word += s[i];\n            }\n        }\n    }\n    if(consonants == n){\n                result.push_back(word);\n            }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\";\n    bool found = false;\n    for(int i=0; i<word.length(); i++){\n        if(consonants.find(word[i]) != string::npos){\n            for(int j=i+1; j<word.length(); j++){\n                if(vowels.find(word[j]) != string::npos){\n                    result = word[j];\n                    found = true;\n                    break;\n                }\n            }\n            if(found)\n                break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == '(') open++;\n            else if(lst[i][j] == ')') open--;\n            if(open < 0) return \"No\";\n        }\n    }\n    if(open == 0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2==0 && lst[i]%2==1)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i=0;i<k;i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0)\n            collatz.push_back(n);\n        n = n % 2 ? n*3 + 1 : n/2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())\n        return false;\n    stringstream ss(date);\n    string segment;\n    int day, month, year;\n    char sep;\n    if(!(ss >> month >> sep >> day >> sep >> year))\n        return false;\n    if(month < 1 || month > 12 || day < 1 || day > 31)\n        return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day > 30)\n            return false;\n    if(month == 2)\n        if(day > 29)\n            return false;\n    if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))\n        if(day > 29)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] != ' ' && txt[i] != ','){\n            word += txt[i];\n        }\n        else{\n            words.push_back(word);\n            word = \"\";\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n\nint count_lowercase_odd(string txt){\n    int count = 0;\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            if((txt[i] - 'a') % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n  if(lst.size()<2)\n    return true;\n  for(int i=0; i<lst.size()-1; i++){\n    if(lst[i]>lst[i+1])\n      return false;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    else if(start == end)\n        return \"NO\";\n    else{\n        for(int i = start+1; i < end; i++)\n            if(i % 2 == 0)\n                return \"NO\";\n        return \"YES\";\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0)\n        return NULL;\n    int sum = 0;\n    int prod = 1;\n    for(int i=0; i<arr.size(); i++){\n        sum += abs(arr[i]);\n        prod *= (arr[i]>0?1:-1);\n    }\n    return sum*prod;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(grid[i][j] == 1){\n                res.push_back(grid[i][j]);\n                break;\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result(n + 1);\n    result[0] = 1;\n    if(n > 0){\n        result[1] = 3;\n        if(n > 1){\n            result[2] = 2;\n            for(int i = 3; i <= n; i++){\n                if(i % 2 == 0)\n                    result[i] = 1 + i / 2;\n                else\n                    result[i] = result[i - 1] + result[i - 2] + result[i - 3] + 1;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '[') count++;\n        else if(str[i] == ']') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]*lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty()){\n        return false;\n    }\n    char last_char = txt[txt.length()-1];\n    if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z')){\n        return true;\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    if(n==0) return -1;\n    int max_index = -1;\n    for(int i=n-1; i>=0; i--){\n        if(arr[i] >= arr[i+1]){\n            max_index = i;\n            break;\n        }\n    }\n    if(max_index == -1) return -1;\n    for(int i=max_index-1; i>=0; i--){\n        if(arr[i] < arr[max_index]){\n            max_index = i;\n            break;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = -1000000000;\n    int min_pos = 1000000000;\n    int max_pos = -1000000000;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>max_neg){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && lst[i]<min_pos){\n            min_pos = lst[i];\n        }\n        if(lst[i]>0 && lst[i]>max_pos){\n            max_pos = lst[i];\n        }\n    }\n    if(max_neg == -1000000000 || min_pos == 1000000000){\n        return vector<int>(2, NULL);\n    }\n    return vector<int>(2, max_neg, min_pos);\n}\n"}
{"task_id": "CPP/137", "generation": "\n  if(a.type()==b.type()){\n    if(a.type()==typeid(int) || a.type()==typeid(float)){\n      if(a.type()==typeid(float)){\n        float fa=boost::any_cast<float>(a);\n        float fb=boost::any_cast<float>(b);\n        return (fa>fb)?a:b;\n      }\n      else{\n        int fa=boost::any_cast<int>(a);\n        int fb=boost::any_cast<int>(b);\n        return (fa>fb)?a:b;\n      }\n    }\n  }\n  return NULL;\n}\n"}
{"task_id": "CPP/138", "generation": "\n  int sum = 0;\n  for(int i = 1; i <= n; i++){\n    if(i % 2 == 0){\n      sum += i;\n    }\n  }\n  if(sum == n){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i++;\n        }\n    }\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' ' && text[i+2] == ' '){\n            text.replace(i, 1, \"-\");\n            i++;\n        }\n    }\n    return text;\n}\n\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0; i<file_name.length(); i++){\n        if(isdigit(file_name[i])){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    if(file_name.find('.')==string::npos){\n        return \"No\";\n    }\n    string sub_str=file_name.substr(0,file_name.find('.'));\n    if(sub_str.empty() || (sub_str.length()<1 || !isalpha(sub_str[0]))){\n        return \"No\";\n    }\n    string ext=file_name.substr(file_name.find('.')+1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i+1 % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i+1 % 4 == 0)\n            sum += lst[i] * lst[i] * lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            count++;\n        }\n    }\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' ' || i == sentence.length()-1){\n            if(isPrime(count)){\n                result += sentence.substr(i-count, count) + \" \";\n            }\n            count = 0;\n        }\n        else{\n            count++;\n        }\n    }\n    return result;\n}\nbool isPrime(int n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n%i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1, den1, num2, den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n    sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    if(num1 * den2 == num2 * den1)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    // your code here\n    int n = nums.size();\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n-i-1; j++){\n            if(abs(nums[j]) > abs(nums[j+1])){\n                int temp = nums[j];\n                nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n            else if(abs(nums[j]) == abs(nums[j+1])){\n                if(nums[j] > nums[j+1]){\n                    int temp = nums[j];\n                    nums[j] = nums[j+1];\n                    nums[j+1] = temp;\n                }\n            }\n        }\n    }\n    return nums;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(abs(nums[i]) > 10 && (nums[i] > 0 && (nums[i] % 10 == 1 || nums[i] % 10 == 3 || nums[i] % 10 == 5 || nums[i] % 10 == 7 || nums[i] % 10 == 9))){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(a[i] + a[j] + a[k] % 3 == 0) count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int p1,p2;\n    for(int i=0;i<8;i++){\n        if(planets[i]==planet1) p1=i;\n        if(planets[i]==planet2) p2=i;\n    }\n    if(p1==-1 || p2==-1) return {};\n    vector<string> ans;\n    if(p1<p2)\n        for(int i=p1+1;i<p2;i++)\n            ans.push_back(planets[i]);\n    else\n        for(int i=p2+1;i<p1;i++)\n            ans.push_back(planets[i]);\n    return ans;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    //deleting odd length strings\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string &s) { return s.length() % 2 != 0; }), lst.end());\n    //sorting list by length and alphabetically\n    sort(lst.begin(), lst.end(), [](const string &a, const string &b) {\n        if(a.length() == b.length())\n            return a < b;\n        return a.length() < b.length();\n    });\n    return lst;\n}\n\n"}
{"task_id": "CPP/150", "generation": "\n  if(n%2==0)\n    return x;\n  else\n    return y;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0){\n            continue;\n        }\n        else{\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(int i=0;i<extensions.size();i++){\n        int strength = 0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(isupper(extensions[i][j]))\n                strength+=1;\n            else if(islower(extensions[i][j]))\n                strength-=1;\n        }\n        if(strength>max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name+'.'+strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n  if(a.length() != b.length()){\n    return false;\n  }\n  string ab = a + b;\n  for(int i = 0; i < a.length(); i++){\n    string temp = ab.substr(i, a.length());\n    if(temp == b){\n      return true;\n    }\n  }\n  return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    while(num){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    sort(words.begin(), words.end());\n    return words[0];\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(remaining >= need){\n        remaining -= need;\n        result.push_back(remaining + number);\n        result.push_back(need);\n    }\n    else{\n        result.push_back(remaining);\n        result.push_back(0);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i]==\"//\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i]==\"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int n = s.length();\n    for(int i=0; i<n; i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = s[i] + 32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(&mdString[i*2], \"%02x\", digest[i]);\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n  vector<int> result;\n  for(int i=a;i<=b;i++){\n    if(i%2==0){\n      result.push_back(i);\n    }\n  }\n  return result;\n}\n\n"}
