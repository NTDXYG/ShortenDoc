{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(sb.toString());\n                sb.setLength(0);\n            } else if (c == ')') {\n                sb.append(')');\n                if (!stack.isEmpty()) {\n                    result.add(sb.toString());\n                    sb.setLength(0);\n                    sb.append(stack.pop());\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/2", "generation": "\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        if (numbers.size() == 0) {\n            return 0;\n        }\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumDeviation = 0;\n        for (double num : numbers) {\n            sumDeviation += Math.abs(num - mean);\n        }\n        return sumDeviation / numbers.size();\n    }\n\n    \n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        String[] groups = paren_string.split(\"\\\\s+\");\n        List<Integer> result = new ArrayList<>();\n        for (String group : groups) {\n            int max_depth = 0;\n            int current_depth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n                } else if (c == ')') {\n                    current_depth--;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> maxUntilNow = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            maxUntilNow.add(max);\n        }\n        return maxUntilNow;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (string.isEmpty()) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String palindrome = string.substring(0, i);\n        String reverse = new StringBuilder(string.substring(i)).reverse().toString();\n        return palindrome + reverse + palindrome;\n    }\n    \n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((a.charAt(i) == '1' && b.charAt(i) == '1') ? '0' : '1');\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to lower case to ignore case sensitivity\n        string = string.toLowerCase();\n        // Create a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        // Return the size of the set, which represents the number of unique characters\n        return uniqueChars.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/19", "generation": "\n        // Split the string into an array of strings, each representing a number\n        String[] numArray = numbers.split(\" \");\n        \n        // Create a list of integers from the array of strings\n        List<Integer> numList = new ArrayList<>();\n        for (String num : numArray) {\n            switch (num) {\n                case \"zero\":\n                    numList.add(0);\n                    break;\n                case \"one\":\n                    numList.add(1);\n                    break;\n                case \"two\":\n                    numList.add(2);\n                    break;\n                case \"three\":\n                    numList.add(3);\n                    break;\n                case \"four\":\n                    numList.add(4);\n                    break;\n                case \"five\":\n                    numList.add(5);\n                    break;\n                case \"six\":\n                    numList.add(6);\n                    break;\n                case \"seven\":\n                    numList.add(7);\n                    break;\n                case \"eight\":\n                    numList.add(8);\n                    break;\n                case \"nine\":\n                    numList.add(9);\n                    break;\n            }\n        }\n        \n        // Sort the list of integers\n        Collections.sort(numList);\n        \n        // Convert the list of integers back into a list of strings\n        List<String> sortedNumList = new ArrayList<>();\n        for (int num : numList) {\n            switch (num) {\n                case 0:\n                    sortedNumList.add(\"zero\");\n                    break;\n                case 1:\n                    sortedNumList.add(\"one\");\n                    break;\n                case 2:\n                    sortedNumList.add(\"two\");\n                    break;\n                case 3:\n                    sortedNumList.add(\"three\");\n                    break;\n                case 4:\n                    sortedNumList.add(\"four\");\n                    break;\n                case 5:\n                    sortedNumList.add(\"five\");\n                    break;\n                case 6:\n                    sortedNumList.add(\"six\");\n                    break;\n                case 7:\n                    sortedNumList.add(\"seven\");\n                    break;\n                case 8:\n                    sortedNumList.add(\"eight\");\n                    break;\n                case 9:\n                    sortedNumList.add(\"nine\");\n                    break;\n            }\n        }\n        \n        // Join the list of strings into a single string with spaces in between\n        String sortedString = String.join(\" \", sortedNumList);\n        \n        // Return the sorted string\n        return sortedString;\n    }\n}  // class Solution\n\n// Example usage:\n"}
{"task_id": "Java/20", "generation": "\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        // Initialize the minimum difference and the pair of numbers with the minimum difference\n        double minDiff = Double.MAX_VALUE;\n        List<Double> minPair = new ArrayList<>();\n        // Iterate over the list of numbers\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Calculate the difference between the current number and the next number\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            // If the difference is less than the minimum difference, update the minimum difference and the pair of numbers\n            if (diff < minDiff) {\n                minDiff = diff;\n                minPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        // Return the pair of numbers with the minimum difference\n        return minPair;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n\n        return rescaled;\n    }\n\n    \n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    /**\n    Return first character of given string >>> firstChar('abc') 'a'\n     */\n    public char firstChar(String string) {\n        return string.charAt(0);\n    }\n\n    /**\n    Return last character of given string >>> lastChar('abc') 'c'\n     */\n    public char lastChar(String string) {\n        return string.charAt(string.length() - 1);\n    }\n\n    /**\n    Return middle character of given string >>> middleChar('abc') 'b'\n     */\n    public char middleChar(String string) {\n        int length = string.length();\n        if (length % 2 == 0) {\n            return string.charAt(length / 2 - 1);\n        } else {\n            return string.charAt(length / 2);\n        }\n    }\n\n    /**\n    Return whether given string is palindrome or not >>> isPalindrome('abcba') true >>> isPalindrome('abc') false\n     */\n    public boolean isPalindrome(String string) {\n        int length = string.length();\n        for (int i = 0; i < length / 2; i++) {\n            if (string.charAt(i) != string.charAt(length - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n    Return whether given string is empty or not >>> isEmpty('') true >>> isEmpty('abc') false\n     */\n    public boolean isEmpty(String string) {\n        return string.length() == 0;\n    }\n\n    /**\n    Return whether given string is equal to another string or not >>> isEqual('abc', 'abc') true >>> isEqual('abc', 'def') false\n     */\n    public boolean isEqual(String string1, String string2) {\n        return string1.equals(string2);\n    }\n\n    /**\n    Return whether given string is equal to another string ignoring case or not >>> isEqualIgnoreCase('Abc', 'abc') true >>> isEqualIgnoreCase('Abc', 'def') false\n     */\n    public boolean isEqualIgnoreCase(String string1, String string2) {\n        return string1.equalsIgnoreCase(string2);\n    }\n\n    /**\n    Return whether given string starts with another string or not >>> startsWith('abc', 'ab') true >>> startsWith('abc', 'cd') false\n     */\n    public boolean startsWith(String string, String prefix) {\n        return string.startsWith(prefix);\n    }\n\n    /**\n    Return whether given string ends with another string or not >>> endsWith('abc', 'bc') true >>> endsWith\n}"}
{"task_id": "Java/24", "generation": "\n        int divisor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n = n / divisor;\n            }\n            divisor++;\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> seen = new HashSet<>();\n        return numbers.stream()\n                .filter(x -> !seen.add(x))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 == 1) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double a = xs.get(0);\n        double b = xs.get(1);\n        double c = xs.get(2);\n        double d = xs.get(3);\n        double e = xs.get(4);\n        double f = xs.get(5);\n        double g = xs.get(6);\n        double h = xs.get(7);\n        double i = xs.get(8);\n        double j = xs.get(9);\n        double k = xs.get(10);\n        double l = xs.get(11);\n        double m = xs.get(12);\n        double n = xs.get(13);\n        double o = xs.get(14);\n        double p = xs.get(15);\n        double q = xs.get(16);\n        double r = xs.get(17);\n        double s = xs.get(18);\n        double t = xs.get(19);\n        double u = xs.get(20);\n        double v = xs.get(21);\n        double w = xs.get(22);\n        double x = xs.get(23);\n        double y = xs.get(24);\n        double z = xs.get(25);\n        double aa = xs.get(26);\n        double bb = xs.get(27);\n        double cc = xs.get(28);\n        double dd = xs.get(29);\n        double ee = xs.get(30);\n        double ff = xs.get(31);\n        double gg = xs.get(32);\n        double hh = xs.get(33);\n        double ii = xs.get(34);\n        double jj = xs.get(35);\n        double kk = xs.get(36);\n        double ll = xs.get(37);\n        double mm = xs.get(38);\n        double nn = xs.get(39);\n        double oo = xs.get(40);\n        double pp = xs.get(41);\n        double qq = xs.get(42);\n        double rr = xs.get(43);\n        double ss = xs.get(44);\n        double tt = xs.get(45);\n        double uu = xs.get(46);\n        double vv = xs.get(47);\n        double ww = xs.get(48);\n        double xx = xs.get(49);\n        double yy = xs.get(50);\n        double zz = xs.get(51);\n        double aaa = xs.get(52);\n        double bbb = xs"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> l3 = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 == 0) {\n                        l3.add(l.get(j));\n                    }\n                }\n                Collections.sort(l3);\n                l2.set(i, l3.get(0));\n            }\n        }\n        return l2;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n\n    \n}"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> lEven = new ArrayList<>();\n        List<Integer> lOdd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                lEven.add(l.get(i));\n            } else {\n                lOdd.add(l.get(i));\n            }\n        }\n        Collections.sort(lEven);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(lEven.get(i / 2));\n            } else {\n                result.add(lOdd.get(i / 2));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0, b = 1, count = 0;\n        while (count < n) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n            if (isPrime(b)) {\n                count++;\n            }\n        }\n        return b;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Arrays.sort(l.stream().mapToInt(i -> i).toArray());\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        int collision = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i != j) {\n                    collision++;\n                }\n            }\n        }\n        return collision;\n    }\n\n    \n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n    Return list with elements incremented by 1 >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList2(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n\n    /**\n    Return list with elements incremented by 1 >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList3(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            result.add(l.get(i) + 1);\n        }\n        return result;\n    }\n\n    /**\n    Return list with elements incremented by 1 >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList4(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            result.add(l.get(i) + 1);\n        }\n        return result;\n    }\n\n    /**\n    Return list with elements incremented by 1 >>> incr_list([1, 2, 3]) [2, 3, 4] >>> incr_list([5, 3, 5, 2, 3, 3, \n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int[] fib4 = new int[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return fib4[n];\n    }\n}  // class Solution\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Compare the string with its reverse\n        return text.equals(new StringBuilder(text).reverse().toString());\n    }\n\n    \n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) {\n            return 1;\n        }\n        int half = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half) % p;\n        } else {\n            return ((half * half) % p * 2) % p;\n        }\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n}"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack.push('<');\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common = new HashSet<>(set1);\n        common.retainAll(set2);\n        List<Integer> result = new ArrayList<>(common);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                max = Math.max(max, i);\n                n /= i;\n            }\n        }\n        return Math.max(max, n);\n    }\n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push('(');\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n            for (int i = 3; i <= n; i++) {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n            return fibfib[n];\n        }\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n            else if (s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n} \n"}
{"task_id": "Java/65", "generation": "\n        // Convert the integer to a string\n        String str = Integer.toString(x);\n        // Calculate the length of the string\n        int len = str.length();\n        // Calculate the actual shift\n        shift = shift % len;\n        // Shift the string\n        String shifted = str.substring(len - shift) + str.substring(0, len - shift);\n        // Return the result\n        return shifted;\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] words = s.split(\" \");\n        int apples = 0;\n        int oranges = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i + 1]);\n            } else if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i + 1]);\n            }\n        }\n        return n - apples - oranges;\n    }\n}  // class Solution\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return result;\n        }\n        result.add(min);\n        result.add(minIndex);\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > 0) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/70", "generation": "\n        if (lst.size() == 0) {\n            return lst;\n        }\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < sortedList.size()) {\n            result.add(sortedList.get(i));\n            i += 2;\n        }\n        i = 1;\n        while (i < sortedList.size()) {\n            result.add(sortedList.get(i));\n            i += 2;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/71", "generation": "\n        // Check if the three sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal points\n        return Math.round(area * 100) / 100;\n    }\n\n    \n}"}
{"task_id": "Java/72", "generation": "\n        // Check if the list is a palindrome\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Check if the sum of the elements is less than or equal to the maximum possible weight\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        boolean isSumLessThanMaxWeight = sum <= w;\n\n        // Return True if the list is a palindrome and the sum of its elements is less than or equal to the maximum possible weight\n        return isPalindrome && isSumLessThanMaxWeight;\n    }\n} \n"}
{"task_id": "Java/73", "generation": "\n        if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        int n = arr.size();\n        int[] count = new int[10000];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        int half = n / 2;\n        int countChanged = 0;\n        for (int i = 0; i < half; i++) {\n            if (count[i] != count[n - i - 1]) {\n                countChanged += Math.abs(count[i] - count[n - i - 1]);\n            }\n        }\n        return countChanged;\n    }\n\n    \n}"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}  // class Solution\n"}
{"task_id": "Java/75", "generation": "\n        // First, we need to find all prime numbers less than 100\n        boolean[] primes = new boolean[100];\n        Arrays.fill(primes, true);\n        primes[0] = false;\n        primes[1] = false;\n        for (int i = 2; i * i < 100; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n\n        // Then, we need to find all combinations of 3 prime numbers\n        for (int i = 0; i < 100; i++) {\n            if (primes[i]) {\n                for (int j = i + 1; j < 100; j++) {\n                    if (primes[j]) {\n                        for (int k = j + 1; k < 100; k++) {\n                            if (primes[k]) {\n                                // If the product of 3 prime numbers is equal to the given number, return true\n                                if (i * j * k == a) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // If no combination of 3 prime numbers is found, return false\n        return false;\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int i = 2;\n        while (i * i <= x) {\n            if (Math.pow(i, n) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}  // class Solution\n"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int)Math.cbrt(a);\n        return (cubeRoot * cubeRoot * cubeRoot) == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/79", "generation": "\n        // Convert the decimal number to binary and remove the '0b' prefix\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Add the 'db' prefix and suffix to the binary string\n        return \"db\" + binary + \"db\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n} \n"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 2;\n        }\n        int count = 0;\n        for (int i = 1; i < Math.pow(10, n - 1); i++) {\n            String str = String.valueOf(i);\n            if (str.charAt(0) == '1' || str.charAt(str.length() - 1) == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        return result.toString().trim();\n    }\n\n    \n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0).equals(o2.get(0))) {\n                    return o2.get(1).compareTo(o1.get(1));\n                } else {\n                    return o1.get(0).compareTo(o2.get(0));\n                }\n            }\n        });\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                encrypted.append((char) ((c - base + 2) % 26 + base));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != lst.get(i - 1)) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        return Optional.empty();\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.!?]\");\n        int boredom = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredom++;\n            }\n        }\n        return boredom;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return a == b + c || b == a + c || c == a + b;\n    }\n\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char newChar = (char) ((c - base + 2) % 26 + base);\n                encodedMessage.append(newChar);\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                maxPrime = Math.max(maxPrime, lst.get(i));\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (Character.isLowerCase(((String) key).charAt(0))) {\n                allUpper = false;\n            } else if (Character.isUpperCase(((String) key).charAt(0))) {\n                allLower = false;\n            } else {\n                return false;\n            }\n        }\n        return allLower || allUpper;\n    }\n\n    \n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        return unitDigitA * unitDigitB;\n    }\n}  // class Solution\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i)) && \"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        return 0;\n    }\n\n    public int closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        int closest = (int) Math.round(num);\n        if (num - closest == 0.5) {\n            if (num > 0) {\n                closest++;\n            } else {\n                closest--;\n            }\n        }\n        return closest;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int level = 1;\n        while (n > 0) {\n            result.add(n);\n            n = (n % 2 == 0) ? n + 2 : n + 1;\n            level++;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"[,\\\\s]+\");\n        // Convert the array of words into a list\n        List<String> wordList = Arrays.asList(words);\n        // Return the list of words\n        return wordList;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        } else {\n            int max = y;\n            for (int i = y; i >= x; i--) {\n                if (isPrime(i)) {\n                    max = i;\n                    break;\n                }\n            }\n            return max;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i : x) {\n            if (hasUniqueDigits(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasUniqueDigits(int n) {\n        Set<Integer> digits = new HashSet<>();\n        while (n > 0) {\n            int digit = n % 10;\n            if (digits.contains(digit)) {\n                return false;\n            }\n            digits.add(digit);\n            n /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.add(getName(i));\n            }\n        }\n        Collections.sort(result);\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getName(int num) {\n        String[] names = {\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return names[num];\n    }\n\n    \n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int[] arr1 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr1[i] == arr.get((arr.size() - 1 - count) % arr.size())) {\n                count++;\n            }\n        }\n        return count == arr.size();\n    }\n\n    \n}"}
{"task_id": "Java/110", "generation": "\n        // Check if all elements in lst1 are even\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n\n    \n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        for (int value : result.values()) {\n            if (value > max) {\n                max = value;\n            }\n        }\n        Map<String, Integer> result2 = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() == max) {\n                result2.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result2;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        result.add(sb.reverse().toString());\n        result.add(sb.reverse().toString().equals(sb.reverse().toString().reverse()));\n        return result;\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + lst.get(i).length() + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n\n    \n}"}
{"task_id": "Java/115", "generation": "\n        int maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            int water = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    water += 1;\n                }\n            }\n            maxFill += water / capacity;\n        }\n        return maxFill;\n    }\n\n    \n}"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA == countB) {\n                    return a - b;\n                } else {\n                    return countA - countB;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            // If the word has exactly n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        if (word == null || word.length() < 3) {\n            return \"\";\n        }\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int index = word.length() - 1;\n        while (index >= 0) {\n            if (isVowel(word.charAt(index))) {\n                if (index + 1 < word.length() && !isVowel(word.charAt(index + 1))) {\n                    return String.valueOf(word.charAt(index));\n                }\n                if (index - 1 >= 0 && !isVowel(word.charAt(index - 1))) {\n                    return String.valueOf(word.charAt(index));\n                }\n                break;\n            }\n            index--;\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for (char vowel : vowels) {\n            if (c == vowel) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else {\n                close++;\n            }\n        }\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/120", "generation": "\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        // Return the first k elements of the sorted array\n        return arr.subList(0, k);\n    }\n}  // Time complexity: O(n log n) where n is the length of the array. This is because the sort operation takes O(n log n) time. Space complexity: O(n) for the output list. This is because in the worst case, we need to store all elements in the output list. \n\nclass Solution {\n    /**\n    Given array arr integers a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Example 1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Example 2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Example 3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. length of the array will in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Use a priority queue to store the k largest elements\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.offer(num);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        // Return the k largest elements\n        List<Integer> result = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n        return result;\n    }\n}  // Time complexity: O(n log k) where n is the length of the array. This is because we are using a priority queue to store the k largest elements, and the operations on the priority queue take O(log k) time. Space complexity: O(k) for the priority queue. This is because we are storing the k largest elements in the priority queue. \n\nclass Solution {\n    /**\n    Given array arr integers a positive integer k, return a sorted list of length k with the maximum k\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) <= 9 && arr.get(i) >= 1) {\n                sum += arr.get(i);\n            } else if (arr.get(i) <= 99 && arr.get(i) >= 10) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        // Check if the date string is empty\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into month, day, and year\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the day is valid\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/125", "generation": "\n        if(txt.contains(\" \")){\n            return txt.split(\" \");\n        }else if(txt.contains(\",\")){\n            return txt.split(\",\");\n        }else{\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++){\n                if((txt.charAt(i) - 'a') % 2 == 1){\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}  // time complexity O(n) where n is the length of the string, space complexity O(n) for the split function\n"}
{"task_id": "Java/126", "generation": "\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int signProduct = 1;\n        int magnitudeSum = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.empty();\n            }\n            signProduct *= Math.signum(num);\n            magnitudeSum += Math.abs(num);\n        }\n        return Optional.of(signProduct * magnitudeSum);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] visited = new int[rows][cols];\n        int[][] queue = new int[rows][cols];\n        int[] dx = {1, -1, 0, 0};\n        int[] dy = {0, 0, 1, -1};\n        int count = 0;\n        int startRow = 0;\n        int startCol = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    startRow = i;\n                    startCol = j;\n                }\n            }\n        }\n        queue[startRow][startCol] = 1;\n        visited[startRow][startCol] = 1;\n        List<Integer> result = new ArrayList<>();\n        result.add(grid.get(startRow).get(startCol));\n        while (count < k - 1) {\n            int newRow = startRow;\n            int newCol = startCol;\n            int min = Integer.MAX_VALUE;\n            for (int i = 0; i < 4; i++) {\n                int nextRow = newRow + dx[i];\n                int nextCol = newCol + dy[i];\n                if (nextRow >= 0 && nextRow < rows && nextCol >= 0 && nextCol < cols && visited[nextRow][nextCol] == 0) {\n                    if (grid.get(nextRow).get(nextCol) < min) {\n                        min = grid.get(nextRow).get(nextCol);\n                        newRow = nextRow;\n                        newCol = nextCol;\n                    }\n                }\n            }\n            if (min == Integer.MAX_VALUE) {\n                break;\n            }\n            queue[startRow][startCol] = 0;\n            visited[startRow][startCol] = 0;\n            result.add(grid.get(newRow).get(newCol));\n            queue[newRow][newCol] = 1;\n            visited[newRow][newCol] = 1;\n            startRow = newRow;\n            startCol = newCol;\n            count++;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(3);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/134", "generation": "\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        if(lastWord.length() == 0) return false;\n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        if(Character.isLetter(lastChar)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] count = new int[100001];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 1; i <= 100000; i++) {\n            count[i] += count[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            if (count[arr.get(i) - 1] == count[arr.get(i)]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> maxNegative = Optional.empty();\n        Optional<Integer> minPositive = Optional.empty();\n        for (Integer num : lst) {\n            if (num < 0) {\n                maxNegative = Optional.of(maxNegative.orElse(Integer.MIN_VALUE) > num ? num : maxNegative.get());\n            } else if (num > 0) {\n                minPositive = Optional.of(minPositive.orElse(Integer.MAX_VALUE) < num ? num : minPositive.get());\n            }\n        }\n        result.add(maxNegative);\n        result.add(minPositive);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a == (Integer) b) {\n                return Optional.empty();\n            } else {\n                return Optional.of((Integer) a);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a == (Float) b) {\n                return Optional.empty();\n            } else {\n                return Optional.of((Float) a);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            if ((String) a == (String) b) {\n                return Optional.empty();\n            } else {\n                return Optional.of((String) a);\n            }\n        } else if (a instanceof Integer && b instanceof Float) {\n            if ((Integer) a == (Float) b) {\n                return Optional.of((Float) b);\n            } else {\n                return Optional.of((Integer) a);\n            }\n        } else if (a instanceof Integer && b instanceof String) {\n            if (Integer.parseInt((String) b) == (Integer) a) {\n                return Optional.empty();\n            } else {\n                return Optional.of((Integer) a);\n            }\n        } else if (a instanceof Float && b instanceof String) {\n            if (Float.parseFloat((String) b) == (Float) a) {\n                return Optional.empty();\n            } else {\n                return Optional.of((Float) a);\n            }\n        } else if (a instanceof String && b instanceof Integer) {\n            if (Integer.parseInt((String) a) == (Integer) b) {\n                return Optional.empty();\n            } else {\n                return Optional.of((String) a);\n            }\n        } else if (a instanceof String && b instanceof Float) {\n            if (Float.parseFloat((String) a) == (Float) b) {\n                return Optional.empty();\n            } else {\n                return Optional.of((String) a);\n            }\n        } else if (a instanceof Float && b instanceof Integer) {\n            if ((Float) a == (Integer) b) {\n                return Optional.of((Float) a);\n            } else {\n                return Optional.of((Integer) b);\n            }\n        }\n        return Optional.empty();\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 == 0 && n >= 8) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ' ') {\n                    if (sb.length() > 1 && sb.charAt(sb.length() - 2) == ' ') {\n                        sb.append('-');\n                    } else {\n                        sb.append('_');\n                    }\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name contains exactly one dot\n        if (file_name.split(\"\\\\.\").length != 2) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts: the name and the extension\n        String name = file_name.split(\"\\\\.\")[0];\n        String extension = file_name.split(\"\\\\.\")[1];\n        \n        // Check if the name starts with a letter and contains no more than three digits\n        if (!name.matches(\"^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*$\")) {\n            return \"No\";\n        }\n        \n        // Check if the extension is one of the allowed extensions\n        if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n        \n        // If all checks pass, return 'Yes'\n        return \"Yes\";\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/143", "generation": "\n        // split the sentence into words\n        String[] words = sentence.split(\" \");\n        // initialize an empty list to store the words whose lengths are prime numbers\n        List<String> primeWords = new ArrayList<>();\n        // iterate over each word in the words list\n        for (String word : words) {\n            // check if the length of the word is a prime number\n            if (isPrime(word.length())) {\n                // if the length of the word is a prime number, add the word to the primeWords list\n                primeWords.add(word);\n            }\n        }\n        // join the words in the primeWords list into a string with a space in between each word\n        String result = String.join(\" \", primeWords);\n        // return the result\n        return result;\n    }\n\n    // helper function to check if a number is prime\n    public boolean isPrime(int n) {\n        // if the number is less than 2, it is not a prime number\n        if (n < 2) {\n            return false;\n        }\n        // iterate from 2 to the square root of the number\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            // if the number is divisible by any of the numbers in the range, it is not a prime number\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        // if the number is not divisible by any of the numbers in the range, it is a prime number\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Split the input strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Convert the numerator and denominator to integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of the two fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        // Create a list of pairs where the first element of the pair is the sum of the digits of the number and the second element is the number itself\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num = nums.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            pairs.add(new Pair(sum, i, nums.get(i)));\n        }\n\n        // Sort the list of pairs based on the sum of the digits and the index in the original list\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.sum == p2.sum) {\n                    return p1.index - p2.index;\n                } else {\n                    return p1.sum - p2.sum;\n                }\n            }\n        });\n\n        // Create a new list with the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n\n        return sortedNums;\n    }\n\n    private static class Pair {\n        int sum;\n        int index;\n        int num;\n\n        public Pair(int sum, int index, int num) {\n            this.sum = sum;\n            this.index = index;\n            this.num = num;\n        }\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < planets.size(); i++) {\n            if (index1 < i && i < index2) {\n                result.add(planets.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        // First, we filter out the strings with odd lengths from the list\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        // Then, we sort the filtered list first by the length of the strings and then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n        \n        // Finally, we return the sorted list\n        return filteredList;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = 0;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length() - b.length() + 1; i++) {\n            if (a.substring(i, i + b.length()).contains(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/156", "generation": "\n        // Define the mapping of integers to roman numerals\n        Map<Integer, String> romanNumerals = new HashMap<>();\n        romanNumerals.put(1, \"i\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(1000, \"m\");\n\n        // Initialize the result string\n        StringBuilder result = new StringBuilder();\n\n        // Iterate over the roman numerals in descending order\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            // While the number is greater than or equal to the current roman numeral\n            while (number >= entry.getKey()) {\n                // Subtract the current roman numeral from the number\n                number -= entry.getKey();\n                // Append the current roman numeral to the result string\n                result.append(entry.getValue());\n            }\n        }\n\n        // Return the result string in lowercase\n        return result.toString().toLowerCase();\n    }\n}"}
{"task_id": "Java/157", "generation": "\n        // Check if the input is valid\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        // Check if the sum of the lengths of any two sides is greater than the length of the third side\n        if (a + b > c && a + c > b && b + c > a) {\n            // Check if the square of the length of the longest side is equal to the sum of the squares of the lengths of the other two sides\n            if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2) || Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2) || Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/158", "generation": "\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > maxCount) {\n                maxCount = set.size();\n                max = word;\n            } else if (set.size() == maxCount && word.compareTo(max) < 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + need;\n        int left = remaining - (total - number);\n        return Arrays.asList(total, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (operator.get(i).equals(\"//\")) {\n                result = result / operand.get(i + 1);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md5.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"}
