{"task_id": "Java/0", "generation": "\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n\n        Collections.sort(numbers);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int open = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                open--;\n            }\n            sb.append(c);\n            if (open == 0) {\n                result.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n}\n\n"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        for(double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double temp = 0.0;\n        for(double num : numbers) {\n            temp += Math.abs(num - mean);\n        }\n        return temp / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int maxLevel = 0;\n            int currentLevel = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentLevel++;\n                    maxLevel = Math.max(maxLevel, currentLevel);\n                } else if (c == ')') {\n                    currentLevel--;\n                }\n            }\n            levels.add(maxLevel);\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        result.add(max);\n        for(int i = 1; i < numbers.size(); i++) {\n            if(numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        String rev = new StringBuilder(string).reverse().toString();\n        String lps = longest_palindromic_suffix(string + \"#\" + rev);\n        return string + new StringBuilder(string.substring(0, lps.length())).reverse().toString();\n    }\n\n    private int longest_palindromic_suffix(String s) {\n        int[] lps = new int[s.length()];\n        int index = 0;\n        for (int i = 1; i < s.length(); i++) {\n            while (index != 0 && s.charAt(index) != s.charAt(i)) {\n                index = lps[index - 1];\n            }\n            if (s.charAt(index) == s.charAt(i)) {\n                lps[i] = index + 1;\n                index++;\n            } else {\n                lps[i] = 0;\n            }\n        }\n        return lps[s.length() - 1];\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n\n        for (String string : strings) {\n            if (string.length() > longestString.length()) {\n                longestString = string;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i <= n; i++) {\n            sb.append(i);\n            if(i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n}\n\n"}
{"task_id": "Java/17", "generation": "\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int substringLength = substring.length();\n        for (int i = 0; i <= string.length() - substringLength; i++) {\n            String sub = string.substring(i, i + substringLength);\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] numberWords = numbers.split(\" \");\n        String[] numberNames = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        int[] numberValues = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        String[] sortedNumbers = new String[numberWords.length];\n\n        for (int i = 0; i < numberWords.length; i++) {\n            for (int j = 0; j < numberNames.length; j++) {\n                if (numberWords[i].equals(numberNames[j])) {\n                    sortedNumbers[i] = numberNames[j];\n                    break;\n                }\n            }\n        }\n\n        Arrays.sort(sortedNumbers);\n\n        StringBuilder result = new StringBuilder();\n        for (String number : sortedNumbers) {\n            result.append(number).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / range);\n        }\n\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/24", "generation": "\n        for(int i = n - 1; i > 0; i--) {\n            if(n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        return numbers.stream()\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n                .entrySet()\n                .stream()\n                .filter(e -> e.getValue() > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() == 0) {\n            return Double.NaN;\n        }\n        if (xs.size() == 1) {\n            return -xs.get(0) / xs.get(0);\n        }\n        if (xs.size() % 2 != 0) {\n            return Double.NaN;\n        }\n        double maxCoefficient = Collections.max(xs);\n        if (maxCoefficient <= 0) {\n            return Double.NaN;\n        }\n        List<Double> coefficients = new ArrayList<>(xs);\n        coefficients.remove(Collections.max(coefficients));\n        double a = poly(coefficients, 0);\n        double b = poly(coefficients, maxCoefficient);\n        double c = maxCoefficient * maxCoefficient * maxCoefficient;\n        return -b / (2 * a);\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        if(l == null || l.size() == 0) {\n            throw new IllegalArgumentException(\"List is empty\");\n        }\n\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += Integer.toString(i).length();\n            } else {\n                count += Integer.toString(i).replace(\"7\", \"\").length();\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 1; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n        for (int i = 1, j = 0; i < l.size(); i += 2, j++) {\n            l.set(i, evenIndices.get(j));\n        }\n        return l;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycling in each group.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int i = 1;\n        int j = 1;\n        int fib = 1;\n        int prime = 2;\n        while (count < n) {\n            fib = i + j;\n            i = j;\n            j = fib;\n            if (isPrime(fib)) {\n                count++;\n            }\n            if (count == n) {\n                return fib;\n            }\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                int complement = -(l.get(i) + l.get(j));\n                if (s.contains(complement)) {\n                    return true;\n                }\n                s.add(l.get(i));\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        int totalCollisions = 0;\n        for(int i = 0; i < n; i++) {\n            totalCollisions += (n - i) * (i + 1);\n        }\n        return totalCollisions;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            } else {\n                set.add(i);\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        if (x < base) {\n            return String.valueOf(x);\n        } else {\n            return changeBase(x / base, base) + String.valueOf(x % base);\n        }\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 2;\n        if(n == 3) return 0;\n\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for(int i = 4; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        double median;\n        int size = l.size();\n        if (size % 2 == 0) {\n            median = ((double)l.get(size / 2) + (double)l.get(size / 2 - 1)) / 2;\n        } else {\n            median = (double) l.get(size / 2);\n        }\n        return median;\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        return (int) Math.pow(2, n) % p;\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        if (text.isEmpty()) {\n            return text;\n        }\n\n        StringBuilder result = new StringBuilder();\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n}\n\n"}
{"task_id": "Java/54", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!set.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if(n<=0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\");\n        }\n        if(n==1) {\n            return 0;\n        }\n        if(n==2) {\n            return 1;\n        }\n        int fib1 = 0;\n        int fib2 = 1;\n        int fib3 = 1;\n        for(int i=3; i<=n; i++) {\n            fib3 = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib3;\n        }\n        return fib3;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push('<');\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        boolean increasing = l.get(1) > l.get(0);\n        for (int i = 2; i < l.size(); i++) {\n            if (increasing && l.get(i) < l.get(i - 1)) {\n                return false;\n            }\n            if (!increasing && l.get(i) > l.get(i - 1)) {\n                return false;\n            }\n            increasing = l.get(i) > l.get(i - 1);\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> common = new ArrayList<>(set1);\n        Collections.sort(common);\n        return common;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int max = -1;\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n /= i;\n            }\n        }\n        if (n > 2)\n            max = n;\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i < xs.size(); i++) {\n            result.add(xs.size() - i);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        return fibfib[n];\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String lowerCaseS = s.toLowerCase();\n        for (int i = 0; i < lowerCaseS.length(); i++) {\n            char c = lowerCaseS.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            if (c == 'y' && i == lowerCaseS.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        if (shift >= str.length()) {\n            return str;\n        }\n        return str.substring(str.length() - shift) + str.substring(0, str.length() - shift);\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        int oranges = Integer.parseInt(parts[1].split(\" \")[0]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) <= smallestEven) {\n                smallestEven = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestEven != Integer.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            if (freqMap.get(lst.get(i)) > lst.get(i)) {\n                return lst.get(i);\n            }\n        }\n\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        if(lst.size() == 0) {\n            return lst;\n        }\n        \n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        \n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                even.add(lst.get(i));\n            } else {\n                odd.add(lst.get(i));\n            }\n        }\n        \n        Collections.sort(odd);\n        Collections.sort(even, Collections.reverseOrder());\n        \n        List<Integer> result = new ArrayList<>();\n        while(!odd.isEmpty() && !even.isEmpty()) {\n            result.add(odd.remove(0));\n            result.add(even.remove(0));\n        }\n        \n        result.addAll(odd);\n        result.addAll(even);\n        \n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // If the three sides do not form a valid triangle, return -1\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for(int i: q) {\n            sum += i;\n        }\n        if(sum > w) {\n            return false;\n        }\n        int left = 0;\n        int right = q.size() - 1;\n        while(left < right) {\n            if(q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                changes++;\n            }\n            i++;\n            j--;\n        }\n\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 3) {\n            return false;\n        }\n        if (a % 2 == 0 || a % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= a; i += 6) {\n            if (a % i == 0 || a % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(x); i++) {\n            double result = Math.pow(i, n);\n            if (result == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        if(a < 0) {\n            a = -a;\n        }\n        int c = (int)Math.round(Math.cbrt(a));\n        return c*c*c == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isPrime(char c) {\n        switch (c) {\n            case '2':\n            case '3':\n            case '5':\n            case '7':\n                return true;\n            case 'B':\n            case 'D':\n            case 'F':\n                return true;\n            default:\n                return false;\n        }\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade == 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade == 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade == 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade == 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade == 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade == 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade == 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade == 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade == 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade == 0.7) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"D-\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        if(string.length() == 0) {\n            return false;\n        }\n        int length = string.length();\n        for(int i = 2; i <= Math.sqrt(length); i++) {\n            if(length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 10;\n        }\n        int res = 0;\n        for (int i = 1; i < 10; i++) {\n            res += count(n - 1, i);\n        }\n        return res;\n    }\n\n    private int count(int n, int end) {\n        if (n == 1) {\n            return 10 - end;\n        }\n        int res = 0;\n        for (int i = 0; i < end; i++) {\n            res += count(n - 1, i);\n        }\n        return res;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while(N > 0){\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) == o2.get(0)) {\n                    return o2.get(1) - o1.get(1);\n                } else {\n                    return o1.get(0) - o2.get(0);\n                }\n            }\n        });\n        return res;\n    }\n}\n\n// Test cases\n"}
{"task_id": "Java/88", "generation": "\n        if (array.isEmpty()) {\n            return array;\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n\n        if (sum % 2 != 0) {\n            Collections.reverse(array);\n        }\n\n        Collections.sort(array);\n\n        return array;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                encrypted.append((char) (((int) c - 65 + 2) % 26 + 65));\n            } else if (Character.isLowerCase(c)) {\n                encrypted.append((char) (((int) c - 97 + 2) % 26 + 97));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int first = lst.get(0);\n        int second = lst.get(1);\n\n        if (first > second) {\n            return Optional.of(second);\n        }\n\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                return Optional.of(lst.get(i));\n            }\n            first = second;\n            second = lst.get(i);\n        }\n\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return x.equals(y + z) || y.equals(x + z) || z.equals(x + y);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    if (c == 'a') {\n                        result.append('c');\n                    } else if (c == 'e') {\n                        result.append('g');\n                    } else if (c == 'i') {\n                        result.append('k');\n                    } else if (c == 'o') {\n                        result.append('q');\n                    } else if (c == 'u') {\n                        result.append('w');\n                    } else {\n                        result.append((char) (c + 2));\n                    }\n                } else {\n                    if (c == 'A') {\n                        result.append('C');\n                    } else if (c == 'E') {\n                        result.append('G');\n                    } else if (c == 'I') {\n                        result.append('K');\n                    } else if (c == 'O') {\n                        result.append('Q');\n                    } else if (c == 'U') {\n                        result.append('W');\n                    } else {\n                        result.append((char) (c + 2));\n                    }\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for(int i: lst){\n            if(isPrime(i) && i > maxPrime){\n                maxPrime = i;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        if(dict.isEmpty()){\n            return false;\n        }\n        boolean allUpper = true;\n        boolean allLower = true;\n        for(String key: dict.keySet()){\n            if(!key.equals(key.toUpperCase()) || !key.equals(key.toLowerCase())){\n                allUpper = false;\n            }\n            if(!(key instanceof String)){\n                allLower = false;\n            }\n            if(!allUpper && !allLower){\n                return false;\n            }\n        }\n        return allUpper || allLower;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = 1;\n        while(a != 0 || b != 0){\n            if(a % 10 != 0){\n                product *= a % 10;\n            }\n            a /= 10;\n            if(b % 10 != 0){\n                product *= b % 10;\n            }\n            b /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        int num = Integer.parseInt(value);\n        for (int i = 0; i <= num; i++) {\n            count++;\n        }\n        return count;\n    }\n\n    public int closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        if (num > 0) {\n            return countUpper(String.valueOf(num));\n        } else {\n            return countUpper(String.valueOf(num * -1));\n        }\n    }\n}\n\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            if(n % 2 == 0) {\n                result.add(n + 2*i);\n            } else {\n                result.add(n + 2*i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<String>();\n        String[] splitWords = s.split(\"\\\\s*[,]\\\\s*\");\n        for (String word : splitWords) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        return y;\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return \"0b\" + Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int num : x) {\n            if(!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while(num > 0) {\n            if((num % 10) % 2 == 0) {\n                return true;\n            }\n            num = num / 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> sorted = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                sorted.add(num);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        for (int num : sorted) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (str.equals(new StringBuilder(str).reverse().toString())) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int inversions = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                if(arr.get(i) > arr.get(j)) inversions++;\n            }\n        }\n        return inversions <= 1;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        if (count % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder(s);\n        for (char ch : c.toCharArray()) {\n            sb.delete(sb.indexOf(String.valueOf(ch)), sb.length());\n        }\n        String result = sb.toString();\n        boolean isPalindrome = result.equals(new StringBuilder(result).reverse().toString());\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                int num = Character.getNumericValue(c);\n                if (num % 2 != 0) {\n                    count++;\n                }\n            }\n            String res = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(res);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            currentSum = Math.min(currentSum, 0);\n        }\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid.get(i).get(j) == 1){\n                    count++;\n                    grid.get(i).set(j, 0);\n                }\n            }\n        }\n        return count/capacity;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        // Sort the array first by the number of ones in the binary representation\n        arr.sort((a, b) -> {\n            int x = Integer.bitCount(a);\n            int y = Integer.bitCount(b);\n            return Integer.compare(x, y);\n        });\n\n        // Then sort the array by the decimal value\n        arr.sort(Integer::compareTo);\n\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder(word);\n        for (int i = sb.length() - 1; i > 0; i--) {\n            char c = sb.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(sb.charAt(j)) != -1) {\n                        return String.valueOf(sb.charAt(i));\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String str = String.join(\"\", lst);\n        Stack<Character> stack = new Stack<>();\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for(int num : arr) {\n            maxHeap.add(num);\n            if(maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        while(!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i += 2) {\n            if(lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[3]);\n\n        if (month < 1 || month > 12 || day < 1 || year < 1) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month % 2 == 0) {\n            if (day > 30) {\n                return false;\n            }\n        } else {\n            if (day > 31) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if (txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) == lst.get(i + 1)) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            } else if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start;\n\n        if (length < 1) {\n            return \"NO\";\n        }\n\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if(arr.isEmpty()){\n            return Optional.empty();\n        }\n        int product = 1;\n        int sum = 0;\n        for(int num : arr){\n            product *= num;\n            sum += Math.abs(num);\n        }\n        return Optional.of(product * sum);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> dp[a[0]][a[1]] - dp[b[0]][b[1]]);\n        boolean[][] visited = new boolean[n][n];\n        pq.offer(new int[]{0, 0});\n        visited[0][0] = true;\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            if (dp[cur[0]][cur[1]] == k) {\n                List<Integer> res = new ArrayList<>();\n                int temp = k;\n                while (temp-- > 0) {\n                    res.add(grid[cur[0]][cur[1]]);\n                    int dx = cur[0] + dir[grid[cur[0]][cur[1]] - 1][0];\n                    int dy = cur[1] + dir[grid[cur[0]][cur[1]] - 1][1];\n                    if (dx >= 0 && dy >= 0 && dx < n && dy < n && !visited[dx][dy]) {\n                        pq.offer(new int[]{dx, dy});\n                        visited[dx][dy] = true;\n                    } else {\n                        break;\n                    }\n                    cur[0] = dx;\n                    cur[1] = dy;\n                }\n                Collections.reverse(res);\n                return res;\n            }\n            for (int i = 0; i < 4; i++) {\n                int dx = cur[0] + dir[i][0];\n                int dy = cur[1] + dir[i][1];\n                if (dx >= 0 && dy >= 0"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(0);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(0);\n            result.add(3);\n            result.add(2);\n            result.add(8);\n            return result;\n        }\n        result.add(0);\n        result.add(3);\n        result.add(2);\n        result.add(8);\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for(Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if(txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        if(n < 2) return -1;\n        int[] count = new int[10000];\n        for(int num : arr) {\n            count[num]++;\n        }\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) > 1) {\n                if(count[arr.get(i) - 1] > 0) {\n                    count[arr.get(i) - 1]--;\n                    count[arr.get(i)]--;\n                    if(count[arr.get(i) - 2] > 0) {\n                        count[arr.get(i) - 2]--;\n                        return arr.indexOf(arr.get(i) - 1);\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max_neg = Integer.MIN_VALUE;\n        int min_pos = Integer.MAX_VALUE;\n        for(int num : lst){\n            if(num < 0 && num > max_neg)\n                max_neg = num;\n            if(num > 0 && num < min_pos)\n                min_pos = num;\n        }\n        if(max_neg == Integer.MIN_VALUE)\n            result.add(Optional.empty());\n        else\n            result.add(Optional.of(max_neg));\n        if(min_pos == Integer.MAX_VALUE)\n            result.add(Optional.empty());\n        else\n            result.add(Optional.of(min_pos));\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Number && b instanceof Number) {\n            if (((Number) a).doubleValue() == ((Number) b).doubleValue()) {\n                return Optional.empty();\n            } else {\n                return (((Number) a).doubleValue() > ((Number) b).doubleValue()) ? Optional.of((Number) a) : Optional.of((Number) b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            try {\n                double a1 = Double.parseDouble(((String) a).replace(\",\", \"\"));\n                double b1 = Double.parseDouble(((String) b).replace(\",\", \"\"));\n                return (a1 == b1) ? Optional.empty() : (a1 > b1) ? Optional.of(a1) : Optional.of(b1);\n            } catch (Exception e) {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if(n % 2 != 0) {\n            return false;\n        }\n        int count = 0;\n        for(int i = 2; i <= n; i += 2) {\n            if(n - i == 0) {\n                count++;\n            }\n        }\n        return count > 0;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for(int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        if(n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}\n\n"}
{"task_id": "Java/140", "generation": "\n        String[] words = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (word.length() > 2) {\n                result.append(word.replaceAll(\" +\", \"-\"));\n            } else {\n                result.append(word);\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        String[] splitName = file_name.split(\"\\\\.\");\n        if (splitName.length != 2) {\n            return \"No\";\n        }\n        String name = splitName[0];\n        if (name.length() > 3) {\n            return \"No\";\n        }\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        for (int i = 1; i < name.length(); i++) {\n            if (!Character.isLetter(name.charAt(i)) && !Character.isDigit(name.charAt(i))) {\n                return \"No\";\n            }\n        }\n        if (Arrays.asList(\"txt\", \"exe\", \"dll\").contains(splitName[1])) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        int gcd = gcd(xDenominator, nDenominator);\n\n        int newNumerator = xNumerator * nNumerator / gcd;\n        int newDenominator = xDenominator * nDenominator / gcd;\n\n        return newDenominator == newNumerator;\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        if (nums == null || nums.size() == 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        List<Integer> indexedNums = new ArrayList<>();\n\n        for (int i = 0; i < nums.size(); i++) {\n            indexedNums.add(nums.get(i));\n            indexedNums.add(i);\n        }\n\n        Collections.sort(indexedNums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n\n                if (sumA == sumB) {\n                    return a.compareTo(b);\n                }\n\n                return sumA - sumB;\n            }\n        });\n\n        for (int i = 0; i < indexedNums.size(); i += 2) {\n            result.add(indexedNums.get(i + 1));\n        }\n\n        return result;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for(int num : nums) {\n            if(num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                int firstDigit = num / 100000000;\n                int lastDigit = num % 10;\n                if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = -1, index2 = -1;\n\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\n        if (index1 < index2) {\n            for (int i = index1 + 1; i < index2; i++) {\n                result.add(planets[i]);\n            }\n        } else {\n            for (int i = index2 + 1; i < index1; i++) {\n                result.add(planets[i]);\n            }\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        // filter out the strings with odd length\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n\n        // sort the list by length and then alphabetically\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n >= 0 && n % 2 != 0) {\n                    sum += n * n;\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        String strongest = \"\";\n        int max_strength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0, SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length())\n            return false;\n\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated))\n                return true;\n        }\n\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        List<Integer> counts = new ArrayList<>();\n        int even = 0, odd = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        counts.add(even);\n        counts.add(odd);\n        return counts;\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {\n            return true;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            int uniqueChars = (int) word.chars().distinct().count();\n            if (uniqueChars > maxUniqueChars) {\n                maxUniqueChars = uniqueChars;\n                maxWord = word;\n            } else if (uniqueChars == maxUniqueChars) {\n                maxWord = maxWord.compareTo(word) < 0 ? word : maxWord;\n            }\n        }\n\n        return maxWord;\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(remaining >= need) {\n            number += need;\n            remaining -= need;\n        } else {\n            number += remaining;\n            remaining = 0;\n        }\n        result.add(number);\n        result.add(remaining);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"//\":\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if(text.isEmpty()){\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            result.add(i);\n        }\n        if(a > b) {\n            Collections.reverse(result);\n        }\n        return result;\n    }\n}\n\n"}
