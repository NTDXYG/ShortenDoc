{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '('){\n            balance++;\n        }else if(c == ')'){\n            balance--;\n        }\n        current_group += c;\n        if(balance == 0){\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part;\n    integer_part = floor(number);\n    float decimal_part;\n    decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad /= numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(c == ')'){\n            current_depth--;\n        }else if(c == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n                max_depth = 0;\n            }\n            current_depth = 0;\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0, product=1;\n    for(int i=0; i<numbers.size(); i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    vector<int> result;\n    result.push_back(sum);\n    result.push_back(product);\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> max_list;\n    int max_so_far = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        max_list.push_back(max_so_far);\n    }\n    return max_list;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction makePalindrome(s) {\n  if (s.length === 0) return s;\n  let reverse = s.split('').reverse().join('');\n  for (let i = 0; i < s.length; i++) {\n    if (s.substring(i) === reverse.substring(0, s.length - i)) {\n      return s + reverse.substring(s.length - i);\n    }\n  }\n}\nconsole.log(makePalindrome('')); // ''\nconsole.log(makePalindrome('cat')); // 'catac'\nconsole.log(makePalindrome('cata')); // 'catac'\nconsole.log(makePalindrome('race')); // 'racecar'\nconsole.log(makePalindrome('red')); // 'redder'\nconsole.log(makePalindrome('green')); // 'greenneerg'\nconsole.log(makePalindrome('blue')); // 'blueulb'\nconsole.log(makePalindrome('yellow')); // 'yellowoyellow'\nconsole.log(makePalindrome('black')); // 'blackcab'\nconsole.log(makePalindrome('white')); // 'whitecaw'\nconsole.log(makePalindrome('purple')); // 'purplepurple'\nconsole.log(makePalindrome('orange')); // 'orangegenaro'\nconsole.log(makePalindrome('pink')); // 'pinknik'\nconsole.log(makePalindrome('brown')); // 'brownnorb'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log(makePalindrome('gray')); // 'grayyag'\nconsole.log("}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return NULL;\n    string longest_str = strings[0];\n    for(int i=1;i<strings.size();i++){\n        if(strings[i].length() > longest_str.length()) longest_str = strings[i];\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0, i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 0; i <= n; i++){\n        result += to_string(i);\n        if(i < n){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        str[i]=tolower(str[i]);\n        if(find(v.begin(),v.end(),str[i])==v.end())\n            v.push_back(str[i]);\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.length(); i++){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(4);\n            }\n        }\n        else if(music_string[i] == '.'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(1);\n                i++;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0,j=0;\n    while(i<str.length()){\n        if(str[i]==substring[j]){\n            j++;\n            if(j==substring.length()){\n                count++;\n                j=0;\n            }\n        }\n        else{\n            i-=j;\n            j=0;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> m;\n    m[\"zero\"] = 0;\n    m[\"one\"] = 1;\n    m[\"two\"] = 2;\n    m[\"three\"] = 3;\n    m[\"four\"] = 4;\n    m[\"five\"] = 5;\n    m[\"six\"] = 6;\n    m[\"seven\"] = 7;\n    m[\"eight\"] = 8;\n    m[\"nine\"] = 9;\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(m[temp]) + \" \";\n            temp = \"\";\n        }\n        else{\n            temp += numbers[i];\n        }\n    }\n    result += to_string(m[temp]);\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    float a, b;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                a = numbers[i];\n                b = numbers[j];\n            }\n        }\n    }\n    if(a > b){\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    vector<float> result;\n    result.push_back(a);\n    result.push_back(b);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    vector<float> result;\n    for(int i = 0; i < numbers.size(); i++){\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;str[i]!='\\0';i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>0;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i*i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(count(result.begin(), result.end(), numbers[i])==0){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n==1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double a = xs[0];\n    double b = xs[1];\n    double c = xs[2];\n    double d = xs[3];\n    double e = xs[4];\n    double f = xs[5];\n    double g = xs[6];\n    double h = xs[7];\n    double i = xs[8];\n    double j = xs[9];\n    double k = xs[10];\n    double l = xs[11];\n    double m = xs[12];\n    double n = xs[13];\n    double o = xs[14];\n    double p = xs[15];\n    double q = xs[16];\n    double r = xs[17];\n    double s = xs[18];\n    double t = xs[19];\n    double u = xs[20];\n    double v = xs[21];\n    double w = xs[22];\n    double x = xs[23];\n    double y = xs[24];\n    double z = xs[25];\n    double aa = xs[26];\n    double ab = xs[27];\n    double ac = xs[28];\n    double ad = xs[29];\n    double ae = xs[30];\n    double af = xs[31];\n    double ag = xs[32];\n    double ah = xs[33];\n    double ai = xs[34];\n    double aj = xs[35];\n    double ak = xs[36];\n    double al = xs[37];\n    double am = xs[38];\n    double an = xs[39];\n    double ao = xs[40];\n    double ap = xs[41];\n    double aq = xs[42];\n    double ar = xs[43];\n    double as"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l_prime;\n    vector<int> l_third;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_third.push_back(l[i]);\n        }\n    }\n    sort(l_third.begin(),l_third.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_prime.push_back(l_third[j]);\n            j++;\n        }\n        else{\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0; i<l.size(); i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0, j=0; i<l.size(); i+=2, j++){\n        l[i] = even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decode_cyclic(str) {\n    let decoded = '';\n    for (let i = 0; i < str.length; i++) {\n        let charCode = str.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) { // uppercase\n            decoded += String.fromCharCode((charCode - 65 - 3 + 26) % 26 + 65);\n        } else if (charCode >= 97 && charCode <= 122) { // lowercase\n            decoded += String.fromCharCode((charCode - 97 - 3 + 26) % 26 + 97);\n        } else {\n            decoded += str.charAt(i);\n        }\n    }\n    return decoded;\n}\n\nconsole.log(decode_cyclic(\"Khoor Zruog!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Mjqqt Btwqi!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Rfcqy Hwnlj!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Uifdpx Kxvmh!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Vgxhwz Ldymi!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Wihyxi Mevnj!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Xjizyj Nfwoo!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Ykpkzk Ogxnp!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Zlqmlo Phyqo!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Amkzpv Qlztr!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Bnloqw Rmamu!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Cnmpxg Snobv!\")); // \"Hello World!\"\nconsole.log(decode_cyclic(\"Dqnqyh Tpocw!\")); //"}
{"task_id": "CPP/39", "generation": "\n    int count=0;\n    int i=2;\n    int j=1;\n    int fib=0;\n    while(count<n){\n        fib=i+j;\n        i=j;\n        j=fib;\n        int k=2;\n        while(k<fib){\n            if(fib%k==0){\n                break;\n            }\n            k++;\n        }\n        if(k==fib){\n            count++;\n        }\n    }\n    return fib;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            for(int k=j+1;k<l.size();k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result=\"\";\n    while(x>0){\n        result=(char)(x%base+'0')+result;\n        x/=base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0||n==1||n==3) return 0;\n    if(n==2) return 2;\n    int a=0,b=0,c=2,d=0,e;\n    for(int i=4;i<=n;i++){\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 != 0)\n        return (float)l[n / 2];\n    return (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    int base=2;\n    while(n>0){\n        if(n%2==1){\n            res=(res*base)%p;\n        }\n        base=(base*base)%p;\n        n=n/2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += char(int(s[i] - 97 - 3 + 26) % 26 + 97);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += char(int(s[i] - 65 - 3 + 26) % 26 + 65);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&vowels](char c){ return vowels.find(c) != string::npos; }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc=true, dec=true;\n    for(int i=1; i<l.size(); i++){\n        if(l[i]>l[i-1]) dec=false;\n        if(l[i]<l[i-1]) inc=false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    sort(result.begin(),result.end());\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return n+sum_to_n(n-1);\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> derivative;\n    for(int i=1;i<xs.size();i++){\n        derivative.push_back(xs[i]*i);\n    }\n    return derivative;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0||n==1) return 0;\n    if(n==2) return 1;\n    int a=0,b=0,c=1,d;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y'||s[s.length()-1]=='Y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int n=s.length();\n    shift=shift%n;\n    if(shift==0) return s;\n    string res=s.substr(n-shift)+s.substr(0,n-shift);\n    return res;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n  int apples,oranges;\n  sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n  return n-apples-oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min_even = 10001;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_even){\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1){\n        return {};\n    }\n    return {min_even, index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j]) count++;\n        }\n        if(count>=lst[i] && lst[i]>max) max=lst[i];\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    while(!lst.empty()){\n        res.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()) res.push_back(lst.back());\n        lst.pop_back();\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(a+b>c && a+c>b && b+c>a){\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w) return false;\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-i-1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    for(int i=0;i<arr.size()/2;i++){\n        if(arr[i]!=arr[arr.size()-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst1[i].size();j++){\n            sum1+=lst1[i][j];\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        for(int j=0;j<lst2[i].size();j++){\n            sum2+=lst2[i][j];\n        }\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count=0;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            count++;\n            break;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    if(n==1)\n        return x==1;\n    double y=log(x)/log(n);\n    return floor(y)==y;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=round(pow(abs(a),1.0/3.0));\n    return b*b*b==abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.size();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"db\";\n    while(decimal>0){\n        binary=to_string(decimal%2)+binary;\n        decimal/=2;\n    }\n    binary+=\"db\";\n    return binary;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int n=s.length();\n    if(n<3) return false;\n    for(int i=0;i<=n-3;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0) letter_grades.push_back(\"A+\");\n        else if(grades[i]>3.7) letter_grades.push_back(\"A\");\n        else if(grades[i]>3.3) letter_grades.push_back(\"A-\");\n        else if(grades[i]>3.0) letter_grades.push_back(\"B+\");\n        else if(grades[i]>2.7) letter_grades.push_back(\"B\");\n        else if(grades[i]>2.3) letter_grades.push_back(\"B-\");\n        else if(grades[i]>2.0) letter_grades.push_back(\"C+\");\n        else if(grades[i]>1.7) letter_grades.push_back(\"C\");\n        else if(grades[i]>1.3) letter_grades.push_back(\"C-\");\n        else if(grades[i]>1.0) letter_grades.push_back(\"D+\");\n        else if(grades[i]>0.7) letter_grades.push_back(\"D\");\n        else if(grades[i]>0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1) return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    else return 18*(int)pow(10,n-2);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    string binary=\"\";\n    while(sum>0){\n        binary=(sum%2==0?\"0\":\"1\")+binary;\n        sum/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string res=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            res+=word;\n            res+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    sort(word.begin(),word.end());\n    res+=word;\n    return res;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                result.push_back({i,j});\n            }\n        }\n    }\n    sort(result.begin(),result.end(),[](vector<int> a,vector<int> b){\n        if(a[0]==b[0]) return a[1]>b[1];\n        return a[0]<b[0];\n    });\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.empty()) return array;\n    vector<int> result = array;\n    int sum = array[0] + array[array.size()-1];\n    if(sum % 2 == 0){\n        sort(result.begin(), result.end(), greater<int>());\n    }else{\n        sort(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            encrypted+=(s[i]+2-'a')%26+'a';\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            encrypted+=(s[i]+2-'A')%26+'A';\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int boredom=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'&&S[i-1]=='.'||S[i]=='I'&&S[i-1]=='?'||S[i]=='I'&&S[i-1]=='!'){\n            boredom++;\n        }\n    }\n    return boredom;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c||b==a+c||c==a+b){\n        if(a==floor(a)&&b==floor(b)&&c==floor(c)){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0;i<message.length();i++){\n        if(message[i]>='a'&&message[i]<='z'){\n            message[i]=message[i]-32;\n        }\n        else if(message[i]>='A'&&message[i]<='Z'){\n            message[i]=message[i]+32;\n        }\n        if(message[i]=='a'||message[i]=='e'||message[i]=='i'||message[i]=='o'||message[i]=='u'){\n            if(message[i]=='a'){\n                message[i]='c';\n            }\n            else if(message[i]=='e'){\n                message[i]='g';\n            }\n            else if(message[i]=='i'){\n                message[i]='k';\n            }\n            else if(message[i]=='o'){\n                message[i]='q';\n            }\n            else if(message[i]=='u'){\n                message[i]='w';\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum+=max%10;\n        max/=10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool allLower=true,allUpper=true;\n    for(auto i:dict){\n        if(i.first.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")!=-1) allLower=false;\n        if(i.first.find_first_of(\"abcdefghijklmnopqrstuvwxyz\")!=-1) allUpper=false;\n    }\n    return allLower || allUpper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> result;\n    for(int i=2;i<n;i++){\n        int flag=0;\n        for(int j=2;j<i;j++){\n            if(i%j==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int x=a%10;\n    int y=b%10;\n    return x*y;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i+=2){\n        if(s[i]>='A'&&s[i]<='Z'){\n            if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    float num=stof(value);\n    if(num>0){\n        return (int)ceil(num-0.5);\n    }\n    else{\n        return (int)floor(num+0.5);\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int current = n;\n    for(int i = 0; i < n; i++){\n        pile.push_back(current);\n        if(current % 2 == 0){\n            current += 2;\n        } else {\n            current += 2;\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y){\n        return -1;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    int avg=round(sum/(double)(m-n+1));\n    string binary=\"0b\";\n    while(avg>0){\n        binary=(avg%2==0?\"0\":\"1\")+binary;\n        avg/=2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if((temp%10)%2==0){\n                break;\n            }\n            temp=temp/10;\n        }\n        if(temp==0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            result.push_back(num_to_word[num]);\n        }\n    }\n    return result;\n}\nvector<string> sort_reverse_names(vector<int> arr){\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    return by_length(sorted_arr);\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            int factorial=1;\n            for(int j=1;j<=i;j++){\n                factorial*=j;\n            }\n            result.push_back(factorial);\n        }\n        else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2, 0);\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string r = string(s.rbegin(), s.rend());\n        if(s == r){\n            if(i%2 == 0) result[0]++;\n            else result[1]++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=abs(n[i]);\n        while(num>0){\n            sum+=num%10;\n            num/=10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.size()==0) return true;\n    int count=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>arr[i+1]) count++;\n    }\n    if(count>1) return false;\n    else return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd=0,even=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0)odd++;\n        else even++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2!=0)odd--;\n        else even--;\n    }\n    if(odd==0)return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max=0;\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            result[test[i]]++;\n            if(result[test[i]]>max) max=result[test[i]];\n        }\n    }\n    for(auto it=result.begin();it!=result.end();it++){\n        if(it->second!=max) result.erase(it);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=c[0]) res+=s[i];\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=res==rev;\n    return {res,pal};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0) count++;\n        }\n        string s=\"the number of odd elements \";\n        s+=to_string(count);\n        s+=\"n the str\";\n        s+=to_string(count);\n        s+=\"ng \";\n        s+=to_string(count);\n        s+=\" of the \";\n        s+=to_string(count);\n        s+=\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill=0;\n    for(int i=0;i<grid.size();i++){\n        int count=0;\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n        max_fill+=(count/capacity);\n        if(count%capacity!=0){\n            max_fill++;\n        }\n    }\n    return max_fill;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int count_a = 0, count_b = 0;\n        for(int i = 0; i < 32; i++){\n            if((a >> i) & 1) count_a++;\n            if((b >> i) & 1) count_b++;\n        }\n        if(count_a == count_b) return a < b;\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string>v;\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            if(word.length()==n){\n                v.push_back(word);\n            }\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.length()==n){\n        v.push_back(word);\n    }\n    return v;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    for(int i=word.size()-2;i>0;i--){\n        if(vowels.find(word[i])!=-1&&vowels.find(word[i-1])==-1&&vowels.find(word[i+1])==-1){\n            return string(1,word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int cnt=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(') cnt++;\n            else cnt--;\n            if(cnt<0) break;\n        }\n        if(cnt<0) break;\n    }\n    if(cnt!=0) return \"No\";\n    for(int i=0;i<lst.size();i++){\n        for(int j=lst[i].size()-1;j>=0;j--){\n            if(lst[i][j]=='(') cnt++;\n            else cnt--;\n            if(cnt<0) break;\n        }\n        if(cnt<0) break;\n    }\n    if(cnt==0) return \"Yes\";\n    return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end(),greater<int>());\n    vector<int> ans;\n    for(int i=0;i<k;i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2==1) v.push_back(n);\n        n=n%2==0?n/2:3*n+1;\n    }\n    v.push_back(1);\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    if(date.size()!=10) return false;\n    if(date[2]!='-'||date[5]!='-') return false;\n    for(int i=0;i<10;i++){\n        if(i==2||i==5) continue;\n        if(date[i]<'0'||date[i]>'9') return false;\n    }\n    month=date[0]-'0';\n    month=month*10+date[1]-'0';\n    day=date[3]-'0';\n    day=day*10+date[4]-'0';\n    year=date[6]-'0';\n    year=year*10+date[7]-'0';\n    year=year*10+date[8]-'0';\n    year=year*10+date[9]-'0';\n    if(month<1||month>12) return false;\n    if(day<1||day>31) return false;\n    if(month==2&&day>29) return false;\n    if(month==4||month==6||month==9||month==11&&day>30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word=\"\";\n    for(int i=0;i<txt.size();i++){\n        if(txt[i]==' '){\n            if(word!=\"\"){\n                words.push_back(word);\n                word=\"\";\n            }\n        }\n        else if(txt[i]==','){\n            if(word!=\"\"){\n                words.push_back(word);\n                word=\"\";\n            }\n        }\n        else{\n            word+=txt[i];\n        }\n    }\n    if(word!=\"\"){\n        words.push_back(word);\n    }\n    if(words.size()==0){\n        int count=0;\n        for(int i=0;i<txt.size();i++){\n            if(txt[i]>='a'&&txt[i]<='z'){\n                if((txt[i]-'a')%2==1){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    return words;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start > end) return \"NO\";\n    int length = end - start + 1;\n    if(length == 1) return \"NO\";\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int sum=0,product=1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==0) return 0;\n        sum+=abs(arr[i]);\n        if(arr[i]<0) product*=-1;\n    }\n    return sum*product;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    int dir[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    vector<vector<int>> dist(n, vector<int>(n, 0));\n    vector<vector<int>> parent(n, vector<int>(n, -1));\n    vector<vector<int>> path(n, vector<int>(n, 0));\n    vector<vector<int>> path_dist(n, vector<int>(n, 0));\n    vector<vector<int>> path_parent(n, vector<int>(n, -1));\n    vector<vector<int>> path_path(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_dist(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_parent(n, vector<int>(n, -1));\n    vector<vector<int>> path_path_path(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_dist(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_parent(n, vector<int>(n, -1));\n    vector<vector<int>> path_path_path_path(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_path_dist(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_path_parent(n, vector<int>(n, -1));\n    vector<vector<int>> path_path_path_path_path(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_path_path_dist(n, vector<int>(n, 0));\n    vector<vector<int>> path_path_path_path_path_parent(n, vector<int>(n, -1));\n    vector<"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n + 1);\n    res[0] = 1;\n    res[1] = 3;\n    for(int i = 2; i <= n; i++){\n        if(i % 2 == 0) res[i] = 2;\n        else res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    while(n>0){\n        int digit=n%10;\n        if(digit%2!=0){\n            product*=digit;\n        }\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count!=0){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0) return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z'){\n        if(txt.length()==1) return true;\n        if(txt[txt.length()-2]==' ') return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n=arr.size();\n    int i;\n    for(i=n-1;i>0;i--){\n        if(arr[i]>=arr[i-1])\n            break;\n    }\n    if(i==0)\n        return -1;\n    else\n        return i-1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = INT_MIN, min_pos = INT_MAX;\n    bool has_neg = false, has_pos = false;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0){\n            if(lst[i] > max_neg){\n                max_neg = lst[i];\n                has_neg = true;\n            }\n        }\n        else if(lst[i] > 0){\n            if(lst[i] < min_pos){\n                min_pos = lst[i];\n                has_pos = true;\n            }\n        }\n    }\n    vector<int> result;\n    if(!has_neg) result.push_back(max_neg);\n    else result.push_back(NULL);\n    if(!has_pos) result.push_back(min_pos);\n    else result.push_back(NULL);\n    return result;\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==typeid(string)){\n        string s=boost::any_cast<string>(a);\n        replace(s.begin(),s.end(),',','.');\n        a=stof(s);\n    }\n    if(b.type()==typeid(string)){\n        string s=boost::any_cast<string>(b);\n        replace(s.begin(),s.end(),',','.');\n        b=stof(s);\n    }\n    if(a==b)return boost::any();\n    if(a.type()==b.type())return a;\n    if(a.type()==typeid(float)&&b.type()==typeid(int))return a;\n    if(a.type()==typeid(int)&&b.type()==typeid(float))return b;\n    if(a.type()==typeid(double)&&b.type()==typeid(int))return a;\n    if(a.type()==typeid(int)&&b.type()==typeid(double))return b;\n    if(a.type()==typeid(double)&&b.type()==typeid(float))return a;\n    if(a.type()==typeid(float)&&b.type()==typeid(double))return b;\n    return a;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact=fact*i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int spaceCount = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            spaceCount++;\n        }else{\n            if(spaceCount == 1){\n                result += \"_\";\n            }else if(spaceCount > 1){\n                result += \"-\";\n            }\n            spaceCount = 0;\n            result += text[i];\n        }\n    }\n    if(spaceCount == 1){\n        result += \"_\";\n    }else if(spaceCount > 1){\n        result += \"-\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0,i,j,k;\n    string s=\"txt\",t=\"exe\",u=\"dll\";\n    for(i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    for(i=0;i<file_name.length();i++){\n        if(file_name[i]=='.'){\n            break;\n        }\n    }\n    if(i==file_name.length()-1){\n        return \"No\";\n    }\n    if(file_name[0]<'a'||file_name[0]>'z'&&file_name[0]<'A'||file_name[0]>'Z'){\n        return \"No\";\n    }\n    for(j=i+1;j<file_name.length();j++){\n        if(file_name[j]=='.'){\n            break;\n        }\n    }\n    if(j!=file_name.length()-1){\n        return \"No\";\n    }\n    for(k=i+1;k<j;k++){\n        if(file_name[k]=='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.substr(i+1,3)==s||file_name.substr(i+1,3)==t||file_name.substr(i+1,3)==u){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<sentence.length();i++){\n        if(sentence[i]==' '){\n            if(word.length()>0 && is_prime(word.length())){\n                if(result.length()>0) result+=\" \";\n                result+=word;\n            }\n            word=\"\";\n        }else{\n            word+=sentence[i];\n        }\n    }\n    if(word.length()>0 && is_prime(word.length())){\n        if(result.length()>0) result+=\" \";\n        result+=word;\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n<=1) return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int x_num,x_den,n_num,n_den;\n    sscanf(x.c_str(),\"%d/%d\",&x_num,&x_den);\n    sscanf(n.c_str(),\"%d/%d\",&n_num,&n_den);\n    int num = x_num*n_num;\n    int den = x_den*n_den;\n    if(num%den==0) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    vector<int> index;\n    vector<int> sum;\n    for(int i=0;i<nums.size();i++){\n        int temp=nums[i];\n        int sum_temp=0;\n        while(temp!=0){\n            sum_temp+=abs(temp%10);\n            temp/=10;\n        }\n        sum.push_back(sum_temp);\n        index.push_back(i);\n    }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n            if(sum[i]>sum[j]){\n                int temp=sum[i];\n                sum[i]=sum[j];\n                sum[j]=temp;\n                temp=index[i];\n                index[i]=index[j];\n                index[j]=temp;\n            }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        if(nums[i]>10){\n            string s=to_string(abs(nums[i]));\n            if(s[0]%2!=0 && s[s.length()-1]%2!=0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int i=0,j=0;\n    for(i=0;i<planets.size();i++){\n        if(planets[i]==planet1)\n            break;\n    }\n    for(j=0;j<planets.size();j++){\n        if(planets[j]==planet2)\n            break;\n    }\n    if(i==planets.size()||j==planets.size())\n        return result;\n    if(i>j){\n        int temp=i;\n        i=j;\n        j=temp;\n    }\n    for(int k=i+1;k<j;k++){\n        result.push_back(planets[k]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0 && lst[i]==floor(lst[i]) && lst[i]%2!=0){\n            sum+=pow(lst[i],2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.size(); i++){\n        int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') cap++;\n            if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z') sm++;\n        }\n        int strength = cap - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string s=a+a;\n    for(int i=0;i<b.length();i++){\n        string sub=b.substr(i,b.length());\n        string rot=sub+sub;\n        if(rot.find(a)!=-1)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even=0,count_odd=0;\n    while(num!=0){\n        int digit=num%10;\n        if(digit%2==0){\n            count_even++;\n        }\n        else{\n            count_odd++;\n        }\n        num=num/10;\n    }\n    vector<int> result;\n    result.push_back(count_even);\n    result.push_back(count_odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    vector<string> romans = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += romans[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\nstring int_to_mini_roman(int number){\n    string result = int_to_mini_romank(number);\n    for(int i = 0; i < result.size(); i++){\n        result[i] = tolower(result[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max,x,y;\n    if(a>b && a>c){\n        max=a;\n        x=b;\n        y=c;\n    }\n    else if(b>a && b>c){\n        max=b;\n        x=a;\n        y=c;\n    }\n    else{\n        max=c;\n        x=a;\n        y=b;\n    }\n    if(pow(max,2)==pow(x,2)+pow(y,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique = 0;\n    for(string word : words){\n        vector<bool> seen(26, false);\n        int unique = 0;\n        for(char c : word){\n            if(!seen[c - 'a']){\n                seen[c - 'a'] = true;\n                unique++;\n            }\n        }\n        if(unique > max_unique || (unique == max_unique && word < max_word)){\n            max_word = word;\n            max_unique = unique;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    int total = number + min(need, remaining);\n    int left = max(0, remaining - need);\n    result.push_back(total);\n    result.push_back(left);\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int i=0;\n    while(i<s.length()){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n        i++;\n    }\n    if(s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")==string::npos){\n        reverse(s.begin(),s.end());\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        int temp=a;\n        a=b;\n        b=temp;\n    }\n    for(int i=a;i<=b;i++){\n        result.push_back(i);\n    }\n    return result;\n}\n"}
