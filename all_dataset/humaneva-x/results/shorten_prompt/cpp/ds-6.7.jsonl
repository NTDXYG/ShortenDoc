{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size()-1; i++){\n        if(fabs(numbers[i] - numbers[i+1]) < threshold)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '(') {\n            count++;\n            temp += c;\n        }\n        if(c == ')') {\n            count--;\n            temp += c;\n            if(count == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0, mean, mad = 0.0;\n    int length = numbers.size();\n\n    // Calculate mean\n    for(int i=0; i<length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum/length;\n\n    // Calculate Mean Absolute Deviation\n    for(int i=0; i<length; i++)\n    {\n        mad += fabs(numbers[i] - mean);\n    }\n    return mad/length;\n}\n\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int count = 0, max_count = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            count++;\n            if(count > max_count) max_count = count;\n        }\n        else if(c == ')'){\n            count--;\n        }\n    }\n    result.push_back(max_count);\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\n\nfunction make_palindrome(s) {\n    if (s === s.split('').reverse().join('')) {\n        return s;\n    }\n    let postfix = '';\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (s.slice(0, i) === s.slice(0, i).split('').reverse().join('')) {\n            postfix = s.slice(0, i);\n            break;\n        }\n    }\n    return s + s.slice(postfix.length).split('').reverse().join('');\n}\n\nconsole.log(make_palindrome('')); // ''\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('cata')); // 'catac'\n\n// Time complexity: O(n^2)\n// Space complexity: O(n)\n\n// The function works by iterating over the string from the end to find the longest postfix that is a palindrome. It then appends the reversed prefix to the end of the string to make it a palindrome. The time complexity is O(n^2) because in the worst case, we may need to iterate over the string twice. The space complexity is O(n) because we store the reversed prefix and the postfix in separate variables.\n\n// Note: This solution assumes that the input string is composed of lowercase letters. If the input string can contain uppercase letters or other characters, the function will need to be modified to handle these cases.\n\n// Note: This solution assumes that the input string is composed of lowercase letters. If the input string can contain uppercase letters or other characters, the function will need to be modified to handle these cases.\n\n// Note: This solution assumes that the input string is composed of lowercase letters. If the input string can contain uppercase letters or other characters, the function will need to be modified to handle these cases.\n\n// Note: This solution assumes that the input string is composed of lowercase letters. If the input string can contain uppercase letters or other characters, the function will need to be modified to handle these cases.\n\n// Note: This solution assumes that the input string is composed of lowercase"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    string temp = \"\";\n    for(int i=0; i<str.size(); i++){\n        temp += str[i];\n        prefixes.push_back(temp);\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i);\n        if(i<n)\n            result += \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; str[i]; i++)\n        count[tolower(str[i])]++;\n    int res = 0;\n    for(int i=0; i<256; i++)\n        if(count[i] > 0)\n            res++;\n    return res;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0; i<music_string.size(); i++){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(4);\n                i++;\n            }\n            else{\n                beats.push_back(1);\n            }\n        }\n        else if(music_string[i] == '.'){\n            if(music_string[i+1] == '|'){\n                beats.push_back(2);\n                i++;\n            }\n        }\n        else if(music_string[i] == '|'){\n            beats.push_back(1);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    size_t found = str.find(substring);\n    while (found != string::npos){\n        count++;\n        found = str.find(substring, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string word = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[word]) + ' ';\n            word = \"\";\n        } else {\n            word += numbers[i];\n        }\n    }\n    result += to_string(num_map[word]);\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = INFINITY;\n    float first_num = 0.0, second_num = 0.0;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            first_num = numbers[i];\n            second_num = numbers[i+1];\n        }\n    }\n    return {first_num, second_num};\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]<min) min = numbers[i];\n        if(numbers[i]>max) max = numbers[i];\n    }\n    float range = max - min;\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto & value : values){\n        if(boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    sort(numbers.begin(), numbers.end());\n    result.push_back(numbers[0]);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble find_zero(vector<double> xs, double start, double end){\n    /* \n    Finds a zero of a polynomial with coefficients xs in the interval [start, end]. The interval is assumed to contain at least one zero.\n    *//* xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 */\n    double mid = (start + end) / 2;\n    if(fabs(poly(xs, mid)) < 1e-6){\n        return mid;\n    }else if(poly(xs, start) * poly(xs, mid) < 0){\n        return find_zero(xs, start, mid);\n    }else{\n        return find_zero(xs, mid, end);\n    }\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> third;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3==0) third.push_back(l[i]);\n    }\n    sort(third.begin(), third.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if((i+1)%3==0) l[i]=third[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = -INFINITY;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            char buffer[50];\n            sprintf(buffer, \"%d\", i);\n            for(char *p=buffer; *p; p++){\n                if(*p == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0; i<l.size(); i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for(int i=0, j=0; i<l.size(); i+=2, ++j){\n        l[i] = even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\nchar *decode_cyclic(char *encoded_str);\n\n/* takes as input string and returns encoded string using cyclic encoding. */\nchar *encode_cyclic(char *str);\n\n/* takes as input string and returns encoded string using simple Caesar cipher. */\nchar *encode_caesar(char *str);\n\n/* takes as input string encoded with encode_caesar function. Returns decoded string. */\nchar *decode_caesar(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple XOR cipher. */\nchar *encode_xor(char *str);\n\n/* takes as input string encoded with encode_xor function. Returns decoded string. */\nchar *decode_xor(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple ROT13 cipher. */\nchar *encode_rot13(char *str);\n\n/* takes as input string encoded with encode_rot13 function. Returns decoded string. */\nchar *decode_rot13(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple ROT47 cipher. */\nchar *encode_rot47(char *str);\n\n/* takes as input string encoded with encode_rot47 function. Returns decoded string. */\nchar *decode_rot47(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple Base64 encoding. */\nchar *encode_base64(char *str);\n\n/* takes as input string encoded with encode_base64 function. Returns decoded string. */\nchar *decode_base64(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple URL encoding. */\nchar *encode_url(char *str);\n\n/* takes as input string encoded with encode_url function. Returns decoded string. */\nchar *decode_url(char *encoded_str);\n\n/* takes as input string and returns encoded string using simple MD5 hash. */\nchar *encode_md5(char *str);\n\n/* takes as input string and returns encoded string using simple SHA1 hash. */\nchar *encode_sha1("}
{"task_id": "CPP/39", "generation": "\n    int fib[2] = {0, 1};\n    int prime[2] = {2, 3};\n    int i = 2, j = 2, k = 2;\n    while(k < n){\n        fib[i%2] = fib[(i-1)%2] + fib[(i-2)%2];\n        if(fib[i%2] > prime[j%2]*2){\n            prime[j%2] = next_prime(prime[(j-1)%2]);\n            j++;\n        }\n        if(fib[i%2] == prime[j%2]){\n            k++;\n        }\n        i++;\n    }\n    return fib[i%2];\n}\n\nint next_prime(int n){\n    int i = n + 1;\n    while(1){\n        if(is_prime(i)){\n            return i;\n        }\n        i++;\n    }\n}\n\nbool is_prime(int n){\n    if(n == 2 || n == 3){\n        return true;\n    }\n    if(n % 2 == 0 || n == 1){\n        return false;\n    }\n    for(int i = 3; i * i <= n; i += 2){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n<3) return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        if(i>0 && l[i]==l[i-1]) continue;\n        int j=i+1, k=n-1;\n        while(j<k){\n            if(l[i]+l[j]+l[k]<0) j++;\n            else if(l[i]+l[j]+l[k]>0) k--;\n            else return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*n;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string res=\"\";\n    while(x){\n        res=to_string(x%base)+res;\n        x/=base;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (0.5*a*h);\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n<=1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 0;\n    int fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(int i=4;i<=n;i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2-1]+l[n/2])/2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.size() - 1;\n    while (start < end){\n        if (text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    int res=1;\n    while(n>0){\n        if(n%2==1)\n            res=(res*2)%p;\n        n=n/2;\n        if(n>0)\n            res=(res*res)%p;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>='a' && s[i]<='z'){\n            if(s[i]>='a' && s[i]<='c'){\n                decoded_string += 'z';\n            }\n            else{\n                decoded_string += s[i]-3;\n            }\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            if(s[i]>='A' && s[i]<='C'){\n                decoded_string += 'Z';\n            }\n            else{\n                decoded_string += s[i]-3;\n            }\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < vowels.size(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n==0 || n==1) return true;\n    if(l[0]<=l[n-1]){\n        for(int i=0; i<n-1; i++){\n            if(l[i]>l[i+1]) return false;\n        }\n    }\n    else{\n        for(int i=0; i<n-1; i++){\n            if(l[i]<l[i+1]) return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i = 2;\n    while(i * i <= n){\n        if(n % i != 0)\n            i += 1;\n        else\n            n /= i;\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++){\n        if(brackets[i] == '(') count++;\n        else if(brackets[i] == ')') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0 || n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for(int i=3;i<=n;i++)\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    return fib[n];\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    string vowels = \"aeiou\";\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for(int i=0; i<s.length(); i++){\n        if(vowels.find(s[i]) != string::npos){\n            count++;\n        }\n    }\n    if(s[s.length()-1] == 'y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.size();\n    shift %= n;\n    rotate(s.begin(),s.begin()+n-shift,s.end());\n    return s;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            sum += (int)s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&apples,&oranges);\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even = 10001, index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] <= smallest_even){\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1) return {};\n    return {smallest_even, index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max_freq = 0;\n    int max_freq_num = -1;\n    vector<int> freq(lst.size(), 0);\n    for(int i=0; i<lst.size(); i++){\n        freq[lst[i]]++;\n        if(freq[lst[i]] >= lst[i] && lst[i] > max_freq_num){\n            max_freq_num = lst[i];\n        }\n    }\n    return max_freq_num;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    if(lst.size()==0) return lst;\n    sort(lst.begin(), lst.end());\n    vector<int> res;\n    while(lst.size()){\n        res.push_back(lst[0]);\n        lst.erase(lst.begin());\n        if(lst.size()>0){\n            res.push_back(lst[lst.size()-1]);\n            lst.pop_back();\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    int i=0,j=q.size()-1;\n    while(i<j){\n        if(q[i]==q[j]){\n            i++;\n            j--;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    vector<int> arr2(arr.begin(), arr.end());\n    reverse(arr2.begin(), arr2.end());\n    int changes = 0;\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr2[i]) changes++;\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++)\n        sum1+=lst1[i].size();\n    for(int i=0;i<lst2.size();i++)\n        sum2+=lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else\n        return lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            while(a % i == 0){\n                a /= i;\n                count++;\n            }\n            if(count > 1){\n                return false;\n            }\n        }\n    }\n    if(count == 1){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    int i=2;\n    while(i<=sqrt(x)){\n        if(pow(n,i)==x)\n            return true;\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n = round(pow(a, (1. / 3)));\n    return (n * n * n) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3){\n        return false;\n    }\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i+1]==s[i+2] || s[i]==s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i]>=4.0) letter_grades.push_back(\"A+\");\n        else if(grades[i]>=3.7) letter_grades.push_back(\"A\");\n        else if(grades[i]>=3.3) letter_grades.push_back(\"A-\");\n        else if(grades[i]>=3.0) letter_grades.push_back(\"B+\");\n        else if(grades[i]>=2.7) letter_grades.push_back(\"B\");\n        else if(grades[i]>=2.3) letter_grades.push_back(\"B-\");\n        else if(grades[i]>=2.0) letter_grades.push_back(\"C+\");\n        else if(grades[i]>=1.7) letter_grades.push_back(\"C\");\n        else if(grades[i]>=1.3) letter_grades.push_back(\"C-\");\n        else if(grades[i]>=1.0) letter_grades.push_back(\"D+\");\n        else if(grades[i]>=0.7) letter_grades.push_back(\"D\");\n        else if(grades[i]>=0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n = str.length();\n    if(n == 0 || n == 1){\n        return false;\n    }\n    for(int i = 2; i * i <= n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return 2*starts_one_ends(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N%2;\n        N /= 2;\n    }\n    string res = \"\";\n    while(sum){\n        res = (char)('0' + sum%2) + res;\n        sum /= 2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[100];\n    int i=0, j=0, k=0;\n    string temp = \"\";\n    for(i=0; s[i] != '\\0'; i++){\n        if(s[i] == ' '){\n            words[j] = temp;\n            temp = \"\";\n            j++;\n        }\n        else{\n            temp += s[i];\n        }\n    }\n    words[j] = temp;\n    j++;\n    for(k=0; k<j; k++){\n        sort(words[k].begin(), words[k].end());\n    }\n    string result = \"\";\n    for(i=0; i<j; i++){\n        result += words[i];\n        if(i != j-1){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int, int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x)\n                res.push_back(make_pair(i, j));\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> result(array);\n    int sum = result[0] + result[result.size()-1];\n    if(sum % 2 == 0){\n        sort(result.begin(), result.end(), greater<int>());\n    }else{\n        sort(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            result += char(int(s[i]+2-65)%26 +65);\n        }\n        else{\n            result += char(int(s[i]+2-97)%26 +97);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2)\n        return NULL;\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i]<lst[i+1])\n            return lst[i+1];\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string::size_type start = 0, end = 0;\n    while (end != string::npos){\n        end = S.find('.', start);\n        string temp = S.substr(start, end - start);\n        if (temp[0] == 'I') count++;\n        start = end != string::npos ? end+1 : string::npos;\n    }\n    start = 0, end = 0;\n    while (end != string::npos){\n        end = S.find('?', start);\n        string temp = S.substr(start, end - start);\n        if (temp[0] == 'I') count++;\n        start = end != string::npos ? end+1 : string::npos;\n    }\n    start = 0, end = 0;\n    while (end != string::npos){\n        end = S.find('I', start);\n        string temp = S.substr(start, end - start);\n        if (temp[0] == 'I') count++;\n        start = end != string::npos ? end+1 : string::npos;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    int a1=round(a),b1=round(b),c1=round(c);\n    if(a1+b1==c1 || a1+c1==b1 || b1+c1==a1)\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i=0; i<message.size(); i++){\n        if(isalpha(message[i])){\n            if(vowels.find(message[i]) != string::npos){\n                if(islower(message[i])){\n                    result += char(toupper(message[i]+2));\n                }else{\n                    result += char(tolower(message[i]+2));\n                }\n            }else{\n                if(islower(message[i])){\n                    result += toupper(message[i]);\n                }else{\n                    result += tolower(message[i]);\n                }\n            }\n        }else{\n            result += message[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        int num=lst[i];\n        while(num%2==0) num/=2;\n        while(num%5==0) num/=5;\n        int prime=num;\n        while(1){\n            int flag=0;\n            for(int i=3;i*i<=prime;i+=2){\n                if(prime%i==0){\n                    prime/=i;\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0) break;\n        }\n        if(prime>2) sum+=prime;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool lower = true, upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        for(auto c : it->first){\n            if(!islower(c)) lower = false;\n            if(!isupper(c)) upper = false;\n        }\n    }\n    return lower || upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    primes.push_back(2);\n    for(int i=3; i<n; i+=2){\n        bool isPrime = true;\n        for(int j=0; j<primes.size(); j++){\n            if(i%primes[j]==0){\n                isPrime = false;\n                break;\n            }\n            if(primes[j]*primes[j]>i) break;\n        }\n        if(isPrime) primes.push_back(i);\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int last_digit_a, last_digit_b, product;\n    last_digit_a = abs(a%10);\n    last_digit_b = abs(b%10);\n    product = last_digit_a * last_digit_b;\n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.size(); i+=2){\n        if(s[i] == toupper(s[i])){\n            if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int rounded = round(num);\n    int floor_val = floor(num);\n    if(abs(num - rounded) < abs(num - floor_val))\n        return rounded;\n    else\n        return floor_val;\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    int stones = n;\n    for(int i=0; i<n; i++){\n        result.push_back(stones);\n        if(stones%2 == 0) stones += 2;\n        else stones += 2;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y){\n        return -1;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int avg=(n+m)/2;\n    avg=round(avg);\n    return \"0b\"+bitset<32>(avg).to_string();\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        bool isEvenDigit = false;\n        while(num > 0){\n            if((num%10)%2 == 0){\n                isEvenDigit = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(!isEvenDigit)\n            result.push_back(x[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    map<int, string> num_to_name;\n    for(int i = 0; i < names.size(); i++)\n        num_to_name[i+1] = names[i];\n    vector<int> valid_nums;\n    for(int num : arr)\n        if(num_to_name.count(num) > 0)\n            valid_nums.push_back(num);\n    sort(valid_nums.begin(), valid_nums.end());\n    reverse(valid_nums.begin(), valid_nums.end());\n    vector<string> result;\n    for(int num : valid_nums)\n        result.push_back(num_to_name[num]);\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0){\n            int fact = 1;\n            for(int j=1; j<=i; j++){\n                fact *= j;\n            }\n            result.push_back(fact);\n        }\n        else{\n            int sum = 0;\n            for(int j=1; j<=i; j++){\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        if(s == string(s.rbegin(), s.rend())){\n            if(s.size() % 2 == 0) even_count++;\n            else odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int sum = 0;\n        if(n[i]<0){\n            while(n[i] != 0){\n                sum += n[i]%10;\n                n[i] /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n        else{\n            while(n[i] != 0){\n                sum += n[i]%10;\n                n[i] /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0) return true;\n    int count = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]) count++;\n    }\n    if(arr[n - 1] > arr[0]) count++;\n    return count <= 1;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1=0,odd2=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==1)\n            odd1++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==1)\n            odd2++;\n    }\n    if(odd1>odd2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> count;\n    for(int i=0;i<test.size();i++){\n        if(test[i] != ' '){\n            count[test[i]]++;\n        }\n    }\n    int max = 0;\n    for(auto it = count.begin();it != count.end();it++){\n        if(it->second > max){\n            max = it->second;\n        }\n    }\n    map<char,int> result;\n    for(auto it = count.begin();it != count.end();it++){\n        if(it->second == max){\n            result[it->first] = it->second;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    for(int i=0;i<c.size();i++){\n        s.erase(remove(s.begin(),s.end(),c[i]),s.end());\n    }\n    string s_rev=s;\n    reverse(s_rev.begin(),s_rev.end());\n    bool palindrome=(s==s_rev);\n    return {s,to_string(palindrome)};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> res;\n    for(auto &s: lst){\n        int count = 0;\n        for(auto &c: s){\n            if((c-'0')%2 != 0) count++;\n        }\n        string temp = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + to_string(count) + \" of the \" + to_string(count) + \"nput.\";\n        res.push_back(temp);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, min_sum = nums[0];\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum)\n            min_sum = sum;\n        if(sum > 0)\n            sum = 0;\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size();\n    int m=grid[0].size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                count+=capacity;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        if(a<0) a*=-1;\n        if(b<0) b*=-1;\n        int count_a = __builtin_popcount(a);\n        int count_b = __builtin_popcount(b);\n        return count_a < count_b || (count_a == count_b && a < b);\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    vector<string> result;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n        for(int j=0;j<words[i].length();j++){\n            char c = tolower(words[i][j]);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c >= 'a' && c <= 'z'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.size()-2; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos){\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0, close = 0;\n    for(auto &s : lst){\n        for(char &c : s){\n            if(c == '(') open++;\n            else if(c == ')'){\n                if(open > 0) open--;\n                else close++;\n            }\n        }\n    }\n    return (open == close) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    int n=arr.size();\n    for(int i=n-1;i>=n-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==0 && lst[i]%2==1)\n            sum+=lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]>=10 && arr[i]<=99 || arr[i]>=-99 && arr[i]<=-10){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> res;\n    while(n != 1){\n        if(n % 2 != 0) res.push_back(n);\n        n = n % 2 ? n*3 + 1 : n / 2;\n    }\n    res.push_back(1);\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-' || date[5] != '-')\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30)\n            return false;\n    }\n    else if(month == 2){\n        if(day > 29)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> result;\n    if(txt.find(' ') != string::npos){\n        string temp = \"\";\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] == ' ') {\n                result.push_back(temp);\n                temp = \"\";\n            } else {\n                temp += txt[i];\n            }\n        }\n        result.push_back(temp);\n    } else if(txt.find(',') != string::npos){\n        string temp = \"\";\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] == ',') {\n                result.push_back(temp);\n                temp = \"\";\n            } else {\n                temp += txt[i];\n            }\n        }\n        result.push_back(temp);\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] >= 'a' && txt[i] <= 'z' && (txt[i] - 'a') % 2 != 0) count++;\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> sorted_lst(lst);\n    sort(sorted_lst.begin(), sorted_lst.end());\n    int count = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] != sorted_lst[i]){\n            count++;\n        }\n    }\n    if(count > 2){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int len = end - start + 1;\n    if(len < 2)\n        return \"NO\";\n    for(int i = 2; i * i <= len; i++){\n        if(len % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int sum=0, prod=1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]<0) prod*=-1;\n        else if(arr[i]>0) prod*=1;\n        else return 0;\n        sum+=abs(arr[i]);\n    }\n    return prod*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\n    dp[0][0] = grid[0][0];\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(i>0) dp[i][j] = min(dp[i][j], dp[i-1][j]+grid[i][j]);\n            if(j>0) dp[i][j] = min(dp[i][j], dp[i][j-1]+grid[i][j]);\n        }\n    }\n    vector<int> path;\n    int i=n-1, j=n-1;\n    while(i>0 || j>0){\n        path.push_back(grid[i][j]);\n        if(i>0 && dp[i-1][j]<dp[i][j]) i--;\n        else j--;\n    }\n    path.push_back(grid[0][0]);\n    reverse(path.begin(), path.end());\n    return vector<int>(path.begin(), path.begin()+k);\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n+1, 0);\n    if(n>=0) res[0] = 0;\n    if(n>=1) res[1] = 1;\n    if(n>=2) res[2] = 1;\n    for(int i=3; i<=n; i++){\n        if(i%2==0) res[i] = 1 + i/2;\n        else res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    bool isOdd = false;\n    while(n){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n            isOdd = true;\n        }\n        n /= 10;\n    }\n    return isOdd ? product : 0;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n        }\n        if(count > 1){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    if(txt[txt.length()-1]==' ')\n        return false;\n    if(isalpha(txt[txt.length()-1]))\n        return false;\n    return true;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max_idx = -1;\n    for(int i=n-1; i>0; i--){\n        if(arr[i] > arr[i-1]){\n            max_idx = i;\n            break;\n        }\n    }\n    if(max_idx == -1) return -1;\n    for(int i=max_idx+1; i<n; i++){\n        if(arr[i] < arr[max_idx] && arr[i] > arr[max_idx-1]){\n            max_idx = i;\n        }\n    }\n    return max_idx;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int largest_negative = INT_MIN, smallest_positive = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>largest_negative)\n            largest_negative = lst[i];\n        if(lst[i]>0 && lst[i]<smallest_positive)\n            smallest_positive = lst[i];\n    }\n    if(largest_negative == INT_MIN)\n        largest_negative = NULL;\n    if(smallest_positive == INT_MAX)\n        smallest_positive = NULL;\n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type())\n        return (a.type() > b.type()) ? a : b;\n    if(a.type() == typeid(int)){\n        int x = boost::any_cast<int>(a);\n        int y = boost::any_cast<int>(b);\n        if(x == y)\n            return boost::any();\n        else\n            return (x > y) ? a : b;\n    }\n    if(a.type() == typeid(float)){\n        float x = boost::any_cast<float>(a);\n        float y = boost::any_cast<float>(b);\n        if(x == y)\n            return boost::any();\n        else\n            return (x > y) ? a : b;\n    }\n    if(a.type() == typeid(string)){\n        string x = boost::any_cast<string>(a);\n        string y = boost::any_cast<string>(b);\n        if(x == y)\n            return boost::any();\n        else\n            return (x > y) ? a : b;\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n<=0)\n        return false;\n    if(n%2==0)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long fact = 1;\n        for(int j = i; j > 0; j--){\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result;\n    int count = 0;\n    for(int i=0; i<text.size(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1)\n                result += '_';\n            else if(count > 2)\n                result.back() = '-';\n        }\n        else{\n            while(count > 2){\n                result += '_';\n                count--;\n            }\n            if(count == 2 && i != 0 && text[i-1] != ' ')\n                result += '-';\n            result += text[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0,i;\n    for(i=0;file_name[i] != '\\0';i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n            count++;\n        if(count>3)\n            return \"No\";\n    }\n    if(count<=3){\n        for(i=0;file_name[i] != '.';i++){\n            if(i==0){\n                if((file_name[i]<'A' || file_name[i]>'Z') && (file_name[i]<'a' || file_name[i]>'z'))\n                    return \"No\";\n            }\n            else if(file_name[i+1]=='\\0')\n                return \"No\";\n        }\n        if(i==file_name.length()-1)\n            return \"No\";\n        string extension = file_name.substr(i+1);\n        if(extension==\"txt\" || extension==\"exe\" || extension==\"dll\")\n            return \"Yes\";\n        else\n            return \"No\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0 && i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else if(i%3==0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string words[100];\n    string result = \"\";\n    int j = 0;\n    for(int i = 0; i < sentence.length(); i++){\n        string temp = \"\";\n        while(sentence[i] != ' ' && i < sentence.length()){\n            temp += sentence[i];\n            i++;\n        }\n        words[j] = temp;\n        j++;\n    }\n    for(int i = 0; i < j; i++){\n        int flag = 0;\n        if(words[i].length() <= 1){\n            continue;\n        }\n        for(int k = 2; k*k <= words[i].length(); k++){\n            if(words[i].length() % k == 0){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            result += words[i] + \" \";\n        }\n    }\n    if(result.length() > 0){\n        result.pop_back();\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1,den1,num2,den2;\n    sscanf(x.c_str(),\"%d/%d\",&num1,&den1);\n    sscanf(n.c_str(),\"%d/%d\",&num2,&den2);\n    return (num1*den2)%(num2*den1)==0;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    int n = nums.size();\n    vector<pair<int,int>> arr(n);\n    for(int i=0;i<n;i++){\n        int sum = 0;\n        int num = abs(nums[i]);\n        while(num){\n            sum += num%10;\n            num /= 10;\n        }\n        arr[i] = {sum,i};\n    }\n    sort(arr.begin(),arr.end());\n    vector<int> res(n);\n    for(int i=0;i<n;i++){\n        res[i] = nums[arr[i].second];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i]>10){\n            int firstDigit = abs(nums[i]/10);\n            int lastDigit = abs(nums[i]%10);\n            if(firstDigit%2 != 0 && lastDigit%2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n+1, 0);\n    for(int i=1; i<=n; i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=1; i<n-1; i++){\n        for(int j=i+1; j<n; j++){\n            for(int k=j+1; k<=n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1=-1,index2=-1;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1) index1=i;\n        if(planets[i]==planet2) index2=i;\n    }\n    if(index1==-1||index2==-1) return result;\n    if(index1>index2){\n        int temp=index1;\n        index1=index2;\n        index2=temp;\n    }\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].length() % 2 == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i, flag = 0;\n    for (i = 2; i <= n / 2; ++i) {\n        if (n % i == 0) {\n            flag = 1;\n            break;\n        }\n    }\n    if (n == 1) {\n        flag = 1;\n    }\n    if (flag == 0)\n        return x;\n    else\n        return y;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i] ));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(auto extension : extensions){\n        int strength = 0;\n        for(auto ch : extension){\n            if(isupper(ch)) strength++;\n            else if(islower(ch)) strength--;\n        }\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int a_len = a.size();\n    int b_len = b.size();\n    if(a_len<b_len) return false;\n    for(int i=0;i<b_len;i++){\n        string temp = b.substr(i)+b.substr(0,i);\n        if(a.find(temp)!=string::npos) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    vector<int> result(2,0);\n    num = abs(num);\n    while(num){\n        int digit = num%10;\n        if(digit%2 == 0)\n            result[0]++;\n        else\n            result[1]++;\n        num /= 10;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            res += roman[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side,square_sum;\n    //find the maximum side\n    if(a>b && a>c)\n        max_side=a;\n    else if(b>a && b>c)\n        max_side=b;\n    else\n        max_side=c;\n    //calculate the square sum of other two sides\n    square_sum=(a*a+b*b+c*c)-max_side*max_side;\n    //check if the square of maximum side is equal to the sum of squares of other two sides\n    if(max_side*max_side==square_sum)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(string word : words){\n        vector<int> count(26, 0);\n        for(char c : word){\n            count[c - 'a']++;\n        }\n        int unique = count.end() - find(count.begin(), count.end(), 0);\n        if(unique > max_unique){\n            max_unique = unique;\n            max_word = word;\n        }\n        else if(unique == max_unique && word < max_word){\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(need <= remaining){\n        return {number+need, remaining-need};\n    }else{\n        return {number+remaining, 0};\n    }\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int n = s.length();\n    for(int i=0;i<n;i++){\n        if(islower(s[i])){\n            s[i] = toupper(s[i]);\n        }\n        else if(isupper(s[i])){\n            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++)\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    return string(md5string);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        for(int i=b;i<=a;i++){\n            if(i%2==0)\n                result.push_back(i);\n        }\n    }\n    else{\n        for(int i=a;i<=b;i++){\n            if(i%2==0)\n                result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
