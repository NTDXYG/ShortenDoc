{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string current_group = \"\";\n    int depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            if (depth == 0) {\n                current_group = \"\";\n            }\n            depth++;\n            current_group += c;\n        } else if (c == ')') {\n            depth--;\n            current_group += c;\n            if (depth == 0) {\n                result.push_back(current_group);\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i!=numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    string group;\n    int max_depth = 0;\n    int current_depth = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        } else if (paren_string[i] == ')') {\n            current_depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0, product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "\n    vector<int> maxs;\n    int max=numbers[0];\n    maxs.push_back(max);\n    for(int i=1;i<numbers.size();i++){\n        if(numbers[i]>max){\n            max=numbers[i];\n        }\n        maxs.push_back(max);\n    }\n    return maxs;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction make_palindrome(s) {\n    var i = 0;\n    var j = s.length - 1;\n    while (i < j) {\n        if (s[i] === s[j]) {\n            i++;\n            j--;\n        }\n        else {\n            return s + make_palindrome(s.slice(0, i)).split('').reverse().join('');\n        }\n    }\n    return s;\n}\nexports.make_palindrome = make_palindrome;\n//# sourceMappingURL=utils.js.map\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.make_palindrome = exports.is_palindrome = exports.is_palindrome_2 = exports.is_palindrome_1 = exports.is_palindrome_0 = exports.is_palindrome_ = exports.is_palindrome__ = void 0;"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}"}
{"task_id": "CPP/13", "generation": "\n    if(b==0) return a;\n    else return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s;\n    for(int i=0;i<=n;i++){\n        s+=to_string(i);\n        if(i!=n)\n            s+=' ';\n    }\n    return s;\n}"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        char c=str[i];\n        if(find(distinct_chars.begin(),distinct_chars.end(),c)==distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    int i = 0;\n    while(i < music_string.length()){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n            i++;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '|'){\n            result.push_back(2);\n            i += 2;\n        }\n        else if(music_string[i] == '.' && music_string[i+1] == '|'){\n            result.push_back(1);\n            i += 2;\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]==substring[0]){\n            int j=0;\n            int k=i;\n            while(j<substring.length()&&k<str.length()&&str[k]==substring[j]){\n                j++;\n                k++;\n            }\n            if(j==substring.length()){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n    string result = \"\";\n    string current_number = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[current_number]) + \" \";\n            current_number = \"\";\n        }\n        else{\n            current_number += numbers[i];\n        }\n    }\n    result += to_string(num_map[current_number]);\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    vector<float> result;\n    float min_diff = 1000000;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = fabs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        if(boost::any_cast<int>(*it)){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int len = 0;\n    for(int i = 0; i < str.length(); i++){\n        len++;\n    }\n    return len;\n}"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1;i>0;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n=n/i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>=65&&str[i]<=90){\n            str[i]+=32;\n        }\n        else if(str[i]>=97&&str[i]<=122){\n            str[i]-=32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}"}
{"task_id": "CPP/31", "generation": "\n    if(n==1) return false;\n    if(n==2) return true;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double result = 0;\n    for(int i = 0; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\ndouble find_zero(vector<double> xs){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    *//* xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 */\n    double x = 0;\n    double y = poly(xs, x);\n    while(y != 0){\n        x += 0.01;\n        y = poly(xs, x);\n    }\n    return x;\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l_prime;\n    vector<int> l_divisible_by_three;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_divisible_by_three.push_back(l[i]);\n        }\n    }\n    sort(l_divisible_by_three.begin(),l_divisible_by_three.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l_prime.push_back(l_divisible_by_three[j]);\n            j++;\n        }\n        else{\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0||i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=0;i<l.size();i+=2){\n        even.push_back(l[i]);\n    }\n    sort(even.begin(),even.end());\n    for(int i=0;i<even.size();i++){\n        l[i*2]=even[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nchar *decode_cyclic(char *encoded_string) {\n    char *decoded_string = malloc(strlen(encoded_string) + 1);\n    int i;\n    for (i = 0; encoded_string[i] != '\\0'; i++) {\n        decoded_string[i] = encoded_string[i] - 1;\n    }\n    decoded_string[i] = '\\0';\n    return decoded_string;\n}\n"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=0;\n    int i,j;\n    int count=0;\n    while(count<n){\n        c=a+b;\n        a=b;\n        b=c;\n        for(i=2;i<c;i++){\n            if(c%i==0){\n                break;\n            }\n        }\n        if(i==c){\n            count++;\n        }\n    }\n    return c;\n}"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i != j){\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]+=1;\n    }\n    return l;\n}"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=to_string(x%base)+s;\n        x=x/base;\n    }\n    return s;\n}"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 0;\n    int a=0,b=0,c=2,d=0;\n    for(int i=4;i<=n;i++){\n        int temp=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=temp;\n    }\n    return d;\n}"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    } else {\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0;\n    int j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    while(n>0){\n        if(n%2==1){\n            res=(res*p)%101;\n        }\n        p=(p*p)%101;\n        n=n/2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += (s[i] - 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += (s[i] - 3);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\nstring encode_shift(string s){\n    /* takes as input string encoded with encode_shift function. Returns decoded string. */\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            decoded += (s[i] + 3);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            decoded += (s[i] + 3);\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int len=brackets.length();\n    int i=0;\n    int count=0;\n    while(i<len){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n        i++;\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    sort(result.begin(),result.end());\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            n=n/i;\n            i--;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int len=brackets.length();\n    int i=0;\n    int count=0;\n    for(i=0;i<len;i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a=0,b=0,c=1;\n    for(int i=3;i<=n;i++){\n        int temp=a+b+c;\n        a=b;\n        b=c;\n        c=temp;\n    }\n    return c;\n}"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){\n            count++;\n        }\n    }\n    if(s[s.length()-1]=='y' || s[s.length()-1]=='Y'){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=s+(char)(x%10+'0');\n        x=x/10;\n    }\n    int n=s.length();\n    if(shift>n)\n        return s;\n    string ans=\"\";\n    for(int i=shift;i<n;i++)\n        ans=ans+s[i];\n    for(int i=0;i<shift;i++)\n        ans=ans+s[i];\n    return ans;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a=0,o=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            a=s[i+1]-48;\n        }\n        if(s[i]=='o'){\n            o=s[i+1]-48;\n        }\n    }\n    return n-a-o;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min = 1000000;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1){\n        return {};\n    }\n    return {min, index};\n}"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j]){\n                count++;\n            }\n        }\n        if(count>=lst[i]&&lst[i]>max){\n            max=lst[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    while(!lst.empty()){\n        int min = *min_element(lst.begin(), lst.end());\n        res.push_back(min);\n        lst.erase(remove(lst.begin(), lst.end(), min), lst.end());\n        if(lst.empty()) break;\n        int max = *max_element(lst.begin(), lst.end());\n        res.push_back(max);\n        lst.erase(remove(lst.begin(), lst.end(), max), lst.end());\n    }\n    return res;\n}"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n    else{\n        return -1;\n    }\n}"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w){\n        return false;\n    }\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-1-i]){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].length();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].length();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            count++;\n            a /= i;\n            i--;\n        }\n    }\n    if(count == 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    int i;\n    for(i=1;i<=x;i++){\n        if(pow(n,i)==x){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/77", "generation": "\n    int i;\n    for(i=0;i*i*i<=a;i++){\n        if(i*i*i==a){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n            result.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n            result.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n            result.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n            result.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n            result.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n            result.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n            result.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n            result.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n            result.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n            result.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n            result.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n            result.push_back(\"D-\");\n        }\n        else{\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}/* It last week the semester the teacher has to give the grades to students. teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you list of GPAs for some students and you have to write a function can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-'] */\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len < 2) return false;\n    for(int i = 2; i < len; i++){\n        if(len % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 2;\n    int a[n+1];\n    a[1]=1;\n    a[2]=2;\n    for(int i=3;i<=n;i++){\n        a[i]=a[i-1]+a[i-2];\n    }\n    return a[n];\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string s=\"\";\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    while(sum>0){\n        s=(sum%2==0?\"0\":\"1\")+s;\n        sum/=2;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                result.push_back({i,j});\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/88", "generation": "\n    int sum = array[0] + array[array.size()-1];\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    return array;\n}"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result += (s[i] - 'a' + 2) % 26 + 'a';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            result += (s[i] - 'A' + 2) % 26 + 'A';\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size() < 2) return -1;\n    sort(lst.begin(), lst.end());\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] != lst[i-1]) return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'){\n            if(S[i+1]==' '){\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b){\n        return true;\n    }\n    else{\n        return false;\n    }\n}"}
{"task_id": "CPP/93", "generation": "\n    string encoded_message = \"\";\n    for(int i = 0; i < message.length(); i++){\n        char c = message[i];\n        if(islower(c)){\n            c = toupper(c);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                c = c + 2;\n            }\n        }\n        else if(isupper(c)){\n            c = tolower(c);\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                c = c + 2;\n            }\n        }\n        encoded_message += c;\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    string s=to_string(max);\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        sum+=s[i]-'0';\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        if(is_lower && isupper(it->first[0])) is_lower = false;\n        if(is_upper && islower(it->first[0])) is_upper = false;\n        if(!is_lower && !is_upper) return false;\n    }\n    return is_lower || is_upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<=1) return primes;\n    for(int i=2;i<n;i++){\n        bool is_prime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                is_prime=false;\n                break;\n            }\n        }\n        if(is_prime) primes.push_back(i);\n    }\n    return primes;\n}"}
{"task_id": "CPP/97", "generation": "\n    int a1=a%10;\n    int b1=b%10;\n    return a1*b1;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i+=2){\n        if(s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i;\n    int num=0;\n    int dec=0;\n    int count=0;\n    int count2=0;\n    int count3=0;\n    int count4=0;\n    int count5=0;\n    int count6=0;\n    int count7=0;\n    int count8=0;\n    int count9=0;\n    int count10=0;\n    int count11=0;\n    int count12=0;\n    int count13=0;\n    int count14=0;\n    int count15=0;\n    int count16=0;\n    int count17=0;\n    int count18=0;\n    int count19=0;\n    int count20=0;\n    int count21=0;\n    int count22=0;\n    int count23=0;\n    int count24=0;\n    int count25=0;\n    int count26=0;\n    int count27=0;\n    int count28=0;\n    int count29=0;\n    int count30=0;\n    int count31=0;\n    int count32=0;\n    int count33=0;\n    int count34=0;\n    int count35=0;\n    int count36=0;\n    int count37=0;\n    int count38=0;\n    int count39=0;\n    int count40=0;\n    int count41=0;\n    int count42=0;\n    int count43=0;\n    int count44=0;\n    int count45=0;\n    int count46=0;\n    int count47=0;\n    int count48=0;\n    int count49=0;\n    int count50=0;\n    int count51=0;\n    int count52=0;\n    int count53=0;\n    int count54=0;\n    int count55=0;\n    int count56=0;\n    int count57=0;\n    int count58=0;\n    int count59=0;\n    int count60=0;\n    int count61=0;\n    int count62=0;\n    int count63=0;\n    int count64=0;\n    int count65=0;\n    int count66=0;\n    int count67=0;\n    int count68=0;\n    int count69=0;\n    int count70=0;\n    int count71=0;\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int stones = n;\n    for(int i = 0; i < n; i++){\n        pile.push_back(stones);\n        if(stones % 2 == 0){\n            stones += 2;\n        } else {\n            stones += 2;\n        }\n    }\n    return pile;\n}"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ',' || s[i] == ' '){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/102", "generation": "\n    if(x>y){\n        return -1;\n    }\n    else{\n        return y-1;\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    double sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    sum/=m-n+1;\n    sum=round(sum);\n    string ans=\"\";\n    while(sum>0){\n        ans=to_string(sum%2)+ans;\n        sum/=2;\n    }\n    return \"0b\"+ans;\n}"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int count=0;\n        int num=x[i];\n        while(num>0){\n            int digit=num%10;\n            if(digit%2==0){\n                count++;\n            }\n            num=num/10;\n        }\n        if(count==0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}"}
{"task_id": "CPP/105", "generation": "\n    map<int, vector<int>> m;\n    for(int i=0; i<arr.size(); i++){\n        m[arr[i]].push_back(arr[i]);\n    }\n    vector<int> res;\n    for(auto it=m.begin(); it!=m.end(); it++){\n        for(int i=0; i<it->second.size(); i++){\n            res.push_back(it->second[i]);\n        }\n    }\n    return res;\n}\nvector<string> sort_reverse_replace(vector<int> arr){\n    vector<int> sorted = by_length(arr);\n    reverse(sorted.begin(), sorted.end());\n    map<int, string> m = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<string> res;\n    for(int i=0; i<sorted.size(); i++){\n        res.push_back(m[sorted[i]]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result(n);\n    for(int i=0;i<n;i++){\n        if(i%2==0){\n            int factorial=1;\n            for(int j=1;j<=i;j++){\n                factorial*=j;\n            }\n            result[i]=factorial;\n        }\n        else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result[i]=sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2, 0);\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string r = s;\n        reverse(r.begin(), r.end());\n        if(s == r){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n        }\n        while(num>0){\n            sum+=num%10;\n            num=num/10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0) return true;\n    int min_index = 0;\n    for(int i = 1; i < n; i++){\n        if(arr[i] < arr[min_index]){\n            min_index = i;\n        }\n    }\n    if(min_index == n-1) return true;\n    for(int i = min_index+1; i < n; i++){\n        if(arr[i] < arr[i-1]){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/110", "generation": "\n    int odd=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            odd++;\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0){\n            odd--;\n        }\n    }\n    if(odd<=0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    map<char,int> temp;\n    int max=0;\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            temp[test[i]]++;\n            if(temp[test[i]]>max){\n                max=temp[test[i]];\n            }\n        }\n    }\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            if(temp[test[i]]==max){\n                result[test[i]]=temp[test[i]];\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string result=\"\";\n    for(int i=0;i<s.length();i++){\n        if(c.find(s[i])==string::npos){\n            result+=s[i];\n        }\n    }\n    string rev=\"\";\n    for(int i=result.length()-1;i>=0;i--){\n        rev+=result[i];\n    }\n    if(result==rev){\n        return {result,\"True\"};\n    }\n    else{\n        return {result,\"False\"};\n    }\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> out;\n    map<char,int> mp;\n    mp['0']=0;\n    mp['1']=1;\n    mp['2']=0;\n    mp['3']=1;\n    mp['4']=0;\n    mp['5']=1;\n    mp['6']=0;\n    mp['7']=1;\n    mp['8']=0;\n    mp['9']=1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            count+=mp[lst[i][j]];\n        }\n        string s=\"the number of odd elements \";\n        s+=to_string(count);\n        s+=\"n the str\";\n        s+=to_string(count);\n        s+=\"ng \";\n        s+=to_string(count);\n        s+=\" of the \";\n        s+=to_string(count);\n        s+=\"nput.\";\n        out.push_back(s);\n    }\n    return out;\n}"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(sum + nums[i], nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                max++;\n            }\n        }\n    }\n    return max/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> result;\n    vector<int> count;\n    for(int i=0;i<arr.size();i++){\n        int temp=arr[i];\n        int count1=0;\n        while(temp>0){\n            if(temp%2==1){\n                count1++;\n            }\n            temp=temp/2;\n        }\n        count.push_back(count1);\n    }\n    for(int i=0;i<arr.size();i++){\n        int min=100000000;\n        int index=0;\n        for(int j=0;j<count.size();j++){\n            if(count[j]<min){\n                min=count[j];\n                index=j;\n            }\n        }\n        result.push_back(arr[index]);\n        count[index]=100000000;\n    }\n    return result;\n}"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word += s[i];\n            if(s[i]!='a' && s[i]!='e' && s[i]!='i' && s[i]!='o' && s[i]!='u' && s[i]!='A' && s[i]!='E' && s[i]!='I' && s[i]!='O' && s[i]!='U'){\n                consonant_count++;\n            }\n        }\n        else{\n            if(consonant_count==n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    if(consonant_count==n){\n        result.push_back(word);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=1;i<word.length()-1;i++){\n        if(vowels.find(word[i])!=string::npos&&isalpha(word[i-1])&&isalpha(word[i+1])){\n            result+=word[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s = lst[0]+lst[1];\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '(') count++;\n        else count--;\n        if(count < 0) return \"No\";\n    }\n    if(count == 0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> result(arr.begin()+arr.size()-k,arr.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<10){\n            sum+=arr[i];\n        }\n        else if(arr[i]<100){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 != 0){\n            collatz.push_back(n);\n        }\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}"}
{"task_id": "CPP/124", "generation": "\n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day > 29) return false;\n        if (day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n    }\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    return true;\n}"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    for(int i=0;i<txt.length();i++){\n        if(txt[i]==' '){\n            res.push_back(temp);\n            temp=\"\";\n        }\n        else if(txt[i]==','){\n            res.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=txt[i];\n        }\n    }\n    if(temp.length()>0){\n        res.push_back(temp);\n    }\n    else{\n        int count=0;\n        for(int i=0;i<txt.length();i++){\n            if(txt[i]>=97 && txt[i]<=122){\n                if((txt[i]-97)%2==1){\n                    count++;\n                }\n            }\n        }\n        res.push_back(to_string(count));\n    }\n    return res;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] != sorted_lst[i]){\n            return false;\n        }\n    }\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] == lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if (start > end) {\n        return \"NO\";\n    }\n    int length = end - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return NULL;\n    int sum=0,prod=1;\n    for(int i=0;i<arr.size();i++){\n        sum+=abs(arr[i]);\n        if(arr[i]<0) prod*=-1;\n    }\n    return sum*prod;\n}"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\n    vector<vector<int>> parent(n, vector<int>(n, -1));\n    dp[0][0] = grid[0][0];\n    parent[0][0] = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i > 0 && dp[i-1][j] + grid[i][j] < dp[i][j]){\n                dp[i][j] = dp[i-1][j] + grid[i][j];\n                parent[i][j] = i-1;\n            }\n            if(j > 0 && dp[i][j-1] + grid[i][j] < dp[i][j]){\n                dp[i][j] = dp[i][j-1] + grid[i][j];\n                parent[i][j] = j-1;\n            }\n        }\n    }\n    vector<int> path;\n    int i = n-1, j = n-1;\n    while(i != -1 && j != -1){\n        path.push_back(grid[i][j]);\n        int next_i = parent[i][j] / n;\n        int next_j = parent[i][j] % n;\n        i = next_i;\n        j = next_j;\n    }\n    reverse(path.begin(), path.end());\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    res.push_back(1);\n    res.push_back(3);\n    for(int i=2;i<=n;i++){\n        if(i%2==0){\n            res.push_back(1+i/2);\n        }\n        else{\n            res.push_back(res[i-1]+res[i-2]+res[i+1]);\n        }\n    }\n    return res;\n}"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    string s = to_string(n);\n    for(int i = 0; i < s.length(); i++){\n        if((s[i] - '0') % 2 != 0){\n            product *= (s[i] - '0');\n        }\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    if(txt[txt.length()-1]==' ')\n        return false;\n    if((txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z')||(txt[txt.length()-1]>='A'&&txt[txt.length()-1]<='Z'))\n        return true;\n    return false;\n}"}
{"task_id": "CPP/135", "generation": "\n    int max_index = -1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]>=arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max = -1000000000;\n    int min = 1000000000;\n    int flag1 = 0;\n    int flag2 = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n            flag1 = 1;\n        }\n        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n            flag2 = 1;\n        }\n    }\n    if(flag1 == 0){\n        max = -1;\n    }\n    if(flag2 == 0){\n        min = -1;\n    }\n    vector<int> result;\n    result.push_back(max);\n    result.push_back(min);\n    return result;\n}"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==b.type()){\n        if(a==b){\n            return boost::any();\n        }\n        else{\n            return a;\n        }\n    }\n    else{\n        if(a.type()==typeid(string)){\n            string s1=boost::any_cast<string>(a);\n            string s2=boost::any_cast<string>(b);\n            if(s1==s2){\n                return boost::any();\n            }\n            else{\n                return a;\n            }\n        }\n        else if(b.type()==typeid(string)){\n            string s1=boost::any_cast<string>(a);\n            string s2=boost::any_cast<string>(b);\n            if(s1==s2){\n                return boost::any();\n            }\n            else{\n                return b;\n            }\n        }\n        else{\n            double d1=boost::any_cast<double>(a);\n            double d2=boost::any_cast<double>(b);\n            if(d1==d2){\n                return boost::any();\n            }\n            else{\n                return a;\n            }\n        }\n    }\n}"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0 && n>=8)\n        return true;\n    else\n        return false;\n}"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 1) {\n                result += '_';\n            } else if (count == 2) {\n                result += '-';\n            }\n        } else {\n            if (count > 2) {\n                result += '-';\n            }\n            result += text[i];\n            count = 0;\n        }\n    }\n    if (count > 2) {\n        result += '-';\n    }\n    return result;\n}"}
{"task_id": "CPP/141", "generation": "\n    string result = \"No\";\n    if(file_name.length() > 3) return result;\n    int dot = 0;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] == '.'){\n            dot++;\n            if(dot > 1) return result;\n            if(i == 0) return result;\n            if(i == file_name.length() - 1) return result;\n            if(!((file_name[i-1] >= 'a' && file_name[i-1] <= 'z') || (file_name[i-1] >= 'A' && file_name[i-1] <= 'Z'))) return result;\n            if(!(file_name[i+1] == 't' || file_name[i+1] == 'e' || file_name[i+1] == 'x' || file_name[i+1] == 'e' || file_name[i+1] == 'd' || file_name[i+1] == 'l' || file_name[i+1] == 'l' || file_name[i+1] == 'l')) return result;\n        }\n        else if(!(file_name[i] >= '0' && file_name[i] <= '9')){\n            if(!((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))) return result;\n        }\n    }\n    if(dot == 1) result = \"Yes\";\n    return result;\n}"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length())) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += sentence[i];\n        }\n    }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return result;\n}\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    if(a*d==b*c) return true;\n    else return false;\n}"}
{"task_id": "CPP/145", "generation": "\n    vector<int> ans;\n    int sum[1000];\n    for(int i=0;i<nums.size();i++){\n        int temp=nums[i];\n        int sum1=0;\n        while(temp!=0){\n            sum1+=abs(temp%10);\n            temp/=10;\n        }\n        sum[i]=sum1;\n    }\n    for(int i=0;i<nums.size();i++){\n        int min=1000000000;\n        int index=0;\n        for(int j=0;j<nums.size();j++){\n            if(sum[j]<min){\n                min=sum[j];\n                index=j;\n            }\n        }\n        ans.push_back(nums[index]);\n        sum[index]=1000000000;\n    }\n    return ans;\n}"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            string numStr = to_string(nums[i]);\n            if(numStr[0] % 2 != 0 && numStr[numStr.length() - 1] % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int p1=0,p2=0;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1){\n            p1=i;\n        }\n        if(planets[i]==planet2){\n            p2=i;\n        }\n    }\n    if(p1==0&&p2==0){\n        return result;\n    }\n    if(p1>p2){\n        int temp=p1;\n        p1=p2;\n        p2=temp;\n    }\n    for(int i=p1+1;i<p2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end(),[](string a,string b){\n        if(a.length()==b.length()){\n            return a<b;\n        }\n        return a.length()<b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    if(n==1) return y;\n    for(i=2;i<n;i++){\n        if(n%i==0) return y;\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]<0||lst[i]%1!=0)\n        continue;\n        else\n        sum+=pow(lst[i],2);\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "\n    int max=-1000;\n    string max_name=\"\";\n    for(int i=0;i<extensions.size();i++){\n        int cap=0,sm=0;\n        for(int j=0;j<extensions[i].length();j++){\n            if(extensions[i][j]>=65 && extensions[i][j]<=90){\n                cap++;\n            }\n            else if(extensions[i][j]>=97 && extensions[i][j]<=122){\n                sm++;\n            }\n        }\n        if(cap-sm>max){\n            max=cap-sm;\n            max_name=extensions[i];\n        }\n    }\n    return class_name+\".\"+max_name;\n}"}
{"task_id": "CPP/154", "generation": "\n    string c=b+b;\n    for(int i=0;i<a.length();i++){\n        if(c.find(a.substr(i,b.length()))!=string::npos){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even=0,odd=0;\n    string s=to_string(abs(num));\n    for(int i=0;i<s.length();i++){\n        if(s[i]%2==0) even++;\n        else odd++;\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string result = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            result += symbols[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side;\n    if(a>b && a>c){\n        max_side=a;\n    }\n    else if(b>a && b>c){\n        max_side=b;\n    }\n    else{\n        max_side=c;\n    }\n    float sum_of_squares_of_other_two_sides=pow(a,2)+pow(b,2);\n    if(max_side==c){\n        sum_of_squares_of_other_two_sides=pow(a,2)+pow(b,2);\n    }\n    else if(max_side==b){\n        sum_of_squares_of_other_two_sides=pow(a,2)+pow(c,2);\n    }\n    else{\n        sum_of_squares_of_other_two_sides=pow(b,2)+pow(c,2);\n    }\n    if(sum_of_squares_of_other_two_sides==pow(max_side,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    for (int i = 0; i < words.size(); i++) {\n        string word = words[i];\n        sort(word.begin(), word.end());\n        word.erase(unique(word.begin(), word.end()), word.end());\n        if (word.size() > max_unique_chars) {\n            max_unique_chars = word.size();\n            max_word = words[i];\n        }\n        else if (word.size() == max_unique_chars) {\n            if (words[i] < max_word) {\n                max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(need>remaining){\n        return {number+remaining,0};\n    }\n    else{\n        return {number+need,remaining-need};\n    }\n}"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int i=0;\n    int flag=0;\n    for(i=0;i<s.length();i++)\n    {\n        if((s[i]>=65 && s[i]<=90) || (s[i]>=97 && s[i]<=122))\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n    {\n        string temp=\"\";\n        for(i=s.length()-1;i>=0;i--)\n        {\n            temp=temp+s[i];\n        }\n        return temp;\n    }\n    else\n    {\n        for(i=0;i<s.length();i++)\n        {\n            if((s[i]>=65 && s[i]<=90) || (s[i]>=97 && s[i]<=122))\n            {\n                if(s[i]>=65 && s[i]<=90)\n                {\n                    s[i]=s[i]+32;\n                }\n                else\n                {\n                    s[i]=s[i]-32;\n                }\n            }\n        }\n        return s;\n    }\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"None\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return mdString;\n}"}
{"task_id": "CPP/163", "generation": "\n    vector<int> v;\n    if(a>b){\n        for(int i=b;i<=a;i+=2){\n            v.push_back(i);\n        }\n    }\n    else if(a<b){\n        for(int i=a;i<=b;i+=2){\n            v.push_back(i);\n        }\n    }\n    else{\n        v.push_back(a);\n    }\n    return v;\n}\n"}
