{"task_id": "CPP/0", "generation": "\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = i+1; j < numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_braces = 0;\n    string current_group;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if(open_braces == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float temp = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        temp += fabs(numbers[i] - mean);\n    }\n    return temp / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i = 0; i < numbers.size(); i++){\n        printf(\"%d \", numbers[i]);\n        if(i < numbers.size()-1){\n            printf(\"%d \", delimeter);\n        }\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int max_level = 0;\n    int current_level = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_level++;\n            if(current_level > max_level)\n                max_level = current_level;\n        }\n        else if(c == ')'){\n            current_level--;\n        }\n        levels.push_back(max_level);\n    }\n    return levels;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return make_pair(sum, product);\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "\n\nfunction make_palindrome(s) {\n    let longest_palindromic_postfix = '';\n    let longest_palindromic_postfix_length = 0;\n    let s_reverse = s.split('').reverse().join('');\n\n    for(let i = 0; i < s.length; i++) {\n        let substring = s.substring(i);\n        if(is_palindrome(substring)) {\n            longest_palindromic_postfix = substring;\n            longest_palindromic_postfix_length = substring.length;\n        }\n    }\n\n    let prefix = s.substring(0, s.length - longest_palindromic_postfix_length);\n    let palindrome = s + s_reverse.substring(0, prefix.length);\n\n    return palindrome;\n}\n\nfunction is_palindrome(s) {\n    let reversed_s = s.split('').reverse().join('');\n    return s === reversed_s;\n}\n\nconsole.log(make_palindrome('')); // ''\nconsole.log(make_palindrome('cat')); // 'catac'\nconsole.log(make_palindrome('cata')); // 'catac'\n\n// Test cases:\n// make_palindrome('')\n// make_palindrome('cat')\n// make_palindrome('cata')\n\n// Expected output:\n// ''\n// 'catac'\n// 'catac'\n\n// The function is_palindrome checks if a string is a palindrome. It does this by comparing the string with its reverse. If they are the same, the string is a palindrome.\n// The function make_palindrome finds the longest palindromic postfix in the string, and appends it to the end of the string to form a palindrome.\n// The function is_palindrome is a helper function to make_palindrome.\n// The function make_palindrome is the main function that finds the shortest palindrome that begins with a given string.\n// The function make_palindrome is a function that takes a string as"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string sequence = \"\";\n    for(int i=0; i<=n; i++){\n        sequence += to_string(i);\n        if(i<n)\n            sequence += \" \";\n    }\n    return sequence;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0; i<str.length(); i++){\n        if(find(v.begin(), v.end(), str[i]) == v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i = 0; i < music_string.length(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beats.push_back(4);\n                break;\n            case 'o|':\n                beats.push_back(2);\n                break;\n            case '.|':\n                beats.push_back(1);\n                break;\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    int len_sub = substring.length();\n    int len_str = str.length();\n    for(int i=0; i<=len_str-len_sub; i++){\n        int j;\n        for(j=0; j<len_sub; j++)\n            if(str[i+j] != substring[j])\n                break;\n        if(j == len_sub)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            num_map[temp] = stoi(temp);\n            temp = \"\";\n        }\n        else{\n            temp += numbers[i];\n        }\n    }\n    num_map[temp] = stoi(temp);\n\n    for(auto i = num_map.begin(); i != num_map.end(); i++){\n        result += to_string(i->second) + \" \";\n    }\n\n    return result.substr(0, result.length()-1);\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = FLT_MAX;\n    vector<float> result;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = fabs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/21", "generation": "\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i]<min_val)\n            min_val = numbers[i];\n        if(numbers[i]>max_val)\n            max_val = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        if(boost::any_cast<int>(*it) != NULL){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i=n-1; i>0; i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    result.push_back(numbers[0]);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; str[i]; i++){\n        if(str[i] >= 'a' && str[i] <= 'z')\n            str[i] = str[i] - 32;\n        else if(str[i] >= 'A' && str[i] <= 'Z')\n            str[i] = str[i] + 32;\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    if(n == 2)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    for(long long i = 3; i * i <= n; i += 2){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double result = 0;\n    for(int i = 0; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\ndouble find_zero(vector<double> xs){\n    /* \n    Finds zeros of a polynomial with coefficients xs.\n    *//* xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0 */\n    double low = -10000, high = 10000;\n    while((high - low) > 0.0001){\n        double mid = (low + high) / 2;\n        if(poly(xs, mid) > 0){\n            low = mid;\n        }else{\n            high = mid;\n        }\n    }\n    return low;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0)\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if(i%3==0)\n            l[i] = lprime[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    res.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> lprime;\n    for(int i=0; i<l.size(); i+=2){\n        vector<float> temp;\n        for(int j=i; j<i+2; j++){\n            temp.push_back(l[j]);\n        }\n        sort(temp.begin(), temp.end());\n        for(int k=0; k<temp.size(); k++){\n            lprime.push_back(temp[k]);\n        }\n    }\n    return lprime;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\nfunction decode_cyclic(encoded) {\n    let result = '';\n    for (let i = 0; i < encoded.length; i++) {\n        if (encoded[i] === ' ') {\n            result += ' ';\n        } else {\n            let charCode = encoded.charCodeAt(i) - 1;\n            if (charCode < 'a'.charCodeAt(0)) {\n                charCode = 'z'.charCodeAt(0) - (encoded.charCodeAt(i) - 'a'.charCodeAt(0) - 1);\n            }\n            result += String.fromCharCode(charCode);\n        }\n    }\n    return result;\n}\n\nconsole.log(decode_cyclic('bcd')); // Output: abc\nconsole.log(decode_cyclic('efg')); // Output: zab\nconsole.log(decode_cyclic('hij')); // Output: yza\nconsole.log(decode_cyclic('klm')); // Output: xzb\nconsole.log(decode_cyclic('nop')); // Output: wvu\nconsole.log(decode_cyclic('qrs')); // Output: uvw\nconsole.log(decode_cyclic('tuv')); // Output: tst\nconsole.log(decode_cyclic('wxy')); // Output: srt\nconsole.log(decode_cyclic('yz'));  // Output: rqp\nconsole.log(decode_cyclic('abc')); // Output: nop\nconsole.log(decode_cyclic('def')); // Output: mno\nconsole.log(decode_cyclic('ghi')); // Output: lkj\nconsole.log(decode_cyclic('jkl')); // Output: kji\nconsole.log(decode_cyclic('mno')); // Output: jhg\nconsole.log(decode_cyclic('pqr')); // Output: ifg\nconsole.log(decode_cyclic('stu')); // Output: hdg\nconsole.log(decode_cyclic('vwx')); // Output: ecf\nconsole.log(decode_cyclic('yza"}
{"task_id": "CPP/39", "generation": "\n    int i, j, count = 0, fib[1000] = {0, 1};\n    for(i = 2; count < n; i++){\n        for(j = 0; j < i; j++){\n            fib[i] += fib[j];\n        }\n        if(fib[i] < 1000000000 && fib[i] > 1){\n            for(j = 2; j <= fib[i]/2; j++){\n                if(fib[i] % j == 0){\n                    break;\n                }\n            }\n            if(j == fib[i]/2 + 1){\n                count++;\n            }\n        }\n    }\n    return fib[i-1];\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n < 3)\n        return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        int a = l[i];\n        int start = i+1;\n        int end = n-1;\n        while(start < end){\n            if(a + l[start] + l[end] == 0){\n                return true;\n            }\n            else if(a + l[start] + l[end] < 0){\n                start += 1;\n            }\n            else{\n                end -= 1;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(i==j)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n\n"}
{"task_id": "CPP/43", "generation": "\n    // Your code here\n    if(l.size()<2)\n        return false;\n    sort(l.begin(), l.end());\n    int left = 0;\n    int right = l.size() - 1;\n    while(left < right){\n        if(l[left] + l[right] == 0){\n            return true;\n        }\n        else if(l[left] + l[right] < 0){\n            left++;\n        }\n        else{\n            right--;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x > 0){\n        int digit = x % base;\n        if(digit < 10)\n            result = to_string(digit) + result;\n        else\n            result = char('A' + digit - 10) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 2;\n    else if(n==3)\n        return 0;\n    else{\n        int a=0, b=0, c=2, d=0;\n        for(int i=4; i<=n; i++){\n            d=a+b+c+d;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0)\n        return (l[n/2 - 1] + l[n/2]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end){\n        if(text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else\n        return (pow(2,n)%p);\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            encoded += ' ';\n        }\n        else{\n            encoded += char(s[i] + 3);\n        }\n    }\n    return encoded;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        while(text.find(vowels[i]) != string::npos){\n            text.erase(text.find(vowels[i]), 1);\n        }\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0) return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    if(l.size() < 2) return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 0; i < l.size()-1; i++){\n        if(l[i] > l[i+1]) dec = false;\n        if(l[i] < l[i+1]) inc = false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while(n % 2 == 0){\n        max_prime = 2;\n        n >>= 1;\n    }\n    for(int i = 3; i * i <= n; i += 2){\n        while(n % i == 0){\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if(n > 2){\n        max_prime = n;\n    }\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/62", "generation": "\n    for(int i=1; i<xs.size(); i++){\n        xs[i-1] = xs[i]*i;\n    }\n    xs.pop_back();\n    return xs;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        int a=0, b=0, c=1, d;\n        for(int i=3; i<=n; i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] == 'y' && i == s.length()-1))\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    int n = str.size();\n    shift = shift % n;\n    str = str.substr(shift) + str.substr(0, shift);\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a,o,m;\n    sscanf(s.c_str(),\"%d apples and %d oranges\",&a,&o);\n    m = n - a - o;\n    return m;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> res;\n    int min_val = INT_MAX;\n    int min_index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]%2 == 0 && arr[i]<=min_val){\n            min_val = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index != -1)\n        res.push_back(min_val);\n        res.push_back(min_index);\n    return res;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    for(int i = lst.size()-1; i >= 0; i--){\n        int count = 0;\n        for(int j = 0; j < lst.size(); j++){\n            if(lst[j] == lst[i])\n                count++;\n        }\n        if(count >= lst[i] && lst[i] > 0)\n            return lst[i];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            result.push_back(lst.front());\n            lst.pop_front();\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/71", "generation": "\n    if(a + b > c && a + c > b && b + c > a){\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w && is_palindrome(q)){\n        return true;\n    }\n    return false;\n}\nbool is_palindrome(vector<int> q){\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i] != q[q.size()-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int changes = 0;\n    int n = arr.size();\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0, sum2=0;\n    for(int i=0; i<lst1.size(); i++)\n        sum1 += lst1[i].size();\n    for(int i=0; i<lst2.size(); i++)\n        sum2 += lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else if(sum1>sum2)\n        return lst2;\n    else{\n        for(int i=0; i<lst1.size(); i++)\n            if(lst1[i].size()<lst2[i].size())\n                return lst1;\n            else if(lst1[i].size()>lst2[i].size())\n                return lst2;\n            else{\n                if(lst1[i]<lst2[i])\n                    return lst1;\n                else\n                    return lst2;\n            }\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a/2; i++){\n        if(a % i == 0){\n            count++;\n        }\n    }\n    if(count == 0){\n        return false;\n    }\n    else{\n        int prime[count];\n        int j = 0;\n        for(int i = 2; i <= a/2; i++){\n            if(a % i == 0){\n                prime[j] = i;\n                j++;\n            }\n        }\n        for(int i = 0; i < j; i++){\n            for(int k = i + 1; k < j; k++){\n                if(prime[i] * prime[k] == a){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==1)\n        return false;\n    int p=log(x)/log(n);\n    if(p==n)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = round(pow(a, (1.0/3.0)));\n    if(cubeRoot*cubeRoot*cubeRoot == a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i]=='2' || num[i]=='3' || num[i]=='5' || num[i]=='7' || num[i]=='B' || num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    for(int i=0; i<s.length()-2; i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    if(s.length()>=3)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(float grade : grades){\n        if(grade == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grade == 3.7)\n            letter_grades.push_back(\"A\");\n        else if(grade == 3.3)\n            letter_grades.push_back(\"A-\");\n        else if(grade == 3.0)\n            letter_grades.push_back(\"B+\");\n        else if(grade == 2.7)\n            letter_grades.push_back(\"B\");\n        else if(grade == 2.3)\n            letter_grades.push_back(\"B-\");\n        else if(grade == 2.0)\n            letter_grades.push_back(\"C+\");\n        else if(grade == 1.7)\n            letter_grades.push_back(\"C\");\n        else if(grade == 1.3)\n            letter_grades.push_back(\"C-\");\n        else if(grade == 1.0)\n            letter_grades.push_back(\"D+\");\n        else if(grade == 0.7)\n            letter_grades.push_back(\"D\");\n        else if(grade == 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len == 0)\n        return false;\n    for(int i = 2; i * i <= len; i++){\n        if(len % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==0)\n        return 0;\n    int count=0;\n    for(int i=1;i<=9;i++){\n        int num=i;\n        for(int j=1;j<n;j++)\n            num=num*10+i;\n        if(num%10==1 || num/10==1)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N%10;\n        N /= 10;\n    }\n    string res = \"\";\n    while(sum){\n        res = to_string(sum%2) + res;\n        sum /= 2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word;\n            word = \"\";\n            result += ' ';\n        }\n        else{\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    for(int i=0; i<res.size(); i++){\n        for(int j=0; j<res.size()-i-1; j++){\n            if(res[j][0] > res[j+1][0] || (res[j][0] == res[j+1][0] && res[j][1] < res[j+1][1])) {\n                swap(res[j], res[j+1]);\n            }\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum = 0;\n    for(int i = 0; i < array.size(); i++){\n        sum += array[i];\n    }\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    }else{\n        sort(array.begin(), array.end());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = s[i] + 2;\n            if(s[i] > 'z'){\n                s[i] = s[i] - 26;\n            }\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 2;\n            if(s[i] > 'Z'){\n                s[i] = s[i] - 26;\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2){\n        return NULL;\n    }\n    sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] != lst[i+1]){\n            return lst[i+1];\n        }\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    string temp = \"\";\n    for(int i=0; i<S.length(); i++){\n        if(S[i] == 'I'){\n            if(temp != \"\"){\n                count++;\n                temp = \"\";\n            }\n        }\n        else{\n            temp += S[i];\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(islower(message[i])){\n            message[i] = toupper(message[i]);\n        }\n        else if(isupper(message[i])){\n            message[i] = tolower(message[i]);\n        }\n        if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U'){\n            message[i] = message[i+1];\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_prime = -1;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>max_prime && lst[i]%2 != 0){\n            max_prime = lst[i];\n        }\n    }\n    int sum = 0;\n    while(max_prime>0){\n        sum += max_prime%10;\n        max_prime /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty())\n        return false;\n    int upper_case=0, lower_case=0;\n    for(auto i=dict.begin();i != dict.end();i++){\n        if(isupper(i->first[0]))\n            upper_case++;\n        else\n            lower_case++;\n        if(upper_case>0 || lower_case>0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool isPrime = true;\n        for(int j = 2; j * j <= i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n"}
{"task_id": "CPP/97", "generation": "\n    int product=0;\n    int sign=1;\n    if(a<0 || b<0){\n        sign=-1;\n        a=abs(a);\n        b=abs(b);\n    }\n    while(b>0){\n        if(b%2==1){\n            product+=a;\n        }\n        a=a*2;\n        b=b/2;\n    }\n    return sign*product;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    if(num>=0){\n        return (int)ceil(num);\n    }\n    else{\n        return (int)floor(num);\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    for(int i=0; i<n; i++){\n        if(n%2==0)\n            result.push_back(n+2*i);\n        else\n            result.push_back(n+2*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] != ',' && s[i] != ' '){\n            word += s[i];\n        }\n        else{\n            words.push_back(word);\n            word = \"\";\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y)\n        return -1;\n    else\n        return y;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n > m) return \"-1\";\n    int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n    double avg = (double)sum / (m - n + 1);\n    int rounded_avg = round(avg);\n    string binary = \"\";\n    while(rounded_avg > 0){\n        binary = to_string(rounded_avg % 2) + binary;\n        rounded_avg /= 2;\n    }\n    return \"0b\" + binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num%2==0){\n            num = num/2;\n        }\n        if(num==1){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<int> sorted_arr;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]>0 && arr[i]<=9){\n            sorted_arr.push_back(arr[i]);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for(int i=0; i<sorted_arr.size(); i++){\n        result.push_back(num_to_word[sorted_arr[i]]);\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> res(n);\n    for(int i=0; i<n; i++){\n        if(i%2==0)\n            res[i] = factorial(i);\n        else\n            res[i] = sum(i);\n    }\n    return res;\n}\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\nint sum(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++)\n        sum += i;\n    return sum;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0, odd_count = 0;\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        int len = str.length();\n        for(int j = 0; j < len/2; j++){\n            if(str[j] != str[len-1-j]){\n                break;\n            }\n            if(j == len/2 - 1){\n                even_count++;\n            }\n        }\n        if(i % 2 == 1){\n            odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int num = abs(n[i]);\n        int sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(n[i] < 0 && sum != 0)\n            sum *= -1;\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.empty())\n        return true;\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        if(arr[i] > arr[(i+1)%n]){\n            int j = i+1;\n            while(j != i){\n                if(arr[j] < arr[(j+1)%n]){\n                    j = (j+1)%n;\n                }\n                else{\n                    break;\n                }\n            }\n            if(j == i){\n                return false;\n            }\n            else{\n                swap(arr[i], arr[j]);\n            }\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count = 0;\n    for(int i=0; i<lst1.size(); i++){\n        if(lst1[i] % 2 != 0){\n            count++;\n        }\n    }\n    for(int i=0; i<lst2.size(); i++){\n        if(lst2[i] % 2 == 0){\n            count++;\n        }\n    }\n    if(count == 0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    for(int i=0; i<test.size(); i++){\n        result[test[i]]++;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==c[0]){\n            continue;\n        }\n        res+=s[i];\n    }\n    string rev=\"\";\n    for(int i=res.size()-1;i>=0;i--){\n        rev+=res[i];\n    }\n    bool palindrome=true;\n    for(int i=0;i<rev.size();i++){\n        if(rev[i]^rev[rev.size()-1-i]){\n            palindrome=false;\n            break;\n        }\n    }\n    return {rev,palindrome};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] - '0' % 2 != 0)\n                count++;\n        }\n        string temp = \"the number of odd elements in the string \";\n        temp += to_string(count);\n        temp += \" of the string \";\n        temp += to_string(i);\n        temp += \" of the input.\";\n        result.push_back(temp);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = nums[0];\n    long long curSum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        if(curSum > 0)\n            curSum += nums[i];\n        else\n            curSum = nums[i];\n        if(curSum < minSum)\n            minSum = curSum;\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n                grid[i][j]=0;\n            }\n        }\n    }\n    return count/capacity;\n}\nint count_buckets(vector<vector<int>> grid,int capacity){\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones(a);\n        int count_b = count_ones(b);\n        if(count_a == count_b)\n            return a < b;\n        return count_a < count_b;\n    });\n    return arr;\n}\nint count_ones(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    int consonant_count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            consonant_count = 0;\n            word = \"\";\n            while(s[i] != ' ' && s[i] != '\\0'){\n                word += s[i];\n                consonant_count++;\n                i++;\n            }\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.length()-1; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos){\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s = lst[0] + lst[1];\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '(') count++;\n        else if(s[i] == ')') count--;\n        if(count < 0) return \"No\";\n    }\n    if(count == 0) return \"Yes\";\n    else return \"No\";\n}\n\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(), arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1; i>=0 && k>0; i--, k--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]<10 && arr[i]>-10){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0)\n            collatz.push_back(n);\n        n = n % 2 ? 3*n + 1 : n/2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.length() != 10)\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 0)\n        return false;\n    if(month == 2){\n        if(day > 29)\n            return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30)\n            return false;\n    }\n    else{\n        if(day > 31)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    if(txt.find(' ') == string::npos && txt.find(',') == string::npos){\n        int count = 0;\n        for(char c : txt){\n            if(islower(c) && (c - 'a') % 2 != 0) count++;\n        }\n        return {to_string(count)};\n    }\n    else if(txt.find(' ') != string::npos)\n        return {string(txt, 0, txt.find(' '))};\n    else\n        return {string(txt, 0, txt.find(','))};\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n    int n = lst.size();\n    if(n==0 || n==1)\n        return true;\n    int count = 0;\n    for(int i=0; i<n-1; i++){\n        if(lst[i]==lst[i+1])\n            count++;\n        if(count>1)\n            return false;\n    }\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<n; i++){\n        if(lst[i] != lst[i+1])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    else if(start == end)\n        return \"NO\";\n    else{\n        int length = end - start;\n        if(length == 1)\n            return \"NO\";\n        else if(length == 2)\n            return \"YES\";\n        else{\n            for(int i = 2; i * i <= length; i++){\n                if(length % i == 0){\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }\n    }\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0)\n        return NULL;\n    int sum=0;\n    int sign=1;\n    for(int i=0;i<arr.size();i++){\n        sum+=abs(arr[i]);\n        sign*=(arr[i]>0?1:-1);\n    }\n    return sign*sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<k; i++){\n        int min_val = INT_MAX;\n        int min_x = -1, min_y = -1;\n        for(int x=0; x<n; x++){\n            for(int y=0; y<n; y++){\n                if(grid[x][y] < min_val){\n                    min_val = grid[x][y];\n                    min_x = x;\n                    min_y = y;\n                }\n            }\n        }\n        res.push_back(min_val);\n        grid[min_x][min_y] = INT_MAX;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n+1);\n    for(int i=0;i<=n;i++){\n        if(i==0)\n            res[i] = 0;\n        else if(i%2==0)\n            res[i] = 3 + res[i-1]/2;\n        else\n            res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n % 10;\n        if(digit % 2 != 0)\n            product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '[')\n            count++;\n        else if(str[i] == ']')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]*lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.empty()){\n        return false;\n    }\n    char last_char = txt[txt.length()-1];\n    if(last_char >= 'a' && last_char <= 'z'){\n        return false;\n    }\n    else if(last_char >= 'A' && last_char <= 'Z'){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n"}
{"task_id": "CPP/135", "generation": "\n    for(int i=arr.size()-1; i>0; i--){\n        if(arr[i] >= arr[i-1])\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = -1000000000;\n    int min_pos = 1000000000;\n    int max_neg_val = -1000000000;\n    int min_pos_val = 1000000000;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>max_neg){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && lst[i]<min_pos){\n            min_pos = lst[i];\n        }\n    }\n    if(max_neg != -1000000000){\n        return {max_neg, min_pos};\n    }\n    else if(min_pos != 1000000000){\n        return {max_neg, min_pos};\n    }\n    else{\n        return {max_neg, min_pos};\n    }\n}\n\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return NULL;\n    }\n    if(a.type() == typeid(int) || a.type() == typeid(float)){\n        if(a.get<float>() == b.get<float>()){\n            return NULL;\n        }\n        else{\n            return a;\n        }\n    }\n    else if(a.type() == typeid(string)){\n        string a_str = a.get<string>();\n        string b_str = b.get<string>();\n        replace(a_str.begin(), a_str.end(), ',', '.');\n        replace(b_str.begin(), b_str.end(), ',', '.');\n        if(a_str == b_str){\n            return NULL;\n        }\n        else{\n            return a;\n        }\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2 != 0)\n        return false;\n    int count = 0;\n    for(int i = 2; i <= n/2; i += 2){\n        if(n - i == 0)\n            count++;\n        else if(n - i == 2)\n            count += 2;\n    }\n    if(count == 4)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n\nlong long factorial(int n){\n    if(n == 0)\n        return 1;\n    else\n        return n * factorial(n-1);\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i++;\n        }\n    }\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' ' && text[i+2] == ' '){\n            text.replace(i, 1, \"-\");\n            i++;\n        }\n    }\n    return text;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int n = file_name.length();\n    int count_dot = 0, count_alpha = 0, count_num = 0;\n    for(int i=0; i<n; i++){\n        if(file_name[i] == '.')\n            count_dot++;\n        if((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\n            count_alpha++;\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n            count_num++;\n    }\n    if(count_dot != 1 || count_alpha == 0 || count_num > 3 || count_num == 0)\n        return \"No\";\n    for(int i=0; i<n-1; i++){\n        if(file_name[i] == '.' && file_name[i+1] == '.')\n            return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0)\n            sum += lst[i]*lst[i]*lst[i];\n        else if(i%4 == 0)\n            sum += lst[i]*lst[i]*lst[i]*lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int i = 0;\n    while(i < sentence.length()){\n        int start = i;\n        while(i < sentence.length() && sentence[i] != ' ')\n            i++;\n        int len = i - start;\n        if(is_prime(len)){\n            result += sentence.substr(start, len);\n            result += \" \";\n        }\n        i++;\n    }\n    result.pop_back();\n    return result;\n}\nbool is_prime(int n){\n    if(n <= 1)\n        return false;\n    for(int i = 2; i*i <= n; i++)\n        if(n % i == 0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1, den1, num2, den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n    sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    if(num1 * den2 == num2 * den1)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    // Your code here\n    for(int i=0; i<nums.size(); i++){\n        int sum = 0;\n        int temp = nums[i];\n        while(temp>0){\n            sum += abs(temp%10);\n            temp /= 10;\n        }\n        nums[i] = sum;\n    }\n    sort(nums.begin(), nums.end());\n    for(int i=0; i<nums.size(); i++){\n        for(int j=i+1; j<nums.size(); j++){\n            if(nums[i] == nums[j]){\n                if(i>j){\n                    swap(nums[i], nums[j]);\n                }\n            }\n        }\n    }\n    return nums;\n}\n\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i] > 10 && (nums[i]%10 == 1 || nums[i]%10 == 3 || nums[i]%10 == 5 || nums[i]%10 == 7 || nums[i]%10 == 9)){\n            int firstDigit = nums[i]/100000000;\n            int lastDigit = nums[i]%10;\n            if(firstDigit%2 != 0 && lastDigit%2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0; i<n; i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0; i<n; i++){\n        for(int j=i+1; j<n; j++){\n            for(int k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int pos1 = -1, pos2 = -1;\n    for(int i=0; i<8; i++){\n        if(planets[i] == planet1) pos1 = i;\n        if(planets[i] == planet2) pos2 = i;\n        if(pos1 != -1 && pos2 != -1) break;\n    }\n    if(pos1 == -1 || pos2 == -1) return result;\n    if(pos1 < pos2)\n        for(int i=pos1+1; i<pos2; i++)\n            result.push_back(planets[i]);\n    else\n        for(int i=pos2+1; i<pos1; i++)\n            result.push_back(planets[i]);\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].size() % 2 == 0)\n            result.push_back(lst[i]);\n    }\n    sort(result.begin(), result.end());\n    sort(result.begin(), result.end(), [](string a, string b) {\n        if(a.size() == b.size())\n            return a < b;\n        return a.size() < b.size();\n    });\n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "\n    int i,flag=0;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0 && n>1){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension = \"\";\n    for(int i=0; i<extensions.size(); i++){\n        int CAP = 0, SM = 0;\n        for(int j=0; j<extensions[i].size(); j++){\n            if(isupper(extensions[i][j])){\n                CAP++;\n            }\n            else if(islower(extensions[i][j])){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "\n    if(b.size() > a.size()){\n        return false;\n    }\n    string temp = b;\n    for(int i=0; i<b.size(); i++){\n        temp.push_back(b[i]);\n        if(a.find(temp) != string::npos){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0, odd_count = 0;\n    while(num){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(int i=0; i<words.size(); i++){\n        int unique_count = 0;\n        vector<char> char_set(256, -1);\n        for(int j=0; j<words[i].length(); j++){\n            int index = words[i][j];\n            if(char_set[index] == -1){\n                unique_count++;\n                char_set[index] = 1;\n            }\n        }\n        if(unique_count > max_unique){\n            max_unique = unique_count;\n            max_word = words[i];\n        }\n        else if(unique_count == max_unique){\n            if(words[i] < max_word){\n                max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(remaining >= need){\n        number += need;\n        remaining -= need;\n    }\n    else{\n        number += remaining;\n        remaining = 0;\n    }\n    return {number, remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\"){\n            operand[i]=operand[i]+operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            operand[i]=operand[i]-operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            operand[i]=operand[i]*operand[i+1];\n        }\n        else if(operato[i]==\"//\"){\n            operand[i]=floor(operand[i]/operand[i+1]);\n        }\n        else if(operato[i]==\"**\"){\n            operand[i]=pow(operand[i],operand[i+1]);\n        }\n    }\n    return operand[0];\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>='a' && s[i]<='z'){\n            s[i] = s[i] - 32;\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            s[i] = s[i] + 32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty())\n        return \"\";\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    sprintf(mdString, \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\",\n            digest[0], digest[1], digest[2], digest[3],\n            digest[4], digest[5], digest[6], digest[7],\n            digest[8], digest[9], digest[10], digest[11],\n            digest[12], digest[13], digest[14], digest[15]);\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        result.push_back(i);\n    }\n    return result;\n}\n"}
