{"task_id": "CPP/0", "generation": "\n    for(int i = 0; i < numbers.size() - 1; i++){\n        if(abs(numbers[i] - numbers[i + 1]) < threshold){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\nvector<string> result;\nstring current_group;\nfor(int i=0;i<paren_string.size();i++){\nif(paren_string[i]=='('){\ncurrent_group+=\"(\";\n}else if(paren_string[i]==')'){\nif(current_group.size()>0){\nresult.push_back(current_group);\ncurrent_group=\"\";\n}else{\ncurrent_group+=\")\";\n}\n}\n}\nif(current_group.size()>0){\nresult.push_back(current_group);\n}\nreturn result;\n}\n"}
{"task_id": "CPP/2", "generation": "\nfloat integer_part = floor(number);\nreturn number - integer_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n} "}
{"task_id": "CPP/4", "generation": "\n  float sum = 0.0;\n  float mean = 0.0;\n  float mad = 0.0;\n  for (int i = 0; i < numbers.size(); i++){\n    sum += numbers[i];\n  }\n  mean = sum / numbers.size();\n  for (int i = 0; i < numbers.size(); i++){\n    mad += abs(numbers[i] - mean);\n  }\n  mad = mad / numbers.size();\n  return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\nvector<int> result;\nfor(int i = 0; i < numbers.size(); i++){\nresult.push_back(numbers[i]);\nif(i < numbers.size() - 1){\nresult.push_back(delimeter);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    for(string group : split_string(paren_string, \" \")){\n        int max_depth = 0;\n        int current_depth = 0;\n        for(char c : group){\n            if(c == '(') current_depth++;\n            else if(c == ')') current_depth--;\n            max_depth = max(max_depth, current_depth);\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\nvector<string> split_string(string str, string delimiter){\n    vector<string> tokens;\n    size_t prev = 0, pos = 0;\n    do {\n        pos = str.find(delimiter, prev);\n        if (pos == string::npos) pos = str.length();\n        string token = str.substr(prev, pos - prev);\n        if (!token.empty()) tokens.push_back(token);\n        prev = pos + delimiter.length();\n    } while (pos < str.length());\n    return tokens;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for (int i = 0; i < strings.size(); i++){\n        if (strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> max_until_moment;\n    int max = numbers[0];\n    max_until_moment.push_back(max);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        max_until_moment.push_back(max);\n    }\n    return max_until_moment;\n}\n"}
{"task_id": "CPP/10", "generation": "\ndef make_palindrome(s):\n    \"\"\"Return the shortest palindrome that begins with the supplied string.\"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    i = 0\n    while i < len(s) and s[i] == s[-1 - i]:\n        i += 1\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return s + s[:i][::-1]\n\n# Test the function\nprint(make_palindrome(''))  # Output: ''\nprint(make_palindrome('cat'))  # Output: 'catac'\nprint(make_palindrome('cata'))  # Output: 'catac'  # Output: 'catac'\n"}
{"task_id": "CPP/11", "generation": "\nstring result;\nfor(int i=0;i<a.length();i++){\nif(a[i]=='1'&&b[i]=='1')result+='0';\nelse if(a[i]=='0'&&b[i]=='0')result+='0';\nelse result+='1';\n}\nreturn result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size() == 0) return \"\";\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n} "}
{"task_id": "CPP/13", "generation": "\nif(b == 0) return a;\nelse return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "\nvector<string> prefixes;\nfor(int i=1;i<=str.length();i++){\nstring prefix=str.substr(0,i);\nprefixes.push_back(prefix);\n}\nreturn prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\nstring result;\nfor(int i=0;i<=n;i++)\nresult+=to_string(i)+\" \";\nreturn result;\n}\n"}
{"task_id": "CPP/16", "generation": "\nvector<char> v;\nfor(int i=0;i<str.length();i++){\nchar c=str[i];\nif(islower(c)){\nc=toupper(c);\n}\nif(find(v.begin(),v.end(),c)==v.end()){\nv.push_back(c);\n}\n}\nreturn v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n\tvector<int> result;\n\tfor(int i = 0; i < music_string.length(); i++){\n\t\tif(music_string[i] == 'o'){\n\t\t\tresult.push_back(4);\n\t\t}\n\t\telse if(music_string[i] == 'o' && music_string[i+1] == '|'){\n\t\t\tresult.push_back(2);\n\t\t\ti++;\n\t\t}\n\t\telse if(music_string[i] == '.' && music_string[i+1] == '|'){\n\t\t\tresult.push_back(1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n"}
{"task_id": "CPP/18", "generation": "\nint count=0;\nint i=0;\nwhile(i<str.length()){\nif(str.substr(i,substring.length())==substring){\ncount++;\ni+=substring.length();\n}else{\ni++;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_dict;\n    num_dict['zero'] = 0;\n    num_dict['one'] = 1;\n    num_dict['two'] = 2;\n    num_dict['three'] = 3;\n    num_dict['four'] = 4;\n    num_dict['five'] = 5;\n    num_dict['six'] = 6;\n    num_dict['seven'] = 7;\n    num_dict['eight'] = 8;\n    num_dict['nine'] = 9;\n    string sorted_numbers;\n    string word;\n    for(int i = 0; i < numbers.length(); i++){\n        if(numbers[i] == ' '){\n            sorted_numbers += ' ';\n        }else{\n            word += numbers[i];\n        }\n        if(numbers[i+1] == ' '){\n            sorted_numbers += num_dict[word];\n            word = \"\";\n        }\n    }\n    int temp;\n    for(int i = 0; i < sorted_numbers.length(); i++){\n        for(int j = i+1; j < sorted_numbers.length(); j++){\n            if(sorted_numbers[i] > sorted_numbers[j]){\n                temp = sorted_numbers[i];\n                sorted_numbers[i] = sorted_numbers[j];\n                sorted_numbers[j] = temp;\n            }\n        }\n    }\n    return sorted_numbers;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000.0;\n    int min_index1 = 0, min_index2 = 0;\n    for(int i = 0; i < numbers.size() - 1; i++){\n        float diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff){\n            min_diff = diff;\n            min_index1 = i;\n            min_index2 = i + 1;\n        }\n    }\n    return vector<float> {numbers[min_index1], numbers[min_index2]};\n}\n"}
{"task_id": "CPP/21", "generation": "\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int i = 1; i < numbers.size(); i++){\n    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n  }\n  vector<float> rescaled;\n  for (int i = 0; i < numbers.size(); i++){\n    rescaled.push_back((numbers[i] - min) / (max - min));\n  }\n  return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "\n\tvector<int> result;\n\tfor (list_any::iterator it = values.begin(); it != values.end(); ++it){\n\t\tif (it->type() == typeid(int)){\n\t\t\tresult.push_back(boost::any_cast<int>(*it));\n\t\t}\n\t}\n\treturn result;\n}\n"}
{"task_id": "CPP/23", "generation": "\nreturn str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "\nint i;\nfor(i=n-1;i>0;i--)\nif(n%i==0)\nreturn i;\nreturn 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\nvector<int> factors;\nint i = 2;\nwhile(i * i <= n){\nif(n % i == 0){\nwhile(n % i == 0){\nfactors.push_back(i);\nn /= i;\n}\n}\nelse\ni++;\n}\nif(n > 1)\nfactors.push_back(n);\nreturn factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i = 0; i < numbers.size(); i++){\n        if(find(result.begin(), result.end(), numbers[i]) == result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\nstring result = \"\";\nfor (int i = 0; i < strings.size(); i++){\nresult += strings[i];\n}\nreturn result;\n}\n"}
{"task_id": "CPP/29", "generation": "\nvector<string> result;\nfor (int i = 0; i < strings.size(); i++){\nif (strings[i].find(prefix) == 0){\nresult.push_back(strings[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/30", "generation": "\nvector<float> result;\nfor(int i=0; i<l.size(); i++){\nif(l[i]>0){\nresult.push_back(l[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/31", "generation": "\nif(n<=1) return false;\nif(n<=3) return true;\nif(n%2==0 || n%3==0) return false;\nlong long i;\nfor(i=5;i*i<=n;i+=6)\nif(n%i==0 || n%(i+2)==0) return false;\nreturn true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        res = res * x + xs[i];\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    /* \n    Finds a zero of a polynomial with coefficients xs. xs must have even number of coefficients and largest non zero coefficient. xs[0] is a constant term. xs[1] is a coefficient of x. xs[2] is a coefficient of x^2. xs[3] is a coefficient of x^3. xs[4] is a coefficient of x^4. xs[5] is a coefficient of x^5. xs[6] is a coefficient of x^6. xs[7] is a coefficient of x^7. xs[8] is a coefficient of x^8. xs[9] is a coefficient of x^9. xs[10] is a coefficient of x^10. xs[11] is a coefficient of x^11. xs[12] is a coefficient of x^12. xs[13] is a coefficient of x^13. xs[14] is a coefficient of x^14. xs[15] is a coefficient of x^15. xs[16] is a coefficient of x^16. xs[17] is a coefficient of x^17. xs[18] is a coefficient of x^18. xs[19] is a coefficient of x^19. xs[20] is a coefficient of x^20. xs[21] is a coefficient of x^21. xs[22] is a coefficient of x^23. xs[23] is a coefficient of x^24. xs[24] is a coefficient of x^25. xs[25] is a coefficient of x^26. xs[26] is a coefficient of x^27. xs[27] is a coefficient of x^28. xs[28] is a coefficient of x^29. xs[29] is a coefficient of x^30. xs[30] is a coefficient of x^31. xs[31] is a coefficient of x^32. xs[32] is a coefficient of x^33. xs[33] is a coefficient of x^34. xs[34] is a coefficient of x^35. xs[35] is a coefficient of x^36. xs[36] is a coefficient of x^"}
{"task_id": "CPP/33", "generation": "\n    vector<int> l2;\n    for(int i = 0; i < l.size(); i++){\n        if(i % 3 == 0){\n            l2.push_back(l[i]);\n        }\n        else{\n            l2.push_back(l[i]);\n            sort(l2.begin() + i, l2.begin() + i + 1);\n        }\n    }\n    return l2;\n}\n"}
{"task_id": "CPP/34", "generation": "\n\tsort(l.begin(), l.end());\n\tl.erase(unique(l.begin(), l.end()), l.end());\n\treturn l;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\nint count = 0;\nfor(int i = 1; i < n; i++){\nif(i % 11 == 0 || i % 13 == 0){\ncount += count_7(i);\n}\n}\nreturn count;\n}\nint count_7(int n){\nint count = 0;\nwhile(n > 0){\ncount += n % 10 == 7;\nn /= 10;\n}\nreturn count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n  vector<float> l2;\n  for(int i=0; i<l.size(); i++){\n    if(i%2==0){\n      l2.push_back(l[i]);\n    }\n    else{\n      l2.push_back(l[i]);\n    }\n  }\n  sort(l2.begin(), l2.end());\n  return l2;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decode_cyclic(encoded_str) {\n    let decoded_str = \"\";\n    let i = 0;\n    while (i < encoded_str.length) {\n        let char = encoded_str[i];\n        let shift = parseInt(encoded_str[i + 1]);\n        let decoded_char = String.fromCharCode(char.charCodeAt(0) - shift);\n        decoded_str += decoded_char;\n        i += 2;\n    }\n    return decoded_str;\n}\n"}
{"task_id": "CPP/39", "generation": "\nint i=0,j=0,k=0;\nint a[100]={0};\nwhile(i<n){\na[i]=fibonacci(j);\nj++;\nif(is_prime(a[i])){\nk++;\nif(k==n){\nreturn a[i];\n}\n}\ni++;\n}\nreturn 0;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            for(int k = j + 1; k < l.size(); k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision = 0;\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n            if(i != j){\n                collision++;\n            }\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i = 0; i < l.size(); i++){\n        for(int j = i + 1; j < l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\nstring s;\nwhile(x>0){\ns=to_string(x%base)+s;\nx/=base;\n}\nreturn s;\n}\n"}
{"task_id": "CPP/45", "generation": "\nreturn (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\nint a=0,b=0,c=0,d=0;\nfor(int i=1;i<=n;i++){\nd=c+b+a;\na=b;\nb=c;\nc=d;\n}\nreturn d;\n}\n"}
{"task_id": "CPP/47", "generation": "\nsort(l.begin(), l.end());\nint n = l.size();\nif(n%2 == 0){\nreturn (l[n/2 - 1] + l[n/2])/2.0;\n}else{\nreturn l[n/2];\n}\n}\n"}
{"task_id": "CPP/48", "generation": "\nint i = 0, j = text.length() - 1;\nwhile (i < j){\nif (text[i] != text[j])\nreturn false;\ni++;\nj--;\n}\nreturn true;\n}\n"}
{"task_id": "CPP/49", "generation": "\nint r=1;\nwhile(n>0){\nif(n%2==1)r=(long long)r*p%p;\nn=n/2;\np=p*p%p;\n}\nreturn r;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i])){\n                decoded += char(((s[i] - 'A' + 3) % 26) + 'A');\n            }\n            else{\n                decoded += char(((s[i] - 'a' + 3) % 26) + 'a');\n            }\n        }\n        else{\n            decoded += s[i];\n        }\n    }\n    return decoded;\n}\nstring encode_shift(string s){\n    /* takes as input string and returns encoded string. */\n    string encoded = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i])){\n                encoded += char(((s[i] - 'A' + 3) % 26) + 'A');\n            }\n            else{\n                encoded += char(((s[i] - 'a' + 3) % 26) + 'a');\n            }\n        }\n        else{\n            encoded += s[i];\n        }\n    }\n    return encoded;\n}\n"}
{"task_id": "CPP/51", "generation": "\nstring vowels = \"aeiouAEIOU\";\nstring result = \"\";\nfor(int i = 0; i < text.length(); i++){\nif(vowels.find(text[i]) == string::npos){\nresult += text[i];\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n  for(int i = 0; i < l.size(); i++){\n    if(l[i] > t){\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\nreturn x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\nsort(s0.begin(),s0.end());\nsort(s1.begin(),s1.end());\nreturn s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\nif(n<=1) return n;\nelse return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n  int count = 0;\n  for(int i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '<'){\n      count++;\n    }else if(brackets[i] == '>'){\n      count--;\n      if(count < 0){\n        return false;\n      }\n    }\n  }\n  return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\nbool increasing = true;\nbool decreasing = true;\nfor(int i = 0; i < l.size() - 1; i++){\nif(l[i] > l[i + 1]){\nincreasing = false;\nbreak;\n}\nif(l[i] < l[i + 1]){\ndecreasing = false;\nbreak;\n}\n}\nreturn increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> l3;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]==l2[j]){\n            l3.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    sort(l3.begin(),l3.end());\n    return l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\nint i;\nfor(i=2;i*i<=n;i++){\nif(n%i==0){\nn/=i;\ni=2;\n}\n}\nreturn n;\n}\n"}
{"task_id": "CPP/60", "generation": "\nint sum = 0;\nfor (int i = 1; i <= n; i++)\nsum += i;\nreturn sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n  int count = 0;\n  for(int i = 0; i < brackets.length(); i++){\n    if(brackets[i] == '('){\n      count++;\n    } else if(brackets[i] == ')'){\n      count--;\n      if(count < 0){\n        return false;\n      }\n    }\n  }\n  return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n  vector<float> result;\n  for(int i = 1; i < xs.size(); i++){\n    result.push_back(xs[i] * i);\n  }\n  return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\nif(n<2) return 0;\nif(n==2) return 1;\nint a=0,b=0,c=1;\nfor(int i=3;i<=n;i++){\na=b;\nb=c;\nc=a+b+c;\n}\nreturn c;\n}\n"}
{"task_id": "CPP/64", "generation": "\nint count = 0;\nfor(int i = 0; i < s.length(); i++){\nif(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\ncount++;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/65", "generation": "\nstring s=to_string(x);\nif(shift>=s.length())shift%=s.length();\nstring res=s.substr(s.length()-shift)+s.substr(0,s.length()-shift);\nreturn res;\n} "}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(isupper(s[i])){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0;\n    int oranges = 0;\n    int mango = 0;\n    int i = 0;\n    while(s[i] != ' '){\n        apples = apples * 10 + (s[i] - '0');\n        i++;\n    }\n    i++;\n    while(s[i] != ' '){\n        oranges = oranges * 10 + (s[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < s.length()){\n        mango = mango * 10 + (s[i] - '0');\n        i++;\n    }\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min = 100000;\n    int min_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index == -1){\n        return {};\n    }\n    return {min, min_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] <= lst.size() && lst.count(lst[i]) >= lst[i]){\n            if(lst[i] > max){\n                max = lst[i];\n            }\n        }\n    }\n    if(max == 0){\n        return -1;\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    if(lst.size() == 0){\n        return lst;\n    }\n    int max = *max_element(lst.begin(), lst.end());\n    vector<int> new_lst;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            new_lst.push_back(lst[i]);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] != max){\n            new_lst.push_back(lst[i]);\n        }\n    }\n    return new_lst;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else return -1;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n    }\n    for(int i = 0; i < q.size(); i++){\n        if(q[i] != q[q.size()-i-1]){\n            return false;\n        }\n    }\n    return true;\n} // 1+2 is less than the maximum possible weight, but it's unbalanced. will_it_fly([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than the maximum possible weight. will_it_fly([3, 2, 3], 9) \u279e True # 3+2+3 is less than the maximum possible weight, and it's balanced. will_it_fly([3], 5) \u279e True # 3 is less than the maximum possible weight, and it's balanced. */"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].size();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int i = 2;\n    int count = 0;\n    while (a > 1){\n        if (a % i == 0){\n            a = a / i;\n            count++;\n        }\n        else\n            i++;\n    }\n    if (count == 3)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    double y=pow(n,log(x)/log(n));\n    return y==x;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = round(pow(a, 1.0/3));\n    return pow(b, 3) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    string result = \"db\" + binary + \"db\";\n    return result;\n}\n"}
{"task_id": "CPP/80", "generation": "\n    int len = s.length();\n    if(len < 3) return false;\n    for(int i = 0; i < len - 2; i++){\n        if(s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] > 3.7){\n            letter_grades.push_back(\"A+\");\n        }else if(grades[i] > 3.3){\n            letter_grades.push_back(\"A\");\n        }else if(grades[i] > 3.0){\n            letter_grades.push_back(\"A-\");\n        }else if(grades[i] > 2.7){\n            letter_grades.push_back(\"B+\");\n        }else if(grades[i] > 2.3){\n            letter_grades.push_back(\"B\");\n        }else if(grades[i] > 2.0){\n            letter_grades.push_back(\"B-\");\n        }else if(grades[i] > 1.7){\n            letter_grades.push_back(\"C+\");\n        }else if(grades[i] > 1.3){\n            letter_grades.push_back(\"C\");\n        }else if(grades[i] > 1.0){\n            letter_grades.push_back(\"C-\");\n        }else if(grades[i] > 0.7){\n            letter_grades.push_back(\"D+\");\n        }else if(grades[i] > 0.0){\n            letter_grades.push_back(\"D\");\n        }else{\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= length / 2; i++)\n        if (length % i == 0) return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 2;\n    int count=0;\n    for(int i=1;i<=9;i++){\n        count+=starts_one_ends(n-1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string res = \"\";\n    while(N > 0){\n        res = (char)(N%2 + '0') + res;\n        N /= 2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            s.insert(i+1,word);\n            i+=word.length();\n            word.clear();\n        }\n        else word.push_back(s[i]);\n    }\n    sort(word.begin(),word.end());\n    s.insert(s.length(),word);\n    return s;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int, int>> res;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back(make_pair(i, j));\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    for(int i = 0; i < res.size(); i++){\n        res[i].second = lst[res[i].first].size() - 1 - res[i].second;\n    }\n    sort(res.begin(), res.end());\n    return vector<vector<int>>(res.begin(), res.end());\n}\n"}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    int first = array[0];\n    int last = array[array.size() - 1];\n    int sum = first + last;\n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    }else{\n        sort(array.begin(), array.end());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++){\n        for(int j = 0; j < alphabet.length(); j++){\n            if(s[i] == alphabet[j]){\n                encrypted += alphabet[(j+2)%26];\n            }\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n\tif(lst.size() < 2) return NULL;\n\tsort(lst.begin(), lst.end());\n\tfor(int i = 1; i < lst.size(); i++){\n\t\tif(lst[i] != lst[i-1]) return lst[i];\n\t}\n\treturn NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n\tint count = 0;\n\tint i = 0;\n\twhile(i < S.length()){\n\t\tif(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n\t\t\tif(i > 0 && S[i-1] == 'I'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if (a==b+c || b==a+c || c==a+b)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiou\";\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(isupper(message[i])){\n            encoded += tolower(message[i]);\n        } else {\n            encoded += toupper(message[i]);\n        }\n        if(vowels.find(message[i]) != string::npos){\n            int index = vowels.find(message[i]);\n            encoded += vowels[(index+2)%5];\n        }\n    }\n    return encoded;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int num = lst[i];\n        int count = 0;\n        if(num == 0) continue;\n        while(num > 0){\n            if(num % 2 == 0) count++;\n            num = num / 2;\n        }\n        if(count == 1) max = max > num ? max : num;\n    }\n    int sum = 0;\n    while(max > 0){\n        sum = sum + max % 10;\n        max = max / 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        if(it->first[0] >= 'a' && it->first[0] <= 'z'){\n            if(it->first[0] != 'a'){\n                all_lower = false;\n            }\n        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z'){\n            if(it->first[0] != 'A'){\n                all_upper = false;\n            }\n        }\n        else{\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool is_prime = true;\n        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = a%10;\n    int unit_digit_b = b%10;\n    return unit_digit_a*unit_digit_b;\n}\n"}
{"task_id": "CPP/98", "generation": "\n\tint count = 0;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(i % 2 == 0 && isupper(s[i]) && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int integer = (int)num;\n    if (num - integer >= 0.5) {\n        return integer + 1;\n    } else {\n        return integer;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            pile.push_back(i + 1);\n        }else{\n            pile.push_back(i - 1);\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','||s[i]==' '){\n            if(word.length()>0){\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word.push_back(s[i]);\n        }\n    }\n    if(word.length()>0){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(x>y) return -1;\n    int max_num = 0;\n    for(int i=x;i<=y;i++){\n        if(i%2==0) max_num = i;\n    }\n    return max_num;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    int sum=0;\n    for(int i=n;i<=m;i++) sum+=i;\n    double avg=(double)sum/(m-n+1);\n    int avg2=(int)round(avg);\n    string s=bitset<32>(avg2).to_string();\n    while(s.size()<32) s=\"0\"+s;\n    return s.substr(s.size()-32,s.size());\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n                temp/=10;\n            }else{\n                break;\n            }\n        }\n        if(temp==0){\n            continue;\n        }\n        bool flag=true;\n        for(int j=0;j<result.size();j++){\n            if(result[j]==temp){\n                flag=false;\n                break;\n            }\n        }\n        if(flag){\n            result.push_back(temp);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(m.find(arr[i]) != m.end()){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    sort(res.begin(), res.end());\n    reverse(res.begin(), res.end());\n    return res;\n}\nvector<string> sort_and_reverse(vector<int> arr){\n    vector<int> temp;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n        }\n    }\n    sort(temp.begin(), temp.end());\n    reverse(temp.begin(), temp.end());\n    return by_length(temp);\n}\n"}
{"task_id": "CPP/106", "generation": "\n\tvector<int> res(n);\n\tfor(int i = 0; i < n; i++){\n\t\tif(i % 2 == 0){\n\t\t\tint fact = 1;\n\t\t\tfor(int j = 1; j <= i; j++){\n\t\t\t\tfact *= j;\n\t\t\t}\n\t\t\tres[i] = fact;\n\t\t}else{\n\t\t\tint sum = 0;\n\t\t\tfor(int j = 1; j <= i; j++){\n\t\t\t\tsum += j;\n\t\t\t}\n\t\t\tres[i] = sum;\n\t\t}\n\t}\n\treturn res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2, 0);\n    for(int i = 1; i <= n; i++){\n        string str = to_string(i);\n        if(str == string(str.rbegin(), str.rend())){\n            if(i % 2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int sum = 0;\n        int num = abs(n[i]);\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd = 0;\n    for(int i = 0; i < lst1.size(); i++){\n        if(lst1[i] % 2 != 0){\n            odd++;\n        }\n    }\n    for(int i = 0; i < lst2.size(); i++){\n        if(lst2[i] % 2 != 0){\n            odd--;\n        }\n    }\n    if(odd == 0){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "\n\tmap<char,int> result;\n\tif(test.empty()) return result;\n\tstring word;\n\tfor(int i=0;i<test.length();i++){\n\t\tif(test[i]==' '){\n\t\t\tif(!word.empty()){\n\t\t\t\tif(result.find(word[0])!=result.end()) result[word[0]]++;\n\t\t\t\telse result[word[0]]=1;\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t}\n\t\telse word+=test[i];\n\t}\n\tif(!word.empty()){\n\t\tif(result.find(word[0])!=result.end()) result[word[0]]++;\n\t\telse result[word[0]]=1;\n\t}\n\tint max=0;\n\tfor(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n\t\tif(it->second>max) max=it->second;\n\t}\n\tmap<char,int> temp;\n\tfor(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n\t\tif(it->second==max) temp[it->first]=it->second;\n\t}\n\treturn temp;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> result;\n    string temp = s;\n    for(int i = 0; i < c.length(); i++){\n        temp.erase(remove(temp.begin(), temp.end(), c[i]), temp.end());\n    }\n    result.push_back(temp);\n    string reversed = temp;\n    reverse(reversed.begin(), reversed.end());\n    result.push_back(reversed);\n    return result;\n}\nbool is_palindrome(string s){\n    string reversed = s;\n    reverse(reversed.begin(), reversed.end());\n    return s == reversed;\n}\n"}
{"task_id": "CPP/113", "generation": "\n\tvector<string> result;\n\tfor(int i=0;i<lst.size();i++){\n\t\tint count=0;\n\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]-'0'%2==1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tstring temp=\"the number of odd elements \"+to_string(count)+\"n the str\"+to_string(count)+\"ng \"+to_string(count)+\" of the \"+to_string(count)+\"nput.\";\n\t\tresult.push_back(temp);\n\t}\n\treturn result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long minSum = 0;\n    long long currentSum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill = 0;\n    for(int i = 0; i < grid.size(); i++){\n        int fill = 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                fill += capacity;\n            }\n        }\n        max_fill = max(max_fill,fill);\n    }\n    return max_fill;\n}\nint min_bucket(vector<vector<int>> grid,int capacity){\n    int min_bucket = 0;\n    for(int i = 0; i < grid.size(); i++){\n        int fill = 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                fill += capacity;\n            }\n        }\n        min_bucket += (fill + capacity - 1) / capacity;\n    }\n    return min_bucket;\n}\nint min_bucket_times(vector<vector<int>> grid,int capacity){\n    int max_fill = max_fill(grid,capacity);\n    int min_bucket = min_bucket(grid,capacity);\n    return max_fill == 0 ? 0 : min_bucket - max_fill + 1;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b){\n        int count_a = 0, count_b = 0;\n        while(a > 0){\n            if(a % 2 == 1) count_a++;\n            a = a / 2;\n        }\n        while(b > 0){\n            if(b % 2 == 1) count_b++;\n            b = b / 2;\n        }\n        if(count_a == count_b) return a < b;\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n        }\n        else{\n            if(word.length()>=n){\n                int count=0;\n                for(int j=0;j<word.length();j++){\n                    if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                        count++;\n                    }\n                }\n                if(count==n){\n                    result.push_back(word);\n                }\n            }\n            word=\"\";\n        }\n    }\n    if(word.length()>=n){\n        int count=0;\n        for(int j=0;j<word.length();j++){\n            if(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\n                count++;\n            }\n        }\n        if(count==n){\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    for(int i = n-1; i >= 0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(i+1 < n && vowels.find(word[i+1]) == string::npos){\n                return word.substr(i,1);\n            }\n            else if(i-1 >= 0 && vowels.find(word[i-1]) == string::npos){\n                return word.substr(i,1);\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == '('){\n                open++;\n            }else{\n                open--;\n                if(open < 0){\n                    return \"No\";\n                }\n            }\n        }\n        open = 0;\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n\tsort(arr.begin(),arr.end());\n\treverse(arr.begin(),arr.end());\n\treturn vector<int>(arr.begin(),arr.begin()+k);\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 != 0 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] <= 9 && arr[i] >= 1){\n            sum += arr[i];\n        }\n        else if(arr[i] <= 99 && arr[i] >= 10){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> res;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n        }else{\n            n=3*n+1;\n        }\n        res.push_back(n);\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    char delimiter;\n    int i=0;\n    while(date[i]!='-'){\n        month=month*10+date[i]-'0';\n        i++;\n    }\n    delimiter=date[i];\n    i++;\n    while(date[i]!='-'){\n        day=day*10+date[i]-'0';\n        i++;\n    }\n    i++;\n    while(i<date.length()){\n        year=year*10+date[i]-'0';\n        i++;\n    }\n    if(month<1 || month>12 || day<1 || day>31 || year<1000 || year>9999){\n        return false;\n    }\n    if(month==2 && (year%4==0 && year%100!=0 || year%400==0)){\n        if(day<1 || day>29){\n            return false;\n        }\n    }\n    else if(month==4 || month==6 || month==9 || month==11){\n        if(day<1 || day>30){\n            return false;\n        }\n    }\n    else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12){\n        if(day<1 || day>31){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    if(txt.find(' ') != string::npos){\n        return vector<string>(split(txt, ' '));\n    }else if(txt.find(',') != string::npos){\n        return vector<string>(split(txt, ','));\n    }else{\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++){\n            if(txt[i] >= 'a' && txt[i] <= 'z'){\n                if(i % 2 == 1){\n                    count++;\n                }\n            }\n        }\n        return vector<string>(1, to_string(count));\n    }\n}\n"}
{"task_id": "CPP/126", "generation": "\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n        if(lst[i] == lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end) return \"NO\";\n    int length = end-start+1;\n    if(length==1) return \"NO\";\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size() == 0) return 0;\n    int prod = 1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] == 0) return 0;\n        if(arr[i] < 0) prod *= -1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 0) arr[i] *= -1;\n        sum += arr[i];\n    }\n    return sum * prod;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> visited(n, vector<int>(n, 0));\n    vector<vector<int>> queue;\n    vector<int> start;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(grid[i][j] == 1){\n                start.push_back(i);\n                start.push_back(j);\n                queue.push_back(start);\n                start.clear();\n            }\n        }\n    }\n    vector<int> path;\n    while(!queue.empty()){\n        vector<int> cur = queue[0];\n        queue.erase(queue.begin());\n        if(visited[cur[0]][cur[1]] == k){\n            return path;\n        }\n        visited[cur[0]][cur[1]] = k;\n        path.push_back(grid[cur[0]][cur[1]]);\n        vector<int> next;\n        if(cur[0] > 0){\n            next.push_back(cur[0] - 1);\n            next.push_back(cur[1]);\n        }\n        if(cur[0] < n - 1){\n            next.push_back(cur[0] + 1);\n            next.push_back(cur[1]);\n        }\n        if(cur[1] > 0){\n            next.push_back(cur[0]);\n            next.push_back(cur[1] - 1);\n        }\n        if(cur[1] < n - 1){\n            next.push_back(cur[0]);\n            next.push_back(cur[1] + 1);\n        }\n        queue.push_back(next);\n    }\n    return path;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    res.push_back(1);\n    res.push_back(3);\n    for(int i = 2; i < n + 1; i++){\n        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }else{\n            res.push_back(res[i - 1] + res[i - 2] + res[i - 3]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n > 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[') count++;\n        else count--;\n        if(count < 0) return false;\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += (int)lst[i] * (int)lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0) return false;\n    string word = \"\";\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] == ' '){\n            if(isalpha(txt[i-1])) return false;\n            word = \"\";\n        }\n        else{\n            word += txt[i];\n        }\n    }\n    if(isalpha(txt[txt.length()-1])) return false;\n    return true;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max = -1;\n    for(int i = 1; i < n; i++){\n        if(arr[i] >= arr[i-1]){\n            max = max > i ? max : i;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int a = -1000000, b = 1000000;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > a){\n            a = lst[i];\n        }\n        if(lst[i] > 0 && lst[i] < b){\n            b = lst[i];\n        }\n    }\n    if(a == -1000000){\n        a = NULL;\n    }\n    if(b == 1000000){\n        b = NULL;\n    }\n    return {a, b};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() == typeid(int) && b.type() == typeid(int)){\n        return a;\n    }\n    else if(a.type() == typeid(float) && b.type() == typeid(float)){\n        return a;\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        return a;\n    }\n    else if(a.type() == typeid(int) && b.type() == typeid(float)){\n        return b;\n    }\n    else if(a.type() == typeid(float) && b.type() == typeid(int)){\n        return b;\n    }\n    else if(a.type() == typeid(int) && b.type() == typeid(string)){\n        return b;\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(int)){\n        return b;\n    }\n    else if(a.type() == typeid(float) && b.type() == typeid(string)){\n        return b;\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(float)){\n        return b;\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(string)){\n        string a1 = boost::any_cast<string>(a);\n        string b1 = boost::any_cast<string>(b);\n        if(a1 == b1){\n            return boost::any();\n        }\n        else{\n            return b1;\n        }\n    }\n    else if(a.type() == typeid(int) && b.type() == typeid(string)){\n        string b1 = boost::any_cast<string>(b);\n        if(boost::any_cast<int>(a) == boost::any_cast<int>(b1)){\n            return boost::any();\n        }\n        else{\n            return b1;\n        }\n    }\n    else if(a.type() == typeid(float) && b.type() == typeid(string)){\n        string b1 = boost::any_cast<string>(b);\n        if(boost::any_cast<float>(a) == boost::any_cast<float>(b1)){\n            return boost::any();\n        }\n        else{\n            return b1;\n        }\n    }\n    else if(a.type() == typeid(string) && b.type() == typeid(int)){\n        string a1 = boost::any_cast<string>(a);\n        if(boost::any_cast<int>(a1) == boost::any_cast<int>(b)){\n            return boost::any();\n        }\n        else{\n            return b;\n        }\n    }\n    else if(a.type() == typeid(string) && b.type"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\nif(n==0)\nreturn 1;\nelse\nreturn n*special_factorial(n-1);\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    bool space = false;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            if(space){\n                result += '-';\n            }else{\n                result += '_';\n                space = true;\n            }\n        }else{\n            result += text[i];\n            space = false;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    int count2=0;\n    int count3=0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n        if(file_name[i]=='.'){\n            count2++;\n        }\n        if(file_name[i]=='t'||file_name[i]=='x'||file_name[i]=='e'||file_name[i]=='d'||file_name[i]=='l'){\n            count3++;\n        }\n    }\n    if(count>3||count2!=1||count3<4||file_name[0]=='.'||file_name[file_name.length()-1]=='.'||file_name[0]>='0'&&file_name[0]<='9'){\n        return \"No\";\n    }\n    else{\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        } else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string res = \"\";\n    string word;\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            if(is_prime(word.length())){\n                res += word + \" \";\n            }\n            word = \"\";\n        }\n        else{\n            word += sentence[i];\n        }\n    }\n    if(is_prime(word.length())){\n        res += word;\n    }\n    return res;\n}\nbool is_prime(int n){\n    if(n <= 1) return false;\n    for(int i = 2; i * i <= n; i++){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int n=nums[i];\n        while(n!=0){\n            sum+=n%10;\n            n/=10;\n        }\n        points.push_back(make_pair(sum,i));\n    }\n    sort(points.begin(),points.end());\n    vector<int> result;\n    for(int i=0;i<points.size();i++){\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 != 0 && (nums[i] / 10) % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a;\n    for(int i = 1; i <= n; i++){\n        a.push_back(i * i - i + 1);\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1 || planets[i]==planet2)continue;\n        if(planets[i]<planet1 && planets[i]>planets[planets.size()-1])continue;\n        if(planets[i]>planet1 && planets[i]<planet2)result.push_back(planets[i]);\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for (string s : lst){\n        if (s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](string a, string b){\n        if (a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n==2){\n        return x;\n    }\n    else if(n%2==0){\n        return y;\n    }\n    else{\n        for(int i=3;i*i<=n;i+=2){\n            if(n%i==0){\n                return y;\n            }\n        }\n        return x;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if (lst[i] > 0 && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1000000;\n    string strongest_extension;\n    for (int i = 0; i < extensions.size(); i++){\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size(); j++){\n            if (isupper(extensions[i][j])){\n                strength++;\n            } else {\n                strength--;\n            }\n        }\n        if (strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string b1=b;\n    for(int i=0;i<b.length();i++){\n        b1=b1.substr(1)+b1.substr(0,1);\n        if(a.find(b1)!=-1) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0, odd = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<string> roman_numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    string result = \"\";\n    for(int i = 0; i < values.size(); i++){\n        while(number >= values[i]){\n            result += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    for (int i = 0; i < words.size(); i++){\n        string word = words[i];\n        int unique = 0;\n        for (int j = 0; j < word.size(); j++){\n            bool found = false;\n            for (int k = 0; k < word.size(); k++){\n                if (j != k && word[j] == word[k]){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                unique++;\n            }\n        }\n        if (unique > 0 && (max_word == \"\" || unique > count_unique(max_word))){\n            max_word = word;\n        }\n    }\n    return max_word;\n}\nint count_unique(string word){\n    int unique = 0;\n    for (int i = 0; i < word.size(); i++){\n        bool found = false;\n        for (int j = 0; j < word.size(); j++){\n            if (i != j && word[i] == word[j]){\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            unique++;\n        }\n    }\n    return unique;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    int left = remaining - (total - number);\n    return {total,left};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])) res+=toupper(s[i]);\n            else res+=tolower(s[i]);\n        }\n        else res+=s[i];\n    }\n    string temp=res;\n    for(int i=0;i<res.size();i++){\n        res[i]=temp[res.size()-1-i];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    if(text.empty()) return \"\";\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), hash);\n    string md5;\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        char hex[3];\n        sprintf(hex, \"%02x\", hash[i]);\n        md5 += hex;\n    }\n    return md5;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    if(a>b){\n        return result;\n    }\n    for(int i=a;i<=b;i++){\n        result.push_back(i);\n    }\n    return result;\n}\n"}
