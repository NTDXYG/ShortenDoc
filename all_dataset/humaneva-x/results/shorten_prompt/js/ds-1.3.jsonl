{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(temp);\n      temp = '';\n    } else if (paren_string[i] === ')') {\n      temp += ')';\n      if (stack[stack.length - 1] === temp) {\n        stack.pop();\n        result.push(temp);\n        temp = '';\n      } else {\n        temp += ')';\n      }\n    } else {\n      temp += paren_string[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const differences = numbers.map((number) => Math.abs(number - mean));\n  const mad = differences.reduce((a, b) => a + b, 0) / numbers.length;\n  return mad;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  return paren_string.split(' ').map(group => {\n    let count = 0;\n    let max_count = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        count++;\n        if (count > max_count) {\n          max_count = count;\n        }\n      } else if (group[i] === ')') {\n        count--;\n      }\n    }\n    return max_count;\n  });\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  const result = [max];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reverseString = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    let prefix = string.substring(0, i);\n    let suffix = string.substring(i);\n    if (suffix === reverseString.substring(0, reverseString.length - i)) {\n      return string + reverseString.substring(reverseString.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for(let i = 0; i < a.length; i++) {\n    if(a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  let uniqueChars = new Set(string);\n  return uniqueChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n    let notes = music_string.split(' ');\n    let beats = [];\n    for (let i = 0; i < notes.length; i++) {\n        switch (notes[i]) {\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case '.|':\n                beats.push(1);\n                break;\n        }\n    }\n    return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = numbers.split(' ');\n  const numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  nums.sort((a, b) => numDict[a] - numDict[b]);\n\n  return nums.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  if (numbers.length < 2) {\n    throw new Error('List must contain at least two numbers');\n  }\n\n  numbers.sort((a, b) => a - b);\n\n  let closest = [numbers[0], numbers[1]];\n  let minDiff = numbers[1] - numbers[0];\n\n  for (let i = 0; i < numbers.length - 2; i++) {\n    const diff = numbers[i + 2] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closest = [numbers[i], numbers[i + 2]];\n    }\n  }\n\n  return closest;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((num) => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for(let i = n - 1; i > 0; i--) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  let seen = {};\n\n  for (let number of numbers) {\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  if (xs.length === 0) {\n    return;\n  }\n  let degree = xs.length - 1;\n  let coefs = xs.slice(1);\n  let roots = [];\n  for (let i = 0; i <= degree; i++) {\n    let new_coefs = coefs.slice();\n    new_coefs[i] = new_coefs[i] / (degree - i);\n    let root = findZero(new_coefs);\n    if (root !== undefined) {\n      roots.push(root);\n    }\n  }\n  return roots;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const thirdElements = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => (i % 3 === 0 ? thirdElements.shift() : v)).reverse();\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)];\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().split('7').length - 1);\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  let result = l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v));\n  return result;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i += 3) {\n    result += s[i + 1] + s[i + 2] + s[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let i = 2;\n\n  while (i < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n\n  return fib[n - 1];\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  // The number of collisions is equal to the number of pairs of cars that collide.\n  // This is because each car is paired with every other car, and a collision occurs when\n  // one car is to the left of the other and the other car is to the right.\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(num => num + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  let set = new Set();\n  for(let num of l){\n    if(set.has(-num)){\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  const chars = '0123456789ABCDEF';\n  if (x < base) return chars[x];\n  return changeBase(Math.floor(x / base), base) + chars[x % base];\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let fib4NMinus1 = 0;\n  let fib4NMinus2 = 0;\n  let fib4NMinus3 = 0;\n  let fib4NMinus4 = 2;\n\n  for (let i = 4; i <= n; i++) {\n    let fib4I = fib4NMinus1 + fib4NMinus2 + fib4NMinus3 + fib4NMinus4;\n    fib4NMinus4 = fib4NMinus3;\n    fib4NMinus3 = fib4NMinus2;\n    fib4NMinus2 = fib4NMinus1;\n    fib4NMinus1 = fib4I;\n  }\n\n  return fib4NMinus1;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  return (Math.pow(2, n) % p);\n}"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      let code = s.charCodeAt(i);\n      if (code >= 65 && code <= 90) {\n        result += String.fromCharCode((code - 65 + 26 - 5) % 26 + 65);\n      } else if (code >= 97 && code <= 122) {\n        result += String.fromCharCode((code - 97 + 26 - 5) % 26 + 97);\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for(let i = 0; i < l.length; i++) {\n    if(l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let c of s0) {\n    map.set(c, (map.get(c) || 0) + 1);\n  }\n  for (let c of s1) {\n    if (!map.get(c)) {\n      return false;\n    } else {\n      map.set(c, map.get(c) - 1);\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  let a = 0, b = 1, fib = 1;\n  for (let i = 2; i <= n; i++) {\n    fib = a + b;\n    a = b;\n    b = fib;\n  }\n  return fib;\n}"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push('<');\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0 || stack[stack.length - 1] !== '<') {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n    if (l.length < 2) {\n        return true;\n    }\n    let isNonDecreasing = true;\n    let isNonIncreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            isNonDecreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            isNonIncreasing = false;\n        }\n    }\n    return isNonDecreasing || isNonIncreasing;\n}"}
{"task_id": "JavaScript/58", "generation": "\n  const map = {};\n  const result = [];\n\n  for (let i = 0; i < l1.length; i++) {\n    if (!map[l1[i]]) map[l1[i]] = true;\n  }\n\n  for (let i = 0; i < l2.length; i++) {\n    if (map[l2[i]] && !result.includes(l2[i])) {\n      result.push(l2[i]);\n    }\n  }\n\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for(let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n < 0) {\n    throw new Error(\"Input should be a non-negative integer\");\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  for (let i = 3; i <= n; i++) {\n    let d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return c;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  let lastChar = s[s.length - 1];\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n\n  if (lastChar === 'y' || lastChar === 'Y') {\n    count++;\n  }\n\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  let strX = String(x);\n  let length = strX.length;\n  if (shift >= length) {\n    return strX;\n  } else {\n    return strX.slice(length - shift) + strX.slice(0, length - shift);\n  }\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n    const [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - apples - oranges\n}"}
{"task_id": "JavaScript/68", "generation": "\n    if (arr.length === 0) return [];\n    let smallestEven = Infinity;\n    let smallestIndex = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if (smallestEven === Infinity) return [];\n    return [smallestEven, smallestIndex];\n}"}
{"task_id": "JavaScript/69", "generation": "\n  let freq = {};\n  let max = -1;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[lst[i]] === undefined) {\n      freq[lst[i]] = 1;\n    } else {\n      freq[lst[i]] += 1;\n    }\n\n    if (lst[i] > max && freq[lst[i]] >= lst[i]) {\n      max = lst[i];\n    }\n  }\n\n  return max;\n};"}
{"task_id": "JavaScript/70", "generation": "\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while (lst.length) {\n        result.push(lst.shift());\n        if (lst.length) {\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  return q.join('') === q.slice().reverse().join('') && q.reduce((a, b) => a + b, 0) <= w;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n\n  if (sum1 <= sum2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const primes = [2, 3, 5];\n  let count = 0;\n\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      count++;\n    }\n  }\n\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n    if (n === 1) {\n        return false;\n    }\n    for (let i = 2; i <= n; i++) {\n        if (Math.pow(i, n) === x) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.cbrt(a);\n  return cubeRoot === Math.floor(cubeRoot);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexToDec = (hex) => {\n    return parseInt(hex, 16);\n  };\n\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  const hexDigits = '0123456789ABCDEF';\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hexDigits.includes(num[i])) {\n      if (isPrime(hexToDec(num[i]))) count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n};"}
{"task_id": "JavaScript/80", "generation": "\n  for (let i = 0; i < s.length - 2; i += 3) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return s.length >= 3;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map(grade => {\n    if (grade === 4.0) return 'A+';\n    else if (grade === 3.7) return 'A';\n    else if (grade === 3.3) return 'A-';\n    else if (grade === 3.0) return 'B+';\n    else if (grade === 2.7) return 'B';\n    else if (grade === 2.3) return 'B-';\n    else if (grade === 2.0) return 'C+';\n    else if (grade === 1.7) return 'C';\n    else if (grade === 1.3) return 'C-';\n    else if (grade === 1.0) return 'D+';\n    else if (grade === 0.7) return 'D';\n    else return 'D-';\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n    if (string.length === 0) {\n        return false;\n    }\n    let prime = true;\n    for (let i = 2, sqrt = Math.sqrt(string.length); i <= sqrt; i++) {\n        if (string.length % i === 0) {\n            prime = false;\n            break;\n        }\n    }\n    return prime;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 10;\n  if (n === 2) return 90;\n\n  let count = 0;\n  for (let i = 1; i < 10; i++) {\n    count += Math.pow(10, n - 1) * i;\n  }\n\n  for (let i = 0; i < 10; i++) {\n    count += Math.pow(10, n - 1) * i;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n    let result = [];\n    for(let i = 0; i < lst.length; i++) {\n        for(let j = 0; j < lst[i].length; j++) {\n            if(lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return array;\n  }\n\n  const sum = array[0] + array[array.length - 1];\n\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ' ') {\n      result += ' ';\n    } else {\n      let charCode = s[i].charCodeAt() + 2;\n      if (charCode > 'z'.charCodeAt()) {\n        charCode = 'a'.charCodeAt() + (charCode - 'z'.charCodeAt() - 1);\n      }\n      result += String.fromCharCode(charCode);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) {\n        return null;\n    }\n    let smallest = Math.min(...lst);\n    lst.splice(lst.indexOf(smallest), 1);\n    if (lst.length < 1) {\n        return null;\n    }\n    return Math.min(...lst);\n}"}
{"task_id": "JavaScript/91", "generation": "\n  let words = S.split('. ');\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = {\n    a: 'C',\n    e: 'G',\n    i: 'K',\n    o: 'Q',\n    u: 'W',\n  };\n\n  return message\n    .toLowerCase()\n    .split('')\n    .map((char) => {\n      if (char in vowels) {\n        return vowels[char];\n      } else if (char >= 'a' && char <= 'z') {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n      } else {\n        return char;\n      }\n    })\n    .join('');\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let maxPrime = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allStringsLower = true;\n  let allStringsUpper = true;\n\n  for (let key in dict) {\n    if (typeof key !== 'string') {\n      allStringsLower = false;\n    }\n    if (key !== key.toUpperCase()) {\n      allStringsUpper = false;\n    }\n  }\n\n  return allStringsLower || allStringsUpper;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  if (n < 2) return [];\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  const aDigits = Math.abs(a).toString().split('').map(Number);\n  const bDigits = Math.abs(b).toString().split('').map(Number);\n  let result = 1;\n  for (let i = 0; i < aDigits.length; i++) {\n    result *= aDigits[i];\n  }\n  for (let j = 0; j < bDigits.length; j++) {\n    result *= bDigits[j];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = n * n;\n  pile.push(stones);\n  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      stones += 2;\n    } else {\n      stones += 2;\n    }\n    pile.push(stones);\n  }\n  return pile;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/, |,| /);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  for (let i = x + 1; i <= y; i++) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/103", "generation": "\n    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return '0b' + avg.toString(2);\n}"}
{"task_id": "JavaScript/104", "generation": "\n    return x.filter(num => {\n        const numStr = num.toString();\n        return numStr.every(digit => {\n            return digit % 2 !== 0;\n        });\n    }).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const map = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  const newArr = arr\n    .filter((num) => num >= 1 && num <= 9)\n    .sort((a, b) => a - b)\n    .reverse();\n\n  return newArr.map((num) => map[num]);\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const factorial = (num) => {\n    let result = 1;\n    for(let i = 2; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  }\n\n  const sum = (num) => {\n    return num * (num + 1) / 2;\n  }\n\n  let result = [];\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/107", "generation": "\n    let evenCount = 0;\n    let oddCount = 0;\n    for(let i = 1; i <= n; i++) {\n        let str = i.toString();\n        if(str[0] === str[str.length - 1]) {\n            if(i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      num = num.toString().split('').reverse().join('');\n      num = parseInt(num) * -1;\n    }\n    let sum = num.toString().split('').reduce((a, b) => a + parseInt(b), 0);\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[(i + 1) % arr.length]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};"}
{"task_id": "JavaScript/110", "generation": "\n    let evenCount1 = lst1.filter(num => num % 2 === 0).length;\n    let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n    if (evenCount1 > evenCount2) {\n        return \"NO\";\n    } else if (evenCount1 === evenCount2) {\n        return \"YES\";\n    } else {\n        return \"YES\";\n    }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  const dict = {};\n  const arr = test.split(' ');\n\n  for (let i = 0; i < arr.length; i++) {\n    if (dict[arr[i]] === undefined) {\n      dict[arr[i]] = 1;\n    } else {\n      dict[arr[i]] += 1;\n    }\n  }\n\n  let max = Math.max(...Object.values(dict));\n  let result = {};\n\n  for (let key in dict) {\n    if (dict[key] === max) {\n      result[key] = max;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c) {\n      result = s[i] + result;\n    }\n  }\n  let isPalindrome = result === [...result].reverse().join('');\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map((str, index) => {\n        let count = (str.match(/[13579]/g) || []).length;\n        return `the number of odd elements ${count}n the str${count}ng ${index + 1} of the ${count}nput.`;\n    });\n}"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n\n  return minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  let buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        if (buckets.length === 0 || buckets[buckets.length - 1] + grid[i][j] > capacity) {\n          buckets.push(grid[i][j]);\n        } else {\n          buckets[buckets.length - 1] += grid[i][j];\n        }\n      }\n    }\n    if (buckets.length > 0) {\n      count++;\n      buckets = [];\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2).replace(/0/g, '').length;\n    const bBinary = b.toString(2).replace(/0/g, '').length;\n    return aBinary - bBinary || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n    if (s === \"\") {\n        return [];\n    }\n    const words = s.split(\" \");\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    const result = [];\n    for (let word of words) {\n        let count = 0;\n        for (let char of word) {\n            if (consonants.includes(char)) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(word);\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let lastVowel = '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      if (lastVowel && vowels.indexOf(lastVowel) < vowels.indexOf(word[i])) {\n        return lastVowel;\n      }\n      lastVowel = word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      open++;\n    } else {\n      open--;\n      if (open < 0) {\n        return 'No';\n      }\n    }\n  }\n  return open === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // return the first k elements of the sorted array\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2) {\n    if(lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for(let i = 0; i < k; i++) {\n        if(arr[i] < 10) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  const sequence = [n];\n  while (n != 1) {\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n    sequence.push(n);\n  }\n  return sequence.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const [month, day, year] = date.split('-');\n  const isValidMonth = [1, 3, 5, 7, 8, 10, 12].includes(parseInt(month));\n  const isValidDay = [1, 31].includes(parseInt(day)) || [4, 6, 9, 11].includes(parseInt(day)) || parseInt(day) <= 29;\n  const isValidYear = year.length === 4 && !isNaN(Date.parse(year + '-' + month + '-' + day));\n  return isValidMonth && isValidDay && isValidYear;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && isNaN(txt[i])) {\n        count++;\n      }\n    }\n    return count;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let count = 0;\n  for(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] == lst[i + 1]) {\n      count++;\n      if(count > 1) {\n        return false;\n      }\n    }\n    if(lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // check if the intervals intersect\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\";\n  }\n\n  // calculate the intersection\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n\n  // check if the intersection length is a prime number\n  if (end - start < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2; i * i <= end - start; i++) {\n    if (end - start % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n    if (arr.length === 0) return None;\n    let productSign = 1;\n    let sumMagnitude = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sumMagnitude += Math.abs(arr[i]);\n        productSign *= arr[i] < 0 ? -1 : 1;\n    }\n    return sumMagnitude * productSign;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const visited = Array(n).fill(0).map(() => Array(n).fill(false));\n  const path = [];\n  const dir = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n\n  const dfs = (x, y, k) => {\n    if (k === 0) {\n      path.push(grid[x][y]);\n      return;\n    }\n\n    visited[x][y] = true;\n\n    for (let i = 0; i < 4; i++) {\n      const nx = x + dir[i][0], ny = y + dir[i][1];\n\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        dfs(nx, ny, k - 1);\n      }\n    }\n\n    visited[x][y] = false;\n  };\n\n  let minVal = Infinity;\n  let minPath = [];\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dfs(i, j, k - 1);\n      if (path.length === k) {\n        minVal = Math.min(minVal, path[0]);\n        minPath = [...path];\n      }\n      path.pop();\n    }\n  }\n\n  return minPath;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  const arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2), 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n    if (txt.length === 0) {\n        return false;\n    }\n    const lastChar = txt[txt.length - 1];\n    return !isNaN(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  const sortedArr = [...arr].sort((a, b) => a - b);\n  let i = 0;\n  while (i < sortedArr.length - 1) {\n    if (sortedArr[i] < 0 || sortedArr[i + 1] < 0) {\n      return -1;\n    }\n    if (sortedArr[i] >= sortedArr[i + 1]) {\n      i++;\n    } else {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let negatives = lst.filter(num => num < 0).sort((a, b) => b - a);\n  let positives = lst.filter(num => num > 0).sort((a, b) => a - b);\n\n  return [negatives[0], positives[0]];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.replace(/,/g, '') === b.replace(/,/g, '') ? null : a.replace(/,/g, '') > b.replace(/,/g, '') ? a.replace(/,/g, '') : b.replace(/,/g, '');\n  } else if (typeof a === 'string') {\n    return a > b ? a : b;\n  } else if (typeof b === 'string') {\n    return b > a ? b : a;\n  } else {\n    return a === b ? null : a > b ? a : b;\n  }\n}"}
{"task_id": "JavaScript/138", "generation": "\n    let count = 0;\n    for(let i = 0; i <= n; i++) {\n        if(i % 2 === 0) {\n            count++;\n        }\n    }\n    return count === 4;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for(let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n\nconst factorial = (n) => {\n  if(n === 0) return 1;\n  return n * factorial(n - 1);\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s{2,}/g, '-');\n  newText = newText.replace(/ /g, '_');\n  return newText;\n};"}
{"task_id": "JavaScript/141", "generation": "\n    const nameParts = file_name.split('.');\n    if (nameParts.length !== 2) {\n        return 'No';\n    }\n    const [name, extension] = nameParts;\n    if (name.length > 3 || !/^[a-zA-Z]/.test(name[0])) {\n        return 'No';\n    }\n    if (!['txt', 'exe', 'dll'].includes(extension)) {\n        return 'No';\n    }\n    return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            sum += lst[i] ** 3;\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n    const words = sentence.split(' ');\n    const primeWords = words.filter(word => {\n        const length = word.length;\n        for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n            if(length % i === 0) return false;\n        return length > 1;\n    });\n    return primeWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNumerator, xDenominator] = x.split('/');\n  const [nNumerator, nDenominator] = n.split('/');\n\n  if (nDenominator === 0) {\n    return false;\n  }\n\n  const commonDenominator = xDenominator * nDenominator;\n  const numerator = (xNumerator * nNumerator) / commonDenominator;\n\n  return numerator === Math.floor(numerator);\n};"}
{"task_id": "JavaScript/145", "generation": "\n  if (nums.length === 0) return [];\n  return nums.sort((a, b) => {\n    const sumA = Array.from(String(Math.abs(a)), Number).reduce((a, b) => a + b, 0);\n    const sumB = Array.from(String(Math.abs(b)), Number).reduce((a, b) => a + b, 0);\n    if (sumA === sumB) return a - b;\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for(let i = 0; i < nums.length; i++) {\n    if(nums[i] > 10 && (nums[i].toString()[0] % 2 === 1) && (nums[i].toString()[nums[i].toString().length - 1] % 2 === 1)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n\n  return planets.slice(index1 + 1, index2);\n}"}
{"task_id": "JavaScript/149", "generation": "\n    return lst.filter(word => word.length % 2 === 0).sort((a, b) => a.length - b.length || a.localeCompare(b));\n}"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((num, i) => Math.abs(num - guess[i]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let max_strength = -1000000;\n  let strongest_extension = '';\n  for (let ext of extensions) {\n    let cap = 0;\n    let sm = 0;\n    for (let i = 0; i < ext.length; i++) {\n      if (ext[i] === ext[i].toUpperCase()) cap++;\n      else if (ext[i] === ext[i].toLowerCase()) sm++;\n    }\n    let strength = cap - sm;\n    if (strength > max_strength) {\n      max_strength = strength;\n      strongest_extension = ext;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n    for (let i = 0; i < b.length; i++) {\n        if (b.includes(a.slice(i) + a.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let numStr = Math.abs(num).toString();\n\n  for(let i = 0; i < numStr.length; i++) {\n    if(num < 0 ? numStr[i] % 2 !== 0 : numStr[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n\n  return (even, odd);\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const miniRoman = [\n    {value: 1000, char: 'm'},\n    {value: 900, char: 'cm'},\n    {value: 500, char: 'd'},\n    {value: 400, char: 'cd'},\n    {value: 100, char: 'c'},\n    {value: 90, char: 'xc'},\n    {value: 50, char: 'l'},\n    {value: 40, char: 'xl'},\n    {value: 10, char: 'x'},\n    {value: 9, char: 'ix'},\n    {value: 5, char: 'v'},\n    {value: 4, char: 'iv'},\n    {value: 1, char: 'i'}\n  ];\n\n  let result = '';\n\n  miniRoman.forEach(({value, char}) => {\n    while(number >= value) {\n      result += char;\n      number -= value;\n    }\n  });\n\n  return result;\n}"}
{"task_id": "JavaScript/157", "generation": "\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUniqueChars = 0;\n  let maxWord = '';\n\n  for (let word of words) {\n    let uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === maxUniqueChars) {\n      maxWord = maxWord < word ? maxWord : word;\n    }\n  }\n\n  return maxWord;\n}"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      if (s[i] === s[i].toLowerCase()) {\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/162", "generation": "\n    if (text === '') return null;\n    return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  if (a > b) {\n    [a, b] = [b, a];\n  }\n\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n\n  return result;\n};"}
