{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  // Remove spaces from the input string\n  const cleanString = paren_string.replace(/\\s/g, '');\n  const result = [];\n  let balance = 0;\n  let currentGroup = '';\n\n  for (let char of cleanString) {\n    if (char === '(') {\n      balance++;\n    } else if (char === ')') {\n      balance--;\n    }\n    currentGroup += char;\n\n    // When balance is 0, we have a complete group\n    if (balance === 0) {\n      result.push(currentGroup);\n      currentGroup = ''; // Reset current group\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const absoluteDeviations = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDeviations.reduce((a, b) => a + b, 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) return [];\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const maxDepths = groups.map(group => {\n    let currentDepth = 0;\n    let maxDepth = 0;\n    for (let char of group) {\n      if (char === '(') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (char === ')') {\n        currentDepth--;\n      }\n    }\n    return maxDepth;\n  });\n  return maxDepths;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\nconsole.log(sumProduct([])); // (0, 1)\nconsole.log(sumProduct([1, 2, 3, 4])); // (10, 24)"}
{"task_id": "JavaScript/9", "generation": "\n    let maxSoFar = numbers[0];\n    return numbers.map(num => {\n        maxSoFar = Math.max(maxSoFar, num);\n        return maxSoFar;\n    });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  if (string.length === 0) {\n    return '';\n  }\n  let reverse = string.split('').reverse().join('');\n  for (let i = 0; i < string.length; i++) {\n    if (string.substring(i) === reverse.substring(0, string.length - i)) {\n      return string + reverse.substring(string.length - i);\n    }\n  }\n  return string + reverse.substring(1);\n}"}
{"task_id": "JavaScript/11", "generation": "\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += a[i] === b[i] ? '0' : '1';\n    }\n    return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  while (b) {\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 1; i <= string.length; i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/15", "generation": "\n    let result = '';\n    for (let i = 0; i <= n; i++) {\n        result += i.toString() + (i < n ? ' ' : '');\n    }\n    return result;\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const uniqueChars = new Set(lowerCaseString);\n  return uniqueChars.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n    let music_array = music_string.split(' ');\n    let beats = [];\n    for (let i = 0; i < music_array.length; i++) {\n        if (music_array[i] === 'o') {\n            beats.push(4);\n        } else if (music_array[i] === 'o|') {\n            beats.push(2);\n        } else if (music_array[i] === '.|') {\n            beats.push(1);\n        }\n    }\n    return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  if (substring.length === 0) return 0;\n  let count = 0;\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedArray = numArray.sort((a, b) => numMap[a] - numMap[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n      }\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return 1;\n};"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n    const counts = {};\n    numbers.forEach(number => {\n        counts[number] = (counts[number] || 0) + 1;\n    });\n    return numbers.filter(number => counts[number] === 1);\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i].toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};\n\nexport default concatenate;"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter(num => num > 0);\n}\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let a = xs[0];\n  let b = xs[1];\n  let c = xs[2];\n  let d = xs[3];\n  let e = xs[4];\n  let f = xs[5];\n  let g = xs[6];\n  let h = xs[7];\n  let i = xs[8];\n  let j = xs[9];\n  let k = xs[10];\n  let l = xs[11];\n  let m = xs[12];\n  let n = xs[13];\n  let o = xs[14];\n  let p = xs[15];\n  let q = xs[16];\n  let r = xs[17];\n  let s = xs[18];\n  let t = xs[19];\n  let u = xs[20];\n  let v = xs[21];\n  let w = xs[22];\n  let x = xs[23];\n  let y = xs[24];\n  let z = xs[25];\n  let aa = xs[26];\n  let ab = xs[27];\n  let ac = xs[28];\n  let ad = xs[29];\n  let ae = xs[30];\n  let af = xs[31];\n  let ag = xs[32];\n  let ah = xs[33];\n  let ai = xs[34];\n  let aj = xs[35];\n  let ak = xs[36];\n  let al = xs[37];\n  let am = xs[38];\n  let an = xs[39];\n  let ao = xs[40];\n  let ap = xs[41];\n  let aq = xs[42];\n  let ar = xs[43];\n  let as = xs[44];\n  let at = xs[45];\n  let au = xs[46];\n  let av = xs[47];\n  let aw = xs[48];\n  let ax = xs[49];\n  let ay = xs[50];\n"}
{"task_id": "JavaScript/33", "generation": "\n    let result = [...l];\n    let thirds = [];\n    for (let i = 0; i < l.length; i += 3) {\n        thirds.push(l[i]);\n    }\n    thirds.sort((a, b) => a - b);\n    for (let i = 0, j = 0; i < l.length; i += 3, j++) {\n        result[i] = thirds[j];\n    }\n    return result;\n}\nconsole.log(sortThird([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]\nconsole.log(sortThird([8, 7, 4, 1, 3, 6, 5])); // [1, 7, 4, 8, 3, 6, 5]\nconsole.log(sortThird([0, 1, 2, 3, 4, 5, 6])); // [0, 1, 2, 3, 4, 5, 6]\nconsole.log(sortThird([9, 8, 7, 6, 5, 4, 3, 2, 1])); // [1, 8, 7, 6, 5, 4, 3, 2, 9]\nconsole.log(sortThird([1, 3, 5, 7, 9, 2, 4, 6, 8])); // [1, 3, 5, 7, 9, 2, 4, 6, 8]\nconsole.log(sortThird([10, 20, 30, 40, 50, 60, 70, 80, 90])); // [10, 20, 30, 40, 50, 60, 70, 80, 90]\nconsole.log(sortThird([11, 22, 33, 44,"}
{"task_id": "JavaScript/34", "generation": "\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!uniqueList.includes(l[i])) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "JavaScript/36", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n            count += i.toString().split('').filter(digit => digit === '7').length;\n        }\n    }\n    return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n    let evenIndices = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenIndices.push(l[i]);\n    }\n    evenIndices.sort((a, b) => a - b);\n    let lPrime = [];\n    for (let i = 0, j = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            lPrime.push(evenIndices[j++]);\n        } else {\n            lPrime.push(l[i]);\n        }\n    }\n    return lPrime;\n}\nconsole.log(sortEven([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortEven([5, 6, 3, 4])); // [3, 6, 5, 4]\nconsole.log(sortEven([10, 15, 2, 30, 8])); // [2, 15, 8, 30, 10]\nconsole.log(sortEven([4, 1, 2, 3])); // [2, 1, 4, 3]\nconsole.log(sortEven([7, 8, 9, 10, 11, 12])); // [7, 8, 9, 10, 11, 12]\nconsole.log(sortEven([13, 14, 15, 16, 17, 18, 19])); // [13, 14, 15, 16, 17, 18, 19]\nconsole.log(sortEven([20, 21, 22, 23, 24, 25, 26, 27])); // [20, 21, 22, 23, 24, 25, 26, 27]\nconsole.log(sortEven([28, 29, 30, 31, 32, 33, 34, 35, 36])); // [28, 29, 30, 31, 32, 33, 34, 35, 36]\nconsole.log(sortEven([37, "}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    let group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      let first = group.charAt(0);\n      let second = group.charAt(1);\n      let third = group.charAt(2);\n      if (first === 'a') {\n        decoded += second + third;\n      } else if (second === 'a') {\n        decoded += first + third;\n      } else if (third === 'a') {\n        decoded += first + second;\n      } else {\n        decoded += group;\n      }\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const fib = (num) => {\n    if (num <= 1) return num;\n    return fib(num - 1) + fib(num - 2);\n  };\n\n  let count = 0;\n  let i = 0;\n  while (true) {\n    const fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) return fibNum;\n    }\n    i++;\n  }\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        while (left < right) {\n            let sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  return n * n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n    let seen = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (seen.has(-l[i])) {\n            return true;\n        }\n        seen.add(l[i]);\n    }\n    return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n    let result = '';\n    while (x > 0) {\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n    return 0.5 * a * h;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0 || n === 1 || n === 3) return 0;\n  if (n === 2) return 2;\n  let a = 0, b = 0, c = 2, d = 0, e;\n  for (let i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return d;\n}"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/49", "generation": "\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) { // uppercase\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) { // lowercase\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s.charAt(i);\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const countChars = (s) => {\n    const charCount = {};\n    for (let char of s) {\n      charCount[char] = (charCount[char] || 0) + 1;\n    }\n    return charCount;\n  };\n\n  const s0Count = countChars(s0);\n  const s1Count = countChars(s1);\n\n  for (let char in s0Count) {\n    if (s0Count[char] !== s1Count[char]) {\n      return false;\n    }\n  }\n\n  for (let char in s1Count) {\n    if (s1Count[char] !== s0Count[char]) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  let inc = true;\n  let dec = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) dec = false;\n    if (l[i] > l[i + 1]) inc = false;\n  }\n  return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = new Set([...set1].filter(x => set2.has(x)));\n  return [...intersection].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  let lastFactor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      lastFactor = factor;\n      n /= factor;\n      while (n % factor === 0) {\n        n /= factor;\n      }\n    }\n    factor === 2 ? factor++ : factor += 2;\n  }\n  return lastFactor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\nconsole.log(sumToN(30)); // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5)); // 15\nconsole.log(sumToN(10)); // 55\nconsole.log(sumToN(1)); // 1\n/* The function sumToN takes an integer n as an argument and initializes a variable sum to 0. It then uses a for loop to iterate from 1 to n, adding each number to the sum. Finally, it returns the sum. The function is tested with several inputs to ensure it works correctly. */"}
{"task_id": "JavaScript/61", "generation": "\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            count++;\n        } else if (brackets[i] === \")\") {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  return xs.map((coeff, index) => coeff * index).slice(1);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n  let a = 0, b = 0, c = 1, d;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}"}
{"task_id": "JavaScript/64", "generation": "\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n    if (s[s.length - 1].toLowerCase() === 'y') {\n        count++;\n    }\n    return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n    let str = x.toString();\n    let len = str.length;\n    if (shift >= len) return str;\n    shift = shift % len;\n    return str.slice(-shift) + str.slice(0, len - shift);\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let apples = s.match(/\\d+/g)[0];\n  let oranges = s.match(/\\d+/g)[1];\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let smallestIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallestIndex === -1) {\n    return [];\n  }\n  return [smallestEven, smallestIndex];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n  let max = -1;\n  for (const num in freq) {\n    if (freq[num] >= num && num > max) {\n      max = num;\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/70", "generation": "\n    let result = [];\n    let temp = [...lst];\n    while (temp.length > 0) {\n        result.push(temp.shift());\n        if (temp.length > 0) {\n            result.push(temp.pop());\n        }\n    }\n    return result;\n}\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([])); // []\n/* Given a list of integers, return a list sorted in a zigzag pattern. The pattern starts with the smallest number, then the largest, followed by the second smallest, then the second largest, and so on. Examples: zigzagSort([1, 2, 3, 4]) == [1, 4, 2, 3] zigzagSort([5, 5, 5, 5]) == [5, 5, 5, 5] zigzagSort([]) == [] */\nconst zigzagSort = (lst) => {\n    lst.sort((a, b) => a - b);\n    let result = [];\n    while (lst.length > 0) {\n        result.push(lst.shift());\n        if (lst.length > 0) {\n            result.push(lst.pop());\n        }\n    }\n    return result;\n}\nconsole.log(zigzagSort([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(zigzagSort([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(zigzagSort([])); // []\n/* Given a list of integers, return a list sorted in a zigzag pattern. The pattern starts with the smallest number, then the largest, followed by the second smallest, then the second largest, and so on. Examples: zigzagSort([1, 2, 3, 4"}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area.toFixed(2);\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  // Check if the array is a palindrome\n  const isPalindrome = q.toString() === q.slice().reverse().toString();\n  // Check if the sum of the array elements is less than or equal to w\n  const sum = q.reduce((acc, val) => acc + val, 0);\n  // Return true if both conditions are met, false otherwise\n  return isPalindrome && sum <= w;\n}"}
{"task_id": "JavaScript/73", "generation": "\n    let changes = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        if (arr[left] !== arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n    return changes;\n}"}
{"task_id": "JavaScript/74", "generation": "\n    let sum1 = lst1.reduce((a, b) => a + b.length, 0);\n    let sum2 = lst2.reduce((a, b) => a + b.length, 0);\n    return sum1 < sum2 ? lst1 : sum1 === sum2 ? lst1 : lst2;\n}\nconsole.log(totalMatch([], [])); // []\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // ['hI', 'Hi']\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // ['hi', 'admin']\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])); // ['hI', 'hi', 'hi']\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // ['4']\n// The function totalMatch takes two lists of strings as input. It calculates the total number of characters in each list by using the reduce method. It then compares the total number of characters in the two lists and returns the list with fewer characters. If the total number of characters is the same, it returns the first list. The function is tested with various inputs to ensure its correctness."}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let count = 0;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      count++;\n      a /= i;\n    }\n  }\n\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n    let result = Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n    return result === x;\n}"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n    return Math.pow(cubeRoot, 3) === Math.abs(a);\n}\nconsole.log(iscube(1)); // true\nconsole.log(iscube(2)); // false\nconsole.log(iscube(-1)); // true\nconsole.log(iscube(64)); // true\nconsole.log(iscube(0)); // true\nconsole.log(iscube(180)); // false\nconsole.log(iscube(125)); // true\nconsole.log(iscube(26)); // false\nconsole.log(iscube(27)); // true\nconsole.log(iscube(28)); // false\nconsole.log(iscube(29)); // false\nconsole.log(iscube(30)); // false\nconsole.log(iscube(31)); // false\nconsole.log(iscube(32)); // false\nconsole.log(iscube(33)); // false\nconsole.log(iscube(34)); // false\nconsole.log(iscube(35)); // false\nconsole.log(iscube(36)); // false\nconsole.log(iscube(37)); // false\nconsole.log(iscube(38)); // false\nconsole.log(iscube(39)); // false\nconsole.log(iscube(40)); // false\nconsole.log(iscube(41)); // false\nconsole.log(iscube(42)); // false\nconsole.log(iscube(43)); // false\nconsole.log(iscube(44)); // false\nconsole.log(iscube(45)); // false\nconsole.log(iscube(46)); // false\nconsole.log(iscube(47)); // false\nconsole.log(iscube(48)); // false\nconsole.log(iscube(49)); // false\nconsole.log(iscube(50)); // false\nconsole.log(iscube(51)); // false\nconsole.log(iscube(52)); // false\nconsole.log(iscube(53)); // false\nconsole.log(iscube(54)); // false\nconsole.log(iscube(55)); // false\nconsole.log(iscube(56)); // false\nconsole.log(iscube(57"}
{"task_id": "JavaScript/78", "generation": "\n  const primes = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A+';\n        if (grade > 3.7) return 'A';\n        if (grade > 3.3) return 'A-';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.7) return 'B';\n        if (grade > 2.3) return 'B-';\n        if (grade > 2.0) return 'C+';\n        if (grade > 1.7) return 'C';\n        if (grade > 1.3) return 'C-';\n        if (grade > 1.0) return 'D+';\n        if (grade > 0.7) return 'D';\n        if (grade > 0.0) return 'D-';\n        return 'E';\n    });\n};"}
{"task_id": "JavaScript/82", "generation": "\n    const isPrime = (num) => {\n        for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n            if(num % i === 0) return false; \n        return num > 1;\n    }\n    return isPrime(string.length);\n}"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 18 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n    let sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sum.toString(2);\n}\nconsole.log(solve(1000)); // \"1\"\nconsole.log(solve(150)); // \"110\"\nconsole.log(solve(147)); // \"1100\"\nconsole.log(solve(1234)); // \"1010\"\nconsole.log(solve(9999)); // \"11110001111\"\nconsole.log(solve(54321)); // \"110101110101\"\nconsole.log(solve(98765)); // \"1111011101010\"\nconsole.log(solve(11111)); // \"101010101010101\"\nconsole.log(solve(22222)); // \"1010101010101010\"\nconsole.log(solve(33333)); // \"101010101010101010\"\nconsole.log(solve(44444)); // \"10101010101010101010\"\nconsole.log(solve(55555)); // \"1010101010101010101010\"\nconsole.log(solve(66666)); // \"101010101010101010101010\"\nconsole.log(solve(77777)); // \"10101010101010101010101010\"\nconsole.log(solve(88888)); // \"1010101010101010101010101010\"\nconsole.log(solve(99999)); // \"101010101010101010101010101010\"\nconsole.log(solve(100000)); // \"1010101010101010101010101010101\"\nconsole.log(solve(200000)); // \"10101010101010101010101010101010\"\nconsole.log(solve(300000)); // \"101010101010101010101010101010101\"\nconsole.log(solve(400000)); // \"1010101010101010101010101010101010\"\nconsole.log(solve(500000)); // \"101010101010101010101010101010101010\"\nconsole.log(solve(600000)); // \"101010101010101010101010101"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7])); // 2\nconsole.log(add([1, 3, 5, 7])); // 0\nconsole.log(add([10, 21, 32, 43, 54])); // 21\nconsole.log(add([0, 1, 2, 3, 4, 5, 6])); // 6\nconsole.log(add([11, 22, 33, 44, 55])); // 22\nconsole.log(add([2, 4, 6, 8, 10])); // 12\nconsole.log(add([1, 2, 3, 4, 5, 6])); // 4\nconsole.log(add([1, 2, 3, 4, 5, 6, 7])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 6\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"task_id": "JavaScript/86", "generation": "\n  return s.split(' ').map(word => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }).join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return res;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return [];\n  }\n  const newArray = [...array];\n  const sum = newArray[0] + newArray[newArray.length - 1];\n  if (sum % 2 === 0) {\n    return newArray.sort((a, b) => b - a);\n  }\n  return newArray.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n    } else if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 + 2) % 26 + 65);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i] !== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity ? null : secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n    let boredomCount = 0;\n    const sentences = S.split(/[\\.\\?\\!]\\s*/);\n    for (let sentence of sentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n    return boredomCount;\n}\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. sun is shining. I love this weather\")); // 1\nconsole.log(isBored(\"I am happy. I am not sad. I am okay\")); // 3\nconsole.log(isBored(\"It is a beautiful day. I think I will go for a walk. I am excited\")); // 2\nconsole.log(isBored(\"I am going to sleep. I am tired. I am not feeling well\")); // 3\nconsole.log(isBored(\"I am going to eat. I am full. I am happy\")); // 2\nconsole.log(isBored(\"I am going to study. I am smart. I am confident\")); // 2\nconsole.log(isBored(\"I am going to work. I am excited. I am ready\")); // 2\nconsole.log(isBored(\"I am going to sleep. I am tired. I am not feeling well\")); // 3\nconsole.log(isBored(\"I am going to eat. I am full. I am happy\")); // 2\nconsole.log(isBored(\"I am going to study. I am smart. I am confident\")); // 2\nconsole.log(isBored(\"I am going to work. I am excited. I am ready\")); // 2\nconsole.log(isBored(\"I am going to sleep. I am tired. I am not feeling well\")); // 3\nconsole.log(isBored(\"I am going to eat. I am full. I am happy\")); // 2\nconsole.log(isBored(\"I am going to study. I am smart. I am confident\")); // 2\nconsole.log(isBored(\"I am going to work. I am excited. I am ready\")); // 2\nconsole.log(isBored(\"I am going to sleep. I am tired. I am not feeling well\"));"}
{"task_id": "JavaScript/92", "generation": "\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        return x === y + z || y === x + z || z === x + y;\n    }\n    return false;\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    let isUpperCase = char === char.toUpperCase();\n\n    // Swap case\n    char = isUpperCase ? char.toLowerCase() : char.toUpperCase();\n\n    // Replace vowels with the letter 2 places ahead\n    if (vowels.includes(char.toLowerCase())) {\n      let vowelIndex = alphabet.indexOf(char.toLowerCase());\n      let newVowelIndex = (vowelIndex + 2) % 26;\n      char = alphabet[newVowelIndex];\n      // Preserve original case\n      char = isUpperCase ? char.toUpperCase() : char.toLowerCase();\n    }\n\n    encodedMessage += char;\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let largestPrime = 0;\n  for (let num of lst) {\n    if (isPrime(num) && num > largestPrime) largestPrime = num;\n  }\n\n  return largestPrime\n    .toString()\n    .split(\"\")\n    .reduce((acc, digit) => acc + parseInt(digit), 0);\n};"}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) return false;\n    let allLower = true;\n    let allUpper = true;\n    for (let key of Object.keys(dict)) {\n        if (typeof key !== 'string') return false;\n        if (key !== key.toLowerCase()) allLower = false;\n        if (key !== key.toUpperCase()) allUpper = false;\n    }\n    return allLower || allUpper;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n    let lastDigitA = Math.abs(a % 10);\n    let lastDigitB = Math.abs(b % 10);\n    return lastDigitA * lastDigitB;\n}"}
{"task_id": "JavaScript/98", "generation": "\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if ('AEIOU'.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  // Check if the number is equidistant from two integers\n  if (num - floor === ceil - num) {\n    // Round away from zero\n    return num > 0 ? ceil : floor - 1;\n  } else {\n    // Return the closest integer\n    return Math.round(num);\n  }\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let current = n;\n  for (let i = 0; i < n; i++) {\n    result.push(current);\n    current += n % 2 === 0 ? 2 : 1;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/).filter(Boolean);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  } else {\n    return y;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        let hasEven = false;\n        let num = x[i];\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 === 0) {\n                hasEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (!hasEven) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.toString().length - b.toString().length);\n};\n\nconst sortAndReverse = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  return reversedArr;\n};\n\nconst replaceWithNames = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const replacedArr = arr.map((num) => {\n    if (num >= 1 && num <= 9) {\n      return names[num - 1];\n    }\n  });\n  return replacedArr;\n};\n\nconst strangeSortArray = (arr) => {\n  const sortedArr = sortAndReverse(arr);\n  const replacedArr = replaceWithNames(sortedArr);\n  return replacedArr;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n  const str = num.toString();\n  const reversedStr = str.split('').reverse().join('');\n  return str === reversedStr;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  const digitSum = (num) => {\n    return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n  };\n\n  return arr.filter(num => digitSum(num) > 0).length;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i - 1] > arr[i]) {\n      count++;\n      if (count > 1) return false;\n    }\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let oddNum = lst1.filter(num => num % 2 !== 0);\n  let evenNum = lst2.filter(num => num % 2 === 0);\n  if (oddNum.length <= evenNum.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  const result = {};\n  const arr = test.split(' ').filter(Boolean);\n  arr.forEach((el) => {\n    if (result[el]) {\n      result[el] += 1;\n    } else {\n      result[el] = 1;\n    }\n  });\n  const max = Math.max(...Object.values(result));\n  const keys = Object.keys(result).filter((key) => result[key] === max);\n  const finalResult = {};\n  keys.forEach((key) => {\n    finalResult[key] = max;\n  });\n  return finalResult;\n};\n\nexport default histogram;"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let char of s) {\n    if (char !== c) {\n      result += char;\n    }\n  }\n  let reversed = result.split('').reverse().join('');\n  let isPalindrome = result === reversed;\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map(str => {\n        let oddCount = [...str].filter(digit => digit % 2 !== 0).length;\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n    });\n}\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3', \"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let row = grid[i];\n        let water = row.reduce((a, b) => a + b, 0);\n        count += Math.ceil(water / capacity);\n    }\n    return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('').filter(char => char === '1').length;\n    const bOnes = b.toString(2).split('').filter(char => char === '1').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  // Split the string into words\n  const words = s.split(' ');\n  // Filter the words to find those with exactly n consonants\n  const filteredWords = words.filter(word => {\n    // Remove vowels from the word and check the length of the remaining string\n    const consonants = word.replace(/[aeiouAEIOU]/g, '');\n    return consonants.length === n;\n  });\n  // Return the filtered words\n  return filteredWords;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n      return word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  const balance = (str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '(') count++;\n      else if (str[i] === ')') count--;\n      if (count < 0) return false;\n    }\n    return count === 0;\n  };\n\n  const first = lst[0] + lst[1];\n  const second = lst[1] + lst[0];\n  return balance(first) || balance(second) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3, 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); // 0\nconsole.log(solution([1, 2, 3, 4, 5, 6, 7, 8, 9])); // 15\nconsole.log(solution([10, 20, 30, 40, 50])); // 60\nconsole.log(solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])); // 20\nconsole.log(solution([11, 22, 33, 44, 55])); // 66\nconsole.log(solution([12, 23, 34, 45, 56])); // 78\nconsole.log(solution([13, 24, 35, 46, 57])); // 90\nconsole.log(solution([14, 25, 36, 47, 58])); // 102\nconsole.log(solution([15, 26, 37, 48, 59])); // 114\nconsole.log(solution([16, 27, 38, 49, 60])); // 126\nconsole.log(solution([17, 28, 39, 50, 61])); // 138\nconsole.log(solution([18, 29, 40, 51, 62])); // 150\nconsole.log(solution([19, 30, 41, 52, 63])); // 162\nconsole.log(solution([20, 31, 42, 53, 64])); // 174\nconsole.log(solution([21, 32, 43, 54, 65])); // 186"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n /= 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    sequence.push(n);\n  }\n  return sequence.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const regex = /^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})$/;\n  if (!regex.test(date)) {\n    return false;\n  }\n  const [month, day, year] = date.split('-').map(Number);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day === 29 && !isLeapYear(year)) {\n    return false;\n  }\n  return true;\n};\n\nconst isLeapYear = (year) => {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    return [...txt].reduce((acc, curr) => {\n      if (curr >= \"a\" && curr <= \"z\" && (curr.charCodeAt(0) - 97) % 2 === 1) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) return 0;\n    product *= Math.sign(arr[i]);\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n    const N = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    const visited = new Set();\n    const dfs = (x, y, path) => {\n        if (path.length === k) {\n            if (!result || path < result) {\n                result = [...path];\n            }\n            return;\n        }\n        visited.add(`${x},${y}`);\n        for (const [dx, dy] of directions) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited.has(`${nx},${ny}`)) {\n                dfs(nx, ny, path.concat(grid[nx][ny]));\n            }\n        }\n        visited.delete(`${x},${y}`);\n    };\n    let result = null;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, [grid[i][j]]);\n        }\n    }\n    return result;\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    let hasOdd = false;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  let nested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']' && stack.length > 0) {\n      stack.pop();\n      if (stack.length > 0) {\n        nested = true;\n      }\n    }\n  }\n  return nested;\n};"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.reduce((sum, num) => sum + Math.pow(Math.ceil(num), 2), 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n    if (txt.length === 0) return false;\n    const lastChar = txt[txt.length - 1];\n    const secondLastChar = txt[txt.length - 2];\n    if (lastChar === \" \") return false;\n    if (secondLastChar === \" \") return true;\n    if (lastChar.match(/[a-z]/i) && secondLastChar.match(/[^a-z]/i)) return true;\n    return false;\n}"}
{"task_id": "JavaScript/135", "generation": "\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] >= arr[i - 1]){\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "JavaScript/136", "generation": "\n    let neg = lst.filter(x => x < 0).sort((a, b) => b - a);\n    let pos = lst.filter(x => x > 0).sort((a, b) => a - b);\n    return [neg.length ? neg[0] : null, pos.length ? pos[0] : null];\n}"}
{"task_id": "JavaScript/137", "generation": "\n  let numA = Number(a.replace(\",\", \".\"));\n  let numB = Number(b.replace(\",\", \".\"));\n  if (numA === numB) return null;\n  return numA > numB ? numA : numB;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  // Check if n is even and greater than or equal to 8\n  if (n % 2 === 0 && n >= 8) {\n    // Check if n minus 8 is even\n    return (n - 8) % 2 === 0;\n  }\n  // If n is not even or less than 8, return false\n  return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        let factorial = 1;\n        for (let j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]{3}$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += Math.pow(lst[i], 3);\n        } else if (i % 4 === 0) {\n            sum += Math.pow(lst[i], 4);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/143", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  return sentence\n    .split(\" \")\n    .filter((word) => isPrime(word.length))\n    .join(\" \");\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const xNumerator = parseInt(x.split('/')[0]);\n  const xDenominator = parseInt(x.split('/')[1]);\n  const nNumerator = parseInt(n.split('/')[0]);\n  const nDenominator = parseInt(n.split('/')[1]);\n\n  const resultNumerator = xNumerator * nNumerator;\n  const resultDenominator = xDenominator * nDenominator;\n\n  return resultNumerator % resultDenominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        let sumB = b.toString().split('').reduce((acc, val) => acc + Math.abs(parseInt(val)), 0);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n}"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10) {\n            let strNum = Math.abs(num).toString();\n            let firstDigit = parseInt(strNum.charAt(0));\n            let lastDigit = parseInt(strNum.charAt(strNum.length - 1));\n            if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  if (index1 > index2) [index1, index2] = [index2, index1];\n  return planets.slice(index1 + 1, index2);\n}"}
{"task_id": "JavaScript/149", "generation": "\n    // Filter out strings with odd lengths\n    const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n    // Sort the list by length, then alphabetically\n    evenLengthStrings.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return evenLengthStrings;\n}"}
{"task_id": "JavaScript/150", "generation": "\n    for(let i = 2; i <= Math.sqrt(n); i++) {\n        if(n % i === 0) return y;\n    }\n    return x;\n}"}
{"task_id": "JavaScript/151", "generation": "\n    return lst.reduce((acc, curr) => {\n        if (curr > 0 && curr % 2 !== 0) {\n            return acc + Math.pow(curr, 2);\n        }\n        return acc;\n    }, 0);\n}"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}"}
{"task_id": "JavaScript/153", "generation": "\n    let strongest = '';\n    let maxStrength = -Infinity;\n    for (let extension of extensions) {\n        let uppercaseCount = (extension.match(/[A-Z]/g) || []).length;\n        let lowercaseCount = (extension.match(/[a-z]/g) || []).length;\n        let strength = uppercaseCount - lowercaseCount;\n        if (strength > maxStrength) {\n            strongest = extension;\n            maxStrength = strength;\n        }\n    }\n    return `${class_name}.${strongest}`;\n}\n\n// Test cases\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // 'my_class.AA'\nconsole.log(strongestExtension('DataModel', ['JSONparser', 'XmlConverter', 'CSVLoader'])); // 'DataModel.JSONparser'\nconsole.log(strongestExtension('Widget', ['UIElement', 'Container', 'Button'])); // 'Widget.UIElement'\nconsole.log(strongestExtension('Framework', ['React', 'Vue', 'Angular'])); // 'Framework.React'\nconsole.log(strongestExtension('Component', ['Container', 'Button', 'Input'])); // 'Component.Container'\nconsole.log(strongestExtension('Module', ['Redux', 'MobX', 'Vuex'])); // 'Module.Redux'\nconsole.log(strongestExtension('Service', ['HTTP', 'WebSocket', 'GRPC'])); // 'Service.HTTP'\nconsole.log(strongestExtension('Model', ['SQL', 'NoSQL', 'GraphQL'])); // 'Model.SQL'\nconsole.log(strongestExtension('View', ['HTML', 'CSS', 'JSX'])); // 'View.HTML'\nconsole.log(strongestExtension('Controller', ['MVC', 'MVVM', 'MVP'])); // 'Controller.MVC'\nconsole.log(strongestExtension('"}
{"task_id": "JavaScript/154", "generation": "\n  let bLength = b.length;\n  let aLength = a.length;\n  let bRotated = b;\n\n  for (let i = 0; i < bLength; i++) {\n    bRotated = bRotated.slice(1) + bRotated.charAt(0);\n    if (a.includes(bRotated)) {\n      return true;\n    }\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    let str = Math.abs(num).toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let roman = '';\n\n    for (let i = 0; i < romanNumerals.length; i++) {\n        while (number >= romanNumerals[i].value) {\n            roman += romanNumerals[i].numeral;\n            number -= romanNumerals[i].value;\n        }\n    }\n\n    return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  words.forEach((word) => {\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUniqueChars || (uniqueChars === maxUniqueChars && word < maxWord)) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    }\n  });\n\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let totalEaten = number + Math.min(need, remaining);\n  let left = Math.max(remaining - need, 0);\n  return [totalEaten, left];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n    let result = '';\n    let hasLetter = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) {\n            result += s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase();\n            hasLetter = true;\n        } else {\n            result += s[i];\n        }\n    }\n    return hasLetter ? result : result.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n    let result = [];\n    if (a < b) {\n        for (let i = a; i <= b; i++) {\n            result.push(i);\n        }\n    } else {\n        for (let i = b; i <= a; i++) {\n            result.push(i);\n        }\n    }\n    return result;\n}"}
