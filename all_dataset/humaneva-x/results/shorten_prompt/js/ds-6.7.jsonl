{"task_id": "JavaScript/0", "generation": "\n  numbers.sort((a, b) => a - b);\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (numbers[i + 1] - numbers[i] < threshold) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let groups = [];\n  let group = '';\n  for (let char of paren_string) {\n    if (char === '(') {\n      group += char;\n      stack.push(char);\n    } else if (char === ')') {\n      group += char;\n      stack.pop();\n      if (stack.length === 0) {\n        groups.push(group);\n        group = '';\n      }\n    }\n  }\n  return groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  const differences = numbers.map((val) => Math.abs(val - mean));\n  const mad = differences.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return mad;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxNesting = [];\n  let groups = paren_string.split(' ');\n\n  for (let group of groups) {\n    let count = 0;\n    let max = 0;\n    for (let char of group) {\n      if (char === '(') {\n        count++;\n        if (count > max) {\n          max = count;\n        }\n      } else if (char === ')') {\n        count--;\n      }\n    }\n    maxNesting.push(max);\n  }\n\n  return maxNesting;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(str => str.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((number) => {\n    max = Math.max(max, number);\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reversedString = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substr(0, i) === reversedString.substr(reversedString.length - i)) {\n      return string + reversedString.substr(0, reversedString.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let sequence = [];\n  for (let i = 0; i <= n; i++) {\n    sequence.push(i.toString());\n  }\n  return sequence.join(\" \");\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const distinctCharacters = new Set(string.toLowerCase());\n  return Array.from(distinctCharacters).length;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  let notes = music_string.split(' ')\n  let beats = []\n\n  for (let note of notes) {\n    if (note === 'o') beats.push(4)\n    if (note === 'o|') beats.push(2)\n    if (note === '.|') beats.push(1)\n  }\n\n  return beats\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(\" \")\n    .sort((a, b) => nums[a] - nums[b])\n    .join(\" \");\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let closestPair;\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closestPair.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => Number.isInteger(value));\n};"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; string[i] !== undefined; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  let counts = {};\n\n  for (let num of numbers) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  for (let num of numbers) {\n    if (counts[num] === 1) {\n      result.push(num);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let flipped = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      flipped += string[i].toLowerCase();\n    } else {\n      flipped += string[i].toUpperCase();\n    }\n  }\n  return flipped;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((n) => n > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const f = (x) => {\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n      result += xs[i] * Math.pow(x, i);\n    }\n    return result;\n  };\n  const df = (x) => {\n    let result = 0;\n    for (let i = 1; i < n; i++) {\n      result += i * xs[i] * Math.pow(x, i - 1);\n    }\n    return result;\n  };\n  let x = 1.0;\n  while (Math.abs(f(x)) > 1e-6) {\n    x = x - f(x) / df(x);\n  }\n  return x;\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const divisibleByThree = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n  return l.map((_, index) => (index % 3 === 0 ? divisibleByThree.shift() : l[index]));\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let uniqueList = [...new Set(l)];\n  return uniqueList.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().match(/7/g) || []).length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, index) => index % 2 === 0);\n  const sortedEvenIndices = evenIndices.sort((a, b) => a - b);\n\n  return l.map((_, index) =>\n    index % 2 === 0 ? sortedEvenIndices.shift() : l[index]\n  );\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const charCode = parseInt(s.slice(i, i + 3), 16);\n    decoded += String.fromCharCode(charCode);\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../redux/actions/authActions';\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    dispatch(login(username, password, navigate));\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../redux/actions/authActions';\n\nconst Register = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n   "}
{"task_id": "JavaScript/39", "generation": "\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n\n  const isPrime = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  let i = 0;\n  let count = 0;\n  while (count < n) {\n    if (isPrime(fib(i))) count++;\n    i++;\n  }\n  return fib(i - 1);\n};"}
{"task_id": "JavaScript/40", "generation": "\n  if (l.length < 3) return false;\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    if (i > 0 && l[i] === l[i - 1]) continue;\n    let j = i + 1;\n    let k = l.length - 1;\n    while (j < k) {\n      const sum = l[i] + l[j] + l[k];\n      if (sum < 0) j++;\n      else if (sum > 0) k--;\n      else return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((e) => e + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  return x.toString(base);\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n < 4) {\n    return n % 2;\n  }\n\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  let e = 0;\n\n  for (let i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n\n  return e;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let median;\n  if (l.length % 2 === 0) {\n    median = (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n  } else {\n    median = l[(l.length - 1) / 2];\n  }\n  return median;\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text.split('').reverse().join('') === text;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      result += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      result += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const countChars = (str) =>\n    str.split('').reduce((acc, char) => {\n      acc[char] = (acc[char] || 0) + 1;\n      return acc;\n    }, {});\n  const count0 = countChars(s0);\n  const count1 = countChars(s1);\n  return Object.keys(count0).every((key) => count0[key] === count1[key]) &&\n    Object.keys(count1).every((key) => count0[key] === count1[key]);\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) return 1;\n  let fibNums = [1, 1];\n  for (let i = 2; i < n; i++) {\n    fibNums.push(fibNums[i - 1] + fibNums[i - 2]);\n  }\n  return fibNums[n - 1];\n};"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) {\n    return true;\n  }\n  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = new Set([...set1].filter(x => set2.has(x)));\n  return Array.from(intersection).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  while (factor <= n) {\n    if (n % factor === 0) {\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n      if (count < 0) {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  // remove the first element (the constant term)\n  // multiply each element by its index (which is the power of x)\n  // return the new array\n  return xs.slice(1).map((x, i) => (i + 1) * x);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  for (let i = 3; i <= n; i++) {\n    const temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n  }\n  return c;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      if (i === s.length - 1 && s[i] === 'y') {\n        count++;\n      } else if (i !== s.length - 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = String(x).split('');\n  const len = digits.length;\n  const shiftMod = shift % len;\n\n  return digits.slice(shiftMod).concat(digits.slice(0, shiftMod)).join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n\n  let smallestEvenValue = Number.MAX_SAFE_INTEGER;\n  let smallestEvenIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEvenValue && arr[i] % 2 === 0) {\n      smallestEvenValue = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n\n  return smallestEvenIndex !== -1 ? [smallestEvenValue, smallestEvenIndex] : [];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (count[lst[i]] >= lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  let result = [];\n  let left = 0;\n  let right = lst.length - 1;\n  while (left <= right) {\n    result.push(lst[left++]);\n    if (left <= right) result.push(lst[right--]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const isBalanced = q.join('') === q.reverse().join('');\n  return sum <= w && isBalanced;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return sum1 < sum2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    while (a % i === 0) {\n      count++;\n      a = a / i;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) {\n    return x > 1;\n  }\n  let base = n;\n  while (base <= x / n) {\n    if (base * n === x) {\n      return true;\n    }\n    base *= n;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let x = Math.round(Math.pow(a, (1 / 3)));\n  return x * x * x === a;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  const hexPrime = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hexPrime.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) {\n    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  const letterGrades = grades.map((grade) => {\n    if (grade >= 4.0) return \"A+\";\n    if (grade >= 3.7) return \"A\";\n    if (grade >= 3.3) return \"A-\";\n    if (grade >= 3.0) return \"B+\";\n    if (grade >= 2.7) return \"B\";\n    if (grade >= 2.3) return \"B-\";\n    if (grade >= 2.0) return \"C+\";\n    if (grade >= 1.7) return \"C\";\n    if (grade >= 1.3) return \"C-\";\n    if (grade >= 1.0) return \"D+\";\n    if (grade >= 0.7) return \"D\";\n    if (grade >= 0.0) return \"D-\";\n    return \"E\";\n  });\n  return letterGrades;\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return false;\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 2;\n  if (n === 2) return 8;\n  return 2 * startsOneEnds(n - 1) + 2 * startsOneEnds(n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  return s\n    .split(' ')\n    .map((word) =>\n      word\n        .split('')\n        .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n        .join('')\n    )\n    .join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let coordinates = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coordinates.push([i, j]);\n      }\n    }\n  }\n  return coordinates.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  }).map(coordinate => ({x: coordinate[0], y: coordinate[1]}));\n}"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return [];\n  if (array.length === 1) return [...array];\n\n  const sortedArray = [...array];\n  const sum = array[0] + array[array.length - 1];\n\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n\n  return sortedArray;\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s[i].charCodeAt();\n    if ((charCode >= 65 && charCode <= 87) || (charCode >= 97 && charCode <= 119)) {\n      result += String.fromCharCode(charCode + 2);\n    } else if ((charCode >= 88 && charCode <= 90) || (charCode >= 120 && charCode <= 122)) {\n      result += String.fromCharCode(charCode - 24);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  let min = Math.min(...lst);\n  lst.splice(lst.indexOf(min), 1);\n  let secondMin = Math.min(...lst);\n  return secondMin;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let sentences = S.split(/[.?!]/);\n  let count = 0;\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (\n    typeof x !== \"number\" ||\n    typeof y !== \"number\" ||\n    typeof z !== \"number\" ||\n    !Number.isInteger(x) ||\n    !Number.isInteger(y) ||\n    !Number.isInteger(z)\n  ) {\n    return false;\n  }\n  return x + y === z || x + z === y || y + z === x;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  const vowels = 'aeiouAEIOU';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      encodedMessage += alphabet[alphabet.indexOf(message[i]) + 2];\n    } else if (message[i] === message[i].toLowerCase()) {\n      encodedMessage += message[i].toUpperCase();\n    } else {\n      encodedMessage += message[i].toLowerCase();\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n  }\n\n  let maxPrime = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      maxPrime = Math.max(maxPrime, lst[i]);\n    }\n  }\n  return sumDigits(maxPrime);\n}"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let allLower = true;\n  let allUpper = true;\n\n  for (let key in dict) {\n    if (key !== key.toLowerCase()) {\n      allLower = false;\n    }\n    if (key !== key.toUpperCase()) {\n      allUpper = false;\n    }\n  }\n\n  return allLower || allUpper;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  if (n < 2) return [];\n\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return true;\n  };\n\n  const primes = [];\n  for (let i = 2; i < n; i++) if (isPrime(i)) primes.push(i);\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  // Get the unit digits of a and b\n  let aUnitDigit = Math.abs(a) % 10;\n  let bUnitDigit = Math.abs(b) % 10;\n\n  // Return the product of the unit digits\n  return aUnitDigit * bUnitDigit;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i].toUpperCase() && 'AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let arr = [n];\n  for (let i = 1; i < n; i++) {\n    if (arr[i - 1] % 2 === 0) {\n      arr.push(arr[i - 1] + 2);\n    } else {\n      arr.push(arr[i - 1] + 2);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.replace(/[,]/g, \"\").split(/\\s/);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  } else {\n    return Math.floor(y / 2) * 2;\n  }\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return (avg >>> 0).toString(2);\n};"}
{"task_id": "JavaScript/104", "generation": "\n  return x.filter((num) => {\n    return !(num.toString().split('').some((digit) => parseInt(digit) % 2 === 0));\n  }).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  let newArr = arr.sort((a, b) => a - b).reverse();\n  let result = [];\n  for (let i = 0; i < newArr.length; i++) {\n    if (newArr[i] >= 1 && newArr[i] <= 9) {\n      switch (newArr[i]) {\n        case 1:\n          result.push(\"One\");\n          break;\n        case 2:\n          result.push(\"Two\");\n          break;\n        case 3:\n          result.push(\"Three\");\n          break;\n        case 4:\n          result.push(\"Four\");\n          break;\n        case 5:\n          result.push(\"Five\");\n          break;\n        case 6:\n          result.push(\"Six\");\n          break;\n        case 7:\n          result.push(\"Seven\");\n          break;\n        case 8:\n          result.push(\"Eight\");\n          break;\n        case 9:\n          result.push(\"Nine\");\n          break;\n      }\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sumOfNumbers(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sumOfNumbers = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return (even, odd);\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n      while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n      }\n      if (sum > 0) count++;\n    } else {\n      while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n      }\n      if (sum > 0) count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[(i + 1) % arr.length]) count++;\n  }\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let odd1 = lst1.filter(n => n % 2 !== 0);\n  let even2 = lst2.filter(n => n % 2 === 0);\n  return odd1.length <= even2.length ? 'YES' : 'NO';\n};"}
{"task_id": "JavaScript/111", "generation": "\n  if (test === \"\") return {};\n  const words = test.split(\" \");\n  const count = {};\n  let max = 0;\n  let result = {};\n\n  words.forEach((word) => {\n    count[word] = (count[word] || 0) + 1;\n    if (count[word] > max) {\n      max = count[word];\n      result = { [word]: max };\n    } else if (count[word] === max) {\n      result[word] = max;\n    }\n  });\n\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  const isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    const oddCount = [...str].filter((char) => char % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let totalWells = 0;\n  let totalWater = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        totalWells++;\n      } else {\n        totalWater += grid[i][j];\n      }\n    }\n  }\n\n  return Math.ceil(totalWater / capacity) + totalWells;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2);\n    const bBinary = b.toString(2);\n    const aOnes = aBinary.split('1').length - 1;\n    const bOnes = bBinary.split('1').length - 1;\n    return aOnes - bOnes || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  let result = [];\n\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) count++;\n    }\n    if (count === n) result.push(word);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count1++;\n    } else {\n      if (count1 === 0) {\n        return 'No';\n      }\n      count1--;\n    }\n  }\n\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count2++;\n    } else {\n      if (count2 === 0) {\n        return 'No';\n      }\n      count2--;\n    }\n  }\n\n  if (count1 % 2 === 0 && count2 % 2 === 0) {\n    return 'Yes';\n  }\n\n  return 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10 || (arr[i] >= 100 && arr[i] < 1000)) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  const collatz = (num, arr = []) => {\n    if (num === 1) {\n      arr.push(1);\n      return arr;\n    }\n    if (num % 2 === 0) {\n      arr.push(num);\n      return collatz(num / 2, arr);\n    } else {\n      arr.push(num);\n      return collatz(num * 3 + 1, arr);\n    }\n  };\n\n  const collatzArr = collatz(n);\n  const oddNumbers = collatzArr.filter((num) => num % 2 !== 0);\n  return oddNumbers.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  if (!date) {\n    return false;\n  }\n\n  const dateParts = date.split(\"-\");\n\n  if (dateParts.length !== 3) {\n    return false;\n  }\n\n  const [month, day, year] = dateParts.map(Number);\n\n  if (\n    !Number.isInteger(month) ||\n    !Number.isInteger(day) ||\n    !Number.isInteger(year) ||\n    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    year < 1\n  ) {\n    return false;\n  }\n\n  const isLeapYear = (year) =>\n    (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\n  const daysInMonth = [\n    31,\n    isLeapYear(year) ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n\n  if (day > daysInMonth[month - 1]) {\n    return false;\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    return txt.split('').reduce((acc, char) => {\n      return char === char.toLowerCase() && char.charCodeAt() % 2 !== 0 ? acc + 1 : acc;\n    }, 0);\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      count++;\n    }\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return count < 2;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start + 1;\n  if (length < 2) return \"NO\";\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n    if (length % i === 0) return \"NO\";\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n\n  let sum = 0;\n  let sign = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n      sum += Math.abs(arr[i]);\n    } else if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n\n  return sign * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [-1, 0],\n    [0, -1],\n  ];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  let minPath = Array(k).fill(Infinity);\n  let minCell = Array(k).fill(null);\n\n  const dfs = (x, y, k, path) => {\n    if (k === 0) {\n      if (path.join(',') < minPath.join(',')) {\n        minPath = [...path];\n        minCell = [x, y];\n      }\n      return;\n    }\n    for (let i = 0; i < directions.length; i++) {\n      const nx = x + directions[i][0];\n      const ny = y + directions[i][1];\n      if (nx < 0 || ny < 0 || nx >= n || ny >= n || visited[nx][ny]) continue;\n      visited[nx][ny] = true;\n      dfs(nx, ny, k - 1, [...path, grid[nx][ny]]);\n      visited[nx][ny] = false;\n    }\n  };\n\n  visited[0][0] = true;\n  dfs(0, 0, k - 1, [grid[0][0]]);\n  return minCell;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 0) return [0];\n  if (n === 1) return [0, 3];\n  if (n === 2) return [0, 3, 2];\n\n  let arr = [0, 3, 2];\n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr[i] = 1 + i / 2;\n    } else {\n      arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n  }\n\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let arr = Array.from(String(n), Number);\n  let oddArr = arr.filter(num => num % 2 !== 0);\n  return oddArr.length === arr.length ? 0 : oddArr.reduce((a, b) => a * b);\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count === 0 && i !== string.length - 1) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((acc, curr) => {\n    return acc + Math.pow(Math.ceil(curr), 2);\n  }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(' ');\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord[lastWord.length - 1];\n\n  return /[a-z]/i.test(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1] && i > max) {\n      max = i;\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && (largestNegative === null || lst[i] > largestNegative)) {\n      largestNegative = lst[i];\n    } else if (lst[i] > 0 && (smallestPositive === null || lst[i] < smallestPositive)) {\n      smallestPositive = lst[i];\n    }\n  }\n\n  return (largestNegative, smallestPositive);\n};"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === \"string\") a = parseFloat(a.replace(\",\", \".\"));\n  if (typeof b === \"string\") b = parseFloat(b.replace(\",\", \".\"));\n\n  if (a === b) return null;\n  return a > b ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 8 || n % 2 !== 0) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    let factorial = 1;\n    for (let j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const file_parts = file_name.split('.');\n  const file_extension = file_parts[1];\n  const file_name_without_extension = file_parts[0];\n  const digits_in_name = file_name_without_extension.match(/\\d/g);\n\n  if (\n    file_parts.length !== 2 ||\n    file_name_without_extension.length === 0 ||\n    !/[a-zA-Z]/.test(file_name_without_extension[0]) ||\n    (digits_in_name && digits_in_name.length > 3) ||\n    !['txt', 'exe', 'dll'].includes(file_extension)\n  ) {\n    return 'No';\n  }\n\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n\n  return primeWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\n  return xNum * nDen === xDen * nNum;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc + Math.abs(parseInt(cur)), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  return nums.filter((num) => num > 10 && num % 10 % 2 === 1 && Math.abs(num) % 10 % 2 === 1).length;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let count = 0;\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  if (!planets.includes(planet1) || !planets.includes(planet2)) return [];\n  const start = planets.indexOf(planet1);\n  const end = planets.indexOf(planet2);\n  if (start > end) return bf(planet2, planet1);\n  return planets.slice(start + 1, end);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  const evenLengthWords = lst.filter((word) => word.length % 2 === 0);\n  return evenLengthWords.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (n < 2) {\n    return y;\n  }\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = {\n    name: '',\n    strength: 0,\n  };\n\n  for (let ext of extensions) {\n    let strength =\n      extensions.indexOf(ext) === 0\n        ? 0\n        : ext.split('').reduce((acc, char) => {\n            return char === char.toUpperCase() ? acc + 1 : acc - 1;\n          }, 0);\n\n    if (strength > strongest.strength) {\n      strongest.name = ext;\n      strongest.strength = strength;\n    }\n  }\n\n  return `${class_name}.${strongest.name}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < b.length; i++) {\n    let isSubstring = true;\n    for (let j = 0; j < b.length; j++) {\n      if (a[j] !== b[(i + j) % b.length]) {\n        isSubstring = false;\n        break;\n      }\n    }\n    if (isSubstring) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let numArr = Math.abs(num).toString().split('');\n  numArr.forEach((digit) => {\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n\n  let result = '';\n\n  for (let i = Object.keys(map).length - 1; i >= 0; i--) {\n    while (number >= Object.keys(map)[i]) {\n      number -= Object.keys(map)[i];\n      result += map[Object.keys(map)[i]];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUniqueChars = 0;\n  let wordWithMaxUniqueChars = '';\n\n  words.forEach((word) => {\n    const uniqueChars = new Set(word.split('')).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      wordWithMaxUniqueChars = word;\n    } else if (uniqueChars === maxUniqueChars) {\n      wordWithMaxUniqueChars = word < wordWithMaxUniqueChars ? word : wordWithMaxUniqueChars;\n    }\n  });\n\n  return wordWithMaxUniqueChars;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  if (need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"+\":\n        result += operand[i + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n        break;\n      case \"*\":\n        result *= operand[i + 1];\n        break;\n      case \"//\":\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case \"**\":\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].match(/[a-z]/)) {\n      arr[i] = arr[i].toUpperCase();\n    } else if (arr[i].match(/[A-Z]/)) {\n      arr[i] = arr[i].toLowerCase();\n    }\n  }\n  return arr.join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  if (a < b) {\n    for (let i = a; i <= b; i++) {\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n  } else if (a > b) {\n    for (let i = b; i <= a; i++) {\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n};"}
