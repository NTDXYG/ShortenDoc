{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n/* Check if given list numbers, any two numbers closer each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n/* Check if given list numbers, any two numbers closer each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n/* Check if given list numbers, any two numbers closer each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + "}
{"task_id": "JavaScript/1", "generation": "\n  let paren_groups = [];\n  let paren_stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      current_group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      paren_stack.pop();\n      current_group += paren_string[i];\n      if (paren_stack.length === 0) {\n        paren_groups.push(current_group);\n        current_group = '';\n      }\n    }\n  }\n  return paren_groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n/* Write a function that takes a string and returns the number of vowels in the string. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 */\nconst count_vowels = (str) => {\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};\n/* Write a function that takes a string and returns the number of consonants in the string. >>> count_consonants('hello') 3 >>> count_consonants('world') 3 */\nconst count_consonants = (str) => {\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (!vowels.includes(str[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};\n/* Write a function that takes a string and returns the number of words in the string. >>> count_words('hello world') 2 >>> count_words('hello') 1 */\nconst count_words = (str) => {\n  return str.split(' ').length;\n};\n/* Write a function that takes a string and returns the number of characters in the string. >>> count_characters('hello') 5 >>> count_characters('hello world') 11 */\nconst count_characters = (str) => {\n  return str.length;\n};\n/* Write a function that takes a string and returns the number of unique characters in the string. >>> count_unique_characters('hello') 4 >>> count_unique_characters('hello world') 7 */\nconst count_unique_characters = (str) => {\n  return new Set(str).size;\n};\n/* Write a function that takes a string and returns the number of unique words in the string. >>> count_unique_words('hello world') 2 >>> count_unique_words('hello hello world') 2 */\nconst count_unique_words = (str) => {\n  return new Set(str.split(' '))."}
{"task_id": "JavaScript/4", "generation": "\n  const mean = average(numbers);\n  return average(numbers.map((num) => Math.abs(num - mean)));\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const max_levels = [];\n  for (let group of groups) {\n    let level = 0;\n    let max_level = 0;\n    for (let char of group) {\n      if (char === '(') {\n        level += 1;\n        max_level = Math.max(level, max_level);\n      } else if (char === ')') {\n        level -= 1;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}\n/* Input a string of parentheses. Output the number of pairs of matching parentheses. E.g. (()()) has 2 pairs of matching parentheses. >>> count_matching_parentheses('(()())') 2 */\nconst countMatchingParentheses = (paren_string) => {\n  let count = 0;\n  let stack = [];\n  for (let char of paren_string) {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length > 0) {\n        stack.pop();\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n/* Input a string of parentheses. Output the number of pairs of matching parentheses. E.g. (()()) has 2 pairs of matching parentheses. >>> count_matching_parentheses('(()())') 2 */\nconst countMatchingParentheses = (paren_string) => {\n  let count = 0;\n  let stack = [];\n  for (let char of paren_string) {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length > 0) {\n        stack.pop();\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n/* Input a string of parentheses. Output the number of pairs of matching parentheses. E.g. (()()) has 2 pairs of matching parentheses. >>> count_matching_parentheses('(()())') 2 */\nconst countMatchingParentheses = (paren_string) => {\n  let count = 0;\n  let stack = [];\n  for (let char of paren_string) {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length > 0) {\n        stack.pop();\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n/* Input a string of parentheses. Output the number of pairs of matching"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter((string) => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((num) => {\n    if (num > max) {\n      max = num;\n    }\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  const isPalindrome = (str) => str === str.split('').reverse().join('');\n  const longestPalindromeSuffix = string.split('').reverse().join('').split('').findIndex((char, index) => {\n    return isPalindrome(string.slice(index));\n  });\n  const prefix = string.slice(0, string.length - longestPalindromeSuffix);\n  return string + prefix.split('').reverse().join('');\n};\n/* Test if gniven strig is a palindrome *//* Find shortest palindrome that begins with supplied string. Algorithm idea simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' */\nconst makePalindrome = (string) => {\n  const isPalindrome = (str) => str === str.split('').reverse().join('');\n  const longestPalindromeSuffix = string.split('').reverse().join('').split('').findIndex((char, index) => {\n    return isPalindrome(string.slice(index));\n  });\n  const prefix = string.slice(0, string.length - longestPalindromeSuffix);\n  return string + prefix.split('').reverse().join('');\n};\n/* Test if gniven strig is a palindrome *//* Find shortest palindrome that begins with supplied string. Algorithm idea simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac' */\nconst makePalindrome = (string) => {\n  const isPalindrome = (str) => str === str.split('').reverse().join('');\n  const longestPalindromeSuffix = string.split('').reverse().join('').split('').findIndex((char, index) => {\n    return isPalindrome(string.slice(index));\n  });\n  const prefix = string.slice(0, string.length - longestPalindromeSuffix);\n  return string + prefix.split('').reverse().join('');\n};\n/* Test if gniven strig is a palindrome *//* Find shortest palindrome that begins with supplied string. Algorithm idea simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const distinctCharacters = new Set(lowerCaseString);\n  return distinctCharacters.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n/* Write a function that takes a string of numbers and returns the number of times each number is repeated in the string. For example, if the input string is \"111222333\", the function should return {1: 3, 2: 3, 3: 3}. If the input string is \"123\", the function should return {1: 1, 2: 1, 3: 1}. If the input string is \"112233445566\", the function should return {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}. */\nconst countNumbers = (numbers_string) => {\n  const counts = {};\n  for (let i = 0; i < numbers_string.length; i++) {\n    const number = parseInt(numbers_string[i]);\n    if (counts[number]) {\n      counts[number]++;\n    } else {\n      counts[number] = 1;\n    }\n  }\n  return counts;\n}\n/* Write a function that takes a string of words and returns the longest word in the string. If there are multiple words of the same length, return the first one. For example, if the input string is \"the quick brown fox\", the function should return \"quick\". If the input string is \"a b c d e\", the function should return \"a\". If the input string is \"one two three four five\", the function should return \"one\". */\nconst longestWord = (words_string) => {\n  const words = words_string.split(' ');\n  let longest = '';\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > longest.length) {\n      longest = words[i];\n    }\n  }\n  return longest;\n}\n/* Write a function that takes a string of words and returns the number of words in the string that start with a vowel. For example, if the input string is \"apple banana"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberals = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sorted = numbers.split(' ').sort((a, b) => numberals[a] - numberals[b]);\n  return sorted.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result;\n};\n/* Write a function that takes a string and returns the first non-repeating character in it. >>> firstNonRepeatingCharacter('abacabad') 'c' >>> firstNonRepeatingCharacter('abacaba') '' */\nconst firstNonRepeatingCharacter = (str) => {\n  const charCount = {};\n  for (const char of str) {\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n  for (const char of str) {\n    if (charCount[char] === 1) {\n      return char;\n    }\n  }\n  return '';\n};\n/* Write a function that takes a string and returns the number of vowels in it. >>> countVowels('Hello, world!') 3 >>> countVowels('aeiou') 5 >>> countVowels('') 0 */\nconst countVowels = (str) => {\n  const vowels = 'aeiou';\n  let count = 0;\n  for (const char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n};\n/* Write a function that takes a string and returns the number of words in it. >>> countWords('Hello, world!') 2 >>> countWords('The quick brown fox jumps over the lazy dog.') 9 >>> countWords('') 0 */\nconst countWords = (str) => {\n  return str.split(/\\s+/).length;\n};\n/* Write a function that takes a string and returns the number of unique characters in it. >>> countUniqueCharacters('Hello, world!') 10 >>> countUniqueCharacters('The quick brown fox jumps over the lazy dog.') 19 >>> countUniqueCharacters('') 0 */\nconst countUniqueCharacters = (str) => {\n  const charSet = new Set();\n  for (const char of str) {\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n/* Write a function that takes a string and"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n/* Given list numbers (of at least two elements), apply linear transform that list, such that smallest number will become 0 the largest will become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n/* Given list numbers (of at least two elements), apply linear transform that list, such that smallest number will become 0 the largest will become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n/* Given list numbers (of at least two elements), apply linear transform that list, such that smallest number will become 0 the largest will become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0] */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n/* Given list numbers (of at least two elements), apply linear transform that list, such that smallest number will become 0 the largest will become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0,"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => Number.isInteger(value));\n};\n/* Filter given list python values only for strings >>> filter_strings(['a', 3.14, 5]) ['a'] >>> filter_strings([1, 2, 3, 'abc', {}, []]) ['abc'] */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value === 'string');\n};\n/* Filter given list python values only for booleans >>> filter_booleans(['a', 3.14, 5, true, false]) [true, false] >>> filter_booleans([1, 2, 3, 'abc', {}, []]) [] */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n/* Filter given list python values only for objects >>> filter_objects(['a', 3.14, 5, true, false]) [{}, []] >>> filter_objects([1, 2, 3, 'abc', {}, []]) [{}, []] */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n/* Filter given list python values only for arrays >>> filter_arrays(['a', 3.14, 5, true, false]) [[]] >>> filter_arrays([1, 2, 3, 'abc', {}, []]) [[]] */\nconst filterArrays = (values) => {\n  return values.filter((value) => Array.isArray(value));\n};\n/* Filter given list python values only for functions >>> filter_functions(['a', 3.14, 5, true, false]) [] >>> filter_functions([1, 2, 3, 'abc', {}, [], () => {}]) [() => {}] */\nconst filterFunctions = (values) => {\n  return values.filter((value) => typeof value === 'function');\n};\n/* Filter given list python values only for numbers >>> filter_numbers(['a', 3.14, 5, true, false]) [3.14, 5] >>> filter_numbers([1, 2, 3, 'abc', {}, []]) [1, 2, 3] */\nconst filterNumbers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n/* Filter given list python values only for undefined >>> filter_undefined(['a', 3.14, 5, true, false]) [] >>>"}
{"task_id": "JavaScript/23", "generation": "\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length++;\n  }\n  return length;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const uniqueNumbers = new Set(numbers);\n  return Array.from(uniqueNumbers);\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string\n    .split('')\n    .map((char) => {\n      if (char === char.toUpperCase()) {\n        return char.toLowerCase();\n      } else {\n        return char.toUpperCase();\n      }\n    })\n    .join('');\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};\n/* Filter input list strings only for ones end with given suffix. >>> filter_by_suffix([], 'a') [] >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter((string) => string.endsWith(suffix));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter((string) => string.includes(substring));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterByRegex = (strings, regex) => {\n  return strings.filter((string) => regex.test(string));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterByRegexIgnoreCase = (strings, regex) => {\n  return strings.filter((string) => regex.test(string));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterByRegexIgnoreCaseAndNewLine = (strings, regex) => {\n  return strings.filter((string) => regex.test(string));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array'] */\nconst filterByRegexAndNewLine = (strings, regex) => {\n  return strings.filter((string) => regex.test(string));\n};\n/* Filter input list strings only for ones contains given substring. >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], '"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n};\n/* Return only negative numbers in list. >>> get_negative([-1, 2, -4, 5, 6]) [-1, -4] >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [-5, -3, -10] */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n/* Return only even numbers in list. >>> get_even([-1, 2, -4, 5, 6]) [2, -4, 6] >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [2, 0] */\nconst getEven = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n/* Return only odd numbers in list. >>> get_odd([-1, 2, -4, 5, 6]) [-1, 5] >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [5, 3, -5, -3, 3, 9, 1] */\nconst getOdd = (l) => {\n  return l.filter((x) => x % 2 !== 0);\n};\n/* Return only numbers in list that are divisible by 3. >>> get_divisible_by_3([-1, 2, -4, 5, 6]) [6] >>> get_divisible_by_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [9, 123] */\nconst getDivisibleBy3 = (l) => {\n  return l.filter((x) => x % 3 === 0);\n};\n/* Return only numbers in list that are divisible by 5. >>> get_divisible_by_5([-1, 2, -4, 5, 6]) [5] >>> get_divisible_by_5([5, 3, -5, 2, -3, 3,"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const a = xs[n - 1];\n  const b = xs[n - 2];\n  const c = xs[n - 3];\n  const d = xs[n - 4];\n  const e = xs[n - 5];\n  const f = xs[n - 6];\n  const g = xs[n - 7];\n  const h = xs[n - 8];\n  const i = xs[n - 9];\n  const j = xs[n - 10];\n  const k = xs[n - 11];\n  const l = xs[n - 12];\n  const m = xs[n - 13];\n  const o = xs[n - 14];\n  const p = xs[n - 15];\n  const q = xs[n - 16];\n  const r = xs[n - 17];\n  const s = xs[n - 18];\n  const t = xs[n - 19];\n  const u = xs[n - 20];\n  const v = xs[n - 21];\n  const w = xs[n - 22];\n  const x = xs[n - 23];\n  const y = xs[n - 24];\n  const z = xs[n - 25];\n  const aa = xs[n - 26];\n  const bb = xs[n - 27];\n  const cc = xs[n - 28];\n  const dd = xs[n - 29];\n  const ee = xs[n - 30];\n  const ff = xs[n - 31];\n  const gg = xs[n - 32];\n  const hh = xs[n - 33];\n  const ii = xs[n - 34];\n  const jj = xs[n - 35];\n  const kk = xs[n - 36];\n  const ll = xs[n - 37];\n  const mm = xs[n - 38];\n  const nn = xs[n - 39];\n  const oo = xs[n - 40];\n  const pp = xs[n - 41];\n  const qq = xs[n - 42];\n  const rr = xs[n - 43];\n  const ss = xs[n - 44];\n  const tt = xs[n - 45];\n  const uu = xs[n - 46];\n  const vv = xs[n - 47];\n  const ww = xs[n - 48];\n  const xx = xs[n - 49];\n  const yy = xs[n - 50];\n  const zz = xs"}
{"task_id": "JavaScript/33", "generation": "\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i++) {\n    l1.splice(i * 3, 0, l2[i]);\n  }\n  return l1;\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n/* Return the minimum element in the list. >>> min_element([1, 2, 3]) 1 >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) -10 */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n/* Return the sum of all elements in the list. >>> sum([1, 2, 3]) 6 >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 127 */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n/* Return the product of all elements in the list. >>> product([1, 2, 3]) 6 >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 0 */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n/* Return the average of all elements in the list. >>> average([1, 2, 3]) 2.0 >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) 11.727272727272727 */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n/* Return the variance of all elements in the list. >>> variance([1, 2, 3]) 0.66666666666666"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const even = l.filter((_, i) => i % 2 === 0);\n  even.sort((a, b) => a - b);\n  return l.map((x, i) => (i % 2 === 0 ? even[Math.floor(i / 2)] : x));\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  let i = 0;\n  while (i < s.length) {\n    if (i % 3 === 0) {\n      decoded += s[i + 2];\n    } else if (i % 3 === 1) {\n      decoded += s[i - 1];\n    } else {\n      decoded += s[i - 2];\n    }\n    i++;\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  let fib = [0, 1];\n  let count = 0;\n  while (count < n) {\n    fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n    if (isPrime(fib[fib.length - 1])) count++;\n  }\n  return fib[fib.length - 1];\n};\n/* prime_fib returns n-th number that a Fibonacci number and it's also prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 */\nconst primeFib = (n) => {\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  let fib = [0, 1];\n  let count = 0;\n  while (count < n) {\n    fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n    if (isPrime(fib[fib.length - 1])) count++;\n  }\n  return fib[fib.length - 1];\n};\n/* prime_fib returns n-th number that a Fibonacci number and it's also prime. >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89 */\nconst primeFib = (n) => {\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n  let fib = [0, 1];\n  let count = 0;\n  while (count < n) {\n    fib.push(fib[fib.length -"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};\n// console.log(incrList([1, 2, 3]));\n// console.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]));"}
{"task_id": "JavaScript/43", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n  return fib[n];\n}"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let r = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      r = (r * 2) % p;\n    }\n    n = Math.floor(n / 2);\n    p = (p * p) % 1024;\n  }\n  return r;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === ' ') {\n      decoded += ' ';\n    } else {\n      let ascii = char.charCodeAt(0);\n      let decodedChar = String.fromCharCode(ascii - 5);\n      decoded += decodedChar;\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const s0Chars = s0.split('').sort().join('');\n  const s1Chars = s1.split('').sort().join('');\n  return s0Chars === s1Chars;\n};\n/* Check if two words have same characters. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') False */\nconst sameChars = (s0, s1) => {\n  if (s0.length !== s1.length) return false;\n  const s0Chars = s0.split('').sort().join('');\n  const s1Chars = s1.split('').sort().join('');\n  return s0Chars === s1Chars;\n};\n/* Check if two words have same characters. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') False */\nconst sameChars = (s0, s1) => {\n  if (s0.length !== s1.length) return false;\n  const s0Chars = s0.split('').sort().join('');\n  const s1Chars = s1.split('').sort().join('');\n  return s0Chars === s1Chars;\n};\n/* Check if two words have same characters. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') True >>> same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') False */\nconst sameChars = (s0, s1) => {\n  if (s0.length !== s1.length) return false;\n  const s"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n/* Return n-th Fibonacci number. >>> fib(10) 55 >>> fib(1) 1 >>> fib(8) 21 */\nconst fib = (n) => {\n"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  const increasing = l[0] < l[l.length - 1];\n  for (let i = 1; i < l.length; i++) {\n    if (increasing && l[i] < l[i - 1]) return false;\n    if (!increasing && l[i] > l[i - 1]) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter(x => set2.has(x)).sort((a, b) => a - b);\n};\n/* Return the number of occurrences of a value in a list. >>> count([1, 2, 3, 4, 5, 1, 2, 1, 1, 1, 1], 1) 6 >>> count([1, 2, 3, 4, 5, 1, 2, 1, 1, 1, 1], 2) 2 >>> count([1, 2, 3, 4, 5, 1, 2, 1, 1, 1, 1], 3) 1 */\nconst count = (arr, val) => arr.filter(x => x === val).length;\n/* Return the number of elements in a list. >>> length([1, 2, 3, 4, 5]) 5 >>> length([]) 0 */\nconst length = arr => arr.length;\n/* Return the maximum value in a list. >>> max([1, 2, 3, 4, 5]) 5 >>> max([5, 4, 3, 2, 1]) 5 >>> max([]) undefined */\nconst max = arr => Math.max(...arr);\n/* Return the minimum value in a list. >>> min([1, 2, 3, 4, 5]) 1 >>> min([5, 4, 3, 2, 1]) 1 >>> min([]) undefined */\nconst min = arr => Math.min(...arr);\n/* Return the product of all elements in a list. >>> product([1, 2, 3, 4, 5]) 120 >>> product([5, 4, 3, 2, 1]) 120 >>> product([]) 1 */\nconst product = arr => arr.reduce((a, b) => a * b, 1);\n/* Return the sum of all elements in a list. >>> sum([1, 2, 3, 4, 5]) 15 >>> sum([5, 4, 3, 2, 1]) 15 >>> sum([]) 0 */\nconst sum = arr => arr.reduce((a, b"}
{"task_id": "JavaScript/59", "generation": "\n  let largest = 2;\n  while (n > largest) {\n    if (n % largest === 0) {\n      n /= largest;\n    } else {\n      largest++;\n    }\n  }\n  return largest;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n/* sum_to_n is a function that sums numbers from 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n/* sum_to_n is a function that sums numbers from 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n/* sum_to_n is a function that sums numbers from 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n/* sum_to_n is a function that sums numbers from 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1 */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n/* sum_to_n is a function that sums numbers from 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050"}
{"task_id": "JavaScript/61", "generation": "\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i * xs[i]);\n  }\n  return res;\n};\n/* Return integral of polynomial with coefficients xs, evaluated at x. xs represent coefficients of polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return integral of this polynomial in same form. >>> integral([3, 1, 2, 4, 5], 2) 21.0 >>> integral([1, 2, 3], 2) 7.0 */\nconst integral = (xs, x) => {\n  const n = xs.length;\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += xs[i] / (i + 1) * Math.pow(x, i + 1);\n  }\n  return res;\n};\n/* Return product of polynomials with coefficients xs and ys, evaluated at x. xs represent coefficients of first polynomial. ys represent coefficients of second polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... ys[0] + ys[1] * x + ys[2] * x^2 + .... Return product of this polynomials in same form. >>> product([3, 1, 2, 4, 5], [1, 2, 3], 2) 26.0 >>> product([1, 2, 3], [1, 2, 3], 2) 14.0 */\nconst product = (xs, ys, x) => {\n  const n = xs.length;\n  const m = ys.length;\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      res += xs[i] * ys[j] * Math.pow(x, i + j);\n    }\n  }\n  return res;\n};\n/* Return sum of polynomials with coefficients xs and ys, evaluated at x. xs represent coefficients of first polynomial. ys represent coefficients of second polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... ys[0] + ys[1] * x + ys[2]"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n};\n/* Write a function that takes a string as input and returns the number of vowels in the string. >>> count_vowels(\"hello\") 2 >>> count_vowels(\"world\") 1 >>> count_vowels(\"aeiou\") 5 */\nconst count_vowels = (str) => {\n  const vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n/* Write a function that takes a string as input and returns the reverse of the string. >>> reverse_string(\"hello\") \"olleh\" >>> reverse_string(\"world\") \"dlrow\" >>> reverse_string(\"12345\") \"54321\" */\nconst reverse_string = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n/* Write a function that takes a string as input and returns the number of words in the string. >>> count_words(\"hello world\") 2 >>> count_words(\"hello world!\") 2 >>> count_words(\"hello world! this is a test\") 6 */\nconst count_words = (str) => {\n  let words = str.split(\" \");\n  return words.length;\n};\n/* Write a function that takes a string as input and returns the number of unique words in the string. >>> count_unique_words(\"hello world\") 2 >>> count_unique_words(\"hello world!\") 2 >>> count_unique_words(\"hello world! this is a test\") 6 */\nconst count_unique_words = (str) => {\n  let words = str.split(\" \");\n  let unique_words = new Set(words);\n  return unique_words.size;\n};\n/* Write a function that takes a string as input and returns the number of unique characters in"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split('');\n  const shiftAmount = shift % digits.length;\n  const shiftedDigits = digits.slice(shiftAmount).concat(digits.slice(0, shiftAmount));\n  return shiftedDigits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let arr = s.split(' ');\n  let apples = parseInt(arr[0]);\n  let oranges = parseInt(arr[4]);\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n    if (arr.length === 0) {\n        return [];\n    }\n    let smallestEven = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n    if (smallestIndex === -1) {\n        return [];\n    }\n    return [smallestEven, smallestIndex];\n};\n//# sourceMappingURL=pluck.js.map"}
{"task_id": "JavaScript/69", "generation": "\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max && lst.filter((x) => x === lst[i]).length >= lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return lst;\n  let result = [];\n  let sorted = lst.sort((a, b) => a - b);\n  let count = 0;\n  while (sorted.length > 0) {\n    if (count % 2 === 0) {\n      result.push(sorted.shift());\n    } else {\n      result.push(sorted.pop());\n    }\n    count++;\n  }\n  return result;\n};\n/* Given a string, return a new string where spaces have been inserted between each pair of lowercase letters. Examples: \"hello\" -> \"h e l l o\" \"incredible\" -> \"i n c r e d i b l e\" \"empty\" -> \"e m p t y\" */\nconst insertSpaces = (str) => {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i !== str.length - 1 && str[i] !== \" \" && str[i + 1] !== \" \") {\n      result += str[i] + \" \";\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n/* Given a string, return a new string where each character is doubled. Examples: \"hello\" -> \"hheelllloo\" \"goodbye\" -> \"ggoooddbyee\" \"empty\" -> \"ee\" */\nconst doubleCharacters = (str) => {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += str[i] + str[i];\n  }\n  return result;\n};\n/* Given a string, return a new string where every character is replaced by the next character in the alphabet. Examples: \"hello\" -> \"ifmmp\" \"goodbye\" -> \"hqqffjbe\" \"empty\" -> \"empty\" */\nconst shiftLetters = (str) => {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let charCode = str.charCodeAt(i);\n    if (charCode === 122) {\n      result += String.fromCharCode(97);\n    } else if (charCode === 90) {\n      result += String.fromCharCode(65);\n    } else {\n      result += String.fromCharCode(charCode + 1);\n    }\n  }\n  return result;\n};\n/* Given a string, return a new string where every character is replaced by the previous character in the"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c);\n  } else {\n    return -1;\n  }\n}\n/* Write a function that takes a string of words and returns the length of the shortest word(s). */\nconst shortestWord = str => {\n  let arr = str.split(' ');\n  let shortest = arr[0].length;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i].length < shortest) {\n      shortest = arr[i].length;\n    }\n  }\n  return shortest;\n}\n/* Write a function that takes a string of words and returns the length of the longest word(s). */\nconst longestWord = str => {\n  let arr = str.split(' ');\n  let longest = arr[0].length;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i].length > longest) {\n      longest = arr[i].length;\n    }\n  }\n  return longest;\n}\n/* Write a function that takes a string of words and returns the number of words that have 5 or more letters. */\nconst fiveLetterWords = str => {\n  let arr = str.split(' ');\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length >= 5) {\n      count++;\n    }\n  }\n  return count;\n}\n/* Write a function that takes a string of words and returns the number of words that have 5 or more letters. */\nconst fiveLetterWords = str => {\n  let arr = str.split(' ');\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length >= 5) {\n      count++;\n    }\n  }\n  return count;\n}\n/* Write a function that takes a string of words and returns the number of words that have 5 or more letters. */\nconst fiveLetterWords = str => {\n  let arr = str.split(' ');\n  let count = 0;\n  for (let i = 0; i < arr.length; i"}
{"task_id": "JavaScript/72", "generation": "\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  if (q.length === 2) {\n    return q[0] + q[1] <= w;\n  }\n  if (q.length === 3) {\n    return q[0] + q[1] + q[2] <= w;\n  }\n  if (q.length === 4) {\n    return q[0] + q[1] + q[2] + q[3] <= w;\n  }\n  if (q.length === 5) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  }\n  if (q.length === 6) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  }\n  if (q.length === 7) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  }\n  if (q.length === 8) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n  }\n  if (q.length === 9) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w;\n  }\n  if (q.length === 10) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n  }\n  if (q.length === 11) {\n    return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w;\n  }\n  if (q.length ==="}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (sum1 < sum2) {\n    return lst1;\n  } else if (sum1 > sum2) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  };\n\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0 && isPrime(i)) {\n      factors.push(i);\n      if (isPrime(a / i)) {\n        factors.push(a / i);\n        return factors.length === 3;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  let power = 1;\n  while (power <= x) {\n    if (power === x) return true;\n    power *= n;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) {\n    a = -a;\n  }\n  let i = 0;\n  while (i * i * i < a) {\n    i++;\n  }\n  return i * i * i === a;\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hexDigits = {\n    2: true,\n    3: true,\n    5: true,\n    7: true,\n    B: true,\n    D: true,\n  };\n  return num.split(\"\").filter((x) => hexDigits[x]).length;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  return `db${decimal.toString(2)}db`;\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push('A+');\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push('A');\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A-');\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push('B+');\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B');\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B-');\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push('C+');\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C');\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C-');\n    } else if (grades[i] >= 1.0) {\n      letterGrades.push('D+');\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push('D');\n    } else if (grades[i] >= 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n  return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 2;\n  if (n === 2) return 4;\n  return 18 * Math.pow(10, n - 3);\n};"}
{"task_id": "JavaScript/84", "generation": "\n  const sum = N.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  let words = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let sortedWord = word.split('').sort().join('');\n    result.push(sortedWord);\n  }\n  return result.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = [...array].sort((a, b) => a - b);\n  return sum % 2 === 0 ? sortedArray.reverse() : sortedArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index === -1) {\n      encrypted += s[i];\n    } else {\n      encrypted += alphabet[(index + 2) % 26];\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  if (smallest > secondSmallest) {\n    [smallest, secondSmallest] = [secondSmallest, smallest];\n  }\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i] > smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  const regex = /I/g;\n  const sentences = S.split(/[.?!]/);\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith(\"I\")) {\n      count += (sentences[i].match(regex) || []).length;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[a-z]/)) {\n      if (char.match(/[aeiou]/)) {\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n      } else {\n        char = char.toUpperCase();\n      }\n    } else if (char.match(/[A-Z]/)) {\n      if (char.match(/[AEIOU]/)) {\n        char = String.fromCharCode(char.charCodeAt(0) + 2);\n      } else {\n        char = char.toLowerCase();\n      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max && isPrime(lst[i])) {\n      max = lst[i];\n    }\n  }\n  return sumDigits(max);\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst sumDigits = (num) => {\n  return num\n    .toString()\n    .split(\"\")\n    .reduce((acc, curr) => acc + parseInt(curr), 0);\n};"}
{"task_id": "JavaScript/95", "generation": "\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  const firstKey = keys[0];\n  if (firstKey === firstKey.toLowerCase()) {\n    for (let i = 1; i < keys.length; i++) {\n      if (keys[i] !== keys[i].toLowerCase()) {\n        return false;\n      }\n    }\n    return true;\n  } else if (firstKey === firstKey.toUpperCase()) {\n    for (let i = 1; i < keys.length; i++) {\n      if (keys[i] !== keys[i].toUpperCase()) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/96", "generation": "\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let unitA = a % 10;\n  let unitB = b % 10;\n  return unitA * unitB;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  let num = Number(value);\n  if (num % 1 === 0) {\n    return num;\n  } else if (num % 1 < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    stones += i % 2 === 0 ? 2 : 1;\n  }\n  return pile;\n};\n/* Given a string, return a new string with all the vowels removed. Examples: >>> removeVowels(\"Hello World\") \"Hll Wrld\" >>> removeVowels(\"Why do you ask?\") \"W dy sk?\" */\nconst removeVowels = (str) => {\n  return str.replace(/[aeiou]/gi, \"\");\n};\n/* Given a string, return a new string with all the consonants removed. Examples: >>> removeConsonants(\"Hello World\") \"eo o\" >>> removeConsonants(\"Why do you ask?\") \"y ou ask\" */\nconst removeConsonants = (str) => {\n  return str.replace(/[bcdfghjklmnpqrstvwxyz]/gi, \"\");\n};\n/* Given a string, return a new string with all the characters in reverse order. Examples: >>> reverseString(\"Hello World\") \"dlroW olleH\" >>> reverseString(\"Why do you ask?\") \"?sk a uoy od yhw\" */\nconst reverseString = (str) => {\n  return str.split(\"\").reverse().join(\"\");\n};\n/* Given a string, return a new string with all the words in reverse order. Examples: >>> reverseWords(\"Hello World\") \"World Hello\" >>> reverseWords(\"Why do you ask?\") \"ask? you do Why\" */\nconst reverseWords = (str) => {\n  return str.split(\" \").reverse().join(\" \");\n};\n/* Given a string, return a new string with all the characters in uppercase. Examples: >>> toUpperCase(\"Hello World\") \"HELLO WORLD\" >>> toUpperCase(\"Why do you ask?\") \"WHY DO YOU ASK?\" */\nconst toUpperCase = (str) => {\n  return str.toUpperCase();\n};\n/* Given a string, return a new string with all the characters in lowercase. Examples: >>> toLowerCase(\"Hello World\") \"hello world\" >>> toLowerCase(\"Why do you ask?\") \"why do you ask?\" */\nconst toLowerCase = (str) => {\n  return str.toLowerCase();\n};\n/* Given a string, return a new string with all the characters in alternating uppercase and lowercase. Examples: >>> alternateCase(\"Hello World\") \"HeLlO WoR"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (x > y) {\n    return -1;\n  }\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n}"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let str = x[i].toString();\n    let hasEvenDigit = false;\n    for (let j = 0; j < str.length; j++) {\n      if (parseInt(str[j]) % 2 === 0) {\n        hasEvenDigit = true;\n        break;\n      }\n    }\n    if (!hasEvenDigit) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n/* Given a list of integers, return the sum of all the integers that have an odd number of digits. For example, given the list [555, 901, 482, 1771], the function should return 2226 because 555 + 1771 = 2226. */\nconst sumOfOddDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let str = arr[i].toString();\n    if (str.length % 2 !== 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n/* Given a list of integers, return the largest integer that has an odd number of digits. For example, given the list [555, 901, 482, 1771], the function should return 1771 because it is the largest integer with an odd number of digits. */\nconst largestOddDigit = (arr) => {\n  let largest = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let str = arr[i].toString();\n    if (str.length % 2 !== 0 && arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n/* Given a list of integers, return the smallest integer that has an even number of digits. For example, given the list [555, 901, 482, 1771], the function should return 901 because it is the smallest integer with an even number of digits. */\nconst smallestEvenDigit = (arr) => {\n  let smallest = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    let str = arr[i].toString();\n    if (str.length % 2 === 0 && arr[i"}
{"task_id": "JavaScript/105", "generation": "\n  const names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  return arr.sort((a, b) => a - b).reverse().map((num) => names[num - 1]);\n}"}
{"task_id": "JavaScript/106", "generation": "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n/* \nThe function evenOddPalindrome takes an integer n as input and returns a tuple with the number of even and odd integer palindromes within the range(1, n), inclusive.\n\nThe function initializes two variables, even and odd, to keep track of the number of even and odd palindromes, respectively.\n\nIt then iterates through the range(1, n) using a for loop. For each number i in the range, it checks if the number is a palindrome by converting it to a string, reversing the string, and comparing it to the original string.\n\nIf the number is a palindrome, it checks if it is even or odd using the modulo operator (%). If the number is even, it increments the even variable by 1. If the number is odd, it increments the odd variable by 1.\n\nAfter the loop finishes, the function returns a tuple with the values of even and odd. */"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num !== 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  const sortedArr = [...arr].sort((a, b) => a - b);\n  const minIndex = arr.indexOf(Math.min(...arr));\n  const rotatedArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n  return rotatedArr.every((num, i) => num === sortedArr[i]);\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even >= odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n/* In this problem, you will implement function takes two lists of numbers, determines whether it is possible to perform exchange of elements between them to make lst1 a list of only even numbers. is no limit on number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to even, return \"YES\". Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" It is assumed that the input lists will be non-empty. */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even >= odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n/* In this problem, you will implement function takes two lists of numbers, determines whether it is possible to perform exchange of elements between them to make lst1 a list of only even numbers. is no limit on number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements"}
{"task_id": "JavaScript/111", "generation": "\n  let arr = test.split(' ');\n  let obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]]) {\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  let max = Math.max(...Object.values(obj));\n  let result = {};\n  for (let key in obj) {\n    if (obj[key] === max) {\n      result[key] = max;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum === Infinity ? 0 : minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil(grid[i].length / capacity);\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('1').length - 1;\n    const bOnes = b.toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n/* Given a string s, you have been tasked to implement a function that returns a new string with all the consonants removed. If the string s is empty the function should return an empty string. Note: you may assume the input string contains only letters and spaces. Examples: removeConsonants(\"Mary had a little lamb\") ==> \"aei a i\" removeConsonants(\"Hello world\") ==> \"eo o\" removeConsonants(\"Uncle sam\") ==> \"ee\" */\nconst removeConsonants = (s) => {\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!consonants.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n/* Given a string s, you have been tasked to implement a function that returns a new string with all the vowels removed. If the string s is empty the function should return an empty string. Note: you may assume the input string contains only letters and spaces. Examples: removeVowels(\"Mary had a little lamb\") ==> \"Mr h d  lmb\" removeVowels(\"Hello world\") ==> \"Hll wrld\" removeVowels(\"Uncle sam\") ==> \"cl s\" */\nconst removeVowels = (s) => {\n  const vowels = 'aeiouAEIOU';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!vowels.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n/* Given a string s, you have been tasked to implement a function that returns a new string with all the words in reverse order. If"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n}"}
{"task_id": "JavaScript/119", "generation": "\n  let str = lst[0] + lst[1];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n  if (k === 0) return [];\n  if (k >= arr.length) return arr.sort((a, b) => b - a);\n  let left = 0;\n  let right = arr.length - 1;\n  while (true) {\n    let pivotIndex = partition(arr, left, right);\n    if (pivotIndex === k - 1) {\n      return arr.slice(0, k).sort((a, b) => b - a);\n    } else if (pivotIndex < k - 1) {\n      left = pivotIndex + 1;\n    } else {\n      right = pivotIndex - 1;\n    }\n  }\n};\n\nconst partition = (arr, left, right) => {\n  let pivot = arr[right];\n  let i = left - 1;\n  for (let j = left; j < right; j++) {\n    if (arr[j] >= pivot) {\n      i++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n  }\n  [arr[i + 1], arr[right]] = [arr[right], arr[i + 1]];\n  return i + 1;\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n    arr.push(n);\n  }\n  return arr.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const [month, day, year] = date.split('-').map(Number);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if ([4, 6, 9, 11].includes(month) && day > 30) return false;\n  if (month === 2) {\n    const isLeapYear = year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    if (day > 29 && !isLeapYear) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && txt[i].charCodeAt() % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = true;\n  let duplicates = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i + 1]) {\n      duplicates = true;\n    }\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n    }\n  }\n  if (duplicates) {\n    return false;\n  } else {\n    return sorted;\n  }\n}"}
{"task_id": "JavaScript/127", "generation": "\n  // Find the start and end of the intersection\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n\n  // If the start is greater than the end, the intervals don't intersect\n  if (start > end) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = end - start + 1;\n\n  // Check if the length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    product *= Math.sign(arr[i]);\n  }\n  return sum * product;\n};\n/* Write a function that takes a string and returns the number of vowels in the string. For example, if the input string is \"hello\", the function should return 2 because there are two vowels in the string (\"e\" and \"o\"). */\nconst countVowels = (str) => {\n  const vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};\n/* Write a function that takes an array of numbers and returns the sum of all the even numbers in the array. For example, if the input array is [1, 2, 3, 4, 5, 6], the function should return 12 because 2 + 4 + 6 = 12. */\nconst sumEvenNumbers = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n/* Write a function that takes a string and returns the reverse of the string. For example, if the input string is \"hello\", the function should return \"olleh\". */\nconst reverseString = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n/* Write a function that takes an array of numbers and returns the largest number in the array. For example, if the input array is [1, 2, 3, 4, 5], the function should return 5. */\nconst findLargestNumber = (arr) => {\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  const queue = [[0, 0, 0, grid[0][0]]]; // [row, col, steps, path]\n  const visited = new Set();\n  visited.add(0);\n  while (queue.length > 0) {\n    const [row, col, steps, path] = queue.shift();\n    if (steps === k) {\n      return path;\n    }\n    for (const [dx, dy] of directions) {\n      const newRow = row + dx;\n      const newCol = col + dy;\n      if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && !visited.has(newRow * n + newCol)) {\n        visited.add(newRow * n + newCol);\n        queue.push([newRow, newCol, steps + 1, [...path, grid[newRow][newCol]]]);\n      }\n    }\n  }\n  return [];\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [1, 3];\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n  }\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let isOdd = false;\n  const digits = n.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 !== 0) {\n      product *= digits[i];\n      isOdd = true;\n    }\n  }\n  return isOdd ? product : 0;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.map(Math.ceil).map((x) => x * x).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/134", "generation": "\n  if (txt.length === 0) return false;\n  const lastChar = txt[txt.length - 1];\n  const lastCharIsALetter = /[a-zA-Z]/.test(lastChar);\n  const lastCharIsNotPartOfAWord = !/[a-zA-Z]/.test(txt[txt.length - 2]);\n  return lastCharIsALetter && lastCharIsNotPartOfAWord;\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[i - 1]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return (largestNegative, smallestPositive);\n};\n/* Create a function that takes a string and returns a string in which each character is repeated once. Examples: doubleChar(\"String\") ==> \"SSttrriinngg\" doubleChar(\"Hello World\") ==> \"HHeelllloo  WWoorrlldd\" doubleChar(\"1234!_ \") ==> \"11223344!!__  \" */\nconst doubleChar = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i] + str[i];\n  }\n  return newStr;\n};\n/* Create a function that takes a string and returns a string in which each character is repeated once. Examples: doubleChar(\"String\") ==> \"SSttrriinngg\" doubleChar(\"Hello World\") ==> \"HHeelllloo  WWoorrlldd\" doubleChar(\"1234!_ \") ==> \"11223344!!__  \" */\nconst doubleChar = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i] + str[i];\n  }\n  return newStr;\n};\n/* Create a function that takes a string and returns a string in which each character is repeated once. Examples: doubleChar(\"String\") ==> \"SSttrriinngg\" doubleChar(\"Hello World\") ==> \"HHeelllloo  WWoorrlldd\" doubleChar(\"1234!_ \") ==> \"11223344!!__  \" */\nconst doubleChar = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i] + str[i];\n  }\n  return newStr;\n};\n/* Create a function that takes a string and"}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) return null;\n  if (typeof a === typeof b) return a;\n  if (typeof a === \"string\") {\n    a = parseFloat(a);\n  } else {\n    b = parseFloat(b);\n  }\n  return a > b ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 8) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 2);\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n};"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s+/g, ' ');\n  newText = newText.replace(/\\s{2,}/g, '-');\n  newText = newText.replace(/^\\s+|\\s+$/g, '');\n  return newText;\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(\" \");\n  const primeWords = words.filter((word) => {\n    const isPrime = (num) => {\n      if (num <= 1) return false;\n      for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n      }\n      return true;\n    };\n    return isPrime(word.length);\n  });\n  return primeWords.join(\" \");\n};\n/* The function wordsInSentence takes a string sentence as input and returns a string containing only the words from the original sentence whose lengths are prime numbers. The function first splits the sentence into an array of words using the split() method. It then filters the array of words using the filter() method, which checks if the length of each word is a prime number using the isPrime() helper function. The isPrime() function checks if a number is prime by iterating from 2 to the square root of the number and checking if the number is divisible by any of the integers in that range. If the number is divisible by any of the integers, it is not prime and the function returns false. If the number is not divisible by any of the integers, it is prime and the function returns true. The filter() method returns a new array containing only the words whose lengths are prime numbers. The function then joins the array of prime words into a string using the join() method and returns the resulting string. *//* Given a string, return a new string with all the words in reverse order. Example: Input: \"Hello world\" Output: \"world Hello\" Constraints: * 1 <= len(string) <= 100 * string contains only letters and spaces */\nconst reverseWords = (string) => {\n  const words = string.split(\" \");\n  const reversedWords = words.reverse();\n  return reversedWords.join(\" \");\n};\n/* The function reverseWords takes a string as input and returns a new string with all the words in reverse order. The function first splits the input string into an array of words using the split() method. It then reverses the order of the words in the array using the reverse() method. Finally, it joins the reversed words back into a string using the join() method and returns the resulting string. */\n/* Given a string, return a new string with all the words in reverse order. Example: Input: \"Hello world\" Output: \"world Hello\" Constraints: * 1 <= len(string) <= 100 * string"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n  const numerator = xNum * nDen;\n  const denominator = xDen * nNum;\n  return numerator % denominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    const sumB = b.toString().split('').reduce((acc, curr) => acc + Math.abs(parseInt(curr)), 0);\n    return sumA - sumB;\n  });\n}"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0) {\n      let firstDigit = Math.abs(nums[i]).toString()[0];\n      let lastDigit = Math.abs(nums[i]).toString().slice(-1);\n      if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n/* The above solution is not efficient as it has a time complexity of O(n^3). We can optimize it by using the fact that if a + b + c is a multiple of 3, then (a % 3) + (b % 3) + (c % 3) must be 0, 3, or 6. We can count the number of elements in a that are congruent to 0, 1, and 2 modulo 3, and then use these counts to calculate the number of valid triples. */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  const count = [0, 0, 0];\n  for (let i = 0; i < n; i++) {\n    count[a[i] % 3]++;\n  }\n  return count[0] * (count[0] - 1) * (count[0] - 2) / 6 + count[1] * (count[1] - 1) * (count[2]) / 2 + count[2] * (count[2] - 1) * (count[2] - 2) / 6;\n};\n/* The time complexity of the above solution is O(n), which is much better than the previous solution. */"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2) + 1;\n  const end = Math.max(index1, index2);\n  return planets.slice(start, end);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  let result = lst.filter((word) => word.length % 2 === 0);\n  return result.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n}"}
{"task_id": "JavaScript/150", "generation": "\n  if (n === 2) return x;\n  if (n % 2 === 0) return y;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return y;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n/* The function compare takes two arrays, game and guess, as arguments. It initializes an empty array result to store the absolute differences between the corresponding elements of game and guess. It then iterates over the elements of game using a for loop and pushes the absolute difference between the current elements of game and guess into result. Finally, it returns result. */"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = extensions[0];\n  let strength = extensions[0].split('').reduce((acc, char) => {\n    if (char === char.toUpperCase()) {\n      acc++;\n    } else {\n      acc--;\n    }\n    return acc;\n  }, 0);\n  for (let i = 1; i < extensions.length; i++) {\n    let currentStrength = extensions[i].split('').reduce((acc, char) => {\n      if (char === char.toUpperCase()) {\n        acc++;\n      } else {\n        acc--;\n      }\n      return acc;\n    }, 0);\n    if (currentStrength < strength) {\n      strongest = extensions[i];\n      strength = currentStrength;\n    }\n  }\n  return `${class_name}.${strongest}`;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  let bLen = b.length;\n  let aLen = a.length;\n  let bRotations = [];\n  for (let i = 0; i < bLen; i++) {\n    bRotations.push(b.slice(i) + b.slice(0, i));\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (a.slice(i, i + bLen) === b || bRotations.includes(a.slice(i, i + bLen))) {\n      return true;\n    }\n  }\n  return false;\n};\n/* You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters. You can return the answer in any order. */\nconst findSubstring = (s, words) => {\n  let result = [];\n  let wordLen = words[0].length;\n  let wordCount = words.length;\n  let totalLen = wordLen * wordCount;\n  let wordMap = {};\n  for (let word of words) {\n    wordMap[word] = (wordMap[word] || 0) + 1;\n  }\n  for (let i = 0; i <= s.length - totalLen; i++) {\n    let seen = {};\n    for (let j = 0; j < wordCount; j++) {\n      let word = s.slice(i + j * wordLen, i + (j + 1) * wordLen);\n      if (!wordMap[word]) {\n        break;\n      }\n      seen[word] = (seen[word] || 0) + 1;\n      if (seen[word] > wordMap[word]) {\n        break;\n      }\n      if (j + 1 === wordCount) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n};\n/* Given a string s, return true if the s can be palindrome after deleting at most one character. */\nconst validPalindrome = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  while (left < right) {\n    if (s[left] !== s[right]) {\n      return isPalindrome(s, left + 1, right) || isPalindrome(s, left, right - 1);\n    }\n    left++;\n    right--;\n  }\n  return true;\n};\nconst is"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let str = num.toString();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const roman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xl',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n    1000: 'm',\n  };\n  let result = '';\n  for (let key in roman) {\n    while (number >= key) {\n      result += roman[key];\n      number -= key;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const uniqueChars = new Set(words[i]).size;\n    if (uniqueChars > maxUnique) {\n      maxUnique = uniqueChars;\n      maxWord = words[i];\n    } else if (uniqueChars === maxUnique) {\n      maxWord = maxWord < words[i] ? maxWord : words[i];\n    }\n  }\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    }\n    else {\n        return [number + remaining, 0];\n    }\n};\n//# sourceMappingURL=eat.js.map"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result **= operand[i + 1];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let str = '';\n  let isLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      isLetter = true;\n      str += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      str += s[i];\n    }\n  }\n  return isLetter ? str : str.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  if (a > b) {\n    for (let i = b; i <= a; i += 2) {\n      arr.push(i);\n    }\n  } else {\n    for (let i = a; i <= b; i += 2) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
