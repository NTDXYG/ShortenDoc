{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) <= threshold) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n    } else if (paren_string[i] === ')') {\n      let group = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '(') {\n        group = stack.pop() + group;\n      }\n      if (stack.length > 0) {\n        stack.pop();\n        result.push(group);\n      }\n    }\n  }\n  return result;\n}; // Output: ['()', '(())', '(()())']\n"}
{"task_id": "JavaScript/2", "generation": "\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n}"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}; */ \n\n// 2. Write a function that takes a list of integers and returns the sum of the squares of the even numbers in the list.\n/* >>> sum_of_even_squares([1, 2, 3, 4, 5, 6]) 56 */\nconst sumOfEvenSquares = (numbers) => {\n    return numbers.filter(num => num % 2 === 0).map(num => num ** 2).reduce((a, b) => a + b, 0);\n}; \n\n// 3. Write a function that takes a list of integers and returns the sum of the cubes of the odd numbers in the list.\n/* >>> sum_of_odd_cubes([1, 2, 3, 4, 5, 6]) 225 */\nconst sumOfOddCubes = (numbers) => {\n    return numbers.filter(num => num % 2 !== 0).map(num => num ** 3).reduce((a, b) => a + b, 0);\n}; \n\n// 4. Write a function that takes a list of integers and returns the sum of the squares of the numbers in the list that are greater than 5.\n/* >>> sum_of_squares_greater_than_five([1, 2, 3, 4, 5, 6, 7, 8, 9]) 153 */\nconst sumOfSquaresGreaterThanFive = (numbers) => {\n    return numbers.filter(num => num > 5).map(num => num ** 2).reduce((a, b) => a + b, 0);\n}; \n\n// 5. Write a function that takes a list of integers and returns the sum of the cubes of the numbers in the list that are less than or equal to 5.\n/* >>> sum_of_cubes_less_than_or_equal_to_five([1, 2, 3, 4, 5, 6, 7, 8, 9]) 225 */\nconst sumOfCubesLessThanOrEqualToFive = (numbers) => {\n    return numbers.filter(num => num <= 5).map(num => num ** 3).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n// Example usage:\nconsole.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0\n"}
{"task_id": "JavaScript/5", "generation": "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const max_depths = groups.map((group) => {\n    let depth = 0;\n    let max_depth = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === '(') {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n      } else if (group[i] === ')') {\n        depth--;\n      }\n    }\n    return max_depth;\n  });\n  return max_depths;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n\n// Test the function\nconsole.log(sumProduct([], 0)); // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4], 0)); // Output: [10, 24]  // Changed the second argument to 0\n"}
{"task_id": "JavaScript/9", "generation": "\n  let max = -Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/10", "generation": "\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[string.length - 1 - i]) {\n      i += 1;\n    } else {\n      break;\n    }\n  }\n  const prefix = string.slice(0, string.length - i);\n  const suffix = string.slice(string.length - i);\n  return string + suffix.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === b[i]) ? '0' : '1';\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n};\n"}
{"task_id": "JavaScript/14", "generation": "\n  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  const sequence = Array.from({ length: n + 1 }, (_, i) => i);\n  return sequence.join(' ');\n}"}
{"task_id": "JavaScript/16", "generation": "\n  const lowerCaseString = string.toLowerCase();\n  const uniqueChars = new Set(lowerCaseString);\n  return uniqueChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = notes.map(note => {\n    if (note === 'o') return 4;\n    if (note === 'o|') return 2;\n    if (note === '.|') return 1;\n  });\n  return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n  };\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => numDict[a] - numDict[b]);\n  return sortedNums.join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let closestPair = [numbers[0], numbers[0]];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closestPair;\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 1; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}"}
{"task_id": "JavaScript/25", "generation": "\n    let factors = [];\n    let divisor = 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n = n / divisor;\n        }\n        divisor++;\n    }\n    return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const seen = new Set();\n  return numbers.filter((num) => {\n    if (seen.has(num)) {\n      return false;\n    } else {\n      seen.add(num);\n      return true;\n    }\n  });\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  let maxDiv = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= maxDiv; i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const f = (x) => {\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n      res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n  };\n  const df = (x) => {\n    let res = 0;\n    for (let i = 1; i < n; i++) {\n      res += i * xs[i] * Math.pow(x, i - 1);\n    }\n    return res;\n  };\n  const eps = 1e-6;\n  let x = 0;\n  while (true) {\n    const fx = f(x);\n    const dfx = df(x);\n    if (Math.abs(fx) < eps) {\n      return x;\n    }\n    if (Math.abs(dfx) < eps) {\n      throw new Error(\"f'(x) = 0\");\n    }\n    x = x - fx / dfx;\n  }\n}"}
{"task_id": "JavaScript/33", "generation": "\n  return l.map((x, i) => i % 3 === 0 ? l.slice(i % 3, i + 1).sort()[0] : x);\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  return l.reduce((a, b) => Math.max(a, b));\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      count += str.split('7').length - 1;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  const l' = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l'.push(l[i]);\n    } else {\n      l'.push(l[i]);\n    }\n  }\n  return l';\n}"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.slice(i, i + 3);\n    decoded += String.fromCharCode(parseInt(group.slice(0, 2), 16) + parseInt(group.slice(2), 16));\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0, b = 1, count = 0;\n  while (count < n) {\n    let temp = a;\n    a = b;\n    b = temp + b;\n    if (isPrime(b)) count++;\n  }\n  return b;\n}"}
{"task_id": "JavaScript/40", "generation": "\n    if (l.length < 3) {\n        return false;\n    }\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    let collisions = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i !== j) {\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}\n\n// Test the function\nconsole.log(carRaceCollision(5)); // Output: 20\n\n// Another example\nconsole.log(carRaceCollision(10)); // Output: 45\n\n// Another example\nconsole.log(carRaceCollision(15)); // Output: 105\n\n// Another example\nconsole.log(carRaceCollision(20)); // Output: 190\n\n// Another example\nconsole.log(carRaceCollision(25)); // Output: 300\n\n// Another example\nconsole.log(carRaceCollision(30)); // Output: 435\n\n// Another example\nconsole.log(carRaceCollision(35)); // Output: 595\n\n// Another example\nconsole.log(carRaceCollision(40)); // Output: 780\n\n// Another example\nconsole.log(carRaceCollision(45)); // Output: 1001\n\n// Another example\nconsole.log(carRaceCollision(50)); // Output: 1275\n\n// Another example\nconsole.log(carRaceCollision(55)); // Output: 1584\n\n// Another example\nconsole.log(carRaceCollision(60)); // Output: 2025\n\n// Another example\nconsole.log(carRaceCollision(65)); // Output: 2519\n\n// Another example\nconsole.log(carRaceCollision(70)); // Output: 3063\n\n// Another example\nconsole.log(carRaceCollision(75)); // Output: 3654\n\n// Another example\nconsole.log(carRaceCollision(80)); // Output: 4290\n\n// Another example\nconsole.log(carRaceCollision(85)); // Output: 4979\n\n// Another example\nconsole.log(carRaceCollision(90)); // Output: 5715\n\n// Another example\nconsole.log(carRaceCollision(95)); // Output: 6506\n\n// Another example\nconsole.log(carRaceCollision(100)); // Output: 7350\n\n// Another example\nconsole.log(carRaceCollision(105)); // Output: 8259\n\n// Another example\nconsole.log(carRaceCollision(110)); // Output: 9223\n\n// Another example\nconsole.log(carRaceCollision(115)); // Output: 10242\n\n// Another example\nconsole.log(carRaceCollision(120)); // Output: 11336\n\n// Another"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (const num of l) {\n    if (set.has(-num)) return true;\n    set.add(num);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  const convert = (x, base) => {\n    if (x < base) {\n      return x.toString();\n    } else {\n      return convert(Math.floor(x / base), base) + (x % base).toString();\n    }\n  };\n  return convert(x, base);\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}\n\n// 2. Function to calculate the area of a rectangle\n/* Given length and width return area for a rectangle. >>> rectangle_area(5, 3) 15 */\nconst rectangleArea = (l, w) => {\n  return l * w;\n}\n\n// 3. Function to calculate the area of a circle\n/* Given radius return area for a circle. >>> circle_area(5) 78.5 */\nconst circleArea = (r) => {\n  return Math.PI * (r ** 2);\n}\n\n// 4. Function to calculate the area of a trapezoid\n/* Given bases and height return area for a trapezoid. >>> trapezoid_area(5, 3, 4) 28 */\nconst trapezoidArea = (a, b, h) => {\n  return ((a + b) * h) / 2;\n}\n\n// 5. Function to calculate the area of a rhombus\n/* Given diagonals return area for a rhombus. >>> rhombus_area(5, 3) 12.5 */\nconst rhombusArea = (d1, d2) => {\n  return (d1 * d2) / 2;\n}\n\n// 6. Function to calculate the area of a parallelogram\n/* Given base and height return area for a parallelogram. >>> parallelogram_area(5, 3) 15 */\nconst parallelogramArea = (b, h) => {\n  return b * h;\n}\n\n// 7. Function to calculate the area of a ellipse\n/* Given semi-major and semi-minor axis return area for an ellipse. >>> ellipse_area(5, 3) 39.2699 */\nconst ellipseArea = (a, b) => {\n  return Math.PI * a * b;\n}\n\n// 8. Function to calculate the area of a sector\n/* Given radius and angle return area for a sector. >>> sector_area(5, 3.14) 15.708 */\nconst sectorArea = (r, a) => {\n  return (a / 360) * Math.PI * (r ** 2);\n}\n\n// 9. Function to calculate the area of a triangle given three sides\n/* Given three sides return area for a triangle. >>> triangle_area_3sides(3, 4, 5) 6."}
{"task_id": "JavaScript/46", "generation": "\n  if (n <= 1) return 0;\n  if (n == 2) return 2;\n  const fib4_0 = 0;\n  const fib4_1 = 0;\n  const fib4_2 = 2;\n  const fib4_3 = 0;\n  for (let i = 4; i <= n; i++) {\n    const fib4_i = fib4_0 + fib4_1 + fib4_2 + fib4_3;\n    fib4_3 = fib4_2;\n    fib4_2 = fib4_1;\n    fib4_1 = fib4_0;\n    fib4_0 = fib4_i;\n  }\n  return fib4_0;\n}; // Output: 4\nconsole.log(fib4(5)); // Output: 8\nconsole.log(fib4(6)); // Output: 14\nconsole.log(fib4(7)); // Output: 14\n"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const n = sorted.length;\n  if (n % 2 === 0) {\n    return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n  } else {\n    return sorted[Math.floor(n / 2)];\n  }\n}"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/49", "generation": "\n  let result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = (result * p) % p;\n    }\n    n = n >> 1;\n    p = (p * p) % p;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s[i];\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n}"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(x => x < t);\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  return [...s0].sort().join() === [...s1].sort().join();\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  const bracketMap = { \"<\": \">\", \"[\": \"]\", \"{\": \"}\" };\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (Object.keys(bracketMap).includes(bracket)) {\n      stack.push(bracket);\n    } else if (Object.values(bracketMap).includes(bracket)) {\n      if (stack.length === 0 || bracketMap[stack.pop()] !== bracket) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/57", "generation": "\n  const increasing = l.every((x, i, a) => i === 0 || x >= a[i - 1]);\n  const decreasing = l.every((x, i, a) => i === 0 || x <= a[i - 1]);\n  return increasing || decreasing;\n};\n// Example usage:\nconsole.log(monotonic([1, 2, 4, 20])); // True\nconsole.log(monotonic([1, 20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True\n"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const commonSet = new Set([...set1].filter(x => set2.has(x)));\n  return [...commonSet].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let largestFactor = 1;\n  let divisor = 2;\n  while (n > 1) {\n    if (n % divisor === 0) {\n      largestFactor = divisor;\n      n = n / divisor;\n    } else {\n      divisor += 1;\n    }\n  }\n  return largestFactor;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let bracket of brackets) {\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const ys = new Array(n - 1);\n  for (let i = 1; i < n; i++) {\n    ys[i - 1] = i * xs[i];\n  }\n  return ys;\n}"}
{"task_id": "JavaScript/63", "generation": "\n  if (n <= 1) return 0;\n  if (n == 2) return 1;\n  let a = 0, b = 0, c = 1;\n  for (let i = 3; i <= n; i++) {\n    let temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n  }\n  return c;\n}; // O(n) time complexity\n"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && s[i + 1] === undefined) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const numDigits = Math.floor(Math.log10(x)) + 1;\n  const shiftMod = shift % numDigits;\n  const str = x.toString();\n  return str.slice(-shiftMod) + str.slice(0, -shiftMod);\n}"}
{"task_id": "JavaScript/66", "generation": "\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}; // 1"}
{"task_id": "JavaScript/67", "generation": "\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - apples - oranges;\n}; // O(n) time complexity where n is the number of characters in the string. O(1) space complexity. \n\n// Task 2: \n/* Given a string of digits, return the number of times a digit appears in the string. */\nconst countDigit = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}; // O(n) time complexity where n is the number of characters in the string. O(1) space complexity. \n\n// Task 3: \n/* Given a string of digits, return the number of times a digit appears in the string. */\nconst countDigit2 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}; // O(n) time complexity where n is the number of characters in the string. O(1) space complexity. \n\n// Task 4: \n/* Given a string of digits, return the number of times a digit appears in the string. */\nconst countDigit3 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}; // O(n) time complexity where n is the number of characters in the string. O(1) space complexity. \n\n// Task 5: \n/* Given a string of digits, return the number of times a digit appears in the string. */\nconst countDigit4 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}; // O(n) time complexity where n is the number of characters in the string. O(1)"}
{"task_id": "JavaScript/68", "generation": "\n    let smallest = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return smallestIndex === -1 ? [] : [smallest, smallestIndex];\n};; /* \"Given array representing branch a tree has non-negative integer nodes your task pluck one of the nodes return it. plucked node should the node with the smallest even value. If multiple nodes with the same smallest even value found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Example 1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. Example 3: Input: [] Output: [] Example 4: Input: [5, 0, 3, 0, 4, 2] Output: [0, 1] Explanation: 0 is the smallest value, but there are two zeros, so we will choose the first zero, which has the smallest index. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value */\nconst pluck = (arr) => {\n    let smallest = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return smallestIndex === -1 ? [] : [smallest, smallestIndex];\n};; /* \"Given array representing branch a tree has non-negative integer nodes your task pluck one of the nodes return it. plucked node should the node with the smallest even value. If multiple nodes with the same smallest even value found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ],"}
{"task_id": "JavaScript/69", "generation": "\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}; // O(n) time | O(n) space\n/* You given non-empty list positive integers. Return the greatest integer is greater than zero, has a frequency greater than or equal to the value of the integer itself. frequency of an integer is the number of times it appears the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 2 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 search([5, 5, 4, 4, 4]) == -1 */\nconst search = (lst) => {\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}; // O(n) time | O(n) space\n/* You given non-empty list positive integers. Return the greatest integer is greater than zero, has a frequency greater than or equal to the value of the integer itself. frequency of an integer is the number of times it appears the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 2 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 search([5, 5, 4, 4, 4]) == -1 */\nconst search = (lst) => {\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] <= lst.filter(x => x === lst[i]).length) {\n            max = Math.max(max, lst[i]);\n        }\n    }\n    return max;\n}; //"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return lst;\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  while (lst.length > 0) {\n    result.push(sorted[i]);\n    lst.splice(lst.indexOf(sorted[i]), 1);\n    i = (i + 1) % sorted.length;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  return q.join('') === q.join('').split('').reverse().join('') && q.reduce((a, b) => a + b, 0) <= w;\n} */ \n\n// Write function returns True if the object q will fly, False otherwise. object q will fly if it's balanced (it a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nconst willItFly = (q, w) => {\n  // Check if the list is a palindrome\n  let isPalindrome = true;\n  for (let i = 0; i < q.length / 2; i++) {\n    if (q[i] !== q[q.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  \n  // Check if the sum of the elements is less than or equal to the maximum possible weight\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  let isWithinWeight = sum <= w;\n  \n  // Return true if the list is a palindrome and the sum of the elements is less than or equal to the maximum possible weight\n  return isPalindrome && isWithinWeight;\n} \n\n// Test the function\nconsole.log(willItFly([1, 2], 5)); // False\nconsole.log(willItFly([3, 2, 3], 1)); // False\nconsole.log(willItFly([3, 2, 3], 9)); // True\nconsole.log(willItFly([3], 5)); // True\n\n// Alternative solution\nconst willItFly = (q, w) => q.join('') === q.join('').split('').reverse().join('') && q.reduce((a, b) => a + b, 0) <= w; \n\n// Test the function\nconsole.log(willItFly([1, 2], 5)); // False\nconsole.log(willItFly([3, 2, 3], 1)); // False\nconsole.log(willItFly([3, 2, 3], 9)); // True\nconsole.log(willItFly([3], 5)); // True\n\n// Alternative solution\nconst willItFly = (q, w) => q.join('') === q.join('').split('').reverse().join('') && q.reduce"}
{"task_id": "JavaScript/73", "generation": "\n    const n = arr.length;\n    const count = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        count[i] = arr[i];\n    }\n    count.sort((a, b) => a - b);\n    const unique = [...new Set(count)];\n    const map = new Map();\n    for (let i = 0; i < unique.length; i++) {\n        map.set(unique[i], i);\n    }\n    let changes = 0;\n    for (let i = 0; i < n; i++) {\n        const index = map.get(arr[i]);\n        const right = n - 1 - i;\n        const left = i;\n        const min = Math.min(index, right - 1 - left);\n        changes += min;\n    }\n    return changes;\n}; // O(n log n) time | O(n) space\n\n// Example usage:\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // Output: 0\n"}
{"task_id": "JavaScript/74", "generation": "\n    let sum1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n    let sum2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n    if (sum1 < sum2) return lst1;\n    else if (sum1 > sum2) return lst2;\n    else return lst1;\n}; // \u279e ['hI', 'Hi'] \u279e ['hi', 'admin'] \u279e ['hI', 'hi', 'hi'] \u279e ['4'] "}
{"task_id": "JavaScript/75", "generation": "\n    let count = 0;\n    let i = 2;\n    while (i <= a) {\n        if (a % i === 0) {\n            count++;\n            a = Math.floor(a / i);\n        } else {\n            i++;\n        }\n    }\n    return count === 3;\n}; // isMultiplyPrime(30) == true\n// isMultiplyPrime(31) == false\n// isMultiplyPrime(100) == false\n// isMultiplyPrime(2) == false\n// isMultiplyPrime(3) == false\n// isMultiplyPrime(5) == false\n// isMultiplyPrime(7) == false\n// isMultiplyPrime(11) == false\n// isMultiplyPrime(13) == false\n// isMultiplyPrime(17) == false\n// isMultiplyPrime(19) == false\n// isMultiplyPrime(23) == false\n// isMultiplyPrime(29) == false\n// isMultiplyPrime(31) == false\n// isMultiplyPrime(37) == false\n// isMultiplyPrime(41) == false\n// isMultiplyPrime(43) == false\n// isMultiplyPrime(47) == false\n// isMultiplyPrime(53) == false\n// isMultiplyPrime(59) == false\n// isMultiplyPrime(61) == false\n// isMultiplyPrime(67) == false\n// isMultiplyPrime(71) == false\n// isMultiplyPrime(73) == false\n// isMultiplyPrime(79) == false\n// isMultiplyPrime(83) == false\n// isMultiplyPrime(89) == false\n// isMultiplyPrime(97) == false\n// isMultiplyPrime(100) == false\n// isMultiplyPrime(101) == false\n// isMultiplyPrime(103) == false\n// isMultiplyPrime(107) == false\n// isMultiplyPrime(109) == false\n// isMultiplyPrime(113) == false\n// isMultiplyPrime(127) == false\n// isMultiplyPrime(131) == false\n// isMultiplyPrime(137) == false\n// isMultiplyPrime(139) == false\n// isMultiplyPrime(149) == false\n// isMultiplyPrime(151) == false\n// isMultiplyPrime(157) == false\n// isMultiplyPrime(163) == false\n// isMultiplyPrime(167) == false\n// isMultiplyPrime(173) == false\n// isMultiplyPrime(179) =="}
{"task_id": "JavaScript/76", "generation": "\n  if (x <= 0) {\n    return false;\n  }\n  const root = Math.pow(n, 1 / Math.log(x) / Math.log(n));\n  return Math.floor(root) === root;\n}"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.round(Math.cbrt(a));\n    return Math.pow(cubeRoot, 3) === a;\n}; // 1 line"}
{"task_id": "JavaScript/78", "generation": "\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (['2', '3', '5', '7', 'B', 'D'].includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}; */ \n\n// or \n\nconst hexKey = (num) => {\n    let count = 0;\n    const hexDigits = '0123456789ABCDEF';\n    for (let i = 0; i < num.length; i++) {\n        if (['2', '3', '5', '7', 'B', 'D'].includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}; \n\n// or \n\nconst hexKey = (num) => {\n    let count = 0;\n    const hexDigits = '0123456789ABCDEF';\n    for (let i = 0; i < num.length; i++) {\n        if (hexDigits.includes(num[i]) && ['2', '3', '5', '7', 'B', 'D'].includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}; \n\n// or \n\nconst hexKey = (num) => {\n    let count = 0;\n    const hexDigits = '0123456789ABCDEF';\n    for (let i = 0; i < num.length; i++) {\n        if (hexDigits.includes(num[i]) && ['2', '3', '5', '7', 'B', 'D'].includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}; \n\n// or \n\nconst hexKey = (num) => {\n    let count = 0;\n    const hexDigits = '0123456789ABCDEF';\n    for (let i = 0; i < num.length; i++) {\n        if (hexDigits.includes(num[i]) && ['2', '3', '5', '7', 'B', 'D'].includes(num[i])) {\n            count++;\n        }\n    }\n    return count;\n}; \n\n// or \n\nconst hexKey = (num) => {\n    let count = 0;\n    const hexDigits = '0123456789ABCDEF';\n    for (let i = 0; i < num.length; i++) {\n        if (hexDigits.includes(num[i]) && ['2', '3', '5', '7', 'B', '"}
{"task_id": "JavaScript/79", "generation": "\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}; // do not change this line\n\n// You can now use the function like this:\nconsole.log(decimalToBinary(15)); // \"db1111db\"\nconsole.log(decimalToBinary(32)); // \"db100000db\" */ \n\n// /* \n//  * This function takes a string of decimal numbers separated by spaces and returns a string of binary numbers separated by spaces.\n//  * The binary numbers are in the format \"dbxxxxxdb\" where xxxx is the binary representation of the decimal number.\n//  * For example, if the input is \"15 32 10\", the output will be \"db1111db db100000db db1010db\".\n//  */\nconst decimalToBinaryArray = (decimalArray) => {\n    let binaryArray = decimalArray.split(\" \").map(decimal => decimalToBinary(parseInt(decimal)));\n    return binaryArray.join(\" \");\n}; // do not change this line\n\n// You can now use the function like this:\nconsole.log(decimalToBinaryArray(\"15 32 10\")); // \"db1111db db100000db db1010db\" */ \n\n// /* \n//  * This function takes a string of binary numbers separated by spaces and returns a string of decimal numbers separated by spaces.\n//  * The binary numbers are in the format \"dbxxxxxdb\" where xxxx is the binary representation of the decimal number.\n//  * For example, if the input is \"db1111db db100000db db1010db\", the output will be \"15 32 10\".\n//  */\nconst binaryToDecimalArray = (binaryArray) => {\n    let decimalArray = binaryArray.split(\" \").map(binary => binary.slice(2, -2));\n    return decimalArray.join(\" \");\n}; // do not change this line\n\n// You can now use the function like this:\nconsole.log(binaryToDecimalArray(\"db1111db db100000db db1010db\")); // \"15 32 10\" */ \n\n// /* \n//  * This function takes a string of decimal numbers separated by spaces and returns a string of decimal numbers separated by spaces.\n//  * The decimal numbers are in the format \"dbxxxxxdb\" where xxxx is the decimal number.\n//  * For example, if the input is \"15 32 10\", the output will be \"15 32 10\".\n//  */\nconst decimalTo"}
{"task_id": "JavaScript/80", "generation": "\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] && s[i] === s[i + 2]) return false;\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}; // O(n) time | O(1) space\n\n// 2. Given a string s. Your task is to find the longest substring without repeating characters.\nconst longestSubstring = (s) => {\n    let start = 0;\n    let max = 0;\n    let charMap = {};\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] in charMap && charMap[s[i]] >= start) {\n            start = charMap[s[i]] + 1;\n        }\n        charMap[s[i]] = i;\n        max = Math.max(max, i - start + 1);\n    }\n    return max;\n}; // O(n) time | O(n) space\n\n// 3. Given a string s. Your task is to find the longest substring with at most k distinct characters.\nconst longestSubstringK = (s, k) => {\n    let start = 0;\n    let max = 0;\n    let charMap = {};\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] in charMap && charMap[s[i]] >= start) {\n            start = charMap[s[i]] + 1;\n        }\n        charMap[s[i]] = i;\n        if (Object.keys(charMap).length > k) {\n            start = Math.min(...Object.values(charMap)) + 1;\n            charMap = {};\n        }\n        max = Math.max(max, i - start + 1);\n    }\n    return max;\n}; // O(n) time | O(n) space\n\n// 4. Given a string s. Your task is to find the longest substring with at most k distinct characters and the substring must be a palindrome.\nconst longestPalindromeK = (s, k) => {\n    let start = 0;\n    let max = 0;\n    let charMap = {};\n    for (let i = "}
{"task_id": "JavaScript/81", "generation": "\n    let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] > 3.7) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.3) {\n            letterGrades.push('A');\n        } else if (grades[i] > 3.0) {\n            letterGrades.push('A-');\n        } else if (grades[i] > 2.7) {\n            letterGrades.push('B+');\n        } else if (grades[i] > 2.3) {\n            letterGrades.push('B');\n        } else if (grades[i] > 2.0) {\n            letterGrades.push('B-');\n        } else if (grades[i] > 1.7) {\n            letterGrades.push('C+');\n        } else if (grades[i] > 1.3) {\n            letterGrades.push('C');\n        } else if (grades[i] > 1.0) {\n            letterGrades.push('C-');\n        } else if (grades[i] > 0.7) {\n            letterGrades.push('D+');\n        } else if (grades[i] > 0.0) {\n            letterGrades.push('D');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n};//end of function\n\n//test the function\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); //output: ['A+', 'B', 'C-', 'C', 'A-']\n\n"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 2;\n    return 9 * Math.pow(10, n - 2) + 9 * Math.pow(10, n - 2) + 2;\n}; // 9 * 10^(n-2) + 9 * 10^(n-2) + 2\n\n// Example usage:\nconsole.log(startsOneEnds(2)); // Output: 82\nconsole.log(startsOneEnds(3)); // Output: 728\nconsole.log(startsOneEnds(4)); // Output: 6602\n"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N) {\n    sum += N & 1;\n    N >>= 1;\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n    return s.split(' ').map((word) => {\n        return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n    }).join(' ');\n}; // antiShuffle('Hi') returns 'Hi' antiShuffle('hello') returns 'ehllo' antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor' "}
{"task_id": "JavaScript/87", "generation": "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}; // O(n*m) time, O(n*m) space"}
{"task_id": "JavaScript/88", "generation": "\n    const sum = array[0] + array[array.length - 1];\n    const isOdd = sum % 2 !== 0;\n    const sortedArray = [...array].sort((a, b) => isOdd ? a - b : b - a);\n    return sortedArray;\n}; // O(n log n) time, O(n) space\n\n// Example usage:\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "JavaScript/89", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 97 && charCode <= 122) {\n            result += String.fromCharCode((charCode - 97 + 2) % 26 + 97);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}; // eslint-disable-line no-unused-vars"}
{"task_id": "JavaScript/90", "generation": "\n    if (lst.length < 2) {\n        return null;\n    }\n    lst.sort((a, b) => a - b);\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] !== lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return null;\n}; // O(n log n) time complexity"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let sentence = \"\";\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \".\" || S[i] === \"?\" || S[i] === \"!\") {\n      if (sentence.trim().toLowerCase().startsWith(\"i\")) {\n        count++;\n      }\n      sentence = \"\";\n    } else {\n      sentence += S[i];\n    }\n  }\n  return count;\n}; // 1"}
{"task_id": "JavaScript/92", "generation": "\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}; // \u279e true\n\n// \u279e false\n// \u279e true\n// \u279e false\n\n// \u279e true\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n// \u279e false\n"}
{"task_id": "JavaScript/93", "generation": "\n    let vowels = 'aeiouAEIOU';\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i])) {\n            let index = vowels.indexOf(message[i]);\n            let newVowel = vowels.charAt((index + 2) % 10);\n            encodedMessage += newVowel;\n        } else {\n            encodedMessage += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}; // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) => { ... } // const encode = (message) =>"}
{"task_id": "JavaScript/94", "generation": "\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            maxPrime = Math.max(maxPrime, lst[i]);\n        }\n    }\n    return sumOfDigits(maxPrime);\n};\n\nconst isPrime = (n) => {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n};\n\nconst sumOfDigits = (n) => {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/95", "generation": "\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let allLower = true;\n    let allUpper = true;\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key === key.toUpperCase()) {\n            allLower = false;\n        }\n        if (key === key.toLowerCase()) {\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n};"}
{"task_id": "JavaScript/96", "generation": "\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\n// Test cases\nconsole.log(countUpTo(5)); // [2, 3]\nconsole.log(countUpTo(11)); // [2, 3, 5, 7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]  // Changed this line to match the expected output\n"}
{"task_id": "JavaScript/97", "generation": "\n  const aUnit = a % 10;\n  const bUnit = b % 10;\n  return aUnit * bUnit;\n}\n\n// Test cases\nconsole.log(multiply(148, 412)); // 16\nconsole.log(multiply(19, 28)); // 72\nconsole.log(multiply(2020, 1851)); // 0\nconsole.log(multiply(14, -15)); // 20\n"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 2 === 0 && 'AEIOU'.includes(s[i].toUpperCase())) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n    const number = parseFloat(value);\n    const integer = Math.round(number);\n    return integer;\n}; // This function takes a string value, converts it to a number, rounds it to the nearest integer, and returns the result. If the number is equidistant from two integers, it rounds away from zero. */\n"}
{"task_id": "JavaScript/100", "generation": "\n    let pile = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            pile.push(i + 1);\n        } else {\n            pile.push(i - 1);\n        }\n    }\n    return pile;\n};"}
{"task_id": "JavaScript/101", "generation": "\n    return s.replace(/[\\s,]+/g, ' ').split(' ').filter(Boolean);\n}; // eslint-disable-line no-undef"}
{"task_id": "JavaScript/102", "generation": "\n    if (x > y) {\n        return -1;\n    } else {\n        return Math.floor((x + y) / 2);\n    }\n} \n\n// Test the function\nconsole.log(chooseNum(12, 15));  // Expected output: 14\nconsole.log(chooseNum(13, 12));  // Expected output: -1\n"}
{"task_id": "JavaScript/103", "generation": "\n    if (n > m) return -1;\n    const sum = (m + n) * (m - n + 1) / 2;\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}; // 1 line"}
{"task_id": "JavaScript/104", "generation": "\n  const unique = x.filter((num) => {\n    const strNum = num.toString();\n    const uniqueDigits = new Set(strNum);\n    return uniqueDigits.size === strNum.length;\n  });\n  return unique.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.filter((num) => num >= 1 && num <= 9).map((num) => {\n    const numStr = num.toString();\n    return {\n      num,\n      str: numStr,\n      length: numStr.length,\n    };\n  }).sort((a, b) => b.length - a.length).map((obj) => {\n    const numToWord = {\n      1: \"One\",\n      2: \"Two\",\n      3: \"Three\",\n      4: \"Four\",\n      5: \"Five\",\n      6: \"Six\",\n      7: \"Seven\",\n      8: \"Eight\",\n      9: \"Nine\",\n    };\n    return numToWord[obj.num];\n  });\n}"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}; // Do not change code above this line. */\n// Do not change code below this line. */\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15] */\nconsole.log(f(10)); // Output: [1, 2, 6, 24, 60, 120, 360, 720, 2520, 5040] */\nconsole.log(f(15)); // Output: [1, 2, 6, 24, 60, 120, 360, 720, 2520, 5040, 12240, 362880, 39916800, 6227020800, 87178291200] */ // Do not change code above this line. */ // Do not change code below this line. */\n// Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ // Do not change code below this line. */ //"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (isEven(i)) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n    let str = num.toString();\n    let left = 0;\n    let right = str.length - 1;\n    while (left < right) {\n        if (str[left] !== str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n};\n\nconst isEven = (num) => {\n    return num % 2 === 0;\n};"}
{"task_id": "JavaScript/108", "generation": "\n    let count = 0;\n    for (let num of arr) {\n        let sum = 0;\n        let sign = 1;\n        if (num < 0) {\n            sign = -1;\n            num = num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10 * sign;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}; */ \n\n// Test cases\nconsole.log(countNums([]) == 0); // Expected output: true\nconsole.log(countNums([-1, 11, -11]) == 1); // Expected output: true\nconsole.log(countNums([1, 1, 2]) == 3); // Expected output: true\n\n// Define a function called `countNums` that takes an array of integers as input and returns the number of elements in the array that have a sum of digits greater than 0.\nfunction countNums(arr) {\n    // Initialize a counter variable to keep track of the number of elements with a sum of digits greater than 0.\n    let count = 0;\n    \n    // Iterate over each element in the input array.\n    for (let num of arr) {\n        // Initialize a variable to store the sum of digits for the current number.\n        let sum = 0;\n        \n        // Determine the sign of the current number and store it in a variable.\n        let sign = 1;\n        \n        // If the current number is negative, update the sign variable to -1 and make the number positive.\n        if (num < 0) {\n            sign = -1;\n            num = num * -1;\n        }\n        \n        // Calculate the sum of digits for the current number by repeatedly taking the last digit of the number (using the modulus operator), multiplying it by the sign, and adding it to the sum.\n        while (num > 0) {\n            sum += num % 10 * sign;\n            num = Math.floor(num / 10);\n        }\n        \n        // If the sum of digits for the current number is greater than 0, increment the counter.\n        if (sum > 0) {\n            count++;\n        }\n    }\n    \n    // Return the counter value, which represents the number of elements in the input array with a sum of digits greater than 0.\n    return count;\n}\n\n"}
{"task_id": "JavaScript/109", "generation": "\n    let n = arr.length;\n    let sortedArr = [...arr].sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] !== sortedArr[i]) {\n            count++;\n        }\n    }\n    return count <= Math.floor(n / 2);\n};; // Output: true\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // Output: true\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // Output: false\nconsole.log(moveOneBall([])); // Output: true\nconsole.log(moveOneBall([1])); // Output: true\nconsole.log(moveOneBall([1, 2])); // Output: true\nconsole.log(moveOneBall([2, 1])); // Output: true\nconsole.log(moveOneBall([1, 2, 3])); // Output: true\nconsole.log(moveOneBall([3, 2, 1])); // Output: true\nconsole.log(moveOneBall([1, 2, 3, 4, 5])); // Output: true\nconsole.log(moveOneBall([5, 4, 3, 2, 1])); // Output: true\nconsole.log(moveOneBall([1, 3, 2, 4, 5])); // Output: true\nconsole.log(moveOneBall([5, 3, 2, 4, 1])); // Output: true\nconsole.log(moveOneBall([1, 2, 3, 4, 5, 6])); // Output: true\nconsole.log(moveOneBall([6, 5, 4, 3, 2, 1])); // Output: true\nconsole.log(moveOneBall([1, 2, 3, 4, 5, 6, 7])); // Output: true\nconsole.log(moveOneBall([7, 6, 5, 4, 3, 2, 1])); // Output: true\nconsole.log(moveOneBall([1, 2, 3, 4, 5, 6, 7, 8])); // Output: true\nconsole.log(moveOneBall([8, 7, 6, 5, 4, 3, 2, 1]));"}
{"task_id": "JavaScript/110", "generation": "\n    let odd = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            odd++;\n        }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 !== 0) {\n            odd--;\n        }\n    }\n    if (odd === 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}; // eslint-disable-line no-unused-vars"}
{"task_id": "JavaScript/111", "generation": "\n  let dict = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (dict[letter]) {\n      dict[letter]++;\n    } else {\n      dict[letter] = 1;\n    }\n    if (dict[letter] > max) {\n      max = dict[letter];\n    }\n  }\n  let result = {};\n  for (let key in dict) {\n    if (dict[key] === max) {\n      result[key] = dict[key];\n    }\n  }\n  return result;\n}\n\n// Test cases\nconsole.log(histogram('a b c')); // { a: 1, b: 1, c: 1 }\nconsole.log(histogram('a b b a')); // { a: 2, b: 2 }\nconsole.log(histogram('a b c a b')); // { a: 2, b: 2 }\nconsole.log(histogram('b b b b a')); // { b: 4 }\nconsole.log(histogram('')); // {} */"}
{"task_id": "JavaScript/112", "generation": "\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n}; // O(n) time complexity, O(n) space complexity"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${str}ng ${str} of the ${str}nput.`;\n  });\n}"}
{"task_id": "JavaScript/114", "generation": "\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum === Infinity ? 0 : minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1)"}
{"task_id": "JavaScript/116", "generation": "\n    return arr.sort((a, b) => {\n        let countA = a.toString(2).split('1').length - 1;\n        let countB = b.toString(2).split('1').length - 1;\n        if (countA === countB) {\n            return a - b;\n        } else {\n            return countA - countB;\n        }\n    });\n};"}
{"task_id": "JavaScript/117", "generation": "\n    const words = s.split(' ');\n    const result = [];\n    for (let word of words) {\n        const consonants = word.replace(/[aeiouAEIOU]/g, '').length;\n        if (consonants === n) {\n            result.push(word);\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = word.length - 1; i > 0; i--) {\n        if (vowels.includes(word[i])) {\n            result = word[i];\n            break;\n        }\n        if (!vowels.includes(word[i]) && !vowels.includes(word[i - 1])) {\n            break;\n        }\n    }\n    return result;\n}; // \"u\" \"U\" \"\" \"\"\n\n// 2. Given a string, return the string with all vowels removed. Example: removeVowels(\"hello world\") ==> \"hll wrld\" */\nconst removeVowels = (word) => {\n    let vowels = \"aeiouAEIOU\";\n    return word.split(\"\").filter(char => !vowels.includes(char)).join(\"\");\n}; // \"hll wrld\"\n\n// 3. Given a string, return the string with all vowels removed from the end. Example: removeVowelsFromEnd(\"hello world\") ==> \"hello worl\" */\nconst removeVowelsFromEnd = (word) => {\n    let vowels = \"aeiouAEIOU\";\n    while (word.length > 0 && vowels.includes(word[word.length - 1])) {\n        word = word.slice(0, -1);\n    }\n    return word;\n}; // \"hello worl\"\n\n// 4. Given a string, return the string with all vowels removed from the start. Example: removeVowelsFromStart(\"hello world\") ==> \"hello worl\" */\nconst removeVowelsFromStart = (word) => {\n    let vowels = \"aeiouAEIOU\";\n    while (word.length > 0 && vowels.includes(word[0])) {\n        word = word.slice(1);\n    }\n    return word;\n}; // \"hello worl\"\n\n// 5. Given a string, return the string with all vowels removed from the start and end. Example: removeVowelsFromStartAndEnd(\"hello world\") ==> \"hell worl\" */\nconst removeVowelsFromStartAndEnd = (word) => {\n    let vowels = \"aeiouAEIOU\";\n    while (word.length > 0 && vowels.includes(word[0])) {\n        word = word.slice(1);\n    }\n    while (word.length > 0 && vowels.includes(word[word.length - 1])) {\n        word = word.slice(0, -1);\n   "}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}"}
{"task_id": "JavaScript/120", "generation": "\n    // sort the array in descending order\n    arr.sort((a, b) => b - a);\n    // return the first k elements of the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}; // 12\n\n// 2. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  } else {\n    return lst.reduce((a, b) => a + b, 0);\n  }\n}; // 0\n\n// 3. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList2 = (lst) => lst.reduce((a, b) => a + b, 0) || 0; // 0\n\n// 4. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList3 = (lst) => lst.length === 0 ? 0 : lst.reduce((a, b) => a + b, 0); // 0\n\n// 5. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList4 = (lst) => lst.reduce((a, b) => a + b, 0) || 0; // 0\n\n// 6. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList5 = (lst) => lst.length === 0 ? 0 : lst.reduce((a, b) => a + b, 0); // 0\n\n// 7. Write a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0.\nconst sumList6 = (lst) => lst.reduce((a, b) => a + b, 0) || 0; // 0\n\n// 8. Write a function that takes a list of integers and returns"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Test the function\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4"}
{"task_id": "JavaScript/123", "generation": "\n    let sequence = [n];\n    while (n !== 1) {\n        if (n % 2 === 0) {\n            n = Math.floor(n / 2);\n        } else {\n            n = n * 3 + 1;\n        }\n        if (n % 2 !== 0) {\n            sequence.push(n);\n        }\n    }\n    return sequence.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n    // Check if the date string is not empty\n    if (!date) {\n        return false;\n    }\n    // Split the date string into month, day, and year\n    const [month, day, year] = date.split('-');\n    // Check if the month is not less than 1 or higher than 12\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    // Check if the day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    if (month === '1' || month === '3' || month === '5' || month === '7' || month === '8' || month === '10' || month === '12') {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n    // Check if the day is not less than 1 or higher than 30 days for months 4,6,9,11\n    else if (month === '4' || month === '6' || month === '9' || month === '11') {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    // Check if the day is not less than 1 or higher than 29 for the month 2\n    else if (month === '2') {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    }\n    // Check if the date is in the format: mm-dd-yyyy\n    if (day.length !== 2 || year.length !== 4) {\n        return false;\n    }\n    // If all the rules are satisfied, return True\n    return true;\n}; */ \n\n// Test cases\nconsole.log(validDate('03-11-2000')); // true\nconsole.log(validDate('15-01-2012')); // false\nconsole.log(validDate('04-0-2040')); // false\nconsole.log(validDate('06-04-2020')); // true\nconsole.log(validDate('06/04/2020')); // false\n\n// You can also use the following function to test the validDate function\nfunction testValidDate(date) {\n    console.log(`Date: ${date}, Valid: ${validDate(date)}`);\n}\n\ntestValidDate('03-11-2000');\ntest"}
{"task_id": "JavaScript/125", "generation": "\n  let words = txt.split(' ');\n  if (words.length === 1) {\n    words = txt.split(',');\n  }\n  if (words.length === 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].toLowerCase() === txt[i] && (i % 2 !== 0)) {\n        count++;\n      }\n    }\n    return count;\n  }\n  return words;\n};// \ud83d\ude80\n\n// \ud83d\ude80\n/* Given a string of numbers, return a list of numbers as integers. Examples split_numbers(\"1,2,3,4,5\") \u279e [1, 2, 3, 4, 5] split_numbers(\"1 2 3 4 5\") \u279e [1, 2, 3, 4, 5] split_numbers(\"12345\") \u279e [12345] */\nconst splitNumbers = (txt) => {\n  let numbers = txt.split(',');\n  if (numbers.length === 1) {\n    numbers = txt.split(' ');\n  }\n  if (numbers.length === 1) {\n    return [parseInt(txt)];\n  }\n  return numbers.map(num => parseInt(num));\n};// \ud83d\ude80\n\n// \ud83d\ude80\n/* Given a string of numbers, return a list of numbers as floats. Examples split_numbers(\"1,2,3,4,5\") \u279e [1.0, 2.0, 3.0, 4.0, 5.0] split_numbers(\"1 2 3 4 5\") \u279e [1.0, 2.0, 3.0, 4.0, 5.0] split_numbers(\"12345\") \u279e [12345.0] */\nconst splitNumbersFloat = (txt) => {\n  let numbers = txt.split(',');\n  if (numbers.length === 1) {\n    numbers = txt.split(' ');\n  }\n  if (numbers.length === 1) {\n    return [parseFloat(txt)];\n  }\n  return numbers.map(num => parseFloat(num));\n};// \ud83d\ude80\n\n// \ud83d\ude80\n/* Given a string of numbers, return a list of numbers as floats, rounded to 2 decimal places. Examples split_numbers(\"1,2,3,4,5\") \u279e [1.0, 2.0, 3.0, "}
{"task_id": "JavaScript/126", "generation": "\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        } else if (lst[i] === lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}; // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => !i || v >= a[i - 1] && v !== a[i - 1]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1] && v !== a[i - 1]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1] && v !== a[i - 1] && v !== a[i]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1] && v !== a[i - 1] && v !== a[i] && v !== a[i + 1]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1] && v !== a[i - 1] && v !== a[i] && v !== a[i + 1] && v !== a[i + 2]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a[i - 1] && v !== a[i - 1] && v !== a[i] && v !== a[i + 1] && v !== a[i + 2] && v !== a[i + 3]); // 1 line solution\n// or\nconst isSorted = (lst) => lst.every((v, i, a) => i === 0 || v >= a"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  let length = end - start + 1;\n  if (isPrime(length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n    if (arr.length === 0) return null;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) return 0;\n        if (arr[i] < 0) prod *= -1;\n    }\n    return arr.reduce((acc, cur) => acc + Math.abs(cur) * prod, 0);\n};"}
{"task_id": "JavaScript/129", "generation": "\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n    const queue = [[0, 0, []]];\n    visited[0][0] = true;\n    while (queue.length) {\n        const [x, y, path] = queue.shift();\n        if (path.length === k) return path;\n        for (let [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny]) {\n                visited[nx][ny] = true;\n                queue.push([nx, ny, [...path, grid[nx][ny]]]);\n            }\n        }\n    }\n    return [];\n};;const minPath = (grid, k) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n    const queue = [[0, 0, []]];\n    visited[0][0] = true;\n    while (queue.length) {\n        const [x, y, path] = queue.shift();\n        if (path.length === k) return path;\n        for (let [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n            const nx = x + dx;\n            const ny = y + dy;\n            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny]) {\n                visited[nx][ny] = true;\n                queue.push([nx, ny, [...path, grid[nx][ny]]]);\n            }\n        }\n    }\n    return [];\n};;const minPath = (grid, k) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const visited = Array(rows).fill().map(() => Array(cols).fill(false));\n    const queue = [[0, 0, []]];\n    visited[0][0] = true;\n    while (queue.length) {\n        const [x, y, path] ="}
{"task_id": "JavaScript/130", "generation": "\n    let sequence = [1, 3, 2];\n    while (sequence.length < n + 1) {\n        let next = 0;\n        if (sequence[sequence.length - 1] % 2 === 0) {\n            next = 1 + sequence[sequence.length - 1] / 2;\n        } else {\n            next = sequence[sequence.length - 1] + sequence[sequence.length - 2] + sequence[sequence.length - 3];\n        }\n        sequence.push(next);\n    }\n    return sequence;\n}; // 1, 3, 2, 8, 11, 21, 40, 77, 148, 293, 580, 1161, 2322, 4645, 9292, 18585, 37178, 74363, 148746, 297511, 595268, 1190839, 2381678, 4763357, 9527036, 19054093, 38108138, 76242231, 152484470, 304868901, 609437872, 1219365773, 2438733545, 4877467108, 9754930613, 19509870322, 39019700645, 78039400988, 156078801933, 312157811922, 624315623855, 1248631248770, 2497262497541, 4994524995082, 9989049990165, 19978099980328, 39956199960657, 79912399921285, 159824699942570, 319649699885140, 639299699770280, 1278591399640560, 2557182799281121, 5114365598562242, 10228731198134483, 20457462396268966, 40914924792537929, 81829849585075858, 163659699170151727, 327319398340303454, 654638796680606808, 1309277593361213562, 2618555186722427124, 5237110373444854250, 10474220746889708500, 20948441593779417000, 41896883187558834000, 83793766375117668000"}
{"task_id": "JavaScript/131", "generation": "\n    let product = 1;\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product;\n};"}
{"task_id": "JavaScript/132", "generation": "\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n    if (txt.length === 0) return false;\n    let lastChar = txt.charAt(txt.length - 1);\n    let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    let lastCharIsPartOfWord = txt.charAt(txt.length - 1) === \" \" ? false : txt.charAt(txt.length - 1) === txt.charAt(txt.length - 1).toUpperCase() ? true : false;\n    return lastCharIsLetter && lastCharIsPartOfWord;\n}"}
{"task_id": "JavaScript/135", "generation": "\n    let max = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i - 1] && arr[i] > max) {\n            max = i;\n        }\n    }\n    return max;\n}; */\n\n// function returns the largest index of an element greater than or equal the element immediately preceding it. If no such element exists then return -1. array will not contain duplicate values. Examples: can_arrange([1,2,4,3,5]) = 3 can_arrange([1,2,3]) = -1\nconst canArrange = (arr) => {\n    let max = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] >= arr[i - 1] && arr[i] > max) {\n            max = i;\n        }\n    }\n    return max;\n}; */ \n\n// function returns the largest index of an element greater than or equal the element immediately preceding it. If no such element exists then return -1. array will not contain duplicate values. Examples: can_arrange([1,2,4,3,5]) = 3 can_arrange([1,2,3]) = -1\nconst canArrange = (arr) => {\n    let max = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] >= arr[i - 1] && arr[i] > max) {\n            max = i;\n        }\n    }\n    return max;\n}; */ \n\n// function returns the largest index of an element greater than or equal the element immediately preceding it. If no such element exists then return -1. array will not contain duplicate values. Examples: can_arrange([1,2,4,3,5]) = 3 can_arrange([1,2,3]) = -1\nconst canArrange = (arr) => {\n    let max = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] >= arr[i - 1] && arr[i] > max) {\n            max = i;\n        }\n    }\n    return max;\n}; */ \n\n// function returns the largest index of an element greater than or equal the element immediately preceding it. If no such element exists then return -1. array will not contain duplicate values"}
{"task_id": "JavaScript/136", "generation": "\n    let negatives = lst.filter(x => x < 0);\n    let positives = lst.filter(x => x > 0);\n    if (negatives.length === 0) return [null, positives.length > 0 ? Math.min(...positives) : null];\n    if (positives.length === 0) return [Math.min(...negatives), null];\n    return [Math.min(...negatives), Math.min(...positives)];\n}; // Do not delete this line\n\n// Test cases\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // (None, 1)\nconsole.log(largestSmallestIntegers([])); // (None, None)\nconsole.log(largestSmallestIntegers([0])); // (None, None) */</code></pre>\n<p>Explanation:</p>\n<p>This function works by first filtering the input list to get the negative and positive integers separately. It then checks if there are any negative integers. If not, it returns the smallest positive integer (or null if there are no positive integers). If there are negative integers, it returns the smallest of them and the smallest positive integer (or null if there are no positive integers).</p>\n<p>For example, in the first test case, the function filters the list to get the negative integers as [-1, -3, -5] and the positive integers as [2, 4, 1, 3, 5, 7]. It then returns the smallest negative integer (-5) and the smallest positive integer (1).</p>\n<p>For the second test case, the function returns (None, None) because there are no negative or positive integers in the list.</p>\n<p>For the third test case, the function returns (None, None) because there are no negative or positive integers in the list.</p>"}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) return null;\n  if (typeof a === 'string' && typeof b === 'string') return b;\n  if (typeof a === 'number' && typeof b === 'number') return b;\n  if (typeof a === 'string' && typeof b === 'number') return a;\n  if (typeof a === 'number' && typeof b === 'string') return b;\n}; // \u279e 2.5\nconsole.log(compareOne(1, 2.5)); // \u279e \"2,3\"\nconsole.log(compareOne(1, \"2,3\")); // \u279e \"6\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \u279e 1\nconsole.log(compareOne(\"1\", 1)); // \u279e null\nconsole.log(compareOne(1, \"1\")); // \u279e null\nconsole.log(compareOne(\"1\", 1.5)); // \u279e \"1\" // \u279e 1.5\nconsole.log(compareOne(1.5, \"1\")); // \u279e 1.5\nconsole.log(compareOne(1, 1)); // \u279e null\nconsole.log(compareOne(1, 1.5)); // \u279e 1.5\nconsole.log(compareOne(1.5, 1)); // \u279e 1.5\nconsole.log(compareOne(1, \"1\")); // \u279e null\nconsole.log(compareOne(\"1\", 1)); // \u279e null\nconsole.log(compareOne(1, \"1.5\")); // \u279e \"1.5\"\nconsole.log(compareOne(\"1.5\", 1)); // \u279e \"1.5\"\nconsole.log(compareOne(1, 1.5)); // \u279e 1.5\nconsole.log(compareOne(1.5, 1)); // \u279e 1.5\nconsole.log(compareOne(1, \"1.5\")); // \u279e \"1.5\"\nconsole.log(compareOne(\"1.5\", 1)); // \u279e \"1.5\"\nconsole.log(compareOne(1, 1)); // \u279e null\nconsole.log(compareOne(1, 1.5)); // \u279e 1.5\nconsole.log(compareOne(1.5, 1)); // \u279e 1.5\nconsole.log(compareOne(1, \"1\")); // \u279e null\nconsole.log(compareOne(\"1\", 1));"}
{"task_id": "JavaScript/138", "generation": "\n  let count = 0;\n  for (let i = 2; i <= n; i += 2) {\n    if (n - i >= 0) {\n      n -= i;\n      count++;\n    }\n  }\n  return count === 4;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let result = \"\";\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === \" \") {\n      count++;\n      if (count === 1) {\n        result += \"_\";\n      } else if (count === 2) {\n        result += \"-\";\n        count = 0;\n      }\n    } else {\n      result += text[i];\n      count = 0;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/141", "generation": "\n    let count = 0;\n    let dot = false;\n    let valid = false;\n    let validExt = false;\n    let validName = false;\n    let validLetter = false;\n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i] === '.') {\n            dot = true;\n        } else if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        } else if (file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            validLetter = true;\n        }\n    }\n    if (count > 3) {\n        return 'No';\n    }\n    if (dot) {\n        let ext = file_name.split('.').pop();\n        if (ext === 'txt' || ext === 'exe' || ext === 'dll') {\n            validExt = true;\n        }\n        if (file_name.split('.')[0] !== '') {\n            validName = true;\n        }\n        if (validLetter && validExt && validName) {\n            valid = true;\n        }\n    }\n    if (valid) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}; // or return 'Yes' if the file's name is valid, and return 'No' otherwise. A file's name is considered to valid if and only if all the following conditions are met: - should not be more than three digits ('0'-'9') in the file's name. - file's name contains exactly one dot '.' - The substring before the dot should not be empty, and starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll'] Examples: file_name_check(\"example.txt\") # => 'Yes' file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter) */\nconst fileNameCheck = (file_name) => {\n    let count = 0;\n    let dot = false;\n    let valid = false;\n    let validExt = false;\n    let validName = false;\n    let validLetter = false;\n    for (let i = 0; i < file_name.length; i++) {\n       "}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            sum += lst[i] ** 3;\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n    const words = sentence.split(' ');\n    const primeWords = words.filter(word => isPrime(word.length));\n    return primeWords.join(' ');\n};\n\nconst isPrime = (num) => {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};"}
{"task_id": "JavaScript/144", "generation": "\n    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n    return (xNum * nDen) % (xDen * nNum) === 0;\n}; // This function takes two string parameters, x and n, which are string representations of fractions. It splits the strings into numerator and denominator, converts them to numbers, and then checks if the product of the numerator and the denominator of the second fraction divided by the product of the numerator and the denominator of the first fraction is a whole number. If it is, the function returns true; otherwise, it returns false.\n\n// Test the function\nconsole.log(simplify(\"1/5\", \"5/1\")); // Expected output: true\nconsole.log(simplify(\"1/6\", \"2/1\")); // Expected output: false\nconsole.log(simplify(\"7/10\", \"10/2\")); // Expected output: false\n"}
{"task_id": "JavaScript/145", "generation": "\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        const sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        } else {\n            return sumA - sumB;\n        }\n    });\n}; // eslint-disable-line no-unused-vars"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (num % 10) > 0 && (num % 10) < 10) {\n            count++;\n        }\n    }\n    return count;\n}; // Output: 2\n\n// 2. Write a function that takes a string as input and returns the string with all vowels removed.\nconst removeVowels = (str) => {\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let char of str) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}; // Output: \"bcd\"\n\n// 3. Write a function that takes a string as input and returns the string with all vowels removed and all consonants converted to lowercase.\nconst removeVowelsAndConvertToLowerCase = (str) => {\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let char of str) {\n        if (!vowels.includes(char)) {\n            result += char.toLowerCase();\n        }\n    }\n    return result;\n}; // Output: \"bcd\"\n\n// 4. Write a function that takes a string as input and returns the string with all vowels removed and all consonants converted to uppercase.\nconst removeVowelsAndConvertToUpperCase = (str) => {\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let char of str) {\n        if (!vowels.includes(char)) {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}; // Output: \"BCD\"\n\n// 5. Write a function that takes a string as input and returns the string with all vowels removed and all consonants converted to title case.\nconst removeVowelsAndConvertToTitleCase = (str) => {\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let char of str) {\n        if (!vowels.includes(char)) {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}; // Output: \"Bcd\"\n\n// 6. Write a function that takes a string as input and returns the string with all vowels removed and all consonants converted to title case.\nconst removeVowelsAndConvertToTitleCase = (str)"}
{"task_id": "JavaScript/147", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}; // time complexity is O(n^3) and space complexity is O(1) as we are not using any extra space. \n\n// 2. Given a string s, find the longest palindromic substring in s. \nconst longestPalindrome = (s) => {\n    let start = 0, end = 0;\n    for (let i = 0; i < s.length; i++) {\n        let len1 = expandFromCenter(s, i, i);\n        let len2 = expandFromCenter(s, i, i + 1);\n        let len = Math.max(len1, len2);\n        if (len > (end - start)) {\n            start = i - Math.floor((len - 1) / 2);\n            end = i + Math.floor(len / 2);\n        }\n    }\n    return s.substring(start, end + 1);\n};\n\nconst expandFromCenter = (s, left, right) => {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}; // time complexity is O(n^2) and space complexity is O(1) as we are not using any extra space. \n\n// 3. Given a string s, find the first non-repeating character in s. \nconst firstUniqChar = (s) => {\n    let count = {};\n    for (let i = 0; i < s.length; i++) {\n        if (count[s[i]]) {\n            count[s[i]]++;\n        } else {\n            count[s[i]] = 1;\n        }\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (count[s[i]] === 1) {\n            return s[i];\n        }\n    }\n    return ' ';\n}; // time complexity is O(n)"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n} */ \n\n// Test cases\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> (\"Venus\")\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") */ \n\n// Solution\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n} \n\n// Test cases\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> (\"Venus\")\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\") */ \n\n// Solution\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -"}
{"task_id": "JavaScript/149", "generation": "\n    let result = lst.filter(str => str.length % 2 === 0);\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        } else {\n            return a.length - b.length;\n        }\n    });\n    return result;\n}; */ \n\n// This function accepts a list of strings, filters out strings with odd lengths, sorts the list in ascending order by string length and then alphabetically, and returns the sorted list. \n\n// The function first filters the list to include only strings with even lengths. It then sorts the list based on two criteria: \n// 1. The length of the strings (in ascending order), \n// 2. The alphabetical order of the strings (in case of a tie in length). \n// The function uses the localeCompare method to compare strings alphabetically. \n// The sort method is used with a custom compare function to achieve this. \n\n// The function returns the sorted list of strings. \n\n// The unit test provided checks that the function returns an empty list when all strings in the input list have odd lengths. \n\n// The unit test provided also checks that the function returns a list with the correct order when the input list contains strings with even lengths. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with the same length. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with different lengths. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with different lengths and the same length. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with different lengths and the same length, and the strings with the same length are in alphabetical order. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with different lengths and the same length, and the strings with the same length are in alphabetical order, and the strings with different lengths are in ascending order by length. \n\n// The unit test provided checks that the function returns a list with the correct order when the input list contains strings with different lengths and the same length, and the strings with the same length are in alphabetical order, and the strings with different lengths are in ascending order by length, and the strings with the same length are in alphabetical order."}
{"task_id": "JavaScript/150", "generation": "\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let num of lst) {\n    if (num > 0 && Number.isInteger(num)) {\n      sum += num ** 2;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n    return game.map((score, index) => Math.abs(score - guess[index]));\n}; // I used the map function to create a new array with the absolute differences between the scores and guesses. The map function applies a given function to each element of an array and returns a new array with the results. The Math.abs function returns the absolute value of a number. I used the index parameter of the map function to access the corresponding elements of the game and guess arrays. I used the Math.abs function to calculate the absolute difference between the score and guess at each index. I returned the new array with the absolute differences. I used the map function to create a new array with the absolute differences between the scores and guesses. The map function applies a given function to each element of an array and returns a new array with the results. The Math.abs function returns the absolute value of a number. I used the index parameter of the map function to access the corresponding elements of the game and guess arrays. I used the Math.abs function to calculate the absolute difference between the score and guess at each index. I returned the new array with the absolute differences. I used the map function to create a new array with the absolute differences between the scores and guesses. The map function applies a given function to each element of an array and returns a new array with the results. The Math.abs function returns the absolute value of a number. I used the index parameter of the map function to access the corresponding elements of the game and guess arrays. I used the Math.abs function to calculate the absolute difference between the score and guess at each index. I returned the new array with the absolute differences. I used the map function to create a new array with the absolute differences between the scores and guesses. The map function applies a given function to each element of an array and returns a new array with the results. The Math.abs function returns the absolute value of a number. I used the index parameter of the map function to access the corresponding elements of the game and guess arrays. I used the Math.abs function to calculate the absolute difference between the score and guess at each index. I returned the new array with the absolute differences. I used the map function to create a new array with the absolute differences between the scores and guesses. The map function applies a given function to each element of an array and returns a new array with the results. The Math.abs function returns the absolute value of a number. I used the index parameter of the map function to access the corresponding elements of the game and guess"}
{"task_id": "JavaScript/153", "generation": "\n    let max_strength = -Infinity;\n    let strongest_extension = '';\n    for (let extension of extensions) {\n        let cap = 0;\n        let sm = 0;\n        for (let char of extension) {\n            if (char === char.toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        let strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}; // do not change this line\n\n// test the function\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // 'my_class.AA'\nconsole.log(strongestExtension('Class', ['Class', 'class', 'CLASS'])); // 'Class.CLASS'\nconsole.log(strongestExtension('Class', ['class', 'CLASS', 'Class'])); // 'Class.class' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'CLASS', 'class'])); // 'Class.class' // changed this line\nconsole.log(strongestExtension('Class', ['CLASS', 'class', 'class'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['CLASS', 'CLASS', 'class'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['CLASS', 'CLASS', 'CLASS'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'class', 'class'])); // 'Class.class' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'class', 'CLASS'])); // 'Class.class' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'CLASS', 'CLASS'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'CLASS', 'CLASS'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'CLASS', 'CLASS'])); // 'Class.CLASS' // changed this line\nconsole.log(strongestExtension('Class', ['class', 'CLASS',"}
{"task_id": "JavaScript/154", "generation": "\n    if (a.length < b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a.slice(i, i + b.length) === b) return true;\n    }\n    return false;\n}; // 1"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    while (num !== 0) {\n        let digit = num % 10;\n        if (digit % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 10);\n    }\n    return [even, odd];\n}\n\n// Test the function\nconsole.log(evenOddCount(-12));  // Output: [1, 1]\nconsole.log(evenOddCount(123));  // Output: [1, 2]"}
{"task_id": "JavaScript/156", "generation": "\n    const romanNumerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result = '';\n    for (const [key, value] of Object.entries(romanNumerals).sort((a, b) => b[0] - a[0])) {\n        while (number >= key) {\n            result += value;\n            number -= key;\n        }\n    }\n    return result.toLowerCase();\n};"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n  } else {\n    return false;\n  }\n}\n\n// Test the function\nconsole.log(rightAngleTriangle(3, 4, 5)); // Expected output: true\nconsole.log(rightAngleTriangle(1, 2, 3)); // Expected output: false\n"}
{"task_id": "JavaScript/158", "generation": "\n    let max = \"\";\n    let maxCount = 0;\n    for (let word of words) {\n        let count = new Set(word).size;\n        if (count > maxCount) {\n            maxCount = count;\n            max = word;\n        } else if (count === maxCount && word < max) {\n            max = word;\n        }\n    }\n    return max;\n}; // O(n*m) time, O(n*m) space"}
{"task_id": "JavaScript/159", "generation": "\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need, remaining) => {\n  const total = number + need;\n  const left = remaining - (total - number);\n  return [total, left];\n}; // You can also use arrow function\nconst eat = (number, need"}
{"task_id": "JavaScript/160", "generation": "\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '/':\n                result /= operand[i + 1];\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\n// Test the function\nconst operator = ['+', '*', '-'];\nconst operand = [2, 3, 4, 5]"}
{"task_id": "JavaScript/161", "generation": "\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += String.fromCharCode(s[i].charCodeAt(0) - 32);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += String.fromCharCode(s[i].charCodeAt(0) + 32);\n        } else {\n            result += s[i];\n        }\n    }\n    return result.split(\"\").reverse().join(\"\");\n}; // or return result.split(\"\").reverse().join(\"\");\n// or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or return result.split(\"\").reverse().join(\"\"); // or"}
{"task_id": "JavaScript/162", "generation": "\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}"}
{"task_id": "JavaScript/163", "generation": "\n  if (a > b) {\n    return [];\n  } else {\n    const result = [];\n    for (let i = a; i <= b; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n}"}
