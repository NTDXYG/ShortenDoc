{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    for _, c := range paren_string {\n        if c == '(' {\n            stack = append(stack, c)\n        } else if c == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                if len(stack) == 0 {\n                    result = append(result, string(stack))\n                    stack = nil\n                }\n            }\n        }\n    }\n    return result\n}"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/4", "generation": "\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\n    absSum := 0.0\n    for _, num := range numbers {\n        absSum += math.Abs(num - mean)\n    }\n\n    mad := absSum / float64(len(numbers))\n    return mad\n}"}
{"task_id": "Go/5", "generation": "\n    var result []int\n    for i, num := range numbers {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    for _, group := range strings.Split(paren_string, \" \") {\n        level := 0\n        max_level := 0\n        for _, char := range group {\n            if char == '(' {\n                level++\n                if level > max_level {\n                    max_level = level\n                }\n            } else if char == ')' {\n                level--\n            }\n        }\n        levels = append(levels, max_level)\n    }\n    return levels\n}"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, v := range stringList {\n        if strings.Contains(v, substring) {\n            result = append(result, v)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum += num\n        product *= num\n    }\n    return [2]int{sum, product}\n}"}
{"task_id": "Go/9", "generation": "\n    max := numbers[0]\n    result := make([]int, len(numbers))\n    result[0] = max\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n        result[i] = max\n    }\n\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes) - 1; i >= 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes) + string(runes[:i+1])\n        }\n    }\n    return string(runes)\n}"}
{"task_id": "Go/11", "generation": "\n    var result string\n    if len(a) != len(b) {\n        fmt.Println(\"Strings are not of equal length\")\n        return result\n    }\n\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b==0 {\n        return a\n    }\n    return GreatestCommonDivisor(b,a%b)\n}"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 1; i <= len(str); i++ {\n        prefixes = append(prefixes, str[0:i])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove the last space\n}"}
{"task_id": "Go/16", "generation": "\n    distinct_chars := make(map[rune]bool)\n    for _, char := range str {\n        distinct_chars[char] = true\n    }\n    return len(distinct_chars)\n}"}
{"task_id": "Go/17", "generation": "\n    var beats []int\n    for _, note := range strings.Split(music_string, \" \") {\n        switch note {\n        case \"o\":\n            beats = append(beats, 4)\n        case \"o|\":\n            beats = append(beats, 2)\n        case \".|\":\n            beats = append(beats, 1)\n        }\n    }\n    return beats\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if strings.HasPrefix(str[i:], substring) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    numberMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numberSlice := strings.Split(numbers, \" \")\n    sort.Slice(numberSlice, func(i, j int) bool {\n        return numberMap[numberSlice[i]] < numberMap[numberSlice[j]]\n    })\n\n    return strings.Join(numberSlice, \" \")\n}"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    minDiff := numbers[1] - numbers[0]\n    minPair := [2]float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)-1; i++ {\n        if diff := numbers[i+1] - numbers[i]; diff < minDiff {\n            minDiff = diff\n            minPair = [2]float64{numbers[i], numbers[i+1]}\n        }\n    }\n    return minPair\n}\n\n"}
{"task_id": "Go/21", "generation": "\n\tmin := numbers[0]\n\tmax := numbers[0]\n\n\t// Find the minimum and maximum values in the list\n\tfor _, number := range numbers {\n\t\tif number < min {\n\t\t\tmin = number\n\t\t}\n\t\tif number > max {\n\t\t\tmax = number\n\t\t}\n\t}\n\n\t// Rescale the list\n\tfor i, number := range numbers {\n\t\tnumbers[i] = (number - min) / (max - min)\n\t}\n\n\treturn numbers\n}\n\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if val, ok := value.(int); ok {\n            result = append(result, val)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n    m := make(map[int]int)\n    result := make([]int, 0)\n\n    for _, num := range numbers {\n        if _, ok := m[num]; !ok {\n            m[num] = 1\n            result = append(result, num)\n        } else {\n            m[num] += 1\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/27", "generation": "\n    result := make([]rune, len(str))\n    for i, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result[i] = c - 'a' + 'A'\n        } else if 'A' <= c && c <= 'Z' {\n            result[i] = c - 'A' + 'a'\n        } else {\n            result[i] = c\n        }\n    }\n    return string(result)\n}"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n    var posNums []int\n    for _, num := range l {\n        if num > 0 {\n            posNums = append(posNums, num)\n        }\n    }\n    return posNums\n}"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/32", "generation": "\n    for x := 0.0; ; x += 0.00001 {\n        if Poly(xs, x) == 0.0 {\n            return x\n        }\n    }\n}"}
{"task_id": "Go/33", "generation": "\n    var third []int\n    for i, v := range l {\n        if i%3 == 0 {\n            third = append(third, v)\n        }\n    }\n    sort.Ints(third)\n\n    j := 0\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = third[j]\n            j++\n        }\n    }\n    return l\n}"}
{"task_id": "Go/34", "generation": "\n    keys := make(map[int]bool)\n    list := make([]int, 0)\n    for _, entry := range l {\n        if _, value := keys[entry]; !value {\n            keys[entry] = true\n            list = append(list, entry)\n        }\n    }\n    sort.Ints(list)\n    return list\n}"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tstr := strconv.Itoa(i)\n\t\t\tcount += strings.Count(str, \"7\")\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/37", "generation": "\n\tvar evenIndices []int\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tvar result []int\n\tj := 0\n\tfor i := 0; i < len(l); i += 2 {\n\t\tresult = append(result, evenIndices[j])\n\t\tj++\n\t}\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[len(runes)-1]}, runes[:len(runes)-1]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tcount := 0\n\tfor {\n\t\ttemp := i\n\t\ti = j\n\t\tj = temp + j\n\t\tcount++\n\t\tif count == n {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn i\n}"}
{"task_id": "Go/40", "generation": "\n    sort.Ints(l)\n    for i := 0; i < len(l)-2; i++ {\n        left, right := i+1, len(l)-1\n        for left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/41", "generation": "\n    // The number of collisions is equal to the number of pairs of cars that collide.\n    // This is because each car is moving in a different direction, and a collision is only possible if the cars are moving in opposite directions.\n    // Therefore, the number of pairs of cars that collide is equal to the number of cars.\n    return n\n}"}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[-num]; ok {\n            return true\n        }\n        m[num] = true\n    }\n    return false\n}"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return strconv.Itoa(x)\n    } else {\n        return ChangeBase(x/base, base) + strconv.Itoa(x%base)\n    }\n}"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    var fib4Array [4]int\n    fib4Array[0] = 0\n    fib4Array[1] = 0\n    fib4Array[2] = 2\n    fib4Array[3] = 0\n\n    for i := 4; i <= n; i++ {\n        fib4Array[i] = fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4]\n    }\n\n    return fib4Array[n]\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n\t}\n\treturn float64(l[n/2])\n}"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/49", "generation": "\n    return PowMod(2,n,p)\n}"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}"}
{"task_id": "Go/51", "generation": "\n    reg, _ := regexp.Compile(\"[aeiouAEIOU]\")\n    return reg.ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}"}
{"task_id": "Go/54", "generation": "\n    m0 := make(map[rune]bool)\n    m1 := make(map[rune]bool)\n\n    for _, c := range s0 {\n        m0[c] = true\n    }\n\n    for _, c := range s1 {\n        m1[c] = true\n    }\n\n    return reflect.DeepEqual(m0, m1)\n}\n\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}"}
{"task_id": "Go/56", "generation": "\n    openBrackets := []rune{}\n    for _, bracket := range brackets {\n        switch bracket {\n        case '<':\n            openBrackets = append(openBrackets, bracket)\n        case '>':\n            if len(openBrackets) == 0 {\n                return false\n            }\n            openBrackets = openBrackets[:len(openBrackets)-1]\n        }\n    }\n    return len(openBrackets) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    if len(l) < 2 {\n        return true\n    }\n\n    increase := l[1] > l[0]\n    for i := 2; i < len(l); i++ {\n        if (increase && l[i] > l[i-1]) || (!increase && l[i] < l[i-1]) {\n            return false\n        }\n        if l[i] != l[i-1] {\n            increase = l[i] > l[i-1]\n        }\n    }\n    return true\n}"}
{"task_id": "Go/58", "generation": "\n    m1 := make(map[int]bool)\n    for _, item := range l1 {\n        m1[item] = true\n    }\n\n    m2 := make(map[int]bool)\n    for _, item := range l2 {\n        m2[item] = true\n    }\n\n    common := make([]int, 0)\n    for key := range m1 {\n        if m2[key] {\n            common = append(common, key)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n    for i := 2; i * i <= n; i++ {\n        if n % i != 0 {\n            continue\n        }\n        for n % i == 0 {\n            n /= i\n        }\n    }\n    return n\n}"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}"}
{"task_id": "Go/61", "generation": "\n    openBrackets := 0\n    for _, char := range brackets {\n        if string(char) == \"(\" {\n            openBrackets++\n        } else if string(char) == \")\" {\n            if openBrackets == 0 {\n                return false\n            }\n            openBrackets--\n        }\n    }\n    return openBrackets == 0\n}"}
{"task_id": "Go/62", "generation": "\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n\n    var fibfibArray = make([]int, n+1)\n    fibfibArray[0] = 0\n    fibfibArray[1] = 0\n    fibfibArray[2] = 1\n\n    for i := 3; i <= n; i++ {\n        fibfibArray[i] = fibfibArray[i-1] + fibfibArray[i-2] + fibfibArray[i-3]\n    }\n\n    return fibfibArray[n]\n}"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n    for _, c := range s {\n        if strings.ContainsRune(\"aeiou\", c) {\n            count++\n        }\n        if c == 'y' && len(s) > 0 && strings.ContainsRune(\"aeiou\", rune(s[len(s)-1])) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    length := len(str)\n    shift = shift % length\n    return str[length-shift :] + str[:length-shift]\n}\n\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, c := range x {\n        if 'A' <= c && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tarr := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(arr[0])\n\toranges, _ := strconv.Atoi(arr[2])\n\treturn n - apples - oranges\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallestEven := math.MaxInt64\n    smallestEvenIndex := -1\n    for index, value := range arr {\n        if value%2 == 0 && value < smallestEven {\n            smallestEven = value\n            smallestEvenIndex = index\n        }\n    }\n    if smallestEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{smallestEven, smallestEvenIndex}\n}"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n\n    for i := 1; i <= 100; i++ {\n        if freq[i] >= i {\n            return i\n        }\n    }\n\n    return -1\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        // calculate semi-perimeter\n        s := (a + b + c) / 2\n        // calculate area using Heron's formula\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    } else {\n        return -1\n    }\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    reverseQ := make([]int, len(q))\n    copy(reverseQ, q)\n    for i, j := 0, len(q)-1; i < j; i, j = i+1, j-1 {\n        reverseQ[i], reverseQ[j] = reverseQ[j], reverseQ[i]\n    }\n    if q == reverseQ {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/73", "generation": "\n    count := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/74", "generation": "\n    var sum1, sum2 int\n    for _, v := range lst1 {\n        sum1 += len(v)\n    }\n    for _, v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return lst1\n    }\n}"}
{"task_id": "Go/75", "generation": "\n\tprimes := []int{2, 3, 5}\n\tfor _, prime := range primes {\n\t\tif a%prime != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if n==1 {\n        return x==1\n    }\n    if x==1 {\n        return true\n    }\n    if x<=0 || n<=0 {\n        return false\n    }\n    for i:=2; i*i<=x; i++ {\n        if x%(i*i)==0 {\n            for x/=i; x%i==0; {\n            }\n            if x==1 {\n                return true\n            }\n        }\n    }\n    if x>1 {\n        return false\n    }\n    return false\n}"}
{"task_id": "Go/77", "generation": "\n    n := int(math.Cbrt(float64(a)))\n    return n*n*n == a\n}\n\n"}
{"task_id": "Go/78", "generation": "\n\thexToDec := map[rune]int{\n\t\t'0': 0,\n\t\t'1': 1,\n\t\t'2': 2,\n\t\t'3': 3,\n\t\t'4': 4,\n\t\t'5': 5,\n\t\t'6': 6,\n\t\t'7': 7,\n\t\t'8': 8,\n\t\t'9': 9,\n\t\t'A': 10,\n\t\t'B': 11,\n\t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t'F': 15,\n\t\t'a': 10,\n\t\t'b': 11,\n\t\t'c': 12,\n\t\t'd': 13,\n\t\t'e': 14,\n\t\t'f': 15,\n\t}\n\n\tcount := 0\n\tfor _, c := range num {\n\t\tif _, ok := hexToDec[c]; ok {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count\n}"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tdecimal = decimal / 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    for i := 0; i < len(s)-2; i += 3 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var letterGrades []string\n    for _, grade := range grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades, \"B\")\n        } else if grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B-\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades, \"C\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades, \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades, \"C-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades, \"D\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades, \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades, \"D\")\n        } else {\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}"}
{"task_id": "Go/82", "generation": "\n    if len(s) == 0 {\n        return false\n    }\n    length := len(s)\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 10\n    }\n\n    if n == 2 {\n        return 90\n    }\n\n    count := 0\n    for i := 1; i < int(math.Pow10(n-1)); i++ {\n        count += int(math.Pow10(n-1)) - i\n    }\n\n    return count\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.Itoa(sum)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 != 0 && lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i := 0; i < len(words); i++ {\n        sort.Strings(words[i])\n    }\n    return strings.Join(words, \" \")\n}"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n\n    sum := array[0] + array[len(array)-1]\n\n    if sum%2 == 0 {\n        sort.Ints(array)\n        for i, j := 0, len(array)-1; i < j; i, j = i+1, j-1 {\n            array[i], array[j] = array[j], array[i]\n        }\n    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i] > array[j]\n        })\n    }\n\n    return array\n}\n\n"}
{"task_id": "Go/89", "generation": "\n    result := \"\"\n    for _, c := range s {\n        if 'a' <= c && c <= 'z' {\n            result += string((c-'a'+2)%26 + 'a')\n        } else if 'A' <= c && c <= 'Z' {\n            result += string((c-'A'+2)%26 + 'A')\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    return lst[1]\n}"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`^I.*`)\n    sentences := regexp.MustCompile(`[.?!]+`)\n    matched := re.FindAllString(S, -1)\n    count := 0\n    for _, sentence := range sentences.Split(S, -1) {\n        if sentence != \"\" {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/92", "generation": "\n    a, b, c := x.(int), y.(int), z.(int)\n    return a == b+c || a == c+b || b == c+a\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encodedMessage := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            switch char {\n            case 'a':\n                encodedMessage += \"c\"\n            case 'e':\n                encodedMessage += \"g\"\n            case 'i':\n                encodedMessage += \"k\"\n            case 'o':\n                encodedMessage += \"q\"\n            case 'u':\n                encodedMessage += \"w\"\n            }\n        } else if char >= 'a' && char <= 'z' {\n            encodedMessage += string(char - 'a' + 'b' - 'a')\n        } else if char >= 'A' && char <= 'Z' {\n            encodedMessage += string(char - 'A' + 'B' - 'A')\n        } else {\n            encodedMessage += string(char)\n        }\n    }\n    return encodedMessage\n}\n\n"}
{"task_id": "Go/94", "generation": "\n    var maxPrime int\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumOfDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumOfDigits(n int) int {\n    str := strconv.Itoa(n)\n    sum := 0\n    for _, r := range str {\n        digit, _ := strconv.Atoi(string(r))\n        sum += digit\n    }\n    return sum\n}"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    allUpper := true\n    allLower := true\n\n    for _, value := range dict {\n        if _, ok := value.(string); !ok {\n            allUpper = false\n        }\n\n        if _, ok := value.(string); ok {\n            if !strings.ToLower(value.(string)) == value.(string) {\n                allLower = false\n            }\n        }\n    }\n\n    return allUpper || allLower\n}"}
{"task_id": "Go/96", "generation": "\n    if n < 2 {\n        return []int{}\n    }\n    primes := []int{2}\n    for i := 3; i < n; i += 2 {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/97", "generation": "\n    product := 1\n    for a != 0 {\n        if a % 10 != 0 {\n            product *= a % 10\n        }\n        a /= 10\n    }\n    for b != 0 {\n        if b % 10 != 0 {\n            product *= b % 10\n        }\n        b /= 10\n    }\n    return product\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    vowels := \"AEIOU\"\n    for i := 0; i < len(s); i += 2 {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/99", "generation": "\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(math.Round(num))\n    } else {\n        return int(math.Ceil(num))\n    }\n}"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    for i := 1; i <= n; i++ {\n        if n % 2 == 0 {\n            result = append(result, n+2*i)\n        } else {\n            result = append(result, n+2*(i-1))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/101", "generation": "\n    return strings.Fields(s)\n}"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return -1\n    }\n    return y\n}"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := int(math.Round(float64(sum) / float64(m-n+1)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var res []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            res = append(res, num)\n        }\n    }\n    sort.Ints(res)\n    return res\n}\n\nfunc hasEvenDigit(n int) bool {\n    str := strconv.Itoa(n)\n    for _, ch := range str {\n        if ch == '2' || ch == '4' || ch == '6' || ch == '8' || ch == '0' {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/105", "generation": "\n    if len(arr) == 0 {\n        return []string{}\n    }\n    var nums []string\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            nums = append(nums, numToString(num))\n        }\n    }\n    sort.Strings(nums)\n    reverse(nums)\n    return nums\n}\n\nfunc numToString(num int) string {\n    switch num {\n    case 1:\n        return \"One\"\n    case 2:\n        return \"Two\"\n    case 3:\n        return \"Three\"\n    case 4:\n        return \"Four\"\n    case 5:\n        return \"Five\"\n    case 6:\n        return \"Six\"\n    case 7:\n        return \"Seven\"\n    case 8:\n        return \"Eight\"\n    case 9:\n        return \"Nine\"\n    default:\n        return \"\"\n    }\n}\n\nfunc reverse(nums []string) {\n    for i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {\n        nums[i], nums[j] = nums[j], nums[i]\n    }\n}"}
{"task_id": "Go/106", "generation": "\n\tfactorial := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tfactorial[i] = factorialOf(i)\n\t\t} else {\n\t\t\tfactorial[i] = sumOf(i)\n\t\t}\n\t}\n\treturn factorial\n}\n\nfunc factorialOf(n int) int {\n\tfactorial := 1\n\tfor i := 1; i <= n; i++ {\n\t\tfactorial *= i\n\t}\n\treturn factorial\n}\n\nfunc sumOf(n int) int {\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}"}
{"task_id": "Go/107", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i % 2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\nfunc isPalindrome(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num > 0 {\n            sum := 0\n            for num > 0 {\n                sum += int(math.Abs(float64(num%10)))\n                num /= 10\n            }\n            if sum > 0 {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[(i+1)%len(arr)] {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/110", "generation": "\n    // Your code here\n}"}
{"task_id": "Go/111", "generation": "\n    counts := make(map[rune]int)\n    for _, letter := range strings.Fields(test) {\n        for _, ch := range letter {\n            counts[ch]++\n        }\n    }\n    return counts\n}"}
{"task_id": "Go/112", "generation": "\n    var result string\n    var isPalindrome bool\n    for _, char := range s {\n        if string(char) != c {\n            result += string(char)\n        }\n    }\n    isPalindrome = isPalindromeCheck(result)\n    return [2]interface{}{result, isPalindrome}\n}\n\nfunc isPalindromeCheck(s string) bool {\n    s = strings.ToLower(s)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        count := 0\n        for _, c := range s {\n            if int(c-'0')%2 != 0 {\n                count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, count, i+1, count)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := 0\n    for _, num := range nums {\n        minSum += int(math.Abs(float64(num)))\n    }\n    return minSum\n}\n\n"}
{"task_id": "Go/115", "generation": "\n    count := 0\n    for _, row := range grid {\n        for _, well := range row {\n            if well == 1 {\n                count++\n            }\n        }\n    }\n    return count / capacity\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        onesI, onesJ := countOnes(arr[i]), countOnes(arr[j])\n        if onesI == onesJ {\n            return arr[i] < arr[j]\n        }\n        return onesI < onesJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    result := make([]string, 0)\n    for _, word := range words {\n        count := 0\n        for _, r := range word {\n            if strings.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", r) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/118", "generation": "\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    for i := len(word) - 1; i >= 2; i-- {\n        if word[i] != 'b' && word[i-1] != 'c' && word[i+1] != 'd' && contains(vowels, string(word[i])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n\nfunc contains(slice []string, item string) bool {\n    for _, a := range slice {\n        if a == item {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/119", "generation": "\n    var open, close int\n    for _, str := range lst {\n        for _, ch := range str {\n            if ch == '(' {\n                open++\n            } else if ch == ')' {\n                close++\n            }\n            if close > open {\n                return \"No\"\n            }\n        }\n    }\n    if open != close {\n        return \"No\"\n    }\n    return \"Yes\"\n}"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[:k]\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var sequence []int\n    for n != 1 {\n        if n % 2 != 0 {\n            sequence = append(sequence, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        }\n        if n % 2 != 0 {\n            n = 3*n + 1\n        }\n    }\n    sequence = append(sequence, 1)\n    sort.Ints(sequence)\n    return sequence\n}"}
{"task_id": "Go/124", "generation": "\n    dateParts := strings.Split(date, \"-\")\n    if len(dateParts) != 3 {\n        return false\n    }\n\n    month, err := strconv.Atoi(dateParts[0])\n    if err != nil || month < 1 || month > 12 {\n        return false\n    }\n\n    day, err := strconv.Atoi(dateParts[1])\n    if err != nil || day < 1 {\n        return false\n    }\n\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day > 31 {\n            return false\n        }\n    case 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n    case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                count++\n            }\n        }\n        return count\n    }\n}"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n\n    prev := lst[0]\n    for _, num := range lst {\n        if num < prev {\n            return false\n        }\n        prev = num\n    }\n\n    duplicates := 0\n    for _, num := range lst {\n        if num == prev {\n            duplicates++\n        }\n        if duplicates > 1 {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/127", "generation": "\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n\n    if start > end {\n        return \"NO\"\n    }\n\n    length := end - start\n\n    if length == 1 {\n        return \"NO\"\n    }\n\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length%i == 0 {\n            return \"NO\"\n        }\n    }\n\n    return \"YES\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    product := 1\n    sum := 0\n\n    for _, num := range arr {\n        product *= num\n        sum += int(math.Abs(float64(num)))\n    }\n\n    return product * sum\n}"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    m := len(grid[0])\n    visited := make(map[[2]int]bool)\n    minpath := make([]int, 0)\n    dfs := func(x, y, k int) {\n        if k == 0 {\n            minpath = append(minpath, grid[x][y])\n            return\n        }\n        visited[[2]int{x, y}] = true\n        directions := [4][2]int{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}\n        for _, dir := range directions {\n            nx, ny := x+dir[0], y+dir[1]\n            if nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[[2]int{nx, ny}] {\n                dfs(nx, ny, k-1)\n            }\n        }\n        visited[[2]int{x, y}] = false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            dfs(i, j, k)\n        }\n    }\n    sort.Ints(minpath)\n    return minpath\n}"}
{"task_id": "Go/130", "generation": "\n    var res []float64\n    for i := 1; i <= n+1; i++ {\n        if i % 2 == 0 {\n            res = append(res, float64(3*i/2))\n        } else {\n            res = append(res, float64(tri(i-1)+tri(i-2)+tri(i+1)))\n        }\n    }\n    return res\n}\n\nfunc tri(i int) float64 {\n    if i % 2 == 0 {\n        return float64(3 * i / 2)\n    } else {\n        return float64(tri(i-1) + tri(i-2) + tri(i+1))\n    }\n}"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    hasOdd := false\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n            hasOdd = true\n        }\n        n /= 10\n    }\n    if !hasOdd {\n        return 0\n    }\n    return product\n}"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        num = math.Ceil(num)\n        sum += num * num\n    }\n    return int(sum)\n}"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n    return true\n}"}
{"task_id": "Go/135", "generation": "\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i] >= arr[i+1] {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var largestNegative, smallestPositive int\n    largestNegative, smallestPositive = math.MinInt64, math.MaxInt64\n    for _, num := range lst {\n        if num < 0 && num > largestNegative {\n            largestNegative = num\n        } else if num > 0 && num < smallestPositive {\n            smallestPositive = num\n        }\n    }\n    if largestNegative == math.MinInt64 {\n        return [2]interface{}{nil, smallestPositive}\n    } else if smallestPositive == math.MaxInt64 {\n        return [2]interface{}{largestNegative, nil}\n    }\n    return [2]interface{}{largestNegative, smallestPositive}\n}"}
{"task_id": "Go/137", "generation": "\n    var result interface{} = nil\n\n    switch a := a.(type) {\n    case int:\n        if b, ok := b.(int); ok {\n            if a == b {\n                result = nil\n            } else {\n                result = a\n            }\n        }\n    case float64:\n        if b, ok := b.(float64); ok {\n            if a == b {\n                result = nil\n            } else {\n                result = a\n            }\n        }\n    case string:\n        if b, ok := b.(string); ok {\n            if a == b {\n                result = nil\n            } else {\n                result = a\n            }\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n < 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum > n {\n            return false\n        }\n    }\n    return sum == n\n}"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}"}
{"task_id": "Go/140", "generation": "\n\tresult := \"\"\n\tspaces := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tspaces++\n\t\t\tif spaces > 2 {\n\t\t\t\tresult += \"-\"\n\t\t\t\tspaces = 0\n\t\t\t}\n\t\t} else {\n\t\t\tresult += string(c)\n\t\t\tspaces = 0\n\t\t}\n\t}\n\treturn result\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    parts := strings.Split(file_name, \".\")\n    if len(parts) != 2 {\n        return \"No\"\n    }\n    if len(parts[0]) > 3 || len(parts[0]) == 0 {\n        return \"No\"\n    }\n    if !unicode.IsLetter(rune(parts[0][0])) || !unicode.IsLetter(rune(parts[0][len(parts[0])-1])) {\n        return \"No\"\n    }\n    if parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    primes := []string{}\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primes = append(primes, word)\n        }\n    }\n    return strings.Join(primes, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    if xNumerator * nDenominator == nNumerator * xDenominator {\n        return true\n    }\n\n    return false\n}"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        index int\n        sum   int\n    }\n\n    pairs := make([]pair, len(nums))\n    for i, num := range nums {\n        pairs[i] = pair{index: i, sum: sumOfDigits(num)}\n    }\n\n    sort.Slice(pairs, func(i, j int) bool {\n        if pairs[i].sum == pairs[j].sum {\n            return pairs[i].index < pairs[j].index\n        }\n        return pairs[i].sum < pairs[j].sum\n    })\n\n    sortedNums := make([]int, len(nums))\n    for i, pair := range pairs {\n        sortedNums[i] = nums[pair.index]\n    }\n\n    return sortedNums\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            str := strconv.Itoa(num)\n            if str[0] != '1' && str[0] != '3' && str[0] != '5' && str[0] != '7' && str[0] != '9' && str[len(str)-1] != '1' && str[len(str)-1] != '3' && str[len(str)-1] != '5' && str[len(str)-1] != '7' && str[len(str)-1] != '9' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i*i - i + 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i + 1; j < n-1; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n    var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n\n    pos1, pos2 := -1, -1\n\n    for i, v := range planets {\n        if v == planet1 {\n            pos1 = i\n        }\n        if v == planet2 {\n            pos2 = i\n        }\n    }\n\n    if pos1 == -1 || pos2 == -1 {\n        return []string{}\n    }\n\n    if pos1 < pos2 {\n        result = planets[pos1+1 : pos2]\n    } else {\n        result = planets[pos2+1 : pos1]\n    }\n\n    return result\n}"}
{"task_id": "Go/149", "generation": "\n    var res []string\n    for _, v : := range lst {\n        if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    sort.Strings(res)\n    return res\n}"}
{"task_id": "Go/150", "generation": "\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num != float64(int(num)) || int(num) < 0 {\n            continue\n        }\n        if int(num) % 2 != 0 {\n            sum += int(num) * int(num)\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, int(math.Abs(float64(game[i]-guess[i]))))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.MinInt64\n    strongest_extension := \"\"\n    for _, extension := range extensions {\n        CAP := 0\n        SM := 0\n        for _, c := range extension {\n            if unicode.IsUpper(c) {\n                CAP++\n            } else if unicode.IsLower(c) {\n                SM++\n            }\n        }\n        strength := CAP - SM\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}"}
{"task_id": "Go/154", "generation": "\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(b, string(a[i:])) {\n            return true\n        }\n        b = string(b[1:]) + string(b[0])\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    numStr := strconv.Itoa(num)\n    evenCount, oddCount := 0, 0\n    for _, char := range numStr {\n        digit, _ := strconv.Atoi(string(char))\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}"}
{"task_id": "Go/156", "generation": "\n    val := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    syb := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n\n    roman := \"\"\n    i := 0\n    for number > 0 {\n        for number >= val[i] {\n            number -= val[i]\n            roman += syb[i]\n        }\n        i++\n    }\n    return strings.ToLower(roman)\n}"}
{"task_id": "Go/157", "generation": "\n    if a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueCount := len(uniqueCharacters(word))\n        if uniqueCount > maxUnique {\n            maxUnique = uniqueCount\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc uniqueCharacters(word string) map[rune]bool {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return unique\n}"}
{"task_id": "Go/159", "generation": "\n    if need > remaining {\n        number += remaining\n        remaining = 0\n    } else {\n        number += need\n        remaining -= need\n    }\n    return []int{number, remaining}\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n    var res []rune\n    for _, c := range s {\n        if unicode.IsLetter(c) {\n            if unicode.IsLower(c) {\n                res = append(res, unicode.ToUpper(c))\n            } else {\n                res = append(res, unicode.ToLower(c))\n            }\n        } else {\n            res = append(res, c)\n        }\n    }\n    if len(res) == 0 {\n        for _, c := range s {\n            if unicode.IsLetter(c) {\n                if unicode.IsLower(c) {\n                    res = append(res, unicode.ToUpper(c))\n                } else {\n                    res = append(res, unicode.ToLower(c))\n                }\n            } else {\n                res = append(res, c)\n            }\n        }\n    }\n    return string(res)\n}"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}"}
{"task_id": "Go/163", "generation": "\n    if a > b {\n        a, b = b, a\n    }\n    length := b - a + 1\n    if length < 0 {\n        length = 0\n    }\n    result := make([]int, length)\n    for i := 0; i < length; i++ {\n        result[i] = a + i\n    }\n    return result\n}"}
