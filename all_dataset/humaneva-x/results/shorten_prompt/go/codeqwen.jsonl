{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Mod(number, 1)\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/4", "generation": "\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 = 0\n\n    // Calculate sum of numbers\n    for _, number := range numbers {\n        sum += number\n    }\n\n    // Calculate mean\n    mean = sum / float64(len(numbers))\n\n    // Calculate Mean Absolute Deviation\n    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n    }\n\n    mad = mad / float64(len(numbers))\n\n    return mad\n}\n"}
{"task_id": "Go/5", "generation": "\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int, 0, len(numbers)*2-1)\n    for i, num := range numbers {\n        result = append(result, num)\n        if i < len(numbers)-1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/6", "generation": "\n    groups := strings.Split(paren_string, \" \")\n    max_depths := make([]int, len(groups))\n\n    for i, group := range groups {\n        depth := 0\n        max_depth := 0\n        for _, char := range group {\n            if char == '(' {\n                depth++\n                if depth > max_depth {\n                    max_depth = depth\n                }\n            } else if char == ')' {\n                depth--\n            }\n        }\n        max_depths[i] = max_depth\n    }\n\n    return max_depths\n}\n"}
{"task_id": "Go/7", "generation": "\n    var filteredList []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            filteredList = append(filteredList, str)\n        }\n    }\n    return filteredList\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    return [2]int{sum, product}\n}"}
{"task_id": "Go/9", "generation": "\n    maxSoFar := math.MinInt64\n    result := make([]int, len(numbers))\n\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    for i := 0; i < len(str); i++ {\n        if IsPalindrome(str[i:]) {\n            return str + strings.Replace(str[:i], \"\", \"\", -1)\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    result := \"\"\n    for i := range a {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings[1:] {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 1; i <= len(str); i++ {\n        prefixes = append(prefixes, str[:i])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1]\n}"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    charMap := make(map[rune]bool)\n    for _, char := range str {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n"}
{"task_id": "Go/17", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i <= len(str)-len(substring); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    // Create a map to store the number words and their corresponding digits\n    numMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    // Split the input string into a slice of words\n    words := strings.Fields(numbers)\n\n    // Sort the slice of words based on the corresponding digits in the numMap\n    sort.Slice(words, func(i, j int) bool {\n        return numMap[words[i]] < numMap[words[j]]\n    })\n\n    // Join the sorted words back into a single string and return it\n    return strings.Join(words, \" \")\n}\n"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers) // Sort the numbers in ascending order\n    minDiff := math.MaxFloat64\n    closestPair := [2]float64{0, 0}\n\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [2]float64{numbers[i], numbers[i+1]}\n        }\n    }\n\n    return closestPair\n}\n"}
{"task_id": "Go/21", "generation": "\n    min := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    rangeVal := max - min\n    rescaled := make([]float64, len(numbers))\n    for i, num := range numbers {\n        rescaled[i] = (num - min) / rangeVal\n    }\n    return rescaled\n}\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/23", "generation": "\n\tcount := 0\n\tfor range str {\n\t\tcount++\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n"}
{"task_id": "Go/25", "generation": "\n    var factors []int\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    occurrences := make(map[int]int)\n    var result []int\n\n    for _, number := range numbers {\n        occurrences[number]++\n    }\n\n    for _, number := range numbers {\n        if occurrences[number] == 1 {\n            result = append(result, number)\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result string\n    for _, char := range str {\n        if strings.ToLower(string(char)) == string(char) {\n            result += strings.ToUpper(string(char))\n        } else {\n            result += strings.ToLower(string(char))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/28", "generation": "\n    var result string\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive\n}\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    var a, b, c float64\n    a = float64(xs[len(xs)-1])\n    b = float64(xs[len(xs)-2])\n    c = float64(xs[len(xs)-3])\n    var x float64\n    x = (-b + math.Sqrt(b*b-4*a*c)) / (2 * a)\n    return x\n}"}
{"task_id": "Go/33", "generation": "\n    // Create a slice to hold the elements at indices divisible by three\n    var divisibleByThree []int\n    for i, v := range l {\n        if i%3 == 0 {\n            divisibleByThree = append(divisibleByThree, v)\n        }\n    }\n\n    // Sort the slice of elements at indices divisible by three\n    sort.Ints(divisibleByThree)\n\n    // Create a new slice to hold the sorted elements\n    sorted := make([]int, len(l))\n    j := 0\n    for i := range l {\n        if i%3 == 0 {\n            // If the index is divisible by three, use the sorted element\n            sorted[i] = divisibleByThree[j]\n            j++\n        } else {\n            // Otherwise, use the original element\n            sorted[i] = l[i]\n        }\n    }\n\n    return sorted\n}\n"}
{"task_id": "Go/34", "generation": "\n    uniqueMap := make(map[int]bool)\n    var uniqueSlice []int\n\n    for _, value := range l {\n        if _, ok := uniqueMap[value]; !ok {\n            uniqueMap[value] = true\n            uniqueSlice = append(uniqueSlice, value)\n        }\n    }\n\n    sort.Ints(uniqueSlice)\n    return uniqueSlice\n}\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += countSevens(i)\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// Extract even-indexed elements\n\tevenIndexedElements := make([]int, 0)\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tevenIndexedElements = append(evenIndexedElements, v)\n\t\t}\n\t}\n\n\t// Sort the extracted elements\n\tsort.Ints(evenIndexedElements)\n\n\t// Create a new slice to store the result\n\tresult := make([]int, len(l))\n\tevenIndex := 0\n\tfor i := range l {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = evenIndexedElements[evenIndex]\n\t\t\tevenIndex++\n\t\t} else {\n\t\t\tresult[i] = l[i]\n\t\t}\n\t}\n\n\treturn result\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tcount := 0\n\ti := 2\n\tfor {\n\t\tif isPrime(i) && isFibonacci(i) {\n\t\t\tcount++\n\t\t\tif count == n {\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n}\n"}
{"task_id": "Go/40", "generation": "\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/41", "generation": "\n    return n * n\n}"}
{"task_id": "Go/42", "generation": "\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n"}
{"task_id": "Go/43", "generation": "\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}"}
{"task_id": "Go/44", "generation": "\n    if base < 2 || base > 9 {\n        return \"Invalid base\"\n    }\n    result := \"\"\n    for x > 0 {\n        remainder := x % base\n        result = strconv.Itoa(remainder) + result\n        x = x / base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn (a * h) / 2\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 || n == 1 || n == 3 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 1 {\n\t\treturn float64(l[n/2])\n\t}\n\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n}"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    half := Modp(n/2, p)\n    if n%2 == 0 {\n        return (half * half) % p\n    } else {\n        return (half * half * 2) % p\n    }\n}\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _, v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n    charMap := make(map[rune]int)\n    for _, char := range s0 {\n        charMap[char]++\n    }\n    for _, char := range s1 {\n        if charMap[char] == 0 {\n            return false\n        }\n        charMap[char]--\n    }\n    for _, count := range charMap {\n        if count != 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n    stack := []rune{}\n    for _, char := range brackets {\n        if char == '<' {\n            stack = append(stack, char)\n        } else if char == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}"}
{"task_id": "Go/57", "generation": "\n    increasing := true\n    decreasing := true\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        } else if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    var result []int\n\n    for _, value := range l1 {\n        m[value] = true\n    }\n\n    for _, value := range l2 {\n        if _, ok := m[value]; ok {\n            result = append(result, value)\n            delete(m, value) // To ensure unique elements\n        }\n    }\n\n    sort.Ints(result) // Sorting the result slice\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    var largest int = 2\n    for n%2 == 0 {\n        n = n / 2\n    }\n    for i := 3; i <= int(math.Sqrt(float64(n))); i += 2 {\n        for n%i == 0 {\n            largest = i\n            n = n / i\n        }\n    }\n    if n > 2 {\n        largest = n\n    }\n    return largest\n}"}
{"task_id": "Go/60", "generation": "\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n"}
{"task_id": "Go/61", "generation": "\n    balance := 0\n    for _, char := range brackets {\n        if char == '(' {\n            balance++\n        } else if char == ')' {\n            balance--\n        }\n        if balance < 0 {\n            return false\n        }\n    }\n    return balance == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}"}
{"task_id": "Go/63", "generation": "\n    if n == 0 || n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n    return c\n}"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    s = strings.ToLower(s)\n\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n\n    if strings.HasSuffix(s, \"y\") {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    s := strconv.Itoa(x)\n    n := len(s)\n    if shift >= n {\n        return s\n    }\n    return s[n-shift:] + s[:n-shift]\n}"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, v := range x {\n        if v >= 'A' && v <= 'Z' {\n            sum += int(v)\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/67", "generation": "\n\t// split the string into two parts\n\tparts := strings.Fields(s)\n\t// convert the first and second parts to integers\n\tapples, _ := strconv.Atoi(parts[0])\n\toranges, _ := strconv.Atoi(parts[3])\n\t// return the difference between the total number of fruits and the number of apples and oranges\n\treturn n - apples - oranges\n}"}
{"task_id": "Go/68", "generation": "\n    smallest := math.MaxInt32\n    smallestIndex := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < smallest {\n            smallest = v\n            smallestIndex = i\n        }\n    }\n    if smallestIndex == -1 {\n        return []int{}\n    }\n    return []int{smallest, smallestIndex}\n}"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n    max := -1\n    for num, count := range freq {\n        if num <= count && num > max {\n            max = num\n        }\n    }\n    return max\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    result := make([]int, 0)\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            result = append(result, lst[i])\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if i%2 != 0 {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}"}
{"task_id": "Go/71", "generation": "\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-1-i] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/73", "generation": "\n    changes := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-1-i] {\n            changes++\n        }\n    }\n    return changes\n}"}
{"task_id": "Go/74", "generation": "\n    var sum1 int\n    var sum2 int\n    for _,v := range lst1 {\n        sum1 += len(v)\n    }\n    for _,v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    }\n    return lst2\n}"}
{"task_id": "Go/75", "generation": "\n    if a < 2 {\n        return false\n    }\n    primeFactors := make([]int, 0)\n    for i := 2; i*i <= a; i++ {\n        for a%i == 0 {\n            primeFactors = append(primeFactors, i)\n            a /= i\n        }\n    }\n    if a > 1 {\n        primeFactors = append(primeFactors, a)\n    }\n    return len(primeFactors) == 3\n}"}
{"task_id": "Go/76", "generation": "\n    if n==1{\n        if x==1{\n            return true\n        }else{\n            return false\n        }\n    }\n    for i:=2;i<=x;i++{\n        if i==n{\n            continue\n        }\n        if x%i==0{\n            return false\n        }\n    }\n    return true\n}\n//func IsSimplePower(x int,n int) bool {"}
{"task_id": "Go/77", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    cubeRoot := math.Cbrt(float64(a))\n    return cubeRoot == float64(int(cubeRoot))\n}"}
{"task_id": "Go/78", "generation": "\n\tcount := 0\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/81", "generation": "\n    var letterGrades []string\n    for _, grade := range grades {\n        switch {\n        case grade == 4.0:\n            letterGrades = append(letterGrades, \"A+\")\n        case grade > 3.7:\n            letterGrades = append(letterGrades, \"A\")\n        case grade > 3.3:\n            letterGrades = append(letterGrades, \"A-\")\n        case grade > 3.0:\n            letterGrades = append(letterGrades, \"B+\")\n        case grade > 2.7:\n            letterGrades = append(letterGrades, \"B\")\n        case grade > 2.3:\n            letterGrades = append(letterGrades, \"B-\")\n        case grade > 2.0:\n            letterGrades = append(letterGrades, \"C+\")\n        case grade > 1.7:\n            letterGrades = append(letterGrades, \"C\")\n        case grade > 1.3:\n            letterGrades = append(letterGrades, \"C-\")\n        case grade > 1.0:\n            letterGrades = append(letterGrades, \"D+\")\n        case grade > 0.7:\n            letterGrades = append(letterGrades, \"D\")\n        case grade > 0.0:\n            letterGrades = append(letterGrades, \"D-\")\n        default:\n            letterGrades = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}"}
{"task_id": "Go/82", "generation": "\n\tlength := len(s)\n\tif length < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= length; i++ {\n\t\tif length%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1)))*2 - int(math.Pow(10, float64(n-2)))\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 != 0 && v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = sortWord(word)\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc sortWord(word string) string {\n    chars := []rune(word)\n    sort.Slice(chars, func(i, j int) bool {\n        return chars[i] < chars[j]\n    })\n    return string(chars)\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n    \n    sortedArray := make([]int, len(array))\n    copy(sortedArray, array)\n    \n    if (sortedArray[0] + sortedArray[len(sortedArray)-1]) % 2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(sortedArray)))\n    } else {\n        sort.Ints(sortedArray)\n    }\n    \n    return sortedArray\n}"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            shift := (char - 'a' + 2) % 26\n            result += string('a' + shift)\n        } else if char >= 'A' && char <= 'Z' {\n            shift := (char - 'A' + 2) % 26\n            result += string('A' + shift)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    return lst[1]\n}\n"}
{"task_id": "Go/91", "generation": "\n    // Split the string into sentences\n    sentences := regexp.MustCompile(`[.?!]`).Split(S, -1)\n    \n    // Initialize the boredom count\n    boredomCount := 0\n    \n    // Iterate over the sentences\n    for _, sentence := range sentences {\n        // Trim leading and trailing whitespace\n        trimmedSentence := strings.TrimSpace(sentence)\n        \n        // Check if the sentence starts with \"I\"\n        if strings.HasPrefix(trimmedSentence, \"I\") {\n            // Increment the boredom count\n            boredomCount++\n        }\n    }\n    \n    // Return the boredom count\n    return boredomCount\n}\n"}
{"task_id": "Go/92", "generation": "\n\t// Check if all inputs are integers\n\tif _, ok := x.(int); !ok {\n\t\treturn false\n\t}\n\tif _, ok := y.(int); !ok {\n\t\treturn false\n\t}\n\tif _, ok := z.(int); !ok {\n\t\treturn false\n\t}\n\n\t// Check if any number is equal to the sum of the other two\n\tif x.(int)+y.(int) == z.(int) || x.(int)+z.(int) == y.(int) || y.(int)+z.(int) == x.(int) {\n\t\treturn true\n\t}\n\n\treturn false\n}\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encodedMessage := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            index := strings.IndexRune(vowels, char)\n            if index+2 < len(vowels) {\n                encodedMessage += string(vowels[index+2])\n            } else {\n                encodedMessage += string(vowels[index+2-len(vowels)])\n            }\n        } else {\n            encodedMessage += string(char)\n        }\n    }\n    encodedMessage = strings.ToUpper(encodedMessage)\n    return encodedMessage\n}\n"}
{"task_id": "Go/94", "generation": "\n    maxPrime := 0\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(num))); i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    for _, digit := range strconv.Itoa(num) {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    if len(dict) == 0 {\n        return false\n    }\n\n    allLower := true\n    allUpper := true\n\n    for key := range dict {\n        strKey, ok := key.(string)\n        if !ok {\n            return false\n        }\n\n        if allLower && strKey != strings.ToLower(strKey) {\n            allLower = false\n        }\n\n        if allUpper && strKey != strings.ToUpper(strKey) {\n            allUpper = false\n        }\n    }\n\n    return allLower || allUpper\n}\n"}
{"task_id": "Go/96", "generation": "\n    var primes []int\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a % 10))) * int(math.Abs(float64(b % 10)))\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    vowels := \"AEIOU\"\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    // Convert the string to a float64\n    num, err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n    }\n\n    // Check if the number is negative\n    isNegative := num < 0\n\n    // Get the absolute value of the number\n    absNum := math.Abs(num)\n\n    // Get the fractional part of the number\n    fractionalPart := absNum - math.Floor(absNum)\n\n    // Check if the fractional part is exactly 0.5\n    if fractionalPart == 0.5 {\n        // If the number is negative, round away from zero\n        if isNegative {\n            return int(math.Ceil(absNum))\n        }\n        // If the number is positive, round away from zero\n        return int(math.Floor(absNum))\n    }\n\n    // If the fractional part is not 0.5, use the built-in rounding function\n    return int(math.Round(absNum))\n}\n"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, n+2*i)\n    }\n    return result\n}"}
{"task_id": "Go/101", "generation": "\n    // Replace commas with spaces\n    s = strings.Replace(s, \",\", \" \", -1)\n    // Split string into words\n    words := strings.Fields(s)\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n    if x > y {\n        return -1\n    }\n    return y\n}"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := math.Round(float64(sum) / float64(m-n+1))\n    return fmt.Sprintf(\"0b%b\", int(avg))\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/105", "generation": "\n    // sort the array\n    sort.Ints(arr)\n    // reverse the array\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    // create a map to store the number to word conversion\n    numToWord := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    // create a slice to store the result\n    result := make([]string, 0)\n    // iterate over the array and convert the numbers to words\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            result = append(result, numToWord[num])\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result[i-1] = factorial(i)\n        } else {\n            result[i-1] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n"}
{"task_id": "Go/107", "generation": "\n    var even, odd int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n\nfunc isPalindrome(n int) bool {\n    s := strconv.Itoa(n)\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumOfDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    \n    min := math.MaxInt32\n    for _, v := range arr {\n        if v < min {\n            min = v\n        }\n    }\n    \n    minIndex := sort.SearchInts(arr, min)\n    \n    for i := 0; i < len(arr); i++ {\n        if arr[(minIndex+i)%len(arr)] != arr[i] {\n            return false\n        }\n    }\n    \n    return true\n}\n"}
{"task_id": "Go/110", "generation": "\n    oddCount := 0\n    evenCount := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCount++\n        } else {\n            evenCount++\n        }\n    }\n    for _, num := range lst2 {\n        if num%2 != 0 {\n            oddCount--\n        } else {\n            evenCount++\n        }\n    }\n    if oddCount == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}"}
{"task_id": "Go/111", "generation": "\n    histogram := make(map[rune]int)\n    maxCount := 0\n    for _, char := range test {\n        if char != ' ' {\n            histogram[char]++\n            if histogram[char] > maxCount {\n                maxCount = histogram[char]\n            }\n        }\n    }\n    for key, value := range histogram {\n        if value != maxCount {\n            delete(histogram, key)\n        }\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c, char) {\n            result += string(char)\n        }\n    }\n    reverse := \"\"\n    for i := len(result) - 1; i >= 0; i-- {\n        reverse += string(result[i])\n    }\n    isPalindrome := result == reverse\n    return [2]interface{}{result, isPalindrome}\n}\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, char := range str {\n            if (char-'0')%2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%dnng %d of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for _, num := range nums {\n        currentSum += num\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    var max int\n    for _, row := range grid {\n        for _, cell := range row {\n            max += int(math.Ceil(float64(cell) / float64(capacity)))\n        }\n    }\n    return max\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i+1])) && !strings.ContainsRune(vowels, rune(word[i-1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n    var stack []rune\n    for _, str := range lst {\n        for _, char := range str {\n            if char == '(' {\n                stack = append(stack, char)\n            } else {\n                if len(stack) == 0 {\n                    return \"No\"\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}"}
{"task_id": "Go/120", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] > arr[j]\n    })\n    return arr[:k]\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 == 0 && v%2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var result []int\n    for n != 1 {\n        if n % 2 != 0 {\n            result = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/124", "generation": "\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    month, _ := strconv.Atoi(date[:2])\n    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:])\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Fields(txt)\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, char := range txt {\n            if (char-'a')%2 == 1 {\n                count++\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/127", "generation": "\n    // calculate the intersection\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    // check if the intersection is empty\n    if start > end {\n        return \"NO\"\n    }\n    // calculate the length of the intersection\n    length := end - start + 1\n    // check if the length is a prime number\n    if isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    sum := 0\n    product := 1\n    for _, num := range arr {\n        if num == 0 {\n            return 0\n        }\n        sum += int(math.Abs(float64(num)))\n        if num < 0 {\n            product *= -1\n        }\n    }\n    return sum * product\n}"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    if n == 1 {\n        return []int{grid[0][0]}\n    }\n    \n    // find the position of the smallest number\n    min := grid[0][0]\n    pos := [2]int{0, 0}\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] < min {\n                min = grid[i][j]\n                pos = [2]int{i, j}\n            }\n        }\n    }\n    \n    // find the minimum path\n    path := make([]int, k)\n    path[0] = min\n    for i := 1; i < k; i++ {\n        // find the neighbor with the smallest value\n        neighbors := make([][2]int, 0)\n        if pos[0] > 0 {\n            neighbors = append(neighbors, [2]int{pos[0] - 1, pos[1]})\n        }\n        if pos[0] < n - 1 {\n            neighbors = append(neighbors, [2]int{pos[0] + 1, pos[1]})\n        }\n        if pos[1] > 0 {\n            neighbors = append(neighbors, [2]int{pos[0], pos[1] - 1})\n        }\n        if pos[1] < n - 1 {\n            neighbors = append(neighbors, [2]int{pos[0], pos[1] + 1})\n        }\n        minNeighbor := grid[neighbors[0][0]][neighbors[0][1]]\n        for _, neighbor := range neighbors {\n            if grid[neighbor[0]][neighbor[1]] < minNeighbor {\n                minNeighbor = grid[neighbor[0]][neighbor[1]]\n                pos = neighbor\n            }\n        }\n        path[i] = minNeighbor\n    }\n    \n    return path\n}"}
{"task_id": "Go/130", "generation": "\n\tif n == 0 {\n\t\treturn []float64{1}\n\t}\n\tif n == 1 {\n\t\treturn []float64{1, 3}\n\t}\n\tif n == 2 {\n\t\treturn []float64{1, 3, 2}\n\t}\n\tif n == 3 {\n\t\treturn []float64{1, 3, 2, 8}\n\t}\n\tres := make([]float64, n+1)\n\tres[0], res[1], res[2], res[3] = 1, 3, 2, 8\n\tfor i := 4; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tres[i] = 1 + float64(i)/2\n\t\t} else {\n\t\t\tres[i] = res[i-1] + res[i-2] + res[i+1]\n\t\t}\n\t}\n\treturn res\n}"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    hasOdd := false\n\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n            hasOdd = true\n        }\n        n /= 10\n    }\n\n    if !hasOdd {\n        return 0\n    }\n\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, char := range s {\n        if char == '[' {\n            stack = append(stack, char)\n        } else if char == ']' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) > 0\n}\n\nfunc IsValidSubsequence(s string) bool {\n    stack := []rune{}\n    for _, char := range s {\n        if char == '[' {\n            stack = append(stack, char)\n        } else if char == ']' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc IsNestedValidSubsequence(s string) bool {\n    return IsNested(s) && IsValidSubsequence(s)\n}\n\nfunc IsNestedValidSubsequenceBrackets(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[[]]\")\n}\n\nfunc IsNestedValidSubsequenceBrackets2(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[][]\")\n}\n\nfunc IsNestedValidSubsequenceBrackets3(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[]\")\n}\n\nfunc IsNestedValidSubsequenceBrackets4(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[[[][]]]\")\n}\n\nfunc IsNestedValidSubsequenceBrackets5(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[[]][[\")\n}\n\nfunc IsNestedValidSubsequenceBrackets6(s string) bool {\n    return IsNestedValidSubsequence(s) && strings.Contains(s, \"[[]][[[\")\n}\n\nfunc IsNestedValid"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, v := range lst {\n        sum += int(math.Pow(math.Ceil(v), 2))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    \n    lastChar := strings.TrimSpace(string(txt[len(txt)-1]))\n    \n    if len(lastChar) == 0 {\n        return false\n    }\n    \n    if strings.ContainsAny(lastChar, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n        return true\n    }\n    \n    return false\n}"}
{"task_id": "Go/135", "generation": "\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var neg []int\n    var pos []int\n    for _, v := range lst {\n        if v < 0 {\n            neg = append(neg, v)\n        } else if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    var a interface{}\n    var b interface{}\n    if len(neg) > 0 {\n        a = max(neg)\n    } else {\n        a = nil\n    }\n    if len(pos) > 0 {\n        b = min(pos)\n    } else {\n        b = nil\n    }\n    return [2]interface{}{a, b}\n}\n\nfunc max(lst []int) int {\n    max := lst[0]\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc min(lst []int) int {\n    min := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}\n"}
{"task_id": "Go/137", "generation": "\n    switch a.(type) {\n    case int, float64:\n        switch b.(type) {\n        case int, float64:\n            if a.(float64) == b.(float64) {\n                return nil\n            }\n            if a.(float64) < b.(float64) {\n                return b\n            }\n            return a\n        case string:\n            num, err := strconv.ParseFloat(strings.Replace(b.(string), \",\", \".\", -1), 64)\n            if err != nil {\n                return nil\n            }\n            if a.(float64) < num {\n                return b\n            }\n            return a\n        }\n    case string:\n        switch b.(type) {\n        case int, float64:\n            num, err := strconv.ParseFloat(strings.Replace(a.(string), \",\", \".\", -1), 64)\n            if err != nil {\n                return nil\n            }\n            if num < b.(float64) {\n                return a\n            }\n            return b\n        case string:\n            numA, errA := strconv.ParseFloat(strings.Replace(a.(string), \",\", \".\", -1), 64)\n            if errA != nil {\n                return nil\n            }\n            numB, errB := strconv.ParseFloat(strings.Replace(b.(string), \",\", \".\", -1), 64)\n            if errB != nil {\n                return nil\n            }\n            if numA == numB {\n                return nil\n            }\n            if numA < numB {\n                return b\n            }\n            return a\n        }\n    }\n    return nil\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n < 8 {\n        return false\n    }\n    if n%2 == 0 {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/139", "generation": "\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n"}
{"task_id": "Go/140", "generation": "\n    var result string\n    var spaceCount int\n    for _, char := range text {\n        if char == ' ' {\n            spaceCount++\n        } else {\n            if spaceCount > 2 {\n                result += \"-\"\n            } else {\n                result += strings.Repeat(\"_\", spaceCount)\n            }\n            spaceCount = 0\n            result += string(char)\n        }\n    }\n    if spaceCount > 2 {\n        result += \"-\"\n    } else {\n        result += strings.Repeat(\"_\", spaceCount)\n    }\n    return result\n}\n"}
{"task_id": "Go/141", "generation": "\n    // Check if the file name contains more than three digits\n    digitCount := 0\n    for _, char := range file_name {\n        if char >= '0' && char <= '9' {\n            digitCount++\n        }\n    }\n    if digitCount > 3 {\n        return \"No\"\n    }\n\n    // Check if the file name contains exactly one dot\n    dotCount := strings.Count(file_name, \".\")\n    if dotCount != 1 {\n        return \"No\"\n    }\n\n    // Split the file name into two parts: before and after the dot\n    parts := strings.Split(file_name, \".\")\n    beforeDot := parts[0]\n    afterDot := parts[1]\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    if len(beforeDot) == 0 || (beforeDot[0] < 'a' || beforeDot[0] > 'z') && (beforeDot[0] < 'A' || beforeDot[0] > 'Z') {\n        return \"No\"\n    }\n\n    // Check if the substring after the dot is one of the valid extensions\n    validExtensions := []string{\"txt\", \"exe\", \"dll\"}\n    isValidExtension := false\n    for _, extension := range validExtensions {\n        if afterDot == extension {\n            isValidExtension = true\n            break\n        }\n    }\n    if !isValidExtension {\n        return \"No\"\n    }\n\n    // If all checks pass, the file name is valid\n    return \"Yes\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i % 3 == 0 {\n            sum += int(math.Pow(float64(num), 3))\n        } else if i % 4 == 0 {\n            sum += int(math.Pow(float64(num), 2))\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var result []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    // Split the numerator and denominator of x and n\n    xNumerator, xDenominator := splitFraction(x)\n    nNumerator, nDenominator := splitFraction(n)\n\n    // Multiply the numerators and denominators\n    numeratorProduct := xNumerator * nNumerator\n    denominatorProduct := xDenominator * nDenominator\n\n    // Check if the product of the numerators is divisible by the product of the denominators\n    return numeratorProduct%denominatorProduct == 0\n}\n"}
{"task_id": "Go/145", "generation": "\n    sort.SliceStable(nums, func(i, j int) bool {\n        return sumDigits(nums[i]) < sumDigits(nums[j])\n    })\n    return nums\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    if n < 0 {\n        n = -n\n    }\n    for _, c := range strconv.Itoa(n) {\n        digit, _ := strconv.Atoi(string(c))\n        sum += digit\n    }\n    return sum\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            strNum := strconv.Itoa(num)\n            firstDigit, _ := strconv.Atoi(string(strNum[0]))\n            lastDigit, _ := strconv.Atoi(string(strNum[len(strNum)-1]))\n            if firstDigit%2 != 0 && lastDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tplanetMap := make(map[string]int)\n\tfor i, planet := range planets {\n\t\tplanetMap[planet] = i\n\t}\n\n\tif _, ok := planetMap[planet1]; !ok {\n\t\treturn []string{}\n\t}\n\tif _, ok := planetMap[planet2]; !ok {\n\t\treturn []string{}\n\t}\n\n\tstart, end := planetMap[planet1], planetMap[planet2]\n\tif start > end {\n\t\tstart, end = end, start\n\t}\n\n\tvar result []string\n\tfor i := start + 1; i < end; i++ {\n\t\tresult = append(result, planets[i])\n\t}\n\n\treturn result\n}\n"}
{"task_id": "Go/149", "generation": "\n    // Remove strings with odd lengths\n    evenLengthStrings := make([]string, 0)\n    for _, str := range lst {\n        if len(str)%2 == 0 {\n            evenLengthStrings = append(evenLengthStrings, str)\n        }\n    }\n\n    // Sort the list by length, then alphabetically\n    sort.Slice(evenLengthStrings, func(i, j int) bool {\n        if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n            return evenLengthStrings[i] < evenLengthStrings[j]\n        }\n        return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n    })\n\n    return evenLengthStrings\n}\n"}
{"task_id": "Go/150", "generation": "\n    if n < 2 {\n        return y\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && math.Mod(num, 2) != 0 {\n            sum += int(math.Pow(num, 2))\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        result = append(result, int(math.Abs(float64(game[i] - guess[i]))))\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.Inf(-1)\n    strongest_extension := \"\"\n    for _, extension := range extensions {\n        upper_count := 0\n        lower_count := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                upper_count++\n            } else if char >= 'a' && char <= 'z' {\n                lower_count++\n            }\n        }\n        strength := float64(upper_count - lower_count)\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}"}
{"task_id": "Go/154", "generation": "\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:]+b[:i]) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    numStr := strconv.Itoa(num)\n    for _, char := range numStr {\n        digit, _ := strconv.Atoi(string(char))\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    var roman_numerals = map[int]string{\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    var roman_string string\n    for key, value := range roman_numerals {\n        for number >= key {\n            roman_string += value\n            number -= key\n        }\n    }\n    return strings.ToLower(roman_string)\n}\n"}
{"task_id": "Go/157", "generation": "\n    // Sort the sides\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n\n    // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]*sides[2] == sides[0]*sides[0]+sides[1]*sides[1]\n}\n"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > maxUnique {\n            maxUnique = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n"}
{"task_id": "Go/159", "generation": "\n    if need <= remaining {\n        return []int{number + need, remaining - need}\n    } else {\n        return []int{number + remaining, 0}\n    }\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n            result = int(math.Floor(float64(result) / float64(operand[i+1])))\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n    var res string\n    var hasLetter bool\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            res += string(c - 32)\n            hasLetter = true\n        } else if c >= 'A' && c <= 'Z' {\n            res += string(c + 32)\n            hasLetter = true\n        } else {\n            res += string(c)\n        }\n    }\n    if !hasLetter {\n        res = reverse(res)\n    }\n    return res\n}\n\nfunc reverse(s string) string {\n    var res string\n    for i := len(s) - 1; i >= 0; i-- {\n        res += string(s[i])\n    }\n    return res\n}\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n"}
