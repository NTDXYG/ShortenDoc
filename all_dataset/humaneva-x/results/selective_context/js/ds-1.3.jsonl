{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  let temp = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(temp);\n      temp = '';\n    } else if (paren_string[i] === ')') {\n      temp += ')';\n      if (stack.length === 0) {\n        result.push(temp);\n        temp = '';\n      } else {\n        stack[stack.length - 1] += temp;\n        temp = '';\n      }\n    } else {\n      temp += paren_string[i];\n    }\n  }\n\n  if (temp !== '') {\n    stack.push(temp);\n  }\n\n  return stack;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number % 1;\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = meanOf(numbers);\n  return meanOf(numbers.map(num => Math.abs(num - mean)));\n}\n\nconst meanOf = (numbers) => {\n  return numbers.reduce((a, b) => a + b, 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxLevel = 0;\n  let currentLevel = 0;\n  let maxCurrentLevel = 0;\n  let maxCurrentString = '';\n  let currentString = '';\n  let inNested = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentLevel++;\n      if (currentLevel > maxCurrentLevel) {\n        maxCurrentLevel = currentLevel;\n        maxCurrentString = currentString;\n      }\n      currentString += '(';\n    } else if (paren_string[i] === ')') {\n      currentLevel--;\n      currentString = currentString.slice(0, -1);\n    }\n\n    if (paren_string[i] === '[') {\n      inNested = true;\n      currentString += '[';\n    } else if (paren_string[i] === ']') {\n      inNested = false;\n      currentString = currentString.slice(0, -1);\n    }\n\n    if (inNested && paren_string[i] === ' ') {\n      currentString += ' ';\n    }\n  }\n\n  maxLevel = maxCurrentLevel;\n\n  return {\n    maxLevel: maxLevel,\n    maxCurrentString: maxCurrentString\n  };\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  const result = [max];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reverseString = string.split('').reverse().join('');\n  return string + reverseString;\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for(let i = 0; i < a.length; i++) {\n    if(a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = n; i <= n + 50; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  let distinctChars = new Set(string);\n  return distinctChars.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n\n  notes.forEach((note) => {\n    switch (note) {\n      case 'o':\n        beats.push(4);\n        break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case '.|':\n        beats.push(1);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return beats;\n};"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = numbers.split(' ');\n  const numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  nums.sort((a, b) => numDict[a] - numDict[b]);\n\n  return nums.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  if (numbers.length < 2) {\n    throw new Error('List must have at least two elements');\n  }\n\n  numbers.sort((a, b) => a - b);\n\n  let minDiff = Infinity;\n  let result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i + 1]);\n\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((num) => ((num - min) / range));\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => {\n    if (typeof value === 'number' && value > 0 && value === Math.floor(value)) {\n      return value;\n    }\n  });\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for(let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.toLowerCase().replace(/[a-z]/g, function(match) {\n    return match === match.toLowerCase() ? match.toUpperCase() : match.toLowerCase();\n  });\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter(num => num > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length - 1;\n  return n % 2 === 0 ? (n / 2) * (xs[1] / (xs[0] * (n % 2 === 0 ? 1 : -1))) : (n / 2) * (xs[n - 1] / (xs[n - 1] * (n % 2 === 0 ? 1 : -1)));\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const thirds = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n  return l.map((v, i) => (i % 3 === 0 ? thirds.shift() : v)).reverse();\n};"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)];\n};"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n}"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().split('7').length - 1);\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/37", "generation": "\n  let evenIndices = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  let result = l.map((v, i) => (i % 2 === 0 ? evenIndices.shift() : v));\n  return result;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    decoded += s[i + 1] + s[i + 2] + s[i];\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/39", "generation": "\n  let count = 0;\n  let i = 1;\n  let fib = [0, 1];\n  while (count < n) {\n    i++;\n    fib.push(fib[i - 1] + fib[i - 2]);\n    if (fib[i] % 2 !== 0 && isPrime(fib[i])) {\n      count++;\n    }\n  }\n  return fib[i];\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  // The function should return the number of collisions\n  // The cars are moving in a straight line, so they will collide with each other\n  // The cars are infinitely sturdy, so they will collide with each other an infinite number of times\n  // The cars are moving at the same speed, so they will collide with each other an infinite number of times\n  return n;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(num => num + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  let map = new Map();\n  for(let num of l) {\n    if(map.has(num)) {\n      return true;\n    }\n    map.set(-num, num);\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyz';\n  if (x < base) return String(x);\n  return changeBase(Math.floor(x / base), base) + chars[x % base];\n};"}
{"task_id": "JavaScript/45", "generation": "\n    return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 0;\n  if (n === 3) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n\n  for (let i = 4; i <= n; i++) {\n    let temp = d;\n    d = a + b + c + d;\n    a = b;\n    b = c;\n    c = temp;\n  }\n\n  return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n    const reversedText = text.split('').reverse().join('');\n    return text === reversedText;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  return (Math.pow(2, n) % p);\n}\n\nconst mod1101 = (n, p) => {\n  return (parseInt(`1101`.slice(n), 2) % p);\n}\n\nconst mod8100 = (n, p) => {\n  return (parseInt(`8100`.slice(n), 2) % p);\n}"}
{"task_id": "JavaScript/50", "generation": "\n  let decodedString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      let ascii = s[i].charCodeAt(0);\n      if (ascii >= 65 && ascii <= 90) {\n        decodedString += String.fromCharCode((ascii - 65 + 26) % 26 + 65);\n      } else if (ascii >= 97 && ascii <= 122) {\n        decodedString += String.fromCharCode((ascii - 97 + 26) % 26 + 97);\n      }\n    } else {\n      decodedString += s[i];\n    }\n  }\n  return decodedString;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for(let i = 0; i < l.length; i++) {\n    if(l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/53", "generation": "\n  if (y === 0) {\n    return x;\n  }\n  return add(x + 1, y - 1) + 1;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const map = new Map();\n  for (let c of s0) {\n    map.set(c, (map.get(c) || 0) + 1);\n  }\n  for (let c of s1) {\n    if (!map.get(c)) {\n      return false;\n    } else {\n      map.set(c, map.get(c) - 1);\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/55", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0 || stack[stack.length - 1] !== \"<\") {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) {\n    return true;\n  }\n  let increase = l[1] > l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (increase && l[i] < l[i - 1]) {\n      return false;\n    } else if (!increase && l[i] > l[i - 1]) {\n      return false;\n    }\n    increase = l[i] > l[i - 1];\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const map = new Map();\n  const result = [];\n\n  for (let i = 0; i < l1.length; i++) {\n    if (!map.has(l1[i])) map.set(l1[i], 1);\n  }\n\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i]) && !result.includes(l2[i])) {\n      result.push(l2[i]);\n    }\n  }\n\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) maxPrime = n;\n  return maxPrime;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 1;\n\n  for (let i = 3; i <= n; i++) {\n    let temp = a;\n    a = b;\n    b = c;\n    c = d;\n    d = temp + b + c;\n  }\n\n  return d;\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const str = String(x);\n  const length = str.length;\n  const last = str[length - 1];\n  const first = str[0];\n  const middle = str.slice(1, length - 1);\n  const shifted = last + middle + first;\n  return shifted.slice(shifted.length - shift);\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && isNaN(s[i])) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.match(/\\d+/g).map(Number)\n  return n - apples - oranges\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) {\n    return [];\n  }\n\n  let smallestEvenValue = Infinity;\n  let smallestIndex = Infinity;\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEvenValue && arr[i] % 2 === 0) {\n      smallestEvenValue = arr[i];\n      smallestIndex = i;\n    }\n  }\n\n  if (smallestEvenValue === Infinity) {\n    return [];\n  }\n\n  result.push(smallestEvenValue, smallestIndex);\n  return result;\n};"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n\n  for (let i = lst.length; i >= 0; i--) {\n    if (freq[i] > i) {\n      return i;\n    }\n  }\n\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  lst.sort((a, b) => a - b);\n  let result = [];\n  while (lst.length) {\n    result.push(lst.shift());\n    if (lst.length) {\n      result.push(lst.pop());\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const isPalindrome = (arr) => arr.join('') === arr.slice().reverse().join('');\n  const sum = arr => arr.reduce((a, b) => a + b, 0);\n  return isPalindrome(q) && sum(q) <= w;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const sum1 = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const sum2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return sum1 < sum2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  if (a < 100) {\n    return false;\n  }\n  let primes = [2, 3, 5];\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 1) return false;\n  for (let i = 2; i <= n; i++) {\n    if (Math.pow(i, n) === x) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.cbrt(a);\n    return cubeRoot === Math.round(cubeRoot);\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15,\n    'G': 16,\n    'H': 17,\n  };\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hex[num[i]] && hex[num[i]] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  let padding = \"db\";\n  return padding + binary + padding;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length % 3 !== 0) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i += 3) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    let letterGrades = [];\n    for(let i = 0; i < grades.length; i++) {\n        if(grades[i] === 4.0) {\n            letterGrades.push('A+');\n        } else if(grades[i] === 3.0) {\n            letterGrades.push('A');\n        } else if(grades[i] === 2.0) {\n            letterGrades.push('A-');\n        } else if(grades[i] === 1.0) {\n            letterGrades.push('B+');\n        } else if(grades[i] === 0.7) {\n            letterGrades.push('B');\n        } else if(grades[i] === 0.3) {\n            letterGrades.push('C');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n    const length = string.length;\n    if (length < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++)\n        if (length % i === 0) return false;\n    return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 10;\n  if (n === 2) return 90;\n  if (n === 3) return 720;\n  if (n === 4) return 5040;\n  if (n === 5) return 30240;\n  if (n === 6) return 168960;\n  if (n === 7) return 946112;\n  if (n === 8) return 4608000;\n  if (n === 9) return 21556480;\n  if (n === 10) return 103952160;\n  return 0;\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const orderedWords = words.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\n  return orderedWords.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for(let i = 0; i < lst.length; i++) {\n    for(let j = 0; j < lst[i].length; j++) {\n      if(lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n}"}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) return array;\n\n  const sum = array[0] + array[array.length - 1];\n\n  if (sum % 2 !== 0) {\n    return array.sort((a, b) => a - b);\n  }\n\n  return array.sort((a, b) => a % 2 - b % 2 || a - b);\n};"}
{"task_id": "JavaScript/89", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      let code = s.charCodeAt(i) + (s[i].match(/[a-z]/i)[0].toLowerCase() === s[i] ? 2 : -2);\n      result += String.fromCharCode(code);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  for (let i = 0; i < lst.length - 2; i++) {\n    if (lst[i] < lst[i + 1] && lst[i + 1] < lst[i + 2]) {\n      return [lst[i], lst[i + 1]];\n    }\n  }\n  return null;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].trim().startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n    return false;\n  }\n  if (x === y + z || y === x + z || z === x + y) {\n    return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i].toLowerCase())) {\n      if (i + 1 < message.length) {\n        encodedMessage += message[i + 1].toUpperCase();\n      }\n      i++;\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let maxPrime = -1;\n  let sumOfDigits = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  if (maxPrime != -1) {\n    while (maxPrime != 0) {\n      sumOfDigits += maxPrime % 10;\n      maxPrime = Math.floor(maxPrime / 10);\n    }\n  }\n  return sumOfDigits;\n}\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  for (let key in dict) {\n    if (key !== key.toLowerCase() && key !== key.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (num) => {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  const aDigits = a.toString().split('').map(Number);\n  const bDigits = b.toString().split('').map(Number);\n\n  const aProduct = aDigits.reduce((acc, cur) => acc * cur, 1);\n  const bProduct = bDigits.reduce((acc, cur) => acc * cur, 1);\n\n  return aProduct * bProduct;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 2 === 0 && s[i] === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  return Math.round(num);\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(n * 2);\n    n = n % 2 === 0 ? n + 1 : n + 2;\n  }\n  return stones;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/, |,| /);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  if (y % 2 !== 0) {\n    return -1;\n  }\n  let num = y;\n  while (num > x) {\n    num -= 2;\n  }\n  return num;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n  return x.filter(num => {\n    const numString = num.toString();\n    return !numString.includes('2') && !numString.includes('3') && !numString.includes('4') && !numString.includes('5') && !numString.includes('6') && !numString.includes('7') && !numString.includes('8') && !numString.includes('9');\n  }).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const map = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(map[arr[i]]);\n    }\n  }\n  return result.reverse();\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        let str = i.toString();\n        if(str[0] % 2 === 0) even++;\n        else odd++;\n        if(str === str.split('').reverse().join('')) odd++;\n    }\n    return [even, odd];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      num = num.toString().split('').reverse().join('');\n    }\n    let sum = num.split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (arr[arr.length - 1] > arr[0]) count++;\n  return count <= 1;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let evenCount1 = lst1.filter(num => num % 2 === 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n\n  if (evenCount1 > evenCount2) {\n    return \"NO\";\n  } else if (evenCount1 === evenCount2) {\n    return \"YES\";\n  } else {\n    return \"YES\";\n  }\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const dict = {};\n  const arr = test.split(' ');\n  let max = 0;\n  const result = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (dict[arr[i]] !== undefined) {\n      dict[arr[i]] += 1;\n    } else {\n      dict[arr[i]] = 1;\n    }\n\n    if (dict[arr[i]] > max) {\n      max = dict[arr[i]];\n    }\n  }\n\n  for (let key in dict) {\n    if (dict[key] === max) {\n      result[key] = max;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== c[0]) {\n      newStr = s[i] + newStr;\n    }\n  }\n\n  let isPal = newStr === [...newStr].reverse().join('');\n  return [newStr, isPal];\n};"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map((str, index) => {\n        let oddCount = str.split('').filter(num => num % 2 !== 0).length;\n        return `the number of odd elements in string ${index + 1} of the input is ${oddCount}.`;\n    });\n}"}
{"task_id": "JavaScript/114", "generation": "\n    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n        if(sum > 0) sum = 0;\n    }\n    return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return Math.floor(count / capacity);\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2).replace(/0/g, '').length;\n    const bBinary = b.toString(2).replace(/0/g, '').length;\n    return aBinary - bBinary || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  if (s === '') return [];\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const result = [];\n\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (consonants.includes(char)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let closestVowel = '';\n  for (let i = word.length - 1; i > 0; i--) {\n    if (vowels.includes(word[i]) && vowels.includes(word[i - 1])) {\n      closestVowel = word[i];\n      break;\n    }\n  }\n  return closestVowel;\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else if (lst[0][i] === ')') {\n      close++;\n    }\n  }\n  if (open !== close) {\n    return 'No';\n  }\n  for (let i = 1; i < lst.length; i++) {\n    open = 0;\n    close = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '(') {\n        open++;\n      } else if (lst[i][j] === ')') {\n        close++;\n      }\n      if (open < close) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // return the first k elements of the sorted array\n  return arr.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let num = arr[i];\n    let str = num.toString();\n    if (str.length === 3) {\n      sum += num;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  const collatzSequence = [];\n  while (n !== 1) {\n    collatzSequence.push(n);\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  collatzSequence.push(1);\n  return collatzSequence.filter(num => num % 2 !== 0);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19|20)\\d{2}$/;\n  return regex.test(date);\n};"}
{"task_id": "JavaScript/125", "generation": "\n  const words = txt.split(' ');\n  if (words.length > 0) {\n    return words;\n  } else {\n    const lowerCase = txt.toLowerCase();\n    const oddOrder = lowerCase.split('').filter((char, index) => {\n      return (char.charCodeAt(0) - lowerCase.charCodeAt(0)) % 2 !== 0 && index % 2 !== 0;\n    }).map(char => char.charCodeAt(0) - lowerCase.charCodeAt(0));\n    return oddOrder.map(num => String.fromCharCode(num));\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  if (lst.length < 2) return true;\n  let duplicates = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (duplicates[lst[i]]) {\n      return false;\n    }\n    duplicates[lst[i]] = true;\n  }\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  // Check if the intervals intersect\n  if (interval1[1] < interval2[0] || interval2[1] < interval1[0]) {\n    return \"NO\";\n  }\n\n  // Calculate the intersection length\n  const length = Math.min(interval1[1], interval2[1]) - Math.max(interval1[0], interval2[0]);\n\n  // Check if the intersection length is a prime number\n  if (length < 2) {\n    return \"NO\";\n  }\n\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return None;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n    sum += Math.abs(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const visited = Array(n).fill(0).map(() => Array(n).fill(false));\n  const dir = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const path = [];\n\n  const dfs = (x, y, k) => {\n    if (k === 0) {\n      path.push(grid[x][y]);\n      return;\n    }\n\n    visited[x][y] = true;\n\n    for (let i = 0; i < 4; i++) {\n      const nx = x + dir[i][0], ny = y + dir[i][1];\n\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        dfs(nx, ny, k - 1);\n      }\n    }\n\n    visited[x][y] = false;\n  };\n\n  let minVal = Infinity;\n  let minPath = [];\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] < minVal) {\n        minVal = grid[i][j];\n        path.length = 0;\n        dfs(i, j, k - 1);\n\n        if (path.length === k) {\n          minPath = [...path];\n        }\n      }\n    }\n  }\n\n  return minPath;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [1, 3, 2];\n  if (n < 4) {\n    return result.slice(0, n);\n  }\n  for (let i = 3; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/133", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    let num = Math.ceil(lst[i]);\n    sum += num * num;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt.slice(-1);\n  return /[a-z]/i.test(lastChar) && !/\\s/.test(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  let maxVal = -Infinity;\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] > arr[i - 1]) {\n      maxIndex = i - 1;\n      maxVal = arr[i];\n      break;\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let largestPositive = null;\n  let smallestNegative = null;\n  let smallestPositive = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive === null || lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative === null || lst[i] > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestNegative === null || lst[i] < smallestNegative) {\n        smallestNegative = lst[i];\n      }\n    }\n  }\n\n  return (largestNegative, smallestPositive);\n}"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return b - a;\n  }\n  return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 0) return false;\n  if (n % 2 !== 0) return false;\n  if (n === 0) return true;\n\n  for (let i = 2; i <= n / 2; i += 2) {\n    if (n - i === 0) return true;\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n};"}
{"task_id": "JavaScript/140", "generation": "\n  let newText = text.replace(/\\s+/g, '_');\n  newText = newText.replace(/\\s{2,}/g, '-');\n  return newText;\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const fileNameArr = file_name.split('.');\n  const fileName = fileNameArr[0];\n  const fileExtension = fileNameArr[1];\n\n  if (fileName.length > 3) {\n    return 'No file name should not more three digits';\n  }\n\n  if (fileName.length === 0) {\n    return 'Subst before dot should not be empty';\n  }\n\n  if (!/^[a-zA-Z]/.test(fileName[0])) {\n    return 'File name should start a lat alapet letter';\n  }\n\n  if (fileExtension !== 'txt' && fileExtension !== 'exe' && fileExtension !== 'dll') {\n    return 'Invalid file extension';\n  }\n\n  return 'Yes the file name is valid';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i === 3) {\n      sum += lst[i] ** 3;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  // Split the sentence into words\n  let words = sentence.split(\" \");\n\n  // Filter out the words that are not prime length\n  let primeWords = words.filter(word => {\n    // Calculate the length of the word\n    let length = word.length;\n\n    // Check if the length is prime\n    for(let i = 2; i < length; i++)\n      if(length % i === 0) return false;\n\n    return length > 1;\n  });\n\n  // Join the prime words back into a sentence\n  return primeWords.join(\" \");\n};"}
{"task_id": "JavaScript/144", "generation": "\n  // convert the strings to fraction\n  const fractionX = new Rational(x);\n  const fractionN = new Rational(n);\n\n  // simplify the fractions\n  const simplifiedX = fractionX.simplify();\n  const simplifiedN = fractionN.simplify();\n\n  // check if the simplified fractions are equal\n  return simplifiedX.numerator === simplifiedN.numerator && simplifiedX.denominator === simplifiedN.denominator;\n}"}
{"task_id": "JavaScript/145", "generation": "\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => a + +b, 0);\n  };\n\n  return nums.sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  return nums.filter(num => {\n    const strNum = String(num);\n    return (\n      num > 10 &&\n      strNum[0] % 2 !== 0 &&\n      strNum[1] % 2 !== 0 &&\n      strNum[2] % 2 !== 0\n    );\n  });\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i);\n  }\n  return a.filter((num, index) => num % 3 === 0 && index < n - 1 && a[index + 1] % 3 === 0);\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Uranus', 'Neptune'];\n  const planetIndex1 = planets.indexOf(planet1);\n  const planetIndex2 = planets.indexOf(planet2);\n\n  if (planetIndex1 === -1 || planetIndex2 === -1) {\n    return [];\n  }\n\n  if (planetIndex1 > planetIndex2) {\n    [planetIndex1, planetIndex2] = [planetIndex2, planetIndex1];\n  }\n\n  return planets.slice(planetIndex1 + 1, planetIndex2);\n};"}
{"task_id": "JavaScript/149", "generation": "\n  // filter out words with odd length\n  const filteredList = lst.filter(word => word.length % 2 === 0);\n\n  // sort the list by length and alphabetically\n  const sortedList = filteredList.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n\n  return sortedList;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((num, i) => {\n    return Math.abs(num - guess[i])\n  })\n}"}
{"task_id": "JavaScript/153", "generation": "\n  let maxStrength = 0;\n  let strongestExtension = '';\n\n  for (let ext of extensions) {\n    let strength = calculateStrength(ext);\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = class_name + '.' + ext;\n    }\n  }\n\n  return strongestExtension;\n};\n\nconst calculateStrength = (extension) => {\n  let cap = 0;\n  let sm = 0;\n\n  for (let i = 0; i < extension.length; i++) {\n    if (extension[i] === extension[i].toUpperCase()) cap++;\n    if (extension[i] === extension[i].toLowerCase()) sm++;\n  }\n\n  return cap - sm;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  const rotations = [];\n  for (let i = 0; i < b.length; i++) {\n    rotations.push(b.slice(i) + b.slice(0, i));\n  }\n  return rotations.includes(a);\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let digits = 0;\n  let neg = false;\n\n  if (num < 0) {\n    neg = true;\n    num = num * -1;\n  }\n\n  while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    digits++;\n    num = Math.floor(num / 10);\n  }\n\n  if (neg) {\n    return (`${digits} digits, ${even} even, ${odd} odd`, `(${digits} digits, ${even} even, ${odd} odd)`);\n  } else {\n    return (`${digits} digits, ${even} even, ${odd} odd`);\n  }\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const miniRoman = [\n    {value: 1000, symbol: 'm'},\n    {value: 900, symbol: 'cm'},\n    {value: 500, symbol: 'd'},\n    {value: 400, symbol: 'cd'},\n    {value: 100, symbol: 'c'},\n    {value: 90, symbol: 'xc'},\n    {value: 50, symbol: 'l'},\n    {value: 40, symbol: 'xl'},\n    {value: 10, symbol: 'x'},\n    {value: 9, symbol: 'ix'},\n    {value: 5, symbol: 'v'},\n    {value: 4, symbol: 'iv'},\n    {value: 1, symbol: 'i'}\n  ];\n\n  let roman = '';\n\n  miniRoman.forEach(({value, symbol}) => {\n    while (number >= value) {\n      number -= value;\n      roman += symbol;\n    }\n  });\n\n  return roman.toLowerCase();\n};"}
{"task_id": "JavaScript/157", "generation": "\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = '';\n\n  for (let word of words) {\n    let uniqueCount = new Set(word).size;\n    if (uniqueCount > maxUnique) {\n      maxUnique = uniqueCount;\n      maxWord = word;\n    }\n  }\n\n  return maxWord;\n}"}
{"task_id": "JavaScript/159", "generation": "\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n\n  for (let i = 1; i < operand.length; i++) {\n    switch (operator[i - 1]) {\n      case '+':\n        result += operand[i];\n        break;\n      case '-':\n        result -= operand[i];\n        break;\n      case '*':\n        result *= operand[i];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i]);\n        break;\n      case '**':\n        result **= operand[i];\n        break;\n      default:\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/162", "generation": "\n    if (!text) return null;\n    const md5 = crypto.createHash('md5');\n    return md5.update(text, 'utf-8').digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
