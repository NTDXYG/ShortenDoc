{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/1", "generation": "\n  let paren_groups = [];\n  let current_group = '';\n  let open_braces = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_braces++;\n      current_group += paren_string[i];\n    } else if (paren_string[i] === ')') {\n      open_braces--;\n      current_group += paren_string[i];\n      if (open_braces === 0) {\n        paren_groups.push(current_group);\n        current_group = '';\n      }\n    }\n  }\n\n  return paren_groups;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = mean_(numbers);\n  return mean_(numbers.map((x) => Math.abs(x - mean)));\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  return [numbers[0], delimeter, ...intersperse(numbers.slice(1), delimeter)];\n};"}
{"task_id": "JavaScript/6", "generation": "\n  const groups = paren_string.split(' ');\n  const max_levels = [];\n  for (let group of groups) {\n    let level = 0;\n    let max_level = 0;\n    for (let char of group) {\n      if (char === '(') {\n        level += 1;\n        max_level = Math.max(level, max_level);\n      } else if (char === ')') {\n        level -= 1;\n      }\n    }\n    max_levels.push(max_level);\n  }\n  return max_levels;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter((string) => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((num) => {\n    if (num > max) {\n      max = num;\n    }\n    return max;\n  });\n}"}
{"task_id": "JavaScript/10", "generation": "\n  if (string === string.split('').reverse().join('')) {\n    return string;\n  }\n  const reversed = string.split('').reverse().join('');\n  for (let i = 0; i < string.length; i++) {\n    if (string.slice(i) === reversed.slice(0, string.length - i)) {\n      return string + reversed.slice(0, string.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n    const notes = music_string.split(' ');\n    const beats = [];\n    for (let note of notes) {\n        switch (note) {\n            case 'o':\n                beats.push(4);\n                break;\n            case 'o|':\n                beats.push(2);\n                break;\n            case 'o.':\n                beats.push(1);\n                break;\n            case 'o..':\n                beats.push(0.5);\n                break;\n            case 'o...':\n                beats.push(0.25);\n                break;\n            case 'o....':\n                beats.push(0.125);\n                break;\n            default:\n                beats.push(0);\n        }\n    }\n    return beats;\n}\nconsole.log(parseMusic('o o|. o o.... o')); // [4, 2, 1, 2, 2, 1, 1, 4, 4]"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) break;\n    count++;\n    index++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedNumbers = numbers\n    .split(' ')\n    .map((number) => numberMap[number])\n    .sort((a, b) => a - b)\n    .map((number) => Object.keys(numberMap).find((key) => numberMap[key] === number))\n    .join(' ');\n  return sortedNumbers;\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let minDiff = Infinity;\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n};\n/* Given a list of numbers, return the mean of the list. */\nconst mean = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  return sum / numbers.length;\n};\n/* Given a list of numbers, return the median of the list. */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const midIndex = Math.floor(sortedNumbers.length / 2);\n  if (sortedNumbers.length % 2 === 0) {\n    return (sortedNumbers[midIndex - 1] + sortedNumbers[midIndex]) / 2;\n  } else {\n    return sortedNumbers[midIndex];\n  }\n};\n/* Given a list of numbers, return the mode of the list. */\nconst mode = (numbers) => {\n  const frequencyMap = {};\n  let maxFrequency = 0;\n  let modeValue = null;\n  for (const num of numbers) {\n    if (frequencyMap[num]) {\n      frequencyMap[num]++;\n    } else {\n      frequencyMap[num] = 1;\n    }\n    if (frequencyMap[num] > maxFrequency) {\n      maxFrequency = frequencyMap[num];\n      modeValue = num;\n    }\n  }\n  return modeValue;\n};\n/* Given a list of numbers, return the range of the list. */\nconst range = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return max - min;\n};\n/* Given a list of numbers, return the variance of the list. */\nconst variance = (numbers) => {\n  const meanValue = mean(numbers);\n  const squaredDifferences = numbers.map((num) => Math.pow(num - meanValue, 2));\n  const meanSquaredDifference = mean(squaredDifferences);\n  return meanSquaredDifference;\n};\n/* Given a list of numbers, return the standard deviation of the list. */\nconst standardDeviation = (numbers) => {\n  const varianceValue = variance(numbers);\n  return Math.sqrt(varianceValue);\n};\n/* Given a list of numbers, return the coefficient of variation of the list. */\nconst coefficientOfVariation = (numbers) => {\n  const meanValue = mean(numbers);\n  const standard"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => {\n    return typeof value === 'number' && Number.isInteger(value);\n  });\n};"}
{"task_id": "JavaScript/23", "generation": "\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length++;\n  }\n  return length;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const uniqueNumbers = new Set(numbers);\n  return Array.from(uniqueNumbers);\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      newString += string[i].toUpperCase();\n    } else {\n      newString += string[i].toLowerCase();\n    }\n  }\n  return newString;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.reduce((acc, curr) => acc + curr, '');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n}"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/32", "generation": "\n  const n = xs.length;\n  const a = xs[0];\n  const b = xs[1];\n  const c = xs[2];\n  const d = xs[3];\n  const e = xs[4];\n  const f = xs[5];\n  const g = xs[6];\n  const h = xs[7];\n  const i = xs[8];\n  const j = xs[9];\n  const k = xs[10];\n  const l = xs[11];\n  const m = xs[12];\n  const n = xs[13];\n  const o = xs[14];\n  const p = xs[15];\n  const q = xs[16];\n  const r = xs[17];\n  const s = xs[18];\n  const t = xs[19];\n  const u = xs[20];\n  const v = xs[21];\n  const w = xs[22];\n  const x = xs[23];\n  const y = xs[24];\n  const z = xs[25];\n  const aa = xs[26];\n  const bb = xs[27];\n  const cc = xs[28];\n  const dd = xs[29];\n  const ee = xs[30];\n  const ff = xs[31];\n  const gg = xs[32];\n  const hh = xs[33];\n  const ii = xs[34];\n  const jj = xs[35];\n  const kk = xs[36];\n  const ll = xs[37];\n  const mm = xs[38];\n  const nn = xs[39];\n  const oo = xs[40];\n  const pp = xs[41];\n  const qq = xs[42];\n  const rr = xs[43];\n  const ss = xs[44];\n  const tt = xs[45];\n  const uu = xs[46];\n  const vv = xs[47];\n  const ww = xs[48];\n  const xx = xs[49];\n  const yy = xs[50];\n  const zz = xs[51];\n  const aaa = xs[52];\n  const bbb = xs[53];\n  const ccc = xs[54];\n  const ddd = xs[55];\n  const eee = xs[56];\n  const fff = xs[57];\n  const ggg = xs[58];\n  const hhh = xs[59];\n  const iii = xs[60];\n  const jjj = xs[61];\n "}
{"task_id": "JavaScript/33", "generation": "\n  let l3 = l.filter((e, i) => i % 3 === 2);\n  l3.sort((a, b) => a - b);\n  return l.map((e, i) => (i % 3 === 2 ? l3.shift() : e));\n}"}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l.flat())].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  let even = l.filter((_, i) => i % 2 === 0);\n  even.sort((a, b) => a - b);\n  return l.map((_, i) => (i % 2 === 0 ? even[Math.floor(i / 2)] : l[i]));\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = \"\";\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 2];\n    if (c === d && d === e) {\n      decoded += c;\n      i += 3;\n    } else if (c === d) {\n      decoded += c;\n      decoded += e;\n      i += 3;\n    } else if (c === e) {\n      decoded += c;\n      decoded += d;\n      i += 3;\n    } else {\n      decoded += c;\n      decoded += d;\n      decoded += e;\n      i += 3;\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  let fib = [0, 1];\n  let count = 0;\n  let i = 2;\n\n  while (count < n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    if (isPrime(fib[i])) count++;\n    i++;\n  }\n\n  return fib[i - 1];\n};"}
{"task_id": "JavaScript/40", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return Math.floor(n / 2);\n}"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((e) => e + 1);\n}"}
{"task_id": "JavaScript/43", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 0;\n  let fib = [0, 0, 0];\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n  return fib[n];\n};"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    return sorted[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};"}
{"task_id": "JavaScript/49", "generation": "\n  let r = 1;\n  for (let i = 0; i < n; i++) {\n    r = (r * 2) % p;\n  }\n  return r;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[a-z]/i)) {\n      let code = char.charCodeAt(0);\n      if (code >= 65 && code <= 90) {\n        decoded += String.fromCharCode((code - 65 - 5 + 26) % 26 + 65);\n      } else if (code >= 97 && code <= 122) {\n        decoded += String.fromCharCode((code - 97 - 5 + 26) % 26 + 97);\n      }\n    } else {\n      decoded += char;\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  if (s0.length !== s1.length) return false;\n  const s0Set = new Set(s0);\n  for (let i = 0; i < s1.length; i++) {\n    if (!s0Set.has(s1[i])) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};\nconst fib1 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        [a, b] = [b, a + b];\n    }\n    return b;\n};\n/* Return n-th Fib number.>>> fib(10) 55 >>> fib1 18 21 */\nconst fib2 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    while (n-- > 1) {\n        [a, b] = [b, a + b];\n    }\n    return b;\n};\n/* Return n-th Fib number.>>> fib(10) 55 >>> fib1 18 21 */\nconst fib3 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    while (n-- > 1) {\n        [a, b] = [b, a + b];\n    }\n    return b;\n};\n/* Return n-th Fib number.>>> fib(10) 55 >>> fib1 18 21 */\nconst fib4 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    while (n-- > 1) {\n        [a, b] = [b, a + b];\n    }\n    return b;\n};\n/* Return n-th Fib number.>>> fib(10) 55 >>> fib1 18 21 */\nconst fib5 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    while (n-- > 1) {\n        [a, b] = [b, a + b];\n    }\n    return b;\n};\n/* Return n-th Fib number.>>> fib(10) 55 >>> fib1 18 21 */\nconst fib6 = (n) => {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    while (n-- > 1) {\n        [a, b] = [b, a +"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length < 2) return true;\n  let increasing = l[0] < l[1];\n  for (let i = 1; i < l.length; i++) {\n    if (increasing && l[i] < l[i - 1]) return false;\n    if (!increasing && l[i] > l[i - 1]) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const commonElements = new Set([...set1].filter(x => set2.has(x)));\n  return Array.from(commonElements).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let largest = 2;\n  while (n > largest) {\n    if (n % largest === 0) {\n      n /= largest;\n    } else {\n      largest++;\n    }\n  }\n  return largest;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i * xs[i]);\n  }\n  return res;\n};\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3])); // [2, 6]\nconsole.log(derivative([5])); // []\nconsole.log(derivative([])); // []\nconsole.log(derivative([1])); // []\nconsole.log(derivative([1, 0])); // [0]\nconsole.log(derivative([0, 1])); // [1]\nconsole.log(derivative([0, 0])); // []\nconsole.log(derivative([0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])); // []\nconsole.log(derivative([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  let fib = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n  return fib[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return digits.reverse().join('');\n  }\n  const shiftedDigits = digits.slice(shift).concat(digits.slice(0, shift));\n  return shiftedDigits.join('');\n}"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n  const [apples, oranges] = s.split('and').map(x => Number(x.split(' ')[0]));\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  if (arr.length === 0) return [];\n  let smallestEven = Infinity;\n  let smallestIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallestEven === Infinity) return [];\n  return [smallestEven, smallestIndex];\n}"}
{"task_id": "JavaScript/69", "generation": "\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (count[lst[i]]) {\n      count[lst[i]]++;\n    } else {\n      count[lst[i]] = 1;\n    }\n  }\n  let max = -1;\n  for (let key in count) {\n    if (count[key] > key) {\n      max = Math.max(max, key);\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result = [];\n  let minIndex = lst.indexOf(min);\n  let maxIndex = lst.indexOf(max);\n  while (lst.length > 0) {\n    if (minIndex < maxIndex) {\n      result.push(min);\n      lst.splice(minIndex, 1);\n      min = Math.min(...lst);\n      minIndex = lst.indexOf(min);\n    } else {\n      result.push(max);\n      lst.splice(maxIndex, 1);\n      max = Math.max(...lst);\n      maxIndex = lst.indexOf(max);\n    }\n  }\n  return result;\n};\n/* Given a string, return a new string where the first and last chars have been exchanged. Examples: swap_first_last('') == '' swap_first_last('a') == 'a' swap_first_last('axcby') == 'yxcba' swap_first_last('abc') == 'cab' */\nconst swapFirstLast = (str) => {\n  if (str.length === 0) return '';\n  if (str.length === 1) return str;\n  let first = str[0];\n  let last = str[str.length - 1];\n  let middle = str.slice(1, str.length - 1);\n  return last + middle + first;\n};\n/* Given a string, return a new string where the first and last chars have been exchanged and all other chars have been moved to the middle. Examples: swap_first_last_move_middle('') == '' swap_first_last_move_middle('a') == 'a' swap_first_last_move_middle('axcby') == 'ycxba' swap_first_last_move_middle('abc') == 'bca' */\nconst swapFirstLastMoveMiddle = (str) => {\n  if (str.length === 0) return '';\n  if (str.length === 1) return str;\n  let first = str[0];\n  let last = str[str.length - 1];\n  let middle = str.slice(1, str.length - 1);\n  return middle + first + last;\n};\n/* Given a string, return a new string where the first and last chars have been exchanged and all other chars have been moved to the middle. The length of the string must be at least 2. Examples: swap_first_last_move_middle('') == '' swap_first_last_move_middle('a') == 'a' swap_first_last_move_middle"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a + b + c)))).toFixed(2);\n  } else {\n    return -1;\n  }\n}\n\n// 2nd solution\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a + b + c)))).toFixed(2);\n  } else {\n    return -1;\n  }\n}\n\n// 3rd solution\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a + b + c)))).toFixed(2);\n  } else {\n    return -1;\n  }\n}\n\n// 4th solution\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a + b + c)))).toFixed(2);\n  } else {\n    return -1;\n  }\n}\n\n// 5th solution\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a + b + c)))).toFixed(2);\n  } else {\n    return -1;\n  }\n}\n\n// 6th solution\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a * b * c) / (4 * Math.tan((Math.PI / 180) * 180 / (a +"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    max = Math.max(max, q[i]);\n  }\n  return sum <= w && q.length % 2 === 0;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  const totalChars = (lst) => lst.reduce((acc, curr) => acc + curr.length, 0);\n  const total1 = totalChars(lst1);\n  const total2 = totalChars(lst2);\n  if (total1 < total2) {\n    return lst1;\n  } else if (total1 > total2) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};"}
{"task_id": "JavaScript/75", "generation": "\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (x < 1 || n < 1) return false;\n  let power = 1;\n  while (power <= x) {\n    if (power === x) return true;\n    power *= n;\n  }\n  return false;\n}"}
{"task_id": "JavaScript/77", "generation": "\n  if (a < 0) {\n    return false;\n  }\n  let i = 0;\n  while (i * i * i <= a) {\n    if (i * i * i === a) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}"}
{"task_id": "JavaScript/78", "generation": "\n  const hex = num.split(\"\");\n  const prime = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    if (prime.includes(hex[i])) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return `db${binary}db`;\n}"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length !== 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  let letterGrades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      letterGrades.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push(\"D\");\n    } else {\n      letterGrades.push(\"E\");\n    }\n  }\n  return letterGrades;\n}"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length < 2) return false;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  if (n === 2) return 10;\n  return 9 * (10 ** (n - 2));\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  let words = s.split(' ');\n  let orderedWords = words.map(word => word.split('').sort().join(''));\n  return words.map((word, i) => word === ' ' ? ' ' : `anti${orderedWords[i]}`).join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "JavaScript/88", "generation": "\n  let copy = [...array];\n  let sum = copy[0] + copy[copy.length - 1];\n  if (sum % 2 === 0) {\n    copy.sort((a, b) => a - b);\n  } else {\n    copy.sort((a, b) => b - a);\n  }\n  return copy;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    if (index === -1) {\n      encrypted += s[i];\n    } else {\n      let newIndex = (index + 4) % 26;\n      encrypted += alphabet[newIndex];\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = null;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest || secondSmallest === null) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let bored = false;\n  let boredCount = 0;\n  let boredCount2 = 0;\n  let boredCount3 = 0;\n  let boredCount4 = 0;\n  let boredCount5 = 0;\n  let boredCount6 = 0;\n  let boredCount7 = 0;\n  let boredCount8 = 0;\n  let boredCount9 = 0;\n  let boredCount10 = 0;\n  let boredCount11 = 0;\n  let boredCount12 = 0;\n  let boredCount13 = 0;\n  let boredCount14 = 0;\n  let boredCount15 = 0;\n  let boredCount16 = 0;\n  let boredCount17 = 0;\n  let boredCount18 = 0;\n  let boredCount19 = 0;\n  let boredCount20 = 0;\n  let boredCount21 = 0;\n  let boredCount22 = 0;\n  let boredCount23 = 0;\n  let boredCount24 = 0;\n  let boredCount25 = 0;\n  let boredCount26 = 0;\n  let boredCount27 = 0;\n  let boredCount28 = 0;\n  let boredCount29 = 0;\n  let boredCount30 = 0;\n  let boredCount31 = 0;\n  let boredCount32 = 0;\n  let boredCount33 = 0;\n  let boredCount34 = 0;\n  let boredCount35 = 0;\n  let boredCount36 = 0;\n  let boredCount37 = 0;\n  let boredCount38 = 0;\n  let boredCount39 = 0;\n  let boredCount40 = 0;\n  let boredCount41 = 0;\n  let boredCount42 = 0;\n  let boredCount43 = 0;\n  let boredCount44 = 0;\n  let boredCount45 = 0;\n  let boredCount46 = 0;\n  let boredCount47 = 0;\n  let boredCount48 = 0;\n  let boredCount49 = 0;\n  let boredCount50 = 0;\n  let boredCount51 = 0;\n  let boredCount52 = 0;\n  let boredCount53 = 0;\n  let boredCount54 = 0;\n  let boredCount55 = 0;\n  let boredCount56"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || y === x + z || z === x + y) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};"}
{"task_id": "JavaScript/93", "generation": "\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (isLetter(char)) {\n      let charCode = char.charCodeAt(0);\n      if (isVowel(char)) {\n        charCode = (charCode - 97 + 2) % 26 + 97;\n      } else {\n        charCode = (charCode - 65 + 2) % 26 + 65;\n      }\n      char = String.fromCharCode(charCode);\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n};\n\nconst isLetter = (char) => {\n  return /[a-zA-Z]/.test(char);\n};\n\nconst isVowel = (char) => {\n  return /[aeiou]/i.test(char);\n};"}
{"task_id": "JavaScript/94", "generation": "\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  let str = max.toString();\n  for (let i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum;\n};\n/* You are given a list of integers. You need to find the largest prime value and return the sum of its digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,232,3244,3] the output should be 10 For lst = [101824597,21340,12124251] the output should be 25 For lst = [13132510734,83278,109,163,23,2323,3230,1,9,3] the output should be 13 For lst = [07243271,99,32,6,059183056] the output should be 11 For lst = [08112,3121] the output should be 3 For lst = [08,121,7] the output should be 7 */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  let str = max.toString();\n  for (let i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum;\n};\n/* You are given a list of integers. You need to find the largest prime value and return the sum of its digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,232,3244,3] the output should be 10 For lst = [101824597,21340,12124251] the output should be 25 For lst = [13132510734,83278,"}
{"task_id": "JavaScript/95", "generation": "\n  let allLower = true;\n  let allUpper = true;\n  for (let key in dict) {\n    if (key !== key.toLowerCase()) {\n      allLower = false;\n    }\n    if (key !== key.toUpperCase()) {\n      allUpper = false;\n    }\n  }\n  return allLower || allUpper;\n}\n/* Given a string, return True if the string is a palindrome, False otherwise. A palindrome is a word or phrase that reads the same backward as forward. For example, \"racecar\" is a palindrome, but \"apple\" is not. */\nconst isPalindrome = (str) => {\n  let reversed = str.split('').reverse().join('');\n  return str === reversed;\n}\n/* Given a string, return True if the string contains only digits, False otherwise. */\nconst isDigits = (str) => {\n  return /^\\d+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters, False otherwise. */\nconst isLetters = (str) => {\n  return /^[a-zA-Z]+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters and digits, False otherwise. */\nconst isAlphanumeric = (str) => {\n  return /^[a-zA-Z0-9]+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters, digits, and spaces, False otherwise. */\nconst isAlphanumericSpace = (str) => {\n  return /^[a-zA-Z0-9 ]+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters, digits, spaces, and punctuation, False otherwise. */\nconst isAlphanumericSpacePunctuation = (str) => {\n  return /^[a-zA-Z0-9 .,!?]+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters, digits, spaces, punctuation, and special characters, False otherwise. */\nconst isAlphanumericSpacePunctuationSpecial = (str) => {\n  return /^[a-zA-Z0-9 .,!?@#$%^&*()_+=-]+$/.test(str);\n}\n/* Given a string, return True if the string contains only letters, digits, spaces, punctuation, special characters, and whitespace, False otherwise. */\nconst isAlphanumericSpacePunctuationSpecialWhitespace = (str) => {\n  return /^[a-zA-Z0-9 .,!?@#$%^&*()_+=-]+$/.test(str"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  };\n\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) primes.push(i);\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n    let unitA = Math.abs(a) % 10;\n    let unitB = Math.abs(b) % 10;\n    return unitA * unitB;\n  }\n  \n  // Test cases\n  console.log(multiply(148, 412)); // Expected output: 16\n  console.log(multiply(19, 28)); // Expected output: 72\n  console.log(multiply(2020, 1851)); // Expected output: 0\n  console.log(multiply(14, -15)); // Expected output: 20"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i].toUpperCase() && 'AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = Number(value);\n  const rounded = Math.round(num);\n  if (rounded === num) {\n    return rounded;\n  } else if (rounded > num) {\n    return rounded - 1;\n  } else {\n    return rounded + 1;\n  }\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    pile.push(stones);\n    if (stones % 2 === 0) {\n      stones += 2;\n    } else {\n      stones += 1;\n    }\n  }\n  return pile;\n}"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  let arr = [];\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  if (arr.length === 0) {\n    return -1;\n  } else {\n    return Math.max(...arr);\n  }\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return '-'\n  const avg = Math.round((n + m) / 2)\n  return `0b${avg.toString(2)}`\n}\n\n// 7kyu - Find the next perfect square!\n// You might know some pretty large perfect squares. But what about the NEXT one?\n// Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n// If the parameter is itself not a perfect square then -1 should be returned. You may assume the parameter is non-negative.\n// Examples:(Input --> Output)\n// 121 --> 144\n// 625 --> 676\n// 114 --> -1 since 114 is not a perfect square\nconst findNextSquare = (sq) => {\n  const root = Math.sqrt(sq)\n  return Number.isInteger(root) ? Math.pow(root + 1, 2) : -1\n}\n\n// 7kyu - Sum of array singles\n// In this Kata, you will be given an array of numbers in which two numbers occur once and the rest occur only twice. Your task will be to return the sum of the numbers that occur only once.\n// For example, repeats([4,5,7,5,4,8]) = 15 because only the numbers 7 and 8 occur once, and their sum is 15.\n// More examples in the test cases.\n// Good luck!\n// If you like this Kata, please try:\n// Sum of array singles #2\n// Sum of array singles #3\nconst repeats = (arr) => {\n  const counts = arr.reduce((acc, num) => {\n    acc[num] = (acc[num] || 0) + 1\n    return acc\n  }, {})\n  return Object.keys(counts).reduce((acc, key) => {\n    if (counts[key] === 1) acc += Number(key)\n    return acc\n  }, 0)\n}\n\n// 7kyu - Find the next perfect square!\n// You might know some pretty large perfect squares. But what about the NEXT one?\n// Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.\n// If the parameter is itself not a perfect square then"}
{"task_id": "JavaScript/104", "generation": "\n  const hasEvenDigit = (num) => {\n    while (num > 0) {\n      if (num % 2 === 0) {\n        return true;\n      }\n      num = Math.floor(num / 10);\n    }\n    return false;\n  };\n  return x.filter((num) => !hasEvenDigit(num)).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => b.length - a.length);\n};\n\nconst sortAndReplace = (arr) => {\n  const sorted = byLength(arr.filter((num) => num >= 1 && num <= 9));\n  const reversed = sorted.reverse();\n  const replaced = reversed.map((num) => {\n    const numStr = num.toString();\n    return numStr\n      .split(\"\")\n      .map((digit) => {\n        switch (digit) {\n          case \"1\":\n            return \"One\";\n          case \"2\":\n            return \"Two\";\n          case \"3\":\n            return \"Three\";\n          case \"4\":\n            return \"Four\";\n          case \"5\":\n            return \"Five\";\n          case \"6\":\n            return \"Six\";\n          case \"7\":\n            return \"Seven\";\n          case \"8\":\n            return \"Eight\";\n          case \"9\":\n            return \"Nine\";\n          default:\n            return \"\";\n        }\n      })\n      .join(\"\");\n  });\n  return replaced;\n}"}
{"task_id": "JavaScript/106", "generation": "\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      arr.push(factorial);\n    }\n  }\n  return arr;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return (even, odd);\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    let isNegative = false;\n    if (num < 0) {\n      num = -num;\n      isNegative = true;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (isNegative) {\n      sum = -sum;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  for (let i = 0; i < arr.length; i++) {\n    const shiftedArr = arr.slice(i).concat(arr.slice(0, i));\n    if (shiftedArr.every((num, index) => num === sortedArr[index])) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n  let oddCount = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n  let oddCount2 = lst2.filter(num => num % 2 !== 0).length;\n  if (evenCount === lst1.length) {\n    return \"YES\";\n  } else if (oddCount === lst1.length && evenCount2 > 0) {\n    return \"YES\";\n  } else if (oddCount === lst1.length && oddCount2 > 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n/* In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible perform an exchange of elements between to make lst1 a list of only even numbersThere is no limit on the exchanged elements between lst1.If it is possible exchange elements between the lst1 to make all the elements of l to be even, return \"YES\".Otherwise, return \"NO\".For example: exchange([1 2,], [1]) => \"YES exchange 5 3 It is assumed the input lists will be nonempty. */\nconst exchange = (lst1, lst2) => {\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n  let oddCount = lst1.filter(num => num % 2 !== 0).length;\n  let evenCount2 = lst2.filter(num => num % 2 === 0).length;\n  let oddCount2 = lst2.filter(num => num % 2 !== 0).length;\n  if (evenCount === lst1.length) {\n    return \"YES\";\n  } else if (oddCount === lst1.length && evenCount2 > 0) {\n    return \"YES\";\n  } else if (oddCount === lst1.length && oddCount2 > 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n/* In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible perform an exchange of elements between to make lst1 a list of only even numbersThere is no limit on the exchanged elements between lst1.If it is possible exchange elements between the lst1 to make all the elements of"}
{"task_id": "JavaScript/111", "generation": "\n  let arr = test.split(' ');\n  let obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]]) {\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  let max = 0;\n  let maxArr = [];\n  for (let key in obj) {\n    if (obj[key] > max) {\n      max = obj[key];\n    }\n  }\n  for (let key in obj) {\n    if (obj[key] === max) {\n      maxArr.push(key);\n    }\n  }\n  let result = {};\n  for (let i = 0; i < maxArr.length; i++) {\n    result[maxArr[i]] = max;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    const oddDigits = str.split('').filter((digit) => digit % 2 !== 0).length;\n    return `the number of odd elements in the string ${oddDigits} of the input.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n\n  return minSum === Infinity ? 0 : minSum;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.ceil(grid[i][j] / capacity);\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const countOnesA = a.toString(2).split('1').length - 1;\n    const countOnesB = b.toString(2).split('1').length - 1;\n    if (countOnesA === countOnesB) {\n      return a - b;\n    } else {\n      return countOnesA - countOnesB;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n}"}
{"task_id": "JavaScript/119", "generation": "\n  let count = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === ')') {\n      count--;\n    } else {\n      count++;\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}"}
{"task_id": "JavaScript/120", "generation": "\n  if (k === 0) return [];\n  if (k >= arr.length) return arr.sort((a, b) => b - a);\n  return arr.sort((a, b) => b - a).slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i].toString().length === 2) {\n      sum += parseInt(arr[i]);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [];\n  while (n !== 1) {\n    if (n % 2 !== 0) {\n      arr.push(n);\n    }\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  return arr.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  const [month, day, year] = date.split('-').map(Number);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if (month === 2) {\n    if (day > 29) return false;\n    if (day === 29 && !((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0)) return false;\n  } else if ([4, 6, 9, 11].includes(month) && day > 30) {\n    return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] === txt[i].toLowerCase() && txt[i].charCodeAt() % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = true;\n  let duplicates = false;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n    }\n    if (lst[i] === lst[i + 1]) {\n      duplicates = true;\n    }\n  }\n  if (duplicates) {\n    return false;\n  } else {\n    return sorted;\n  }\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n  if (length < 2) {\n    return \"NO\";\n  }\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= -1;\n    } else if (arr[i] === 0) {\n      return 0;\n    }\n  }\n  return product;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const dp = Array.from({ length: n }, () => Array.from({ length: n }).map(() => Array(k + 1).fill(Infinity)));\n  const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const visited = Array.from({ length: n }, () => Array(n).fill(false));\n  const path = [];\n\n  const dfs = (x, y, k, path) => {\n    if (k === 0) {\n      return true;\n    }\n    visited[x][y] = true;\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n        if (dfs(nx, ny, k - 1, path)) {\n          path.push(grid[x][y]);\n          return true;\n        }\n      }\n    }\n    visited[x][y] = false;\n    return false;\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dfs(i, j, k, path)) {\n        return path;\n      }\n    }\n  }\n\n  return [];\n}"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 0) return [];\n  if (n === 1) return [3];\n  if (n === 2) return [1, 3];\n  let arr = [1, 3];\n  for (let i = 2; i < n; i++) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 1] + arr[i - 2]);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n  }\n  return arr;\n};\n// 1. The function tri takes a nonnegative number n as input.\n// 2. If n is 0, the function returns an empty array.\n// 3. If n is 1, the function returns an array containing only the number 3.\n// 4. If n is 2, the function returns an array containing the numbers 1 and 3.\n// 5. If n is greater than 2, the function initializes an array arr with the first two numbers of the Tribonacci sequence.\n// 6. The function then enters a loop that iterates from 2 to n - 1.\n// 7. Inside the loop, the function checks if the current index i is even or odd.\n// 8. If i is even, the function calculates the next number in the sequence by adding the previous two numbers in the array.\n// 9. If i is odd, the function calculates the next number in the sequence by adding the previous three numbers in the array.\n// 10. The function adds the calculated number to the end of the array.\n// 11. After the loop, the function returns the array arr, which contains the first n numbers of the Tribonacci sequence."}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n}"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt[txt.length - 1];\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n  const isNotPartOfWord = txt[txt.length - 2] === \" \" || txt[txt.length - 2] === undefined;\n  return isLetter && isNotPartOfWord;\n}"}
{"task_id": "JavaScript/135", "generation": "\n  const sortedArr = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] !== i + 1) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (smallest === null || lst[i] > smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (largest === null || lst[i] < largest) {\n        largest = lst[i];\n      }\n    }\n  }\n  return (smallest === null ? [largest] : [smallest, largest]);\n}/* Create a function that returns a tuple (a,), where '' the largest of negative integers, and ' of in a list.If there is no negative or positive integers, return them as None.Examples: largest_smallestintegers([2, 4, 1, 3, 5, 7]) == (None 1) largest]) == (None None largest0]) None */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (smallest === null || lst[i] > smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (largest === null || lst[i] < largest) {\n        largest = lst[i];\n      }\n    }\n  }\n  return (smallest === null ? [largest] : [smallest, largest]);\n}\n/* Create a function that returns a tuple (a,), where '' the largest of negative integers, and ' of in a list.If there is no negative or positive integers, return them as None.Examples: largest_smallestintegers([2, 4, 1, 3, 5, 7]) == (None 1) largest]) == (None None largest0]) None */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (smallest === null || lst[i] > smallest) {\n        smallest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if ("}
{"task_id": "JavaScript/137", "generation": "\n  if (a === b) return null;\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    a = parseFloat(a);\n    b = parseFloat(b);\n  }\n  return a > b ? a : b;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 4) return false;\n  for (let i = 2; i <= n; i += 2) {\n    if (n - i < 4) return false;\n    if (isSum(n - i, 4, 2)) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s+/g, (match) => {\n    if (match.length === 1) {\n      return \"_\";\n    } else {\n      return \"-\";\n    }\n  });\n}"}
{"task_id": "JavaScript/141", "generation": "\n  const reg = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt|exe|dll$/;\n  return reg.test(file_name) ? \"Yes\" : \"No\";\n}"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i % 4 === 0) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(\" \");\n  const primeWords = words.filter((word) => {\n    if (word.length === 1) return true;\n    for (let i = 2; i < word.length; i++) {\n      if (word.length % i === 0) return false;\n    }\n    return true;\n  });\n  return primeWords.join(\" \");\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/');\n  const [nNum, nDen] = n.split('/');\n  const xVal = parseInt(xNum) / parseInt(xDen);\n  const nVal = parseInt(nNum) / parseInt(nDen);\n  return xVal * nVal === Math.floor(xVal * nVal);\n}"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    const sumB = b.toString().split('').reduce((acc, num) => acc + Math.abs(num), 0);\n    return sumA - sumB;\n  });\n}\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-11, 11, 1, -1, -12]\nconsole.log(orderByPoints([1, 2, 3, 4, 5])); // [1, 2, 3, 4, 5]\nconsole.log(orderByPoints([5, 4, 3, 2, 1])); // [1, 2, 3, 4, 5]\nconsole.log(orderByPoints([1, 11, 2, 22, 3, 33])); // [1, 2, 3, 11, 22, 33]\nconsole.log(orderByPoints([1, 11, 2, 22, 3, 33, 4, 44, 5, 55])); // [1, 2, 3, 4, 5, 11, 22, 33, 44, 55]"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i].toString()[0] % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n// 2nd solution\nconst getMaxTriples = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n// 3rd solution\nconst getMaxTriples = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n// 4th solution\nconst getMaxTriples = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end).sort();\n};"}
{"task_id": "JavaScript/149", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (n < 2) return y;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return y;\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i]) && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n    return game.map((score, i) => Math.abs(score - guess[i]));\n  }\n  "}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = extensions[0];\n  let strength = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let cap = 0;\n    let sm = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    if (cap - sm > strength) {\n      strength = cap - sm;\n      strongest = extensions[i];\n    }\n  }\n  return class_name + '.' + strongest;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  let bLen = b.length;\n  for (let i = 0; i < bLen; i++) {\n    let bRot = b.slice(i) + b.slice(0, i);\n    if (a.includes(bRot)) return true;\n  }\n  return false;\n}"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let absNum = Math.abs(num);\n  while (absNum > 0) {\n    let digit = absNum % 10;\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    absNum = Math.floor(absNum / 10);\n  }\n  return [even, odd];\n}"}
{"task_id": "JavaScript/156", "generation": "\n  const roman = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n  for (let key in roman) {\n    while (number >= roman[key]) {\n      result += key;\n      number -= roman[key];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUnique) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === maxUnique) {\n      maxWord = maxWord < word ? maxWord : word;\n    }\n  }\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n    if (remaining < need) {\n        return [number + remaining, 0];\n    } else {\n        return [number + need, remaining - need];\n    }\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result **= operand[i + 1];\n        break;\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let letters = s.match(/[a-z]/gi);\n  if (letters) {\n    return s\n      .split(\"\")\n      .map((c) => (c.match(/[a-z]/i) ? c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase() : c))\n      .join(\"\");\n  } else {\n    return s\n      .split(\"\")\n      .map((c) => (c.match(/[a-z]/i) ? c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase() : c))\n      .reverse()\n      .join(\"\");\n  }\n}"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const md5 = require('md5');\n  return md5(text);\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    let num = i;\n    while (num > 0) {\n      let digit = num % 10;\n      if (digit % 2 === 0) {\n        result.push(digit);\n      }\n      num = Math.floor(num / 10);\n    }\n  }\n  return result;\n}"}
