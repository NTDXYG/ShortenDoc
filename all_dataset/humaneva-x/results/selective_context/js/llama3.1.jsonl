{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n// Example usage:\nconsole.log(hasCloseElements([1.0, 2, 3], 0.5)); // False\nconsole.log(hasCloseElements([180, 40, 20], 3)); // True\n"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let result = [];\n  for (let char of paren_string) {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      let group = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '(') {\n        group = stack.pop() + group;\n      }\n      if (stack.length > 0) {\n        stack.pop();\n      }\n      result.push(group);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/2", "generation": "\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.floor(decimalPart * 10);\n}"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}; // You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5 */const belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}; // You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5 */const belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}; // You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5 */const belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}; // You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5 */const belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = mean(numbers);\n  return numbers.reduce((acc, num) => acc + Math.abs(num - mean), 0) / numbers.length;\n}"}
{"task_id": "JavaScript/5", "generation": "\n  return numbers.reduce((acc, current, index) => {\n    if (index > 0) {\n      acc.push(delimeter);\n    }\n    acc.push(current);\n    return acc;\n  }, []);\n}"}
{"task_id": "JavaScript/6", "generation": "\n  const stack = [];\n  let maxDepth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      stack.push(char);\n      maxDepth = Math.max(maxDepth, stack.length);\n    } else if (char === ')') {\n      stack.pop();\n    }\n  }\n  return maxDepth;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n  let max = -Infinity;\n  return numbers.map((num) => Math.max(max = Math.max(max, num), num));\n};\n// Example usage:\nconsole.log(rollingMax([1, 2, 2, 3, 4, 2])); // Output: [1, 3, 3, 4, 4, 4]\n"}
{"task_id": "JavaScript/10", "generation": "\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] !== string[j]) {\n      return string.slice(0, i) + string.slice(i, j + 1).split('').reverse().join('') + string.slice(j + 1);\n    }\n    i += 1;\n    j -= 1;\n  }\n  return string;\n}"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === b[i]) ? '0' : '1';\n  }\n  return result;\n}"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};// <--- end of longest function\n"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  } else {\n    return greatestCommonDivisor(b, a % b);\n  }\n};\n// greatestCommonDivisor(3, 5) 1\n// greatestCommonDivisor(25, 15) 5\n"}
{"task_id": "JavaScript/14", "generation": "\n  const prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}"}
{"task_id": "JavaScript/16", "generation": "\n  const charSet = new Set();\n  for (const char of string) {\n    charSet.add(char);\n  }\n  return charSet.size;\n}"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (const note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n    } else if (note === 'o..') {\n      beats.push(2);\n    } else if (note === 'o.|') {\n      beats.push(1);\n    } else if (note === 'o...') {\n      beats.push(1);\n    } else if (note === 'o....') {\n      beats.push(0.5);\n    } else if (note === 'o.....') {\n      beats.push(0.25);\n    } else if (note === 'o......') {\n      beats.push(0.125);\n    } else if (note === 'o.......') {\n      beats.push(0.0625);\n    } else if (note === 'o........') {\n      beats.push(0.03125);\n    } else if (note === 'o.........') {\n      beats.push(0.015625);\n    } else if (note === 'o..........') {\n      beats.push(0.0078125);\n    } else if (note === 'o...........') {\n      beats.push(0.00390625);\n    } else if (note === 'o............') {\n      beats.push(0.001953125);\n    } else if (note === 'o.............') {\n      beats.push(0.0009765625);\n    } else if (note === 'o................') {\n      beats.push(0.00048828125);\n    } else if (note === 'o..................') {\n      beats.push(0.000244140625);\n    } else if (note === 'o...................') {\n      beats.push(0.0001220703125);\n    } else if (note === 'o....................') {\n      beats.push(0.00006103515625);\n    } else if (note === 'o.....................') {\n      beats.push(0.000030517578125);\n    } else if (note === 'o......................') {\n      beats.push(0.0000152587890625);\n    } else if (note === 'o.......................') {\n      beats.push(0.000007"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring, index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index += substring.length;\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numMap = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n  };\n  const sortedNums = numbers.split(' ').map(num => numMap[num]).sort((a, b) => a - b);\n  return sortedNums.map(num => Object.keys(numMap).find(key => numMap[key] === num)).join(' ');\n}"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let closestPair = [numbers[0], numbers[0]];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closestPair;\n};\n// To get rid of the warning, we need to call the function\nfindClosestElements([1.0, 2.0, 3, 4, 5, 22]); // (2.0, 22)\nfindClosestElements([10, 200]); // (20, 20)\n## Chapter 4: Arrays and Loops\n### Arrays\nArrays are a fundamental data structure in JavaScript. They are used to store collections of values. Arrays are zero-indexed, meaning the first element is at index 0, the second element is at index 1, and so on.\n### Array Methods\nHere are some common array methods:\n* **push()**: Adds one or more elements to the end of an array.\n* **pop()**: Removes the last element from an array.\n* **shift()**: Removes the first element from an array.\n* **unshift()**: Adds one or more elements to the beginning of an array.\n* **splice()**: Adds or removes elements from an array.\n* **slice()**: Returns a shallow copy of a portion of an array.\n* **concat()**: Returns a new array that contains the elements of the original array and the elements of one or more other arrays.\n* **indexOf()**: Returns the index of the first occurrence of a specified value in an array.\n* **lastIndexOf()**: Returns the index of the last occurrence of a specified value in an array.\n* **forEach()**: Calls a function for each element in an array.\n* **map()**: Creates a new array with the results of applying a function to each element in an array.\n* **filter()**: Creates a new array with all elements that pass the test implemented by the provided function.\n* **reduce()**: Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.\n* **reduceRight()**: Applies a function against an accumulator and each element in the array"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n}"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter((value) => typeof value === 'number' && Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  return string.length;\n}"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  let divisor = 2;\n  while (n > 1) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n = Math.floor(n / divisor);\n    }\n    divisor += 1;\n  }\n  return factors;\n}"}
{"task_id": "JavaScript/26", "generation": "\n  const seen = new Set();\n  return numbers.filter((num) => {\n    if (seen.has(num)) {\n      return false;\n    } else {\n      seen.add(num);\n      return true;\n    }\n  });\n}"}
{"task_id": "JavaScript/27", "generation": "\n  return string.split('').map(char => char === char.toUpperCase() ? char : 'u').join('');\n}"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n}"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n}"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((x) => x > 0);\n};\n// console.log(getPositive([-2, -4, 5, 6])); // [5, 6]\n// console.log(getPositive([3, 9, 0, 123, 1, -10])); // [3, 9, 123, 1]\n\n// 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2."}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  let maxDivisor = Math.floor(Math.sqrt(n)) + 1;\n  for (let d = 3; d < maxDivisor; d += 2) {\n    if (n % d == 0) return false;\n  }\n  return true;\n};\n// Test cases\nconsole.log(isPrime(6)); // False\nconsole.log(isPrime(101)); // True\nconsole.log(isPrime(11)); // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61)); // True\nconsole.log(isPrime(4)); // False\nconsole.log(isPrime(1)); // False\n"}
{"task_id": "JavaScript/32", "generation": "\n  let n = xs.length;\n  let x = 1.0;\n  let e = 1.0;\n  let f = 0.0;\n  let df = 0.0;\n  let d2f = 0.0;\n  let d3f = 0.0;\n  let d4f = 0.0;\n  let d5f = 0.0;\n  let d6f = 0.0;\n  let d7f = 0.0;\n  let d8f = 0.0;\n  let d9f = 0.0;\n  let d10f = 0.0;\n  let d11f = 0.0;\n  let d12f = 0.0;\n  let d13f = 0.0;\n  let d14f = 0.0;\n  let d15f = 0.0;\n  let d16f = 0.0;\n  let d17f = 0.0;\n  let d18f = 0.0;\n  let d19f = 0.0;\n  let d20f = 0.0;\n  let d21f = 0.0;\n  let d22f = 0.0;\n  let d23f = 0.0;\n  let d24f = 0.0;\n  let d25f = 0.0;\n  let d26f = 0.0;\n  let d27f = 0.0;\n  let d28f = 0.0;\n  let d29f = 0.0;\n  let d30f = 0.0;\n  let d31f = 0.0;\n  let d32f = 0.0;\n  let d33f = 0.0;\n  let d34f = 0.0;\n  let d35f = 0.0;\n  let d36f = 0.0;\n  let d37f = 0.0;\n  let d38f = 0.0;\n  let d39f = 0.0;\n  let d40f = 0.0;\n  let d41f = 0.0;\n  let d42f = 0.0;\n  let d43f = 0.0;\n  let d44f = "}
{"task_id": "JavaScript/33", "generation": "\n  const third = l.filter((_, i) => i % 3 === 0);\n  const notThird = l.filter((_, i) => i % 3 !== 0);\n  return [...notThird, ...third.sort()];\n}\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 2])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]\n// console.log(sortThird([1, 2])); // [1, 2]\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 2])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12]\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14, 15])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14, 15]\n// console.log(sortThird([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, "}
{"task_id": "JavaScript/34", "generation": "\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/35", "generation": "\n  if (l.length === 0) {\n    return null;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n// Test the function\nconsole.log(maxElement([1, 3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 123])); // Output: 123\n"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      const str = i.toString();\n      count += str.split('7').length - 1;\n    }\n  }\n  return count;\n};\n\nconst fb78 = fizzBuzz;\nconst fb79 = fizzBuzz"}
{"task_id": "JavaScript/37", "generation": "\n  const l' = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l'.push(l[i]);\n    } else {\n      l'.push(l[i]);\n    }\n  }\n  return l';\n};\n// Test the function\nconsole.log(sortEven([1, 2, 3, 4, 5, 6])); // Output: [1, 2, 3, 4, 5, 6]\nconsole.log(sortEven([1, 2, 3, 4, 5, 6, 7, 8])); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\nconsole.log(sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconsole.log(sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nconsole.log(sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nconsole.log(sortEven([1,"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.slice(i, i + 3);\n    decoded += String.fromCharCode(\n      (group.charCodeAt(0) - 65) * 19 + (group.charCodeAt(1) - 65) * 5 + (group.charCodeAt(2) - 65)\n    );\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/39", "generation": "\n  let a = 0, b = 1, count = 0;\n  while (count < n) {\n    let temp = a;\n    a = b;\n    b = temp + b;\n    if (isPrime(b)) {\n      count++;\n    }\n  }\n  return b;\n}"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) {\n      const sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n    let collisions = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            if (i + j === n + 1) {\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}\n\n// Test the function\nconsole.log(carRaceCollision(5)); // Output: 2\nconsole.log(carRaceCollision(10)); // Output: 4\nconsole.log(carRaceCollision(15)); // Output: 6\n"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map((x) => x + 1);\n};\n// console.log(incrList([1, 2, 3])); // [2, 3, 4]\n// console.log(incrList([5, 3, 5, 2, 3, 9, 0, 123])); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// console.log(incrList([1, 2, 3, 4, 5])); // [2, 3, 4, 5, 6]\n// console.log(incrList([1, 2, 3, 4, 5, 6])); // [2, 3, 4, 5, 6, 7]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7])); // [2, 3, 4, 5, 6, 7, 8]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8])); // [2, 3, 4, 5, 6, 7, 8, 9]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9])); // [2, 3, 4, 5, 6, 7, 8, 9, 10]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n// console.log(incrList([1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (const num of l) {\n    if (set.has(-num)) return true;\n    set.add(num);\n  }\n  return false;\n};\n// test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False\nconsole.log(pairsSumToZero([])); // False\n"}
{"task_id": "JavaScript/44", "generation": "\n  const convert = (x, base) => {\n    if (x < base) {\n      return x.toString();\n    } else {\n      return convert(Math.floor(x / base), base) + (x % base).toString();\n    }\n  };\n  return convert(x, base);\n}"}
{"task_id": "JavaScript/45", "generation": "\n  return (a * h) / 2;\n}"}
{"task_id": "JavaScript/46", "generation": "\n  if (n <= 1) {\n    return n;\n  }\n  let fibn_2 = 0;\n  let fibn_1 = 1;\n  let fibn = 2;\n  for (let i = 2; i < n; i++) {\n    fibn_2 = fibn_1;\n    fibn_1 = fibn;\n    fibn = fibn_1 + fibn_2 + 1;\n  }\n  return fibn;\n}; // Output: 4\nconsole.log(fib4(5)); // Output: 8\nconsole.log(fib4(6)); // Output: 14\nconsole.log(fib4(7)); // Output: 24\n## Chapter 5: Arrays and Loops\n### 5.1 Introduction\nArrays are a fundamental data structure in programming. They are used to store collections of elements, which can be of any data type, including strings, numbers, booleans, objects, and other arrays. Arrays are useful for storing and manipulating large amounts of data, and they are a key component of many algorithms.\nLoops are a type of control flow statement that allows you to execute a block of code repeatedly. There are several types of loops, including for loops, while loops, and do-while loops.\n### 5.2 Arrays\nArrays are a collection of elements of the same data type stored in contiguous memory locations. Arrays are denoted by square brackets [] and elements are separated by commas. Arrays can be single-dimensional or multi-dimensional.\n#### 5.2.1 Creating Arrays\nThere are several ways to create arrays in JavaScript:\n* Using the Array constructor: var arr = new Array(5); // creates an array with 5 elements\n* Using the Array.from() method: var arr = Array.from({ length: 5 }, () => 0); // creates an array with 5 elements\n* Using the Array.of() method: var arr = Array.of(1, 2, 3); // creates an array with 3 elements\n* Using the literal syntax: var arr = [1, 2, 3]; // creates an array with 3 elements\n#### 5.2.2 Accessing Array Elements\nArray elements can be accessed using the index number. The index number starts from 0 and goes up to the length of the array minus 1.\n#### 5.2.3 Modifying Array Elements\nArray elements can be modified"}
{"task_id": "JavaScript/47", "generation": "\n  const sorted = l.sort((a, b) => a - b);\n  const n = sorted.length;\n  if (n % 2 === 0) {\n    return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n  } else {\n    return sorted[Math.floor(n / 2)];\n  }\n};\n// Test cases\nconsole.log(median([3, 1, 4])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000])); // Output: 4\nconsole.log(median([10, 20, 15.0])); // Output: 15.0\nThe function `median` takes a list of numbers as input, sorts the list in ascending order, and then calculates the median based on whether the list has an even or odd number of elements. If the list has an even number of elements, the median is the average of the two middle elements. If the list has an odd number of elements, the median is the middle element. The function returns the calculated median.\n## Chapter 7: Object-Oriented Programming\nObject-oriented programming (OOP) is a programming paradigm that revolves around the concept of objects and classes. In OOP, a program is designed as a collection of objects that interact with each other to achieve a common goal. Each object has its own set of attributes (data) and methods (functions) that define its behavior.\n### Classes and Objects\nA class is a blueprint or a template that defines the characteristics of an object. It specifies the attributes and methods that an object of that class will have. An object is an instance of a class, and it has its own set of attributes and methods.\n### Constructors\nA constructor is a special method in a class that is called when an object is created. It is used to initialize the attributes of the object. The constructor is called automatically when an object is created, and it is used to set the initial state of the object.\n### Inheritance\nInheritance is a mechanism in OOP that allows one class to inherit the properties and behavior of another class. The inheriting class is called the subclass, and the class being inherited from is called the superclass. The subclass inherits all the attributes and methods of the superclass and can also add new attributes and methods or override the ones inherited from the superclass.\n### Polymorphism\nPolymorphism is the ability of an object to take on multiple forms. This"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n}"}
{"task_id": "JavaScript/49", "generation": "\n  let result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = (result * p) % 1000000007;\n    }\n    n = n >> 1;\n    p = (p * p) % 1000000007;\n  }\n  return result;\n};\n// console.log(modp(3, 5));\n// console.log(modp(1101, 101));\n// console.log(modp(3, 11));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, 101));\n// console.log(modp(1000, "}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s[i];\n    }\n  }\n  return decoded;\n}"}
{"task_id": "JavaScript/51", "generation": "\n  const vowels = 'aeiouAEIOU';\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n}"}
{"task_id": "JavaScript/52", "generation": "\n  return l.every(x => x < t);\n}\n\n// Test the function\nconsole.log(belowThreshold([1, 2, 4, 10], 20)); // False\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\n"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "generation": "\n  const s0Set = new Set(s0);\n  const s1Set = new Set(s1);\n  return [...s0Set].every(char => s1Set.has(char));\n};\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // true\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // true\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // true\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // false\n// console.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); //"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fib1 = fib(10)"}
{"task_id": "JavaScript/56", "generation": "\n  const stack = [];\n  const bracketMap = { \"<\": \">\", \"(\": \")\", \"[\": \"]\" };\n\n  for (let bracket of brackets) {\n    if (Object.keys(bracketMap).includes(bracket)) {\n      stack.push(bracket);\n    } else if (bracket in bracketMap) {\n      if (stack.length === 0 || bracketMap[stack.pop()] !== bracket) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/57", "generation": "\n  const isIncreasing = l.every((x, i, a) => i === 0 || x >= a[i - 1]);\n  const isDecreasing = l.every((x, i, a) => i === 0 || x <= a[i - 1]);\n  return isIncreasing || isDecreasing;\n};\n// Example usage:\nconsole.log(monotonic([1, 2, 4, 20])); // True\nconsole.log(monotonic([20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True\n## Chapter 5: Object Manipulation\n### 5.1 Object Creation\n#### 5.1.1 Object.fromEntries()\nThe Object.fromEntries() method creates a new object from an iterable of key-value pairs.\n"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const commonSet = new Set([...set1].filter(x => set2.has(x)));\n  return [...commonSet].sort((a, b) => a - b);\n};\n// console.log(common([1, 4, 3, 34], [653, 2, 5])); // [1, 5, 653]\n// console.log(common([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 7, 9, 121, 653]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n// console.log(common([5,"}
{"task_id": "JavaScript/59", "generation": "\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i !== 0) {\n      i += 1;\n    } else {\n      n = Math.floor(n / i);\n    }\n  }\n  return n;\n}"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sumN = (n) => {\n  return (n * (n + 1)) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sum = (n) => {\n  return n * (n + 1) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sum5 = (n) => {\n  return n * (n + 1) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sum10 = (n) => {\n  return n * (n + 1) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sum1 = (n) => {\n  return n * (n + 1) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 5050 >>> sum5) 15 >>> sum10 55 >>>1 1 */\nconst sum2 = (n) => {\n  return n * (n + 1) / 2;\n};\n// sum_to_n is a function that sums numbers from 1 to n.>>> sum_to_n(30) 465 >>> sum_n(100) 505"}
{"task_id": "JavaScript/61", "generation": "\n  const stack = [];\n  for (let bracket of brackets) {\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}"}
{"task_id": "JavaScript/62", "generation": "\n  const n = xs.length;\n  const result = new Array(n - 1);\n  for (let i = 1; i < n; i++) {\n    result[i - 1] = i * xs[i];\n  }\n  return result;\n};\n// Example usage:\nconsole.log(derivative([3, 1, 2, 4, 5])); // Output: [1, 4, 12, 20]\nconsole.log(derivative([2, 3])); // Output: [2, 6] */ "}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b + i - 1;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n// Test cases\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24\n"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = 'aeiouAEIOUY';\n  return s.split('').filter(char => vowels.includes(char)).length;\n}"}
{"task_id": "JavaScript/65", "generation": "\n  const numDigits = Math.floor(Math.log10(x)) + 1;\n  const shiftMod = shift % numDigits;\n  const left = Math.floor(x / Math.pow(10, shiftMod));\n  const right = x % Math.pow(10, shiftMod);\n  return right.toString() + left.toString();\n};\n// Test the function\nconsole.log(circularShift(12, 1)); // Output: \"21\"\nconsole.log(circularShift(123, 2)); // Output: \"321\"\nconsole.log(circularShift(1234, 3)); // Output: \"4321\"\nconsole.log(circularShift(12345, 4)); // Output: \"54321\"\nconsole.log(circularShift(123456, 5)); // Output: \"654321\"\nconsole.log(circularShift(1234567, 6)); // Output: \"7654321\"\nconsole.log(circularShift(12345678, 7)); // Output: \"87654321\"\nconsole.log(circularShift(123456789, 8)); // Output: \"987654321\"\nconsole.log(circularShift(1234567890, 9)); // Output: \"0\" (since shift is greater than number of digits)\nconsole.log(circularShift(12345678901, 10)); // Output: \"0123456789\" (since shift is greater than number of digits)\nconsole.log(circularShift(123456789012, 11)); // Output: \"1234567890\" (since shift is greater than number of digits)\nconsole.log(circularShift(1234567890123, 12)); // Output: \"2345678901\" (since shift is greater than number of digits)\nconsole.log(circularShift(12345678901234, 13)); // Output: \"3456789012\" (since shift is greater than number of digits)\nconsole.log(circularShift(123456789012345, 14)); // Output: \"4567890123\" (since shift is greater than number of digits)\nconsole.log(circularShift(1234567890123456, 15)); // Output: \"5678901234\" (since shift is greater than number of digits)\nconsole.log(circularShift(12345678901234567, 16)); // Output: \"6789012345\" (since shift is greater than number of digits)\nconsole.log(circularShift(123456789012345678, 17)); // Output:"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}; // Output: 131\nconsole.log(digitSum(\"aAaaaXa\")); // Output: 153\nconsole.log(digitSum(\"helloE\")); // Output: 69\nconsole.log(digitSum(\"woArBld\")); // Output: 131\nconsole.log(digitSum(\"abcCd\")); // Output: 67\nconsole.log(digitSum(\"\")); // Output: 0\nconsole.log(digitSum(\"AB\")); // Output: 131\nconsole.log(digitSum(\"a\")); // Output: 97\nconsole.log(digitSum(\"A\")); // Output: 65\nconsole.log(digitSum(\"ab\")); // Output: 162\nconsole.log(digitSum(\"AB\")); // Output: 196\nconsole.log(digitSum(\"aB\")); // Output: 162\nconsole.log(digitSum(\"ABc\")); // Output: 196\nconsole.log(digitSum(\"aBc\")); // Output: 196\nconsole.log(digitSum(\"ABcd\")); // Output: 196\nconsole.log(digitSum(\"aBcd\")); // Output: 196\nconsole.log(digitSum(\"ABcD\")); // Output: 196\nconsole.log(digitSum(\"aBcD\")); // Output: 196\nconsole.log(digitSum(\"ABcdE\")); // Output: 196\nconsole.log(digitSum(\"aBcdE\")); // Output: 196\nconsole.log(digitSum(\"ABcDE\")); // Output: 196\nconsole.log(digitSum(\"aBcDE\")); // Output: 196\nconsole.log(digitSum(\"ABcdEFG\")); // Output: 196\nconsole.log(digitSum(\"aBcdEFG\")); // Output: 196\nconsole.log(digitSum(\"ABcDEFG\")); // Output: 196\nconsole.log(digitSum(\"aBcDEFG\")); // Output: 196\nconsole.log(digitSum(\"ABcdEFGH\")); // Output: 196\nconsole.log(digitSum(\"aBcdEFGH\")); // Output: 196\nconsole.log(digitSum(\"ABcDEFGH\")); // Output: 196\nconsole.log(digit"}
{"task_id": "JavaScript/67", "generation": "\n    let [apples, oranges] = s.match(/\\d+/g).map(Number);\n    return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min === Infinity) return [];\n  return [min, minIndex];\n}; */\n/* \"Given an array of integers, return the sum of all the even numbers in the array. If the array is empty, return 0.Example 1 Input: [1,2,3,4,5,6] Output: 12 Explan 2 + 4 + 6 = 12Example 2 Input: [1,3,5,7,9] Output: 0 Explan There are no even numbers in the arrayExample 3 Input: [] Output: 0 Explan The array is emptyConstr: * 1 <= arr. <= 10000 * 0 <= arr[i] <= 10000 */\nconst sumEven = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}; */\n/* \"Given an array of integers, return the sum of all the odd numbers in the array. If the array is empty, return 0.Example 1 Input: [1,2,3,4,5,6] Output: 9 Explan 1 + 3 + 5 = 9Example 2 Input: [1,3,5,7,9] Output: 25 Explan 1 + 3 + 5 + 7 + 9 = 25Example 3 Input: [] Output: 0 Explan The array is emptyConstr: * 1 <= arr. <= 10000 * 0 <= arr[i] <= 10000 */\nconst sumOdd = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}; */\n/* \"Given an array of integers, return the sum of all the numbers in the array that"}
{"task_id": "JavaScript/69", "generation": "\n  const freq = {};\n  for (const num of lst) {\n    freq[num] = (freq[num] || 0) + 1;\n  }\n  let max = 0;\n  for (const num in freq) {\n    if (freq[num] >= num && num > max) {\n      max = num;\n    }\n  }\n  return max === 0 ? -1 : max;\n}; // eslint-disable-line no-undef\n/* global console */ console.log(search([4, 1, 2, 2, 1])); // 2 console.log(search([1, 2, 3, 3, 4, 4, 4])); // 3 console.log(search([5, 5, 4, 4, 4])); // - */ // eslint-disable-line no-undef\n"}
{"task_id": "JavaScript/70", "generation": "\n  if (lst.length === 0) return [];\n  const sorted = lst.sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  let j = sorted.length - 1;\n  while (i <= j) {\n    result.push(sorted[i]);\n    if (i !== j) result.push(sorted[j]);\n    i++;\n    j--;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c))) * 100) / 100;\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const max = Math.max(...q);\n  return sum <= w && q.length === q.filter((_, i) => q[i] === max).length;\n}; // eslint-disable-line no-undef"}
{"task_id": "JavaScript/73", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[arr.length - 1 - i]) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/74", "generation": "\n  const total1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const total2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  if (total1 < total2) return lst1;\n  if (total1 > total2) return lst2;\n  return lst1;\n}; // eslint-disable-next-line no-undef\n\ntotalMatch([], []); // eslint-disable-next-line no-undef\ntotalMatch(['hi', 'admin'], ['hI', 'Hi']); // eslint-disable-next-line no-undef\ntotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']); // eslint-disable-next-line no-undef\ntotalMatch(['hi', 'admin', 'hhi', 'hi'], ['hi', 'hi']); // eslint-disable-next-line no-undef\ntotalMatch(['4'], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['4']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable-next-line no-undef\ntotalMatch(['1', '2', ',', ','], ['1', '2', ',', ',']); // eslint-disable"}
{"task_id": "JavaScript/75", "generation": "\n    if (a < 2) {\n        return false;\n    }\n    for (let i = 2; i < a; i++) {\n        if (a % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test the function\nconsole.log(isMultiplyPrime(30)); // Expected output: true\nconsole.log(isMultiplyPrime(31)); // Expected output: false\n"}
{"task_id": "JavaScript/76", "generation": "\n  if (n === 0) return false;\n  if (x === 1) return true;\n  if (x < 1) return false;\n  const log = Math.log(x) / Math.log(n);\n  return log % 1 === 0;\n}; // isSimplePower(1, 4) => true isSimplePower(2, 2) => true isSimplePower(8, 2) => true isSimplePower(3, 2) => false isSimplePower(3, 1) => false isSimplePower(5, 3) => false\n"}
{"task_id": "JavaScript/77", "generation": "\n    let cubeRoot = Math.round(Math.cbrt(a));\n    return Math.pow(cubeRoot, 3) === a;\n}; // 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, 80079, 92613, 11025, 13313, 16128, 19404, 23104, 27963, 33792, 409121, 49133, 58313, 68521, "}
{"task_id": "JavaScript/78", "generation": "\n    let count = 0;\n    const hexMap = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    for (let i = 0; i < num.length; i++) {\n        const hex = num[i];\n        if (hex === '0' || hex === '1' || hex === '2' || hex === '3' || hex === '4' || hex === '5' || hex === '6' || hex === '7' || hex === '8' || hex === '9') {\n            if (isPrime(parseInt(hex))) {\n                count++;\n            }\n        } else if (hex === 'A' || hex === 'B' || hex === 'C' || hex === 'D' || hex === 'E' || hex === 'F') {\n            if (isPrime(hexMap[hex])) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\nconst isPrime = (num) => {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}; */\n\n\n\n\n// const hexKey = (num) => {\n//     let count = 0;\n//     const hexMap = {\n//         'A': 10,\n//         'B': 11,\n//         'C': 12,\n//         'D': 13,\n//         'E': 14,\n//         'F': 15\n//     };\n//     for (let i = 0; i < num.length; i++) {\n//         const hex = num[i];\n//         if (hex === '0' || hex === '1' || hex === '2' || hex === '3' || hex === '4' || hex === '5' || hex === '6' || hex === '7' || hex === '8' || hex === '9') {\n//             if (isPrime(parseInt(hex))) {\n//                 count++;\n//             }\n//         } else if (hex === 'A' || hex === 'B' || hex === 'C' || hex === 'D' || hex === 'E' || hex"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}; // do not change this line\n// console.log(decimalToBinary(15)); // \"db1111db\"\n// console.log(decimalToBinary(321)); // \"db100111db\" */\n/* \nYou are given a string of numbers separated by spaces. You need to find the sum of all the numbers in the string. The string can contain negative numbers and zero. The numbers can be integers or floats. The string can also contain non-numeric characters. You need to ignore these characters and only consider the numbers.\n\nExample:\nInput: \"1 2 3.5 -4.5 5\"\nOutput: 6.0\nExplanation: The sum of the numbers in the string is 1 + 2 + 3.5 + (-4.5) + 5 = 6.0\n\nConstraints:\n- The string can contain any number of numbers.\n- The numbers can be integers or floats.\n- The string can contain non-numeric characters.\n- The numbers can be negative or positive.\n- The string can contain zero.\n */\nconst sumOfNumbers = (str) => {\n  let sum = 0;\n  let num = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      if (num !== \"\") {\n        sum += parseFloat(num);\n        num = \"\";\n      }\n    } else if (!isNaN(str[i])) {\n      num += str[i];\n    }\n  }\n  if (num !== \"\") {\n    sum += parseFloat(num);\n  }\n  return sum;\n}; // console.log(sumOfNumbers(\"1 2 3.5 -4.5 5\")); // 6.0\n/* \nYou are given a string of numbers separated by spaces. You need to find the maximum number in the string. The string can contain negative numbers and zero. The numbers can be integers or floats. The string can also contain non-numeric characters. You need to ignore these characters and only consider the numbers.\n\nExample:\nInput: \"1 2 3.5 -4.5 5\"\nOutput: 5\nExplanation: The maximum number in the string is 5.\n\nConstraints:\n- The string can contain any number of numbers.\n- The numbers can be integers or floats.\n- The string can contain non-numeric characters.\n- The numbers can be negative or positive.\n-"}
{"task_id": "JavaScript/80", "generation": "\n    if (s.length > 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] && s[i] === s[i + 2]) return false;\n    }\n    return true;\n}; // is_happy(\"a\") => False is_happy(\"aa\") => False is_happy(\"abc\") => True is_happy(\"aabb\") => False is_happy(\"adb\") => True is_happy(\"xyy\") => False\n/* You are given a string s.Your task is to check if the string is happy orA string is happy if its length is at 3 and every 3 consecutive letters are distinct For example: is_happy(a) => False isaa False isabcd True isaabb) False isadb True isxyy */\nconst isHappy = (s) => {\n    if (s.length > 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] && s[i] === s[i + 2]) return false;\n    }\n    return true;\n}; // is_happy(\"a\") => False is_happy(\"aa\") => False is_happy(\"abc\") => True is_happy(\"aabb\") => False is_happy(\"adb\") => True is_happy(\"xyy\") => False\n/* You are given a string s.Your task is to check if the string is happy orA string is happy if its length is at 3 and every 3 consecutive letters are distinct For example: is_happy(a) => False isaa False isabcd True isaabb) False isadb True isxyy */\nconst isHappy = (s) => {\n    if (s.length > 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] && s[i] === s[i + 2]) return false;\n    }\n    return true;\n}; // is_happy(\"a\") => False is_happy(\"aa\") => False is_happy(\"abc\") => True is_happy(\"aabb\") => False is_happy(\"adb\") => True is_happy(\"xyy\") => False\n/* You are given a string s.Your task"}
{"task_id": "JavaScript/81", "generation": "\n  let result = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4) {\n      result.push('A+');\n    } else if (grades[i] >= 3.7) {\n      result.push('A');\n    } else if (grades[i] >= 3.3) {\n      result.push('A-');\n    } else if (grades[i] >= 3) {\n      result.push('B+');\n    } else if (grades[i] >= 2.7) {\n      result.push('B');\n    } else if (grades[i] >= 2.3) {\n      result.push('B-');\n    } else if (grades[i] >= 2) {\n      result.push('C+');\n    } else if (grades[i] >= 1.7) {\n      result.push('C');\n    } else if (grades[i] >= 1.3) {\n      result.push('C-');\n    } else if (grades[i] >= 1) {\n      result.push('D+');\n    } else if (grades[i] >= 0.7) {\n      result.push('D');\n    } else if (grades[i] >= 0.3) {\n      result.push('D-');\n    } else {\n      result.push('F');\n    }\n  }\n  return result;\n};//end of function\nconsole.log(numericalLetterGrade([4, 3, 1.7, 2, 0.5])); // ['A+', 'A', 'C', 'B+', 'F'] */\n"}
{"task_id": "JavaScript/82", "generation": "\n  const length = string.length;\n  if (length <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "JavaScript/83", "generation": "\n    let count = 0;\n    for (let i = 1; i < Math.pow(10, n); i++) {\n        let str = i.toString();\n        if (str[0] === '1' || str[str.length - 1] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test the function\nconsole.log(startsOneEnds(2));  // Output: 11\nconsole.log(startsOneEnds(3));  // Output: 110\nconsole.log(startsOneEnds(4));  // Output: 1100\n"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    binary = (N % 2).toString() + binary;\n    N = Math.floor(N / 2);\n  }\n  return binary;\n}"}
{"task_id": "JavaScript/85", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n// Test the function\nconsole.log(add([4, 6, 8, 10])); // Output: [4, 6, 8]\nconsole.log(add([1, 3, 5, 7])); // Output: []\nconsole.log(add([2, 4, 6, 8])); // Output: [2, 6, 8] */</code></pre>\n<p>Explanation:</p>\n<p>This function iterates over the input list using a for loop. It checks if the current index is odd (i % 2 !== 0) and if the element at that index is even (lst[i] % 2 === 0). If both conditions are true, it adds the element to the result list. Finally, it returns the result list.</p>\n<p>Time complexity: O(n), where n is the length of the input list, because we are iterating over the list once.</p>\n<p>Space complexity: O(n), because in the worst case, we might need to store all elements of the input list in the result list.</p> | 4\n2\n8\n10\n1\n3\n5\n7\n2\n4\n6\n8 | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | O(n)\nO(n) | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | O(n)\nO(n) | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | O(n)\nO(n) | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | O(n)\nO(n) | 4\n6\n8\n2\n6\n8 | 4\n6\n8\n2\n6\n8 | 4\n"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const sortedWords = words.map((word) => {\n    const sortedChars = word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n    return sortedChars.join('');\n  });\n  return sortedWords.join(' ');\n}"}
{"task_id": "JavaScript/87", "generation": "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}; // Output: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] */\n/* You are given a 2 dimensional data, as a nested lists, which is similar matrix, however, unlike mat each row may contain a different number columns.Given lst, and integer x, find integers x in the list, and return list of tu, [(x1 y), ()...] such each tuple is a coordinate - (row, columns), starting with 0.Sort coordinates initially by rows in ascending.Also, sort coordinates of the row by columns in descending.Examples: get_row([ [1,2,],116],51] ], 1) == [(0 0), ( 41 02 5 0)] getrow], 1 [] get[], [1],1, 2,]], 3 [(2 2)] */\nconst getRow = (lst, x) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}; // Output: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] */ // Output: [(0, 0), (0, "}
{"task_id": "JavaScript/88", "generation": "\n  if (array.length === 0) {\n    return array;\n  }\n  const sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}"}
{"task_id": "JavaScript/89", "generation": "\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const shiftedAlphabet = alphabet.split('').map((char, index) => {\n    const newIndex = (index + 2 * 2) % alphabet.length;\n    return alphabet[newIndex];\n  }).join('');\n  return s.split('').map(char => {\n    if (alphabet.includes(char)) {\n      return shiftedAlphabet[alphabet.indexOf(char)];\n    } else {\n      return char;\n    }\n  }).join('');\n}"}
{"task_id": "JavaScript/90", "generation": "\n    let smallest = Infinity;\n    let index = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n            index = i;\n        }\n    }\n    if (index === -1) {\n        return null;\n    }\n    for (let i = index + 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            return lst[i];\n        }\n    }\n    return null;\n}; // nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([1, 4, 3, 2, 2]) == null\n// nextSmallest([1, 1]) == null\n// nextSmallest([1]) == null\n// nextSmallest([]) == null\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([1, 4, 3, 2, 2]) == null\n// nextSmallest([1, 1]) == null\n// nextSmallest([1]) == null\n// nextSmallest([]) == null\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([1, 4, 3, 2, 2]) == null\n// nextSmallest([1, 1]) == null\n// nextSmallest([1]) == null\n// nextSmallest([]) == null\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([1, 4, 3, 2, 2]) == null\n// nextSmallest([1, 1]) == null\n// nextSmallest([1]) == null\n// nextSmallest([]) == null\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([1, 4, 3, 2, 2]) == null\n// nextSmallest([1, 1]) == null\n// nextSmallest([1]) == null\n// nextSmallest([]) == null\n// nextSmallest([1, 2, 3, "}
{"task_id": "JavaScript/91", "generation": "\n  const words = S.split(/\\.|\\?|\\!/);\n  return words.filter((word) => word.trim().startsWith('I')).length;\n}; // 1\n/* You'll be given string words, and your task count the boredoms.A boredom is sentence starts theI\".Sentences are delim '.', '?' or!For example: >>> isbored(\"Hello world 0The sky.The sun is shining.I love this weather\") 1 */\nconst isBored = (S) => {\n  const words = S.split(/\\.|\\?|\\!/);\n  return words.filter((word) => word.trim().startsWith('I')).length;\n}; // 1\n/* You'll be given string words, and your task count the boredoms.A boredom is sentence starts theI\".Sentences are delim '.', '?' or!For example: >>> isbored(\"Hello world 0The sky.The sun is shining.I love this weather\") 1 */\nconst isBored = (S) => {\n  const words = S.split(/\\.|\\?|\\!/);\n  return words.filter((word) => word.trim().startsWith('I')).length;\n}; // 1\n/* You'll be given string words, and your task count the boredoms.A boredom is sentence starts theI\".Sentences are delim '.', '?' or!For example: >>> isbored(\"Hello world 0The sky.The sun is shining.I love this weather\") 1 */\nconst isBored = (S) => {\n  const words = S.split(/\\.|\\?|\\!/);\n  return words.filter((word) => word.trim().startsWith('I')).length;\n}; // 1\n/* You'll be given string words, and your task count the boredoms.A boredom is sentence starts theI\".Sentences are delim '.', '?' or!For example: >>> isbored(\"Hello world 0The sky.The sun is shining.I love this weather\") 1 */\nconst isBored = (S) => {\n  const words = S.split(/\\.|\\?|\\!/);\n  return words.filter((word) => word.trim().startsWith('I')).length;\n}; // 1\n/* You'll be given string words, and your task count the boredoms.A boredom is sentence starts theI\".Sentences are delim '.', '?' or!For example: >>> isbored(\"Hello world 0The sky.The sun is shining.I love this weather\") 1 */\nconst isBored = (S) => {\n  const"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z || y === x + z || z === x + y;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const encodedMessage = message.split('').map((char) => {\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      const nextVowel = vowels[(index + 2) % vowels.length];\n      return nextVowel === char.toLowerCase() ? char : nextVowel;\n    }\n    return char;\n  }).join('');\n  return encodedMessage;\n}"}
{"task_id": "JavaScript/94", "generation": "\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            maxPrime = Math.max(maxPrime, lst[i]);\n        }\n    }\n    return sumOfDigits(maxPrime);\n};\n\nconst isPrime = (n) => {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n};\n\nconst sumOfDigits = (n) => {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n}; */ \n\n// Solution 2\n/* You are given a list integers.You need to find the largest prime value and return the sum of its digits.Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3] the output should be 10 For l [101824597,21340,12124251] the 25 For13132510734,83278,109,163,23,2323,3230,1,9,3] 13 For07243271,99,32,6,059183056] 11 For08112,3121] 3 For08,121,7] 7 */\nconst skjkasdkd = (lst) => {\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            maxPrime = Math.max(maxPrime, lst[i]);\n        }\n    }\n    return sumOfDigits(maxPrime);\n};\n\nconst isPrime = (n) => {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n};\n\nconst"}
{"task_id": "JavaScript/95", "generation": "\n  let allLower = true;\n  let allUpper = true;\n  for (const key in dict) {\n    if (typeof key !== \"string\") {\n      return false;\n    }\n    if (key === key.toUpperCase()) {\n      allLower = false;\n    } else if (key === key.toLowerCase()) {\n      allUpper = false;\n    } else {\n      return false;\n    }\n  }\n  return allLower || allUpper;\n}"}
{"task_id": "JavaScript/96", "generation": "\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n\nconst isPrime = (num) => {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return (unitDigitA * unitDigitB) % 10;\n};// Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20. */\nconst multiply = (a, b) => {\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return (unitDigitA * unitDigitB) % 10;\n};// Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20. */\nconst multiply = (a, b) => {\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return (unitDigitA * unitDigitB) % 10;\n}; // Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20. */\nconst multiply = (a, b) => {\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return (unitDigitA * unitDigitB) % 10;\n}; // Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20. */\nconst multiply = (a, b) => {\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return (unitDigitA * unitDigitB) % 10;\n}; // Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/99", "generation": "\n  const number = parseFloat(value);\n  const integerPart = Math.trunc(number);\n  const decimalPart = number - integerPart;\n  if (decimalPart >= 0.5) {\n    return integerPart + 1;\n  } else {\n    return integerPart;\n  }\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      pile.push(n + 1);\n      n++;\n    } else {\n      pile.push(n - 1);\n      n--;\n    }\n  }\n  return pile;\n}; // Output: [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295,"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "JavaScript/102", "generation": "\n  if (y % 2 === 0) {\n    return y;\n  } else {\n    return y - 1;\n  }\n}"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // Output: \"0b11\" rounded7 5 -1 rounded10 20 \"01111 rounded20 3311010 */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // Output: \"0b11\" rounded7 5 -1 rounded10 20 \"01111 rounded20 3311010 */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // Output: \"0b11\" rounded7 5 -1 rounded10 20 \"01111 rounded20 3311010 */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // Output: \"0b11\" rounded7 5 -1 rounded10 20 \"01111 rounded20 3311010 */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}; // Output: \"0b11\" rounded7 5 -1 rounded10 20 \"01111 rounded20 3311010 */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = (m + n) * (m - n + 1) / 2"}
{"task_id": "JavaScript/104", "generation": "\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digits = num.toString().split(\"\");\n    const hasEven = digits.some((digit) => parseInt(digit) % 2 === 0);\n    if (!hasEven) {\n      unique.push(num);\n    }\n  }\n  return unique.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/105", "generation": "\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num => {\n    const numStr = num.toString();\n    const numName = {\n      1: \"One\",\n      2: \"Two\",\n      3: \"Three\",\n      4: \"Four\",\n      5: \"Five\",\n      6: \"Six\",\n      7: \"Seven\",\n      8: \"Eight\",\n      9: \"Nine\"\n    };\n    return numStr.split('').map(digit => numName[digit]).join('');\n  });\n  return result;\n}"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}; // Output: [6, 24, 15] */\nconsole.log(f(5)); // Output: [6, 24, 15] */\n"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    if (isPalindrome(str)) {\n      if (isEven(i)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (str) => {\n  const reversed = str.split(\"\").reverse().join(\"\");\n  return str === reversed;\n};\n\nconst isEven = (num) => {\n  return num % 2 === 0;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let num of arr) {\n    let sum = 0;\n    let sign = 1;\n    if (num < 0) {\n      sign = -1;\n      num = num * -1;\n    }\n    while (num > 0) {\n      sum += num % 10 * sign;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}; // Output: 2\nconsole.log(countNums([11, -11, 1, 2])); // Output: 2\nconsole.log(countNums([-1, 2, 3, 4, 5])); // Output: 4\nconsole.log(countNums([10, 20, 30, 40, 50])); // Output: 5\nconsole.log(countNums([-10, -20, -30, -40, -50])); // Output: 5\nconsole.log(countNums([0, 0, 0, 0, 0])); // Output: 0\nconsole.log(countNums([-100, 100, -1000, 1000])); // Output: 4\nconsole.log(countNums([1000, -1000, 10000, -10000])); // Output: 4\nconsole.log(countNums([-10000, 10000, -100000, 100000])); // Output: 4\nconsole.log(countNums([100000, -100000, 1000000, -1000000])); // Output: 4\nconsole.log(countNums([-1000000, 1000000, -10000000, 10000000])); // Output: 4\nconsole.log(countNums([10000000, -10000000, 100000000, -100000000])); // Output: 4\nconsole.log(countNums([-100000000, 100000000, -1000000000, 1000000000])); // Output: 4\nconsole.log(countNums([1000000000, -1000000000, 10000000000, -10000000000])); // Output: 4\nconsole.log(countNums([-10000000000, 10000000000, -100000000000, 100000000000])); // Output: 4"}
{"task_id": "JavaScript/109", "generation": "\n    let n = arr.length;\n    let sorted = [...arr].sort((a, b) => a - b);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] !== sorted[i]) {\n            count++;\n        }\n    }\n    if (count === 0) {\n        return true;\n    }\n    for (let i = 0; i < n; i++) {\n        let temp = [...arr];\n        temp.splice(i, 1);\n        temp.push(arr[i]);\n        let count = 0;\n        for (let j = 0; j < n; j++) {\n            if (temp[j] !== sorted[j]) {\n                count++;\n            }\n        }\n        if (count === 0) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "JavaScript/110", "generation": "\n    let even = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n            even++;\n        }\n    }\n    if (even === lst1.length) {\n        return \"YES\";\n    } else {\n        for (let i = 0; i < lst2.length; i++) {\n            if (lst2[i] % 2 === 0) {\n                lst1.push(lst2[i]);\n            }\n        }\n        let even2 = 0;\n        for (let i = 0; i < lst1.length; i++) {\n            if (lst1[i] % 2 === 0) {\n                even2++;\n            }\n        }\n        if (even2 === lst1.length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}; // eslint-disable-line no-unused-vars\n//# sourceMappingURL=exchange.js.map\n"}
{"task_id": "JavaScript/111", "generation": "\n  let dict = {};\n  let max = 0;\n  let maxList = [];\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] === ' ') {\n      if (count > max) {\n        max = count;\n        maxList = [dict[test[i - count]]];\n      } else if (count === max) {\n        maxList.push(dict[test[i - count]]);\n      }\n      dict = {};\n      count = 0;\n    } else {\n      if (dict[test[i]]) {\n        dict[test[i]] += 1;\n        count += 1;\n      } else {\n        dict[test[i]] = 1;\n        count = 1;\n      }\n    }\n  }\n  if (count > max) {\n    max = count;\n    maxList = [dict[test[test.length - count]]];\n  } else if (count === max) {\n    maxList.push(dict[test[test.length - count]]);\n  }\n  return maxList;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n};\n\nconst isPalindrome = (s) => {\n  let left = 0;\n  let right = s.length - 1;\n  while (left < right) {\n    if (s[left] !== s[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}; // Output: ['bcd', false]\n\n// Task 2\n/* Task We are given a string s and a list of strings words. You should return a list of strings that are substrings of s and are in the list words. */\nconst findWords = (s, words) => {\n  const result = [];\n  for (let word of words) {\n    if (s.includes(word)) {\n      result.push(word);\n    }\n  }\n  return result;\n}; // Output: ['apple', 'banana', 'orange']\n\n// Task 3\n/* Task We are given a string s and a list of strings words. You should return a list of strings that are substrings of s and are in the list words. */\nconst findWords2 = (s, words) => {\n  const result = [];\n  for (let word of words) {\n    if (s.includes(word)) {\n      result.push(word);\n    }\n  }\n  return result;\n}; // Output: ['apple', 'banana', 'orange']\n\n// Task 4\n/* Task We are given a string s and a list of strings words. You should return a list of strings that are substrings of s and are in the list words. */\nconst findWords3 = (s, words) => {\n  const result = [];\n  for (let word of words) {\n    if (s.includes(word)) {\n      result.push(word);\n    }\n  }\n  return result;\n}; // Output: ['apple', 'banana', 'orange']\n\n// Task 5\n/* Task We are given a string s and a list of strings words. You should return a list of strings that are substrings of s and are in the list words. */\nconst findWords4 = (s, words) => {\n  const result = [];\n  for (let word of words) {\n    if (s.includes(word)) {\n      result.push(word);\n    }\n  }\n  return result"}
{"task_id": "JavaScript/113", "generation": "\n    return lst.map(str => {\n        let count = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (parseInt(str[i]) % 2 !== 0) {\n                count++;\n            }\n        }\n        return `the number of odd elements ${count} in the string ${str} of the input.`\n    })\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}"}
{"task_id": "JavaScript/115", "generation": "\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                bucket += 1;\n            } else {\n                if (bucket > 0) {\n                    count += bucket;\n                    bucket = 0;\n                }\n            }\n        }\n        if (bucket > 0) {\n            count += bucket;\n            bucket = 0;\n        }\n    }\n    return count;\n};;const maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let row of grid) {\n        let bucket = 0;\n        for (let cell of row) {\n            if (cell === 1)"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('1').length - 1;\n    const bOnes = b.toString(2).split('1').length - 1;\n    if (aOnes === bOnes) {\n      return a - b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n}"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(' ');\n  const consonants = 'bcdfghjklmnpqrstvwxyz';\n  const result = [];\n\n  for (const word of words) {\n    let count = 0;\n    for (const char of word) {\n      if (consonants.includes(char.toLowerCase())) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  let vowels = \"aeiou\";\n  let wordArray = word.split(\"\");\n  let result = \"\";\n  for (let i = wordArray.length - 1; i > 0; i--) {\n    if (vowels.includes(wordArray[i])) {\n      if (vowels.includes(wordArray[i - 1]) && vowels.includes(wordArray[i + 1])) {\n        result = wordArray[i];\n        break;\n      }\n    }\n  }\n  return result;\n}; // \"u\"\n// console.log(getClosestVowel(\"yogurt\")); // \"u\"\n// console.log(getClosestVowel(\"getquick\")); // \"\"\n// console.log(getClosestVowel(\"ab\")); // \"\"\n// console.log(getClosestVowel(\"getFULL\")); // \"\" */\n/* \nYou are given a string of words separated by spaces. Your task is to find the longest word in the string. \nReturn the longest word. If there are multiple words with the same length, return the first one. \nExample: longestWord(\"I love programming\") ==> \"programming\" longestWord(\"I am a programmer\") ==> \"programmer\" */\nconst longestWord = (str) => {\n  let words = str.split(\" \");\n  let longest = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > longest.length) {\n      longest = words[i];\n    }\n  }\n  return longest;\n}; // \"programming\"\n// console.log(longestWord(\"I love programming\")); // \"programming\"\n// console.log(longestWord(\"I am a programmer\")); // \"programmer\"\n/* \nYou are given a string of words separated by spaces. Your task is to find the shortest word in the string. \nReturn the shortest word. If there are multiple words with the same length, return the first one. \nExample: shortestWord(\"I love programming\") ==> \"I\" shortestWord(\"I am a programmer\") ==> \"a\" */\nconst shortestWord = (str) => {\n  let words = str.split(\" \");\n  let shortest = words[0];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length < shortest.length) {\n      shortest = words[i];\n    }\n  }\n  return shortest;\n}; // \"I\"\n// console.log(shortestWord(\"I love programming\")); // \"I\"\n// console.log(shortestWord(\"I am a programmer\"));"}
{"task_id": "JavaScript/119", "generation": "\n  const stack = [];\n  for (const str of lst) {\n    for (const char of str) {\n      if (char === '(') {\n        stack.push(char);\n      } else if (char === ')') {\n        if (stack.length === 0) {\n          return 'No';\n        } else {\n          stack.pop();\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}; // 1. Create a stack to keep track of the opening parentheses.\n// 2. Iterate over each string in the list.\n// 3. For each string, iterate over each character.\n// 4. If the character is an opening parenthesis, push it onto the stack.\n// 5. If the character is a closing parenthesis, check if the stack is empty. If it is, return 'No' because there's no matching opening parenthesis. If the stack is not empty, pop the opening parenthesis from the stack.\n// 6. After iterating over all characters in all strings, check if the stack is empty. If it is, return 'Yes' because all parentheses are balanced. If the stack is not empty, return 'No' because there are unmatched opening parentheses. */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (const str of lst) {\n    for (const char of str) {\n      if (char === '(') {\n        stack.push(char);\n      } else if (char === ')') {\n        if (stack.length === 0) {\n          return 'No';\n        } else {\n          stack.pop();\n        }\n      }\n    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}; // 1. Create a stack to keep track of the opening parentheses.\n// 2. Iterate over each string in the list.\n// 3. For each string, iterate over each character.\n// 4. If the character is an opening parenthesis, push it onto the stack.\n// 5. If the character is a closing parenthesis, check if the stack is empty. If it is, return 'No' because there's no matching opening parenthesis. If the stack is not empty, pop the opening parenthesis from the stack.\n// 6. After iterating over all characters in all strings, check if the stack is empty. If it is, return 'Yes' because all parentheses are balanced. If the stack is not empty, return 'No' because"}
{"task_id": "JavaScript/120", "generation": "\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "JavaScript/121", "generation": "\n  return lst.filter((_, i) => i % 2 === 0 && lst[i] % 2 !== 0).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const num = arr[i];\n    const str = num.toString();\n    if (str.length === 2) {\n      sum += num;\n    }\n  }\n  return sum;\n};\n// console.log(addElements([111213400056], 4)); // 24\n// console.log(addElements([111213400056], 5)); // 24\n// console.log(addElements([111213400056], 1)); // 0\n// console.log(addElements([111213400056], 3)); // 24\n// console.log(addElements([111213400056], 2)); // 0\n// console.log(addElements([111213400056], 6)); // 24\n// console.log(addElements([111213400056], 7)); // 24\n// console.log(addElements([111213400056], 8)); // 24\n// console.log(addElements([111213400056], 9)); // 24\n// console.log(addElements([111213400056], 10)); // 24\n// console.log(addElements([111213400056], 11)); // 24\n// console.log(addElements([111213400056], 12)); // 24\n// console.log(addElements([111213400056], 13)); // 24\n// console.log(addElements([111213400056], 14)); // 24\n// console.log(addElements([111213400056], 15)); // 24\n// console.log(addElements([111213400056], 16)); // 24\n// console.log(addElements([111213400056], 17)); // 24\n// console.log(addElements([111213400056], 18)); // 24\n// console.log(addElements([111213400056], 19)); // 24\n// console.log(addElements([111213400056], 20)); // 24\n// console.log(addElements([111213400056], 21)); // 24\n// console.log(addElements([111213400056], 22)); // 24\n// console.log(addElements([111213400056], 23)); // 24\n// console.log(addElements([111213400056], 24)); // 24\n// console.log(addElements([111213400056], 25)); // 24\n//"}
{"task_id": "JavaScript/123", "generation": "\n  let sequence = [n];\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = Math.floor(n / 2);\n    } else {\n      n = n * 3 + 1;\n    }\n    sequence.push(n);\n  }\n  return sequence.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const [month, day, year] = date.split(/[-/]/);\n  if (!date) return false;\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11 && day > 30) return false;\n  return true;\n}"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].toLowerCase() === txt[i] && txt[i].charCodeAt(0) % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n}"}
{"task_id": "JavaScript/126", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 > end1 || start2 > end2) {\n    return \"NO\";\n  }\n\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n\n  if (start > end) {\n    return \"NO\";\n  }\n\n  const length = end - start + 1;\n\n  const isPrime = (n) => {\n    if (n <= 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    const sqrt = Math.sqrt(n);\n    for (let i = 3; i <= sqrt; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return isPrime(length) ? \"YES\" : \"NO\";\n}"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) {\n    return null;\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * Math.sign(product);\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const visited = Array.from({ length: n * n }, () => false);\n  const queue = [[0, 0, 0, []]];\n  const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  while (queue.length) {\n    const [x, y, step, path] = queue.shift();\n    if (step === k) return path;\n    for (const [dx, dy] of directions) {\n      const nx = x + dx;\n      const ny = y + dy;\n      if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx * n + ny]) {\n        visited[nx * n + ny] = true;\n        queue.push([nx, ny, step + 1, [...path, grid[nx][ny]]]);\n      }\n    }\n  }\n  return [];\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let result = [1, 3, 2];\n  for (let i = 3; i < n + 1; i++) {\n    if (i % 2 === 0) {\n      result.push(result[i - 1] + result[i - 2]);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + 1);\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let oddDigits = 0;\n  let num = n;\n  while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      oddDigits++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return oddDigits === 0 ? 0 : product;\n}"}
{"task_id": "JavaScript/132", "generation": "\n    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const words = txt.split(\" \");\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord[lastWord.length - 1];\n  return lastChar.match(/[a-zA-Z]/) && !lastWord.match(/[a-zA-Z]/);\n}"}
{"task_id": "JavaScript/135", "generation": "\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n}"}
{"task_id": "JavaScript/136", "generation": "\n    let negative = lst.filter(num => num < 0);\n    let positive = lst.filter(num => num > 0);\n    let largest = Math.max(...lst);\n    let smallest = Math.min(...lst);\n    if (negative.length === 0 && positive.length === 0) {\n        return [null, null];\n    } else if (negative.length === 0) {\n        return [null, smallest];\n    } else if (positive.length === 0) {\n        return [smallest, null];\n    } else {\n        return [largest, smallest];\n    }\n}; // Do not delete this line\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // (7, 1)\nconsole.log(largestSmallestIntegers([-2, -4, -1, -3, -5, -7])); // (None, -1)\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])); // (7, 0)\nconsole.log(largestSmallestIntegers([-2, -4, -1, -3, -5, -7, 0])); // (None, -1) */ // Do not delete this line\n// console.log(largestSmallestIntegers([])); // (None, None) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0, 0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0, 0, 0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0, 0, 0, 0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0, 0, 0, 0, 0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSmallestIntegers([0, 0, 0, 0, 0, 0])); // (None, 0) */ // Do not delete this line\n// console.log(largestSm"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === typeof b) {\n    if (typeof a === \"number\") {\n      return a > b ? a : b;\n    } else {\n      return a > b ? a : b;\n    }\n  } else {\n    return null;\n  }\n}"}
{"task_id": "JavaScript/138", "generation": "\n  let count = 0;\n  for (let i = 2; i <= n; i += 2) {\n    if (n - i >= 0) {\n      count++;\n      n -= i;\n    }\n  }\n  return count === 4;\n}"}
{"task_id": "JavaScript/139", "generation": "\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  let result = \"\";\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === \" \") {\n      count++;\n      if (count === 1) {\n        result += \"_\";\n      } else if (count === 2) {\n        result += \"-\";\n        count = 0;\n      }\n    } else {\n      result += text[i];\n      count = 0;\n    }\n  }\n  return result;\n};\n// test cases\nconsole.log(fixSpaces(\"Example\")); // \"Example\"\nconsole.log(fixSpaces(\"Example 1\")); // \"_1\"\nconsole.log(fixSpaces(\"Example _2\")); // \"-3\"\nconsole.log(fixSpaces(\"Example _2 fix\")); // \"-3\"\nconsole.log(fixSpaces(\"Example _2 fix Example\")); // \"-3\"  "}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*(\\.[a-zA-Z]{3})?$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n}; // console.log(fileNameCheck(\"example.txt\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example.dll\")); // Yes\n// console.log(fileNameCheck(\"file1.example"}
{"task_id": "JavaScript/142", "generation": "\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            sum += lst[i] ** 3;\n        }\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n    const words = sentence.split(' ');\n    const primeLengths = new Set();\n    const isPrime = (n) => {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n    for (const word of words) {\n        if (isPrime(word.length)) primeLengths.add(word);\n    }\n    return primeLengths.values().join(' ');\n};;const wordsInSentence = (sentence) => {\n    const words = sentence.split(' ');\n    const primeLengths = new Set();\n    const isPrime = (n) => {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n    for (const word of words) {\n        if (isPrime(word.length)) primeLengths.add(word);\n    }\n    return primeLengths.values().join(' ');\n};;const wordsInSentence = (sentence) => {\n    const words = sentence.split(' ');\n    const primeLengths = new Set();\n    const isPrime = (n) => {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 === 0 || n % 3 === 0) return false;\n        for (let i = 5; i * i <= n; i += 6) {\n            if (n % i === 0 || n % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n    for (const word of words) {\n        if (isPrime(word.length)) primeLengths.add(word);\n    }\n    return primeLengths.values().join(' ');\n};;const wordsInSentence = ("}
{"task_id": "JavaScript/144", "generation": "\n    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n    const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\n    const xGcd = gcd(xNum, xDen);\n    const nGcd = gcd(nNum, nDen);\n    return (xNum / xGcd) * (nDen / nGcd) === (nNum / nGcd) * (xDen / xGcd);\n};"}
{"task_id": "JavaScript/145", "generation": "\n  const points = nums.map((num, index) => {\n    const sum = num.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    return { num, sum, index };\n  });\n  points.sort((a, b) => a.sum - b.sum || a.index - b.index);\n  return points.map(({ num }) => num);\n}; // eslint-disable-next-line no-undef\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-11, 11, 1, -1, -12]"}
{"task_id": "JavaScript/146", "generation": "\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 2\nconst specialFilter2 = (nums) => {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 3\nconst specialFilter3 = (nums) => {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 4\nconst specialFilter4 = (nums) => {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 5\nconst specialFilter5 = (nums) => {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 6\nconst specialFilter6 = (nums) => {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10 && (num % 10) % 2 !== 0 && (Math.floor(num / 10)) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}; // 1\n\n// 7\nconst specialFilter7 = (nums) => {\n    let count = 0;\n    for (let num of nums"}
{"task_id": "JavaScript/147", "generation": "\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 === 0) {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}; // 1"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n  return planets.slice(start + 1, end).concat(planets.slice(0, start)).concat(planets.slice(end + 1));\n}"}
{"task_id": "JavaScript/149", "generation": "\n    let result = lst.filter(word => word.length % 2 === 0);\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        } else {\n            return a.length - b.length;\n        }\n    });\n    return result;\n};;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5].map(x => x * 2);;[1, 2, 3, 4, 5"}
{"task_id": "JavaScript/150", "generation": "\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, index) => Math.abs(score - guess[index]));\n}; // or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score, index) => Math.abs(score - guess[index]));\n// or return game.map((score,"}
{"task_id": "JavaScript/153", "generation": "\n    let maxStrength = 0;\n    let strongestExt = '';\n    for (let ext of extensions) {\n        let strength = ext.length - ext.toLowerCase().length;\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExt = ext;\n        }\n    }\n    return class_name + '.' + strongestExt;\n}; // do not change this line\n"}
{"task_id": "JavaScript/154", "generation": "\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i))) return true;\n  }\n  return false;\n}; // To fix the bug, we need to add a check to ensure that the second word is not empty before checking its rotations. We can do this by adding a simple if statement at the beginning of the function.\n\nconst cycpatternCheck = (a, b) => {\n  if (b.length === 0) return false; // Check if the second word is empty\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a.includes(b.slice(i) + b.slice(0, i))) return true;\n  }\n  return false;\n}; // Now the function should work correctly and return the expected results. */ </code></pre>\n<p>Explanation:</p>\n<p>The bug in the original code is that it does not check if the second word is empty before trying to check its rotations. This can cause an error when the function is called with an empty string as the second word. To fix this bug, we can add a simple if statement at the beginning of the function to check if the second word is empty. If it is, we can immediately return false. Otherwise, we can proceed with the rest of the function as before.</p>\n<p>With this fix, the function should now work correctly and return the expected results for all inputs.</p> </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</"}
{"task_id": "JavaScript/155", "generation": "\n    let even = 0;\n    let odd = 0;\n    let count = 0;\n    while (num !== 0) {\n        let digit = num % 10;\n        if (digit % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        count++;\n        num = Math.floor(num / 10);\n    }\n    return [even, odd, count];\n}\n\n// Test the function\nconsole.log(evenOddCount(123));  // Output: [ 1, 2, 3 ]\nconsole.log(evenOddCount(-12));  // Output: [ 1, 1, 2 ]  // Corrected output\nconsole.log(evenOddCount(456));  // Output: [ 2, 1, 3 ]  // Corrected output\n"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n\n  let result = \"\";\n  for (const [numeral, value] of Object.entries(romanNumerals)) {\n    while (number >= value) {\n      result += numeral;\n      number -= value;\n    }\n  }\n  return result.toLowerCase();\n}"}
{"task_id": "JavaScript/157", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n  } else {\n    return false;\n  }\n}"}
{"task_id": "JavaScript/158", "generation": "\n    let max = \"\";\n    let maxCount = 0;\n    for (let word of words) {\n        let count = new Set(word).size;\n        if (count > maxCount) {\n            maxCount = count;\n            max = word;\n        } else if (count === maxCount && word < max) {\n            max = word;\n        }\n    }\n    return max;\n}; // \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa */\n// \"string\" find_max([\"name\",of\",string) == \"string findmaxnameenam\",game\"]en findaaaaaaabb\",\"cc\"] \"\"aaaaaaa"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + need;\n  let left = remaining - (total - number);\n  return [total, left];\n}; // Do not change code below this line. */\nmodule.exports = eat; // Do not change code above this line. */\\[\\]\n// Problem:  You're a hungry rabbit, and already eaten a certain number carrots, but now need eat more to complete day's meals\n// you should return an array [ total number eaten carrots after your meals, the left after ] if there not remaining, you will eat all remaining, but will still be hungry\n// Example: \n// eat(5, 6) -> [11, 4]\n// eat(4, 8) -> [12, 0]\n// eat(9, 12) -> [21, 3]\n// eat(1, 10) -> [11, 0]\n// eat(0, 11) -> [11, 0]\n// eat(5, 7) -> [12, 0]\n// eat(7, 5) -> [12, 0]\n// eat(0, 0) -> [0, 0]\n// eat(10, 0) -> [10, 0]\n// eat(0, 5) -> [5, 0]\n// eat(5, 0) -> [5, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, 0]\n// eat(0, 10) -> [10, 0]\n// eat(10, 10) -> [20, "}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      default:\n        return 'Invalid operator';\n    }\n  }\n  return result;\n}"}
{"task_id": "JavaScript/161", "generation": "\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      if (s[i] === s[i].toUpperCase()) {\n        res += s[i].toLowerCase();\n      } else {\n        res += s[i].toUpperCase();\n      }\n    } else {\n      res += s[i];\n    }\n  }\n  return res;\n}; // \"1234\" = \"4321\" \"ab\" = \"AB\" \"a@C\" = \"#Ac\""}
{"task_id": "JavaScript/162", "generation": "\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n}"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"}
