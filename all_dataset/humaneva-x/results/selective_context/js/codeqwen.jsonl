{"task_id": "JavaScript/0", "generation": "\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n    let result = [];\n    let stack = [];\n    let current = '';\n\n    for (let char of paren_string.replace(/\\s/g, '')) {\n        if (char === '(') {\n            stack.push(char);\n            current += char;\n        } else if (char === ')' && stack.length > 0) {\n            stack.pop();\n            current += char;\n            if (stack.length === 0) {\n                result.push(current);\n                current = '';\n            }\n        }\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  const absoluteDeviations = numbers.map((num) => Math.abs(num - mean));\n  return absoluteDeviations.reduce((acc, val) => acc + val, 0) / numbers.length;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  if (numbers.length === 0) {\n    return [];\n  }\n  let result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter, numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentDepth++;\n      maxDepth = Math.max(maxDepth, currentDepth);\n    } else if (paren_string[i] === ')') {\n      currentDepth--;\n    }\n  }\n\n  return maxDepth;\n};"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n}"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}"}
{"task_id": "JavaScript/9", "generation": "\n    let maxSoFar = numbers[0];\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        maxSoFar = Math.max(maxSoFar, numbers[i]);\n        result.push(maxSoFar);\n    }\n    return result;\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reverse = string.split('').reverse().join('');\n  let palindrome = string + reverse.substring(1);\n  return palindrome;\n};"}
{"task_id": "JavaScript/11", "generation": "\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n    if (strings.length === 0) {\n        return null;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let result = [];\n  for (let i = 1; i <= string.length; i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n};"}
{"task_id": "JavaScript/15", "generation": "\n    let result = '';\n    for (let i = 0; i <= n; i++) {\n        result += i + ' ';\n    }\n    return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const uniqueChars = new Set(string.toLowerCase());\n  return uniqueChars.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n    const notes = music_string.split(' ');\n    const beats = notes.map(note => {\n        switch (note) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n            default:\n                return 0;\n        }\n    });\n    return beats;\n}"}
{"task_id": "JavaScript/18", "generation": "\n  if (substring.length === 0) return 0;\n  let count = 0;\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/19", "generation": "\n  const numArray = numbers.split(' ');\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const sortedArray = numArray.sort((a, b) => numMap[a] - numMap[b]);\n  return sortedArray.join(' ');\n};"}
{"task_id": "JavaScript/20", "generation": "\n  let min = Infinity;\n  let closestPair = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min) {\n        min = diff;\n        closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n      }\n    }\n  }\n\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(num => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};"}
{"task_id": "JavaScript/25", "generation": "\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  numbers.forEach((num) => {\n    counts[num] = (counts[num] || 0) + 1;\n  });\n  return numbers.filter((num) => counts[num] === 1);\n};"}
{"task_id": "JavaScript/27", "generation": "\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            result += string[i].toLowerCase();\n        } else {\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter(string => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n    return l.filter(num => num > 0);\n}\nconsole.log(getPositive([-2, -4, 5, 6]))"}
{"task_id": "JavaScript/31", "generation": "\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  let x = 0;\n  let epsilon = 0.0001;\n  let guess = 1;\n  let poly = (x) => {\n    let result = 0;\n    for (let i = 0; i < xs.length; i++) {\n      result += xs[i] * Math.pow(x, i);\n    }\n    return result;\n  };\n  while (true) {\n    let fx = poly(x);\n    let dfx = (poly(x + epsilon) - poly(x - epsilon)) / (2 * epsilon);\n    let newX = x - fx / dfx;\n    if (Math.abs(newX - x) < epsilon) {\n      return newX;\n    }\n    x = newX;\n  }\n}"}
{"task_id": "JavaScript/33", "generation": "\n    let thirds = [];\n    let others = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            thirds.push(l[i]);\n        } else {\n            others.push(l[i]);\n        }\n    }\n    thirds.sort((a, b) => a - b);\n    let result = [];\n    let thirdIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result.push(thirds[thirdIndex]);\n            thirdIndex++;\n        } else {\n            result.push(others[i - thirdIndex * 3]);\n        }\n    }\n    return result;\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!uniqueList.includes(l[i])) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nconsole.log(maxElement([1, 3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 123])); // Output: 123\n/* Return minimum element in the list.>>> minElement([1 3 >>>5 3 -5, 2, -3, 3, 9, 0 123, 1 -10 123 */\nconst minElement = (l) => {\n    let min = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n    return min;\n}\nconsole.log(minElement([1, 3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 123])); // Output: -10\n/* Return sum of all elements in the list.>>> sumOfList([1 3 >>>5 3 -5, 2, -3, 3, 9, 0 123, 1 -10 123 */\nconst sumOfList = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n}\nconsole.log(sumOfList([1, 3, 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 123])); // Output: 146\n/* Return average of all elements in the list.>>> averageOfList([1 3 >>>5 3 -5, 2, -3, 3, 9, 0 123, 1 -10 123 */\nconst averageOfList = (l)"}
{"task_id": "JavaScript/36", "generation": "\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')) {\n            count += i.toString().split('').filter(digit => digit === '7').length;\n        }\n    }\n    return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n    let evenInd = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenInd.push(l[i]);\n    }\n    evenInd.sort((a, b) => a - b);\n    let lPrime = [];\n    for (let i = 0, j = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            lPrime.push(evenInd[j++]);\n        } else {\n            lPrime.push(l[i]);\n        }\n    }\n    return lPrime;\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.substring(i, i + 3);\n    if (group.length === 3) {\n      const [a, b, c] = group.split('');\n      decoded += `${c}${a}${b}`;\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;"}
{"task_id": "JavaScript/39", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  const fib = (num) => {\n    let a = 0;\n    let b = 1;\n    let fibNum = 0;\n    for (let i = 2; i <= num; i++) {\n      fibNum = a + b;\n      a = b;\n      b = fibNum;\n    }\n    return fibNum;\n  };\n\n  let count = 0;\n  let i = 1;\n  let fibNum = 0;\n  while (true) {\n    fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) {\n        return fibNum;\n      }\n    }\n    i++;\n  }\n};"}
{"task_id": "JavaScript/40", "generation": "\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        while (left < right) {\n            let sum = l[i] + l[left] + l[right];\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(x => x + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n    let seen = new Set();\n    for (let num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}"}
{"task_id": "JavaScript/44", "generation": "\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/45", "generation": "\n    return 0.5 * a * h;\n}\nconsole.log(triangleArea(3, 7)); // 10.5"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n\n  let a = 0, b = 0, c = 2, d = 0, e;\n  for (let i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return d;\n};"}
{"task_id": "JavaScript/47", "generation": "\n  l.sort((a, b) => a - b);\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "JavaScript/48", "generation": "\n  return text === text.split('').reverse().join('');\n};"}
{"task_id": "JavaScript/49", "generation": "\n    let result = 1;\n    let base = 2;\n\n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n\n    return result;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i++) {\n    let charCode = s.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode((charCode - 65 - 5 + 26) % 26 + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode((charCode - 97 - 5 + 26) % 26 + 97);\n    } else {\n      decoded += s.charAt(i);\n    }\n  }\n  return decoded;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n    return l.every(num => num < t);\n}"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const set0 = new Set(s0);\n  const set1 = new Set(s1);\n  for (let char of set0) {\n    if (!set1.has(char)) {\n      return false;\n    }\n  }\n  for (let char of set1) {\n    if (!set0.has(char)) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fib1 = (n) => {\n  let fibNums = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n  }\n  return fibNums[n];\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  let inc = true;\n  let dec = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      dec = false;\n    } else if (l[i] > l[i + 1]) {\n      inc = false;\n    }\n  }\n  return inc || dec;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = new Set([...set1].filter(x => set2.has(x)));\n  return [...intersection].sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let factor = 2;\n  let lastFactor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      lastFactor = factor;\n      n /= factor;\n      while (n % factor === 0) {\n        n /= factor;\n      }\n    }\n    factor === 2 ? factor++ : factor += 2;\n  }\n  return lastFactor;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  return xs.map((x, i) => x * i).slice(1);\n};\n\nconst derivative1 = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  let a = 0, b = 0, c = 1, d = 1, e = 2;\n  for (let i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;\n}"}
{"task_id": "JavaScript/64", "generation": "\n  let count = 0;\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  let str = x.toString();\n  let len = str.length;\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  } else {\n    return str.slice(-shift) + str.slice(0, len - shift);\n  }\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n}"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = Infinity;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n  if (smallestEven === Infinity) {\n    return [];\n  }\n  return [smallestEven, index];\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let freq = {};\n  lst.forEach((num) => {\n    freq[num] = (freq[num] || 0) + 1;\n  });\n  let result = -1;\n  for (let num in freq) {\n    if (num <= freq[num] && num > result) {\n      result = num;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/70", "generation": "\n    let result = [];\n    while (lst.length > 0) {\n        result.push(Math.min(...lst));\n        lst.splice(lst.indexOf(Math.min(...lst)), 1);\n        if (lst.length > 0) {\n            result.push(Math.max(...lst));\n            lst.splice(lst.indexOf(Math.max(...lst)), 1);\n        }\n    }\n    return result;\n}\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([])); // []\nconsole.log(strangeSortList([10, 2, 14, 4, 7])); // [2, 14, 4, 10, 7]\nconsole.log(strangeSortList([-2, -3, -1, -4])); // [-4, -1, -3, -2]\nconsole.log(strangeSortList([0, 0, 0, 0])); // [0, 0, 0, 0]\nconsole.log(strangeSortList([1])); // [1]\nconsole.log(strangeSortList([2, 2])); // [2, 2]\nconsole.log(strangeSortList([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])); // [1, 9, 1, 6, 2, 5, 3, 5, 4, 5, 3]\nconsole.log(strangeSortList([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 3])); // [1, 9, 1, 6, 2, 5, 3, 5, 4, 5, 3]\nconsole.log(strangeSortList(["}
{"task_id": "JavaScript/71", "generation": "\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area.toFixed(2);\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "JavaScript/72", "generation": "\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && q.toString() === q.reverse().toString();\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let changes = 0;\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      changes++;\n    }\n    left++;\n    right--;\n  }\n\n  return changes;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const countChars = lst => lst.reduce((acc, str) => acc + str.length, 0);\n  return countChars(lst1) < countChars(lst2) ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  };\n\n  let count = 0;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && isPrime(i)) {\n      count++;\n    }\n  }\n  return count === 3;\n};"}
{"task_id": "JavaScript/76", "generation": "\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power === x;\n}"}
{"task_id": "JavaScript/77", "generation": "\n  let cubeRoot = Math.round(Math.pow(Math.abs(a), 1/3));\n  return Math.pow(cubeRoot, 3) === Math.abs(a);\n};"}
{"task_id": "JavaScript/78", "generation": "\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D') {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = '';\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A+';\n        if (grade > 3.7) return 'A';\n        if (grade > 3.3) return 'A-';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.7) return 'B';\n        if (grade > 2.3) return 'B-';\n        if (grade > 2.0) return 'C+';\n        if (grade > 1.7) return 'C';\n        if (grade > 1.3) return 'C-';\n        if (grade > 1.0) return 'D+';\n        if (grade > 0.7) return 'D';\n        if (grade > 0.0) return 'D-';\n        return 'E';\n    });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  return isPrime(string.length);\n};"}
{"task_id": "JavaScript/83", "generation": "\n    if (n === 1) return 1;\n    return 18 * Math.pow(10, n - 2);\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "JavaScript/85", "generation": "\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "JavaScript/86", "generation": "\n  let words = s.split(' ');\n  let orderedWords = words.map((word) => {\n    let chars = word.split('');\n    chars.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n    return chars.join('');\n  });\n  let orderedString = orderedWords.join(' ');\n  let result = '';\n  let i = 0;\n  for (let char of s) {\n    if (char === ' ') {\n      result += char;\n    } else {\n      result += orderedString[i];\n      i++;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return res;\n};"}
{"task_id": "JavaScript/88", "generation": "\n  // Clone the array to avoid modifying the original array\n  const clonedArray = [...array];\n  // Determine the sorting order based on the sum of the first and last elements\n  const isOdd = (clonedArray[0] + clonedArray[clonedArray.length - 1]) % 2 !== 0;\n  // Sort the array in ascending order if the sum is odd, otherwise sort it in descending order\n  clonedArray.sort((a, b) => isOdd ? a - b : b - a);\n  return clonedArray;\n}"}
{"task_id": "JavaScript/89", "generation": "\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char === ' ') {\n      encrypted += char;\n    } else {\n      let index = alphabet.indexOf(char.toLowerCase());\n      let newIndex = (index + 4) % 26;\n      let newChar = alphabet[newIndex];\n      encrypted += char === char.toUpperCase() ? newChar.toUpperCase() : newChar;\n    }\n  }\n  return encrypted;\n};"}
{"task_id": "JavaScript/90", "generation": "\n  if (lst.length < 2) {\n    return null;\n  }\n  let min1 = lst[0];\n  let min2 = Infinity;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min1) {\n      min2 = min1;\n      min1 = lst[i];\n    } else if (lst[i] < min2 && lst[i] !== min1) {\n      min2 = lst[i];\n    }\n  }\n  return min2 === Infinity ? null : min2;\n};"}
{"task_id": "JavaScript/91", "generation": "\n    let boredom = 0;\n    let sentences = S.split(/[\\.\\?\\!]\\s*/);\n    for (let sentence of sentences) {\n        if (sentence.startsWith(\"I\")) {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nconsole.log(isBored(\"Hello world 0The sky.The sun is shining.I love this weather\")) // 1\nconsole.log(isBored(\"I am happy.You are happy.We are happy\")) // 3\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy\")) // 2\nconsole.log(isBored(\"You are happy.We are happy.I am not happy\")) // 1\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy.I am not happy at all\")) // 3\nconsole.log(isBored(\"You are happy.We are happy.I am not happy.I am not happy at all.I am not happy at all at all\")) // 4\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy.I am not happy at all.I am not happy at all at all.I am not happy at all at all at all\")) // 5\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy.I am not happy at all.I am not happy at all at all.I am not happy at all at all at all.I am not happy at all at all at all at all\")) // 6\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy.I am not happy at all.I am not happy at all at all.I am not happy at all at all at all.I am not happy at all at all at all at all.I am not happy at all at all at all at all at all\")) // 7\nconsole.log(isBored(\"I am happy.You are happy.We are happy.I am not happy.I am not happy at all.I am not happy at all at all.I am not happy at all at all"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z || y === x + z || z === x + y;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n\n    // Swap case\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n\n    // Replace vowels\n    if (vowels.includes(char.toLowerCase())) {\n      let vowelIndex = alphabet.indexOf(char.toLowerCase());\n      let newVowelIndex = (vowelIndex + 2) % 26;\n      let newVowel = alphabet[newVowelIndex];\n      char = char === char.toUpperCase() ? newVowel.toUpperCase() : newVowel;\n    }\n\n    encodedMessage += char;\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let maxPrime = 0;\n  for (let num of lst) {\n    if (isPrime(num) && num > maxPrime) maxPrime = num;\n  }\n\n  return maxPrime.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};"}
{"task_id": "JavaScript/95", "generation": "\n    let allLower = true;\n    let allUpper = true;\n    for (let key in dict) {\n        if (typeof key === 'string') {\n            if (!key.toLowerCase() === key) {\n                allLower = false;\n            }\n            if (!key.toUpperCase() === key) {\n                allUpper = false;\n            }\n        }\n    }\n    return allLower || allUpper;\n}"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let num1 = a % 10;\n  let num2 = b % 10;\n  return num1 * num2;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if ('AEIOU'.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n\n  return num - floor < ceil - num ? floor : ceil;\n};"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let current = n;\n  for (let i = 0; i < n; i++) {\n    result.push(current);\n    current += n % 2 === 0 ? 2 : 1;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[\\s,]+/).filter(Boolean);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  let result = -1;\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return `0b${avg.toString(2)}`;\n};"}
{"task_id": "JavaScript/104", "generation": "\n    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        let num = x[i];\n        let hasEven = false;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 === 0) {\n                hasEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (!hasEven) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/105", "generation": "\n  return arr.sort((a, b) => a.toString().length - b.toString().length);\n};\n\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst reverseArray = (arr) => {\n  return arr.reverse();\n};\n\nconst replaceNumbers = (arr) => {\n  const numbers = [\n    \"\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  return arr.map((num) => numbers[num]);\n};\n\nconst sortAndReverse = (arr) => {\n  const sorted = sortArray(arr);\n  const reversed = reverseArray(sorted);\n  const replaced = replaceNumbers(reversed);\n  return replaced;\n};\n\nconst strangeSortArray = (arr) => {\n  const filtered = arr.filter((num) => num >= 1 && num <= 9);\n  const sorted = sortAndReverse(filtered);\n  return sorted;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sumNumbers(i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst sumNumbers = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (num) => {\n  const str = num.toString();\n  const reversedStr = str.split(\"\").reverse().join(\"\");\n  return str === reversedStr;\n};"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = Math.abs(arr[i]);\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  if (count > 1) return false;\n  return true;\n}"}
{"task_id": "JavaScript/110", "generation": "\n  let oddNum = lst1.filter(num => num % 2 !== 0);\n  let evenNum = lst2.filter(num => num % 2 === 0);\n  if (oddNum.length <= evenNum.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "JavaScript/111", "generation": "\n  const result = {};\n  const arr = test.split(' ').filter(Boolean);\n  arr.forEach((el) => {\n    if (result[el]) {\n      result[el] += 1;\n    } else {\n      result[el] = 1;\n    }\n  });\n  const max = Math.max(...Object.values(result));\n  const keys = Object.keys(result).filter((key) => result[key] === max);\n  const finalResult = {};\n  keys.forEach((key) => {\n    finalResult[key] = max;\n  });\n  return finalResult;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  let reversed = result.split('').reverse().join('');\n  return [result, result === reversed];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    const oddCount = [...str].filter((digit) => parseInt(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < grid[i].length; j++) {\n      sum += grid[i][j];\n    }\n    count += Math.ceil(sum / capacity);\n  }\n  return count;\n}"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).split('').filter(char => char === '1').length;\n    const bOnes = b.toString(2).split('').filter(char => char === '1').length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  // Split the string into words\n  const words = s.split(' ');\n  // Filter the words to only include those with exactly n consonants\n  const filteredWords = words.filter(word => {\n    // Remove non-letter characters and convert to lowercase\n    const letters = word.replace(/[^a-zA-Z]/g, '').toLowerCase();\n    // Count the consonants in the word\n    const consonantCount = letters.split('').filter(letter => 'bcdfghjklmnpqrstvwxyz'.includes(letter)).length;\n    // Return true if the word has exactly n consonants, false otherwise\n    return consonantCount === n;\n  });\n  // Return the filtered words\n  return filteredWords;\n}"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  let closestVowel = '';\n  let foundVowel = false;\n\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n      closestVowel = word[i];\n      foundVowel = true;\n      break;\n    }\n  }\n\n  return foundVowel ? closestVowel : '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '(') {\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  return open === close ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  // sort the array in descending order\n  arr.sort((a, b) => b - a);\n  // slice the first k elements from the sorted array\n  const result = arr.slice(0, k);\n  // return the result\n  return result;\n}"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        let num = arr[i].toString();\n        for (let j = 0; j < num.length; j++) {\n            if (num[j] !== '0') {\n                sum += parseInt(num[j]);\n            }\n        }\n    }\n    return sum;\n}\nconsole.log(addElements([111213400056], 4)); // Output: 24\nconsole.log(addElements([111213400056, 222334455566], 6)); // Output: 45\nconsole.log(addElements([111213400056, 222334455566, 333445566677], 9)); // Output: 135\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788], 12)); // Output: 189\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788, 555667788899], 15)); // Output: 243\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788, 555667788899, 666778899000], 18)); // Output: 297\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788, 555667788899, 666778899000, 777889990011], 21)); // Output: 351\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788, 555667788899, 666778899000, 777889990011, 88889999001122], 24)); // Output: 375\nconsole.log(addElements([111213400056, 222334455566, 333445566677, 444556677788, 555667788899, 666778899000, 777889990011, 88889999001122, 99999001122333], 27)); // Output: 399\nconsole.log(addElements([111"}
{"task_id": "JavaScript/123", "generation": "\n  let arr = [];\n  while (n != 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      arr.push(n);\n      n = 3 * n + 1;\n    }\n  }\n  arr.push(1);\n  return arr.sort((a, b) => a - b);\n}"}
{"task_id": "JavaScript/124", "generation": "\n  const [month, day, year] = date.split('-');\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const thirtyOneDayMonths = [1, 3, 5, 7, 8, 10, 12];\n  const thirtyDayMonths = [4, 6, 9, 11];\n  const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 31) return false;\n  if (months.includes(Number(month))) {\n    if (day < 1 || day > 31) return false;\n  } else if (thirtyOneDayMonths.includes(Number(month))) {\n    if (day < 1 || day > 31) return false;\n  } else if (thirtyDayMonths.includes(Number(month))) {\n    if (day < 1 || day > 30) return false;\n  } else if (month === 2) {\n    if (isLeapYear) {\n      if (day < 1 || day > 29) return false;\n    } else {\n      if (day < 1 || day > 28) return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  } else {\n    return [...txt].filter((char) => (char.charCodeAt(0) - 97) % 2 === 1).length;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n    let count = 0;\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n        if (lst[i] === lst[i + 1]) {\n            count++;\n        }\n    }\n    return count === 0;\n}"}
{"task_id": "JavaScript/127", "generation": "\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  if (start > end) {\n    return \"NO\";\n  }\n  const length = end - start + 1;\n  return isPrime(length) ? \"YES\" : \"NO\";\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    product *= Math.abs(arr[i]);\n    sum += Math.sign(arr[i]);\n  }\n  return product * sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const N = grid.length;\n  const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n  const visited = new Set();\n  const queue = [[grid[0][0], [grid[0][0]], 0]];\n  while (queue.length > 0) {\n    const [value, path, steps] = queue.shift();\n    if (steps === k) return path;\n    for (const [dx, dy] of directions) {\n      const x = value[0] + dx;\n      const y = value[1] + dy;\n      if (x >= 0 && x < N && y >= 0 && y < N && !visited.has(`${x},${y}`)) {\n        visited.add(`${x},${y}`);\n        queue.push([[x, y], [...path, grid[x][y]], steps + 1]);\n      }\n    }\n  }\n}"}
{"task_id": "JavaScript/130", "generation": "\n  let arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + 1);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n  }\n  return arr;\n}"}
{"task_id": "JavaScript/131", "generation": "\n  let product = 1;\n  let hasOdd = false;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n      hasOdd = true;\n    }\n    n = Math.floor(n / 10);\n  }\n  return hasOdd ? product : 0;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let stack = [];\n  let nested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']' && stack.length > 0) {\n      stack.pop();\n      nested = true;\n    }\n  }\n  return nested && stack.length === 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n    return lst.reduce((a, b) => a + Math.pow(Math.ceil(b), 2), 0);\n}\nconsole.log(sumSquares([1, 2])); // 14\nconsole.log(sumSquares([149])); // 98\nconsole.log(sumSquares([135.7])); // 84\nconsole.log(sumSquares([1.44, 2.0])); // 29\nconsole.log(sumSquares([-2.41, 1])); // 6\nconsole.log(sumSquares([1.0, 4.0, 9.0])); // 98\nconsole.log(sumSquares([1, 3, 5, 7])); // 84\nconsole.log(sumSquares([1.4, 4.2, 0])); // 29\nconsole.log(sumSquares([-2.4, 1.0, 1.0])); // 6\nconsole.log(sumSquares([1.0, 3.0, 5.0, 7.0])); // 84\nconsole.log(sumSquares([1.4, 4.2, 0.0])); // 29\nconsole.log(sumSquares([-2.4, 1.0, 1.0])); // 6\nconsole.log(sumSquares([1.0, 3.0, 5.0, 7.0])); // 84\nconsole.log(sumSquares([1.4, 4.2, 0.0])); // 29\nconsole.log(sumSquares([-2.4, 1.0, 1.0])); // 6\nconsole.log(sumSquares([1.0, 3.0, 5.0, 7.0])); // 84\nconsole.log(sumSquares([1.4, 4.2, 0.0])); // 29\nconsole.log(sumSquares([-2.4, 1.0, 1.0])); // 6\nconsole."}
{"task_id": "JavaScript/134", "generation": "\n  // Check if the last character is an alphabetical character\n  if (/[a-zA-Z]$/.test(txt)) {\n    // Check if the last character is not part of a word\n    if (/[^a-zA-Z]/.test(txt.charAt(txt.length - 2))) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let max = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  for (let i = index - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      return -1;\n    }\n  }\n  return index;\n}"}
{"task_id": "JavaScript/136", "generation": "\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  lst.forEach((num) => {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    } else if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  });\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "JavaScript/137", "generation": "\n  let numA = Number(a.replace(\",\", \".\"));\n  let numB = Number(b.replace(\",\", \".\"));\n  if (numA > numB) return numA;\n  else if (numA < numB) return numB;\n  else return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  // Check if the number is even and greater than or equal to 8\n  if (n % 2 === 0 && n >= 8) {\n    // Check if the number minus 8 is even\n    return (n - 8) % 2 === 0;\n  }\n  // If the number is not even or less than 8, return false\n  return false;\n}"}
{"task_id": "JavaScript/139", "generation": "\n    let result = 1;\n    for(let i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n\nconst brazilFact = (n) => {\n    let result = 1;\n    for(let i = 1; i <= n; i++){\n        result *= specialFactorial(i);\n    }\n    return result;\n}"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/ /g, \"_\").replace(/_+/g, (match) => {\n    return match.length > 2 ? \"-\" : match.replace(/ /g, \"_\");\n  });\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const validExtensions = ['txt', 'exe', 'dll'];\n  const parts = file_name.split('.');\n  const namePart = parts[0];\n  const extensionPart = parts[1];\n\n  // Check if there are more than three digits in the name part\n  if (/[0-9]{4,}/.test(namePart)) {\n    return 'No';\n  }\n\n  // Check if the name part is empty or starts with a non-letter character\n  if (!namePart || !/^[a-zA-Z]/.test(namePart[0])) {\n    return 'No';\n  }\n\n  // Check if there is exactly one dot in the file name\n  if (parts.length !== 2) {\n    return 'No';\n  }\n\n  // Check if the extension part is one of the valid extensions\n  if (!validExtensions.includes(extensionPart)) {\n    return 'No';\n  }\n\n  return 'Yes';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if (i % 4 === 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(' ');\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n  const primeLengthWords = words.filter((word) => isPrime(word.length));\n  return primeLengthWords.join(' ');\n}"}
{"task_id": "JavaScript/144", "generation": "\n  const xNumerator = parseInt(x.split('/')[0]);\n  const xDenominator = parseInt(x.split('/')[1]);\n  const nNumerator = parseInt(n.split('/')[0]);\n  const nDenominator = parseInt(n.split('/')[1]);\n\n  const resultNumerator = xNumerator * nNumerator;\n  const resultDenominator = xDenominator * nDenominator;\n\n  return resultNumerator % resultDenominator === 0;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  return nums.sort((a, b) => {\n    const sumDigits = (num) => {\n      return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    };\n\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]);\n    let firstDigit = parseInt(num.toString().charAt(0));\n    let lastDigit = parseInt(num.toString().charAt(num.toString().length - 1));\n    if (num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "JavaScript/147", "generation": "\n  let a = [];\n  let tri = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if ((a[i] + a[j]) % 3 === 0) {\n        tri++;\n      }\n    }\n  }\n  return tri;\n}"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) return [];\n  if (index1 > index2) [index1, index2] = [index2, index1];\n  return planets.slice(index1 + 1, index2);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  // Filter out strings with odd lengths\n  const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n  \n  // Sort the filtered strings by length, then alphabetically\n  evenLengthStrings.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b); // Alphabetical sorting\n    }\n    return a.length - b.length; // Sort by length\n  });\n  \n  return evenLengthStrings;\n}"}
{"task_id": "JavaScript/150", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  return isPrime(n) ? x : y;\n};"}
{"task_id": "JavaScript/151", "generation": "\n    return lst.reduce((a, b) => {\n        if (b > 0 && b % 2 !== 0) {\n            return a + b * b;\n        }\n        return a;\n    }, 0);\n};"}
{"task_id": "JavaScript/152", "generation": "\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}"}
{"task_id": "JavaScript/153", "generation": "\n  let strongest = '';\n  let max = -Infinity;\n  for (let extension of extensions) {\n    let cap = (extension.match(/[A-Z]/g) || []).length;\n    let sm = (extension.match(/[a-z]/g) || []).length;\n    let strength = cap - sm;\n    if (strength > max) {\n      strongest = extension;\n      max = strength;\n    }\n  }\n  return `${class_name}.${strongest.slice(0, 1)}${strongest.slice(-1)}`;\n}"}
{"task_id": "JavaScript/154", "generation": "\n  let bLength = b.length;\n  let aLength = a.length;\n  let bRotated = b;\n\n  for (let i = 0; i < bLength; i++) {\n    bRotated = bRotated.slice(1) + bRotated.charAt(0);\n    if (a.includes(bRotated)) {\n      return true;\n    }\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let even = 0;\n  let odd = 0;\n  let digits = Math.abs(num).toString().split('');\n  digits.forEach((digit) => {\n    if (parseInt(digit) % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  });\n  return [even, odd];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const romanNumerals = [\n    { value: 1000, symbol: 'm' },\n    { value: 900, symbol: 'cm' },\n    { value: 500, symbol: 'd' },\n    { value: 400, symbol: 'cd' },\n    { value: 100, symbol: 'c' },\n    { value: 90, symbol: 'xc' },\n    { value: 50, symbol: 'l' },\n    { value: 40, symbol: 'xl' },\n    { value: 10, symbol: 'x' },\n    { value: 9, symbol: 'ix' },\n    { value: 5, symbol: 'v' },\n    { value: 4, symbol: 'iv' },\n    { value: 1, symbol: 'i' },\n  ];\n\n  let roman = '';\n\n  for (let i = 0; i < romanNumerals.length; i++) {\n    while (number >= romanNumerals[i].value) {\n      roman += romanNumerals[i].symbol;\n      number -= romanNumerals[i].value;\n    }\n  }\n\n  return roman;\n};"}
{"task_id": "JavaScript/157", "generation": "\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}"}
{"task_id": "JavaScript/158", "generation": "\n  let maxUnique = 0;\n  let maxWord = \"\";\n  words.forEach((word) => {\n    const uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUnique || (uniqueChars === maxUnique && word < maxWord)) {\n      maxUnique = uniqueChars;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + Math.min(need, remaining);\n  let left = Math.max(remaining - need, 0);\n  return [total, left];\n}"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n      default:\n        throw new Error('Invalid operator');\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result.split(\"\").reverse().join(\"\");\n}"}
{"task_id": "JavaScript/162", "generation": "\n    if (text === '') {\n        return null;\n    }\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5').update(text).digest('hex');\n    return hash;\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let arr = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}"}
