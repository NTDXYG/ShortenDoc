{"task_id": "JavaScript/0", "generation": "\n    numbers.sort((a, b) => a - b);\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (numbers[i + 1] - numbers[i] < threshold) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "JavaScript/1", "generation": "\n  let stack = [];\n  let groups = [];\n  let group = '';\n  for (let char of paren_string) {\n    if (char === '(') {\n      stack.push(char);\n      group += char;\n    } else if (char === ')') {\n      stack.pop();\n      group += char;\n      if (stack.length === 0) {\n        groups.push(group);\n        group = '';\n      }\n    } else if (char === ' ') {\n      if (group) {\n        groups.push(group);\n        group = '';\n      }\n    }\n  }\n  return groups;\n};"}
{"task_id": "JavaScript/2", "generation": "\n  return number - Math.floor(number);\n};"}
{"task_id": "JavaScript/3", "generation": "\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/4", "generation": "\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  const differences = numbers.map((val) => Math.abs(val - mean));\n  const mad = differences.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return mad;\n};"}
{"task_id": "JavaScript/5", "generation": "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/6", "generation": "\n  let maxDepth = 0;\n  let currentDepth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      currentDepth++;\n      if (currentDepth > maxDepth) {\n        maxDepth = currentDepth;\n      }\n    } else if (paren_string[i] === ')') {\n      currentDepth--;\n    }\n  }\n  return maxDepth;\n}"}
{"task_id": "JavaScript/7", "generation": "\n  return strings.filter(string => string.includes(substring));\n};"}
{"task_id": "JavaScript/8", "generation": "\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return (sum, product);\n};"}
{"task_id": "JavaScript/9", "generation": "\n  let max = numbers[0];\n  return numbers.map((number) => {\n    max = Math.max(max, number);\n    return max;\n  });\n};"}
{"task_id": "JavaScript/10", "generation": "\n  let reversed = string.split('').reverse().join('');\n  for (let i = string.length; i >= 0; i--) {\n    if (string.substr(0, i) === reversed.substr(reversed.length - i)) {\n      return string + reversed.substr(0, reversed.length - i);\n    }\n  }\n};"}
{"task_id": "JavaScript/11", "generation": "\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/12", "generation": "\n  if (strings.length === 0) return null;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};"}
{"task_id": "JavaScript/13", "generation": "\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};"}
{"task_id": "JavaScript/14", "generation": "\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};"}
{"task_id": "JavaScript/15", "generation": "\n  let result = '';\n  for (let i = n; i >= 0; i--) {\n    result += i + ' ';\n  }\n  return result.trim();\n};"}
{"task_id": "JavaScript/16", "generation": "\n  const distinctCharacters = new Set(string.toLowerCase().split(''));\n  return distinctCharacters.size;\n};"}
{"task_id": "JavaScript/17", "generation": "\n  const notes = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1,\n    '>>>': 1,\n    '...': 1,\n    '....': 1,\n  }\n  return music_string.split(' ').map(note => notes[note]);\n}"}
{"task_id": "JavaScript/18", "generation": "\n  let count = 0;\n  let position = 0;\n\n  while (true) {\n    position = string.indexOf(substring, position);\n    if (position !== -1) {\n      count++;\n      position++;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/19", "generation": "\n  const nums = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n  return numbers\n    .split(\" \")\n    .sort((a, b) => nums[a] - nums[b])\n    .join(\" \");\n};"}
{"task_id": "JavaScript/20", "generation": "\n  numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let closestPair = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      closestPair = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closestPair;\n};"}
{"task_id": "JavaScript/21", "generation": "\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((num) => (num - min) / range);\n};"}
{"task_id": "JavaScript/22", "generation": "\n  return values.filter(value => Number.isInteger(value));\n}"}
{"task_id": "JavaScript/23", "generation": "\n  let count = 0;\n  for (let i = 0; string[i] !== undefined; i++) {\n    count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/24", "generation": "\n  let largestDivisor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      if (n / i === i) {\n        largestDivisor = i;\n      } else {\n        largestDivisor = i;\n        largestDivisor = n / i;\n      }\n    }\n  }\n  return largestDivisor;\n};"}
{"task_id": "JavaScript/25", "generation": "\n  const factors = [];\n  for (let divisor = 2; n > 1; divisor++) {\n    while (n % divisor === 0) {\n      factors.push(divisor);\n      n /= divisor;\n    }\n  }\n  return factors;\n};"}
{"task_id": "JavaScript/26", "generation": "\n  const counts = {};\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (counts[numbers[i]]) {\n      counts[numbers[i]]++;\n    } else {\n      counts[numbers[i]] = 1;\n      result.push(numbers[i]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/27", "generation": "\n  let flipped = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      flipped += string[i].toUpperCase();\n    } else {\n      flipped += string[i].toLowerCase();\n    }\n  }\n  return flipped;\n};"}
{"task_id": "JavaScript/28", "generation": "\n  return strings.join('');\n};"}
{"task_id": "JavaScript/29", "generation": "\n  return strings.filter((string) => string.startsWith(prefix));\n};"}
{"task_id": "JavaScript/30", "generation": "\n  return l.filter((num) => num > 0);\n};"}
{"task_id": "JavaScript/31", "generation": "\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/32", "generation": "\n  const f = (x) => xs.reduce((acc, coef, i) => acc + coef * Math.pow(x, i), 0);\n  const df = (x) => xs.slice(1).reduce((acc, coef, i) => acc + (i + 1) * coef * Math.pow(x, i), 0);\n  let x = 0;\n  for (let i = 0; i < 1000; i++) {\n    if (Math.abs(f(x)) < 1e-6) {\n      return x;\n    }\n    x = x - f(x) / df(x);\n  }\n  throw new Error('Did not converge');\n};"}
{"task_id": "JavaScript/33", "generation": "\n  const thirds = l.filter((_, i) => (i + 1) % 3 === 0);\n  thirds.sort((a, b) => a - b);\n  return l.map((v, i) => (i + 1) % 3 === 0 ? thirds.shift() : v);\n};"}
{"task_id": "JavaScript/34", "generation": "\n  let result = [];\n  l.forEach((subArr) => {\n    subArr.forEach((num) => {\n      if (!result.includes(num)) {\n        result.push(num);\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/35", "generation": "\n  return Math.max(...l);\n};"}
{"task_id": "JavaScript/36", "generation": "\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().match(/7/g) || []).length;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/37", "generation": "\n  const evenIndices = l.filter((_, index) => index % 2 === 0);\n  const sortedEvenIndices = evenIndices.sort((a, b) => a - b);\n\n  return l.map((_, index) =>\n    index % 2 === 0 ? sortedEvenIndices.shift() : l[index]\n  );\n};"}
{"task_id": "JavaScript/38", "generation": "\n  let decoded = '';\n  for (let i = 0; i < s.length; i += 3) {\n    const charCode = parseInt(s.slice(i, i + 3), 10);\n    decoded += String.fromCharCode(charCode);\n  }\n  return decoded;\n};\n\nexport default decodeCyclic;\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../redux/actions/auth';\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    dispatch(login({ username, password }, navigate));\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../redux/actions/auth';\n\nconst Register = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (e"}
{"task_id": "JavaScript/39", "generation": "\n  let fib = [0, 1];\n  let prime = [2];\n  let i = 2;\n  while (prime.length < n) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n    if (isPrime(fib[i])) {\n      prime.push(fib[i]);\n    }\n    i++;\n  }\n  return prime[n - 1];\n};\n\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/40", "generation": "\n  l.sort((a, b) => a - b);\n  for (let i = 0; i < l.length - 2; i++) {\n    let start = i + 1;\n    let end = l.length - 1;\n    while (start < end) {\n      let sum = l[i] + l[start] + l[end];\n      if (sum === 0) {\n        return true;\n      } else if (sum < 0) {\n        start += 1;\n      } else {\n        end -= 1;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/41", "generation": "\n  return n * (n - 1) / 2;\n};"}
{"task_id": "JavaScript/42", "generation": "\n  return l.map(e => e + 1);\n};"}
{"task_id": "JavaScript/43", "generation": "\n  const set = new Set();\n  for (let num of l) {\n    if (set.has(-num)) {\n      return true;\n    }\n    set.add(num);\n  }\n  return false;\n};"}
{"task_id": "JavaScript/44", "generation": "\n  return x.toString(base);\n};"}
{"task_id": "JavaScript/45", "generation": "\n  return (0.5 * a * h).toFixed(2);\n};"}
{"task_id": "JavaScript/46", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n\n  let fib = [0, 0, 1, 1];\n\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n\n  return fib[n];\n};"}
{"task_id": "JavaScript/47", "generation": "\n    l.sort((a, b) => a - b);\n    let middle = Math.floor(l.length / 2);\n\n    if (l.length % 2)\n        return l[middle];\n    else\n        return (l[middle - 1] + l[middle]) / 2.0;\n}"}
{"task_id": "JavaScript/48", "generation": "\n    return text.split('').reverse().join('') === text;\n}"}
{"task_id": "JavaScript/49", "generation": "\n  let res = 1;\n  for (let i = 0; i < n; i++) {\n    res = (res * 2) % p;\n  }\n  return res;\n};"}
{"task_id": "JavaScript/50", "generation": "\n  let dec = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c.match(/[a-z]/i)) {\n      let code = c.charCodeAt(0) - 5;\n      if ((c >= 'a' && c <= 'e') || (c >= 'A' && c <= 'E')) {\n        code += 26;\n      }\n      dec += String.fromCharCode(code);\n    } else {\n      dec += c;\n    }\n  }\n  return dec;\n};"}
{"task_id": "JavaScript/51", "generation": "\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "JavaScript/52", "generation": "\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "JavaScript/53", "generation": "\n  return x + y;\n};"}
{"task_id": "JavaScript/54", "generation": "\n  const countChars = (str) => {\n    const counts = {};\n    for (let c of str) {\n      if (counts[c]) {\n        counts[c]++;\n      } else {\n        counts[c] = 1;\n      }\n    }\n    return counts;\n  };\n\n  const counts0 = countChars(s0);\n  const counts1 = countChars(s1);\n\n  for (let c in counts0) {\n    if (counts1[c] !== counts0[c]) {\n      return false;\n    }\n  }\n\n  for (let c in counts1) {\n    if (counts0[c] !== counts1[c]) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/55", "generation": "\n  if (n <= 2) return 1;\n  let fibNums = [1, 1];\n  for (let i = 2; i < n; i++) {\n    fibNums.push(fibNums[i - 1] + fibNums[i - 2]);\n  }\n  return fibNums[n - 1];\n};\n\nconst fib1 = (n) => {\n  if (n <= 2) return 1;\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    [a, b] = [b, a + b];\n  }\n  return b;\n};"}
{"task_id": "JavaScript/56", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/57", "generation": "\n  if (l.length === 0 || l.length === 1) {\n    return true;\n  }\n  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n};"}
{"task_id": "JavaScript/58", "generation": "\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = new Set([...set1].filter(x => set2.has(x)));\n  return Array.from(intersection).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/59", "generation": "\n  let maxPrime = -1;\n\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n /= 2;\n  }\n\n  for (let i = 3; i * i <= n; i += 2) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n\n  if (n > 2) {\n    maxPrime = n;\n  }\n\n  return maxPrime;\n};"}
{"task_id": "JavaScript/60", "generation": "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/61", "generation": "\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "JavaScript/62", "generation": "\n  let result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  return result;\n};"}
{"task_id": "JavaScript/63", "generation": "\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n\n  let fib = [0, 0, 1, 1];\n\n  for (let i = 4; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n  }\n\n  return fib[n];\n};"}
{"task_id": "JavaScript/64", "generation": "\n  const vowels = 'aeiouyAEIOUY';\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/65", "generation": "\n  let digits = String(x).split('');\n  for (let i = 0; i < shift; i++) {\n    digits.unshift(digits.pop());\n  }\n  return digits.join('');\n};"}
{"task_id": "JavaScript/66", "generation": "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() && s[i] !== s[i].toLowerCase()) {\n      sum += s[i].charCodeAt();\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/67", "generation": "\n  let [apples, oranges] = s.match(/\\d+/g).map(Number);\n  return n - apples - oranges;\n};"}
{"task_id": "JavaScript/68", "generation": "\n  let smallestEven = [Infinity, -1];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallestEven[0] && arr[i] % 2 === 0) {\n      smallestEven = [arr[i], i];\n    }\n  }\n  return smallestEven[1] === -1 ? [] : smallestEven;\n};"}
{"task_id": "JavaScript/69", "generation": "\n  let count = {};\n  for (let num of lst) {\n    count[num] = (count[num] || 0) + 1;\n  }\n  for (let num of lst) {\n    if (count[num] > num) {\n      return num;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/70", "generation": "\n  if (!lst.length) return [];\n  const sorted = [...lst].sort((a, b) => a - b);\n  const result = [];\n  while (sorted.length) {\n    result.push(sorted.shift());\n    if (sorted.length) {\n      result.push(sorted.pop());\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/71", "generation": "\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "JavaScript/72", "generation": "\n  const sum = q.reduce((a, b) => a + b, 0);\n  const max = Math.max(...q);\n  return sum < w && q.length % 2 === 0;\n};"}
{"task_id": "JavaScript/73", "generation": "\n  let left = 0;\n  let right = arr.length - 1;\n  let count = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      count++;\n    }\n    left++;\n    right--;\n  }\n\n  return count;\n};"}
{"task_id": "JavaScript/74", "generation": "\n  const totalChars1 = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return totalChars1 < totalChars2 ? lst1 : lst2;\n};"}
{"task_id": "JavaScript/75", "generation": "\n  if (a < 2) return false;\n  for (let i = 2, sqrt = Math.sqrt(a); i <= sqrt; i++)\n    if (a % i === 0) return false;\n  return a % 3 === 0;\n};"}
{"task_id": "JavaScript/76", "generation": "\n  if (x === 1) return true;\n  if (n > x) return false;\n  while (x % n === 0) {\n    x /= n;\n    if (x === 1) return true;\n  }\n  return false;\n};"}
{"task_id": "JavaScript/77", "generation": "\n  let x = Math.round(Math.cbrt(a));\n  return x * x * x === a;\n};"}
{"task_id": "JavaScript/78", "generation": "\n  const primeHex = ['2', '3', '5', '7', 'B', 'D'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (primeHex.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/79", "generation": "\n  let binary = decimal.toString(2);\n  let binaryWithDB = 'db' + binary + 'db';\n  return binaryWithDB;\n};"}
{"task_id": "JavaScript/80", "generation": "\n  if (s.length !== 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < s.length; i++) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};"}
{"task_id": "JavaScript/81", "generation": "\n  return grades.map((grade) => {\n    if (grade >= 4.0) return \"A+\";\n    if (grade >= 3.7) return \"A\";\n    if (grade >= 3.3) return \"A-\";\n    if (grade >= 2.7) return \"B+\";\n    if (grade >= 2.3) return \"B\";\n    if (grade >= 2.0) return \"B-\";\n    if (grade >= 1.7) return \"C+\";\n    if (grade >= 1.3) return \"C\";\n    if (grade >= 1.0) return \"C-\";\n    return \"E\";\n  });\n};"}
{"task_id": "JavaScript/82", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  return isPrime(string.length);\n};"}
{"task_id": "JavaScript/83", "generation": "\n  if (n === 1) return 1;\n  return 9 * (10 ** (n - 2));\n};"}
{"task_id": "JavaScript/84", "generation": "\n  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n};"}
{"task_id": "JavaScript/85", "generation": "\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/86", "generation": "\n  const words = s.split(' ');\n  const orderedWords = words.map((word) => {\n    return word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  });\n  return orderedWords.join(' ');\n};"}
{"task_id": "JavaScript/87", "generation": "\n  let coordinates = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coordinates.push([i, j]);\n      }\n    }\n  }\n  coordinates.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return coordinates.map(coordinate => `(${coordinate.join(\" \")})`);\n};"}
{"task_id": "JavaScript/88", "generation": "\n  const sum = array[0] + array[array.length - 1];\n  const isOdd = sum % 2 === 1;\n  return [...array].sort((a, b) => (isOdd ? a - b : b - a));\n};"}
{"task_id": "JavaScript/89", "generation": "\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const encryptedAlphabet = alphabet.slice(2) + alphabet.slice(0, 2);\n  const map = {};\n  for (let i = 0; i < alphabet.length; i++) {\n    map[alphabet[i]] = encryptedAlphabet[i];\n  }\n  return s.split('').map(c => map[c] || c).join('');\n};"}
{"task_id": "JavaScript/90", "generation": "\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return lst[i + 1];\n    }\n  }\n  return null;\n};"}
{"task_id": "JavaScript/91", "generation": "\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'The' || words[i] === 'the') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/92", "generation": "\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x + y === z || x + z === y || y + z === x) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "JavaScript/93", "generation": "\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n\n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[a-z]/i)) {\n      if (vowels.includes(message[i].toLowerCase())) {\n        if (i + 2 < message.length && vowels.includes(message[i + 2].toLowerCase())) {\n          encodedMessage += message[i] === message[i].toLowerCase() ? message[i].toUpperCase() : message[i].toLowerCase();\n        } else {\n          encodedMessage += message[i] === message[i].toLowerCase() ? message[i].toUpperCase() : message[i].toLowerCase();\n        }\n      } else {\n        encodedMessage += message[i] === message[i].toLowerCase() ? message[i].toUpperCase() : message[i].toLowerCase();\n      }\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n\n  return encodedMessage;\n};"}
{"task_id": "JavaScript/94", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  }\n\n  const sumDigits = (num) => {\n    return num.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n  }\n\n  let maxPrime = -Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  return maxPrime !== -Infinity ? sumDigits(maxPrime) : 0;\n}"}
{"task_id": "JavaScript/95", "generation": "\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.every((key) => key === key.toLowerCase());\n  const upperCaseKeys = keys.every((key) => key === key.toUpperCase());\n  return lowerCaseKeys || upperCaseKeys;\n};"}
{"task_id": "JavaScript/96", "generation": "\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n\n  let primes = [];\n  for (let i = 2; i < n; i++) if (isPrime(i)) primes.push(i);\n  return primes;\n};"}
{"task_id": "JavaScript/97", "generation": "\n  let aUnit = a % 10;\n  let bUnit = b % 10;\n  return aUnit * bUnit;\n};"}
{"task_id": "JavaScript/98", "generation": "\n  let count = 0;\n  const vowels = ['A', 'E', 'I', 'O', 'U'];\n  for (let i = 0; i < s.length; i += 2) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/99", "generation": "\n  let num = parseFloat(value);\n  return (num < 0) ? Math.floor(num) : Math.ceil(num);\n}"}
{"task_id": "JavaScript/100", "generation": "\n  let result = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    result.push(stones);\n    if (stones % 2 === 0) {\n      stones += 2;\n    } else {\n      stones += 2;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/101", "generation": "\n  return s.split(/[ ,]+/);\n};"}
{"task_id": "JavaScript/102", "generation": "\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "JavaScript/103", "generation": "\n  if (n > m) {\n    return \"-\";\n  } else {\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n      sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n  }\n};"}
{"task_id": "JavaScript/104", "generation": "\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let hasEvenDigit = false;\n    let num = x[i].toString();\n    for (let j = 0; j < num.length; j++) {\n      if (num[j] % 2 === 0) {\n        hasEvenDigit = true;\n        break;\n      }\n    }\n    if (!hasEvenDigit) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/105", "generation": "\n  const names = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const result = [];\n\n  if (arr.length === 0) return result;\n\n  const sortedArr = arr\n    .filter((num) => num >= 1 && num <= 9)\n    .sort((a, b) => a - b)\n    .reverse();\n\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] === 1) {\n      result.push(names[sortedArr[i]]);\n    } else if (sortedArr[i] >= 2 && sortedArr[i] <= 4) {\n      result.push(names[sortedArr[i]] + ' ' + names[1]);\n    } else if (sortedArr[i] >= 5 && sortedArr[i] <= 8) {\n      result.push(names[sortedArr[i]] + ' ' + names[5]);\n    } else if (sortedArr[i] === 0) {\n      result.push(names[sortedArr[i]]);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/106", "generation": "\n  const factorial = (num) => {\n    let result = 1;\n    for (let i = 2; i <= num; i++) {\n      result *= i;\n    }\n    return result;\n  };\n\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/107", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split('').reverse().join('')) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n}"}
{"task_id": "JavaScript/108", "generation": "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num != 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) count++;\n  }\n  return count;\n};"}
{"task_id": "JavaScript/109", "generation": "\n  if (arr.length === 0) return true;\n\n  let sortedArr = [...arr].sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.join('') === sortedArr.join('')) return true;\n    sortedArr.unshift(sortedArr.pop());\n  }\n\n  return false;\n};"}
{"task_id": "JavaScript/110", "generation": "\n  let oddLst1 = lst1.filter(num => num % 2 !== 0);\n  let evenLst2 = lst2.filter(num => num % 2 === 0);\n  return oddLst1.length <= evenLst2.length ? 'YES' : 'NO';\n};"}
{"task_id": "JavaScript/111", "generation": "\n  const count = {};\n  const words = test.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (count[words[i]]) {\n      count[words[i]]++;\n    } else {\n      count[words[i]] = 1;\n    }\n  }\n  let max = 0;\n  for (let key in count) {\n    if (count[key] > max) {\n      max = count[key];\n    }\n  }\n  const result = {};\n  for (let key in count) {\n    if (count[key] === max) {\n      result[key] = count[key];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/112", "generation": "\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  const isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n};"}
{"task_id": "JavaScript/113", "generation": "\n  return lst.map((str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (parseInt(str[i]) % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count} in the string ${str} of the input.`;\n  });\n};"}
{"task_id": "JavaScript/114", "generation": "\n  let min = nums[0];\n  let sum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    min = Math.min(min, sum);\n  }\n\n  return min;\n};"}
{"task_id": "JavaScript/115", "generation": "\n  let buckets = 0;\n  let totalWells = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets++;\n        totalWells++;\n      }\n    }\n  }\n\n  return Math.ceil(totalWells / capacity) * buckets;\n};"}
{"task_id": "JavaScript/116", "generation": "\n  return arr.sort((a, b) => {\n    const aBinary = a.toString(2);\n    const bBinary = b.toString(2);\n    const aOnes = aBinary.split('1').length - 1;\n    const bOnes = bBinary.split('1').length - 1;\n    return aOnes - bOnes || a - b;\n  });\n};"}
{"task_id": "JavaScript/117", "generation": "\n  const words = s.split(\" \");\n  const vowels = \"aeiouAEIOU\";\n  const result = [];\n\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (!vowels.includes(char)) {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "JavaScript/118", "generation": "\n  const vowels = 'aeiouAEIOU';\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n      return word[i];\n    }\n  }\n  return '';\n};"}
{"task_id": "JavaScript/119", "generation": "\n  const stack = [];\n  const map = {\n    ')': '(',\n  };\n\n  for (let str of lst) {\n    for (let char of str) {\n      if (char === '(') {\n        stack.push(char);\n      } else if (stack.length === 0 || map[char] !== stack[stack.length - 1]) {\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/120", "generation": "\n  let sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n};"}
{"task_id": "JavaScript/121", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/122", "generation": "\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let num = arr[i];\n    while (num > 0) {\n      let digit = num % 10;\n      sum += digit;\n      num = Math.floor(num / 10);\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/123", "generation": "\n  let collatz = [];\n  while (n != 1) {\n    collatz.push(n);\n    n = n % 2 === 0 ? n / 2 : 3 * n + 1;\n  }\n  collatz.push(1);\n  return collatz.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n};"}
{"task_id": "JavaScript/124", "generation": "\n  if (date === \"\") {\n    return false;\n  }\n  const [month, day] = date.split(\"-\");\n  if (month < 1 || month > 12 || day < 1 || day > 31) {\n    return false;\n  }\n  if ([4, 6, 9, 11].includes(month) && day > 30) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/125", "generation": "\n  if (txt.includes(' ')) {\n    return txt.split(' ');\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i].charCodeAt() - 97) % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n};"}
{"task_id": "JavaScript/126", "generation": "\n  let sorted = true;\n  let duplicate = false;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      if (duplicate) {\n        sorted = false;\n        break;\n      } else {\n        duplicate = true;\n      }\n    } else if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};"}
{"task_id": "JavaScript/127", "generation": "\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let length = end - start;\n  if (length < 0) {\n    return \"NO\";\n  }\n  if (length === 0) {\n    return \"YES\";\n  }\n  for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n    if (length % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};"}
{"task_id": "JavaScript/128", "generation": "\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/129", "generation": "\n  const n = grid.length;\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const dp = Array.from({ length: n }, () =>\n    Array.from({ length: n }, () => Array(k + 1).fill(Infinity))\n  );\n  dp[0][0][0] = grid[0][0];\n\n  for (let steps = 1; steps <= k; steps++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let d = 0; d < 4; d++) {\n          const ni = i + directions[d][0];\n          const nj = j + directions[d][1];\n          if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n            dp[i][j][steps] = Math.min(\n              dp[i][j][steps],\n              dp[ni][nj][steps - 1] + grid[i][j]\n            );\n          }\n        }\n      }\n    }\n  }\n\n  let res = dp[n - 1][n - 1].slice(0, k);\n  res.sort((a, b) => a - b);\n  return res;\n};"}
{"task_id": "JavaScript/130", "generation": "\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 3];\n  if (n === 3) return [1, 3, 2];\n\n  let arr = [1, 3, 2];\n  let a = 1, b = 3, c = 2;\n\n  for (let i = 3; i < n; i++) {\n    let temp = a + b + c;\n    arr.push(temp);\n    a = b;\n    b = c;\n    c = temp;\n  }\n\n  return arr;\n};"}
{"task_id": "JavaScript/131", "generation": "\n  let arr = Array.from(String(n), Number);\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      product *= arr[i];\n    }\n  }\n  return product;\n};"}
{"task_id": "JavaScript/132", "generation": "\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count > 0;\n};"}
{"task_id": "JavaScript/133", "generation": "\n  return lst.reduce((acc, curr) => {\n    return acc + Math.pow(Math.ceil(curr), 2);\n  }, 0);\n};"}
{"task_id": "JavaScript/134", "generation": "\n  const lastChar = txt[txt.length - 1];\n  return /[a-z]/i.test(lastChar) && !/\\s/.test(lastChar);\n};"}
{"task_id": "JavaScript/135", "generation": "\n  let maxIndex = -1;\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] > arr[i - 1]) {\n      maxIndex = i;\n      break;\n    }\n  }\n  return maxIndex;\n};"}
{"task_id": "JavaScript/136", "generation": "\n  let maxNeg = null;\n  let minPos = null;\n\n  for (let num of lst) {\n    if (num < 0 && (maxNeg === null || num > maxNeg)) maxNeg = num;\n    if (num > 0 && (minPos === null || num < minPos)) minPos = num;\n  }\n\n  return (maxNeg, minPos);\n};"}
{"task_id": "JavaScript/137", "generation": "\n  if (typeof a === \"string\") a = parseFloat(a);\n  if (typeof b === \"string\") b = parseFloat(b);\n\n  if (a > b) return a;\n  if (b > a) return b;\n  return null;\n};"}
{"task_id": "JavaScript/138", "generation": "\n  if (n < 8 || n % 2 !== 0) {\n    return false;\n  }\n\n  return true;\n};"}
{"task_id": "JavaScript/139", "generation": "\n  if (n < 0) {\n    return \"Invalid input. Please enter a positive integer.\";\n  }\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = n; i > 1; i--) {\n    result *= i;\n  }\n  return result;\n};"}
{"task_id": "JavaScript/140", "generation": "\n  return text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n};"}
{"task_id": "JavaScript/141", "generation": "\n  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.([t|x|T|X|T|E|e|D|d|L|l]{3})$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "JavaScript/142", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] ** 2;\n    } else if (i === 4) {\n      sum += lst[i] ** 3;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/143", "generation": "\n  const words = sentence.split(\" \");\n  const isPrime = (num) => {\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n      if (num % i === 0) return false;\n    return num > 1;\n  };\n  const primeWords = words.filter((word) => isPrime(word.length));\n  return primeWords.join(\" \");\n};"}
{"task_id": "JavaScript/144", "generation": "\n  const [xNum, xDen] = x.split('/');\n  const [nNum, nDen] = n.split('/');\n\n  return xNum * nDen === nNum * xDen;\n};"}
{"task_id": "JavaScript/145", "generation": "\n  const sumDigits = (num) => {\n    let sum = 0, temp = Math.abs(num);\n    while (temp) {\n      sum += temp % 10;\n      temp = Math.floor(temp / 10);\n    }\n    return sum;\n  };\n\n  return nums.sort((a, b) => {\n    const sumA = sumDigits(a), sumB = sumDigits(b);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n  });\n};"}
{"task_id": "JavaScript/146", "generation": "\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 10) % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/147", "generation": "\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if ((arr[i] + arr[j]) % 3 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};"}
{"task_id": "JavaScript/148", "generation": "\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  if (!planets.includes(planet1) || !planets.includes(planet2)) return ();\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 > index2) [index1, index2] = [index2, index1];\n  return planets.slice(index1, index2 + 1);\n}"}
{"task_id": "JavaScript/149", "generation": "\n  // Filter out strings with odd lengths\n  const evenLengthStrings = lst.filter((str) => str.length % 2 === 0);\n\n  // Sort the list by length of each word\n  evenLengthStrings.sort((a, b) => a.length - b.length || a.localeCompare(b));\n\n  return evenLengthStrings;\n};"}
{"task_id": "JavaScript/150", "generation": "\n  if (n < 2) {\n    return y;\n  }\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n};"}
{"task_id": "JavaScript/151", "generation": "\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (typeof lst[i] === \"number\" && lst[i] > 0 && lst[i] % 2 !== 0) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/152", "generation": "\n  return game.map((score, i) => Math.abs(score - guess[i])).join('');\n};"}
{"task_id": "JavaScript/153", "generation": "\n  let strongestName = '';\n  let maxStrength = 0;\n\n  for (let extension of extensions) {\n    let strength = countCapitals(extension) - countSmallLetters(extension);\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestName = extension;\n    }\n  }\n\n  return `${class_name}.${strongestName}`;\n};\n\nconst countCapitals = (str) => {\n  return (str.match(/[A-Z]/g) || []).length;\n};\n\nconst countSmallLetters = (str) => {\n  return (str.match(/[a-z]/g) || []).length;\n};"}
{"task_id": "JavaScript/154", "generation": "\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b)) return true;\n    b = b.slice(1) + b[0];\n  }\n  return false;\n};"}
{"task_id": "JavaScript/155", "generation": "\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  const numArr = Math.abs(num).toString().split(\"\");\n  numArr.forEach((digit) => {\n    if (parseInt(digit) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    digitCount++;\n  });\n  return [evenCount, digitCount];\n};"}
{"task_id": "JavaScript/156", "generation": "\n  const map = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n  for (let key in map) {\n    while (number >= map[key]) {\n      result += key;\n      number -= map[key];\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/157", "generation": "\n  let sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};"}
{"task_id": "JavaScript/158", "generation": "\n  const maxUniqueChars = Math.max(...words.map((word) => new Set(word).size));\n  const maxUniqueWords = words.filter((word) => new Set(word).size === maxUniqueChars);\n  return maxUniqueWords.sort()[0];\n};"}
{"task_id": "JavaScript/159", "generation": "\n  let total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    total = number + remaining;\n    left = 0;\n  }\n  return [total, left];\n};"}
{"task_id": "JavaScript/160", "generation": "\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result = result / operand[i + 1];\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n};"}
{"task_id": "JavaScript/161", "generation": "\n  let arr = s.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].match(/[a-z]/i)) {\n      arr[i] = arr[i] === arr[i].toUpperCase() ? arr[i].toLowerCase() : arr[i].toUpperCase();\n    }\n  }\n  return arr.join('');\n};"}
{"task_id": "JavaScript/162", "generation": "\n  if (text === '') {\n    return null;\n  }\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "JavaScript/163", "generation": "\n  let result = [];\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};"}
