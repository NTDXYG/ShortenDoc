{"task_id": "CPP/0", "generation": "\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    for(char c : paren_string){\n        if(c == ' ') continue;\n        if(c == '('){\n            balance++;\n        }else if(c == ')'){\n            balance--;\n        }\n        current_group += c;\n        if(balance == 0){\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n  float integer_part;\n  float decimal_part;\n  integer_part = floor(number);\n  decimal_part = number - integer_part;\n  return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad /= numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0, current_depth = 0;\n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }else if(c == ')'){\n            current_depth--;\n        }else if(c == ' '){\n            if(max_depth > 0){\n                result.push_back(max_depth);\n                max_depth = 0;\n            }\n        }\n    }\n    if(max_depth > 0){\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum=0;\n    int product=1;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    vector<int> result;\n    result.push_back(sum);\n    result.push_back(product);\n    return result;\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_num = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n        result.push_back(max_num);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction make_palind(s) {\n    var i = 0;\n    for (i = s.length; i > 0; i--) {\n        if (is_palind(s.substring(0, i))) {\n            break;\n        }\n    }\n    return s + reverse(s.substring(i));\n}\n\nfunction is_palind(s) {\n    var i = 0;\n    for (i = s.length; i > 0; i--) {\n        if (s[i - 1] !== s[s.length - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction reverse(s) {\n    var i = 0;\n    var r = '';\n    for (i = s.length; i > 0; i--) {\n        r += s[i - 1];\n    }\n    return r;\n}\n\nconsole.log(make_palind('')); // ''\nconsole.log(make_palind('cat')); // 'catac'\nconsole.log(make_palind('race')); // 'racecar'\nconsole.log(make_palind('red')); // 'redder'\nconsole.log(make_palind('green')); // 'greenneerg'\nconsole.log(make_palind('blue')); // 'blueuble'\nconsole.log(make_palind('yellow')); // 'yellowyelow'\nconsole.log(make_palind('black')); // 'blackcab'\nconsole.log(make_palind('white')); // 'whiteewhit'\nconsole.log(make_palind('purple')); // 'purplepurpl'\nconsole.log(make_palind('orange')); // 'orangeangor'\nconsole.log(make_palind('pink')); // 'pinknik'\nconsole.log(make_palind('brown')); // 'brownnorwb'\nconsole.log(make_palind('gray')); // 'grayyarg'\nconsole.log(make_palind('gray')); // 'grayyarg'\nconsole.log(make_palind('gray')); // 'grayyarg'\nconsole.log"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.size()==0) return NULL;\n    string longest_string=strings[0];\n    for(int i=1;i<strings.size();i++){\n        if(strings[i].size()>longest_string.size()) longest_string=strings[i];\n    }\n    return longest_string;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i = 0; i <= n; i++){\n        result += to_string(i) + \" \";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0;i<str.length();i++){\n        if(find(v.begin(),v.end(),str[i])==v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i=0;i<music_string.length();i++){\n        if(music_string[i]=='o'){\n            if(music_string[i+1]=='|'){\n                beats.push_back(2);\n                i++;\n            }\n            else{\n                beats.push_back(4);\n            }\n        }\n        else if(music_string[i]=='.'){\n            if(music_string[i+1]=='|'){\n                beats.push_back(1);\n                i++;\n            }\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    int i=0,j=0;\n    while(i<str.length()){\n        if(str[i]==substring[j]){\n            j++;\n            if(j==substring.length()){\n                count++;\n                j=0;\n            }\n        }\n        else{\n            j=0;\n        }\n        i++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string s=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]!=' '){\n            temp+=numbers[i];\n        }\n        else{\n            s+=temp;\n            s+=\" \";\n            temp=\"\";\n        }\n    }\n    s+=temp;\n    string ans=\"\";\n    string temp2=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            temp2+=s[i];\n        }\n        else{\n            ans+=temp2;\n            ans+=\" \";\n            temp2=\"\";\n        }\n    }\n    ans+=temp2;\n    string res=\"\";\n    for(int i=0;i<ans.length();i++){\n        if(ans[i]!=' '){\n            res+=ans[i];\n        }\n        else{\n            res+=\" \";\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = 1000000;\n    float a, b;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                a = numbers[i];\n                b = numbers[j];\n            }\n        }\n    }\n    if(a > b){\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    vector<float> result;\n    result.push_back(a);\n    result.push_back(b);\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        rescaled_numbers.push_back((numbers[i] - min_num) / (max_num - min_num));\n    }\n    return rescaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto &i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(boost::any_cast<int>(i));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count=0;\n    for(int i=0;str[i]!='\\0';i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int i;\n    for(i=n-1;i>=1;i--){\n        if(n%i==0){\n            break;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i*i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1) factors.push_back(n);\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A'&&str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1)\n        return false;\n    if(n==2)\n        return true;\n    if(n%2==0)\n        return false;\n    for(long long i=3;i*i<=n;i+=2){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double x = 0;\n    double epsilon = 0.00001;\n    double dx = 0.00001;\n    while(true){\n        double fx = poly(xs, x);\n        double dfx = (poly(xs, x + dx) - fx) / dx;\n        if(abs(dfx) < epsilon){\n            return x;\n        }\n        x -= fx / dfx;\n    }\n}\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> res;\n    vector<int> temp;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            temp.push_back(l[i]);\n        }\n    }\n    sort(temp.begin(),temp.end());\n    int j=0;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            res.push_back(temp[j]);\n            j++;\n        }\n        else{\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> result;\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i] != l[i-1]){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indices;\n    for(int i=0;i<l.size();i+=2){\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(),even_indices.end());\n    for(int i=0,j=0;i<l.size();i+=2,j++){\n        l[i]=even_indices[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decodeCycl(encoded) {\n  let decoded = '';\n  let shift = 0;\n  for (let i = 0; i < encoded.length; i++) {\n    let charCode = encoded.charCodeAt(i);\n    if (charCode >= 65 && charCode <= 90) {\n      decoded += String.fromCharCode(((charCode - 65 - shift) % 26) + 65);\n    } else if (charCode >= 97 && charCode <= 122) {\n      decoded += String.fromCharCode(((charCode - 97 - shift) % 26) + 97);\n    } else {\n      decoded += encoded.charAt(i);\n    }\n    shift = (shift + 1) % 26;\n  }\n  return decoded;\n}\n"}
{"task_id": "CPP/39", "generation": "\n    int count=0;\n    int i=2;\n    while(count<n){\n        int j=2;\n        int flag=0;\n        while(j<i){\n            if(i%j==0){\n                flag=1;\n                break;\n            }\n            j++;\n        }\n        if(flag==0){\n            int k=2;\n            int flag1=0;\n            while(k<i){\n                if(i%k==0){\n                    flag1=1;\n                    break;\n                }\n                k++;\n            }\n            if(flag1==0){\n                count++;\n            }\n        }\n        i++;\n    }\n    return i-1;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n=l.size();\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*(n-1)/2;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]++;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string res=\"\";\n    while(x>0){\n        res=(char)(x%base+'0')+res;\n        x/=base;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    float area;\n    area=0.5*a*h;\n    return area;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 2;\n    if(n==3) return 0;\n    int a=0,b=0,c=2,d=0,e;\n    for(int i=4;i<=n;i++){\n        e=a+b+c-d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0){\n        return (l[n/2] + l[n/2 - 1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0,j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    int base=2;\n    while(n>0){\n        if(n%2==1){\n            res=(res*base)%p;\n        }\n        base=(base*base)%p;\n        n=n/2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            dec+=(char)((s[i]-'a'-3+26)%26+'a');\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            dec+=(char)((s[i]-'A'-3+26)%26+'A');\n        }\n        else{\n            dec+=s[i];\n        }\n    }\n    return dec;\n}\nstring encode_caesar(string s){\n    /* takes as input string encoded caesar functionReturns dec string */\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            dec+=(char)((s[i]-'a'-3+26)%26+'a');\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            dec+=(char)((s[i]-'A'-3+26)%26+'A');\n        }\n        else{\n            dec+=s[i];\n        }\n    }\n    return dec;\n}\nstring encode_vigenere(string s,string key){\n    /* takes as input string encoded vigenere functionReturns dec string */\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            dec+=(char)((s[i]-'a'-key[i%key.length()]+26)%26+'a');\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            dec+=(char)((s[i]-'A'-key[i%key.length()]+26)%26+'A');\n        }\n        else{\n            dec+=s[i];\n        "}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    text.erase(remove_if(text.begin(), text.end(), [&vowels](char c){ return vowels.find(c) != string::npos; }), text.end());\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<'){\n            count++;\n        }\n        else if(brackets[i]=='>'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool inc=true, dec=true;\n    for(int i=1; i<l.size(); i++){\n        if(l[i]>l[i-1]) dec=false;\n        if(l[i]<l[i-1]) inc=false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    auto last = unique(result.begin(),result.end());\n    result.erase(last,result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        max_prime = n;\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return n+sum_to_n(n-1);\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            count++;\n        }\n        else if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> derivative;\n    for(int i=1;i<xs.size();i++){\n        derivative.push_back(xs[i]*i);\n    }\n    return derivative;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 1;\n    if(n==3) return 1;\n    int a=0,b=0,c=1,d=1,e=2;\n    for(int i=4;i<=n;i++){\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=e;\n    }\n    return e;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=to_string(x);\n    int n=s.length();\n    if(shift>n)\n        return string(s.rbegin(),s.rend());\n    return s.substr(n-shift)+s.substr(0,n-shift);\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples=0,oranges=0,mangoes=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='0'&&s[i]<='9'){\n            if(s[i-1]==' '){\n                apples=apples*10+s[i]-'0';\n            }\n            else if(s[i-2]==' '){\n                oranges=oranges*10+s[i]-'0';\n            }\n        }\n    }\n    mangoes=n-apples-oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=10001,index=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min){\n                min=arr[i];\n                index=i;\n            }\n        }\n    }\n    vector<int> result;\n    result.push_back(min);\n    result.push_back(index);\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j])\n            count++;\n        }\n        if(count>lst[i]&&count>max)\n        max=count;\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    sort(lst.begin(), lst.end());\n    while(!lst.empty()){\n        res.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()) res.push_back(lst.back());\n        lst.pop_back();\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(a+b>c&&a+c>b&&b+c>a){\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w)return false;\n    for(int i=0;i<q.size()/2;i++){\n        if(q[i]!=q[q.size()-i-1])return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int count=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[arr.size()-i-1]){\n            count++;\n        }\n    }\n    return count/2;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst1[i].size();j++){\n            sum1+=lst1[i][j];\n        }\n    }\n    for(int i=0;i<lst2.size();i++){\n        for(int j=0;j<lst2[i].size();j++){\n            sum2+=lst2[i][j];\n        }\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int i,j,count=0;\n    for(i=2;i<a;i++){\n        if(a%i==0){\n            for(j=2;j<i;j++){\n                if(i%j==0){\n                    count++;\n                }\n            }\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nbool is_multprime(int a){\n    int i,j,count=0;\n    for(i=2;i<a;i++){\n        if(a%i==0){\n            for(j=2;j<i;j++){\n                if(i%j==0){\n                    count++;\n                }\n            }\n        }\n    }\n    if(count==2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n    return true;\n    if(n==1)\n    return false;\n    double y=log(x)/log(n);\n    if(y==int(y))\n    return true;\n    else\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b=round(pow(abs(a),1.0/3.0));\n    return b*b*b==abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary=\"\";\n    while(decimal>0){\n        binary=(decimal%2==0?\"0\":\"1\")+binary;\n        decimal/=2;\n    }\n    return \"db\"+binary+\"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()<3)\n    return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0) letter_grades.push_back(\"A+\");\n        else if(grades[i]>3.7) letter_grades.push_back(\"A\");\n        else if(grades[i]>3.3) letter_grades.push_back(\"A-\");\n        else if(grades[i]>3.0) letter_grades.push_back(\"B+\");\n        else if(grades[i]>2.7) letter_grades.push_back(\"B\");\n        else if(grades[i]>2.3) letter_grades.push_back(\"B-\");\n        else if(grades[i]>2.0) letter_grades.push_back(\"C+\");\n        else if(grades[i]>1.7) letter_grades.push_back(\"C\");\n        else if(grades[i]>1.3) letter_grades.push_back(\"C-\");\n        else if(grades[i]>1.0) letter_grades.push_back(\"D+\");\n        else if(grades[i]>0.7) letter_grades.push_back(\"D\");\n        else if(grades[i]>0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n=str.length();\n    if(n<=1)\n    return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 19;\n    int res=18;\n    for(int i=2;i<n;i++) res*=10;\n    return res;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum=0;\n    while(N>0){\n        sum+=N%10;\n        N/=10;\n    }\n    string s=\"\";\n    while(sum>0){\n        s+=(sum%2)+'0';\n        sum/=2;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string ordered=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            ordered+=word;\n            ordered+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    ordered+=word;\n    string ans=\"\";\n    for(int i=0;i<ordered.length();i++){\n        if(ordered[i]==' '){\n            ans+=word;\n            ans+=' ';\n            word=\"\";\n        }\n        else{\n            word+=ordered[i];\n        }\n    }\n    ans+=word;\n    sort(ans.begin(),ans.end());\n    return ans;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                res.push_back({i,j});\n            }\n        }\n    }\n    sort(res.begin(),res.end(),[](vector<int> a,vector<int> b){\n        if(a[0]==b[0]) return a[1]>b[1];\n        return a[0]<b[0];\n    });\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    int sum=array[0]+array[array.size()-1];\n    if(sum%2!=0){\n        sort(array.begin(),array.end());\n    }\n    else{\n        sort(array.rbegin(),array.rend());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            encrypted+=(char)(((s[i]-'a')+4)%26+'a');\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            encrypted+=(char)(((s[i]-'A')+4)%26+'A');\n        }\n        else{\n            encrypted+=s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(),lst.end());\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int boredom=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'&&S[i+1]==' '){\n            boredom++;\n        }\n    }\n    return boredom;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c&&a==floor(a)&&b==floor(b)&&c==floor(c)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels=\"aeiou\";\n    string result=\"\";\n    for(int i=0;i<message.length();i++){\n        if(isalpha(message[i])){\n            if(isupper(message[i])){\n                message[i]=tolower(message[i]);\n            }else{\n                message[i]=toupper(message[i]);\n            }\n            if(vowels.find(message[i])!=-1){\n                int index=vowels.find(message[i]);\n                if(index+2<vowels.length()){\n                    message[i]=vowels[index+2];\n                }else{\n                    message[i]=vowels[index+2-vowels.length()];\n                }\n            }\n        }\n        result+=message[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    int sum=0;\n    while(max>0){\n        sum+=max%10;\n        max/=10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    bool lower=true,upper=true;\n    for(auto i:dict){\n        for(auto j:i.first){\n            if(j>='A'&&j<='Z'){\n                upper=false;\n            }\n            if(j>='a'&&j<='z'){\n                lower=false;\n            }\n        }\n        if(!lower&&!upper){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        bool isPrime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                isPrime=false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n  int x=abs(a)%10;\n  int y=abs(b)%10;\n  return x*y;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n            if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n                if(i%2==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i;\n    float num;\n    for(i=0;i<value.length();i++){\n        if(value[i]=='.'){\n            break;\n        }\n    }\n    string num1=\"\";\n    string num2=\"\";\n    for(int j=0;j<i;j++){\n        num1+=value[j];\n    }\n    for(int j=i+1;j<value.length();j++){\n        num2+=value[j];\n    }\n    num=stof(num1)+stof(num2)/10;\n    if(num>0){\n        if(num-floor(num)>=0.5){\n            return ceil(num);\n        }\n        else{\n            return floor(num);\n        }\n    }\n    else{\n        if(ceil(num)-num>=0.5){\n            return floor(num);\n        }\n        else{\n            return ceil(num);\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int i=0;\n    while(i<n){\n        pile.push_back(n);\n        if(n%2==0){\n            n+=2;\n        }\n        else{\n            n+=2;\n        }\n        i++;\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> v;\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','){\n            v.push_back(temp);\n            temp=\"\";\n        }\n        else if(s[i]==' '){\n            if(temp!=\"\"){\n                v.push_back(temp);\n                temp=\"\";\n            }\n        }\n        else{\n            temp+=s[i];\n        }\n    }\n    if(temp!=\"\"){\n        v.push_back(temp);\n    }\n    return v;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=y;i>=x;i--){\n        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m)\n        return \"-\";\n    int sum=0;\n    for(int i=n;i<=m;i++)\n        sum+=i;\n    int avg=round(sum/(double)(m-n+1));\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        while(temp>0){\n            if((temp%10)%2==0){\n                break;\n            }\n            temp=temp/10;\n        }\n        if(temp==0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            result.push_back(num_to_word[num]);\n        }\n    }\n    return result;\n}\nvector<string> sort_reverse_replace(vector<int> arr){\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    vector<string> result = by_length(sorted_arr);\n    return result;\n}\nvector<string> sort_reverse_replace(vector<int> arr){\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    vector<string> result = by_length(sorted_arr);\n    return result;\n}\nvector<string> sort_reverse_replace(vector<int> arr){\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    vector<string> result = by_length(sorted_arr);\n    return result;\n}\nvector<string> sort_reverse_replace(vector<int> arr){\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    vector<string> result = by_length(sorted_arr);\n    return result;\n}\nvector<string> sort_reverse_replace(vector<"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            result.push_back(i*i);\n        }else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result;\n    int even=0,odd=0;\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        string r=s;\n        reverse(r.begin(),r.end());\n        if(s==r){\n            if(i%2==0)even++;\n            else odd++;\n        }\n    }\n    result.push_back(even);\n    result.push_back(odd);\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=abs(n[i]);\n        while(num>0){\n            sum+=num%10;\n            num/=10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.size()==0) return true;\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n-1;i++){\n        if(arr[i]>arr[i+1]) count++;\n    }\n    if(arr[n-1]>arr[0]) count++;\n    if(count<=1) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd=0,even=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==1)odd++;\n        else even++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==1)odd++;\n        else even++;\n    }\n    if(odd%2==0)return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    int max=0;\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            result[test[i]]++;\n            if(result[test[i]]>max){\n                max=result[test[i]];\n            }\n        }\n    }\n    map<char,int>::iterator it;\n    for(it=result.begin();it!=result.end();it++){\n        if(it->second!=max){\n            result.erase(it);\n            it--;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    string res=\"\";\n    for(int i=0;i<s.size();i++){\n        if(find(c.begin(),c.end(),s[i])==c.end()) res+=s[i];\n    }\n    string rev=res;\n    reverse(rev.begin(),rev.end());\n    bool pal=res==rev;\n    return {res,pal};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].size();j++){\n            if((lst[i][j]-'0')%2!=0){\n                count++;\n            }\n        }\n        string s=\"the number of odd elements \";\n        s+=to_string(count);\n        s+=\"n the str\";\n        s+=to_string(count);\n        s+=\"ng \";\n        s+=to_string(count);\n        s+=\" of the \";\n        s+=to_string(count);\n        s+=\"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        sum = min(nums[i], sum + nums[i]);\n        min_sum = min(min_sum, sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill=0;\n    for(int i=0;i<grid.size();i++){\n        int count=0;\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n        max_fill+=(count/capacity);\n        if(count%capacity!=0){\n            max_fill++;\n        }\n    }\n    return max_fill;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(),arr.end(),[](int a,int b){\n        int count1=0,count2=0;\n        while(a>0){\n            if(a%2==1) count1++;\n            a=a/2;\n        }\n        while(b>0){\n            if(b%2==1) count2++;\n            b=b/2;\n        }\n        if(count1==count2) return a<b;\n        else return count1<count2;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string>v;\n    string word=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(word.size()==n){\n                v.push_back(word);\n            }\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    if(word.size()==n){\n        v.push_back(word);\n    }\n    return v;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    for(int i=word.size()-2;i>0;i--){\n        if(vowels.find(word[i])!=-1&&!isalpha(word[i-1])&&!isalpha(word[i+1])){\n            return string(1,word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open=0,close=0;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='(')open++;\n            else close++;\n        }\n    }\n    if(open==close)return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> ans;\n    for(int i=arr.size()-1;i>=0;i--){\n        ans.push_back(arr[i]);\n        if(ans.size()==k) break;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        int num=arr[i];\n        int count=0;\n        while(num>0){\n            num=num/10;\n            count++;\n        }\n        if(count==2){\n            sum=sum+arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> v;\n    while(n!=1){\n        if(n%2==1){\n            v.push_back(n);\n        }\n        n=n%2==0?n/2:3*n+1;\n    }\n    v.push_back(1);\n    sort(v.begin(),v.end());\n    return v;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    int month,day,year;\n    month=date[0]-'0';\n    month=month*10+date[1]-'0';\n    day=date[3]-'0';\n    day=day*10+date[4]-'0';\n    year=date[6]-'0';\n    year=year*10+date[7]-'0';\n    year=year*10+date[8]-'0';\n    year=year*10+date[9]-'0';\n    if(month<1||month>12)\n        return false;\n    if(day<1||day>31)\n        return false;\n    if(month==2&&day>29)\n        return false;\n    if(month==4||month==6||month==9||month==11&&day>30)\n        return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    string word = \"\";\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] == ' '){\n            if(word != \"\"){\n                res.push_back(word);\n                word = \"\";\n            }\n        }else if(txt[i] == ','){\n            if(word != \"\"){\n                res.push_back(word);\n                word = \"\";\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word != \"\"){\n        res.push_back(word);\n    }\n    return res;\n}\nint count_odd_letters(string txt){\n    int count = 0;\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            if((txt[i] - 'a') % 2 == 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    int i,j,k=0;\n    for(i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    for(i=0;i<lst.size()-1;i++){\n        if(lst[i]==lst[i+1]){\n            k++;\n        }\n    }\n    if(k>1){\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start=max(interval1[0],interval2[0]);\n    int end=min(interval1[1],interval2[1]);\n    if(start>end)return \"NO\";\n    int len=end-start+1;\n    if(len==1)return \"NO\";\n    for(int i=2;i*i<=len;i++){\n        if(len%i==0)return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return 0;\n    int prod=1,sign=1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==0) return 0;\n        if(arr[i]<0){\n            sign*=-1;\n            arr[i]*=-1;\n        }\n        prod*=arr[i];\n    }\n    return prod*sign;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    vector<int> res;\n    int n = grid.size();\n    int i = 0, j = 0;\n    while(k--){\n        res.push_back(grid[i][j]);\n        if(i == 0 && j < n-1) j++;\n        else if(i < n-1 && j == n-1) i++;\n        else if(i == n-1 && j > 0) j--;\n        else if(i > 0 && j == 0) i--;\n        else if(grid[i][j+1] < grid[i+1][j]) j++;\n        else if(grid[i][j+1] > grid[i+1][j]) i++;\n        else if(grid[i][j+1] < grid[i][j-1]) j--;\n        else if(grid[i][j+1] > grid[i][j-1]) i--;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    v.push_back(8);\n    for(int i=4;i<=n;i++){\n        if(i%2==0){\n            v.push_back(v[i-1]+v[i-2]+v[i-3]+1);\n        }\n        else{\n            v.push_back(v[i-1]+v[i-2]+v[i-3]+v[i-4]);\n        }\n    }\n    return v;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product=1;\n    while(n>0){\n        int digit=n%10;\n        if(digit%2!=0){\n            product*=digit;\n        }\n        n/=10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='['){\n            count++;\n        }\n        else if(str[i]==']'){\n            count--;\n        }\n        if(count>1){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    if(txt[txt.length()-1]>='a'&&txt[txt.length()-1]<='z'){\n        if(txt.length()==1)\n            return true;\n        if(txt[txt.length()-2]==' ')\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n=arr.size();\n    int max_index=-1;\n    for(int i=n-1;i>0;i--){\n        if(arr[i]>arr[i-1]){\n            max_index=i;\n            break;\n        }\n    }\n    if(max_index==-1){\n        return -1;\n    }\n    int max_value=arr[max_index];\n    int max_index_value=-1;\n    for(int i=max_index-1;i>=0;i--){\n        if(arr[i]<max_value){\n            max_index_value=i;\n            break;\n        }\n    }\n    return max_index_value;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg=-1000000000,min_pos=1000000000;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<0 && lst[i]>max_neg)\n            max_neg=lst[i];\n        if(lst[i]>0 && lst[i]<min_pos)\n            min_pos=lst[i];\n    }\n    vector<int> ans;\n    if(max_neg==-1000000000)\n        ans.push_back(0);\n    else\n        ans.push_back(max_neg);\n    if(min_pos==1000000000)\n        ans.push_back(0);\n    else\n        ans.push_back(min_pos);\n    return ans;\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==typeid(string)){\n        string s=boost::any_cast<string>(a);\n        replace(s.begin(),s.end(),',','.');\n        a=stof(s);\n    }\n    if(b.type()==typeid(string)){\n        string s=boost::any_cast<string>(b);\n        replace(s.begin(),s.end(),',','.');\n        b=stof(s);\n    }\n    if(a==b)return boost::any();\n    if(a>b)return a;\n    return b;\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long fact = 1;\n    for(int i = 1; i <= n; i++){\n        fact *= i;\n    }\n    return fact;\n}\nlong long brazil_fact(int n){\n    long long brazil_fact = 1;\n    for(int i = 1; i <= n; i++){\n        brazil_fact *= special_factorial(i);\n    }\n    return brazil_fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string res = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n        }else{\n            if(count == 1){\n                res += '_';\n            }else if(count > 2){\n                res += '-';\n            }\n            count = 0;\n            res += text[i];\n        }\n    }\n    if(count == 1){\n        res += '_';\n    }else if(count > 2){\n        res += '-';\n    }\n    return res;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    string valid_extensions[]={\"txt\",\"exe\",\"dll\"};\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>='0'&&file_name[i]<='9'){\n            count++;\n        }\n        if(file_name[i]=='.'){\n            string extension=\"\";\n            for(int j=i+1;j<file_name.length();j++){\n                extension+=file_name[j];\n            }\n            for(int k=0;k<3;k++){\n                if(extension==valid_extensions[k]){\n                    if(count<=3&&file_name[0]>='a'&&file_name[0]<='z'&&file_name[0]>='A'&&file_name[0]<='Z'){\n                        return \"Yes\";\n                    }\n                }\n            }\n        }\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string ans=\"\";\n    int i=0;\n    while(sentence[i]!='\\0'){\n        if(sentence[i]==' '){\n            i++;\n            continue;\n        }\n        int j=i;\n        while(sentence[j]!=' '&&sentence[j]!='\\0'){\n            j++;\n        }\n        string word=sentence.substr(i,j-i);\n        int len=word.length();\n        int count=0;\n        for(int k=2;k<=len;k++){\n            if(len%k==0){\n                count++;\n            }\n        }\n        if(count==0){\n            ans+=word+\" \";\n        }\n        i=j;\n    }\n    if(ans.length()>0){\n        ans.pop_back();\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int x1,x2,n1,n2;\n    sscanf(x.c_str(),\"%d/%d\",&x1,&x2);\n    sscanf(n.c_str(),\"%d/%d\",&n1,&n2);\n    if(x2==n2)\n        return x1*n1==x2*n2;\n    return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    int sum;\n    for(int i=0;i<nums.size();i++){\n        sum=0;\n        int temp=abs(nums[i]);\n        while(temp>0){\n            sum+=temp%10;\n            temp/=10;\n        }\n        result.push_back(sum*1000+i);\n    }\n    sort(result.begin(),result.end());\n    for(int i=0;i<result.size();i++){\n        result[i]=result[i]%1000;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count=0;\n    for(int i=0;i<nums.size();i++){\n        string s=to_string(abs(nums[i]));\n        if(s.length()>1&&s[0]=='1'||s[0]=='3'||s[0]=='5'||s[0]=='7'||s[0]=='9'){\n            int sum=0;\n            for(int j=0;j<s.length();j++){\n                sum+=s[j]-'0';\n            }\n            if(sum>10){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=1;i<=n;i++){\n        a[i-1]=i*i-i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int index1=-1,index2=-1;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1) index1=i;\n        if(planets[i]==planet2) index2=i;\n    }\n    if(index1==-1 || index2==-1) return result;\n    if(index1>index2) swap(index1,index2);\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end(),[](const string& a,const string& b){\n        if(a.length()==b.length()) return a<b;\n        return a.length()<b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i,count=0;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0&&floor(lst[i])==lst[i]&&lst[i]%2!=0){\n            sum+=pow(lst[i],2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max=0,cap=0,sm=0;\n    string s;\n    for(int i=0;i<extensions.size();i++){\n        cap=0;sm=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(extensions[i][j]>='A'&&extensions[i][j]<='Z')cap++;\n            else sm++;\n        }\n        if(cap-sm>max){\n            max=cap-sm;\n            s=extensions[i];\n        }\n    }\n    return class_name+\".\"+s;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    string c=a+a;\n    for(int i=0;i<b.length();i++){\n        string d=b.substr(i,b.length());\n        string e=d+d;\n        if(e.find(a)!=-1)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int count_even=0,count_odd=0;\n    while(num!=0){\n        int digit=num%10;\n        if(digit%2==0){\n            count_even++;\n        }\n        else{\n            count_odd++;\n        }\n        num=num/10;\n    }\n    vector<int> result;\n    result.push_back(count_even);\n    result.push_back(count_odd);\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    string result = \"\";\n    for (auto const& value : roman_numerals) {\n        while (number >= value.first) {\n            result += value.second;\n            number -= value.first;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float x,y,z;\n    x=a*a;\n    y=b*b;\n    z=c*c;\n    if(x==y+z || y==x+z || z==x+y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique = 0;\n    for(string word : words){\n        vector<bool> seen(26, false);\n        int unique = 0;\n        for(char c : word){\n            if(!seen[c - 'a']){\n                seen[c - 'a'] = true;\n                unique++;\n            }\n        }\n        if(unique > max_unique || (unique == max_unique && word < max_word)){\n            max_word = word;\n            max_unique = unique;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total=number+need;\n    int left=remaining-need;\n    if(left<0){\n        total=number+remaining;\n        left=0;\n    }\n    return {total,left};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    int result=0;\n    int temp=0;\n    int temp2=0;\n    int temp3=0;\n    int temp4=0;\n    int temp5=0;\n    int temp6=0;\n    int temp7=0;\n    int temp8=0;\n    int temp9=0;\n    int temp10=0;\n    int temp11=0;\n    int temp12=0;\n    int temp13=0;\n    int temp14=0;\n    int temp15=0;\n    int temp16=0;\n    int temp17=0;\n    int temp18=0;\n    int temp19=0;\n    int temp20=0;\n    int temp21=0;\n    int temp22=0;\n    int temp23=0;\n    int temp24=0;\n    int temp25=0;\n    int temp26=0;\n    int temp27=0;\n    int temp28=0;\n    int temp29=0;\n    int temp30=0;\n    int temp31=0;\n    int temp32=0;\n    int temp33=0;\n    int temp34=0;\n    int temp35=0;\n    int temp36=0;\n    int temp37=0;\n    int temp38=0;\n    int temp39=0;\n    int temp40=0;\n    int temp41=0;\n    int temp42=0;\n    int temp43=0;\n    int temp44=0;\n    int temp45=0;\n    int temp46=0;\n    int temp47=0;\n    int temp48=0;\n    int temp49=0;\n    int temp50=0;\n    int temp51=0;\n    int temp52=0;\n    int temp53=0;\n    int temp54=0;\n    int temp55=0;\n    int temp56=0;\n    int temp57=0;\n    int temp58=0;\n    int temp"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z'){\n            s[i]=s[i]+32;\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\nstring string_md(string text){\n    if(text.empty()) return \"None\";\n    return string_to_md5(text);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int>v;\n    if(a>b){\n        for(int i=b;i<=a;i++){\n            if(i%2==0){\n                v.push_back(i);\n            }\n        }\n    }\n    else{\n        for(int i=a;i<=b;i++){\n            if(i%2==0){\n                v.push_back(i);\n            }\n        }\n    }\n    return v;\n}\n"}
