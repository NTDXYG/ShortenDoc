{"task_id": "CPP/0", "generation": "\nfor(int i = 0; i < numbers.size(); i++){\nfor(int j = i + 1; j < numbers.size(); j++){\nif(abs(numbers[i] - numbers[j]) < threshold){\nreturn true;\n}\n}\n}\nreturn false;\n}\n"}
{"task_id": "CPP/1", "generation": "\nvector<string> result;\nstring current_group;\nfor(int i=0;i<paren_string.length();i++){\nif(paren_string[i]=='('){\ncurrent_group+=\"(\";\n}else if(paren_string[i]==')'){\nif(current_group.length()>0){\nresult.push_back(current_group);\ncurrent_group=\"\";\n}else{\ncurrent_group+=\")\";\n}\n}\n}\nif(current_group.length()>0){\nresult.push_back(current_group);\n}\nreturn result;\n}\n"}
{"task_id": "CPP/2", "generation": "\nfloat integer_part = floor(number);\nfloat decimal_part = number - integer_part;\nreturn decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\nbool below = false;\nint balance = 0;\nfor(int i = 0; i < operations.size(); i++){\nbalance += operations[i];\nif(balance < 0){\nbelow = true;\nbreak;\n}\n}\nreturn below;\n}\n"}
{"task_id": "CPP/4", "generation": "\nfloat sum = 0;\nfor (int i = 0; i < numbers.size(); i++)\nsum += numbers[i];\nfloat mean = sum / numbers.size();\nfloat mad = 0;\nfor (int i = 0; i < numbers.size(); i++)\nmad += abs(numbers[i] - mean);\nreturn mad / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\nvector<int> result;\nfor(int i = 0; i < numbers.size(); i++){\nresult.push_back(numbers[i]);\nif(i < numbers.size() - 1){\nresult.push_back(delimeter);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/6", "generation": "\nvector<int> result;\nint level = 0;\nfor(char c : paren_string){\nif(c == '('){\nlevel++;\nresult.push_back(level);\n}\nelse if(c == ')'){\nlevel--;\nresult.push_back(level);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/7", "generation": "\nvector<string> result;\nfor(int i=0;i<strings.size();i++){\nif(strings[i].find(substring)!=string::npos){\nresult.push_back(strings[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n  vector<int> maxs;\n  int max = numbers[0];\n  maxs.push_back(max);\n  for(int i = 1; i < numbers.size(); i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    maxs.push_back(max);\n  }\n  return maxs;\n}\n"}
{"task_id": "CPP/10", "generation": "\ndef make_palind(s):\n    def is_palind(s):\n        return s == s[::-1]\n    def longest_palind(s):\n        for i in range(len(s), 0, -1):\n            if is_palind(s[:i]):\n                return s[:i]\n        return ''\n    return s + longest_palind(s)[::-1]\nmake_palind('') '' >>> make_palind('cat') 'catac'\nmake_palind('abc') 'abcba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind('abba') 'abba' >>> make_palind"}
{"task_id": "CPP/11", "generation": "\nstring result;\nfor(int i=0;i<a.length();i++){\nif(a[i]=='1'&&b[i]=='1')\nresult+='0';\nelse\nresult+='1';\n}\nreturn result;\n}\n"}
{"task_id": "CPP/12", "generation": "\nif(strings.size()==0) return \"\";\nstring longest = strings[0];\nfor(int i=1;i<strings.size();i++){\nif(strings[i].length()>longest.length()) longest=strings[i];\n}\nreturn longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\nif(b == 0) return a;\nelse return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "\nvector<string> prefixes;\nfor(int i=1;i<=str.length();i++){\nstring prefix=str.substr(0,i);\nfor(int j=0;j<str.length()-i+1;j++){\nstring s=str.substr(j,i);\nif(s==prefix){\nprefixes.push_back(prefix);\nbreak;\n}\n}\n}\nreturn prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\nstring s;\nfor(int i=0;i<=n;i++)\ns+=to_string(i)+\" \";\nreturn s;\n} "}
{"task_id": "CPP/16", "generation": "\nvector<char> v;\nfor(int i=0;i<str.length();i++){\nif(find(v.begin(),v.end(),str[i])==v.end()){\nv.push_back(str[i]);\n}\n}\nreturn v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\nvector<int> result;\nfor(int i=0;i<music_string.size();i++){\nif(music_string[i]=='o'){\nresult.push_back(4);\n}else if(music_string[i]=='o'){\nresult.push_back(2);\n}else if(music_string[i]=='.'){\nresult.push_back(1);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/18", "generation": "\nint count=0;\nint len=str.length();\nint len_sub=substring.length();\nfor(int i=0;i<len;i++){\nif(str.substr(i,len_sub)==substring){\ncount++;\ni=i+len_sub-1;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/19", "generation": "\nmap<string,int> num_dict;\nnum_dict[\"zero\"]=0;\nnum_dict[\"one\"]=1;\nnum_dict[\"two\"]=2;\nnum_dict[\"three\"]=3;\nnum_dict[\"four\"]=4;\nnum_dict[\"five\"]=5;\nnum_dict[\"six\"]=6;\nnum_dict[\"seven\"]=7;\nnum_dict[\"eight\"]=8;\nnum_dict[\"nine\"]=9;\nstring result;\nstring word;\nfor(int i=0;i<numbers.length();i++){\nif(numbers[i]!=' '){\nword+=numbers[i];\n}else{\nresult+=word;\nnum_dict[word]++;\nword=\"\";\n}\n}\nfor(int i=0;i<result.length();i++){\nfor(int j=i+1;j<result.length();j++){\nif(num_dict[result.substr(i,1)]>num_dict[result.substr(j,1)]){\nstring temp=result.substr(i,1);\nresult.replace(i,1,result.substr(j,1));\nresult.replace(j,1,temp);\n}\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/20", "generation": "\nfloat min_diff = 1000000;\nfloat num1, num2;\nfor(int i = 0; i < numbers.size()-1; i++){\nfloat diff = abs(numbers[i+1] - numbers[i]);\nif(diff < min_diff){\nmin_diff = diff;\nnum1 = numbers[i];\nnum2 = numbers[i+1];\n}\n}\nreturn vector<float>(1,num1) + vector<float>(1,num2);\n}\n"}
{"task_id": "CPP/21", "generation": "\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int i = 1; i < numbers.size(); i++){\n    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n  }\n  vector<float> rescaled;\n  for (int i = 0; i < numbers.size(); i++){\n    rescaled.push_back((numbers[i] - min) / (max - min));\n  }\n  return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "\nvector<int> result;\nfor(list_any::iterator it = values.begin(); it!= values.end(); ++it){\nif(it->type() == typeid(int)){\nresult.push_back(boost::any_cast<int>(*it));\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/23", "generation": "\nreturn str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "\nint i;\nfor(i=n-1;i>0;i--)\nif(n%i==0)\nreturn i;\nreturn 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\nvector<int> factors;\nint i = 2;\nwhile(i * i <= n){\nif(n % i == 0){\nfactors.push_back(i);\nwhile(n % i == 0){\nn /= i;\n}\n}\nelse\ni++;\n}\nif(n > 1)\nfactors.push_back(n);\nreturn factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\nvector<int> result;\nfor(int i=0;i<numbers.size();i++){\nif(result.size()==0||numbers[i]!=result[result.size()-1]){\nresult.push_back(numbers[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]='u';\n        }\n        else if(str[i]>='U'&&str[i]<='Z'){\n            str[i]='>';\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\nstring result;\nfor(int i=0;i<strings.size();i++){\nresult+=strings[i];\n}\nreturn result;\n}\n"}
{"task_id": "CPP/29", "generation": "\nvector<string> result;\nfor(int i=0;i<strings.size();i++){\nif(strings[i].find(prefix)==0){\nresult.push_back(strings[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/30", "generation": "\nvector<float> result;\nfor(int i=0;i<l.size();i++){\nif(l[i]>0){\nresult.push_back(l[i]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/31", "generation": "\nif(n<2) return false;\nfor(long long i=2;i*i<=n;i++)\nif(n%i==0) return false;\nreturn true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n        res = res * x + xs[i];\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs){\n    double a = xs[0];\n    double b = xs[1];\n    double c = xs[2];\n    double d = xs[3];\n    double e = xs[4];\n    double f = xs[5];\n    double g = xs[6];\n    double h = xs[7];\n    double i = xs[8];\n    double j = xs[9];\n    double k = xs[10];\n    double l = xs[11];\n    double m = xs[12];\n    double n = xs[13];\n    double o = xs[14];\n    double p = xs[15];\n    double q = xs[16];\n    double r = xs[17];\n    double s = xs[18];\n    double t = xs[19];\n    double u = xs[20];\n    double v = xs[21];\n    double w = xs[22];\n    double x = xs[23];\n    double y = xs[24];\n    double z = xs[25];\n    double aa = xs[26];\n    double bb = xs[27];\n    double cc = xs[28];\n    double dd = xs[29];\n    double ee = xs[30];\n    double ff = xs[31];\n    double gg = xs[32];\n    double hh = xs[33];\n    double ii = xs[34];\n    double jj = xs[35];\n    double kk = xs[36];\n    double ll = xs[37];\n    double mm = xs[38];\n    double nn = xs[39];\n    double oo = xs[40];\n    double pp = xs[41];\n    double qq = xs[42];\n    double rr = xs[43];\n    double ss = xs[44];\n    double tt = xs[45];\n    double uu = xs[46];\n    double vv = xs[47];\n    double ww = xs[48];\n    double xx = xs[49];\n    double yy = xs[50];\n    double zz = xs[51];\n    double aaa = xs[52];\n    double bbb = xs[53];\n    double ccc = xs[54];\n    double ddd = xs[55];\n    double eee = xs[56];\n    double"}
{"task_id": "CPP/33", "generation": "\nvector<int> l2;\nfor(int i=0;i<l.size();i++){\nif(i%3!=0){\nl2.push_back(l[i]);\n}else{\nl2.push_back(l[i]);\nsort(l2.begin()+i/3,l2.begin()+i/3+1);\n}\n}\nreturn l2;\n}\n"}
{"task_id": "CPP/34", "generation": "\nsort(l.begin(),l.end());\nl.erase(unique(l.begin(),l.end()),l.end());\nreturn l;\n}\n"}
{"task_id": "CPP/35", "generation": "\nfloat max = l[0];\nfor(int i=1;i<l.size();i++)\nif(l[i]>max)\nmax = l[i];\nreturn max;\n}\n"}
{"task_id": "CPP/36", "generation": "\nint count=0;\nfor(int i=1;i<n;i++){\nif(i%11==0||i%13==0){\nint j=i;\nwhile(j>0){\nif(j%10==7)\ncount++;\nj/=10;\n}\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/37", "generation": "\nvector<float> l2;\nfor(int i=0;i<l.size();i++){\nif(i%2==0){\nl2.push_back(l[i]);\n}else{\nl2.push_back(l[i]);\nl2.push_back(l[i]);\n}\n}\nsort(l2.begin()+1,l2.end());\nreturn l2;\n}\n"}
{"task_id": "CPP/38", "generation": "\nfunction decodecycl(str) {\n    let dec = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] == \"0\") {\n            dec += \"1\";\n        } else if (str[i] == \"1\") {\n            dec += \"0\";\n        }\n    }\n    return dec;\n}\n\n// test the function\nlet encoded = encodecycl(\"10101010\");\nlet decoded = decodecycl(encoded);\nconsole.log(decoded); // output: \"01010101\" */</code></pre>\n<p>This function works by iterating over each character in the input string. If the character is \"0\", it appends \"1\" to the result string. If the character is \"1\", it appends \"0\" to the result string. This effectively reverses the bits in the input string.</p>\n<p>For example, if the input string is \"10101010\", the function will return \"01010101\".</p>\n<p>Here's a breakdown of the steps:</p>\n<ul>\n<li>Start with an empty string to store the decoded result.</li>\n<li>Iterate over each character in the input string.</li>\n<li>For each character, check if it's \"0\" or \"1\".</li>\n<li>If it's \"0\", append \"1\" to the result string.</li>\n<li>If it's \"1\", append \"0\" to the result string.</li>\n<li>Return the decoded result string.</li>\n</ul>\n<p>This function assumes that the input string is a valid binary string (i.e., it only contains \"0\"s and \"1\"s). If the input string contains any other characters, the function may produce incorrect results.</p> </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</"}
{"task_id": "CPP/39", "generation": "\nint i, j, k, fib[100], prime[100];\nfib[0]=0;fib[1]=1;prime[0]=2;prime[1]=3;\nfor(i=2;i<100;i++)fib[i]=fib[i-1]+fib[i-2];\nfor(i=5;i<100;i++)if(prime(i))prime[i]=i;\nfor(i=2;i<100;i++){\nfor(j=2;j<i;j++)if(prime[j]&&fib[i]%fib[j]==0)break;\nif(j==i)k++;\nif(k==n)return fib[i];\nreturn 0;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n<3) return false;\n    sort(l.begin(),l.end());\n    for(int i=0;i<n-2;i++){\n        int j=i+1;\n        int k=n-1;\n        while(j<k){\n            int sum = l[i]+l[j]+l[k];\n            if(sum==0){\n                return true;\n            }\n            else if(sum<0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int collision = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i != j){\n                collision++;\n            }\n        }\n    }\n    return collision;\n}\n"}
{"task_id": "CPP/42", "generation": "\nvector<int> result;\nfor(int i=0;i<l.size();i++){\nresult.push_back(l[i]+1);\n}\nreturn result;\n}\n"}
{"task_id": "CPP/43", "generation": "\nbool found=false;\nfor(int i=0;i<l.size();i++){\nfor(int j=i+1;j<l.size();j++){\nif(l[i]+l[j]==0){\nfound=true;\nbreak;\n}\n}\nif(found)\nbreak;\n}\nreturn found;\n}\n"}
{"task_id": "CPP/44", "generation": "\nstring result;\nwhile(x>0){\nresult=to_string(x%base)+result;\nx/=base;\n}\nreturn result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (a*h)/2;\n}\n"}
{"task_id": "CPP/46", "generation": "\nint a=0,b=0,c=0,d=0;\nif(n==0)return 0;\nif(n==1)return 1;\nif(n==2)return 0;\nif(n==3)return 1;\nfor(int i=4;i<=n;i++){\nc=a+b;\nd=a;\na=b;\nb=c;\n}\nreturn b;\n}\n"}
{"task_id": "CPP/47", "generation": "\nsort(l.begin(),l.end());\nint n = l.size();\nif(n%2==0)\nreturn (l[n/2-1]+l[n/2])/2.0;\nelse\nreturn l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\nreturn text == string(text.rbegin(), text.rend());\n}\n"}
{"task_id": "CPP/49", "generation": "\nint res=1;\nwhile(p>0){\nif(p&1)res=(long long)res*n%p;\nn=(long long)n*n%p;\np=p>>1;\n}\nreturn res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i])){\n                result += char(((s[i] - 'A' + 3) % 26) + 'A');\n            }\n            else{\n                result += char(((s[i] - 'a' + 3) % 26) + 'a');\n            }\n        }\n        else{\n            result += s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/51", "generation": "\nstring vowels = \"aeiouAEIOU\";\nstring result = \"\";\nfor(int i = 0; i < text.length(); i++){\nif(vowels.find(text[i]) == string::npos){\nresult += text[i];\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n  for(int i = 0; i < l.size(); i++){\n    if(l[i] >= t){\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\nreturn x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\nint i,j;\nfor(i=0;i<s0.size();i++){\nfor(j=0;j<s1.size();j++){\nif(s0[i]==s1[j]){\ns0.erase(s0.begin()+i);\ns1.erase(s1.begin()+j);\nbreak;\n}\n}\n}\nreturn s0.empty()&&s1.empty();\n}\n"}
{"task_id": "CPP/55", "generation": "\nif(n<=1) return n;\nelse return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == \"<\"){\n            count++;\n        }else if(brackets[i] == \">\"){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\nbool increasing = true;\nbool decreasing = true;\nfor(int i = 0; i < l.size()-1; i++){\nif(l[i] > l[i+1]){\nincreasing = false;\n}\nif(l[i] < l[i+1]){\ndecreasing = false;\n}\n}\nreturn increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\nvector<int> l3;\nsort(l1.begin(),l1.end());\nsort(l2.begin(),l2.end());\nint i=0,j=0;\nwhile(i<l1.size()&&j<l2.size()){\nif(l1[i]==l2[j]){\nl3.push_back(l1[i]);\ni++;\nj++;\n}else if(l1[i]<l2[j]){\ni++;\n}else{\nj++;\n}\n}\nreturn l3;\n}\n"}
{"task_id": "CPP/59", "generation": "\nint i;\nfor(i=2;i*i<=n;i++){\nif(n%i==0){\nreturn largest_prime_factor(n/i);\n}\n}\nreturn n;\n}\n"}
{"task_id": "CPP/60", "generation": "\nint sum = 0;\nfor(int i = 1; i <= n; i++)\nsum += i;\nreturn sum;\n"}
{"task_id": "CPP/61", "generation": "\nbool bracketing_correct = true;\nint count = 0;\nfor(int i = 0; i < brackets.length(); i++){\nif(brackets[i] == '('){\ncount++;\n}else if(brackets[i] == ')'){\nif(count == 0){\nbracketing_correct = false;\nbreak;\n}else{\ncount--;\n}\n}\n}\nif(count!=0){\nbracketing_correct = false;\n}\nreturn bracketing_correct;\n}\n"}
{"task_id": "CPP/62", "generation": "\nvector<float> result;\nfor(int i=1;i<xs.size();i++){\nresult.push_back(xs[i]*i);\n}\nreturn result;\n}\n"}
{"task_id": "CPP/63", "generation": "\nif(n==0) return 0;\nif(n==1) return 1;\nreturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n"}
{"task_id": "CPP/64", "generation": "\nint count=0;\nfor(int i=0;i<s.length();i++){\nif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\ncount++;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/65", "generation": "\nstring s=to_string(x);\nif(shift>=s.length())shift=s.length()-shift;\nstring result=s.substr(shift,s.length()-shift)+s.substr(0,shift);\nreturn result;\n} "}
{"task_id": "CPP/66", "generation": "\nint sum=0;\nfor(int i=0;i<s.length();i++){\nif(isupper(s[i])){\nsum+=s[i];\n}\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0;\n    int i = 0;\n    while(s[i] != ' '){\n        if(s[i] == '0') apples = apples * 10;\n        else if(s[i] == '1') oranges = oranges * 10;\n        else if(s[i] == '2') break;\n        else if(s[i] == '3') apples = apples * 10 + (s[i + 1] - '0');\n        else if(s[i] == '4') oranges = oranges * 10 + (s[i + 1] - '0');\n        else if(s[i] == '5') apples = apples * 10 + (s[i + 1] - '0');\n        else if(s[i] == '6') oranges = oranges * 10 + (s[i + 1] - '0');\n        else if(s[i] == '7') break;\n        else if(s[i] == '8') apples = apples * 10 + (s[i + 1] - '0');\n        else if(s[i] == '9') oranges = oranges * 10 + (s[i + 1] - '0');\n        i++;\n    }\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min = 10000;\n    int min_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    if(min == 10000){\n        return {};\n    }\n    return {min, min_index};\n}\n"}
{"task_id": "CPP/69", "generation": "\nint max = 0;\nfor(int i = 0; i < lst.size(); i++){\nif(lst[i] > max && lst.count(lst[i]) >= lst[i]){\nmax = lst[i];\n}\n}\nif(max == 0){\nreturn -1;\n}\nreturn max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int min = lst[0];\n    int max = lst[lst.size()-1];\n    result.push_back(min);\n    lst.erase(lst.begin());\n    lst.erase(lst.end()-1);\n    while(lst.size() > 0){\n        int min2 = *min_element(lst.begin(), lst.end());\n        result.push_back(min2);\n        lst.erase(find(lst.begin(), lst.end(), min2));\n        if(lst.size() > 0){\n            int max2 = *max_element(lst.begin(), lst.end());\n            result.push_back(max2);\n            lst.erase(find(lst.begin(), lst.end(), max2));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c&&a+c>b&&b+c>a){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else return -1;\n}\n"}
{"task_id": "CPP/72", "generation": "\nint sum=0;\nfor(int i=0;i<q.size();i++){\nsum+=q[i];\n}\nif(sum<=w){\nfor(int i=0;i<q.size()-1;i++){\nif(q[i]+q[i+1]>w){\nreturn false;\n}\n}\nreturn true;\n}\nreturn false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++){\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++){\n\t\tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2){\n\t\treturn lst1;\n\t}\n\telse if(sum1>sum2){\n\t\treturn lst2;\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n}\n"}
{"task_id": "CPP/75", "generation": "\nif(a<2)\nreturn false;\nfor(int i=2;i<100;i++){\nif(a%i==0){\nfor(int j=2;j<i;j++){\nif(i%j==0)\nbreak;\n}\nif(i%j!=0)\nreturn true;\n}\n}\nreturn false;\n}\n"}
{"task_id": "CPP/76", "generation": "\nif(x==1) return true;\nif(x%n!=0) return false;\nint i=0;\nwhile(pow(n,i)<=x){\nif(pow(n,i)==x) return true;\ni++;\n}\nreturn false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int b = round(pow(a, 1.0/3));\n    return pow(b, 3) == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i = 0; i < num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D' || num[i] == 'F'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\nstring binary;\nwhile(decimal>0){\nbinary=to_string(decimal%2)+binary;\ndecimal=decimal/2;\n}\nreturn \"db\"+binary+\"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() > 3) return false;\n    for(int i = 0; i < s.length() - 2; i++){\n        if(s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\nvector<string> result;\nfor(int i=0;i<grades.size();i++){\nif(grades[i]>=4.0){\nresult.push_back(\"A+\");\n}else if(grades[i]>=3.7){\nresult.push_back(\"A\");\n}else if(grades[i]>=3.0){\nresult.push_back(\"A-\");\n}else if(grades[i]>=2.7){\nresult.push_back(\"B+\");\n}else if(grades[i]>=2.3){\nresult.push_back(\"B\");\n}else if(grades[i]>=2.0){\nresult.push_back(\"B-\");\n}else if(grades[i]>=1.7){\nresult.push_back(\"C+\");\n}else if(grades[i]>=1.3){\nresult.push_back(\"C\");\n}else if(grades[i]>=1.0){\nresult.push_back(\"C-\");\n}else if(grades[i]>=0.7){\nresult.push_back(\"D+\");\n}else if(grades[i]>=0.3){\nresult.push_back(\"D\");\n}else if(grades[i]>=0.0){\nresult.push_back(\"D-\");\n}else{\nresult.push_back(\"F\");\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int length = str.length();\n    if (length <= 1) return false;\n    for (int i = 2; i <= length / 2; i++)\n        if (length % i == 0) return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    int count = 0;\n    for(int i = 1; i < n; i++){\n        count += 9 * pow(10, i - 1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string s;\n    while(N>0){\n        s.push_back(N%2+'0');\n        N/=2;\n    }\n    int sum=0;\n    for(int i=0;i<s.size();i++){\n        sum+=s[i]-'0';\n    }\n    string ans;\n    while(sum>0){\n        ans.push_back(sum%2+'0');\n        sum/=2;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/85", "generation": "\nint sum=0;\nfor(int i=0;i<lst.size();i++){\nif(lst[i]%2==0&&i%2!=0){\nsum+=lst[i];\n}\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string words[100];\n    int wordCount = 0;\n    string word;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            words[wordCount] = word;\n            wordCount++;\n            word = \"\";\n        }\n        else{\n            word += s[i];\n        }\n    }\n    words[wordCount] = word;\n    wordCount++;\n    for(int i = 0; i < wordCount; i++){\n        string temp = words[i];\n        sort(temp.begin(), temp.end());\n        words[i] = temp;\n    }\n    string result = \"\";\n    for(int i = 0; i < wordCount; i++){\n        result += words[i];\n        if(i != wordCount - 1){\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n\tvector<pair<int, int>> res;\n\tfor (int i = 0; i < lst.size(); i++){\n\t\tfor (int j = 0; j < lst[i].size(); j++){\n\t\t\tif (lst[i][j] == x){\n\t\t\t\tres.push_back(make_pair(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(res.begin(), res.end());\n\tfor (int i = 0; i < res.size(); i++){\n\t\tres[i].second = lst[res[i].first].size() - 1 - res[i].second;\n\t}\n\tsort(res.begin(), res.end());\n\treturn vector<vector<int>>();\n} "}
{"task_id": "CPP/88", "generation": "\n    if(array.size() == 0){\n        return array;\n    }\n    if((array[0] + array[array.size()-1]) % 2 == 0){\n        sort(array.begin(), array.end());\n    }else{\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\nstring result = \"\";\nfor(int i = 0; i < s.length(); i++){\nchar c = s[i];\nif(c >= 'a' && c <= 'z'){\nresult += (c - 'a' + 2 * 2) % 26 + 'a';\n}else if(c >= 'A' && c <= 'Z'){\nresult += (c - 'A' + 2 * 2) % 26 + 'A';\n}else{\nresult += c;\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    sort(lst.begin(),lst.end());\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]<lst[i+1]){\n            return lst[i+1];\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\nint count=0;\nstring word;\nfor(int i=0;i<S.length();i++){\nif(S[i]=='.'||S[i]=='?'||S[i]=='!'){\nif(word.find(\"I\")!=-1){\ncount++;\nword.clear();\n}\n}\nelse{\nword+=S[i];\n}\n}\nif(word.find(\"I\")!=-1){\ncount++;\n}\nreturn count;\n}\n"}
{"task_id": "CPP/92", "generation": "\nif(a+b==c&&a%1==0&&b%1==0&&c%1==0)\nreturn true;\nelse\nreturn false;\n}\n"}
{"task_id": "CPP/93", "generation": "\nstring result;\nfor(int i=0;i<message.length();i++){\nif(message[i]>='a'&&message[i]<='z'){\nif(message[i]=='a')result+='c';\nelse if(message[i]=='e')result+='g';\nelse if(message[i]=='i')result+='k';\nelse if(message[i]=='o')result+='q';\nelse if(message[i]=='u')result+='y';\nelse if(message[i]=='b')result+='d';\nelse if(message[i]=='f')result+='h';\nelse if(message[i]=='j')result+='l';\nelse if(message[i]=='p')result+='r';\nelse if(message[i]=='v')result+='z';\nelse if(message[i]=='c')result+='f';\nelse if(message[i]=='g')result+='j';\nelse if(message[i]=='k')result+='n';\nelse if(message[i]=='q')result+='s';\nelse if(message[i]=='y')result+='x';\nelse if(message[i]=='d')result+='h';\nelse if(message[i]=='h')result+='l';\nelse if(message[i]=='l')result+='o';\nelse if(message[i]=='r')result+='u';\nelse if(message[i]=='z')result+='a';\nelse if(message[i]=='e')result+='i';\nelse if(message[i]=='i')result+='m';\nelse if(message[i]=='m')result+='s';\nelse if(message[i]=='s')result+='w';\nelse if(message[i]=='g')result+='q';\nelse if(message[i]=='j')result+='t';\nelse if(message[i]=='k')result+='y';\nelse if(message[i]=='n')result+='b';\nelse if(message[i]=='q')result+='e';\nelse if(message[i]=='r')result+='i';\nelse if(message[i]=='u')result+='o';\nelse if(message[i]=='w')result+='c';\nelse if(message[i]=='x')result+='k';\nelse if(message[i]=='y')result+='m';\nelse if(message[i]=='z')result+='q';\n}\nelse result+=message[i];\n}\nreturn result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n\tint max = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tint isPrime = 1;\n\t\tfor(int j = 2; j < lst[i]; j++){\n\t\t\tif(lst[i] % j == 0){\n\t\t\t\tisPrime = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isPrime == 1 && lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tint sum = 0;\n\twhile(max > 0){\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\nbool all_lower = true;\nbool all_else = true;\nfor(auto it=dict.begin();it!=dict.end();it++){\nif(it->first.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\")!=-1){\nall_lower = false;\n}\nif(it->second.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\")!=-1){\nall_else = false;\n}\n}\nreturn all_lower || all_else;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        bool is_prime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                is_prime=false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\nint unit_digit_a=a%10;\nint unit_digit_b=b%10;\nint unit_digit_product=unit_digit_a*unit_digit_b;\nreturn unit_digit_product;\n}\n"}
{"task_id": "CPP/98", "generation": "\nint count = 0;\nfor(int i = 0; i < s.length(); i++){\nif(isupper(s[i]) && i % 2 == 0){\ncount++;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/99", "generation": "\nint num = stoi(value);\nint num1 = num - 0.5;\nint num2 = num + 0.5;\nif(num - num1 == num2 - num){\nreturn num2;\n}\nelse{\nreturn num1;\n}\n}\n"}
{"task_id": "CPP/100", "generation": "\nvector<int> pile;\nfor(int i=0;i<n;i++){\nif(n%2==0){\npile.push_back(n+1);\nn++;\n}else{\npile.push_back(n-1);\nn--;\n}\n}\nreturn pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\nvector<string> words;\nstring word;\nfor(int i=0;i<s.length();i++){\nif(s[i]==' '||s[i]==','){\nif(word.length()>0){\nwords.push_back(word);\nword=\"\";\n}\n}\nelse{\nword+=s[i];\n}\n}\nif(word.length()>0){\nwords.push_back(word);\n}\nreturn words;\n}\n"}
{"task_id": "CPP/102", "generation": "\nif(x%2==0)\nreturn x;\nelse\nreturn -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\nif(n>m)return \"-1\";\nint sum=0;\nfor(int i=n;i<=m;i++)sum+=i;\ndouble avg=(double)sum/(m-n+1);\nint avg1=(int)round(avg);\nstring s;\nwhile(avg1>0){\ns=to_string(avg1%2)+s;\navg1/=2;\n}\nreturn \"0b\"+s;\n}\n"}
{"task_id": "CPP/104", "generation": "\nvector<int> result;\nfor(int i=0;i<x.size();i++){\nint temp=x[i];\nwhile(temp>0){\nif(temp%2==0){\ntemp=temp/10;\n}else{\nresult.push_back(temp%10);\ntemp=temp/10;\n}\n}\nsort(result.begin(),result.end());\nresult.erase(unique(result.begin(),result.end()),result.end());\n}\nreturn result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(m.find(arr[i]) != m.end()){\n            res.push_back(m[arr[i]]);\n        }\n    }\n    sort(res.begin(), res.end());\n    reverse(res.begin(), res.end());\n    return res;\n}\nvector<string> sort_and_reverse_and_replace(vector<int> arr){\n    vector<int> temp;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            temp.push_back(arr[i]);\n        }\n    }\n    vector<string> res = by_length(temp);\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\nvector<int> res(n);\nfor(int i = 0; i < n; i++){\nif(i % 2 == 0){\nres[i] = i;\n}else{\nint sum = 0;\nfor(int j = 1; j <= i; j++){\nsum += j;\n}\nres[i] = sum;\n}\n}\nreturn res;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> res(2,0);\n    for(int i=1;i<=n;i++){\n        string s=to_string(i);\n        string rev=s;\n        reverse(rev.begin(),rev.end());\n        if(s==rev && s[0]!='0'){\n            if(s[0]%2==0) res[0]++;\n            else res[1]++;\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/108", "generation": "\nint count = 0;\nfor(int i = 0; i < n.size(); i++){\nint sum = 0;\nint num = abs(n[i]);\nwhile(num > 0){\nsum += num % 10;\nnum /= 10;\n}\nif(sum > 0){\ncount++;\n}\n}\nreturn count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int even=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==0){\n            even++;\n        }\n    }\n    if(even==lst1.size()){\n        return \"YES\";\n    }\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst2.size();j++){\n            if(lst1[i]%2==0){\n                lst1[i]=lst2[j];\n                lst2[j]=lst1[i];\n            }\n        }\n    }\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\nmap<char,int> hist;\nfor(int i=0;i<test.size();i++){\nhist[test[i]]++;\n}\nmap<char,int>::iterator it;\nint max=0;\nfor(it=hist.begin();it!=hist.end();it++){\nif(it->second>max){\nmax=it->second;\n}\n}\nmap<char,int> result;\nfor(it=hist.begin();it!=hist.end();it++){\nif(it->second==max){\nresult[it->first]=max;\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/112", "generation": "\nvector<string> result;\nstring temp;\nfor(int i=0;i<s.size();i++){\nif(c.find(s[i])==string::npos){\ntemp+=s[i];\n}\n}\nresult.push_back(temp);\nreverse(temp.begin(),temp.end());\nresult.push_back(temp);\nreturn result;\n}\n"}
{"task_id": "CPP/113", "generation": "\n\tvector<string> res;\n\tfor(int i=0;i<lst.size();i++){\n\t\tint count=0;\n\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]-'0'%2==1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tstring s=\"the number of odd elements \";\n\t\ts+=to_string(count);\n\t\ts+=\" in string \";\n\t\ts+=to_string(i+1);\n\t\ts+=\" of the input.\";\n\t\tres.push_back(s);\n\t}\n\treturn res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = 0;\n    long long current_sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        current_sum += nums[i];\n        if(current_sum < min_sum){\n            min_sum = current_sum;\n        }\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n = grid.size();\n    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0;i < n;i++){\n        int sum = 0;\n        for(int j = 0;j < m;j++){\n            sum += grid[i][j];\n        }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;\n}\nint min_bucket(vector<vector<int>> grid,int capacity){\n    int n = grid.size();\n    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0;i < n;i++){\n        int sum = 0;\n        for(int j = 0;j < m;j++){\n            sum += grid[i][j];\n        }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<pair<int,int>> v;\n    for(int i=0;i<arr.size();i++){\n        int count=0;\n        int n=arr[i];\n        while(n>0){\n            if(n%2==1) count++;\n            n=n/2;\n        }\n        v.push_back(make_pair(count,arr[i]));\n    }\n    sort(v.begin(),v.end());\n    vector<int> ans;\n    for(int i=0;i<v.size();i++){\n        ans.push_back(v[i].second);\n    }\n    return ans;\n}\n"}
{"task_id": "CPP/117", "generation": "\nvector<string> result;\nstring word;\nfor(int i=0;i<s.length();i++){\nif(s[i]!=' '){\nword+=s[i];\n}else{\nif(word.length()>1){\nint count=0;\nfor(int j=0;j<word.length();j++){\nif(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\ncount++;\n}\n}\nif(count==n){\nresult.push_back(word);\n}\n}\nword=\"\";\n}\n}\nif(word.length()>1){\nint count=0;\nfor(int j=0;j<word.length();j++){\nif(word[j]!='a'&&word[j]!='e'&&word[j]!='i'&&word[j]!='o'&&word[j]!='u'&&word[j]!='A'&&word[j]!='E'&&word[j]!='I'&&word[j]!='O'&&word[j]!='U'){\ncount++;\n}\n}\nif(count==n){\nresult.push_back(word);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    int len = word.length();\n    for(int i = len-1; i >= 0; i--){\n        if(isalpha(word[i]) && islower(word[i])){\n            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n                return word.substr(i,1);\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s1 = lst[0];\n    string s2 = lst[1];\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < s1.length(); i++){\n        if(s1[i] == '('){\n            count1++;\n        }else{\n            count1--;\n        }\n    }\n    for(int i = 0; i < s2.length(); i++){\n        if(s2[i] == '('){\n            count2++;\n        }else{\n            count2--;\n        }\n    }\n    if(count1 == 0 && count2 == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/120", "generation": "\n\tsort(arr.begin(),arr.end());\n\treverse(arr.begin(),arr.end());\n\tvector<int> ans;\n\tfor(int i=0;i<k;i++){\n\t\tans.push_back(arr[i]);\n\t}\n\treturn ans;\n}\n"}
{"task_id": "CPP/121", "generation": "\nint sum = 0;\nfor(int i = 0; i < lst.size(); i++){\nif(lst[i] % 2 == 1 && i % 2 == 0){\nsum += lst[i];\n}\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        if(arr[i] >= 100 && arr[i] <= 999){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\nvector<int> collatz;\nwhile(n!=1){\nif(n%2==0) n=n/2;\nelse n=3*n+1;\ncollatz.push_back(n);\n}\nvector<int> odd_collatz;\nfor(int i=0;i<collatz.size();i++){\nif(collatz[i]%2!=0) odd_collatz.push_back(collatz[i]);\n}\nsort(odd_collatz.begin(),odd_collatz.end());\nreturn odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.empty())return false;\n    int month=stoi(date.substr(0,2));\n    int day=stoi(date.substr(3,2));\n    if(month<1||month>12)return false;\n    if(day<1||day>31)return false;\n    if((month==4||month==6||month==9||month==11)&&day>30)return false;\n    if(month==2&&day>29)return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\nvector<string> res;\nstring word;\nfor(int i=0;i<txt.length();i++){\nif(txt[i]==' '){\nif(!word.empty()){\nres.push_back(word);\nword.clear();\n}\n}\nelse if(txt[i]==','){\nif(!word.empty()){\nres.push_back(word);\nword.clear();\n}\n}\nelse{\nword+=txt[i];\n}\n}\nif(!word.empty()){\nres.push_back(word);\n}\nsort(res.begin(),res.end());\nfor(int i=0;i<res.size();i++){\nif(islower(res[i][0]) && i%2==1){\nreturn vector<string>(1, to_string(i));\n}\n}\nreturn res;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size() <= 1) return true;\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i + 1]) return false;\n        if(lst[i] == lst[i + 1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start>end){\n        return \"NO\";\n    }\n    int length = end-start+1;\n    if(length==1){\n        return \"YES\";\n    }\n    for(int i=2;i*i<=length;i++){\n        if(length%i==0){\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "\nif(arr.size() == 0) return 0;\nint sign = 1;\nint sum = 0;\nfor(int i = 0; i < arr.size(); i++){\nif(arr[i] == 0) return 0;\nif(arr[i] < 0) sign = -sign;\nsum += abs(arr[i]) * sign;\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<vector<int>> visited(n, vector<int>(n, 0));\n    vector<int> res;\n    int min_val = 1e9;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(grid[i][j] < min_val){\n                min_val = grid[i][j];\n                res = {grid[i][j]};\n            }\n        }\n    }\n    int x = 0, y = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(grid[i][j] == min_val){\n                x = i;\n                y = j;\n                break;\n            }\n        }\n    }\n    vector<int> path;\n    path.push_back(min_val);\n    visited[x][y] = 1;\n    for(int i = 1; i < k; i++){\n        vector<int> directions = {0, 1, 0, -1, 0};\n        int dx = directions[0];\n        int dy = directions[1];\n        int nx = x + dx;\n        int ny = y + dy;\n        if(nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] < min_val && !visited[nx][ny]){\n            min_val = grid[nx][ny];\n            path.push_back(min_val);\n            visited[nx][ny] = 1;\n            x = nx;\n            y = ny;\n        }\n        dx = directions[2];\n        dy = directions[3];\n        nx = x + dx;\n        ny = y + dy;\n        if(nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] < min_val && !visited[nx][ny]){\n            min_val = grid[nx][ny];\n            path.push_back(min_val);\n            visited[nx][ny] = 1;\n            x = nx;\n            y = ny;\n        }\n        dx = directions[4];\n        dy = directions[1];\n        nx = x + dx;\n        ny = y + dy;\n        if(nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] < min_val && !visited[nx][ny]){\n            min_val"}
{"task_id": "CPP/130", "generation": "\nvector<int> res;\nres.push_back(1);\nres.push_back(3);\nres.push_back(2);\nfor(int i = 3; i < n + 1; i++){\nif(i % 2 == 0){\nres.push_back(res[i - 1] + res[i - 2] / 2);\n}else{\nres.push_back(res[i - 1] + res[i - 2] + res[i - 3] + 1);\n}\n}\nreturn res;\n}\n"}
{"task_id": "CPP/131", "generation": "\nstring s = to_string(n);\nint product = 1;\nfor(int i = 0; i < s.length(); i++){\nif(s[i] % 2 != 0){\nproduct *= (s[i] - '0');\n}\n}\nreturn product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '[') count++;\n        else count--;\n        if(count < 0) return false;\n    }\n    return count > 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\nint sum=0;\nfor(int i=0;i<lst.size();i++){\nsum+=(int)ceil(lst[i]);\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    string words[] = {\"apple\", \"pie\", \"apple\", \"pi\", \"e\"};\n    int n = sizeof(words)/sizeof(words[0]);\n    for(int i = 0; i < n; i++){\n        if(txt.find(words[i]) != string::npos){\n            if(txt.find(words[i]) == txt.length() - words[i].length()){\n                if(isalpha(txt[txt.length() - 1])){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    int max = -1;\n    for(int i = 1; i < n; i++){\n        if(arr[i] > arr[i-1]){\n            max = i-1;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max = -1000000;\n    int min = 1000000;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    if(max == -1000000){\n        return {None, None};\n    }\n    if(min == 1000000){\n        return {None, max};\n    }\n    return {min, max};\n}\n"}
{"task_id": "CPP/137", "generation": "\nif(a.type() == b.type()){\nif(a.type() == typeid(int)){\nint x = boost::any_cast<int>(a);\nint y = boost::any_cast<int>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(float)){\nfloat x = boost::any_cast<float>(a);\nfloat y = boost::any_cast<float>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(string)){\nstring x = boost::any_cast<string>(a);\nstring y = boost::any_cast<string>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\n}\nelse{\nif(a.type() == typeid(int) && b.type() == typeid(float)){\nint x = boost::any_cast<int>(a);\nfloat y = boost::any_cast<float>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(float) && b.type() == typeid(int)){\nfloat x = boost::any_cast<float>(a);\nint y = boost::any_cast<int>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(string) && b.type() == typeid(int)){\nstring x = boost::any_cast<string>(a);\nint y = boost::any_cast<int>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(int) && b.type() == typeid(string)){\nint x = boost::any_cast<int>(a);\nstring y = boost::any_cast<string>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(float) && b.type() == typeid(string)){\nfloat x = boost::any_cast<float>(a);\nstring y = boost::any_cast<string>(b);\nif(x > y)\nreturn x;\nelse if(x < y)\nreturn y;\nelse\nreturn boost::none;\n}\nelse if(a.type() == typeid(string) && b.type() == typeid"}
{"task_id": "CPP/138", "generation": "\nif(n%2!=0) return false;\nint count=0;\nfor(int i=2;i<=n;i+=2){\nif(n==i) count++;\nelse if(n==i+2) count++;\nelse if(n==i+4) count++;\nelse if(n==i+6) count++;\nelse return false;\n}\nreturn count==4;\n}\n"}
{"task_id": "CPP/139", "generation": "\nlong long result = 1;\nfor(int i = n; i >= 1; i--){\nresult *= i;\n}\nreturn result;\n}\n"}
{"task_id": "CPP/140", "generation": "\nstring result = text;\nfor(int i = 0; i < result.length(); i++){\nif(result[i] == ' '){\nif(i > 0 && result[i - 1] == ' '){\nif(i < result.length() - 1 && result[i + 1] == ' '){\nresult[i] = '-';\n}else{\nresult[i] = '_';\n}else{\nresult[i] = '_';\n}else{\nresult[i] = '_';\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/141", "generation": "\nif(file_name.length() < 2 || file_name.length() > 20){\nreturn \"No\";\n}\nint count = 0;\nfor(int i = 0; i < file_name.length(); i++){\nif(isdigit(file_name[i])){\ncount++;\n}\n}\nif(count > 3){\nreturn \"No\";\n}\nif(file_name.find('.') == string::npos){\nreturn \"No\";\n}\nstring name = file_name.substr(0, file_name.find('.'));\nif(name.length() == 0 || name[0] < 'a' || name[0] > 'z' || name[0] < 'A' || name[0] > 'Z'){\nreturn \"No\";\n}\nstring extension = file_name.substr(file_name.find('.') + 1);\nif(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\nreturn \"No\";\n}\nreturn \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0 && i % 4 != 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string res;\n    int len = sentence.length();\n    for(int i = 0; i < len; i++){\n        if(isprime(sentence[i] - 'a' + 1)){\n            res += sentence[i];\n        }\n    }\n    return res;\n}\nbool isprime(int n){\n    if(n <= 1) return false;\n    for(int i = 2; i * i <= n; i++){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\nstring x1,x2,n1,n2;\nint i=0;\nwhile(x[i]!='\\0'){\nif(x[i]=='/'){\nx1=x.substr(0,i);\nx2=x.substr(i+1,x.length()-i-1);\nbreak;\n}\ni++;\n}\ni=0;\nwhile(n[i]!='\\0'){\nif(n[i]=='/'){\nn1=n.substr(0,i);\nn2=n.substr(i+1,n.length()-i-1);\nbreak;\n}\ni++;\n}\nint a1=atoi(x1.c_str());\nint a2=atoi(n1.c_str());\nint b1=atoi(x2.c_str());\nint b2=atoi(n2.c_str());\nint g=__gcd(a1*b2,a2*b1);\nreturn (a1*b2/g==a2*b1/g);\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int n=nums[i];\n        while(n!=0){\n            sum+=n%10;\n            n/=10;\n        }\n        points.push_back(make_pair(sum,i));\n    }\n    sort(points.begin(),points.end());\n    vector<int> result;\n    for(int i=0;i<points.size();i++){\n        result.push_back(nums[points[i].second]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 != 0 && (nums[i] / 10) % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\nvector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\nvector<string> result;\nfor(int i=0;i<planets.size();i++){\nif(planets[i]==planet1){\nfor(int j=i+1;j<planets.size();j++){\nif(planets[j]==planet2){\nfor(int k=i+1;k<j;k++){\nresult.push_back(planets[k]);\n}\n}\n}\n}\n}\nsort(result.begin(),result.end());\nreturn result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    sort(lst.begin(), lst.end(), [](const string &a, const string &b){\n        if (a.length() == b.length()) return a < b;\n        return a.length() < b.length();\n    });\n    vector<string> result;\n    for (const auto &s : lst) {\n        if (s.length() % 2 == 0) result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\nif(n==2){\nreturn x;\n}\nelse if(n%2==0){\nreturn y;\n}\nelse{\nint i;\nfor(i=3;i*i<=n;i+=2){\nif(n%i==0){\nreturn y;\n}\n}\nreturn x;\n}\n}\n"}
{"task_id": "CPP/151", "generation": "\nlong long sum = 0;\nfor(int i = 0; i < lst.size(); i++){\nif(lst[i] > 0 && lst[i] % 2 == 1){\nsum += pow(lst[i], 2);\n}\n}\nreturn sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\nvector<int> result;\nfor(int i=0;i<game.size();i++){\nresult.push_back(abs(game[i]-guess[i]));\n}\nreturn result;\n}\n"}
{"task_id": "CPP/153", "generation": "\nstring strongest_extension;\nint strongest_strength=0;\nfor(int i=0;i<extensions.size();i++){\nstring extension=extensions[i];\nint strength=0;\nfor(int j=0;j<extension.size();j++){\nstrength+=isupper(extension[j]);\n}\nint strength_minus_sm=strength-(int)extension.size();\nif(strength_minus_sm>strongest_strength){\nstrongest_extension=extension;\nstrongest_strength=strength_minus_sm;\n}\n}\nreturn class_name+\".\"+strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\nint lena=a.length(),lenb=b.length();\nif(lena%lenb!=0) return false;\nfor(int i=0;i<lenb;i++){\nstring c=b;\nfor(int j=0;j<lena/lenb;j++){\nc=c+b.substr(i,lenb);\nif(a.find(c)!=string::npos) return true;\n}\n}\nreturn false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even = 0;\n    int odd = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n        num = num / 10;\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\nvector<string> roman_numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\nvector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\nstring result = \"\";\nfor (int i = 0; i < values.size(); i++){\nwhile (number >= values[i]){\nresult += roman_numerals[i];\nnumber -= values[i];\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/157", "generation": "\nif(a*a+b*b==c*c||b*b+c*c==a*a||a*a+c*c==b*b)\nreturn true;\nelse\nreturn false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = words[0];\n    for(int i = 1; i < words.size(); i++){\n        int max_unique = 0;\n        for(int j = 0; j < words[i].size(); j++){\n            bool found = false;\n            for(int k = 0; k < max_word.size(); k++){\n                if(words[i][j] == max_word[k]){\n                    found = true;\n                    break;\n                }\n            }\n            if(!found){\n                max_unique++;\n            }\n        }\n        if(max_unique > 0 && max_unique > max_word.size() - max_unique){\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\nvector<int> ans;\nans.push_back(number+need);\nans.push_back(remaining-(number+need));\nreturn ans;\n}\n"}
{"task_id": "CPP/160", "generation": "\nint result = operand[0];\nfor(int i = 0; i < operato.size(); i++){\nif(operato[i] == \"+\"){\nresult += operand[i+1];\n}else if(operato[i] == \"-\"){\nresult -= operand[i+1];\n}else if(operato[i] == \"*\"){\nresult *= operand[i+1];\n}else if(operato[i] == \"/\"){\nresult /= operand[i+1];\n}else if(operato[i] == \"//\"){\nresult = result / operand[i+1];\n}else if(operato[i] == \"**\"){\nresult = pow(result, operand[i+1]);\n}\n}\nreturn result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                res+=toupper(s[i]);\n            }\n            else{\n                res+=tolower(s[i]);\n            }\n        }\n        else{\n            res+=s[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/162", "generation": "\nMD5_CTX md5;\nMD5_Init(&md5);\nMD5_Update(&md5,text.c_str(),text.size());\nchar md5[33];\nMD5_Final(md5,&md5);\nstring md5_string(md5);\nreturn md5_string;\n}\n"}
{"task_id": "CPP/163", "generation": "\nvector<int> result;\nfor(int i=a;i<=b;i++){\nif(i%2==0){\nresult.push_back(i);\n}\n}\nreturn result;\n}\n"}
