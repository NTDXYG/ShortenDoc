{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    int open_braces = 0;\n    string current_group;\n    for(int i = 0; i < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n            current_group += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            open_braces--;\n            current_group += paren_string[i];\n            if(open_braces == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    float mean = mean(numbers);\n    for(int i = 0; i < numbers.size(); i++){\n        sum += abs(numbers[i] - mean);\n    }\n    return sum/numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        printf(\"%d \", numbers[i]);\n        if(i<numbers.size()-1)\n            printf(\"%d \", delimeter);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> levels;\n    int level = 0;\n    int max_level = 0;\n    for(char c : paren_string){\n        if(c == '(') level++;\n        if(c == ')') level--;\n        if(level > max_level) max_level = level;\n        levels.push_back(level);\n    }\n    return levels;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return make_pair(sum, product);\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\n#include<iostream>\n#include<string>\nusing namespace std;\n\nstring make_palind(string s) {\n    int n = s.length();\n    for(int i=n-1; i>=0; i--) {\n        s += s[i];\n    }\n    return s;\n}\n\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+=\"0\";\n        else\n            result+=\"1\";\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty())\n        return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.length(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string sequence = \"\";\n    for(int i = n; i <=100; i++){\n        sequence += to_string(i);\n        if(i < 100)\n            sequence += \" \";\n    }\n    return sequence;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> v;\n    for(int i=0; i<str.length(); i++){\n        if(find(v.begin(), v.end(), str[i]) == v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> beats;\n    for(int i = 0; i < music_string.size(); i++){\n        switch(music_string[i]){\n            case 'o':\n                beats.push_back(4);\n                break;\n            case '|':\n                beats.push_back(2);\n                break;\n            case '.':\n                beats.push_back(1);\n                break;\n        }\n    }\n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "\n    int count = 0;\n    int len_str = str.length();\n    int len_sub = substring.length();\n    for(int i=0; i<=len_str-len_sub; i++){\n        int j;\n        for(j=0; j<len_sub; j++)\n            if(str[i+j] != substring[j])\n                break;\n        if(j == len_sub)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> m;\n    m[\"zero\"] = 0;\n    m[\"one\"] = 1;\n    m[\"two\"] = 2;\n    m[\"three\"] = 3;\n    m[\"four\"] = 4;\n    m[\"five\"] = 5;\n    m[\"six\"] = 6;\n    m[\"seven\"] = 7;\n    m[\"eight\"] = 8;\n    m[\"nine\"] = 9;\n\n    string result = \"\";\n    string temp = \"\";\n    for(int i=0; i<numbers.length(); i++){\n        if(numbers[i] == ' '){\n            temp = \"\";\n            temp += tolower(numbers[i-1]);\n            temp += tolower(numbers[i+1]);\n            result += to_string(m[temp]) + \" \";\n        }\n    }\n    result.pop_back();\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    sort(numbers.begin(), numbers.end());\n    float min_diff = FLT_MAX;\n    vector<float> result;\n    for(int i = 0; i < numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            result.clear();\n            result.push_back(numbers[i]);\n            result.push_back(numbers[i+1]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]<min)\n            min = numbers[i];\n        if(numbers[i]>max)\n            max = numbers[i];\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        try{\n            int value = boost::any_cast<int>(*it);\n            result.push_back(value);\n        }\n        catch(boost::bad_any_cast &e){\n            // Skip non-integer values\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i=0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    for(int i = n/2; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i = 2; i <= n; i++){\n        while(n % i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    sort(numbers.begin(), numbers.end());\n    vector<int> result;\n    result.push_back(numbers[0]);\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0; str[i] != '\\0'; i++){\n        if(str[i] >= 'A' && str[i] <= 'Z'){\n            str[i] = str[i] + 32;\n        }\n        else if(str[i] >= 'a' && str[i] <= 'z'){\n            str[i] = str[i] - 32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive_numbers;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n <= 1)\n        return false;\n    for(long long i = 2; i * i <= n; i++){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "\n    double result = xs[0];\n    for(int i = 1; i < xs.size(); i++){\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\ndouble find_zero(vector<double> xs){\n    /* \n    Finds zero of a polynomial with coefficients xs.\n    *//* xs are coefficients a po.find_zero find x such poly( 0.find_zero returns only only zero point, even there many.Moreover find_zero only takes list xs having even number coefficients and largest non zero coefficient as it guarantees a solution>>> round(find_zero([1]), 2 # f(x = 1 +x -0-6 11, -6 1 2 (x - 1 * * 3 = - + 11x - 6x^ + x3 1.0 */\n    double left = -1000000000.0, right = 1000000000.0;\n    while(right - left > 1e-6){\n        double mid = (left + right) / 2.0;\n        if(poly(xs, mid) > 0) left = mid;\n        else right = mid;\n    }\n    return (left + right) / 2.0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> lprime;\n    for(int i=0; i<l.size(); i++){\n        if(i%3==0)\n            lprime.push_back(l[i]);\n    }\n    sort(lprime.begin(), lprime.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if(i%3==0)\n            l[i] = lprime[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    res.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count = 0;\n    for(int i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0)\n            count += to_string(i).count('7');\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> lprime;\n    for(int i=0; i<l.size(); i+=2){\n        vector<float> temp;\n        for(int j=i; j<l.size(); j+=2){\n            temp.push_back(l[j]);\n        }\n        sort(temp.begin(), temp.end());\n        for(int k=0; k<temp.size(); k++){\n            lprime.push_back(temp[k]);\n        }\n    }\n    return lprime;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* decode_cycl(char* enc_str) {\n    char* dec_str = malloc(sizeof(char) * 1000);\n    int len = strlen(enc_str);\n    for(int i = 0; i < len; i++) {\n        if(enc_str[i] == ' ') {\n            dec_str[i] = ' ';\n        } else if(enc_str[i] == 'A') {\n            dec_str[i] = 'C';\n        } else if(enc_str[i] == 'C') {\n            dec_str[i] = 'A';\n        } else if(enc_str[i] == 'G') {\n            dec_str[i] = 'T';\n        } else if(enc_str[i] == 'T') {\n            dec_str[i] = 'G';\n        }\n    }\n    dec_str[len] = '\\0';\n    return dec_str;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int i, j, count, flag;\n    int fib[n];\n    fib[0] = 0;\n    fib[1] = 1;\n    count = 1;\n    i = 1;\n    j = 1;\n    while(count < n){\n        i = j;\n        j = fib[count];\n        fib[count+1] = i + j;\n        count++;\n    }\n    flag = 0;\n    for(i = 0; i < count; i++){\n        if(fib[i] == n){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        return n;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/41", "generation": "\n    // Write your code here\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        count += i;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0; i<l.size(); i++){\n        l[i]++;\n    }\n    return l;\n}\n\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/44", "generation": "\n    string result = \"\";\n    while(x>0){\n        result = to_string(x%base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 0;\n    else if(n==3)\n        return 1;\n    else{\n        int a=0, b=0, c=0, d=1;\n        for(int i=4; i<=n; i++){\n            int e=a+b+c+d;\n            a=b;\n            b=c;\n            c=d;\n            d=e;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end){\n        if(text[start] != text[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0)\n        return 1;\n    else\n        return (modp(n/p,p) * (n%p))%p;\n}\nint mod1101(int n,int p){\n    int x=0,y=1,z=1;\n    while(n>0){\n        if(n&1)\n            z=(x+y)%p;\n        x=y%p;\n        y=z%p;\n        n=n>>1;\n    }\n    return z;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string encoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            encoded_string += \" \";\n        }\n        else{\n            encoded_string += char(s[i] + 3);\n        }\n    }\n    return encoded_string;\n}\n\nstring decode_shift(string s){\n    /* takes as input string decodeshift functionReturns dec string */\n    string decoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            decoded_string += \" \";\n        }\n        else{\n            decoded_string += char(s[i] - 3);\n        }\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<vowels.length(); i++){\n        while(text.find(vowels[i]) != string::npos){\n            text.erase(text.find(vowels[i]), 1);\n        }\n    }\n    return text;\n}\n\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    else\n        return fib(n-1) + fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n        }\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n<2) return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=1; i<n; i++){\n        if(l[i]<l[i-1]) dec = false;\n        if(l[i]>l[i-1]) inc = false;\n        if(!inc && !dec) return false;\n    }\n    return inc || dec;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int max_prime = -1;\n    while(n % 2 == 0){\n        max_prime = 2;\n        n /= 2;\n    }\n    for(int i = 3; i * i <= n; i += 2){\n        while(n % i == 0){\n            max_prime = i;\n            n /= i;\n        }\n    }\n    if(n > 2){\n        max_prime = n;\n    }\n    return max_prime;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return (count == 0);\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(i*xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "\n    if(n<=1){\n        return n;\n    }\n    int a=0, b=0, c=1, d;\n    for(int i=2; i<=n; i++){\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U' || s[i]=='y' || s[i]=='Y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string str = to_string(x);\n    int n = str.size();\n    shift = shift % n;\n    str = str.substr(shift) + str.substr(0, shift);\n    return str;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a=0,o=0,f=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a' || s[i]=='A'){\n            a++;\n        }\n        else if(s[i]=='o' || s[i]=='O'){\n            o++;\n        }\n        else if(s[i]=='f' || s[i]=='F'){\n            f++;\n        }\n    }\n    return n-(a+o*5);\n}\n"}
{"task_id": "CPP/68", "generation": "\n    vector<int> res;\n    if(arr.empty())\n        return res;\n    int min_val = arr[0], min_index = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_val){\n            min_val = arr[i];\n            min_index = i;\n        }\n    }\n    res.push_back(min_val);\n    res.push_back(min_index);\n    return res;\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max_val = -1;\n    int max_freq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int freq = 1;\n        for(int j=i+1; j<lst.size(); j++){\n            if(lst[i] == lst[j]){\n                freq++;\n            }\n        }\n        if(freq > max_freq){\n            max_freq = freq;\n            max_val = lst[i];\n        }\n    }\n    return max_val;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(lst.back());\n        lst.pop_back();\n        if(!lst.empty()){\n            result.push_back(lst.front());\n            lst.erase(lst.begin());\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && a+c>b && b+c>a){\n        float s = (a+b+c)/2;\n        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int changes = 0;\n    int i = 0, j = n - 1;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            changes++;\n        }\n        i++;\n        j--;\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0, sum2=0;\n    for(int i=0; i<lst1.size(); i++)\n        sum1 += lst1[i].size();\n    for(int i=0; i<lst2.size(); i++)\n        sum2 += lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else\n        return lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    if(a<100){\n        return false;\n    }\n    int i;\n    for(i=2; i<=a/2; i++){\n        if(a%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(n==1)\n        return false;\n    int p=log(x)/log(n);\n    if(p==n)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int cubeRoot = round(pow(a, (1.0/3.0)));\n    if(cubeRoot*cubeRoot*cubeRoot == a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    for(int i=0; i<num.length(); i++){\n        if(num[i]=='2' || num[i]=='3' || num[i]=='5' || num[i]=='7' || num[i]=='B' || num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() != 3)\n        return false;\n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i] == 4.0)\n            result.push_back(\"A+\");\n        else if(grades[i] == 3.0)\n            result.push_back(\"A\");\n        else if(grades[i] == 2.0)\n            result.push_back(\"A-\");\n        else if(grades[i] == 1.0)\n            result.push_back(\"B+\");\n        else if(grades[i] == 0.0)\n            result.push_back(\"B\");\n        else if(grades[i] < 0.5)\n            result.push_back(\"E\");\n        else\n            result.push_back(\"F\");\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len < 2)\n        return false;\n    for(int i = 2; i * i <= len; i++)\n        if(len % i == 0)\n            return false;\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 10;\n    if(n==2) return 90;\n    if(n==3) return 720;\n    if(n==4) return 5040;\n    if(n==5) return 362880;\n    if(n==6) return 24672000;\n    if(n==7) return 1680717120;\n    if(n==8) return 117671712000;\n    if(n==9) return 9597306304000;\n    if(n==10) return 7596153377664000;\n    return 0;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N>0){\n        sum += N%10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum>0){\n        binary = to_string(sum%2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum = 0;\n    for(int i = 1; i < lst.size(); i += 2){\n        sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            if(word.length() > 0){\n                sort(word.begin(), word.end());\n                result += word;\n                word = \"\";\n            }\n            result += ' ';\n        }\n        else{\n            word += s[i];\n        }\n    }\n    if(word.length() > 0){\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back({i, j});\n            }\n        }\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/88", "generation": "\n    int sum = 0;\n    for(int i = 0; i < array.size(); i++){\n        sum += array[i];\n    }\n    if(sum % 2 != 0){\n        sort(array.begin(), array.end());\n    }\n    return array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            encrypted += ' ';\n        }\n        else if(s[i] >= 'a' && s[i] <= 'z'){\n            encrypted += char(int(s[i]) - 26 + 'a');\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            encrypted += char(int(s[i]) - 26 + 'A');\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    int n = lst.size();\n    if(n<2)\n        return NULL;\n    sort(lst.begin(), lst.end());\n    int first_min = lst[0];\n    for(int i=1; i<n; i++){\n        if(lst[i]>first_min){\n            return lst[i];\n        }\n    }\n    return NULL;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I' && S[i+1] == ' ' && S[i+2] == 'b' && S[i+3] == 'e' && S[i+4] == 'r' && S[i+5] == 'e' && S[i+6] == 'd'){\n            count++;\n            i += 6;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c || b==a+c || c==a+b){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    for(int i=0; i<message.length(); i++){\n        if(i%2==0 && islower(message[i])){\n            message[i] = toupper(message[i]);\n        }\n        else if(i%2==1 && isupper(message[i])){\n            message[i] = tolower(message[i]);\n        }\n        else if(isalpha(message[i])){\n            if(i+1<message.length() && islower(message[i+1])){\n                message[i] = toupper(message[i]);\n                message[i+1] = tolower(message[i+1]);\n            }\n            else if(i+1<message.length() && isupper(message[i+1])){\n                message[i] = tolower(message[i]);\n                message[i+1] = toupper(message[i+1]);\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max_prime = -1;\n    for(int i=0; i<lst.size(); i++){\n        int num = lst[i];\n        while(num%2 == 0){\n            num = num/2;\n        }\n        while(num%3 == 0){\n            num = num/3;\n        }\n        if(num > 1 && num%2 != 0){\n            max_prime = num;\n        }\n    }\n    int sum = 0;\n    while(max_prime > 0){\n        sum += max_prime%10;\n        max_prime = max_prime/10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    int lower_case=0, upper_case=0;\n    for(auto i:dict){\n        if(islower(i.first[0]))\n            lower_case++;\n        else if(isupper(i.first[0]))\n            upper_case++;\n        if(lower_case>0 && upper_case>0)\n            return false;\n    }\n    if(lower_case>0 && upper_case>0)\n        return false;\n    return true;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i = 2; i < n; i++){\n        bool isPrime = true;\n        for(int j = 2; j * j <= i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = a % 10;\n    int unit_digit_b = b % 10;\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(i%2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = atof(value.c_str());\n    if(num>=0){\n        return (int)num;\n    }\n    else{\n        return (int)num - 1;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    for(int i=0; i<n; i++){\n        if(n%2==0){\n            pile.push_back(n+2);\n        }\n        else{\n            pile.push_back(n+1);\n        }\n        n--;\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] != ',' && s[i] != ' '){\n            word += s[i];\n        }\n        else{\n            words.push_back(word);\n            word = \"\";\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    if(y%2==0)\n        return y;\n    else\n        return choose_num(x-1, y-1);\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-\";\n    int sum=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n    }\n    int avg=round((double)sum/m);\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0; i<x.size(); i++){\n        int num = x[i];\n        while(num%2==0){\n            num /= 2;\n        }\n        if(num>0){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> result;\n    map<int, string> num_to_word = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<int> sorted_nums;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            sorted_nums.push_back(arr[i]);\n        }\n    }\n    sort(sorted_nums.begin(), sorted_nums.end());\n    for(int i = 0; i < sorted_nums.size(); i++){\n        result.push_back(num_to_word[sorted_nums[i]]);\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        if(i%2 == 0)\n            result.push_back(i);\n        else\n            result.push_back(factorial(i));\n    }\n    return result;\n}\n\nint factorial(int n){\n    int fact = 1;\n    for(int i=1; i<=n; i++)\n        fact *= i;\n    return fact;\n}\n\n"}
{"task_id": "CPP/107", "generation": "\n    int even = 0, odd = 0;\n    for(int i=1; i<=n; i++){\n        string str = to_string(i);\n        int len = str.length();\n        if(len % 2 == 0){\n            even++;\n            for(int j=0; j<len/2; j++){\n                if(str[j] != str[len-1-j]){\n                    break;\n                }\n                if(j == len/2-1){\n                    odd++;\n                }\n            }\n        }\n        else{\n            odd++;\n            for(int j=0; j<len/2; j++){\n                if(str[j] != str[len-1-j]){\n                    break;\n                }\n                if(j == len/2-1){\n                    even++;\n                }\n            }\n        }\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        int num = n[i];\n        if(num < 0){\n            num = -1 * num;\n            while(num > 0){\n                count += num % 10;\n                num /= 10;\n            }\n        }\n        else{\n            while(num > 0){\n                count += num % 10;\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    if(arr.empty())\n        return true;\n    int n = arr.size();\n    for(int i=0; i<n; i++){\n        int j = n-1;\n        while(j>i){\n            if(arr[j] < arr[j-1])\n                break;\n            j--;\n        }\n        if(j == i)\n            continue;\n        while(arr[j] > arr[0]){\n            rotate(arr.begin(), arr.begin()+j, arr.end());\n        }\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int count1=0, count2=0;\n    for(int i=0; i<lst1.size(); i++){\n        if(lst1[i]%2==0)\n            count1++;\n    }\n    for(int i=0; i<lst2.size(); i++){\n        if(lst2[i]%2==0)\n            count2++;\n    }\n    if(count1>count2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> result;\n    if(test.empty())\n        return result;\n    int max_count = 0;\n    for(int i=0; i<test.length(); i++){\n        int count = 1;\n        for(int j=i+1; j<test.length(); j++){\n            if(test[i] == test[j]){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n        }\n    }\n    for(int i=0; i<test.length(); i++){\n        int count = 0;\n        for(int j=0; j<test.length(); j++){\n            if(test[i] == test[j]){\n                count++;\n            }\n        }\n        if(count == max_count){\n            result[test[i]] = max_count;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]==c[0]){\n            continue;\n        }\n        temp+=s[i];\n    }\n    if(temp==string(temp.rbegin(),temp.rend())){\n        res.push_back(temp);\n        res.push_back(\"True\");\n    }\n    else{\n        res.push_back(temp);\n        res.push_back(\"False\");\n    }\n    return res;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] - '0' % 2 != 0)\n                count++;\n        }\n        char buffer[100];\n        sprintf(buffer, \"the number of odd elements in string %d of the input.\", count);\n        string str(buffer);\n        result.push_back(str);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long cur_sum = nums[0];\n    for(int i=1; i<nums.size(); i++){\n        if(cur_sum > 0)\n            cur_sum += nums[i];\n        else\n            cur_sum = nums[i];\n\n        if(cur_sum < min_sum)\n            min_sum = cur_sum;\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n                grid[i][j]=0;\n            }\n        }\n    }\n    return count/capacity;\n}\nint count_buckets(vector<vector<int>> grid,int capacity){\n    int count=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count1 = __builtin_popcount(a);\n        int count2 = __builtin_popcount(b);\n        if (count1 == count2)\n            return a < b;\n        return count1 < count2;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> result;\n    string word = \"\";\n    int conson_count = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            conson_count = 0;\n            word = \"\";\n            while(s[i] != ' ' && s[i] != '\\0'){\n                word += s[i];\n                conson_count++;\n                i++;\n            }\n            if(conson_count == n){\n                result.push_back(word);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.length()-1; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) != string::npos){\n            for(int j = i-1; j >= 0; j--){\n                if(vowels.find(word[j]) != string::npos){\n                    return word.substr(j, i-j);\n                }\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s = lst[0] + lst[1];\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == '(') count++;\n        else if(s[i] == ')') count--;\n        if(count < 0) return \"No\";\n    }\n    if(count != 0) return \"No\";\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        int num=arr[i];\n        while(num>0){\n            int digit=num%10;\n            sum+=digit;\n            num/=10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 != 0)\n            collatz.push_back(n);\n        n = n % 2 ? n * 3 + 1 : n / 2;\n    }\n    collatz.push_back(1);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.length() != 10)\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1 || year > 35781012)\n        return false;\n    if(month == 2){\n        if(day > 29) return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30) return false;\n    }\n    else{\n        if(day > 31) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    size_t start = 0, end = txt.find(' ');\n    while(start < txt.size()){\n        if(end == string::npos){\n            res.push_back(txt.substr(start));\n            break;\n        }\n        res.push_back(txt.substr(start, end - start));\n        start = end + 1;\n        end = txt.find(' ', start);\n    }\n    return res;\n}\n\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size()<2)\n        return true;\n    int count = 0;\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i] == lst[i+1])\n            count++;\n        if(count>1)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    if(end1 < start2 || end2 < start1)\n        return \"NO\";\n    int start = max(start1, start2);\n    int end = min(end1, end2);\n    if(start == end)\n        return \"NO\";\n    for(int i = start+1; i < end; i++)\n        if(i % 2 == 0)\n            return \"NO\";\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return 0;\n    int sign=1;\n    int product=1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<0) sign*=-1;\n        product*=abs(arr[i]);\n    }\n    return sign*product;\n}\n\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> res;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            res.push_back(grid[i][j]);\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> result(n);\n    result[0] = 1;\n    if(n>0){\n        result[1] = 3;\n        if(n>1){\n            result[2] = 2;\n            for(int i=3; i<n; i++){\n                if(i%2==0)\n                    result[i] = result[i-1] + result[i-2] + result[i-3];\n                else\n                    result[i] = result[i-1] + result[i-2] + result[i-3] + 1;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '[') count++;\n        else if(str[i] == ']') count--;\n        if(count < 0) return false;\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum += lst[i]*lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    char last_char = txt[txt.length()-1];\n    if((last_char >= 'a' && last_char <= 'z') || (last_char >= 'A' && last_char <= 'Z'))\n        return true;\n    else\n        return false;\n}\n\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    if(n==0)\n        return -1;\n    for(int i=n-1;i>=0;i--){\n        if(arr[i]>arr[i-1]){\n            return i-1;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max_neg = INT_MIN;\n    int min_pos = INT_MAX;\n    int max_neg_val = INT_MIN;\n    int min_pos_val = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]<0 && lst[i]>max_neg){\n            max_neg = lst[i];\n        }\n        if(lst[i]>0 && lst[i]<min_pos){\n            min_pos = lst[i];\n        }\n    }\n    return {max_neg, min_pos};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return None;\n    }\n    if(a.type() == typeid(int) || a.type() == typeid(float)){\n        if(a.type() == typeid(int)){\n            int a1 = boost::any_cast<int>(a);\n            int b1 = boost::any_cast<int>(b);\n            if(a1 > b1){\n                return a;\n            }\n            else if(a1 < b1){\n                return b;\n            }\n            else{\n                return None;\n            }\n        }\n        else if(a.type() == typeid(float)){\n            float a1 = boost::any_cast<float>(a);\n            float b1 = boost::any_cast<float>(b);\n            if(a1 > b1){\n                return a;\n            }\n            else if(a1 < b1){\n                return b;\n            }\n            else{\n                return None;\n            }\n        }\n    }\n    else if(a.type() == typeid(string)){\n        string a1 = boost::any_cast<string>(a);\n        string b1 = boost::any_cast<string>(b);\n        if(a1 > b1){\n            return a;\n        }\n        else if(a1 < b1){\n            return b;\n        }\n        else{\n            return None;\n        }\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2 != 0)\n        return false;\n    int sum = 0;\n    for(int i = 2; i <= n/2; i += 2){\n        if(n == sum + i)\n            return true;\n        sum += i;\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' ' && text[i+1] == ' '){\n            text.erase(i, 1);\n            i--;\n        }\n        else if(text[i] == ' ' && text[i+1] != ' '){\n            text.replace(i, 1, \"_\");\n        }\n    }\n    return text;\n}\n\n"}
{"task_id": "CPP/141", "generation": "\n    int count=0;\n    for(int i=0;i<file_name.length();i++){\n        if(isdigit(file_name[i])){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    if(file_name.find('.')==string::npos){\n        return \"No\";\n    }\n    string extension=file_name.substr(file_name.find_last_of(\".\")+1);\n    if(extension.compare(\"txt\")==0 || extension.compare(\"exe\")==0 || extension.compare(\"dll\")==0){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i+1 % 3 == 0)\n            sum += lst[i] * lst[i];\n        else if(i+1 == 4)\n            sum += lst[i] * lst[i] * lst[i];\n        else\n            sum += lst[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            count++;\n        }\n    }\n    string temp[count+1];\n    int j = 0;\n    for(int i=0; i<sentence.length(); i++){\n        if(sentence[i] == ' '){\n            temp[j] = result;\n            j++;\n            result = \"\";\n        }\n        else{\n            result += sentence[i];\n        }\n    }\n    temp[j] = result;\n    for(int i=0; i<=j; i++){\n        if(is_prime(temp[i].length())){\n            if(i==0){\n                result = temp[i];\n            }\n            else{\n                result += \" \" + temp[i];\n            }\n        }\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n%i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/144", "generation": "\n    int a = stoi(x.substr(0,x.find('/')));\n    int b = stoi(x.substr(x.find('/')+1,x.length()));\n    int c = stoi(n.substr(0,n.find('/')));\n    int d = stoi(n.substr(n.find('/')+1,n.length()));\n    if(a*d == b*c)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    // Your code here\n    int n = nums.size();\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n-i-1; j++){\n            int sum1 = sum_of_digits(nums[j]);\n            int sum2 = sum_of_digits(nums[j+1]);\n            if(sum1 > sum2){\n                swap(nums[j], nums[j+1]);\n            }\n            else if(sum1 == sum2){\n                if(j > find_index(nums, sum1)){\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n    }\n    return nums;\n}\n\nint sum_of_digits(int num){\n    int sum = 0;\n    while(num != 0){\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nint find_index(vector<int> nums, int sum){\n    for(int i=0; i<nums.size(); i++){\n        if(sum_of_digits(nums[i]) == sum)\n            return i;\n    }\n    return -1;\n}\n\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i] > 10 && (nums[i]/10)%2 != 0 && (nums[i]%10)%2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(a[i] % 3 == 0 && a[j] % 3 == 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int pos1 = -1, pos2 = -1;\n    for(int i=0; i<8; i++){\n        if(planets[i] == planet1) pos1 = i;\n        if(planets[i] == planet2) pos2 = i;\n        if(pos1 != -1 && pos2 != -1) break;\n    }\n    if(pos1 == -1 || pos2 == -1) return {};\n    if(pos1 > pos2) swap(pos1, pos2);\n    for(int i=pos1+1; i<pos2; i++)\n        result.push_back(planets[i]);\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i].length() % 2 == 0)\n            result.push_back(lst[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "\n    if(n%2==0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] >= 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        int diff = abs(game[i] - guess[i]);\n        result.push_back(diff);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength = -1;\n    string strongest_extension = \"\";\n    for(int i=0;i<extensions.size();i++){\n        int strength = 0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(isupper(extensions[i][j])){\n                strength++;\n            }\n            if(islower(extensions[i][j])){\n                strength--;\n            }\n        }\n        if(strength>max_strength){\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "\n    int n=b.length();\n    for(int i=0;i<n;i++){\n        if(b==a.substr(i,n))\n            return true;\n        else if(b==a.substr(i+1,n) || b==a.substr(i+2,n) || b==a.substr(i+3,n))\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    while(num != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}\n\n"}
{"task_id": "CPP/156", "generation": "\n    vector<string> ones = {\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    vector<string> teens = {\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\n    vector<string> tens = {\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n    vector<string> thousands = {\"\", \"thousand\", \"million\", \"billion\"};\n    string result = \"\";\n    if(number == 0) return \"zero\";\n    for(int i = 0; number > 0; i++){\n        if(number % 1000 != 0){\n            result = ones[number % 10] + thousands[i] + \" \" + result;\n        }\n        number /= 1000;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(int i=0; i<words.size(); i++){\n        int unique_count = 0;\n        for(int j=0; j<words[i].size(); j++){\n            for(int k=0; k<words[i].size(); k++){\n                if(j != k && words[i][j] == words[i][k])\n                    break;\n                if(j == words[i].size()-1 && words[i][j] == words[i][k])\n                    unique_count++;\n            }\n        }\n        if(unique_count > max_unique){\n            max_unique = unique_count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    if(remaining >= need){\n        number += need;\n        remaining -= need;\n    }\n    else{\n        number += remaining;\n        remaining = 0;\n    }\n    return {number, remaining};\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i]==\"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i]==\"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i]==\"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i]==\"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i]==\"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>='A' && s[i]<='Z')\n            s[i] = s[i] + 32;\n        else if(s[i]>='a' && s[i]<='z')\n            s[i] = s[i] - 32;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    sprintf(mdString, \"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\",\n        digest[0], digest[1], digest[2], digest[3],\n        digest[4], digest[5], digest[6], digest[7],\n        digest[8], digest[9], digest[10], digest[11],\n        digest[12], digest[13], digest[14], digest[15]);\n    return mdString;\n}\n\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> res;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n"}
