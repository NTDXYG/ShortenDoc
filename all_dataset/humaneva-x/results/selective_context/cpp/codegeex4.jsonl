{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string current_group = \"\";\n    int balance = 0;\n    for (char c : paren_string){\n        if (c == '('){\n            balance++;\n            current_group += c;\n        }\n        else if (c == ')'){\n            balance--;\n            current_group += c;\n            if (balance == 0){\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i = 0; i < operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        result.push_back(numbers[i]);\n        if(i!=numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    for (char c : paren_string){\n        if (c == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if (c == ')'){\n            current_depth--;\n        }\n    }\n    result.push_back(max_depth);\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(substring)!=string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\nfunction make_palind(s) {\n  let i = 0;\n  while (i < s.length && s[i] === s[s.length - 1 - i]) {\n    i++;\n  }\n  return s + s.slice(0, i).split('').reverse().join('');\n}\n"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]!=b[i]){\n            result+='1';\n        }\n        else{\n            result+='0';\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    string longest=\"\";\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].length()>longest.length()){\n            longest=strings[i];\n        }\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0){\n        return a;\n    }\n    else{\n        return greatest_common_divisor(b, a%b);\n    }\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0;i<str.length();i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string s;\n    for(int i=0;i<=n;i++){\n        s+=to_string(i)+\" \";\n    }\n    return s;\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<char> distinct_chars;\n    for(int i=0;i<str.length();i++){\n        if(find(distinct_chars.begin(),distinct_chars.end(),str[i])==distinct_chars.end()){\n            distinct_chars.push_back(str[i]);\n        }\n    }\n    return distinct_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    int i = 0;\n    while(i < music_string.length()){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n            i++;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '|'){\n            result.push_back(2);\n            i += 2;\n        }\n        else if(music_string[i] == '.'){\n            result.push_back(1);\n            i++;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.'){\n            result.push_back(1);\n            i += 2;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.'){\n            result.push_back(1);\n            i += 3;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.' && music_string[i+3] == '.'){\n            result.push_back(1);\n            i += 4;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.' && music_string[i+3] == '.' && music_string[i+4] == '.'){\n            result.push_back(1);\n            i += 5;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.' && music_string[i+3] == '.' && music_string[i+4] == '.' && music_string[i+5] == '.'){\n            result.push_back(1);\n            i += 6;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.' && music_string[i+3] == '.' && music_string[i+4] == '.' && music_string[i+5] == '.' && music_string[i+6] == '.'){\n            result.push_back(1);\n            i += 7;\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == '.' && music_string[i+2] == '.' && music_string[i+3] == '.' && music_string[i+4] == '.' && music_string"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]==substring[0]){\n            int j=0;\n            int k=i;\n            while(j<substring.length()&&k<str.length()&&str[k]==substring[j]){\n                j++;\n                k++;\n            }\n            if(j==substring.length()){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string,int> m;\n    m[\"zero\"]=0;\n    m[\"one\"]=1;\n    m[\"two\"]=2;\n    m[\"three\"]=3;\n    m[\"four\"]=4;\n    m[\"five\"]=5;\n    m[\"six\"]=6;\n    m[\"seven\"]=7;\n    m[\"eight\"]=8;\n    m[\"nine\"]=9;\n    string result=\"\";\n    string temp=\"\";\n    for(int i=0;i<numbers.length();i++){\n        if(numbers[i]!=' '){\n            temp+=numbers[i];\n        }\n        else{\n            result+=to_string(m[temp])+' ';\n            temp=\"\";\n        }\n    }\n    result+=to_string(m[temp]);\n    return result;\n}\n"}
{"task_id": "CPP/20", "generation": "\n    vector<float> result;\n    float min_diff = 1000000;\n    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n            float diff = abs(numbers[i]-numbers[j]);\n            if(diff<min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    for(int i=0; i<numbers.size(); i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto it = values.begin(); it != values.end(); ++it){\n        if(it->type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/23", "generation": "\n    int len = 0;\n    for(int i = 0; str[i] != '\\0'; i++){\n        len++;\n    }\n    return len;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int i;\n    for(i=n-1;i>0;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;i<=n;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n=n/i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>=65 && str[i]<=90){\n            str[i]=str[i]+32;\n        }\n        else if(str[i]>=97 && str[i]<=122){\n            str[i]=str[i]-32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)==0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<2) return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double res = 0;\n    for(int i = 0; i < xs.size(); i++){\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble find_zero(vector<double> xs, double a, double b, double tol){\n    /* \n    Finds zero of polynomial with coefficients xs between a and b. \n    *//*\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, 11], -6, 1, 1e-6), 2)\n    1.0\n    >>> round(find_zero([1, -1, -6, "}
{"task_id": "CPP/33", "generation": "\n    vector<int> l3;\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l3.push_back(l[i]);\n        }\n    }\n    sort(l3.begin(),l3.end());\n    for(int i=0;i<l.size();i++){\n        if(i%3==0){\n            l[i]=l3[i/3];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    sort(l.begin(), l.end());\n    vector<int> res;\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i] != l[i-1]){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i = 1; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0||i%13==0){\n            int temp=i;\n            while(temp>0){\n                if(temp%10==7){\n                    count++;\n                }\n                temp=temp/10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even;\n    for(int i=0;i<l.size();i+=2){\n        even.push_back(l[i]);\n    }\n    sort(even.begin(),even.end());\n    for(int i=0;i<even.size();i++){\n        l[i*2]=even[i];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\nchar *decodecyc(char *str)\n{\n    char *dec = malloc(strlen(str) + 1);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int j1 = 0;\n    int k1 = 0;\n    int l1 = 0;\n    int m1 = 0;\n    int n1 = 0;\n    int o1 = 0;\n    int p1 = 0;\n    int q1 = 0;\n    int r1 = 0;\n    int s1 = 0;\n    int t1 = 0;\n    int u1 = 0;\n    int v1 = 0;\n    int w1 = 0;\n    int x1 = 0;\n    int y1 = 0;\n    int z1 = 0;\n    int a1 = 0;\n    int b1 = 0;\n    int c1 = 0;\n    int d1 = 0;\n    int e1 = 0;\n    int f1 = 0;\n    int g1 = 0;\n    int h1 = 0;\n    int i2 = 0;\n    int j2 = 0;\n    int k2 = 0;\n    int l2 = 0;\n    int m2 = 0;\n    int n2 = 0;\n    int o2 = 0;\n    int p2 = 0;\n    int q2 = 0;\n    int r2 = 0;\n    int s2 = 0;\n    int t2 = 0;\n    int u"}
{"task_id": "CPP/39", "generation": "\n    int a=0,b=1,c=2;\n    int count=0;\n    while(count<n){\n        if(c%2!=0){\n            count++;\n        }\n        a=b;\n        b=c;\n        c=a+b;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/40", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            for(int k=j+1;k<l.size();k++){\n                if(l[i]+l[j]+l[k]==0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    return n*(n-1)/2;\n}"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++){\n        l[i]+=1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=char(x%base+'0')+s;\n        x=x/base;\n    }\n    return s;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return 0.5*a*h;\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 0;\n    int a=0, b=0, c=0, d=0;\n    for(int i=3; i<=n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(),l.end());\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2-1]+l[n/2])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int i=0;\n    int j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    int res=1;\n    while(n>0){\n        if(n%2==1){\n            res=(res*p)%10;\n        }\n        p=(p*p)%10;\n        n=n/2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            dec+=((s[i]-65+26-3)%26)+65;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            dec+=((s[i]-97+26-3)%26)+97;\n        }\n        else{\n            dec+=s[i];\n        }\n    }\n    return dec;\n}\nstring encode_sub(string s){\n    /* takes as input string encoded encodesub functionReturns dec string */\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            dec+=((s[i]-65+26-3)%26)+65;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            dec+=((s[i]-97+26-3)%26)+97;\n        }\n        else{\n            dec+=s[i];\n        }\n    }\n    return dec;\n}\nstring encode_vigenere(string s){\n    /* takes as input string encoded encodesub functionReturns dec string */\n    string dec=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            dec+=((s[i]-65+26-3)%26)+65;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            dec+=((s[i]-97+26-3)%26)+97;\n        }\n        else{\n            dec+=s[i];\n        }\n    }\n    return dec;\n}\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0;i<l.size();i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    int sum=x+y;\n    return sum;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return fib(n-1)+fib(n-2);\n}\nint fib1(int n){\n    int a=0,b=1;\n    for(int i=0;i<n;i++){\n        int c=a+b;\n        a=b;\n        b=c;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='<') count++;\n        else count--;\n        if(count<0) return false;\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < l.size() - 1; i++){\n        if(l[i] > l[i+1]){\n            increasing = false;\n        }\n        if(l[i] < l[i+1]){\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    vector<int> result;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    sort(result.begin(),result.end());\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            n=n/i;\n            i--;\n        }\n    }\n    return i;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count=0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='(') count++;\n        else if(brackets[i]==')') count--;\n        if(count<0) return false;\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> result;\n    for(int i=1;i<xs.size();i++){\n        result.push_back(xs[i]*i);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 1;\n    int a=0, b=0, c=1;\n    for(int i=3; i<=n; i++){\n        int temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s=\"\";\n    while(x>0){\n        s=s+(char)(x%10+'0');\n        x=x/10;\n    }\n    if(shift>s.length())\n        return s;\n    string ans=\"\";\n    for(int i=shift;i<s.length();i++)\n        ans=ans+s[i];\n    for(int i=0;i<shift;i++)\n        ans=ans+s[i];\n    return ans;\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int a=0,o=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'){\n            a=s[i+1]-48;\n        }\n        if(s[i]=='o'){\n            o=s[i+1]-48;\n        }\n    }\n    return n-a-o;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int min=INT_MAX;\n    int index=-1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0 && arr[i]<min){\n            min=arr[i];\n            index=i;\n        }\n    }\n    if(index==-1){\n        return {};\n    }\n    return {min,index};\n}"}
{"task_id": "CPP/69", "generation": "\n    int max=-1;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst.size();j++){\n            if(lst[i]==lst[j]){\n                count++;\n            }\n        }\n        if(count>lst[i]&&count>max){\n            max=lst[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> result;\n    while(!lst.empty()){\n        result.push_back(*min_element(lst.begin(), lst.end()));\n        lst.erase(min_element(lst.begin(), lst.end()));\n        if(!lst.empty()){\n            result.push_back(*max_element(lst.begin(), lst.end()));\n            lst.erase(max_element(lst.begin(), lst.end()));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(area<0)\n        return -1;\n    else\n        return area;\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    int max=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n        if(q[i]>max) max=q[i];\n    }\n    if(sum-max<w) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++){\n        sum1+=lst1[i].length();\n    }\n    for(int i=0;i<lst2.size();i++){\n        sum2+=lst2[i].length();\n    }\n    if(sum1<sum2){\n        return lst1;\n    }\n    else if(sum1>sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            count++;\n            a = a / i;\n            i = 1;\n        }\n    }\n    if(count == 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/76", "generation": "\n    int i;\n    for(i=1;i<=x;i++){\n        if(pow(n,i)==x){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int i;\n    for(i=1;i*i*i<=a;i++){\n        if(i*i*i==a){\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count=0;\n    for(int i=0;i<num.length();i++){\n        if(num[i]=='2'||num[i]=='3'||num[i]=='5'||num[i]=='7'||num[i]=='B'||num[i]=='D'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}"}
{"task_id": "CPP/80", "generation": "\n    if(s.length()!=3) return false;\n    for(int i=0;i<3;i++){\n        if(s[i]==s[(i+1)%3]||s[i]==s[(i+2)%3]) return false;\n    }\n    return true;\n}"}
{"task_id": "CPP/81", "generation": "\n    vector<string> result;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n            result.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n            result.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n            result.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n            result.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n            result.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n            result.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n            result.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n            result.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n            result.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n            result.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n            result.push_back(\"D\");\n        }\n        else{\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/82", "generation": "\n    int len = str.length();\n    if(len < 2) return false;\n    for(int i = 2; i < len; i++){\n        if(len % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1) return 1;\n    if(n==2) return 2;\n    int a=1,b=2;\n    for(int i=3;i<=n;i++){\n        int c=a+b;\n        a=b;\n        b=c;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/84", "generation": "\n    string s=\"\";\n    int sum=0;\n    while(N>0){\n        sum+=N%2;\n        N/=2;\n    }\n    while(sum>0){\n        s+=sum%2+'0';\n        sum/=2;\n    }\n    reverse(s.begin(),s.end());\n    return s;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result=\"\";\n    string word=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' '){\n            sort(word.begin(),word.end());\n            result+=word;\n            result+=' ';\n            word=\"\";\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    sort(word.begin(),word.end());\n    result+=word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<vector<int>> result;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                result.push_back({i,j});\n            }\n        }\n    }\n    for(int i=0;i<result.size();i++){\n        for(int j=i+1;j<result.size();j++){\n            if(result[i][0]>result[j][0]){\n                swap(result[i],result[j]);\n            }\n            else if(result[i][0]==result[j][0] && result[i][1]<result[j][1]){\n                swap(result[i],result[j]);\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> copy = array;\n    if (array.size() == 0) {\n        return copy;\n    }\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2 == 0) {\n        sort(copy.begin(), copy.end());\n    } else {\n        sort(copy.begin(), copy.end(), greater<int>());\n    }\n    return copy;\n}\nvoid print_array(vector<int> array) {\n    for (int i = 0; i < array.size(); i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string encrypted = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            encrypted += (s[i] - 'a' + 4) % 26 + 'a';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            encrypted += (s[i] - 'A' + 4) % 26 + 'A';\n        }\n        else{\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i+1]<lst[i]) return lst[i+1];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I'){\n            if(S[i+1]==' '){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c||b==a+c||c==a+b){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(message[i] >= 'a' && message[i] <= 'z'){\n            if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u'){\n                result += message[i+2];\n            }\n            else{\n                result += message[i];\n            }\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z'){\n            if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U'){\n                result += message[i+2];\n            }\n            else{\n                result += message[i];\n            }\n        }\n        else{\n            result += message[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    string s=to_string(max);\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        sum+=s[i]-'0';\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        if(islower(it->first[0])){\n            all_upper = false;\n        }\n        else if(isupper(it->first[0])){\n            all_lower = false;\n        }\n        else{\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    for(int i=2;i<n;i++){\n        bool is_prime=true;\n        for(int j=2;j*j<=i;j++){\n            if(i%j==0){\n                is_prime=false;\n                break;\n            }\n        }\n        if(is_prime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int x=a%10;\n    int y=b%10;\n    return x*y;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(i%2==0 && s[i]>=65 && s[i]<=90 && s[i]!='A' && s[i]!='E' && s[i]!='I' && s[i]!='O' && s[i]!='U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> pile;\n    int stones = n;\n    for(int i = 0; i < n; i++){\n        pile.push_back(stones);\n        if(stones % 2 == 0){\n            stones += 2;\n        }else{\n            stones += 1;\n        }\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> v;\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==','){\n            v.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=s[i];\n        }\n    }\n    v.push_back(temp);\n    return v;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    int i;\n    for(i=x;i<=y;i++){\n        if(i%2==0){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-1\";\n    double avg = (n+m)/2.0;\n    int rounded = round(avg);\n    string binary = \"\";\n    while(rounded>0){\n        binary = to_string(rounded%2) + binary;\n        rounded /= 2;\n    }\n    return \"0b\" + binary;\n}"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        bool has_even_digit = false;\n        int num = x[i];\n        while(num>0){\n            int digit = num%10;\n            if(digit%2==0){\n                has_even_digit = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(!has_even_digit){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    map<int, vector<int>> m;\n    for(int i = 0; i < arr.size(); i++){\n        m[arr[i]].push_back(arr[i]);\n    }\n    vector<string> res;\n    for(auto it = m.rbegin(); it != m.rend(); it++){\n        for(int i = 0; i < it->second.size(); i++){\n            res.push_back(to_string(it->second[i]));\n        }\n    }\n    return res;\n}\nvector<string> sort_and_replace(vector<int> arr){\n    sort(arr.begin(), arr.end());\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            if(arr[i] == 1){\n                res.push_back(\"One\");\n            }\n            else if(arr[i] == 2){\n                res.push_back(\"Two\");\n            }\n            else if(arr[i] == 3){\n                res.push_back(\"Three\");\n            }\n            else if(arr[i] == 4){\n                res.push_back(\"Four\");\n            }\n            else if(arr[i] == 5){\n                res.push_back(\"Five\");\n            }\n            else if(arr[i] == 6){\n                res.push_back(\"Six\");\n            }\n            else if(arr[i] == 7){\n                res.push_back(\"Seven\");\n            }\n            else if(arr[i] == 8){\n                res.push_back(\"Eight\");\n            }\n            else if(arr[i] == 9){\n                res.push_back(\"Nine\");\n            }\n        }\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\nvector<string> sort_and_replace2(vector<int> arr){\n    sort(arr.begin(), arr.end());\n    vector<string> res;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            if(arr[i] == 1){\n                res.push_back(\"One\");\n            }\n            else if(arr[i] == 2){\n                res.push_back(\"Two\");\n            }\n            else if(arr[i] == 3){\n                res.push_back(\"Three\");\n            }\n            else if(arr[i] == 4){\n                res.push_back(\"Four\");\n            }\n            else if(arr[i] == 5){\n                res.push_back(\"Five\");\n            }\n            else if(arr[i] == 6){\n                res.push_back(\"Six\");\n            }\n            else if"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }else{\n            int sum=0;\n            for(int j=1;j<=i;j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    vector<int> result(2,0);\n    for(int i=1;i<=n;i++){\n        string s = to_string(i);\n        string rev_s = s;\n        reverse(rev_s.begin(),rev_s.end());\n        if(s==rev_s){\n            if(i%2==0){\n                result[0]++;\n            }\n            else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count=0;\n    for(int i=0;i<n.size();i++){\n        int sum=0;\n        int num=n[i];\n        if(num<0){\n            num=-num;\n        }\n        while(num>0){\n            sum+=num%10;\n            num=num/10;\n        }\n        if(sum>0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0) return true;\n    int min_index = 0;\n    for(int i = 1; i < n; i++){\n        if(arr[i] < arr[min_index]){\n            min_index = i;\n        }\n    }\n    if(min_index == n-1) return true;\n    for(int i = min_index+1; i < n; i++){\n        if(arr[i] < arr[i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int even=0,odd=0;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2==0) even++;\n        else odd++;\n    }\n    for(int i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0) even++;\n        else odd++;\n    }\n    if(even>=lst1.size()) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> hist;\n    int max=0;\n    for(int i=0;i<test.length();i++){\n        if(test[i]!=' '){\n            hist[test[i]]++;\n            if(hist[test[i]]>max){\n                max=hist[test[i]];\n            }\n        }\n    }\n    map<char,int> result;\n    for(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n        if(it->second==max){\n            result[it->first]=it->second;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    vector<string> res;\n    string temp=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]==c[0]||s[i]==c[1]){\n            continue;\n        }\n        temp+=s[i];\n    }\n    res.push_back(temp);\n    if(temp==string(temp.rbegin(),temp.rend())){\n        res.push_back(\"True\");\n    }\n    else{\n        res.push_back(\"False\");\n    }\n    return res;\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> result;\n    map<char,int> m;\n    for(int i=0;i<lst.size();i++){\n        int count=0;\n        for(int j=0;j<lst[i].length();j++){\n            if((lst[i][j]-'0')%2!=0){\n                count++;\n            }\n        }\n        string s=\"the number of odd elements in string \"+to_string(count)+\" of input.\";\n        result.push_back(s);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long min_sum = nums[0];\n    long long current_sum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        current_sum = min(nums[i], current_sum + nums[i]);\n        min_sum = min(min_sum, current_sum);\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int max_fill=0;\n    for(int i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                max_fill+=capacity;\n            }\n        }\n    }\n    return max_fill;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<int> binary;\n    for(int i=0;i<arr.size();i++){\n        int num=arr[i];\n        int count=0;\n        while(num>0){\n            if(num%2==1){\n                count++;\n            }\n            num=num/2;\n        }\n        binary.push_back(count);\n    }\n    for(int i=0;i<arr.size();i++){\n        for(int j=0;j<arr.size()-1;j++){\n            if(binary[j]>binary[j+1]){\n                int temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n                int temp2=binary[j];\n                binary[j]=binary[j+1];\n                binary[j+1]=temp2;\n            }\n            else if(binary[j]==binary[j+1]){\n                if(arr[j]>arr[j+1]){\n                    int temp=arr[j];\n                    arr[j]=arr[j+1];\n                    arr[j+1]=temp;\n                    int temp2=binary[j];\n                    binary[j]=binary[j+1];\n                    binary[j+1]=temp2;\n                }\n            }\n        }\n    }\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> res;\n    string word=\"\";\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n            if(s[i]!='a'&&s[i]!='e'&&s[i]!='i'&&s[i]!='o'&&s[i]!='u'){\n                count++;\n            }\n        }\n        else{\n            if(count==n){\n                res.push_back(word);\n            }\n            word=\"\";\n            count=0;\n        }\n    }\n    if(count==n){\n        res.push_back(word);\n    }\n    return res;\n}"}
{"task_id": "CPP/118", "generation": "\n    string vowels=\"aeiouAEIOU\";\n    string result=\"\";\n    for(int i=word.length()-1;i>0;i--){\n        if(vowels.find(word[i])!=string::npos&&vowels.find(word[i-1])!=string::npos){\n            result=word[i];\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "\n    string s;\n    for(int i=0;i<lst.size();i++){\n        s+=lst[i];\n    }\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='(') count++;\n        else count--;\n        if(count<0) return \"No\";\n    }\n    if(count==0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> result(arr.end()-k,arr.end());\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i+=2){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        if(arr[i]>=10 && arr[i]<=99){\n            sum+=arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 != 0){\n            collatz.push_back(n);\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}"}
{"task_id": "CPP/124", "generation": "\n    int month, day, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day > 29) return false;\n        if (day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n    }\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> res;\n    string temp = \"\";\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] == ' '){\n            res.push_back(temp);\n            temp = \"\";\n        }\n        else if(txt[i] == ','){\n            res.push_back(temp);\n            temp = \"\";\n        }\n        else{\n            temp += txt[i];\n        }\n    }\n    if(temp != \"\"){\n        res.push_back(temp);\n    }\n    return res;\n}\nint lower_letters(string txt){\n    int res = 0;\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            res += txt[i] - 'a';\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size()<=1) return true;\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<lst[i-1]) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0],interval2[0]);\n    int end = min(interval1[1],interval2[1]);\n    if(start > end) return \"NO\";\n    int length = end - start + 1;\n    if(length == 1) return \"YES\";\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    if(arr.size()==0) return 0;\n    int sum=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<0) sum+=1;\n        else if(arr[i]>0) sum+=-1;\n    }\n    return sum;\n}"}
{"task_id": "CPP/129", "generation": "\n    vector<int> result;\n    int n = grid.size();\n    int minVal = n * n;\n    int minIndex = -1;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(grid[i][j] < minVal){\n                minVal = grid[i][j];\n                minIndex = i * n + j;\n            }\n        }\n    }\n    result.push_back(minVal);\n    k--;\n    while(k > 0){\n        int row = minIndex / n;\n        int col = minIndex % n;\n        int left = col > 0 ? grid[row][col-1] : n * n + 1;\n        int right = col < n-1 ? grid[row][col+1] : n * n + 1;\n        int up = row > 0 ? grid[row-1][col] : n * n + 1;\n        int down = row < n-1 ? grid[row+1][col] : n * n + 1;\n        int minNeighbor = min(min(left, right), min(up, down));\n        if(minNeighbor == left){\n            minIndex = row * n + col - 1;\n        }else if(minNeighbor == right){\n            minIndex = row * n + col + 1;\n        }else if(minNeighbor == up){\n            minIndex = (row-1) * n + col;\n        }else{\n            minIndex = (row+1) * n + col;\n        }\n        result.push_back(minNeighbor);\n        k--;\n    }\n    return result;\n}"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res;\n    if(n==0) return res;\n    res.push_back(1);\n    if(n==1) return res;\n    res.push_back(3);\n    if(n==2) return res;\n    for(int i=2;i<n;i++){\n        if(i%2==0){\n            res.push_back(res[i-1]+res[i-2]);\n        }\n        else{\n            res.push_back(res[i-1]+res[i-2]+res[i-3]);\n        }\n    }\n    return res;\n}"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    string s = to_string(n);\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] % 2 != 0){\n            product *= s[i] - '0';\n        }\n    }\n    if(product == 1){\n        return 0;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count=0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='[') count++;\n        else if(str[i]==']') count--;\n        if(count<0) return false;\n    }\n    return count==0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length()==0)\n        return false;\n    char last=txt[txt.length()-1];\n    if((last>='a'&&last<='z')||(last>='A'&&last<='Z'))\n        return true;\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n=arr.size();\n    int max=arr[0];\n    int max_index=0;\n    for(int i=1;i<n;i++){\n        if(arr[i]>max){\n            max=arr[i];\n            max_index=i;\n        }\n    }\n    for(int i=0;i<n;i++){\n        if(arr[i]>arr[i+1]){\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int max = -2147483648;\n    int min = 2147483647;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        }\n        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n    }\n    if(max == -2147483648){\n        max = 0;\n    }\n    if(min == 2147483647){\n        min = 0;\n    }\n    return {max, min};\n}"}
{"task_id": "CPP/137", "generation": "\n    if(a.type()==b.type()){\n        if(a.type()==typeid(int)){\n            int a1=boost::any_cast<int>(a);\n            int b1=boost::any_cast<int>(b);\n            if(a1>b1){\n                return a1;\n            }\n            else if(a1<b1){\n                return b1;\n            }\n            else{\n                return boost::any();\n            }\n        }\n        else if(a.type()==typeid(float)){\n            float a1=boost::any_cast<float>(a);\n            float b1=boost::any_cast<float>(b);\n            if(a1>b1){\n                return a1;\n            }\n            else if(a1<b1){\n                return b1;\n            }\n            else{\n                return boost::any();\n            }\n        }\n        else if(a.type()==typeid(string)){\n            string a1=boost::any_cast<string>(a);\n            string b1=boost::any_cast<string>(b);\n            if(a1>b1){\n                return a1;\n            }\n            else if(a1<b1){\n                return b1;\n            }\n            else{\n                return boost::any();\n            }\n        }\n    }\n    else{\n        return boost::any();\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "\n    if(n%2==0 && n>=8){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/139", "generation": "\n    long long result = 1;\n    for(int i = 1; i <= n; i++){\n        result *= i;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1){\n                result += '_';\n            }\n            else if(count == 2){\n                result += '-';\n            }\n        }\n        else{\n            count = 0;\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int i=0;\n    int count=0;\n    int dot=0;\n    int letter=0;\n    int num=0;\n    int flag=0;\n    int flag1=0;\n    int flag2=0;\n    int flag3=0;\n    int flag4=0;\n    int flag5=0;\n    int flag6=0;\n    int flag7=0;\n    int flag8=0;\n    int flag9=0;\n    int flag10=0;\n    int flag11=0;\n    int flag12=0;\n    int flag13=0;\n    int flag14=0;\n    int flag15=0;\n    int flag16=0;\n    int flag17=0;\n    int flag18=0;\n    int flag19=0;\n    int flag20=0;\n    int flag21=0;\n    int flag22=0;\n    int flag23=0;\n    int flag24=0;\n    int flag25=0;\n    int flag26=0;\n    int flag27=0;\n    int flag28=0;\n    int flag29=0;\n    int flag30=0;\n    int flag31=0;\n    int flag32=0;\n    int flag33=0;\n    int flag34=0;\n    int flag35=0;\n    int flag36=0;\n    int flag37=0;\n    int flag38=0;\n    int flag39=0;\n    int flag40=0;\n    int flag41=0;\n    int flag42=0;\n    int flag43=0;\n    int flag44=0;\n    int flag45=0;\n    int flag46=0;\n    int flag47=0;\n    int flag48=0;\n    int flag49=0;\n    int flag50=0;\n    int flag51=0;\n    int flag52=0;\n    int flag53=0;\n    int flag54=0;\n    int flag55=0;\n    int flag56=0;\n    int flag57=0;\n    int flag58=0;\n    int flag59=0;\n    int flag60=0;\n    int flag61=0;\n    int flag62=0;\n    int flag63=0;\n    int flag64=0;\n    int flag65=0;\n    int flag66=0;\n    int flag67=0;\n    int flag68=0;\n"}
{"task_id": "CPP/142", "generation": "\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string result = \"\";\n    string word = \"\";\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            if(is_prime(word.length())){\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n        else{\n            word += sentence[i];\n        }\n    }\n    if(is_prime(word.length())){\n        result += word;\n    }\n    return result;\n}\nbool is_prime(int n){\n    if(n < 2){\n        return false;\n    }\n    for(int i = 2; i * i <= n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    if(a*d==b*c) return true;\n    return false;\n}\n/*You are given a string s and a string t. You can perform two operations on the string s: Insert a character to the beginning or the end of the string. Delete a character from the beginning or the end of the string. Find the minimum number of operations to transform s into t. For example, given s = \"abcde\" and t = \"cde\", the output should be 1. We can delete the character 'a' from the beginning of s to get t.*/\n\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint minOperations(string s,string t){\n    int i=0,j=0;\n    while(i<s.length()&&j<t.length()){\n        if(s[i]==t[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    return s.length()-i;\n}\n/*You are given a string s and a string t. You can perform two operations on the string s: Insert a character to the beginning or the end of the string. Delete a character from the beginning or the end of the string. Find the minimum number of operations to transform s into t. For example, given s = \"abcde\" and t = \"cde\", the output should be 1. We can delete the character 'a' from the beginning of s to get t.*/\n\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint minOperations(string s,string t){\n    int i=0,j=0;\n    while(i<s.length()&&j<t.length()){\n        if(s[i]==t[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    return s.length()-i;\n}\n/*You are given a string s and a string t. You can perform two operations on the string s: Insert a character to the beginning or the end of the string. Delete a character from the beginning or the end of the string. Find the minimum number of operations to transform s into t. For example, given s = \"abcde\" and t = \"cde\", the output should be 1. We can delete the character 'a' from the beginning of s to get t.*/\n\n#include<stdio.h>\n#include<string>\n"}
{"task_id": "CPP/145", "generation": "\n    vector<int> result;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum = 0;\n        int num = nums[i];\n        while(num != 0){\n            sum += abs(num % 10);\n            num /= 10;\n        }\n        result.push_back(sum);\n    }\n    for(int i = 0; i < result.size(); i++){\n        for(int j = i + 1; j < result.size(); j++){\n            if(result[i] > result[j]){\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n            }\n        }\n    }\n    return nums;\n}"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n            string numStr = to_string(nums[i]);\n            if(numStr[0] % 2 != 0 && numStr[1] % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a;\n    for(int i=1;i<=n;i++){\n        a.push_back(i*i-i+1);\n    }\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int index1,index2;\n    for(int i=0;i<planets.size();i++){\n        if(planets[i]==planet1){\n            index1=i;\n        }\n        if(planets[i]==planet2){\n            index2=i;\n        }\n    }\n    if(index1==-1||index2==-1){\n        return result;\n    }\n    if(index1>index2){\n        int temp=index1;\n        index1=index2;\n        index2=temp;\n    }\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> result;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length()%2==0){\n            result.push_back(lst[i]);\n        }\n    }\n    sort(result.begin(),result.end(),[](string a,string b){\n        if(a.length()==b.length()){\n            return a<b;\n        }\n        return a.length()<b.length();\n    });\n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    int i;\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}"}
{"task_id": "CPP/153", "generation": "\n    string strongest=\"\";\n    int max_strength=0;\n    for(int i=0;i<extensions.size();i++){\n        int strength=0;\n        for(int j=0;j<extensions[i].size();j++){\n            if(extensions[i][j]>=65 && extensions[i][j]<=90){\n                strength++;\n            }\n        }\n        strength=strength-(extensions[i].size()-strength);\n        if(strength>max_strength){\n            max_strength=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+\".\"+strongest;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.length();\n    int m=b.length();\n    if(m>n)\n        return false;\n    for(int i=0;i<n;i++){\n        string temp=a.substr(i,m);\n        if(temp==b)\n            return true;\n        temp=temp.substr(1,m-1)+temp[0];\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even=0,odd=0;\n    if(num<0)\n        num=-num;\n    while(num>0){\n        if(num%2==0)\n            even++;\n        else\n            odd++;\n        num=num/10;\n    }\n    return {even,odd};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string result = \"\";\n    for (int i = 0; i < values.size(); i++){\n        while (number >= values[i]){\n            result += symbols[i];\n            number -= values[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max;\n    if(a>b && a>c){\n        max=a;\n    }\n    else if(b>a && b>c){\n        max=b;\n    }\n    else{\n        max=c;\n    }\n    if(max==a){\n        if(pow(a,2)==pow(b,2)+pow(c,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else if(max==b){\n        if(pow(b,2)==pow(a,2)+pow(c,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        if(pow(c,2)==pow(a,2)+pow(b,2)){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "\n    string max_word = \"\";\n    int max_unique = 0;\n    for(int i=0;i<words.size();i++){\n        string word = words[i];\n        sort(word.begin(),word.end());\n        word.erase(unique(word.begin(),word.end()),word.end());\n        if(word.size()>max_unique){\n            max_unique = word.size();\n            max_word = words[i];\n        }\n        else if(word.size()==max_unique){\n            if(words[i]<max_word){\n                max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    vector<int> result;\n    if(need>remaining){\n        result.push_back(number+remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number+need);\n        result.push_back(remaining-need);\n    }\n    return result;\n}"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    string result=\"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n            result+=s[i]+32;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n            result+=s[i]-32;\n        }\n        else{\n            result+=s[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return mdString;\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
