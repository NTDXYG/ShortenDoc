{"task_id": "CPP/0", "generation": "\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j]) <= threshold)\n                return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            count++;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n            count--;\n            temp += paren_string[i];\n            if(count == 0){\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n        else{\n            temp += paren_string[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "\n    float integer_part = floor(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n"}
{"task_id": "CPP/3", "generation": "\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0)\n            return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float mad = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        mad += fabs(numbers[i] - mean);\n    }\n    return mad / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "\n    vector<int> result;\n    int count = 0;\n    int max_count = 0;\n    for(int i=0; i<paren_string.size(); i++){\n        if(paren_string[i] == '('){\n            count++;\n            if(count > max_count){\n                max_count = count;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            count--;\n        }\n    }\n    result.push_back(max_count);\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring) != string::npos){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "\n    int sum = 0;\n    int product = 1;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "\n    vector<int> result;\n    int max = numbers[0];\n    result.push_back(max);\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "\n\n\nfunction make_palind(s) {\n    if (s === \"\") {\n        return \"\";\n    }\n    let reversed = s.split(\"\").reverse().join(\"\");\n    for (let i = s.length; i >= 0; i--) {\n        if (s.substr(0, i) === reversed.substr(reversed.length - i)) {\n            return s + reversed.substr(0, reversed.length - i);\n        }\n    }\n}\n\nconsole.log(make_palind(\"cat\")); // 'catac'\nconsole.log(make_palind(\"cata\")); // 'cataac'\nconsole.log(make_palind(\"\")); // ''\nconsole.log(make_palind(\"a\")); // 'aa'\nconsole.log(make_palind(\"aa\")); // 'aaa'\nconsole.log(make_palind(\"aba\")); // 'abaaba'\nconsole.log(make_palind(\"abac\")); // 'abacaba'\nconsole.log(make_palind(\"banana\")); // 'bananana'\nconsole.log(make_palind(\"race\")); // 'racecar'\nconsole.log(make_palind(\"level\")); // 'levellevel'\nconsole.log(make_palind(\"noon\")); // 'noonnoon'\nconsole.log(make_palind(\"radar\")); // 'radardar'\nconsole.log(make_palind(\"apple\")); // 'appleleppa'\nconsole.log(make_palind(\"pear\")); // 'pearraep'\nconsole.log(make_palind(\"kiwi\")); // 'kiwikki'\nconsole.log(make_palind(\"mango\")); // 'mangoman'\nconsole.log(make_palind(\"berry\")); // 'berryyreb'\nconsole.log(make_palind(\"grape\")); // 'grapegrape'\nconsole.log(make_palind(\"kiwi\")); // 'kiwikki'\nconsole.log(make_palind(\"mango\")); // 'mangoman'\nconsole.log(make_palind(\"berry\")); // 'berryyreb'\nconsole.log"}
{"task_id": "CPP/11", "generation": "\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            result+='0';\n        else\n            result+='1';\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "\n    if(strings.empty()) return \"\";\n    string longest = strings[0];\n    for(int i=1; i<strings.size(); i++){\n        if(strings[i].length() > longest.length()) longest = strings[i];\n    }\n    return longest;\n}\n"}
{"task_id": "CPP/13", "generation": "\n    if(b==0)\n        return a;\n    else\n        return greatest_common_divisor(b, a%b);\n}\n"}
{"task_id": "CPP/14", "generation": "\n    vector<string> prefixes;\n    for(int i=0; i<str.size(); i++){\n        prefixes.push_back(str.substr(0,i+1));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    return result.substr(0, result.length()-1);\n}\n"}
{"task_id": "CPP/16", "generation": "\n    vector<int> count(256,0);\n    for(int i=0; i<str.size(); i++){\n        count[str[i]]++;\n    }\n    int distinct_characters = 0;\n    for(int i=0; i<256; i++){\n        if(count[i]>0){\n            distinct_characters++;\n        }\n    }\n    return distinct_characters;\n}\n"}
{"task_id": "CPP/17", "generation": "\n    vector<int> result;\n    int i = 0;\n    while(i < music_string.size()){\n        if(music_string[i] == 'o'){\n            result.push_back(4);\n            i++;\n        }\n        else if(music_string[i] == '.'){\n            result.push_back(1);\n            i++;\n        }\n        else if(music_string[i] == '|'){\n            i++;\n        }\n        else{\n            int count = 0;\n            while(music_string[i] == '>'){\n                count++;\n                i++;\n            }\n            result.push_back(count);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/18", "generation": "\n    int count=0;\n    size_t found = str.find(substring);\n    while(found != string::npos){\n        count++;\n        found = str.find(substring, found+1);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "\n    map<string, int> num_map;\n    num_map[\"zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"nine\"] = 9;\n\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] == ' '){\n            result += to_string(num_map[temp]) + ' ';\n            temp = \"\";\n        } else {\n            temp += numbers[i];\n        }\n    }\n    result += to_string(num_map[temp]);\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "\n    float min_diff = INFINITY;\n    vector<float> closest_pair;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size()-1; i++){\n        if(numbers[i+1]-numbers[i] < min_diff){\n            min_diff = numbers[i+1]-numbers[i];\n            closest_pair = {numbers[i], numbers[i+1]};\n        }\n    }\n    return closest_pair;\n}\n"}
{"task_id": "CPP/21", "generation": "\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]<min) min = numbers[i];\n        if(numbers[i]>max) max = numbers[i];\n    }\n    vector<float> rescaled;\n    for(int i=0; i<numbers.size(); i++){\n        rescaled.push_back((numbers[i]-min)/(max-min));\n    }\n    return rescaled;\n}\n"}
{"task_id": "CPP/22", "generation": "\n    vector<int> result;\n    for(auto& value : values){\n        if(boost::any_cast<int>(&value)){\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "\n    int count = 0;\n    for(int i=0; str[i] != '\\0'; i++){\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/24", "generation": "\n    int i;\n    for(i=n-1;i>=1;i--){\n        if(n%i==0){\n            return i;\n        }\n    }\n}\nint largest_divisor15(int n){\n    int i;\n    for(i=n-1;i>=1;i--){\n        if(n%i==0 && i%15==0){\n            return i;\n        }\n    }\n}\n"}
{"task_id": "CPP/25", "generation": "\n    vector<int> factors;\n    for(int i=2;n>1;i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "\n    vector<int> result;\n    sort(numbers.begin(), numbers.end());\n    for(int i=0; i<numbers.size(); i++){\n        if(i==0 || numbers[i] != numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]-32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+32;\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/28", "generation": "\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].substr(0, prefix.size()) == prefix){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "\n    vector<float> positive;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n"}
{"task_id": "CPP/31", "generation": "\n    if(n<=1) return false;\n    if(n==2 || n==3) return true;\n    if(n%2==0 || n%3==0) return false;\n    for(long long i=5; i*i<=n; i+=6){\n        if(n%i==0 || n%(i+2)==0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "\n    double sum = 0;\n    for(int i = 0; i < xs.size(); i++){\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs, double start, double end){\n    /* \n    Finds a zero of a polynomial with coefficients xs using the bisection method. \n    *//* xs are coefficients a po.find_zero find x such poly( 0.find_zero returns only only zero point, even there many.Moreover find_zero only takes list xs having even number coefficients and largest non zero coefficient as it guarantees a solution>>> round(find_zero([1]), 2 # f(x = 1 +x -0-6 11, -6 1 2 (x - 1 * * 3 = - + 11x - 6x^ + x3 1.0 */\n    double mid = (start + end) / 2;\n    while(abs(poly(xs, mid)) > 0.000001){\n        if(poly(xs, start) * poly(xs, mid) < 0){\n            end = mid;\n        }\n        else{\n            start = mid;\n        }\n        mid = (start + end) / 2;\n    }\n    return mid;\n}\n\n"}
{"task_id": "CPP/33", "generation": "\n    vector<int> third;\n    for(int i=0; i<l.size(); i++){\n        if((i+1)%3==0) third.push_back(l[i]);\n    }\n    sort(third.begin(), third.end());\n    for(int i=0, j=0; i<l.size(); i++){\n        if((i+1)%3==0) l[i]=third[j++];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "\n    vector<int> result;\n    sort(l.begin(), l.end());\n    result.push_back(l[0]);\n    for(int i=1; i<l.size(); i++){\n        if(l[i] != l[i-1])\n            result.push_back(l[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/35", "generation": "\n    float max = l[0];\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"}
{"task_id": "CPP/36", "generation": "\n    int count=0;\n    for(int i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            char buffer[50];\n            sprintf(buffer, \"%d\", i);\n            for(int j=0;buffer[j] != '\\0';j++){\n                if(buffer[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "\n    vector<float> even_indic;\n    for(int i=0; i<l.size(); i+=2){\n        even_indic.push_back(l[i]);\n    }\n    sort(even_indic.begin(), even_indic.end());\n    for(int i=0, j=0; i<l.size(); i+=2, ++j){\n        l[i] = even_indic[j];\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* decodecycl(char* str) {\n    int len = strlen(str);\n    char* decoded = (char*)malloc(sizeof(char) * (len + 1));\n    for (int i = 0; i < len; i++) {\n        decoded[i] = str[i] - 1;\n    }\n    decoded[len] = '\\0';\n    return decoded;\n}\n\n"}
{"task_id": "CPP/39", "generation": "\n    int fib[2] = {0, 1};\n    int prime[2] = {2, 3};\n    int i = 2, j = 2, k = 2;\n    while(k < n){\n        fib[i%2] = fib[(i-1)%2] + fib[(i-2)%2];\n        if(fib[i%2] > prime[j]){\n            prime[j%2] = prime[(j-1)%2] + 2;\n            while(!is_prime(prime[j%2])){\n                prime[j%2] += 2;\n            }\n            j++;\n        }\n        i++;\n        k++;\n    }\n    return fib[i%2];\n}\n\nbool is_prime(int n){\n    if(n < 2) return false;\n    if(n == 2 || n == 3) return true;\n    if(n%2 == 0 || n%3 == 0) return false;\n    for(int i = 5; i*i <= n; i += 6){\n        if(n%i == 0 || n%(i+2) == 0) return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/40", "generation": "\n    int n = l.size();\n    if(n<3) return false;\n    sort(l.begin(), l.end());\n    for(int i=0; i<n-2; i++){\n        if(i>0 && l[i]==l[i-1]) continue;\n        int j=i+1, k=n-1;\n        while(j<k){\n            if(l[i]+l[j]+l[k]==0){\n                return true;\n            }\n            else if(l[i]+l[j]+l[k]<0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "\n    int count = 0;\n    for(int i=1; i<=n; i++){\n        for(int j=i+1; j<=n; j++){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/42", "generation": "\n    for(int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "\n    int n = l.size();\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(l[i]+l[j]==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "\n    string res=\"\";\n    while(x){\n        res=to_string(x%base)+res;\n        x/=base;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/45", "generation": "\n    return (0.5*a*h);\n}\n"}
{"task_id": "CPP/46", "generation": "\n    if(n<=1)\n        return n;\n    int fibo[n+1];\n    fibo[0] = 0;\n    fibo[1] = 0;\n    fibo[2] = 1;\n    fibo[3] = 1;\n    for(int i=4;i<=n;i++){\n        fibo[i] = fibo[i-1] + fibo[i-2] + fibo[i-3] + fibo[i-4];\n    }\n    return fibo[n];\n}\n"}
{"task_id": "CPP/47", "generation": "\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2-1]+l[n/2])/2;\n    else\n        return l[n/2];\n}\n"}
{"task_id": "CPP/48", "generation": "\n    int len = text.length();\n    for(int i=0; i<len/2; i++){\n        if(text[i] != text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "\n    if(n==0) return 1;\n    if(n==1) return 2;\n    int res=modp(n/2,p);\n    res=(res*res)%p;\n    if(n%2==1) res=(res*2)%p;\n    return res;\n}\n"}
{"task_id": "CPP/50", "generation": "\n    string decoded_string = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            if(s[i] >= 'a' && s[i] <= 'c'){\n                decoded_string += 'z';\n            }\n            else{\n                decoded_string += s[i] - 3;\n            }\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            if(s[i] >= 'A' && s[i] <= 'C'){\n                decoded_string += 'Z';\n            }\n            else{\n                decoded_string += s[i] - 3;\n            }\n        }\n        else{\n            decoded_string += s[i];\n        }\n    }\n    return decoded_string;\n}\n\n"}
{"task_id": "CPP/51", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < vowels.size(); i++){\n        text.erase(remove(text.begin(), text.end(), vowels[i]), text.end());\n    }\n    return text;\n}\n"}
{"task_id": "CPP/52", "generation": "\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>=t){\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "\n    return x+y;\n}\n"}
{"task_id": "CPP/54", "generation": "\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\n"}
{"task_id": "CPP/55", "generation": "\n    if(n<=1)\n        return n;\n    return fib(n-1)+fib(n-2);\n}\n"}
{"task_id": "CPP/56", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        else if(brackets[i] == '>'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "\n    int n = l.size();\n    if(n==0 || n==1) return true;\n    if(l[0]<=l[n-1]){\n        for(int i=0;i<n-1;i++){\n            if(l[i]>l[i+1]) return false;\n        }\n    }\n    else{\n        for(int i=0;i<n-1;i++){\n            if(l[i]<l[i+1]) return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/58", "generation": "\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(result));\n    result.erase(unique(result.begin(),result.end()),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "\n    int i = 2;\n    while(i * i <= n){\n        if(n % i != 0)\n            i++;\n        else\n            n /= i;\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/61", "generation": "\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i] == ')')\n            count--;\n        if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "\n    vector<float> res;\n    for(int i=1;i<xs.size();i++){\n        res.push_back(i*xs[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/63", "generation": "\n    if(n<=1)\n        return n;\n    int fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    for(int i=2;i<=n;i++){\n        fib[i] = fib[i-1] + fib[i-2];\n    }\n    return fib[n];\n}\n"}
{"task_id": "CPP/64", "generation": "\n    int count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U'||s[i]=='y'||s[i]=='Y'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "\n    string s = to_string(x);\n    int n = s.size();\n    if(shift >= n) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    else {\n        rotate(s.begin(),s.begin()+n-shift,s.end());\n        return s;\n    }\n}\n"}
{"task_id": "CPP/66", "generation": "\n    int sum = 0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += (int)s[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "\n    int apples = 0, oranges = 0;\n    int i = 0;\n    while(s[i] != '\\0'){\n        if(s[i] == 'a'){\n            apples++;\n        }\n        else if(s[i] == 'o'){\n            oranges++;\n        }\n        i++;\n    }\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "\n    int smallest_even = 10001, index = -1;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] <= smallest_even){\n            smallest_even = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1) return {};\n    return {smallest_even, index};\n}\n"}
{"task_id": "CPP/69", "generation": "\n    int max_val = -1;\n    int max_freq = 0;\n    int freq[100] = {0};\n    for(int i=0; i<lst.size(); i++){\n        freq[lst[i]]++;\n        if(freq[lst[i]] >= lst[i]){\n            if(lst[i] > max_val){\n                max_val = lst[i];\n            }\n        }\n    }\n    return max_val;\n}\n"}
{"task_id": "CPP/70", "generation": "\n    vector<int> res;\n    sort(lst.begin(), lst.end());\n    while(!lst.empty()){\n        res.push_back(lst.front());\n        lst.erase(lst.begin());\n        if(!lst.empty()){\n            res.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/71", "generation": "\n    if(a+b>c && b+c>a && c+a>b){\n        float s=(a+b+c)/2;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n        return round(area*100)/100;\n    }\n    else{\n        return -1;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "\n    int sum=0;\n    int max=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n        if(q[i]>max) max=q[i];\n    }\n    if(sum-max<=w) return true;\n    else return false;\n}\n"}
{"task_id": "CPP/73", "generation": "\n    int n = arr.size();\n    vector<int> temp(arr);\n    reverse(temp.begin(), temp.end());\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != temp[i]){\n            arr[i] = temp[i] = min(arr[i], temp[i]);\n        }\n    }\n    int count = 0;\n    for(int i=0; i<n/2; i++){\n        count += abs(arr[i] - temp[i]);\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "\n    int sum1=0,sum2=0;\n    for(int i=0;i<lst1.size();i++)\n        sum1+=lst1[i].size();\n    for(int i=0;i<lst2.size();i++)\n        sum2+=lst2[i].size();\n    if(sum1<sum2)\n        return lst1;\n    else\n        return lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "\n    int count = 0;\n    for(int i = 2; i <= a; i++){\n        if(a % i == 0){\n            while(a % i == 0){\n                a /= i;\n                count++;\n            }\n            if(i != 2 && i != 3 && i != 5){\n                return false;\n            }\n        }\n    }\n    return count > 1;\n}\n"}
{"task_id": "CPP/76", "generation": "\n    if(x==1)\n        return true;\n    if(n==1)\n        return false;\n    int i=2;\n    while(i<=sqrt(x)){\n        if(pow(n,i)==x)\n            return true;\n        i++;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/77", "generation": "\n    int n=round(pow(a, (1. / 3)));\n    return n*n*n == a;\n}\n"}
{"task_id": "CPP/78", "generation": "\n    int count = 0;\n    string prime_hex = \"2357BDB0\";\n    for(int i=0; i<num.size(); i++){\n        if(prime_hex.find(num[i]) != string::npos)\n            count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "\n    string binary = \"\";\n    while(decimal > 0){\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "\n    if(s.length() != 3)\n        return false;\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "\n    vector<string> letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i]>=3.7)\n            letter_grades.push_back(\"A\");\n        else if(grades[i]>=3.0)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i]>=2.7)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i]>=2.3)\n            letter_grades.push_back(\"B\");\n        else if(grades[i]>=2.0)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i]>=1.7)\n            letter_grades.push_back(\"C+\");\n        else if(grades[i]>=1.3)\n            letter_grades.push_back(\"C\");\n        else if(grades[i]>=1.0)\n            letter_grades.push_back(\"C-\");\n        else if(grades[i]>=0.7)\n            letter_grades.push_back(\"D+\");\n        else if(grades[i]>=0.3)\n            letter_grades.push_back(\"D\");\n        else if(grades[i]>=0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "\n    int n = str.length();\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/83", "generation": "\n    if(n==1)\n        return 1;\n    else\n        return 2*starts_one_ends(n-1);\n}\n"}
{"task_id": "CPP/84", "generation": "\n    int sum = 0;\n    while(N){\n        sum += N%2;\n        N /= 2;\n    }\n    string res = \"\";\n    while(sum){\n        res = (char)('0' + sum%2) + res;\n        sum /= 2;\n    }\n    return res;\n}\n"}
{"task_id": "CPP/85", "generation": "\n    int sum=0;\n    for(int i=1;i<lst.size();i+=2){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "\n    string result = \"\";\n    string temp = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == ' '){\n            sort(temp.begin(), temp.end());\n            result += temp + \" \";\n            temp = \"\";\n        }\n        else{\n            temp += s[i];\n        }\n    }\n    sort(temp.begin(), temp.end());\n    result += temp;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "\n    vector<pair<int,int>> res;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                res.push_back(make_pair(i,j));\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/88", "generation": "\n    vector<int> copy_array = array;\n    if((copy_array[0] + copy_array[copy_array.size()-1]) % 2 == 0)\n        sort(copy_array.begin(), copy_array.end());\n    else\n        sort(copy_array.rbegin(), copy_array.rend());\n    return copy_array;\n}\n"}
{"task_id": "CPP/89", "generation": "\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n            result += char(int(s[i]+4-65)%26 +65);\n        }\n        else{\n            result += char(int(s[i]+4-97)%26 +97);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "\n    if(lst.size()<2) return -1;\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<lst.size()-1; i++){\n        if(lst[i]<lst[i+1]) return lst[i+1];\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/91", "generation": "\n    int count = 0;\n    for(int i=0; i<S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!' ){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/92", "generation": "\n    if(a==b+c && a==(int)a && b==(int)b && c==(int)c){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"}
{"task_id": "CPP/93", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i=0; i<message.size(); i++){\n        if(isalpha(message[i])){\n            if(vowels.find(message[i]) != string::npos){\n                if(i+2 < message.size() && vowels.find(message[i+2]) != string::npos){\n                    result += toupper(message[i]);\n                }\n                else{\n                    result += tolower(message[i]);\n                }\n            }\n            else{\n                result += message[i];\n            }\n        }\n        else{\n            result += message[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/94", "generation": "\n    int prime[10] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    int max_prime = -1;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<10; j++){\n            if(lst[i] == prime[j] && lst[i] > max_prime){\n                max_prime = lst[i];\n            }\n        }\n    }\n    if(max_prime == -1){\n        return 0;\n    }\n    int sum = 0;\n    while(max_prime){\n        sum += max_prime%10;\n        max_prime /= 10;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/95", "generation": "\n    bool lower = true, upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++){\n        for(int i = 0; i < it->first.size(); i++){\n            if(islower(it->first[i])){\n                upper = false;\n            }\n            else{\n                lower = false;\n            }\n        }\n    }\n    return lower || upper;\n}\n"}
{"task_id": "CPP/96", "generation": "\n    vector<int> primes;\n    if(n<2) return primes;\n    vector<bool> sieve(n+1, true);\n    sieve[0] = sieve[1] = false;\n    for(int i=2; i*i<=n; i++){\n        if(sieve[i]){\n            for(int j=i*i; j<=n; j+=i){\n                sieve[j] = false;\n            }\n        }\n    }\n    for(int i=2; i<n; i++){\n        if(sieve[i]){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "\n    int unit_digit_a = abs(a%10);\n    int unit_digit_b = abs(b%10);\n    return unit_digit_a*unit_digit_b;\n}\n"}
{"task_id": "CPP/98", "generation": "\n    int count = 0;\n    for(int i=0; i<s.size(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "\n    double num = stod(value);\n    int rounded = (int)round(num);\n    int floor_val = (int)floor(num);\n    int ceil_val = (int)ceil(num);\n    if(rounded - num == 0.5 && num >= 0){\n        return ceil_val;\n    }\n    else if(num - floor_val == 0.5 && num < 0){\n        return floor_val;\n    }\n    else if(rounded - num < 0.5){\n        return rounded;\n    }\n    else{\n        return floor_val;\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "\n    vector<int> result;\n    int stones = n;\n    for(int i=0; i<n; i++){\n        result.push_back(stones);\n        if(stones%2 == 0) stones += 2;\n        else stones += 3;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' ' || s[i] == ','){\n            if(word != \"\"){\n                words.push_back(word);\n            }\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "\n    for(int i=y;i>=x;i--){\n        if(i%2==0)\n            return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "\n    if(n>m) return \"-\";\n    int sum=0,count=0;\n    for(int i=n;i<=m;i++){\n        sum+=i;\n        count++;\n    }\n    int avg=round((double)sum/count);\n    string binary=\"\";\n    while(avg>0){\n        binary=to_string(avg%2)+binary;\n        avg/=2;\n    }\n    return \"0b\"+binary;\n}\n"}
{"task_id": "CPP/104", "generation": "\n    vector<int> result;\n    for(int i=0;i<x.size();i++){\n        int num=x[i];\n        bool isEvenDigit=false;\n        while(num>0){\n            if((num%10)%2==0){\n                isEvenDigit=true;\n                break;\n            }\n            num/=10;\n        }\n        if(!isEvenDigit){\n            result.push_back(x[i]);\n        }\n    }\n    sort(result.begin(),result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "\n    vector<string> res;\n    map<int, string> num_to_str = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            res.push_back(num_to_str[arr[i]]);\n        }\n    }\n    sort(res.begin(), res.end(), [](string a, string b){ return a.size() > b.size(); });\n    reverse(res.begin(), res.end());\n    return res;\n}\n"}
{"task_id": "CPP/106", "generation": "\n    vector<int> result;\n    for(int i=1; i<=n; i++){\n        if(i%2==0){\n            int fact=1;\n            for(int j=1; j<=i; j++){\n                fact*=j;\n            }\n            result.push_back(fact);\n        }\n        else{\n            int sum=0;\n            for(int j=1; j<=i; j++){\n                sum+=j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i=1; i<=n; i++){\n        if(i<10){\n            if(i%2==0) even_count++;\n            else odd_count++;\n        }\n        else if(i<100){\n            if(i%11==0) odd_count++;\n            else{\n                string str = to_string(i);\n                if(str[0]==str[1]) even_count++;\n                else if((str[0]-'0')%2==0 && (str[1]-'0')%2==0) odd_count++;\n                else even_count++;\n            }\n        }\n        else{\n            string str = to_string(i);\n            if(str[0]==str[2]) even_count++;\n            else if((str[0]-'0')%2==0 && (str[2]-'0')%2==0) odd_count++;\n            else even_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        int sum = 0;\n        if(n[i] < 0){\n            int temp = abs(n[i]);\n            while(temp){\n                sum += temp%10;\n                temp /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n        else{\n            int temp = n[i];\n            while(temp){\n                sum += temp%10;\n                temp /= 10;\n            }\n            if(sum > 0)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "\n    int n = arr.size();\n    if(n == 0) return true;\n    int max_val = arr[0];\n    for(int i=1;i<n;i++){\n        if(arr[i]<max_val) return false;\n        max_val = max(max_val, arr[i]);\n    }\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "\n    int odd1=0,odd2=0;\n    for(int i=0;i<lst1.size();i++)\n        if(lst1[i]%2==1)\n            odd1++;\n    for(int i=0;i<lst2.size();i++)\n        if(lst2[i]%2==1)\n            odd2++;\n    if(odd1>odd2)\n        return \"NO\";\n    else\n        return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "\n    map<char,int> count;\n    int max = 0;\n    for(char& c : test){\n        if(c != ' '){\n            count[c]++;\n            if(count[c] > max)\n                max = count[c];\n        }\n    }\n    map<char,int> result;\n    for(auto& it : count)\n        if(it.second == max)\n            result[it.first] = it.second;\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "\n    for(auto i:c){\n        s.erase(remove(s.begin(),s.end(),i),s.end());\n    }\n    string s_rev=s;\n    reverse(s_rev.begin(),s_rev.end());\n    bool pal=(s==s_rev);\n    return {s,to_string(pal)};\n}\n"}
{"task_id": "CPP/113", "generation": "\n    vector<string> res;\n    for(auto &s: lst){\n        int count = 0;\n        for(char c: s){\n            if((c-'0')%2 != 0) count++;\n        }\n        string temp = \"the number of odd elements \" + to_string(count) + \" in the string \" + to_string(count) + \" of the input.\";\n        res.push_back(temp);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/114", "generation": "\n    long long sum = 0, min_sum = 0;\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum) min_sum = sum;\n        if(sum > 0) sum = 0;\n    }\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "\n    int n=grid.size();\n    int m=grid[0].size();\n    int buckets=0;\n    int total_water=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                total_water++;\n            }\n        }\n    }\n    while(total_water>0){\n        buckets++;\n        total_water-=capacity;\n    }\n    return buckets;\n}\n"}
{"task_id": "CPP/116", "generation": "\n    vector<pair<int,int>> vec;\n    for(int i=0;i<arr.size();i++){\n        int num=arr[i];\n        int count=0;\n        while(num){\n            count+=num%2;\n            num/=2;\n        }\n        vec.push_back(make_pair(count,arr[i]));\n    }\n    sort(vec.begin(),vec.end());\n    vector<int> res;\n    for(int i=0;i<vec.size();i++)\n        res.push_back(vec[i].second);\n    return res;\n}\n"}
{"task_id": "CPP/117", "generation": "\n    vector<string> words;\n    vector<string> result;\n    string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i] == ' '){\n            words.push_back(word);\n            word = \"\";\n        }else{\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n    for(int i=0;i<words.size();i++){\n        int count = 0;\n        for(int j=0;j<words[i].length();j++){\n            char c = tolower(words[i][j]);\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "\n    string vowels = \"aeiouAEIOU\";\n    for(int i = word.size()-2; i > 0; i--){\n        if(vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos){\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "\n    int open = 0, close = 0;\n    for(auto &s : lst){\n        for(char &c : s){\n            if(c == '(') open++;\n            else if(c == ')'){\n                if(open > 0) open--;\n                else return \"No\";\n            }\n        }\n    }\n    if(open == 0) return \"Yes\";\n    else return \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "\n    sort(arr.begin(),arr.end());\n    vector<int> res;\n    for(int i=arr.size()-1;i>=arr.size()-k;i--){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/121", "generation": "\n    int sum = 0;\n    for(int i=0; i<lst.size(); i+=2){\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "\n    int sum=0;\n    for(int i=0;i<k;i++){\n        int num=arr[i];\n        while(num>0){\n            int digit=num%10;\n            sum+=digit;\n            num/=10;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "\n    vector<int> collatz;\n    while(n != 1){\n        collatz.push_back(n);\n        if(n % 2 != 0) n = 3 * n + 1;\n        else n = n / 2;\n    }\n    collatz.push_back(1);\n    vector<int> odd_numbers;\n    for(int i = 0; i < collatz.size(); i++){\n        if(collatz[i] % 2 != 0) odd_numbers.push_back(collatz[i]);\n    }\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "\n    if(date.length() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n    int month = (date[0]-'0')*10 + (date[1]-'0');\n    int day = (date[3]-'0')*10 + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10 + (date[9]-'0');\n    if(month < 1 || month > 12 || day < 1 || year < 1)\n        return false;\n    if(month == 2){\n        if(day > 29)\n            return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30)\n            return false;\n    }\n    else{\n        if(day > 31)\n            return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "\n    vector<string> words;\n    string word = \"\";\n    for (auto x : txt){\n        if (x == ' ' || x == ',' || x == '!' || x == '.'){\n            if (word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else{\n            word += x;\n        }\n    }\n    if (word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}\nint count_odd_letters(string word){\n    int count = 0;\n    vector<int> letters(26, 0);\n    for (char c : word){\n        if (isalpha(c)){\n            letters[tolower(c) - 'a']++;\n        }\n    }\n    for (int i = 0; i < 26; i++){\n        if (letters[i] % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/126", "generation": "\n    if(lst.size()==0 || lst.size()==1) return true;\n    int prev = lst[0];\n    bool flag = lst[0]<lst[1];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]==prev) return false;\n        if(flag && lst[i]<prev) return false;\n        if(!flag && lst[i]>prev) return false;\n        prev = lst[i];\n    }\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    if(start > end)\n        return \"NO\";\n    int length = end - start + 1;\n    if(length < 2)\n        return \"NO\";\n    for(int i = 2; i * i <= length; i++){\n        if(length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/128", "generation": "\n    int sum = 0;\n    if(arr.size() == 0) return NULL;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] < 0) sum += abs(arr[i]);\n        else if(arr[i] > 0) sum -= arr[i];\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/129", "generation": "\n    int n = grid.size();\n    vector<int> result;\n    int min_sum = INT_MAX;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\n            dp[i][j] = grid[i][j];\n            vector<int> dir = {-1, 0, 1, 0, -1};\n            for(int s=0; s<k-1; s++){\n                vector<vector<int>> dp2 = dp;\n                for(int x=0; x<n; x++){\n                    for(int y=0; y<n; y++){\n                        for(int z=0; z<4; z++){\n                            int nx = x + dir[z], ny = y + dir[z+1];\n                            if(nx>=0 && nx<n && ny>=0 && ny<n){\n                                dp2[nx][ny] = min(dp2[nx][ny], dp[x][y] + grid[nx][ny]);\n                            }\n                        }\n                    }\n                }\n                dp = dp2;\n            }\n            int sum = 0;\n            for(int x=0; x<n; x++){\n                for(int y=0; y<n; y++){\n                    sum += dp[x][y];\n                }\n            }\n            if(sum < min_sum){\n                min_sum = sum;\n                result = dp[i];\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/130", "generation": "\n    vector<int> res(n);\n    if(n>=1) res[0] = 1;\n    if(n>=2) res[1] = 3;\n    if(n>=3) res[2] = 2;\n    for(int i=3; i<n; i++){\n        res[i] = res[i-1] + res[i-2] + res[i-3];\n    }\n    return res;\n}\n"}
{"task_id": "CPP/131", "generation": "\n    int product = 1;\n    while(n){\n        int digit = n%10;\n        if(digit%2 != 0){\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"}
{"task_id": "CPP/132", "generation": "\n    int count = 0;\n    for(int i=0; i<str.length(); i++){\n        if(str[i] == '['){\n            count++;\n        }\n        else if(str[i] == ']'){\n            count--;\n            if(count < 0){\n                return false;\n            }\n        }\n    }\n    return count != 0;\n}\n"}
{"task_id": "CPP/133", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "\n    if(txt.length() == 0) return false;\n    char lastChar = txt[txt.length()-1];\n    if((lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')){\n        if(txt.length() == 1) return true;\n        char secondLastChar = txt[txt.length()-2];\n        if((secondLastChar < 'a' || secondLastChar > 'z') && (secondLastChar < 'A' || secondLastChar > 'Z')) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/135", "generation": "\n    int n = arr.size();\n    if(n==1) return -1;\n    for(int i=n-1;i>0;i--){\n        if(arr[i]>arr[i-1]) return i;\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/136", "generation": "\n    int largest = INT_MIN, smallest = INT_MAX;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i]>0){\n            if(lst[i]>largest)\n                largest = lst[i];\n        }\n        else if(lst[i]<0){\n            if(lst[i]<smallest)\n                smallest = lst[i];\n        }\n    }\n    if(largest==INT_MIN)\n        largest = NULL;\n    if(smallest==INT_MAX)\n        smallest = NULL;\n    return {largest, smallest};\n}\n"}
{"task_id": "CPP/137", "generation": "\n    if(a.type() != b.type()){\n        return NULL;\n    }\n    if(a.type() == typeid(int)){\n        int a_val = boost::any_cast<int>(a);\n        int b_val = boost::any_cast<int>(b);\n        if(a_val > b_val){\n            return a_val;\n        }\n        else if(a_val < b_val){\n            return b_val;\n        }\n        else{\n            return NULL;\n        }\n    }\n    else if(a.type() == typeid(float)){\n        float a_val = boost::any_cast<float>(a);\n        float b_val = boost::any_cast<float>(b);\n        if(a_val > b_val){\n            return a_val;\n        }\n        else if(a_val < b_val){\n            return b_val;\n        }\n        else{\n            return NULL;\n        }\n    }\n    else if(a.type() == typeid(string)){\n        string a_val = boost::any_cast<string>(a);\n        string b_val = boost::any_cast<string>(b);\n        float a_float = stof(a_val);\n        float b_float = stof(b_val);\n        if(a_float > b_float){\n            return a_float;\n        }\n        else if(a_float < b_float){\n            return b_float;\n        }\n        else{\n            return NULL;\n        }\n    }\n}\n"}
{"task_id": "CPP/138", "generation": "\n    int count = 0;\n    for(int i=2; i<=n; i+=2){\n        for(int j=i+2; j<=n; j+=2){\n            for(int k=j+2; k<=n; k+=2){\n                for(int l=k+2; l<=n; l+=2){\n                    if(i+j+k+l == n){\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    if(count > 0){\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "\n    if(n<0)\n        return -1;\n    if(n==0 || n==1)\n        return 1;\n    long long fact=1;\n    for(int i=1;i<=n;i++){\n        fact=fact*i;\n        if(i%2==0)\n            fact=fact/i;\n    }\n    return fact;\n}\n"}
{"task_id": "CPP/140", "generation": "\n    string result;\n    int count = 0;\n    for(int i=0; i<text.length(); i++){\n        if(text[i] == ' '){\n            count++;\n            if(count == 1)\n                result += '_';\n            else if(count == 2){\n                result += '-';\n                count = 0;\n            }\n        }\n        else{\n            result += text[i];\n            count = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "\n    int count = 0;\n    for(int i=0; file_name[i] != '\\0'; i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n    }\n    if(count > 3){\n        return \"No\";\n    }\n    int dot_pos = file_name.find('.');\n    if(dot_pos == string::npos){\n        return \"No\";\n    }\n    if(dot_pos == 0){\n        return \"No\";\n    }\n    if(file_name[dot_pos + 1] == '\\0'){\n        return \"No\";\n    }\n    string extension = file_name.substr(dot_pos + 1);\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"){\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || (file_name[0] > 'z' && file_name[0] < 'A') || file_name[0] > 'Z'){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0 && i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else if(i%3==0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "\n    string words[100];\n    string result = \"\";\n    int j = 0;\n    for(int i = 0; i < sentence.length(); i++){\n        if(sentence[i] == ' '){\n            words[j] = sentence.substr(0, i);\n            sentence = sentence.substr(i+1);\n            j++;\n        }\n    }\n    words[j] = sentence;\n    j++;\n    for(int i = 0; i < j; i++){\n        if(words[i].length() % 2 == 0 || words[i].length() == 1){\n            continue;\n        }\n        else{\n            result += words[i] + \" \";\n        }\n    }\n    return result.substr(0, result.length()-1);\n}\n"}
{"task_id": "CPP/144", "generation": "\n    int num1,den1,num2,den2,gcd;\n    sscanf(x.c_str(),\"%d/%d\",&num1,&den1);\n    sscanf(n.c_str(),\"%d/%d\",&num2,&den2);\n    for(int i=1;i<=den1&&i<=den2;i++){\n        if(den1%i==0&&den2%i==0)\n            gcd=i;\n    }\n    if(num1*den2==num2*den1)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/145", "generation": "\n    vector<pair<int,int>> points;\n    for(int i=0;i<nums.size();i++){\n        int sum=0;\n        int num=abs(nums[i]);\n        while(num>0){\n            sum+=num%10;\n            num/=10;\n        }\n        points.push_back(make_pair(sum,i));\n    }\n    sort(points.begin(),points.end());\n    vector<int> res;\n    for(int i=0;i<points.size();i++){\n        res.push_back(nums[points[i].second]);\n    }\n    return res;\n}\n"}
{"task_id": "CPP/146", "generation": "\n    int count = 0;\n    for(int i=0; i<nums.size(); i++){\n        if(nums[i] > 10){\n            int first_digit = abs(nums[i]/10);\n            if(first_digit % 2 != 0)\n                count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "\n    vector<int> a(n);\n    for(int i=0;i<n;i++){\n        a[i] = i*i - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if((a[i] + a[j]) % 3 == 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    vector<string> result;\n    int index1=-1,index2=-1;\n    for(int i=0;i<8;i++){\n        if(planets[i]==planet1) index1=i;\n        if(planets[i]==planet2) index2=i;\n    }\n    if(index1==-1||index2==-1) return result;\n    if(index1>index2){\n        int temp=index1;\n        index1=index2;\n        index2=temp;\n    }\n    for(int i=index1+1;i<index2;i++){\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "\n    vector<string> even_lst;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].length() % 2 == 0)\n            even_lst.push_back(lst[i]);\n    }\n    sort(even_lst.begin(), even_lst.end());\n    return even_lst;\n}\n"}
{"task_id": "CPP/150", "generation": "\n    if(n<2)\n        return y;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)\n            return y;\n    }\n    return x;\n}\n"}
{"task_id": "CPP/151", "generation": "\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "\n    vector<int> result;\n    for(int i=0;i<game.size();i++){\n        result.push_back(abs(game[i]-guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "\n    int max_strength=0;\n    string strongest_extension=\"\";\n    for(auto extension:extensions){\n        int cap=0,sm=0;\n        for(auto ch:extension){\n            if(isupper(ch)) cap++;\n            if(islower(ch)) sm++;\n        }\n        int strength=cap-sm;\n        if(strength>max_strength){\n            max_strength=strength;\n            strongest_extension=extension;\n        }\n    }\n    return class_name+\".\"+strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "\n    int n=a.size(),m=b.size();\n    if(n<m) return false;\n    for(int i=0;i<m;i++){\n        string temp=b.substr(i)+b.substr(0,i);\n        if(a.find(temp)!=string::npos) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "\n    int even_count = 0;\n    int odd_count = 0;\n    num = abs(num);\n    while(num > 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n        num = num / 10;\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for(int i=0; i<values.size(); i++){\n        while(number >= values[i]){\n            number -= values[i];\n            res += roman[i];\n        }\n    }\n    return res;\n}\n"}
{"task_id": "CPP/157", "generation": "\n    float max_side,square_sum;\n    //find the maximum side\n    if(a>b && a>c)\n        max_side=a;\n    else if(b>c)\n        max_side=b;\n    else\n        max_side=c;\n    //calculate the square sum of the other two sides\n    square_sum=(a*a+b*b+c*c)-max_side*max_side;\n    //check if the square of the maximum side is equal to the sum of the squares of the other two sides\n    if(max_side*max_side==square_sum)\n        return true;\n    else\n        return false;\n}\n"}
{"task_id": "CPP/158", "generation": "\n    int max_unique = 0;\n    string max_word = \"\";\n    for(string word : words){\n        vector<int> count(26,0);\n        for(char c : word){\n            count[c - 'a']++;\n        }\n        int unique = 0;\n        for(int i = 0; i < 26; i++){\n            if(count[i] > 0){\n                unique++;\n            }\n        }\n        if(unique > max_unique || (unique == max_unique && word < max_word)){\n            max_unique = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "\n    int total = number + need;\n    if(total > remaining){\n        return {total, remaining - number};\n    }\n    else{\n        return {total, 0};\n    }\n}\n"}
{"task_id": "CPP/160", "generation": "\n    int result = operand[0];\n    for(int i=0; i<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i+1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i+1];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "\n    int n=s.length();\n    for(int i=0;i<n;i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                s[i]=toupper(s[i]);\n            else\n                s[i]=tolower(s[i]);\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    char md5string[33];\n    for(int i=0; i<16; i++){\n        sprintf(&md5string[i*2], \"%02x\", result[i]);\n    }\n    md5string[32]='\\0';\n    return string(md5string);\n}\n"}
{"task_id": "CPP/163", "generation": "\n    vector<int> result;\n    for(int i=a;i<=b;i++){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"}
