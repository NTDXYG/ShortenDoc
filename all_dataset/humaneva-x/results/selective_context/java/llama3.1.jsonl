{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        StringBuilder current_group = new StringBuilder();\n        boolean in_group = false;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                in_group = true;\n                current_group.append(c);\n            } else if (c == ')') {\n                in_group = false;\n                current_group.append(c);\n                result.add(current_group.toString());\n                current_group = new StringBuilder();\n            } else if (in_group) {\n                current_group.append(c);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/2", "generation": "\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    You're given list deposit and operations on a bank that starts zero balanceYour task detect if at any the balance account fallls below zero, and at that function should return TrueOtherwise it should return False.>>> below_zero([1 2]) False >>> below -4, 5\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance ="}
{"task_id": "Java/4", "generation": "\n        if (numbers.size() == 0) {\n            return 0;\n        }\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumDev = 0;\n        for (double num : numbers) {\n            sumDev += Math.abs(num - mean);\n        }\n        return sumDev / numbers.size();\n    }\n\n    \n}"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        int max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                int start = stack.pop();\n                int length = i - start + 1;\n                max = Math.max(max, length);\n            }\n        }\n        result.add(max);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/10", "generation": "\n        if (string.length() == 0) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return string + string.substring(0, i) + string.substring(i + 1, j) + string.substring(j + 1).reverse();\n            }\n            i++;\n            j--;\n        }\n        return string + string;\n    }\n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        // If b is 0, the GCD is a\n        if (b == 0) {\n            return a;\n        }\n        // Otherwise, the GCD is the same as the GCD of b and the remainder of a divided by b\n        else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        // Convert the string to lower case\n        string = string.toLowerCase();\n        // Create a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        // Return the size of the set, which represents the number of unique characters\n        return uniqueChars.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            } else if (note.equals(\"o.\")) {\n                result.add(3);\n            } else if (note.equals(\"o|.\")) {\n                result.add(1);\n            } else if (note.equals(\".|.\")) {\n                result.add(0.5);\n            } else if (note.equals(\"o..\")) {\n                result.add(2);\n            } else if (note.equals(\"o.|.\")) {\n                result.add(0.5);\n            } else if (note.equals(\".|..\")) {\n                result.add(0.5);\n            } else if (note.equals(\"o...\")) {\n                result.add(1);\n            } else if (note.equals(\"o.|..\")) {\n                result.add(0.5);\n            } else if (note.equals(\".|...\")) {\n                result.add(0.25);\n            } else if (note.equals(\"o....\")) {\n                result.add(0.5);\n            } else if (note.equals(\"o.|...\")) {\n                result.add(0.25);\n            } else if (note.equals(\".|....\")) {\n                result.add(0.25);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        if (string == null || substring == null) {\n            return 0;\n        }\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        // Initialize the minimum difference and the pair of numbers with the minimum difference\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        // Iterate over the list of numbers to find the pair with the minimum difference\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Calculate the difference between the current number and the next number\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            // If the difference is less than the minimum difference, update the minimum difference and the closest pair\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        // Return the pair of numbers with the minimum difference\n        return closestPair;\n    }\n} <<< findClosestElements([1.0, 2.0, 3, 4, 5, 22]) (2.0, 22) >>> findClosestElements([10, 200]) (20, 20)\n"}
{"task_id": "Java/21", "generation": "\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        if (min == max) {\n            return numbers;\n        }\n\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add((num - min) / (max - min));\n        }\n\n        return rescaled;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    \n}"}
{"task_id": "Java/24", "generation": "\n        int divisor = 1;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n = n / divisor;\n            }\n            divisor++;\n        }\n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream()\n                .filter(x -> set.add(x))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append((char) (c - 32));\n            } else if (Character.isUpperCase(c)) {\n                sb.append((char) (c + 32));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        double precision = 0.00001;\n        while (true) {\n            double polyValue = poly(xs, x);\n            if (Math.abs(polyValue) < precision) {\n                return x;\n            }\n            x += 1;\n        }\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        return l2;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n\n    \n}"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                count += count7(str);\n            }\n        }\n        return count;\n    }\n\n    public int count7(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l.set(i, l1.get(i / 2));\n            } else {\n                l.set(i, l2.get(i / 2));\n            }\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int a = 0, b = 1, count = 0;\n        while (count < n) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n            if (isPrime(b)) {\n                count++;\n            }\n        }\n        return b;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Arrays.sort(l.toArray(new Integer[0]));\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        int[] cars = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars[i] = i + 1;\n        }\n        int collision = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (cars[i] < cars[j]) {\n                    collision++;\n                }\n            }\n        }\n        return collision;\n    }\n\n    \n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n} \n"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n        return d;\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        // Remove spaces and convert to lowercase\n        text = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        // Compare the string with its reverse\n        return text.equals(new StringBuilder(text).reverse().toString());\n    }\n\n    \n}"}
{"task_id": "Java/49", "generation": "\n        if (n == 0) return 1;\n        int half = modp(n / 2, p);\n        if (n % 2 == 0) return (int) ((long) half * half % p);\n        else return (int) ((long) half * half % p * 2 % p);\n    }\n\n    \n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(i -> i < t);\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Return True if all numbers in list l are below threshold t.>>> below_threshold([1 2 4 10], 100) True below 20 4 10 5 False\n     */\n    public boolean belowThreshold(List<Integer> l, int t\n}"}
{"task_id": "Java/53", "generation": "\n        while (y != 0) {\n            int carry = x & y;\n            x = x ^ y;\n            y = carry << 1;\n        }\n        return x;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i)]++;\n            count[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n\n    public int fib1(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int sum = a + b;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack.push('<');\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/57", "generation": "\n        boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        Set<Integer> common = new HashSet<>(set1);\n        common.retainAll(set2);\n        List<Integer> result = new ArrayList<>(common);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int max = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                max = Math.max(max, i);\n                n = n / i;\n            }\n        }\n        return max;\n    }\n}  // class Solution\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push('(');\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> res = new ArrayList<>();\n        if (xs.size() == 0) {\n            return res;\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 1;\n            for (int i = 3; i <= n; i++) {\n                int temp = a + b + c;\n                a = b;\n                b = c;\n                c = temp;\n            }\n            return c;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (isVowel(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public boolean isVowel(char c) {\n        String vowels = \"aeiouAEIOUY\";\n        return vowels.indexOf(c) != -1;\n    }\n} \n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int len = str.length();\n        shift = shift % len;\n        String firstPart = str.substring(len - shift);\n        String secondPart = str.substring(0, len - shift);\n        return firstPart + secondPart;\n    }\n\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/67", "generation": "\n        String[] words = s.split(\" \");\n        int apples = 0;\n        int oranges = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            } else if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        return n - apples - oranges;\n    }\n\n    \n}"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int smallest = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallest) {\n                smallest = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n        if (smallest != Integer.MAX_VALUE) {\n            result.add(smallest);\n            result.add(smallestIndex);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max == 0 ? -1 : max;\n    }\n\n    \n}"}
{"task_id": "Java/70", "generation": "\n        if (lst.size() == 0) {\n            return lst;\n        }\n        List<Integer> result = new ArrayList<>();\n        List<Integer> min = new ArrayList<>();\n        List<Integer> max = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                min.add(lst.get(i));\n            } else {\n                max.add(lst.get(i));\n            }\n        }\n        Collections.sort(min);\n        Collections.sort(max);\n        Collections.reverse(max);\n        for (int i = 0; i < min.size(); i++) {\n            result.add(min.get(i));\n            if (i < max.size()) {\n                result.add(max.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        // Check if the three sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Return the area rounded to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        int max = q.stream().max(Integer::compare).orElse(0);\n        return sum <= w && sum <= max;\n    }\n\n    \n}"}
{"task_id": "Java/73", "generation": "\n        int n = arr.size();\n        int[] dp = new int[n];\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int min = Integer.MAX_VALUE;\n            for (int j = 0; j < i; j++) {\n                min = Math.min(min, dp[j] + (arr.get(i) == arr.get(j) ? 0 : 1));\n            }\n            dp[i] = min;\n        }\n        return dp[n - 1];\n    }\n\n    \n}"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum1 > sum2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\ufffd\ufffd\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isMultPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0 && isMultiplyPrime(i)) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}  // class Solution\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        int i = 0;\n        while (Math.pow(n, i) <= x) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}  // class Solution\n"}
{"task_id": "Java/77", "generation": "\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}  // class Solution\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (isPrime(Integer.parseInt(c + \"\", 16))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class\n"}
{"task_id": "Java/79", "generation": "\n        // Convert the decimal number to binary and remove the '0b' prefix\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Add the extra characters 'db' at the beginning and end of the string\n        String result = \"db\" + binary + \"db\";\n        \n        return result;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() > 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // time complexity: O(n) where n is the length of the string\n// space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size.  // space complexity: O(1) as we are not using any extra space that scales with input size."}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.0) {\n                result.add(\"A-\");\n            } else if (grade >= 2.7) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.0) {\n                result.add(\"B-\");\n            } else if (grade >= 1.7) {\n                result.add(\"C+\");\n            } else if (grade >= 1.0) {\n                result.add(\"C\");\n            } else if (grade >= 0.7) {\n                result.add(\"C-\");\n            } else if (grade >= 0.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 1; i <= 9; i++) {\n            count += (int) Math.pow(10, n - 1);\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            char[] word = words[i].toCharArray();\n            Arrays.sort(word);\n            words[i] = new String(word);\n        }\n        return String.join(\" \", words);\n    }\n\n    \n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j).equals(x)) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(i);\n                    temp.add(j);\n                    result.add(temp);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0).equals(o2.get(0))) {\n                    return o2.get(1).compareTo(o1.get(1));\n                } else {\n                    return o1.get(0).compareTo(o2.get(0));\n                }\n            }\n        });\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/88", "generation": "\n        if (array.size() == 0) {\n            return array;\n        }\n        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int asciiOffset = Character.isUpperCase(c) ? 65 : 97;\n                encrypted.append((char) ((c - asciiOffset + 2 * 2) % 26 + asciiOffset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int smallest = lst.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n                smallest = lst.get(i);\n                smallestIndex = i;\n            }\n        }\n        for (int i = smallestIndex + 1; i < lst.size(); i++) {\n            if (lst.get(i) <= smallest) {\n                return Optional.empty();\n            }\n        }\n        return Optional.of(lst.get(smallestIndex + 1));\n    }\n} \n"}
{"task_id": "Java/91", "generation": "\n        String[] words = S.split(\"[.!?]\");\n        int count = 0;\n        for (String word : words) {\n            if (word.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/92", "generation": "\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a + b == c) || (a + c == b) || (b + c == a);\n    }\n\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                char lower = Character.toLowerCase(c);\n                if (lower == 'a') {\n                    sb.append('e');\n                } else if (lower == 'e') {\n                    sb.append('i');\n                } else if (lower == 'i') {\n                    sb.append('o');\n                } else if (lower == 'o') {\n                    sb.append('u');\n                } else if (lower == 'u') {\n                    sb.append('a');\n                } else {\n                    sb.append(lower);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                maxPrime = Math.max(maxPrime, lst.get(i));\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}  // time complexity O(n*sqrt(n)) space complexity O(1)  // 1\n}
{"task_id": "Java/95", "generation": "\n        // Check if all keys are strings\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n        }\n        // Check if all string keys are in lower case\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String) || !((String) key).toLowerCase().equals((String) key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // time complexity: O(n*sqrt(n)) space complexity: O(n)  // O(n) for the list and O(n*sqrt(n)) for the isPrime function\n"}
{"task_id": "Java/97", "generation": "\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int unitDigitProduct = unitDigitA * unitDigitB;\n        return unitDigitProduct;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int unitDigitProduct = unitDigitA * unitDigitB;\n        return unitDigitProduct;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int unitDigitProduct = unitDigitA * unitDigitB;\n        return unitDigitProduct;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        int unitDigitProduct = unitDigitA * unitDigitB;\n        return unitDigitProduct;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Complete the function that takes two integers product their unit digitsAssume the input is always validExamples multiply(148 412 should return 16.mult(19 28 should return 72mult(2020 1851 should return 0mult(14,-15 should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigit"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        if (num - lower == upper - num) {\n            return upper;\n        } else {\n            return lower;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n > 0) {\n            result.add(n);\n            if (n % 2 == 0) {\n                n = n + 1;\n            } else {\n                n = n + 2;\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"[, ]+\");\n        // Convert the array of words into a list\n        List<String> wordList = Arrays.asList(words);\n        return wordList;\n    }\n\n    \n}"}
{"task_id": "Java/102", "generation": "\n        if (x % 2 == 0 && x <= y) {\n            return x;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i : x) {\n            int temp = i;\n            boolean isUnique = true;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0 && result.contains(digit)) {\n                    isUnique = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isUnique) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> sorted = new ArrayList<>();\n        for (int i : arr) {\n            if (i >= 1 && i <= 9) {\n                sorted.add(i);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        for (int i : sorted) {\n            String s = \"\";\n            switch (i) {\n                case 1:\n                    s = \"One\";\n                    break;\n                case 2:\n                    s = \"Two\";\n                    break;\n                case 3:\n                    s = \"Three\";\n                    break;\n                case 4:\n                    s = \"Four\";\n                    break;\n                case 5:\n                    s = \"Five\";\n                    break;\n                case 6:\n                    s = \"Six\";\n                    break;\n                case 7:\n                    s = \"Seven\";\n                    break;\n                case 8:\n                    s = \"Eight\";\n                    break;\n                case 9:\n                    s = \"Nine\";\n                    break;\n            }\n            result.add(s);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            String str = String.valueOf(i);\n            if (isPalindrome(str)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n\n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int[] arr1 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr1[i] != arr.get((arr.size() - 1) - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // Time complexity: O(n log n) where n is the number of elements in the array. This is because the sorting operation takes O(n log n) time. The space complexity is O(n) for the array that we create to store the elements of the input array.  // Space complexity: O(n) where n is the number of elements in the array. This is because we create a new array to store the elements of the input array.  // The function moveOneBall takes a list of integers as input and returns a boolean value. It first checks if the input list is empty. If it is, the function returns true. Otherwise, it creates a new array to store the elements of the input list, sorts the new array, and then checks if the sorted array is equal to the input list after a certain number of right shifts. If the sorted array is equal to the input list after a certain number of right shifts, the function returns true; otherwise, it returns false.  // The time complexity of the function is O(n log n) where n is the number of elements in the array. This is because the sorting operation takes O(n log n) time. The space complexity is O(n) for the array that we create to store the elements of the input array.  // The function moveOneBall can be optimized by using a different approach that does not involve sorting the array. One possible approach is to use a stack to keep track of the elements of the array. We can push the elements of the array onto the stack and then pop the elements off the stack to check if they are in the correct order. If the elements are not in the correct order, we can return false. If we can pop all the elements off the stack without returning false, we can return true. This approach has a time complexity of O(n) and a space complexity of O(n).  // The function moveOneBall can also"}
{"task_id": "Java/110", "generation": "\n        // Check if all elements in lst1 are odd\n        boolean allOdd = lst1.stream().allMatch(n -> n % 2 != 0);\n        // Check if all elements in lst2 are even\n        boolean allEven = lst2.stream().allMatch(n -> n % 2 == 0);\n        // If all elements in lst1 are odd and all elements in lst2 are even, return \"YES\"\n        if (allOdd && allEven) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    \n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == max) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}  // class Solution\n"}
{"task_id": "Java/112", "generation": "\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(String.valueOf(s.charAt(i)))) {\n                sb.append(s.charAt(i));\n            }\n        }\n        result.add(sb.reverse().toString());\n        result.add(sb.reverse().toString().equals(sb.toString()));\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \" in the string \" + s + \" of the input.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n\n    \n}"}
{"task_id": "Java/115", "generation": "\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[][] dp = new int[rows][cols];\n        int maxFill = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                    if (i > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + 1);\n                    }\n                    if (j > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + 1);\n                    }\n                    maxFill = Math.max(maxFill, dp[i][j]);\n                }\n            }\n        }\n        return maxFill * capacity;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA == countB) {\n                    return a - b;\n                } else {\n                    return countA - countB;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonantCount++;\n                }\n            }\n            // If the word has exactly n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/118", "generation": "\n        int n = word.length();\n        for (int i = n - 1; i >= 1; i--) {\n            if (isVowel(word.charAt(i))) {\n                if (isConson(word.charAt(i - 1)) && isConson(word.charAt(i + 1))) {\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    private boolean isConson(char c) {\n        return Character.isLetter(c) && !isVowel(c);\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        String str = \"\";\n        for (String s : lst) {\n            str += s;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    \n}"}
{"task_id": "Java/120", "generation": "\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        // Return the first k elements of the sorted array\n        return arr.subList(0, k);\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num >= 10 && num < 100) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            result.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        // Check if the date string is empty\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date string is in the correct format\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Split the date string into month, day, and year\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the year is valid\n        if (year < 1) {\n            return false;\n        }\n\n        // Check if the day is valid for the given month and year\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n} \n"}
{"task_id": "Java/125", "generation": "\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 0) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    count++;\n                }\n            }\n            return count;\n        } else {\n            List<String> result = new ArrayList<>();\n            for (String word : words) {\n                if (word.contains(\",\")) {\n                    String[] subWords = word.split(\",\");\n                    for (String subWord : subWords) {\n                        result.add(subWord.trim());\n                    }\n                } else {\n                    result.add(word);\n                }\n            }\n            return result;\n        }\n    }\n}\ufffd\ufffd\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() <= 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or they are sorted in ascending order.If list has more than 1 duplicate of the same number, return False.Assume no negative numbers and only integers.Examples is_sorted([5]) \ufffd\ufffd\ufffd True is_s([1, 2, 3, 4, 5]) \ufffd True iss1, 3, 2, 4, 5]) \ufffd False is1, 2, 3, 4, 5, 6]) \ufffd True is1 2 3 4,, 7]) \ufffd True is1 3 2 4,,]) \ufffd False is1 2 2 3 3, 4]) \ufffd True is1 2 2 2 3, 4]) \ufffd False\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or they are sorted in ascending order.If list has more than 1 duplicate of the same number, return False.Assume no negative numbers and only integers.Examples is_sorted([5]) \ufffd\ufffd\ufffd True is_s([1, 2, 3, 4, 5]) \ufffd True iss1, 3, 2, 4, 5]) \ufffd False is1, 2, 3, 4, 5, 6]) \ufffd True is1 2 3 4,, 7]) \ufffd True is1 3 2 4,,]) \ufffd False is1\n}"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int sum = 0;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.of(0);\n            }\n            sign *= Math.signum(num);\n            sum += Math.abs(num);\n        }\n        return Optional.of(sign * sum);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][][] dp = new int[n][m][k + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dp[i][j][1] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 1; i <= k; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int l = 0; l < m; l++) {\n                    int min = Integer.MAX_VALUE;\n                    for (int x = Math.max(0, j - 1); x <= Math.min(n - 1, j + 1); x++) {\n                        for (int y = Math.max(0, l - 1); y <= Math.min(m - 1, l + 1); y++) {\n                            if (x != j || y != l) {\n                                min = Math.min(min, dp[x][y][i - 1]);\n                            }\n                        }\n                    }\n                    dp[j][l][i] = min * 10 + grid.get(j).get(l);\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j][k] < min) {\n                    min = dp[i][j][k];\n                    index = i * m + j;\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = k; i >= 1; i--) {\n            int x = index / m;\n            int y = index % m;\n            res.add(grid.get(x).get(y));\n            for (int j = Math.max(0, x - 1); j <= Math.min(n - 1, x + 1); j++) {\n                for (int l = Math.max(0, y - 1); l <= Math.min(m - 1, y + 1); l++) {\n                    if (j != x || l != y) {\n                        if (dp[j][l][i - 1] * 10 + grid.get(j).get(l) == dp"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(3);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(result.get(i - 1) + result.get(i - 2));\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + 1);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}  // class Solution\n\nclass Main {\n    \n}"}
{"task_id": "Java/132", "generation": "\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                count++;\n            } else if (c == ']') {\n                if (count > 0) {\n                    count--;\n                }\n            }\n        }\n        return count > 0;\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}  // class Solution\n"}
{"task_id": "Java/134", "generation": "\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        String lastChar = lastWord.substring(lastWord.length() - 1);\n        return lastChar.matches(\"[a-zA-Z]\");\n    }\n\n    \n}"}
{"task_id": "Java/135", "generation": "\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (i == 0) {\n                max = i;\n            } else {\n                if (arr.get(i) > arr.get(i - 1)) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/136", "generation": "\n        List<Optional<Integer>> result = new ArrayList<>();\n        Optional<Integer> max = Optional.empty();\n        Optional<Integer> min = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (max.isEmpty()) {\n                    max = Optional.of(i);\n                } else {\n                    max = Optional.of(Math.max(i, max.get()));\n                }\n            } else if (i > 0) {\n                if (min.isEmpty()) {\n                    min = Optional.of(i);\n                } else {\n                    min = Optional.of(Math.min(i, min.get()));\n                }\n            }\n        }\n        result.add(max);\n        result.add(min);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.ofNullable(a > b ? a : b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.ofNullable(a > b ? a : b);\n        } else if (a instanceof String && b instanceof String) {\n            try {\n                float aFloat = Float.parseFloat(a.replace(\",\", \".\"));\n                float bFloat = Float.parseFloat(b.replace(\",\", \".\"));\n                return Optional.ofNullable(aFloat > bFloat ? aFloat : bFloat);\n            } catch (NumberFormatException e) {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}  // class Solution\n\n// Test the function\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 == 0) {\n            return false;\n        }\n        int[] evenNumbers = new int[4];\n        int count = 0;\n        for (int i = 2; i <= n; i += 2) {\n            if (n - i >= 0) {\n                evenNumbers[count] = i;\n                n -= i;\n                count++;\n                if (count == 4) {\n                    break;\n                }\n            }\n        }\n        if (count == 4) {\n            return true;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n                if (count == 1) {\n                    sb.append('_');\n                } else if (count == 2) {\n                    sb.append('-');\n                    count = 0;\n                }\n            } else {\n                sb.append(text.charAt(i));\n                count = 0;\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into two parts at the dot\n        String[] parts = file_name.split(\"\\\\.\");\n\n        // Check if the first part is not empty and starts with a letter\n        if (parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the second part is one of the valid extensions\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        if (!Arrays.asList(validExtensions).contains(parts[1])) {\n            return \"No\";\n        }\n\n        // Check if there are more than three digits in the file name\n        if (file_name.matches(\".*\\\\d{4,}.*\")) {\n            return \"No\";\n        }\n\n        // If all checks pass, return \"Yes\"\n        return \"Yes\";\n    }\n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += Math.pow(lst.get(i), 3);\n            }\n        }\n        return sum;\n    }\n} \n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        // Split the input strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Convert the numerators and denominators to integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of the two fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        // Create a list of pairs where the first element of the pair is the sum of the digits of the number and the second element is the number itself\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num = nums.get(i);\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            pairs.add(new Pair(sum, i, nums.get(i)));\n        }\n\n        // Sort the list of pairs based on the sum of the digits and the index in the original list\n        Collections.sort(pairs, new Comparator<Pair>() {\n            @Override\n            public int compare(Pair p1, Pair p2) {\n                if (p1.sum == p2.sum) {\n                    return p1.index - p2.index;\n                } else {\n                    return p1.sum - p2.sum;\n                }\n            }\n        });\n\n        // Create a new list with the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n\n        return sortedNums;\n    }\n\n    class Pair {\n        int sum;\n        int index;\n        int num;\n\n        public Pair(int sum, int index, int num) {\n            this.sum = sum;\n            this.index = index;\n            this.num = num;\n        }\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isSpecialNumber(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isSpecialNumber(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        if (numStr.length() < 2) {\n            return false;\n        }\n        int firstDigit = numStr.charAt(0) - '0';\n        int secondDigit = numStr.charAt(1) - '0';\n        return firstDigit % 2 != 0 && secondDigit % 2 != 0;\n    }\n}  // time complexity: O(n), space complexity: O(1) where n is the number of elements in the input list. The space complexity is O(1) because we only use a constant amount of space to store the count and the input number. The space used by the input list is not counted towards the space complexity because it is not used by the algorithm.  // time complexity: O(n), space complexity: O(1) where n is the number of elements in the input list. The space complexity is O(1) because we only use a constant amount of space to store the count and the input number. The space used by the input list is not counted towards the space complexity because it is not used by the algorithm.  // time complexity: O(n), space complexity: O(1) where n is the number of elements in the input list. The space complexity is O(1) because we only use a constant amount of space to store the count and the input number. The space used by the input list is not counted towards the space complexity because it is not used by the algorithm.  // time complexity: O(n), space complexity: O(1) where n is the number of elements in the input list. The space complexity is O(1) because we only use a constant amount of space to store the count and the input number. The space used by the input list is not counted towards the space complexity because it is not used by the algorithm.  // time complexity: O(n), space complexity: O(1) where n is the number of elements in the input list. The space complexity is O(1) because we only use a constant amount of space to store the count and the input number. The space used by the input list is not counted towards the space complexity because it is not used by"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        List<String> result = new ArrayList<>();\n        for (int i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n            result.add(planets.get(i));\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/149", "generation": "\n        // First, we filter out the strings with odd lengths from the list\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        // Then, we sort the filtered list first by the length of the strings and then by the strings themselves\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n        \n        return filteredList;\n    }\n}  // time complexity: O(n log n) due to sorting, space complexity: O(n) for the filtered list\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}  // class Solution\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        int maxStrength = 0;\n        String strongestExt = \"\";\n        for (String ext : extensions) {\n            int strength = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            int small = ext.length() - strength;\n            int extStrength = strength - small;\n            if (extStrength > maxStrength) {\n                maxStrength = extStrength;\n                strongestExt = ext;\n            }\n        }\n        return class_name + \".\" + strongestExt;\n    }\n}  // class Solution\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.substring(i).contains(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        int count = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            count++;\n            num = num / 10;\n        }\n        result.add(even);\n        result.add(odd);\n        result.add(count);\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/156", "generation": "\n        // Define the roman numerals and their integer values\n        Map<Integer, String> romanNumerals = new HashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        // Initialize the result string\n        StringBuilder result = new StringBuilder();\n\n        // Iterate over the roman numerals in descending order of their values\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            // Calculate the number of times the current roman numeral can fit into the number\n            int count = number / entry.getKey();\n            // Subtract the value of the current roman numeral times the count from the number\n            number -= count * entry.getKey();\n            // Append the current roman numeral times the count to the result string\n            for (int i = 0; i < count; i++) {\n                result.append(entry.getValue());\n            }\n        }\n\n        // Return the result string\n        return result.toString();\n    }\n\n    \n}"}
{"task_id": "Java/157", "generation": "\n        // Check if the sum of the squares of the two shorter sides is equal to the square of the longest side\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n    }\n} \n"}
{"task_id": "Java/158", "generation": "\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > maxCount) {\n                maxCount = set.size();\n                max = word;\n            } else if (set.size() == maxCount && word.compareTo(max) < 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/159", "generation": "\n        int total = number + need;\n        int left = remaining - need;\n        if (left < 0) {\n            left = 0;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(total);\n        result.add(left);\n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int n = operator.size();\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                operand.set(i, operand.get(i) + operand.get(i + 1));\n                operand.remove(i + 1);\n                operator.remove(i);\n                n--;\n                i--;\n            } else if (operator.get(i).equals(\"*\")) {\n                operand.set(i, operand.get(i) * operand.get(i + 1));\n                operand.remove(i + 1);\n                operator.remove(i);\n                n--;\n                i--;\n            } else if (operator.get(i).equals(\"-\")) {\n                operand.set(i, operand.get(i) - operand.get(i + 1));\n                operand.remove(i + 1);\n                operator.remove(i);\n                n--;\n                i--;\n            } else if (operator.get(i).equals(\"//\")) {\n                operand.set(i, operand.get(i) / operand.get(i + 1));\n                operand.remove(i + 1);\n                operator.remove(i);\n                n--;\n                i--;\n            } else if (operator.get(i).equals(\"**\")) {\n                operand.set(i, (int) Math.pow(operand.get(i), operand.get(i + 1)));\n                operand.remove(i + 1);\n                operator.remove(i);\n                n--;\n                i--;\n            }\n        }\n        return operand.get(0);\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
