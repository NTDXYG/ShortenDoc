{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        Deque<Character> stack = new ArrayDeque<>();\n        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(paren_string.substring(start, i + 1));\n                    start = i + 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        return number - (int)number;\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0;\n        double mean = numbers.stream().mapToDouble(val -> val).average().orElse(0.0);\n        for(double num: numbers){\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n        for (int i = 0; i < maxDepth; i++) {\n            result.add(i+1);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        if (isPalindrome(string)) {\n            return string;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = string.substring(0, i);\n                String suffix = string.substring(i);\n                String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversedPrefix;\n            }\n        }\n        return null;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n\n        // XOR operation\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        return strings.stream()\n                .max(Comparator.comparing(String::length));\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n\n"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = n; i >= 0; i--) {\n            sb.append(i);\n            if (i != 0) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            distinctCharacters.add(string.charAt(i));\n        }\n        return distinctCharacters.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            int count = 0;\n            for (char c : note.toCharArray()) {\n                if (c == 'o') {\n                    count += 1;\n                } else if (c == '|') {\n                    count /= 2;\n                } else if (c == '.') {\n                    count /= 4;\n                } else if (c == '>') {\n                    count = 0;\n                } else if (c == '<') {\n                    count *= 2;\n                } else if (c == '[') {\n                    count /= 4;\n                } else if (c == ']') {\n                    count *= 4;\n                } else if (c == 'x') {\n                    count *= 2;\n                } else if (c == '/') {\n                    count *= 4;\n                }\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while (true) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count ++;\n                index += substring.length();\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/19", "generation": "\n        // Your code here\n        String[] words = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return wordsToNum(o1) - wordsToNum(o2);\n            }\n\n            private int wordsToNum(String word) {\n                for (int i = 0; i < words.length; i++) {\n                    if (words[i].equals(word)) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n        });\n        return String.join(\" \", nums);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestNumbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestNumbers.clear();\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            }\n        }\n        return closestNumbers;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        List<Double> result = new ArrayList<>();\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    /**\n    Return the first occurrence of a substring in a string >>> strstr'' 0('abc 3\n     */\n    public int strstr(String string, String substring) {\n        return string.indexOf(substring);\n    }\n\n    /**\n    Return the last occurrence of a substring in a string >>> strrstr'' 0('abc 3\n     */\n    public int strrstr(String string, String substring) {\n        return string.lastIndexOf(substring);\n    }\n\n    /**\n    Return a substring of a string >>> substr'' 0('abc 3\n     */\n    public String substr(String string, int start, int length) {\n        return string.substring(start, start + length);\n    }\n\n    /**\n    Return a string with all occurrences of a substring replaced by another substring >>> strrep'' 0('abc 3\n     */\n    public String strrep(String string, String target, String replacement) {\n        return string.replace(target, replacement);\n    }\n\n    /**\n    Return a string with all characters converted to uppercase >>> strupr'' 0('abc 3\n     */\n    public String strupr(String string) {\n        return string.toUpperCase();\n    }\n\n    /**\n    Return a string with all characters converted to lowercase >>> strlwr'' 0('abc 3\n     */\n    public String strlwr(String string) {\n        return string.toLowerCase();\n    }\n\n    /**\n    Return a string with leading and trailing whitespace removed >>> trim'' 0('abc 3\n     */\n    public String trim(String string) {\n        return string.trim();\n    }\n}\n\n"}
{"task_id": "Java/24", "generation": "\n        if (n < 1) {\n            return -1;\n        }\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer number : numbers) {\n            countMap.put(number, countMap.getOrDefault(number, 0) + 1);\n        }\n        return numbers.stream()\n                .filter(number -> countMap.get(number) == 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/27", "generation": "\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/32", "generation": "\n        double x = 0;\n        while (Math.abs(poly(xs, x)) > 0.000001) {\n            x = x - poly(xs, x) / derivative(xs, x);\n        }\n        return x;\n    }\n    \n    /**\n    Evaluates derivative of polynomial with coefficients xs at point x.\n    return xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + .... xs[n] * x^(n-1)\n     */\n    public double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> third = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                third.add(l.get(i));\n            }\n        }\n        Collections.sort(third);\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, third.get(j++));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countDigit(i, 7);\n            }\n        }\n        return count;\n    }\n\n    public int countDigit(int number, int digit) {\n        int count = 0;\n        while (number != 0) {\n            if (number % 10 == digit) count++;\n            number = number / 10;\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndicies = new ArrayList<>();\n        List<Integer> oddIndicies = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndicies.add(l.get(i));\n            } else {\n                oddIndicies.add(l.get(i));\n            }\n        }\n        Collections.sort(evenIndicies);\n        for (int i = 0; i < l.size() / 2; i++) {\n            oddIndicies.add(i * 2 + 1, evenIndicies.get(i));\n        }\n        return oddIndicies;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // un-cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int i = 0;\n        int j = 1;\n        int count = 0;\n        while (count < n) {\n            int sum = i + j;\n            if (isPrime(sum)) {\n                count++;\n            }\n            i = j;\n            j = sum;\n        }\n        return i;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n            int j = i + 1;\n            int k = l.size() - 1;\n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // your code goes here\n        if(n<=1) return 0;\n        return n*(n-1)/2;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/44", "generation": "\n        return Integer.toString(x, base);\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return (a * h) / 2;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 2;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        fib[2] = 1;\n        fib[3] = 2;\n        fib[4] = 4;\n        for (int i = 5; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}\n\n"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2) + l.get(size / 2 - 1)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/49", "generation": "\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n            }\n            n = n >> 1;\n            if (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n\n"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        // loop until there is no carry\n        while (y != 0) {\n            // carry now contains common set bits of x and y\n            int carry = x & y;\n\n            // Sum of bits of x and y where at least one of the bits is not set\n            x = x ^ y;\n\n            // Carry is shifted by one so that adding it to x gives the required sum\n            y = carry << 1;\n        }\n        return x;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count[s0.charAt(i) - 'a']++;\n            count[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int fib = 1;\n        int prevFib = 1;\n\n        for (int i = 2; i < n; i++) {\n            int temp = fib;\n            fib += prevFib;\n            prevFib = temp;\n        }\n        return fib;\n    }\n}\n\n"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (!stack.isEmpty() && stack.peek() == '<' && c == '>') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        int i = 0;\n        while (i < l.size() - 1 && l.get(i).equals(l.get(i + 1))) {\n            i++;\n        }\n\n        if (i == l.size() - 1) {\n            return true;\n        }\n\n        boolean increasing = l.get(i) < l.get(i + 1);\n\n        while (i < l.size() - 1) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int largest = -1;\n\n        // Divide n by 2 until n becomes odd\n        while (n % 2 == 0) {\n            largest = 2;\n            n >>= 1;\n        }\n\n        // n must be odd at this point, thus skip the even numbers and iterate only for odd\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n = n / i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number\n        // greater than 2\n        if (n > 2)\n            largest = n;\n\n        return largest;\n    }\n\n    \n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n\n    \n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        StringBuilder sb = new StringBuilder();\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift >= len) {\n            return sb.append(str).reverse().toString();\n        } else {\n            sb.append(str.substring(len - shift, len));\n            sb.append(str.substring(0, len - shift));\n            return sb.toString();\n        }\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[3]);\n        return n - apples - oranges;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue) {\n                smallestEvenValue = arr.get(i);\n                smallestEvenIndex = i;\n            }\n        }\n        if (smallestEvenIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n        }\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > max && entry.getValue() > entry.getKey()) {\n                max = entry.getKey();\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        Collections.sort(lst);\n        while (!lst.isEmpty()) {\n            result.add(lst.remove(0)); // add min\n            if (!lst.isEmpty()) {\n                result.add(lst.remove(lst.size() - 1)); // add max\n            }\n        }\n        return result;\n    }\n}\n\n// Test cases\n"}
{"task_id": "Java/71", "generation": "\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum < w) {\n            return false;\n        }\n        int max = Collections.max(q);\n        if (sum - max > w) {\n            return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int n = arr.size();\n        int count = 0;\n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            while (a % i == 0) {\n                a = a / i;\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    \n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i <= x) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        int n = (int) Math.round(Math.cbrt(a));\n        return a == n * n * n;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        String[] primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n        for (String prime : primes) {\n            count += countOccurrences(num, prime);\n        }\n        return count;\n    }\n\n    private int countOccurrences(String str, String sub) {\n        int lastIndex = 0;\n        int count = 0;\n\n        while (lastIndex != -1) {\n            lastIndex = str.indexOf(sub, lastIndex);\n\n            if (lastIndex != -1) {\n                count++;\n                lastIndex += sub.length();\n            }\n        }\n\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        StringBuilder sb = new StringBuilder(\"db\");\n        for (char c : binary.toCharArray()) {\n            sb.append(c == '0' ? '00' : '1');\n        }\n        sb.append(\"db\");\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() != 3) {\n            return false;\n        }\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (i + 2 < chars.length && chars[i] == chars[i + 1] && chars[i + 1] == chars[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) {\n            return 1;\n        }\n        int[][] dp = new int[n][10];\n        for (int i = 0; i < 10; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < 10; j++) {\n                for (int k = 0; k < 10; k++) {\n                    if (j == 1 || k == 1) {\n                        dp[i][j] += dp[i - 1][k];\n                    }\n                }\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < 10; i++) {\n            count += dp[n - 1][i];\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += c - '0';\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a nonempty array of integers, return the sum of the squares of the elements that are multiples of 3 or 5, but not both.\n    Examples: sumSquares([2 3 5 6 8 10]) \u2192 162\n    */\n    public int sumSquares(int[] arr) {\n        int sum = 0;\n        for (int num : arr) {\n            if ((num % 3 == 0 || num % 5 == 0) && num % 15 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a nonempty array of integers, return the sum of the squares of the elements that are multiples of 3 or 5, but not both.\n    Examples: sumSquares([2 3 5 6 8 10]) \u2192 162\n    */\n    public int sumSquares(int[] arr) {\n        int sum = 0;\n        for (int num : arr) {\n            if ((num % 3 == 0 || num % 5 == 0) && num % 15 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        StringBuilder sb = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars)).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        return result;\n    }\n}\n\n// Time complexity: O(n*m) where n is the number of rows and m is the maximum number of columns in the matrix.\n// Space complexity: O(k) where k is the number of occurrences of x in the matrix.\n\n// This solution works by iterating over each element in the matrix. If the element is equal to x, it adds the coordinates (i, j) to the result list. The coordinates are added as a list of integers, not as a tuple. The coordinates are sorted by rows in ascending order and by columns in descending order.\n\n// Note: The problem statement is a bit unclear. It says to return a list of tuples, but the examples show lists of lists. I've assumed that the problem statement is correct and that the solution should return a list of lists. If the problem statement is incorrect, please provide the correct solution.\n\n// Also, the problem statement mentions sorting the coordinates by rows in ascending order and by columns in descending order. However, the examples provided do not match this requirement. The examples show coordinates sorted by rows in ascending order and by columns in ascending order. I've assumed that the problem statement is correct and that the solution should sort the coordinates by rows in ascending order and by columns in descending order. If the problem statement is incorrect, please provide the correct solution.\n\n// Please provide the correct solution if the problem statement is incorrect.\n\n// Also, the problem statement mentions to find integers x in the list, but the examples show finding the integer x in the matrix. I've assumed that the problem statement is correct and that the solution should find the integer x in the list. If the problem statement is incorrect, please provide the correct solution.\n\n// Please provide the correct solution if the problem statement is incorrect.\n\n// Also, the problem statement mentions to return a"}
{"task_id": "Java/88", "generation": "\n        // Write your code here\n        if(array.size() == 0) return array;\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> result = new ArrayList<>(array);\n        if(sum % 2 == 0) {\n            Collections.sort(result);\n        } else {\n            Collections.sort(result, Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n\n// Test Cases\n// [] => []\n// [5] => [5]\n// [2, 4, 3, 0, 1, 5] => [0, 1, 2, 3, 4, 5]\n// [2, 4, 0, 5, 66, 5, 4, 3, 2, 1, 0] => [66, 5, 4, 3, 2, 1, 0, 0, 2, 4, 5]\n// [1, 2, 3, 4, 5] => [5, 4, 3, 2, 1]\n// [5, 4, 3, 2, 1] => [1, 2, 3, 4, 5]\n// [1, 1, 1, 1, 1] => [1, 1, 1, 1, 1]\n// [2, 3, 4, 5, 6] => [2, 3, 4, 5, 6]\n// [6, 5, 4, 3, 2] => [6, 5, 4, 3, 2]\n// [1, 2, 3, 4, 5, 6] => [6, 5, 4, 3, 2, 1]\n// [6, 5, 4, 3, 2, 1] => [1, 2, 3, 4, 5, 6]\n// [1, 1, 1, 1, 1, 1] => [1, 1"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    encrypted.append((char) ('a' + (c - 'a' + 2) % 26 * 2));\n                } else {\n                    encrypted.append((char) ('A' + (c - 'A' + 2) % 26 * 2));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int min = Integer.MAX_VALUE;\n        int secondMin = Integer.MAX_VALUE;\n        for (int num : lst) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num > min && num < secondMin) {\n                secondMin = num;\n            }\n        }\n        return secondMin == Integer.MAX_VALUE ? Optional.empty() : Optional.of(secondMin);\n    }\n}\n\n// Test cases\n// [1, 2, 3, 4, 5] -> 2\n// [5, 4, 3, 2, 1] -> None\n// [1, 1, 1, 1, 1] -> None\n// [1, 2] -> 2\n// [] -> None\n// [2, 1, 4, 3, 2, 2] -> 2\n// [1, 1] -> None\n// [1] -> None\n// [2, 1, 4, 3] -> 2\n// [2, 1] -> 1\n// [2] -> None\n// [1, 4, 3, 2, 2] -> 2\n// [1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 1, 1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 1, 1, 1, 1, 4, 3, 2, 2] -> 2\n// [1, 1, 1, 1"}
{"task_id": "Java/91", "generation": "\n        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.trim().length() > 0 && sentence.trim().split(\"\\\\s+\")[0].equals(\"The\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/93", "generation": "\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                        encodedMessage.append(Character.toUpperCase(c));\n                    } else {\n                        encodedMessage.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                        encodedMessage.append(Character.toLowerCase(c));\n                    } else {\n                        encodedMessage.append(Character.toUpperCase(c));\n                    }\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        if (maxPrime == -1) {\n            return 0;\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        boolean lower = true;\n        boolean upper = true;\n\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                continue;\n            }\n\n            String key = (String) entry.getKey();\n            for (char c : key.toCharArray()) {\n                if (!Character.isLowerCase(c)) {\n                    lower = false;\n                }\n                if (!Character.isUpperCase(c)) {\n                    upper = false;\n                }\n            }\n\n            if (!lower && !upper) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int aLastDigit = a % 10;\n        int bLastDigit = b % 10;\n        return aLastDigit * bLastDigit;\n    }\n}\n\n"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (char c : value.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                result.add(n + 2 * i);\n            } else {\n                result.add(n + 2 * i);\n                if (n + 2 * i + 2 <= n + n) {\n                    result.add(n + 2 * i + 2);\n                }\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[ ,]\");\n        for (String word : split) {\n            if (!word.isEmpty()) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (x % 2 == 0) {\n            if (x == y) {\n                return x;\n            } else {\n                return x - 1;\n            }\n        } else {\n            if (x + 1 == y) {\n                return x + 1;\n            } else {\n                return x;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return \"-\";\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.ceil((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(Integer num) {\n        while (num > 0) {\n            if (num % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        List<Integer> numbers = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                numbers.add(num);\n            }\n        }\n        Collections.sort(numbers, Collections.reverseOrder());\n        for (Integer num : numbers) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;\n    }\n}\n\n// This solution works by first filtering out the numbers that are between 1 and 9 inclusive. Then it sorts the remaining numbers in descending order. After that, it iterates over the sorted numbers and converts each number to its corresponding word. The words are then added to the result list. Finally, the result list is returned.\n\n// The time complexity of this solution is O(n log n) because of the sorting operation. The space complexity is O(n) because of the additional list that is used to store the numbers.\n\n// Note: This solution assumes that the input array only contains integers. If the input array can contain non-integer values, you should add error checking to handle this case.\n\n// Also, this solution does not handle the case where the input array contains negative numbers or numbers greater than 9. If you want to handle these cases, you should add additional error checking to handle these cases.\n\n// Finally, this solution does not handle the case where the input array contains numbers that are not between 1 and 9 inclusive. If you want to handle this case, you"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/107", "generation": "\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (num > 0) {\n                while (num != 0) {\n                    int digit = num % 10;\n                    if (digit > 0) {\n                        count++;\n                    }\n                    num /= 10;\n                }\n            } else {\n                num = Math.abs(num);\n                while (num != 0) {\n                    int digit = num % 10;\n                    if (digit > 0) {\n                        count++;\n                    }\n                    num /= 10;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) {\n            return true;\n        }\n        int rightShift = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                rightShift++;\n            }\n        }\n        if (arr.get(arr.size() - 1) > arr.get(0)) {\n            rightShift++;\n        }\n        return rightShift <= 1;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int oddCount1 = 0;\n        int oddCount2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount2++;\n            }\n        }\n\n        if (oddCount1 % 2 == 0 && oddCount2 % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        for (String key : map.keySet()) {\n            if (map.get(key) > max) {\n                max = map.get(key);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        for (String key : map.keySet()) {\n            if (map.get(key) == max) {\n                result.put(key, max);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        Set<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        String reversed = sb.toString();\n        String original = sb.reverse().toString();\n        return Arrays.asList(original, reversed.equals(original));\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(String.format(\"the number of odd elements %dn the string %d of the input.\", count, s.length()));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for(int num : nums) {\n            sum += num;\n            min = Math.min(min, sum);\n            if(sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n\n// This solution uses Kadane's algorithm to find the minimum subarray sum. It iterates through the array, adding each number to the sum. If the sum is greater than 0, it resets the sum to 0. The minimum sum is then updated with the minimum of the current minimum and the current sum.\n\n// The time complexity is O(n) because it iterates through the array once. The space complexity is O(1) because it only uses a constant amount of space to store the minimum sum and the current sum.\n\n// The solution assumes that the input list is not empty and contains at least one positive number. If the input list can contain negative numbers, the solution should be modified to handle this case.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such is the binary search algorithm, would be needed.\n\n// The solution is not optimized for large inputs. For large inputs, a more efficient algorithm, such as the binary search algorithm, would be needed.\n\n//"}
{"task_id": "Java/115", "generation": "\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        int count = 0;\n        for(List<Integer> row : grid){\n            for(int well : row){\n                if(well == 1){\n                    pq.add(capacity);\n                }\n            }\n        }\n        while(!pq.isEmpty()){\n            pq.poll();\n            count++;\n        }\n        return count;\n    }\n}\n\n// Time complexity: O(n*m*log(n*m))\n// Space complexity: O(n*m)\n\n// The time complexity is due to the fact that we are iterating over the grid and adding each well's capacity to the priority queue. The space complexity is due to the fact that we are storing all the wells' capacities in the priority queue.\n\n// The priority queue is used to keep track of the wells with the highest capacity. The well with the highest capacity is always at the top of the priority queue. When we empty a well, we remove its capacity from the priority queue and increment the count. The count represents the number of times we need to lower the buckets.\n\n// The time complexity of the poll operation on the priority queue is O(log n), where n is the number of wells. Since we perform this operation n times (where n is the total number of wells), the total time complexity is O(n log n). The space complexity is O(n) because we store all the wells' capacities in the priority queue.\n\n// The constraints are such that the grid can have at most 10^2 rows and each row can have at most 10 columns. Therefore, the maximum number of wells is 10^2 * 10 = 10^3. This is within the bounds of the time complexity of the priority queue operations.\n\n// The capacity of the bucket can be at most 10, so the maximum number of times we can lower the bucket is 10. Therefore, the maximum number of times we need to lower the bucket is 10, which is the maximum value that the count variable can take.\n\n// Therefore, the time complexity is O(n*m*log(n*m)) and the space complexity is O(n*m"}
{"task_id": "Java/116", "generation": "\n        // your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int c1 = Integer.bitCount(o1);\n                int c2 = Integer.bitCount(o2);\n\n                if (c1 != c2) {\n                    return c1 - c2;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (\"aeiouAEIOU\".indexOf(c) == -1) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))) && !vowels.contains(String.valueOf(word.charAt(i - 1))) && !vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        int count = 0;\n        for (char c : s1.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                if (count == 0) {\n                    return \"No\";\n                }\n                count--;\n            }\n        }\n        if (count != 0) {\n            return \"No\";\n        }\n        count = 0;\n        for (char c : s2.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                if (count == 0) {\n                    return \"No\";\n                }\n                count--;\n            }\n        }\n        if (count != 0) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n// where n is the length of the string.\n// This solution is based on the idea of checking the balance of the parentheses in the two strings. If the balance is maintained throughout the strings, then it is possible to concatenate them in some order to form a good string. If the balance is not maintained, then it is not possible to form a good string.\n// The time complexity is O(n) because we are traversing each character in the strings once. The space complexity is O(1) because we are not using any extra space that scales with the input size.\n// This solution assumes that the input is always valid and does not handle any potential errors or exceptions.\n// The solution is case sensitive and does not handle any special characters or numbers.\n// The solution is not optimized for performance and is suitable for small to medium size inputs. For larger inputs, a more efficient solution may be needed.\n// The solution is not optimized for memory and is suitable for small to medium size inputs. For larger inputs, a more efficient solution may be needed.\n// The solution is not optimized for time and is suitable for small to medium size inputs. For larger inputs, a more efficient solution may be needed.\n// The solution is not optimized for space"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < k; i++){\n            result.add(maxHeap.poll());\n        }\n        return result;\n    }\n}\n\n// Time complexity: O(n log n)\n// Space complexity: O(n)\n\n// The solution uses a priority queue (max heap) to store the k largest numbers in the array. The time complexity is O(n log n) because each insertion into the heap takes O(log n) time and we do this n times. The space complexity is O(n) because we store all the elements in the heap.\n\n// The priority queue is a data structure that always keeps the maximum element at the front. We use it to keep track of the k largest elements in the array. We add all the elements in the array to the priority queue, and then poll the maximum element k times to get the k largest elements. We add these elements to a result list, which we return at the end.\n\n// The result list is sorted in ascending order, so if you want the result list to be sorted in descending order, you can use a min heap instead of a max heap.\n\n// The priority queue is implemented using a binary heap, which is a complete binary tree where each node is greater than or equal to its children. The root of the tree is the maximum element in the heap. The heap property is maintained by the insert and delete operations.\n\n// The insert operation adds a new element to the heap and then sifts it up to its correct position. The delete operation removes the maximum element from the heap and then sifts the last element down to its correct position. The sifting operations are O(log n) operations.\n\n// The time complexity of the insert and delete operations is O(log n), and we do these n times, so the total time complexity is O(n log n). The space complexity is O(n) because we store all the elements in the heap.\n\n// The solution assumes that the array arr is not empty and that k is a positive integer. If these assumptions are not true, the solution may not work correctly.\n\n// The solution also assumes"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            while (num >= 10) {\n                num /= 10;\n                if (num < 10) {\n                    sum += num;\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> collatz = new ArrayList<>();\n        while (n != 1) {\n            collatz.add(n);\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        collatz.add(1);\n\n        List<Integer> odds = new ArrayList<>();\n        for (int num : collatz) {\n            if (num % 2 != 0) {\n                odds.add(num);\n            }\n        }\n\n        Collections.sort(odds);\n        return odds;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int month = Integer.parseInt(date.substring(0, 2));\n        int day = Integer.parseInt(date.substring(3, 5));\n        int year = Integer.parseInt(date.substring(6, 10));\n        if (month < 1 || month > 12 || day < 1 || year < 1) {\n            return false;\n        }\n        if (month == 2) {\n            if (day > 29 || day < 1) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30 || day < 1) {\n                return false;\n            }\n        } else {\n            if (day > 31 || day < 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        String[] words = txt.split(\" \");\n        int count = 0;\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                words = word.split(\",\");\n            } else {\n                for (char c : word.toCharArray()) {\n                    if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                sum += -1;\n            } else if (num > 0) {\n                sum += 1;\n            }\n        }\n\n        return Optional.of(sum);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][][] dp = new int[n][n][k + 1];\n        int[][] dir = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        for (int[][] d : dp) {\n            for (int[] a : d) {\n                Arrays.fill(a, Integer.MAX_VALUE);\n            }\n        }\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        pq.offer(new int[]{0, 0, grid.get(0).get(0)});\n        dp[0][0][1] = grid.get(0).get(0);\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            for (int i = 0; i < 4; i++) {\n                int x = cur[0] + dir[i][0];\n                int y = cur[1] + dir[i][1];\n                if (x < 0 || y < 0 || x >= n || y >= n) {\n                    continue;\n                }\n                for (int l = cur[2] + 1; l <= k; l++) {\n                    if (dp[x][y][l] > dp[cur[0]][cur[1]][cur[2]] + grid.get(x).get(y)) {\n                        dp[x][y][l] = dp[cur[0]][cur[1]][cur[2]] + grid.get(x).get(y);\n                        pq.offer(new int[]{x, y, l});\n                    }\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[n - 1][n - 1][i]);\n        }\n        return res;\n    }\n}import java.util.*;\n\nclass Solution {\n    public int[][] merge(int[][] intervals)\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n < 1) {\n            return result;\n        }\n        result.add(3);\n        if (n == 1) {\n            return result;\n        }\n        result.add(2);\n        if (n == 2) {\n            return result;\n        }\n        result.add(8);\n        for (int i = 3; i < n; i++) {\n            int next = result.get(i - 1) + result.get(i - 2) + result.get(i - 3);\n            result.add(next);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        if (txt.length() == 1) {\n            return true;\n        }\n        char secondLastChar = txt.charAt(txt.length() - 2);\n        return !Character.isLetter(secondLastChar);\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int max = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> max = Optional.empty();\n        Optional<Integer> min = Optional.empty();\n        for(Integer num : lst){\n            if(num < 0){\n                if(max.isEmpty() || num > max.get()){\n                    max = Optional.of(num);\n                }\n            } else if(min.isEmpty() || num < min.get()){\n                min = Optional.of(num);\n            }\n        }\n        return Arrays.asList(max, min);\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a.getClass() != b.getClass()) {\n            throw new IllegalArgumentException(\"Arguments must be of the same type\");\n        }\n\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(Math.max((Integer) a, (Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(Math.max((Float) a, (Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(Math.max(Float.parseFloat((String) a), Float.parseFloat((String) b)));\n        }\n\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n < 4) {\n            return false;\n        }\n        if (n % 2 != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be >= 0\");\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n                if (count == 2) {\n                    result.append('-');\n                    while (i < text.length() && text.charAt(i) == ' ') {\n                        i++;\n                    }\n                    i--;\n                    count = 0;\n                }\n            } else {\n                if (count == 2) {\n                    result.append('-');\n                    count = 0;\n                } else if (count > 2) {\n                    for (int j = 0; j < count - 2; j++) {\n                        result.append('_');\n                    }\n                    count = 0;\n                }\n                result.append(text.charAt(i));\n            }\n        }\n        if (count == 2) {\n            result.append('-');\n        } else if (count > 2) {\n            for (int j = 0; j < count - 2; j++) {\n                result.append('_');\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/141", "generation": "\n        // Check if the file name is empty\n        if (file_name.isEmpty()) {\n            return \"No\";\n        }\n\n        // Check if there are more than 3 digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if there is exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a letter\n        String substringBeforeDot = file_name.substring(0, file_name.indexOf('.'));\n        if (substringBeforeDot.isEmpty() || !Character.isLetter(substringBeforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        String substringAfterDot = file_name.substring(file_name.indexOf('.') + 1);\n        if (!substringAfterDot.equals(\"txt\") && !substringAfterDot.equals(\"exe\") && !substringAfterDot.equals(\"dll\")) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNum = Integer.parseInt(xParts[0]);\n        int xDen = Integer.parseInt(xParts[1]);\n        int nNum = Integer.parseInt(nParts[0]);\n        int nDen = Integer.parseInt(nParts[1]);\n\n        int xWhole = xNum / xDen;\n        int nWhole = nNum / nDen;\n\n        return xWhole * nWhole == 1;\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = getSumOfDigits(nums.get(i));\n            map.put(nums.get(i), sum);\n        }\n\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                if (map.get(o1).equals(map.get(o2))) {\n                    return nums.indexOf(o1) - nums.indexOf(o2);\n                } else {\n                    return map.get(o1) - map.get(o2);\n                }\n            }\n        });\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num = num / 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num / 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 < index2) {\n            result = planets.subList(index1, index2);\n        } else {\n            result = planets.subList(index2, index1);\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() != o2.length()) {\n                    return o1.length() - o2.length();\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && (int) obj % 2 != 0 && (int) obj > 0) {\n                sum += Math.pow((int) obj, 2);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n\n// 121, 12\n// 4110, -244106\n// 00033, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -244106\n// 0504, 4110, -24410"}
{"task_id": "Java/153", "generation": "\n        double maxStrength = 0;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            double strength = calculateStrength(extension, class_name);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private double calculateStrength(String extension, String className) {\n        int upperCaseCount = 0;\n        int lowerCaseCount = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                upperCaseCount++;\n            } else if (Character.isLowerCase(c)) {\n                lowerCaseCount++;\n            }\n        }\n        return upperCaseCount - lowerCaseCount;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        if (a.length() != b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = b.charAt(b.length() - 1) + b.substring(0, b.length() - 1);\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder roman = new StringBuilder();\n        for (int i = 0; i < values.length && number >= 0; i++) {\n            while (values[i] <= number) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n        return roman.toString();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // your code here\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > max) {\n                max = uniqueChars.size();\n                maxWord = word;\n            } else if (uniqueChars.size() == max) {\n                maxWord = maxWord.compareTo(word) > 0 ? word : maxWord;\n            }\n        }\n        return maxWord;\n    }\n}\n\n// Time complexity: O(n*m) where n is the number of words and m is the length of the longest word.\n// Space complexity: O(m) where m is the length of the longest word.\n\n// This solution works by iterating over each word in the list and counting the number of unique characters in it. It then compares this count to the current maximum count and updates the maximum count and corresponding word if necessary. If the count is equal, it compares the words lexicographically and updates the word if the current word comes lexicographically before the current maximum word.\n\n// The time complexity is O(n*m) because for each word in the list, we iterate over each character in the word. The space complexity is O(m) because in the worst case, each word could have all unique characters and we would store each character in a HashSet.\n\n// The function returns the word with the maximum number of unique characters. If there are multiple words with the same maximum number of unique characters, it returns the one that comes lexicographically first.\n\n// Note: This solution assumes that the input list is not empty and contains at least one word.\n\n// Test the function with the following code:\n// System.out.println(findMax(Arrays.asList(\"name\", \"of\", \"string\"))); // should print \"string\"\n// System.out.println(findMax(Arrays.asList(\"game\", \"en\", \"find\", \"aaaaaaabb\", \"cc\"))); // should print \"aaaaaaabb\"\n// System.out.println(findMax(Arrays.asList(\"aaaaaa"}
{"task_id": "Java/159", "generation": "\n        int total = number;\n        if (need > remaining) {\n            total += remaining;\n            remaining = 0;\n        } else {\n            total += need;\n            remaining -= need;\n        }\n        return Arrays.asList(total, remaining);\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            char op = operator.get(i - 1).charAt(0);\n            switch (op) {\n                case '+':\n                    result += operand.get(i);\n                    break;\n                case '-':\n                    result -= operand.get(i);\n                    break;\n                case '*':\n                    result *= operand.get(i);\n                    break;\n                case '/':\n                    result /= operand.get(i);\n                    break;\n                case '^':\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, return the length of the longest substring without repeating characters.\n\n    Example 1:\n    Input: s = \"abcabcbb\"\n    Output: 3\n    Explanation: The answer is \"abc\", with the length of 3.\n\n    Example 2:\n    Input: s = \"bbbbb\"\n    Output: 1\n    Explanation: The answer is \"b\", with the length of 1.\n\n    Example 3:\n    Input: s = \"pwwkew\"\n    Output: 3\n    Explanation: The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n    Constraints:\n    0 <= s.length <= 5 * 10^4\n    s consists of English letters, digits, symbols and spaces.\n     */\n    public int lengthOfLongestSubstring(String s) {\n        if (s.length() == 0) return 0;\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        for (int i = 0, j = 0; i < s.length(); ++i) {\n            if (map.containsKey(s."}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if(text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
