{"task_id": "Java/0", "generation": "\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int open = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                open--;\n            }\n            sb.append(c);\n            if (open == 0) {\n                result.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/2", "generation": "\n        String str = String.valueOf(number);\n        int index = str.indexOf('.');\n        if (index == -1) {\n            return number;\n        }\n        String decimals = str.substring(index + 1);\n        if (decimals.length() == 0) {\n            return number;\n        }\n        return Double.parseDouble(str.substring(0, index + 1));\n    }\n\n    \n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/4", "generation": "\n        double sum = 0.0;\n        double mean = mean(numbers);\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}\n\n"}
{"task_id": "Java/5", "generation": "\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            numbers.add(i, delimiter);\n        }\n        return numbers;\n    }\n\n    \n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> levels = new ArrayList<>();\n        int level = 0;\n        int maxLevel = 0;\n        int open = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                level++;\n                open++;\n                if (level > maxLevel) {\n                    maxLevel = level;\n                }\n            } else if (c == ')') {\n                level--;\n                open--;\n            }\n            levels.add(level);\n        }\n        if (open != 0) {\n            throw new IllegalArgumentException(\"Mismatched parentheses\");\n        }\n        return levels;\n    }\n}\n\n"}
{"task_id": "Java/7", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for(int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n\n"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/10", "generation": "\n        String rev = new StringBuilder(string).reverse().toString();\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(0, i + 1))) {\n                return string + rev.substring(0, rev.length() - i - 1);\n            }\n        }\n        return string + rev;\n    }\n}\n\n"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/12", "generation": "\n        if(strings.isEmpty()){\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for(String s : strings){\n            if(s.length() > longest.length()){\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\n"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    \n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n\n    \n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for(int i = n; i<=50; i++){\n            sb.append(i + \" \");\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();\n    }\n\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n\n"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int subLength = substring.length();\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            String sub = string.substring(i, i + subLength);\n            if (sub.equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}\n\n"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;\n    }\n}\n\n"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n\n    \n}"}
{"task_id": "Java/24", "generation": "\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n\n"}
{"task_id": "Java/26", "generation": "\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/30", "generation": "\n        return l.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n    }\n\n    \n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/32", "generation": "\n        double l = xs.get(0);\n        for (int i = 1; i < xs.size(); i += 2) {\n            l = -l / (2 * i + 1);\n        }\n        return l;\n    }\n}\n\n// Testing\n"}
{"task_id": "Java/33", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                Collections.sort(l.subList(i, Math.min(i + 3, l.size())));\n                for (int j = 0; j < l.subList(i, Math.min(i + 3, l.size())).size(); j++) {\n                    result.add(l.subList(i, Math.min(i + 3, l.size())).get(j));\n                }\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> list = new ArrayList<>(set);\n        Collections.sort(list);\n        return list;\n    }\n}\n\n"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    \n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 1; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n\n        List<Integer> result = new ArrayList<>();\n        int j = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.add(evenIndices.get(j));\n            if (i + 1 < l.size()) {\n                result.add(l.get(i + 1));\n                j++;\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/38", "generation": "\n        List<String> groups = new ArrayList<>(Arrays.asList(s.split(\"\")));\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int fib1 = 0, fib2 = 1, fib3 = 0;\n        while (count < n) {\n            fib3 = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib3;\n            if (isPrime(fib3)) {\n                count++;\n            }\n        }\n        return fib3;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        if (l.size() < 3) {\n            return false;\n        }\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        s.add(l.get(i));\n                        s.add(l.get(j));\n                        s.add(l.get(k));\n                    }\n                }\n            }\n        }\n        return s.size() >= 3;\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "\n        // Write your code here\n        return n;\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n\n"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (s.contains(-i)) {\n                return true;\n            } else {\n                s.add(i);\n            }\n        }\n        return false;\n    }\n\n    \n}"}
{"task_id": "Java/44", "generation": "\n        if (x == 0) {\n            return \"0\";\n        }\n        boolean isNegative = false;\n        if (x < 0) {\n            isNegative = true;\n            x = -x;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        if (isNegative) {\n            sb.append('-');\n        }\n        return sb.reverse().toString();\n    }\n}\n\n"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n\n    \n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 0;\n        }\n        if (n == 3) {\n            return 1;\n        }\n\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 1;\n\n        for (int i = 4; i <= n; i++) {\n            int e = b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n\n        return d;\n    }\n\n    \n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}\n\n"}
{"task_id": "Java/48", "generation": "\n        int i = 0, j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/49", "generation": "\n        return (int) (Math.pow(2, n) % p);\n    }\n}\n\n"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/51", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!isVowel(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/53", "generation": "\n        return x + y;\n    }\n\n    \n}"}
{"task_id": "Java/54", "generation": "\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : s0.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!map.containsKey(c) || map.get(c) == 0) {\n                return false;\n            } else {\n                map.put(c, map.get(c) - 1);\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    \n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push('<');\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/57", "generation": "\n        if (l.size() < 2) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    \n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/59", "generation": "\n        int max = -1;\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n /= i;\n            }\n        }\n        if (n > 2)\n            max = n;\n        return max;\n    }\n}\n\n"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    \n}"}
{"task_id": "Java/61", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/63", "generation": "\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 1;\n\n        for(int i = 3; i <= n; i++) {\n            int e = a + b + c;\n            a = b;\n            b = c;\n            c = e;\n            d = d + c - b;\n        }\n\n        return d;\n    }\n}\n\n"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        String vowels = \"aeiouyAEIOUY\";\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/65", "generation": "\n        String str = Integer.toString(x);\n        int n = str.length();\n        if (shift >= n) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(n - shift) + str.substring(0, n - shift);\n    }\n}\n\n"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0].substring(0, parts[0].length() - 5));\n        int oranges = Integer.parseInt(parts[1].substring(0, parts[1].length() - 8));\n        int totalFruits = apples + oranges;\n        return n - totalFruits;\n    }\n}\n\n"}
{"task_id": "Java/68", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(arr.isEmpty()){\n            result.add(-1);\n            return result;\n        }\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        for(int i=0; i<arr.size(); i++){\n            if(arr.get(i) % 2 == 0 && arr.get(i) <= smallestEven){\n                smallestEven = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n        if(smallestEven == Integer.MAX_VALUE){\n            result.add(-1);\n        }else{\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        int maxFreq = 0;\n        int maxNum = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                maxNum = entry.getKey();\n            }\n        }\n\n        return maxNum;\n    }\n}\n\n"}
{"task_id": "Java/70", "generation": "\n        // Your code here\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            result.add(lst.remove(0));\n            if (!lst.isEmpty()) {\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "\n        // write code here\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}\n\n"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n\n"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\n"}
{"task_id": "Java/75", "generation": "\n        if (a < 100) {\n            int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n            for (int prime : primes) {\n                if (a % prime == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(x); i++) {\n            double result = Math.log(x) / Math.log(i);\n            if (result == Math.floor(result)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "\n        if (a < 0) {\n            a = -a;\n        }\n        int c = (int) Math.round(Math.cbrt(a));\n        return c * c * c == a;\n    }\n}\n\n"}
{"task_id": "Java/78", "generation": "\n        // Your code here\n        int count = 0;\n        for(int i=0; i<num.length(); i++){\n            char c = num.charAt(i);\n            if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/79", "generation": "\n        String binary = Integer.toBinaryString(decimal);\n        StringBuilder sb = new StringBuilder(\"db\");\n        sb.append(binary);\n        sb.append(\"db\");\n        return sb.toString();\n    }\n}\n\n"}
{"task_id": "Java/80", "generation": "\n        if (s.length() % 3 != 0) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (set.contains(s.charAt(i))) {\n                return false;\n            }\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/81", "generation": "\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                result.add(\"A+\");\n            } else if (grade == 3.0) {\n                result.add(\"A\");\n            } else if (grade == 1.7) {\n                result.add(\"A-\");\n            } else if (grade == 2.0) {\n                result.add(\"B+\");\n            } else if (grade == 3.0) {\n                result.add(\"B\");\n            } else if (grade == 0.7) {\n                result.add(\"B-\");\n            } else if (grade == 0.0) {\n                result.add(\"C\");\n            } else if (grade == 0.5) {\n                result.add(\"C+\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "\n        if (string.length() % 2 == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(string.length()); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) return 10;\n        if (n == 2) return 90;\n        int res = 90;\n        for (int i = 3; i <= n; i++) {\n            res += (9 * (int)Math.pow(10, i - 2)) * (i - 1);\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while(N > 0){\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\n"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n            result.append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n\n"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) == o2.get(0)) {\n                    return o2.get(1) - o1.get(1);\n                } else {\n                    return o1.get(0) - o2.get(0);\n                }\n            }\n        });\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/88", "generation": "\n        if (array.isEmpty()) {\n            return array;\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n\n        if (sum % 2 != 0) {\n            Collections.sort(array);\n        }\n\n        return array;\n    }\n}\n\n"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encrypted.append((char) (((int) c - 65 + 2 * 2) % 26 + 65));\n                } else {\n                    encrypted.append((char) (((int) c - 97 + 2 * 2) % 26 + 97));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n\n"}
{"task_id": "Java/90", "generation": "\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int first = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n                return Optional.of(lst.get(i));\n            }\n        }\n\n        return Optional.empty();\n    }\n}\n\n"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().length() == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (i < message.length() - 1 && isVowel(c) && isVowel(message.charAt(i + 1))) {\n                c = Character.toUpperCase(c);\n            }\n            result.append(c);\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n\n"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = -1;\n        for(int num : lst) {\n            if(isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if(num < 2) {\n            return false;\n        }\n        for(int i = 2; i <= Math.sqrt(num); i++) {\n            if(num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while(num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/95", "generation": "\n        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n            if (!key.equals(key.toLowerCase()) && !key.equals(key.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "\n        int product = a * b;\n        int unitDigit = product % 10;\n        return unitDigit;\n    }\n\n    \n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        int num = Integer.parseInt(value);\n        for (int i = num + 1; i < 100; i++) {\n            if (i > num) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int countLower(String value) {\n        int count = 0;\n        int num = Integer.parseInt(value);\n        for (int i = num - 1; i > -100; i--) {\n            if (i < num) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public String closest_integer(String value) {\n        int num = Integer.parseInt(value);\n        int upper = countUpper(value);\n        int lower = countLower(value);\n        if (upper <= lower) {\n            return String.valueOf(num + upper);\n        } else {\n            return String.valueOf(num - lower);\n        }\n    }\n}\n\n"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(i + 1);\n            } else {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>(Arrays.asList(s.split(\"\\\\s*,\\\\s*\")));\n        return words;\n    }\n}\n\n"}
{"task_id": "Java/102", "generation": "\n        if (y % 2 == 0) {\n            return y;\n        } else {\n            return x - 1;\n        }\n    }\n}\n\n"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return \"-\";\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = sum / (m - n + 1);\n        return Integer.toBinaryString(avg);\n    }\n}\n\n"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int num : x){\n            if(!hasEvenDigit(num)){\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num){\n        while(num > 0){\n            if((num % 10) % 2 == 0){\n                return true;\n            }\n            num = num / 10;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/105", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(arr.get(i));\n                if (sb.length() == 1) {\n                    sb.append(\" \");\n                }\n                result.add(sb.toString());\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o2.length() - o1.length();\n            }\n        });\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/107", "generation": "\n        List<Integer> res = new ArrayList<>();\n        int even = 0, odd = 0;\n        for(int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if(str.charAt(0) == str.charAt(str.length() - 1)) {\n                if(i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        res.add(even);\n        res.add(odd);\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/109", "generation": "\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int count = 0;\n        for(int i=0; i<n-1; i++){\n            if(arr.get(i) > arr.get(i+1)){\n                count++;\n            }\n        }\n        if(arr.get(n-1) > arr.get(0)){\n            count++;\n        }\n        return count<=1;\n    }\n}\n\n"}
{"task_id": "Java/110", "generation": "\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        if (count % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}\n\n"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder(s);\n        for (char ch : c.toCharArray()) {\n            sb.delete(sb.indexOf(String.valueOf(ch)), sb.length());\n        }\n        String result = sb.toString();\n        String reverse = sb.reverse().toString();\n        boolean palindrome = result.equals(reverse);\n        return Arrays.asList(result, palindrome);\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                int num = Character.getNumericValue(c);\n                if (num % 2 != 0) {\n                    count++;\n                }\n            }\n            String res = \"the number of odd elements in string \" + (i + 1) + \" of the input.\";\n            result.add(res.replace(\"n\", String.valueOf(count)));\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/114", "generation": "\n        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            currentSum = Math.min(currentSum, 0);\n        }\n\n        return minSum;\n    }\n}\n\n"}
{"task_id": "Java/115", "generation": "\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        int[][] bucket = new int[n][m];\n        int res = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]+1);\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1]+1);\n                }\n            }\n        }\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid.get(i).get(j) == 1){\n                    bucket[i][j] = capacity;\n                    if(i>0 && grid.get(i-1).get(j) == 0){\n                        bucket[i][j] = Math.min(bucket[i][j], bucket[i-1][j]);\n                    }\n                    if(j>0 && grid.get(i).get(j-1) == 0){\n                        bucket[i][j] = Math.min(bucket[i][j], bucket[i][j-1]);\n                    }\n                    res += bucket[i][j] - dp[i][j];\n                }\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/116", "generation": "\n        // Your code here\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int x = Integer.bitCount(a);\n                int y = Integer.bitCount(b);\n                if (x == y) {\n                    return a.compareTo(b);\n                }\n                return x - y;\n            }\n        });\n        return arr;\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        if(s.isEmpty())\n            return result;\n        String[] words = s.split(\" \");\n        for(String word : words){\n            int consonCount = 0;\n            for(char c : word.toCharArray()){\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'){\n                    consonCount++;\n                }\n            }\n            if(consonCount == n){\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder(word);\n        for (int i = sb.length() - 1; i > 0; i--) {\n            char c = sb.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(sb.charAt(j)) != -1) {\n                        return String.valueOf(c);\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}\n\n"}
{"task_id": "Java/119", "generation": "\n        String s = lst.get(0) + lst.get(1);\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";\n    }\n}\n\n"}
{"task_id": "Java/120", "generation": "\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.add(num);\n            if (maxHeap.size() > k) {\n                maxHeap.poll();\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "\n        List<Integer> collatz = new ArrayList<>();\n        while (n != 1) {\n            collatz.add(n);\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        collatz.add(1);\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n\n"}
{"task_id": "Java/124", "generation": "\n        if (date == null || date.length() != 10 || !Character.isDigit(date.charAt(2)) || !Character.isDigit(date.charAt(5)) || !Character.isDigit(date.charAt(8))) {\n            return false;\n        }\n\n        int month = Integer.parseInt(date.substring(0, 2));\n        int day = Integer.parseInt(date.substring(3, 5));\n        int year = Integer.parseInt(date.substring(6, 10));\n\n        if (month < 1 || month > 12 || day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else {\n            if (day > 31) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "\n        if (txt.indexOf(' ') != -1) {\n            return txt.split(\" \");\n        } else if (txt.indexOf(',') != -1) {\n            return txt.split(\",\");\n        } else {\n            StringBuilder sb = new StringBuilder();\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    sb.append(c);\n                }\n            }\n            String res = sb.toString();\n            if (res.length() % 2 != 0) {\n                return res.toLowerCase();\n            } else {\n                return res;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() == 0) {\n            return true;\n        }\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == prev) {\n                return false;\n            }\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/127", "generation": "\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int maxStart = Math.max(start1, start2);\n        int minEnd = Math.min(end1, end2);\n\n        if (maxStart >= minEnd) {\n            return \"NO\";\n        }\n\n        int length = minEnd - maxStart;\n\n        if (length == 1) {\n            return \"NO\";\n        }\n\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n}\n\n"}
{"task_id": "Java/128", "generation": "\n        if(arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int product = 1;\n        for(int num : arr) {\n            if(num < 0) {\n                sign *= -1;\n            }\n            product *= Math.abs(num);\n        }\n        return Optional.of(sign * product);\n    }\n}\n\n"}
{"task_id": "Java/129", "generation": "\n        int n = grid.size();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> dp[a[0]][a[1]] - dp[b[0]][b[1]]);\n        boolean[][] visited = new boolean[n][n];\n        pq.offer(new int[]{0, 0});\n        visited[0][0] = true;\n        dp[0][0] = grid[0][0];\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            for (int i = 0; i < 4; i++) {\n                int nx = cur[0] + dir[i][0];\n                int ny = cur[1] + dir[i][1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n                    dp[nx][ny] = dp[cur[0]][cur[1]] + grid[nx][ny];\n                    visited[nx][ny] = true;\n                    pq.offer(new int[]{nx, ny});\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[n - 1][n - 1]);\n            int x = n - 1, y = n - 1;\n            while (x > 0 || y > 0) {\n                int min = Math.min(dp[x - 1][y], dp[x][y - 1]);\n                if (dp[x - 1][y] == min"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(2);\n        if (n == 2) {\n            return result;\n        }\n        int a = 1;\n        int b = 2;\n        int c = 4;\n        for (int i = 3; i < n; i++) {\n            if (i % 2 == 0) {\n                c = a + (b / c);\n            } else {\n                c = a + b + c;\n            }\n            result.add(c);\n            a = b;\n            b = c;\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\n"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    \n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for(Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.endsWith(\" \") && txt.length() == 1) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int maxIndex = -1;\n        int maxValue = -1;\n        for(int i=n-1; i>=0; i--){\n            if(arr.get(i) > maxValue){\n                maxValue = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n}\n\n"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                if(largest.isEmpty() || lst.get(i) > largest.get()){\n                    largest = Optional.of(lst.get(i));\n                }\n                if(smallest.isEmpty() || lst.get(i) < smallest.get()){\n                    smallest = Optional.of(lst.get(i));\n                }\n            }\n        }\n        return Arrays.asList(smallest, largest);\n    }\n}\n\n"}
{"task_id": "Java/137", "generation": "\n        if (a instanceof Number && b instanceof Number) {\n            if (((Number) a).doubleValue() > ((Number) b).doubleValue()) {\n                return Optional.of(a);\n            } else if (((Number) a).doubleValue() < ((Number) b).doubleValue()) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double aVal;\n            double bVal;\n            try {\n                aVal = Double.parseDouble((String) a);\n                bVal = Double.parseDouble((String) b);\n            } catch (NumberFormatException e) {\n                return Optional.empty();\n            }\n            if (aVal > bVal) {\n                return Optional.of(a);\n            } else if (aVal < bVal) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n\n"}
{"task_id": "Java/138", "generation": "\n        if (n % 2 != 0) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i += 2) {\n            if (n == i + 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {\n                    sb.append('-');\n                }\n                sb.append('_');\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/141", "generation": "\n        if (file_name.matches(\".*[0-9]{3,}.*\") || !file_name.contains(\".\")) {\n            return \"No\";\n        }\n        String[] splitName = file_name.split(\"\\\\.\");\n        if (splitName.length != 2) {\n            return \"No\";\n        }\n        if (!Character.isLetter(splitName[0].charAt(0)) || !Character.isLetter(splitName[1].charAt(0))) {\n            return \"No\";\n        }\n        if (splitName[0].length() > 14 || splitName[1].length() > 9) {\n            return \"No\";\n        }\n        if (splitName[0].isEmpty() || splitName[1].isEmpty()) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n\n"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "\n        // Your code here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n\n        int x_num = Integer.parseInt(x_arr[0]);\n        int x_den = Integer.parseInt(x_arr[1]);\n        int n_num = Integer.parseInt(n_arr[0]);\n        int n_den = Integer.parseInt(n_arr[1]);\n\n        int gcd = gcd(x_den, n_den);\n\n        int new_den = x_den * n_den / gcd;\n        int new_num = x_num * n_num / gcd;\n\n        return new_num == x_num && new_den == x_den;\n    }\n\n    public int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }\n}\n\n"}
{"task_id": "Java/145", "generation": "\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num = nums.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (!map.containsKey(sum)) {\n                map.put(sum, new ArrayList<>());\n            }\n            map.get(sum).add(i);\n        }\n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            List<Integer> list = entry.getValue();\n            Collections.sort(list);\n            for (int i : list) {\n                res.add(nums.get(i));\n            }\n        }\n        return res;\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num / 10) % 2 != 0 && (num % 10) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (a[i] % 3 == 0 && a[j] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\n        if (index1 > index2) {\n            Collections.swap(planets, index1, index2);\n        }\n\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                } else {\n                    return o1.length() - o2.length();\n                }\n            }\n        });\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (Integer) o;\n                if (num < 0 || num % 2 == 0) {\n                    continue;\n                }\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}\n\n"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/153", "generation": "\n        String strongest = \"\";\n        int max_strength = -1;\n        for (String extension : extensions) {\n            int strength = getStrength(extension);\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n\n    private int getStrength(String extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) cap++;\n            else if (Character.isLowerCase(c)) sm++;\n        }\n        return cap - sm;\n    }\n}\n\n"}
{"task_id": "Java/154", "generation": "\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n"}
{"task_id": "Java/155", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        while(num != 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/156", "generation": "\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                roman.append(symbols[i]);\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n}\n\n"}
{"task_id": "Java/157", "generation": "\n        // Write your code here\n        int max = Math.max(a, Math.max(b, c));\n        int sum = a + b + c;\n        return max < sum - max;\n    }\n}\n\n"}
{"task_id": "Java/158", "generation": "\n        String maxWord = \"\";\n        int maxUnique = 0;\n\n        for (String word : words) {\n            int unique = (int) word.chars().distinct().count();\n            if (unique > maxUnique) {\n                maxUnique = unique;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n}\n\n"}
{"task_id": "Java/159", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if(remaining >= need) {\n            number += need;\n            remaining -= need;\n        } else {\n            number += remaining;\n            remaining = 0;\n        }\n        result.add(number);\n        result.add(remaining);\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (operator.get(i - 1).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i - 1).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i - 1).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i - 1).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i - 1).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        if (result.length() == 0) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return result.toString();\n    }\n}\n\n"}
{"task_id": "Java/162", "generation": "\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n\n        while (hashtext.length() < 32) {\n            $hashtext = \"0\" + hashtext;\n        }\n\n        return Optional.of(hashtext);\n    }\n}\n\n"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n\n"}
