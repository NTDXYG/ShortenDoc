{"task_id": "Java/0", "generation": "\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n\n            currentGroup.append(c);\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup = new StringBuilder();\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "\n        return number - Math.floor(number);\n    }\n}"}
{"task_id": "Java/3", "generation": "\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        double totalDeviation = 0;\n        for (double num : numbers) {\n            totalDeviation += Math.abs(num - mean);\n        }\n        \n        return totalDeviation / numbers.size();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/5", "generation": "\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ') {\n                if (maxDepth > 0) {\n                    result.add(maxDepth);\n                    maxDepth = 0;\n                }\n                currentDepth = 0;\n            }\n        }\n        if (maxDepth > 0) {\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/7", "generation": "\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}"}
{"task_id": "Java/8", "generation": "\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/9", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            result.add(max);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = string.length() - 1;\n        while (i >= 0 && !isPalindrome(string.substring(i))) {\n            i--;\n        }\n        String prefix = string.substring(0, i);\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n        return string + reversedPrefix;\n    }\n}"}
{"task_id": "Java/11", "generation": "\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/16", "generation": "\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/17", "generation": "\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            } else if (note.equals(\">>>\")) {\n                result.add(4);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/18", "generation": "\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.compareTo(s2);\n            }\n        });\n        return String.join(\" \", nums);\n    }\n}"}
{"task_id": "Java/20", "generation": "\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n        return closestPair;\n    }\n}"}
{"task_id": "Java/21", "generation": "\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaled = (num - min) / (max - min);\n            result.add(rescaled);\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/23", "generation": "\n        return string.length();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/24", "generation": "\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/25", "generation": "\n        List<Integer> factors = new ArrayList<>();\n        for (int factor = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n        }\n        return factors;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/26", "generation": "\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                .filter(num -> countMap.get(num) == 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/27", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/28", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/29", "generation": "\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/31", "generation": "\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n    \n    \n}"}
{"task_id": "Java/32", "generation": "\n        double lo = -1000;\n        double hi = 1000;\n        while (poly(xs, lo) * poly(xs, hi) > 0) {\n            lo *= 2;\n            hi *= 2;\n        }\n        while (hi - lo > 1e-10) {\n            double mid = (lo + hi) / 2;\n            if (poly(xs, mid) * poly(xs, lo) > 0) {\n                lo = mid;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n}"}
{"task_id": "Java/33", "generation": "\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++){\n            if(i % 3 == 0){\n                l1.add(l.get(i));\n            }else{\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for(int i = 0; i < l1.size(); i++){\n            l.set(i * 3, l1.get(i));\n        }\n        for(int i = 0; i < l2.size(); i++){\n            l.set(i * 3 + 1, l2.get(i));\n        }\n        return l;\n    }\n}"}
{"task_id": "Java/34", "generation": "\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/35", "generation": "\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += countSevens(i);\n            }\n        }\n        return count;\n    }\n\n    private int countSevens(int num) {\n        int count = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                count++;\n            }\n            num /= 10;\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.get(evenIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n\n    \n}"}
{"task_id": "Java/38", "generation": "\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // decycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \n}"}
{"task_id": "Java/39", "generation": "\n        int count = 0;\n        int fib1 = 0;\n        int fib2 = 1;\n        while (true) {\n            int fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n            if (isPrime(fib)) {\n                count++;\n                if (count == n) {\n                    return fib;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/40", "generation": "\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/41", "generation": "\n        return n * (n - 1) / 2;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/42", "generation": "\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "\n        return 0.5 * a * h;\n    }\n}"}
{"task_id": "Java/46", "generation": "\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        \n        int a = 0, b = 0, c = 2, d = 0, e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n    \n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        \n        int start = 0;\n        int maxLength = 1;\n        \n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            \n            if (len > maxLength) {\n                maxLength = len;\n                start = i - (len - 1) / 2;\n            }\n        }\n        \n        return s.substring(start, start + maxLength);\n    }\n    \n    private int expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n        return right - left - 1;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/49", "generation": "\n        int result = 1;\n        int base = 2;\n\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n = n / 2;\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/50", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    \n}"}
{"task_id": "Java/51", "generation": "\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/52", "generation": "\n        for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "\n        while (y != 0) {\n            int carry = x & y;\n            x = x ^ y;\n            y = carry << 1;\n        }\n        return x;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/54", "generation": "\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        int balance = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                balance++;\n            } else if (bracket == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false; // More closing brackets than opening ones\n                }\n            }\n        }\n        return balance == 0; // True if all brackets are balanced\n    }\n\n    \n}"}
{"task_id": "Java/57", "generation": "\n        boolean inc = true;\n        boolean dec = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                dec = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                inc = false;\n            }\n        }\n        return inc || dec;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/58", "generation": "\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "\n        int maxPrime = -1;\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1; // equivalent to n /= 2\n        }\n        // n must be odd at this point, so we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            maxPrime = n;\n        return maxPrime;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/60", "generation": "\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/61", "generation": "\n        int balance = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                balance++;\n            } else if (bracket == ')') {\n                balance--;\n                if (balance < 0) {\n                    return false; // More closing brackets than opening ones\n                }\n            }\n        }\n        return balance == 0; // True if balanced, False otherwise\n    }\n}"}
{"task_id": "Java/62", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        \n        int a = 0, b = 0, c = 1, d = 1, e = 2;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}"}
{"task_id": "Java/64", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/65", "generation": "\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the digits\n        if (shift > len) {\n            char[] chars = numStr.toCharArray();\n            reverse(chars, 0, len - 1);\n            return new String(chars);\n        }\n        \n        // Perform circular shift\n        shift = shift % len; // In case shift is larger than the length\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return shifted;\n    }\n    \n    // Helper method to reverse a char array\n    private void reverse(char[] chars, int start, int end) {\n        while (start < end) {\n            char temp = chars[start];\n            chars[start] = chars[end];\n            chars[end] = temp;\n            start++;\n            end--;\n        }\n    }\n    \n    // Check function to verify the correctness of the solution\n    \n}"}
{"task_id": "Java/66", "generation": "\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/67", "generation": "\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "\n        int smallestEven = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                index = i;\n            }\n        }\n        if (index == -1) {\n            return new ArrayList<>();\n        }\n        return Arrays.asList(smallestEven, index);\n    }\n}"}
{"task_id": "Java/69", "generation": "\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n        int ans = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() <= entry.getValue() && entry.getKey() > ans) {\n                ans = entry.getKey();\n            }\n        }\n        return ans;\n    }\n}"}
{"task_id": "Java/70", "generation": "\n        List<Integer> sortedList = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            int min = Collections.min(lst);\n            sortedList.add(min);\n            lst.remove(Integer.valueOf(min));\n            \n            // If the list is empty, break the loop\n            if (lst.isEmpty()) {\n                break;\n            }\n            \n            // Add the maximum value\n            int max = Collections.max(lst);\n            sortedList.add(max);\n            lst.remove(Integer.valueOf(max));\n        }\n        return sortedList;\n    }\n}"}
{"task_id": "Java/71", "generation": "\n        if(a+b<=c || a+c<=b || b+c<=a) return -1;\n        double s = (a+b+c)/2;\n        double area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        return Math.round(area*100.0)/100.0;\n    }\n}"}
{"task_id": "Java/72", "generation": "\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = Collections.max(q);\n        if (sum + max > w) {\n            return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/73", "generation": "\n        int changes = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (!arr.get(i).equals(arr.get(j))) {\n                changes++;\n            }\n            i++;\n            j--;\n        }\n        return changes;\n    }\n}"}
{"task_id": "Java/74", "generation": "\n        int count1 = 0;\n        int count2 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"}
{"task_id": "Java/75", "generation": "\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}"}
{"task_id": "Java/77", "generation": "\n        if (a == 0) {\n            return true;\n        }\n        int absA = Math.abs(a);\n        int cubeRoot = (int) Math.round(Math.pow(absA, 1.0 / 3.0));\n        return Math.pow(cubeRoot, 3) == absA;\n    }\n\n    \n}"}
{"task_id": "Java/78", "generation": "\n        int count = 0;\n        for(int i = 0; i < num.length(); i++){\n            char c = num.charAt(i);\n            if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/79", "generation": "\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}"}
{"task_id": "Java/80", "generation": "\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/81", "generation": "\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "Java/82", "generation": "\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        if (number == 2) {\n            return true;\n        }\n        if (number % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= number; i += 2) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/83", "generation": "\n        if (n == 1) return 1;\n        int count = 18;\n        for (int i = 2; i < n; i++) {\n            count *= 10;\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/84", "generation": "\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/85", "generation": "\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}"}
{"task_id": "Java/87", "generation": "\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(i);\n                    temp.add(j);\n                    result.add(temp);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                if (o1.get(0) != o2.get(0)) {\n                    return o1.get(0) - o2.get(0);\n                } else {\n                    return o2.get(1) - o1.get(1);\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "\n        if (array.isEmpty()) {\n            return array;\n        }\n        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray);\n        } else {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        }\n        return sortedArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char encryptedChar = (char) ((c - base + 4) % 26 + base);\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    \n}"}
{"task_id": "Java/90", "generation": "\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        int min = lst.get(0);\n        int secondMin = Integer.MAX_VALUE;\n        \n        for (int num : lst) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin && num != min) {\n                secondMin = num;\n            }\n        }\n        \n        if (secondMin == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        \n        return Optional.of(secondMin);\n    }\n}"}
{"task_id": "Java/91", "generation": "\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        int boredomCount = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}"}
{"task_id": "Java/92", "generation": "\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            return a + b == c || a + c == b || b + c == a;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/93", "generation": "\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                } else {\n                    c = Character.toUpperCase(c);\n                }\n                if (vowels.indexOf(Character.toLowerCase(c)) != -1) {\n                    int index = (vowels.indexOf(Character.toLowerCase(c)) + 2) % vowels.length();\n                    c = Character.toUpperCase(vowels.charAt(index));\n                }\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/94", "generation": "\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\n// Example usage:\n// Solution solution = new Solution();\n// int result = solution.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 232, 3244, 3));\n// System.out.println(result); // Output: 10\n// int result2 = solution.skjkasdkd(Arrays.asList(101824597, 21340, 12124251));\n// System.out.println(result2); // Output: 25\n// int result3 = solution.skjkasdkd(Arrays.asList(13132510734, 83278, 109, 163, 23, 2323, 3230, 1, 9, 3));\n// System.out.println(result3); // Output: 13\n// int result4 = solution.skjkasdkd(Arrays.asList(07243271, 99, 32, 6, 059183056));\n// System.out.println(result4); // Output: 11\n// int result5 = solution.skjkasdkd(Arrays.asList"}
{"task_id": "Java/95", "generation": "\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n\n    \n}"}
{"task_id": "Java/96", "generation": "\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/97", "generation": "\n        int lastDigitA = Math.abs(a) % 10;\n        int lastDigitB = Math.abs(b) % 10;\n        return lastDigitA * lastDigitB;\n    }\n}"}
{"task_id": "Java/98", "generation": "\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/99", "generation": "\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    \n}"}
{"task_id": "Java/100", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int current = n;\n        for (int i = 0; i < n; i++) {\n            result.add(current);\n            if (current % 2 == 0) {\n                current += 2;\n            } else {\n                current += 2;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            String[] split1 = word.split(\" \");\n            for (String s1 : split1) {\n                if (!s1.equals(\"\")) {\n                    words.add(s1);\n                }\n            }\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        } else {\n            return y - 1;\n        }\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int average = Math.round((float) sum / (m - n + 1));\n        return \"0b\" + Integer.toBinaryString(average);\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/104", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/105", "generation": "\n        List<Integer> sorted = new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                sorted.add(num);\n            }\n        }\n        \n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        \n        for (int num : sorted) {\n            result.add(names[num - 1]);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/106", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sum(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "Java/107", "generation": "\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String numStr = Integer.toString(num);\n        String reversedStr = new StringBuilder(numStr).reverse().toString();\n        return numStr.equals(reversedStr);\n    }\n\n    \n}"}
{"task_id": "Java/108", "generation": "\n        int count = 0;\n        for (int num : arr) {\n            if (sumDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -sum : sum;\n    }\n\n    \n}"}
{"task_id": "Java/109", "generation": "\n        if (arr.size() == 0) return true;\n        int count = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i - 1) > arr.get(i)) {\n                count++;\n            }\n        }\n        if (arr.get(arr.size() - 1) > arr.get(0)) count++;\n        return count <= 1;\n    }\n}"}
{"task_id": "Java/110", "generation": "\n        int oddCountLst1 = 0;\n        int evenCountLst2 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n        return oddCountLst1 <= evenCountLst2 ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "Java/111", "generation": "\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        int maxCount = 0;\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                int count = result.getOrDefault(word, 0) + 1;\n                result.put(word, count);\n                maxCount = Math.max(maxCount, count);\n            }\n        }\n        Map<String, Integer> finalResult = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                finalResult.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return finalResult;\n    }\n}"}
{"task_id": "Java/112", "generation": "\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                sb.append(ch);\n            }\n        }\n        String result = sb.toString();\n        String reversed = sb.reverse().toString();\n        boolean isPalindrome = result.equals(reversed);\n        return Arrays.asList(result, isPalindrome);\n    }\n}"}
{"task_id": "Java/113", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "\n        int maxFill = 0;\n        for (List<Integer> row : grid) {\n            int rowSum = 0;\n            for (int cell : row) {\n                rowSum += cell;\n            }\n            maxFill += (int) Math.ceil((double) rowSum / capacity);\n        }\n        return maxFill;\n    }\n}"}
{"task_id": "Java/116", "generation": "\n        return arr.stream()\n                .sorted(Comparator.comparingInt(i -> Integer.bitCount(i))\n                        .thenComparingInt(i -> i))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/117", "generation": "\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/118", "generation": "\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (!vowels.contains(word.charAt(i + 1) + \"\") && vowels.contains(word.charAt(i) + \"\") && !vowels.contains(word.charAt(i - 1) + \"\")) {\n                return word.charAt(i) + \"\";\n            }\n        }\n        return \"\";\n    }\n}"}
{"task_id": "Java/119", "generation": "\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') open++;\n                else close++;\n            }\n        }\n        if (open == close) return \"Yes\";\n        return \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        Collections.sort(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - 1; i >= arr.size() - k; i--){\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "\n        int sum = 0;\n        for(int i = 0; i < k; i++){\n            int num = arr.get(i);\n            while(num > 0){\n                sum += num % 10;\n                num /= 10;\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "\n        if (date.length() != 10) {\n            return false;\n        }\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day == 31) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if ((c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "Java/126", "generation": "\n        if (lst.size() <= 1) {\n            return true;\n        }\n        \n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/127", "generation": "\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int product = 1;\n        int signProduct = 1;\n        for (int num : arr) {\n            if (num == 0) {\n                return Optional.of(0);\n            }\n            product *= Math.abs(num);\n            if (num < 0) {\n                signProduct *= -1;\n            }\n        }\n        return Optional.of(product * signProduct);\n    }\n}"}
{"task_id": "Java/129", "generation": "\n        \n    }\n}"}
{"task_id": "Java/130", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(3);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        if (n == 3) {\n            return result;\n        }\n        result.add(8);\n        if (n == 4) {\n            return result;\n        }\n        result.add(13);\n        if (n == 5) {\n            return result;\n        }\n        result.add(24);\n        if (n == 6) {\n            return result;\n        }\n        result.add(44);\n        if (n == 7) {\n            return result;\n        }\n        result.add(81);\n        if (n == 8) {\n            return result;\n        }\n        result.add(149);\n        if (n == 9) {\n            return result;\n        }\n        result.add(274);\n        if (n == 10) {\n            return result;\n        }\n        result.add(504);\n        if (n == 11) {\n            return result;\n        }\n        result.add(927);\n        if (n == 12) {\n            return result;\n        }\n        result.add(1705);\n        if (n == 13) {\n            return result;\n        }\n        result.add(2778);\n        if (n == 14) {\n            return result;\n        }\n        result.add(4637);\n        if (n == 15) {\n            return result;\n        }\n        result.add(7505);\n        if (n == 16) {\n            return result;\n        }\n        result.add(12167);\n        if (n == 17) {\n            return result;\n        }\n        result.add(19683);\n        if (n == 18) {\n            return result;\n        }\n        result.add(31719);"}
{"task_id": "Java/131", "generation": "\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/132", "generation": "\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        return !stack.isEmpty();\n    }\n}"}
{"task_id": "Java/133", "generation": "\n        int sum = 0;\n        for (double num : lst) {\n            double ceilNum = Math.ceil(num);\n            sum += (int) Math.pow(ceilNum, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "\n        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        if (txt.length() == 1) {\n            return true;\n        }\n        char secondLastChar = txt.charAt(txt.length() - 2);\n        return secondLastChar == ' ';\n    }\n}"}
{"task_id": "Java/135", "generation": "\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    dp[i] = j;\n                    break;\n                }\n            }\n        }\n        \n        int maxIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == -1) {\n                continue;\n            }\n            if (maxIndex == -1 || arr.get(dp[i]) > arr.get(maxIndex)) {\n                maxIndex = dp[i];\n            }\n        }\n        \n        return maxIndex;\n    }\n}"}
{"task_id": "Java/136", "generation": "\n        Optional<Integer> largestNegative = lst.stream()\n                                                .filter(n -> n < 0)\n                                                .max(Integer::compare);\n        Optional<Integer> smallestPositive = lst.stream()\n                                                .filter(n -> n > 0)\n                                                .min(Integer::compare);\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/137", "generation": "\n        double aValue = convertToDouble(a);\n        double bValue = convertToDouble(b);\n\n        if (aValue == bValue) {\n            return Optional.empty();\n        } else if (aValue > bValue) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.');\n            return Double.parseDouble(str);\n        } else if (obj instanceof Integer) {\n            return (Integer) obj;\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass().getName());\n        }\n    }\n\n    \n}"}
{"task_id": "Java/138", "generation": "\n        // Check if n is less than the smallest possible sum of 4 even numbers (8)\n        if (n < 8) {\n            return false;\n        }\n        // Check if n minus the smallest possible sum of 4 even numbers (8) is even\n        return (n - 8) % 2 == 0;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/139", "generation": "\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        long fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    \n}"}
{"task_id": "Java/140", "generation": "\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                count++;\n            } else {\n                if (count == 1) {\n                    sb.append('_');\n                } else if (count > 2) {\n                    sb.append('-');\n                }\n                sb.append(c);\n                count = 0;\n            }\n        }\n        if (count == 1) {\n            sb.append('_');\n        } else if (count > 2) {\n            sb.append('-');\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/141", "generation": "\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        String[] invalidExtensions = {\"pdf\", \"doc\", \"jpg\"};\n        String[] invalidStartLetters = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};\n        String[] invalidCharacters = {\"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"+\", \"=\", \"{\", \"}\", \"[\", \"]\", \"|\", \"\\\\\", \";\", \":\", \"\\\"\", \"'\", \"<\", \">\", \",\", \".\", \"?\", \"/\"};\n\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        String namePart = parts[0];\n        String extensionPart = parts[1];\n\n        if (namePart.isEmpty() || Arrays.asList(invalidStartLetters).contains(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        if (Arrays.asList(invalidExtensions).contains(extensionPart)) {\n            return \"No\";\n        }\n\n        if (!Arrays.asList(validExtensions).contains(extensionPart)) {\n            return \"No\";\n        }\n\n        for (char c : namePart.toCharArray()) {\n            if (Arrays.asList(invalidCharacters).contains(c)) {\n                return \"No\";\n            }\n        }\n\n        long digitCount = namePart.chars().filter(Character::isDigit).count();\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/142", "generation": "\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        int finalNumerator = xNumerator * nNumerator;\n        int finalDenominator = xDenominator * nDenominator;\n        \n        return finalNumerator % finalDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "\n        return nums.stream()\n                .sorted(Comparator.comparingInt(Solution::sumOfDigits).thenComparingInt(nums::indexOf))\n                .collect(Collectors.toList());\n    }\n\n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstDigitsOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstDigitsOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int secondDigit = Character.getNumericValue(numStr.charAt(1));\n        return firstDigit % 2 != 0 && secondDigit % 2 != 0;\n    }\n\n    \n}"}
{"task_id": "Java/147", "generation": "\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((a[i] + a[j]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        return new ArrayList<>(planets.subList(index1 + 1, index2));\n    }\n}"}
{"task_id": "Java/149", "generation": "\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    \n}"}
{"task_id": "Java/151", "generation": "\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/152", "generation": "\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "\n        String strongest = \"\";\n        double max = Double.MIN_VALUE;\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            double strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}\n\nclass Main {\n    \n}"}
{"task_id": "Java/154", "generation": "\n        if (b.length() > a.length()) {\n            return false;\n        }\n        StringBuilder sb = new StringBuilder(b);\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = sb.toString();\n            if (a.contains(rotated)) {\n                return true;\n            }\n            sb.append(sb.charAt(0)).deleteCharAt(0);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/155", "generation": "\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "\n        LinkedHashMap<Integer, String> romanNumerals = new LinkedHashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        StringBuilder roman = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        return roman.toString();\n    }\n\n    \n}"}
{"task_id": "Java/157", "generation": "\n        int max = Math.max(a, Math.max(b, c));\n        int sum = a + b + c - max;\n        return max * max == sum * sum;\n    }\n}"}
{"task_id": "Java/158", "generation": "\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n        \n        String maxWord = \"\";\n        int maxUnique = 0;\n        \n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            \n            if (uniqueChars.size() > maxUnique || (uniqueChars.size() == maxUnique && word.compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n        \n        return maxWord;\n    }\n}"}
{"task_id": "Java/159", "generation": "\n        int totalEaten = number + Math.min(need, remaining);\n        int left = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, left);\n    }\n}"}
{"task_id": "Java/160", "generation": "\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            int nextOperand = operand.get(i + 1);\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"//\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + operator.get(i));\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/161", "generation": "\n        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n                } else {\n                    sb.append(Character.toLowerCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetter) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/162", "generation": "\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n\n    \n}"}
{"task_id": "Java/163", "generation": "\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"}
