{"task_id": "Go/0", "generation": "\n    for i, num1 := range numbers {\n        for j, num2 := range numbers {\n            if i != j && math.Abs(num1-num2) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    var currentGroup strings.Builder\n\n    for _, char := range paren_string {\n        if char == '(' {\n            stack = append(stack, char)\n            currentGroup.WriteRune(char)\n        } else if char == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                currentGroup.WriteRune(char)\n                if len(stack) == 0 {\n                    result = append(result, currentGroup.String())\n                    currentGroup.Reset()\n                }\n            }\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/2", "generation": "\n    // Get the integer part of the number\n    integerPart := math.Floor(number)\n    // Subtract the integer part from the original number to get the decimal part\n    decimalPart := number - integerPart\n    return decimalPart\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/4", "generation": "\n    var sum float64 = 0\n    var mean float64 = 0\n    var mad float64 = 0\n\n    // Calculate the mean\n    for _, number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate the Mean Absolute Deviation\n    for _, number := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n}\n"}
{"task_id": "Go/5", "generation": "\n\tif len(numbers) == 0 {\n\t\treturn []int{}\n\t}\n\tresult := make([]int, 0, len(numbers)*2-1)\n\tfor i, num := range numbers {\n\t\tresult = append(result, num)\n\t\tif i < len(numbers)-1 {\n\t\t\tresult = append(result, delimeter)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/6", "generation": "\n    var result []int\n    groups := strings.Split(paren_string, \" \")\n    for _, group := range groups {\n        maxDepth := 0\n        currentDepth := 0\n        for _, char := range group {\n            if char == '(' {\n                currentDepth++\n                if currentDepth > maxDepth {\n                    maxDepth = currentDepth\n                }\n            } else if char == ')' {\n                currentDepth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n"}
{"task_id": "Go/7", "generation": "\n    var filteredList []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            filteredList = append(filteredList, str)\n        }\n    }\n    return filteredList\n}\n"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    return [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    maxSoFar := math.MinInt64\n    result := make([]int, len(numbers))\n\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    for i := 0; i < len(str); i++ {\n        if IsPalindrome(str[i:]) {\n            return str + strings.Replace(str[:i], \"\", \"\", -1)\n        }\n    }\n    return str\n}"}
{"task_id": "Go/11", "generation": "\n    var result string\n    for i := range a {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings[1:] {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 1; i <= len(str); i++ {\n        prefixes = append(prefixes, str[:i])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}"}
{"task_id": "Go/16", "generation": "\n    str = strings.ToLower(str)\n    charMap := make(map[rune]bool)\n    for _, char := range str {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n"}
{"task_id": "Go/17", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i <= len(str)-len(substring); i++ {\n        if str[i:i+len(substring)] == substring {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    numMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numSlice := strings.Fields(numbers)\n    sort.Slice(numSlice, func(i, j int) bool {\n        return numMap[numSlice[i]] < numMap[numSlice[j]]\n    })\n\n    return strings.Join(numSlice, \" \")\n}\n"}
{"task_id": "Go/20", "generation": "\n    // Initialize the minimum difference to a large number\n    minDiff := math.MaxFloat64\n    // Initialize the two closest numbers to the first two numbers in the list\n    closest1 := numbers[0]\n    closest2 := numbers[1]\n    // Iterate over the list of numbers\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            // Calculate the difference between the two numbers\n            diff := math.Abs(numbers[i] - numbers[j])\n            // If the difference is smaller than the current minimum difference, update the minimum difference and the two closest numbers\n            if diff < minDiff {\n                minDiff = diff\n                closest1 = numbers[i]\n                closest2 = numbers[j]\n            }\n        }\n    }\n    // Return the two closest numbers in order\n    if closest1 < closest2 {\n        return [2]float64{closest1, closest2}\n    } else {\n        return [2]float64{closest2, closest1}\n    }\n}\n"}
{"task_id": "Go/21", "generation": "\n    min := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    rangeVal := max - min\n    rescaled := make([]float64, len(numbers))\n    for i, num := range numbers {\n        rescaled[i] = (num - min) / rangeVal\n    }\n    return rescaled\n}\n"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/23", "generation": "\n\tcount := 0\n\tfor range str {\n\t\tcount++\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i >= 1; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n"}
{"task_id": "Go/25", "generation": "\n    var factors []int\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    occurrences := make(map[int]int)\n    for _, number := range numbers {\n        occurrences[number]++\n    }\n\n    var result []int\n    for _, number := range numbers {\n        if occurrences[number] == 1 {\n            result = append(result, number)\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result string\n    for _, char := range str {\n        if strings.ToLower(string(char)) == string(char) {\n            result += strings.ToUpper(string(char))\n        } else {\n            result += strings.ToLower(string(char))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/28", "generation": "\n    var result string\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive\n}\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n    }\n    if n%2 == 0 || n%3 == 0 {\n        return false\n    }\n    i := 5\n    for i*i <= n {\n        if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    if len(xs) % 2 != 0 {\n        return 0\n    }\n    var a, b float64\n    a = -float64(xs[len(xs)-1]) / float64(xs[len(xs)-2])\n    b = float64(xs[len(xs)-3]) / float64(xs[len(xs)-2])\n    for {\n        x := a - b * Poly(xs, a)\n        if math.Abs(x - a) < 1e-6 {\n            break\n        }\n        a = x\n    }\n    return a\n}\n"}
{"task_id": "Go/33", "generation": "\n    // Create a slice to hold the elements at indices divisible by three\n    third := make([]int, 0)\n    for i, v := range l {\n        if i%3 == 0 {\n            third = append(third, v)\n        }\n    }\n\n    // Sort the slice of elements at indices divisible by three\n    sort.Ints(third)\n\n    // Create a new slice to hold the sorted elements\n    sorted := make([]int, len(l))\n    for i, v := range l {\n        if i%3 == 0 {\n            // Replace the element at the current index with the next sorted element\n            sorted[i] = third[i/3]\n        } else {\n            // Keep the original element at the current index\n            sorted[i] = v\n        }\n    }\n\n    return sorted\n}\n"}
{"task_id": "Go/34", "generation": "\n    uniqueMap := make(map[int]bool)\n    var uniqueSlice []int\n\n    for _, value := range l {\n        if _, exists := uniqueMap[value]; !exists {\n            uniqueMap[value] = true\n            uniqueSlice = append(uniqueSlice, value)\n        }\n    }\n\n    sort.Ints(uniqueSlice)\n    return uniqueSlice\n}\n"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += countSevens(i)\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// Extract even-indexed elements\n\tevenIndexedElements := make([]int, 0)\n\tfor i, v := range l {\n\t\tif i%2 == 0 {\n\t\t\tevenIndexedElements = append(evenIndexedElements, v)\n\t\t}\n\t}\n\n\t// Sort the extracted elements\n\tsort.Ints(evenIndexedElements)\n\n\t// Create a new slice to store the result\n\tresult := make([]int, len(l))\n\tevenIndex := 0\n\tfor i := range l {\n\t\tif i%2 == 0 {\n\t\t\tresult[i] = evenIndexedElements[evenIndex]\n\t\t\tevenIndex++\n\t\t} else {\n\t\t\tresult[i] = l[i]\n\t\t}\n\t}\n\n\treturn result\n}\n"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tcount := 0\n\tfor i := 2; ; i++ {\n\t\tif isPrime(i) && isFib(i) {\n\t\t\tcount++\n\t\t\tif count == n {\n\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"task_id": "Go/40", "generation": "\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}"}
{"task_id": "Go/42", "generation": "\n    for i, v := range l {\n        l[i] = v + 1\n    }\n    return l\n}\n"}
{"task_id": "Go/43", "generation": "\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if base < 2 || base > 9 {\n        return \"Invalid base\"\n    }\n    result := \"\"\n    for x > 0 {\n        remainder := x % base\n        result = strconv.Itoa(remainder) + result\n        x = x / base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c-3\n    }\n    return d\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 1 {\n\t\treturn float64(l[n/2])\n\t}\n\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n}\n"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/49", "generation": "\n    result := 1\n    base := 2\n    for n > 0 {\n        if n%2 == 1 {\n            result = (result * base) % p\n        }\n        base = (base * base) % p\n        n = n / 2\n    }\n    return result\n}"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"[aeiouAEIOU]\")\n    return re.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n    for _,i := range l {\n        if i >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n    charMap := make(map[rune]int)\n    for _, char := range s0 {\n        charMap[char]++\n    }\n    for _, char := range s1 {\n        if charMap[char] == 0 {\n            return false\n        }\n        charMap[char]--\n    }\n    for _, count := range charMap {\n        if count != 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n\t// Initialize a counter for the number of open brackets\n\topenBrackets := 0\n\n\t// Iterate over each character in the brackets string\n\tfor _, char := range brackets {\n\t\t// If the character is an open bracket, increment the counter\n\t\tif char == '<' {\n\t\t\topenBrackets++\n\t\t} else if char == '>' {\n\t\t\t// If the character is a close bracket, decrement the counter\n\t\t\topenBrackets--\n\t\t\t// If the counter goes negative, return false\n\t\t\tif openBrackets < 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the counter is zero, all brackets are correctly matched\n\treturn openBrackets == 0\n}\n"}
{"task_id": "Go/57", "generation": "\n    increasing := true\n    decreasing := true\n\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        } else if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    var result []int\n\n    for _, value := range l1 {\n        m[value] = true\n    }\n\n    for _, value := range l2 {\n        if _, ok := m[value]; ok {\n            result = append(result, value)\n            delete(m, value)\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    var largest int = 2\n    for n%2 == 0 {\n        n = n / 2\n    }\n    for i := 3; i <= int(math.Sqrt(float64(n))); i = i + 2 {\n        for n%i == 0 {\n            largest = i\n            n = n / i\n        }\n    }\n    if n > 2 {\n        largest = n\n    }\n    return largest\n}"}
{"task_id": "Go/60", "generation": "\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n"}
{"task_id": "Go/61", "generation": "\n    var counter int\n    for _, char := range brackets {\n        if char == '(' {\n            counter++\n        } else if char == ')' {\n            counter--\n        }\n        if counter < 0 {\n            return false\n        }\n    }\n    return counter == 0\n}\n"}
{"task_id": "Go/62", "generation": "\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\nfunc Derivative1(xs ...int) []int {\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 7\n    }\n    if n == 7 {\n        return 13\n    }\n    if n == 8 {\n        return 24\n    }\n    if n == 9 {\n        return 44\n    }\n    if n == 10 {\n        return 81\n    }\n    if n == 11 {\n        return 149\n    }\n    if n == 12 {\n        return 274\n    }\n    if n == 13 {\n        return 504\n    }\n    if n == 14 {\n        return 927\n    }\n    if n == 15 {\n        return 1705\n    }\n    if n == 16 {\n        return 2778\n    }\n    if n == 17 {\n        return 4637\n    }\n    if n == 18 {\n        return 7505\n    }\n    if n == 19 {\n        return 12167\n    }\n    if n == 20 {\n        return 19684\n    }\n    if n == 21 {\n        return 317811\n    }\n    if n == 22 {\n        return 514229\n    }\n    if n == 23 {\n        return 832040\n    }\n    if n == 24 {\n        return 1346269\n    }\n    if n == 25 {\n        return 2178309\n    }\n    if n == 26 {\n        return 3524578\n    }\n    if n == 27 {\n        return 5702887\n    }\n    if n == 28 {\n        return 9227465\n    }\n    if n == 29 {\n        return 14930352\n    }\n    if n == 30 {\n        return "}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiouyAEIOUY\"\n    count := 0\n    for _, char := range s {\n        if strings.ContainsRune(vowels, char) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    // Convert the integer to a string\n    str := strconv.Itoa(x)\n    \n    // If shift is greater than the number of digits, reverse the string\n    if shift > len(str) {\n        return reverseString(str)\n    }\n    \n    // Calculate the index to start the substring\n    index := len(str) - shift\n    \n    // Return the substring starting from the calculated index\n    return str[index:] + str[:index]\n}\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, v := range x {\n        if v >= 'A' && v <= 'Z' {\n            sum += int(v)\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/67", "generation": "\n\t// Split the string into two parts: the number of apples and oranges\n\tparts := strings.Fields(s)\n\tapples, _ := strconv.Atoi(parts[0])\n\toranges, _ := strconv.Atoi(parts[3])\n\n\t// Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n\tmangoes := n - apples - oranges\n\n\treturn mangoes\n}\n"}
{"task_id": "Go/68", "generation": "\n    min := math.MaxInt32\n    index := -1\n    for i, v := range arr {\n        if v%2 == 0 && v < min {\n            min = v\n            index = i\n        }\n    }\n    if index == -1 {\n        return []int{}\n    }\n    return []int{min, index}\n}"}
{"task_id": "Go/69", "generation": "\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n    max := -1\n    for k, v := range freq {\n        if k <= v && k > max {\n            max = k\n        }\n    }\n    return max\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    result := make([]int, 0)\n    for i, j := 0, len(lst)-1; i <= j; i, j = i+1, j-1 {\n        if i != j {\n            result = append(result, lst[i], lst[j])\n        } else {\n            result = append(result, lst[i])\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    s := (a + b + c) / 2\n    area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    return math.Round(area*100) / 100\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-1-i] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/73", "generation": "\n    count := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-1-i] {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/74", "generation": "\n    var sum1 int\n    var sum2 int\n    for _,v := range lst1 {\n        sum1 += len(v)\n    }\n    for _,v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    }\n    return lst2\n}"}
{"task_id": "Go/75", "generation": "\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultiplyPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultiplyPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultiplyPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i*i <= a; i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsMultPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    "}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return x == 1\n    }\n    for i := 2; i <= x; i++ {\n        if n == i {\n            if x%i == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/77", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    cubeRoot := math.Cbrt(float64(a))\n    return cubeRoot == float64(int(cubeRoot))\n}"}
{"task_id": "Go/78", "generation": "\n\tcount := 0\n\tfor _, v := range num {\n\t\tswitch v {\n\t\tcase '2', '3', '5', '7', 'B', 'D':\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/81", "generation": "\n\tvar letterGrades []string\n\tfor _, grade := range grades {\n\t\tswitch {\n\t\tcase grade >= 4.0:\n\t\t\tletterGrades = append(letterGrades, \"A+\")\n\t\tcase grade > 3.7:\n\t\t\tletterGrades = append(letterGrades, \"A\")\n\t\tcase grade > 3.3:\n\t\t\tletterGrades = append(letterGrades, \"A-\")\n\t\tcase grade > 3.0:\n\t\t\tletterGrades = append(letterGrades, \"B+\")\n\t\tcase grade > 2.7:\n\t\t\tletterGrades = append(letterGrades, \"B\")\n\t\tcase grade > 2.3:\n\t\t\tletterGrades = append(letterGrades, \"B-\")\n\t\tcase grade > 2.0:\n\t\t\tletterGrades = append(letterGrades, \"C+\")\n\t\tcase grade > 1.7:\n\t\t\tletterGrades = append(letterGrades, \"C\")\n\t\tcase grade > 1.3:\n\t\t\tletterGrades = append(letterGrades, \"C-\")\n\t\tcase grade > 1.0:\n\t\t\tletterGrades = append(letterGrades, \"D+\")\n\t\tcase grade > 0.7:\n\t\t\tletterGrades = append(letterGrades, \"D\")\n\t\tcase grade > 0.0:\n\t\t\tletterGrades = append(letterGrades, \"D-\")\n\t\tdefault:\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t}\n\t}\n\treturn letterGrades\n}"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1)))*2 - int(math.Pow(10, float64(n-2)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.FormatInt(int64(sum), 2)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = antiShuffleWord(word)\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc antiShuffleWord(word string) string {\n    chars := []rune(word)\n    sort.Slice(chars, func(i, j int) bool {\n        return chars[i] < chars[j]\n    })\n    return string(chars)\n}\n"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n    \n    // Check if the sum of the first and last elements is odd\n    if (array[0]+array[len(array)-1])%2 != 0 {\n        // Sort the array in ascending order\n        sort.Ints(array)\n    } else {\n        // Sort the array in descending order\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n    \n    return array\n}\n"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            shift := (char - 'a' + 2*2) % 26\n            result += string('a' + shift)\n        } else if char >= 'A' && char <= 'Z' {\n            shift := (char - 'A' + 2*2) % 26\n            result += string('A' + shift)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[1]\n}\n"}
{"task_id": "Go/91", "generation": "\n    // Your code here\n    re := regexp.MustCompile(`\\bI\\b`)\n    matches := re.FindAllString(S, -1)\n    return len(matches)\n}"}
{"task_id": "Go/92", "generation": "\n\ta, ok1 := x.(int)\n\tb, ok2 := y.(int)\n\tc, ok3 := z.(int)\n\tif !ok1 || !ok2 || !ok3 {\n\t\treturn false\n\t}\n\treturn a+b == c || a+c == b || b+c == a\n}\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    result := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            index := strings.IndexRune(vowels, char)\n            // Find the vowel 2 places ahead\n            nextVowel := vowels[(index+2)%len(vowels)]\n            // Swap case\n            if char == unicode.ToUpper(char) {\n                result += string(unicode.ToLower(nextVowel))\n            } else {\n                result += string(unicode.ToUpper(nextVowel))\n            }\n        } else {\n            // Swap case for non-vowels\n            if char == unicode.ToUpper(char) {\n                result += string(unicode.ToLower(char))\n            } else {\n                result += string(unicode.ToUpper(char))\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/94", "generation": "\n    var maxPrime int\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(num))); i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    for _, digit := range strconv.Itoa(num) {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    lower := true\n    upper := true\n    for key := range dict {\n        strKey, ok := key.(string)\n        if !ok {\n            return false\n        }\n        if strings.ToLower(strKey) != strKey {\n            lower = false\n        }\n        if strings.ToUpper(strKey) != strKey {\n            upper = false\n        }\n        if !lower && !upper {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n    var primes []int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a % 10))) * int(math.Abs(float64(b % 10)))\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    vowels := \"AEIOU\"\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    // Split the string into two parts\n    parts := strings.Split(value, \" \")\n    \n    // Convert the first part to a float64\n    num, err := strconv.ParseFloat(parts[0], 64)\n    if err != nil {\n        panic(err)\n    }\n    \n    // Get the absolute value of the number\n    absNum := math.Abs(num)\n    \n    // Get the integer part of the number\n    intPart := int(absNum)\n    \n    // Check if the number is equid two integers\n    if absNum-float64(intPart) == 0.5 {\n        // If it is, round away from zero\n        if num > 0 {\n            return intPart + 1\n        } else {\n            return intPart - 1\n        }\n    } else {\n        // If it isn't, just round normally\n        return int(math.Round(num))\n    }\n}\n"}
{"task_id": "Go/100", "generation": "\n\tvar res []int\n\tfor i := 0; i < n; i++ {\n\t\tres = append(res, n+2*i)\n\t}\n\treturn res\n}\n"}
{"task_id": "Go/101", "generation": "\n    // Split the string by commas and spaces\n    words := strings.FieldsFunc(s, func(r rune) bool {\n        return r == ',' || r == ' '\n    })\n    return words\n}\n"}
{"task_id": "Go/102", "generation": "\n    if y%2 == 0 {\n        return y\n    } else {\n        return y - 1\n    }\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := math.Round(float64(sum) / float64(m-n+1))\n    return fmt.Sprintf(\"0b%b\", int(avg))\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/105", "generation": "\n    sort.Ints(arr)\n    var result []string\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, strconv.Itoa(arr[i]))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = strings.Title(result[i])\n    }\n    return result\n}\nfunc ByLength(arr []int)[]string {\n    sort.Ints(arr)\n    var result []string\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, strconv.Itoa(arr[i]))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = strings.Title(result[i])\n    }\n    return result\n}\nfunc ByLength(arr []int)[]string {\n    sort.Ints(arr)\n    var result []string\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, strconv.Itoa(arr[i]))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = strings.Title(result[i])\n    }\n    return result\n}\nfunc ByLength(arr []int)[]string {\n    sort.Ints(arr)\n    var result []string\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result = append(result, strconv.Itoa(arr[i]))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        result[i] = strings.Title(result[i])\n    "}
{"task_id": "Go/106", "generation": "\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            result = append(result, factorial(i))\n        } else {\n            result = append(result, sum(i))\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "Go/107", "generation": "\n    var even, odd int\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    \n    sortArr := make([]int, len(arr))\n    copy(sortArr, arr)\n    sort.Ints(sortArr)\n    \n    for i := 0; i < len(arr); i++ {\n        if isEqual(arr, sortArr) {\n            return true\n        }\n        arr = rightShift(arr)\n    }\n    \n    return false\n}\n\nfunc isEqual(arr1, arr2 []int) bool {\n    for i := 0; i < len(arr1); i++ {\n        if arr1[i] != arr2[i] {\n            return false\n        }\n    }\n    \n    return true\n}\n\nfunc rightShift(arr []int) []int {\n    last := arr[len(arr)-1]\n    for i := len(arr) - 1; i > 0; i-- {\n        arr[i] = arr[i-1]\n    }\n    arr[0] = last\n    \n    return arr\n}\n"}
{"task_id": "Go/110", "generation": "\n    for _, v := range lst1 {\n        if v%2 != 0 {\n            for _, v2 := range lst2 {\n                if v2%2 == 0 {\n                    lst1 = append(lst1, v2)\n                    lst2 = append(lst2, v)\n                    break\n                }\n            }\n            if v%2 != 0 {\n                return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}"}
{"task_id": "Go/111", "generation": "\n    histogram := make(map[rune]int)\n    maxCount := 0\n    for _, char := range strings.ReplaceAll(test, \" \", \"\") {\n        histogram[char]++\n        if histogram[char] > maxCount {\n            maxCount = histogram[char]\n        }\n    }\n    for key, value := range histogram {\n        if value != maxCount {\n            delete(histogram, key)\n        }\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    for _, v := range s {\n        if !strings.ContainsRune(c, v) {\n            result += string(v)\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if result[i] != result[0] {\n            break\n        }\n        result = result[:len(result)-1]\n    }\n    for j := 1; j < len(result); j++ {\n        if result[j] != result[len(result)-1] {\n            break\n        }\n        result = result[:len(result)-1]\n    }\n    return [2]interface{}{result, result == string(reverse(result))}\n}\n\nfunc reverse(s string) []byte {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return runes\n}\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, char := range str {\n            if (char-'0')%2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the str%ng %d of the %dnput.\", count, count, count, count))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for _, num := range nums {\n        currentSum += num\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    var max int\n    for i := 0; i < len(grid); i++ {\n        var sum int\n        for j := 0; j < len(grid[i]); j++ {\n            sum += grid[i][j]\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return int(math.Ceil(float64(max) / float64(capacity)))\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        if countConsonants(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i+1])) && !strings.ContainsRune(vowels, rune(word[i-1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n"}
{"task_id": "Go/119", "generation": "\n    var stack []rune\n    for _, s := range lst {\n        for _, c := range s {\n            if c == '(' {\n                stack = append(stack, c)\n            } else if c == ')' {\n                if len(stack) == 0 {\n                    return \"No\"\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 == 0 && v%2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        str := strconv.Itoa(arr[i])\n        if len(str) == 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    sort.Ints(result)\n    return result\n}"}
{"task_id": "Go/124", "generation": "\n    if len(date) != 8 {\n        return false\n    }\n    month, day, year := date[0:2], date[3:5], date[6:]\n    if month == \"\" || day == \"\" || year == \"\" {\n        return false\n    }\n    monthInt, _ := strconv.Atoi(month)\n    dayInt, _ := strconv.Atoi(day)\n    yearInt, _ := strconv.Atoi(year)\n    if monthInt < 1 || monthInt > 12 {\n        return false\n    }\n    if dayInt < 1 || dayInt > 31 {\n        return false\n    }\n    if monthInt == 2 {\n        if dayInt > 29 {\n            return false\n        }\n    } else if monthInt == 4 || monthInt == 6 || monthInt == 9 || monthInt == 11 {\n        if dayInt > 30 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc Valid(date string) bool {\n    date = strings.ReplaceAll(date, \"/\", \"-\")\n    return ValidDate(date)\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Fields(txt)\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, char := range txt {\n            if (char-'a')%2 == 1 {\n                count++\n            }\n        }\n        return count\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc IsSorted(lst []int) bool {\n"}
{"task_id": "Go/127", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    product := 1\n    for _, num := range arr {\n        if num < 0 {\n            product *= -1\n        } else if num == 0 {\n            return 0\n        }\n    }\n    sumOfMagnitudes := 0\n    for _, num := range arr {\n        sumOfMagnitudes += int(math.Abs(float64(num)))\n    }\n    return sumOfMagnitudes * product\n}"}
{"task_id": "Go/129", "generation": "\n    // Your code here\n}\n"}
{"task_id": "Go/130", "generation": "\n\tif n == 0 {\n\t\treturn []float64{}\n\t}\n\tif n == 1 {\n\t\treturn []float64{1}\n\t}\n\tif n == 2 {\n\t\treturn []float64{1, 3, 2}\n\t}\n\tif n == 3 {\n\t\treturn []float64{1, 3, 2, 8}\n\t}\n\ta := []float64{1, 3, 2, 8}\n\tfor i := 4; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\ta = append(a, a[i-1]+a[i-2]+a[i-3]+float64(i)/2)\n\t\t} else {\n\t\t\ta = append(a, a[i-1]+a[i-2]+a[i-3]+1)\n\t\t}\n\t}\n\treturn a\n}\n\n//func Tri(n int) []float64 {\n//\tif n == 0 {\n//\t\treturn []float64{}\n//\t}\n//\tif n == 1 {\n//\t\treturn []float64{1}\n//\t}\n//\tif n == 2 {\n//\t\treturn []float64{1, 3, 2}\n//\t}\n//\tif n == 3 {\n//\t\treturn []float64{1, 3, 2, 8}\n//\t}\n//\ta := []float64{1, 3, 2, 8}\n//\tfor i := 4; i <= n; i++ {\n//\t\tif i%2 == 0 {\n//\t\t\ta = append(a, a[i-1]+a[i-2]+a[i-3]+float64(i)/2)\n//\t\t} else {\n//\t\t\ta = append(a, a[i-1]+a[i-2]+a[i-3]+1)\n//\t\t}\n//\t}\n//\treturn a\n//}\n//func Tri(n int) []float64 {\n//\tif n == 0 {\n//\t\treturn []float64{}\n//\t}\n//\tif n == 1 {\n//\t\treturn []float64"}
{"task_id": "Go/131", "generation": "\n    sum := 0\n    for _, v := range strconv.Itoa(n) {\n        if int(v-'0')%2 != 0 {\n            sum *= int(v - '0')\n        }\n    }\n    if sum == 0 {\n        return 0\n    }\n    return sum\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, char := range s {\n        if char == '[' {\n            stack = append(stack, char)\n        } else if char == ']' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) > 0\n}\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, v := range lst {\n        sum += int(math.Pow(math.Ceil(v), 2))\n    }\n    return sum\n}"}
{"task_id": "Go/134", "generation": "\n    // Trim any trailing spaces from the string\n    txt = strings.TrimSpace(txt)\n\n    // Get the last character of the string\n    lastChar := txt[len(txt)-1]\n\n    // Check if the last character is an alphabetical character\n    if (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z') {\n        // Check if the last character is a part of a word\n        if len(txt) == 1 || txt[len(txt)-2] == ' ' {\n            return true\n        }\n    }\n\n    return false\n}\n"}
{"task_id": "Go/135", "generation": "\n    max := arr[0]\n    maxIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex = i\n        }\n    }\n    for i := maxIndex - 1; i >= 0; i-- {\n        if arr[i] > max {\n            return -1\n        }\n    }\n    return maxIndex\n}"}
{"task_id": "Go/136", "generation": "\n    var largest, smallest *int\n    for _, num := range lst {\n        if num < 0 {\n            if smallest == nil || num > *smallest {\n                smallest = &num\n            }\n        } else if num > 0 {\n            if largest == nil || num > *largest {\n                largest = &num\n            }\n        }\n    }\n    return [2]interface{}{largest, smallest}\n}"}
{"task_id": "Go/137", "generation": "\n    var aVal, bVal float64\n    var err error\n\n    switch a.(type) {\n    case int:\n        aVal = float64(a.(int))\n    case float64:\n        aVal = a.(float64)\n    case string:\n        aVal, err = strconv.ParseFloat(strings.Replace(a.(string), \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Println(\"Error parsing a:\", err)\n            return nil\n        }\n    default:\n        fmt.Println(\"Unsupported type for a:\", a)\n        return nil\n    }\n\n    switch b.(type) {\n    case int:\n        bVal = float64(b.(int))\n    case float64:\n        bVal = b.(float64)\n    case string:\n        bVal, err = strconv.ParseFloat(strings.Replace(b.(string), \",\", \".\", -1), 64)\n        if err != nil {\n            fmt.Println(\"Error parsing b:\", err)\n            return nil\n        }\n    default:\n        fmt.Println(\"Unsupported type for b:\", b)\n        return nil\n    }\n\n    if aVal > bVal {\n        return a\n    } else if aVal < bVal {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc IsSum(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc Is8(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc IsEqualToSumEven(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc IsSum(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc Is8(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2 {\n        sum += i\n        if sum == n {\n            return true\n        }\n    }\n    return false\n}\nfunc IsEqualToSumEven(n int) bool {\n    if n%2 != 0 {\n        return false\n    }\n    sum := 0\n    for i := 2; i <= n; i += 2"}
{"task_id": "Go/139", "generation": "\n    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\nfunc BrazilianFactorial(n int) int {\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= SpecialFactorial(i)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/140", "generation": "\n    var result string\n    var count int\n    for _, char := range text {\n        if char == ' ' {\n            count++\n        } else {\n            if count == 1 {\n                result += \"_\"\n            } else if count > 2 {\n                result += \"-\"\n            }\n            count = 0\n            result += string(char)\n        }\n    }\n    if count == 1 {\n        result += \"_\"\n    } else if count > 2 {\n        result += \"-\"\n    }\n    return result\n}"}
{"task_id": "Go/141", "generation": "\n    // Split the file name by the dot\n    parts := strings.Split(file_name, \".\")\n    \n    // Check if there are exactly two parts\n    if len(parts) != 2 {\n        return \"No\"\n    }\n    \n    // Check if the substring before the dot is not empty and starts with a letter\n    if len(parts[0]) == 0 || !strings.HasPrefix(parts[0], string('a')) || !strings.HasPrefix(parts[0], string('A')) {\n        return \"No\"\n    }\n    \n    // Check if the substring after the dot is one of the valid extensions\n    validExtensions := []string{\"txt\", \"exe\", \"dll\"}\n    isValidExtension := false\n    for _, extension := range validExtensions {\n        if parts[1] == extension {\n            isValidExtension = true\n            break\n        }\n    }\n    if !isValidExtension {\n        return \"No\"\n    }\n    \n    // Check if there are more than three digits in the substring before the dot\n    digitCount := 0\n    for _, char := range parts[0] {\n        if char >= '0' && char <= '9' {\n            digitCount++\n        }\n    }\n    if digitCount > 3 {\n        return \"No\"\n    }\n    \n    // If all checks pass, the file name is valid\n    return \"Yes\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i%3 == 0 {\n            sum += int(math.Pow(float64(num), 2))\n        } else if i%4 == 0 {\n            sum += int(math.Pow(float64(num), 3))\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Split(sentence, \" \")\n    var res []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            res = append(res, word)\n        }\n    }\n    return strings.Join(res, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    // Split the numerator and denominator of x and n\n    xNumerator, xDenominator := splitFraction(x)\n    nNumerator, nDenominator := splitFraction(n)\n\n    // Multiply the numerators and denominators\n    numeratorProduct := xNumerator * nNumerator\n    denominatorProduct := xDenominator * nDenominator\n\n    // Check if the product of the numerators is divisible by the product of the denominators\n    return numeratorProduct%denominatorProduct == 0\n}\n"}
{"task_id": "Go/145", "generation": "\n    sort.Slice(nums, func(i, j int) bool {\n        sumI := sumDigits(nums[i])\n        sumJ := sumDigits(nums[j])\n        if sumI == sumJ {\n            return i < j\n        }\n        return sumI < sumJ\n    })\n    return nums\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    if n < 0 {\n        n = -n\n    }\n    for _, c := range strconv.Itoa(n) {\n        digit, _ := strconv.Atoi(string(c))\n        sum += digit\n    }\n    return sum\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            strNum := strconv.Itoa(num)\n            firstDigit, _ := strconv.Atoi(string(strNum[0]))\n            secondDigit, _ := strconv.Atoi(string(strNum[1]))\n            if firstDigit%2 != 0 && secondDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i-i+1)\n    }\n    var tri int\n    for i := 0; i < len(a); i++ {\n        for j := i + 1; j < len(a); j++ {\n            if (a[i]+a[j])%3 == 0 {\n                tri++\n            }\n        }\n    }\n    return tri\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tvar result []string\n\tfor i, planet := range planets {\n\t\tif planet == planet1 || planet == planet2 {\n\t\t\tcontinue\n\t\t}\n\t\tif (planet1 == \"Mercury\" && planet < planet2) || (planet1 == \"Venus\" && planet < planet2 && planet != \"Mercury\") || (planet1 == \"Earth\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\") || (planet1 == \"Mars\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\") || (planet1 == \"Jupiter\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\" && planet != \"Mars\") || (planet1 == \"Saturn\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\") || (planet1 == \"Uranus\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\" && planet != \"Saturn\") || (planet1 == \"Neptune\" && planet < planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\" && planet != \"Saturn\" && planet != \"Uranus\") {\n\t\t\tresult = append(result, planet)\n\t\t}\n\t}\n\treturn result\n}\n//This function takes two planet names as strings planet1 and planet2. It returns a slice of strings containing all planets whose orbits are located between the orbit of planet1 and planet2, sorted by the proximity to the sun. If planet1 or planet2 are not correct planet names, it returns an empty slice. The function uses a for loop to"}
{"task_id": "Go/149", "generation": "\n    // Remove strings with odd lengths\n    evenLengthStrings := make([]string, 0)\n    for _, str := range lst {\n        if len(str)%2 == 0 {\n            evenLengthStrings = append(evenLengthStrings, str)\n        }\n    }\n\n    // Sort the list by length, then alphabetically\n    sort.Slice(evenLengthStrings, func(i, j int) bool {\n        if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n            return evenLengthStrings[i] < evenLengthStrings[j]\n        }\n        return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n    })\n\n    return evenLengthStrings\n}\n"}
{"task_id": "Go/150", "generation": "\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && math.Mod(num, 2) != 0 {\n            sum += int(math.Pow(num, 2))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := range game {\n        result = append(result, int(math.Abs(float64(game[i] - guess[i]))))\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    max_strength := -math.MaxInt64\n    strongest_extension := \"\"\n    for _, extension := range extensions {\n        upper_count := 0\n        lower_count := 0\n        for _, char := range extension {\n            if char >= 'A' && char <= 'Z' {\n                upper_count++\n            } else if char >= 'a' && char <= 'z' {\n                lower_count++\n            }\n        }\n        strength := upper_count - lower_count\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n"}
{"task_id": "Go/154", "generation": "\n    if len(a) != len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        rotated := b[i:] + b[:i]\n        if strings.Contains(a, rotated) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    even := 0\n    odd := 0\n    for _, v := range strconv.Itoa(num) {\n        if (int(v-'0'))%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    var roman_numerals = []string{\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"}\n    var numbers = []int{1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}\n    var roman_string string\n\n    for i := 0; i < len(numbers); i++ {\n        for number >= numbers[i] {\n            roman_string += roman_numerals[i]\n            number -= numbers[i]\n        }\n    }\n\n    return strings.ToLower(roman_string)\n}\n"}
{"task_id": "Go/157", "generation": "\n\t// Sort the sides\n\tsides := []int{a, b, c}\n\tfor i := 0; i < len(sides)-1; i++ {\n\t\tfor j := i + 1; j < len(sides); j++ {\n\t\t\tif sides[i] > sides[j] {\n\t\t\t\tsides[i], sides[j] = sides[j], sides[i]\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check if the square of the longest side is equal to the sum of the squares of the other two sides\n\treturn sides[0]*sides[0]+sides[1]*sides[1] == sides[2]*sides[2]\n}\n"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, char := range word {\n            uniqueChars[char] = true\n        }\n        if len(uniqueChars) > maxUnique {\n            maxUnique = len(uniqueChars)\n            maxWord = word\n        } else if len(uniqueChars) == maxUnique {\n            if word < maxWord {\n                maxWord = word\n            }\n        }\n    }\n    return maxWord\n}\n\n"}
{"task_id": "Go/159", "generation": "\n    total := number + min(need, remaining)\n    left := max(0, remaining - need)\n    return []int{total, left}\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"}
{"task_id": "Go/160", "generation": "\n    if len(operator) == 0 {\n        return operand[0]\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n    var res string\n    for _, v := range s {\n        if v >= 'a' && v <= 'z' {\n            res += string(v - 32)\n        } else if v >= 'A' && v <= 'Z' {\n            res += string(v + 32)\n        } else {\n            res += string(v)\n        }\n    }\n    return res\n}"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n"}
{"task_id": "Go/163", "generation": "\n    var result []int\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"}
