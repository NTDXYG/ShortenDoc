{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) <= threshold {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "Go/1", "generation": "\n    stack := []rune{}\n    groups := []string{}\n    current_group := []rune{}\n\n    for _, char := range paren_string {\n        if char == '(' {\n            stack = append(stack, char)\n            current_group = append(current_group, char)\n        } else if char == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                current_group = append(current_group, char)\n                if len(stack) == 0 {\n                    groups = append(groups, string(current_group))\n                    current_group = []rune{}\n                }\n            } else {\n                current_group = append(current_group, char)\n            }\n        } else {\n            current_group = append(current_group, char)\n        }\n    }\n\n    return groups\n}\n\n"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}"}
{"task_id": "Go/3", "generation": "\n\tbalance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    sum := 0.0\n    for _, num := range numbers {\n        sum += math.Abs(num - mean)\n    }\n    return sum / float64(len(numbers))\n}"}
{"task_id": "Go/5", "generation": "\n\tvar result []int\n\tfor i, num := range numbers {\n\t\tresult = append(result, num)\n\t\tif i < len(numbers)-1 {\n\t\t\tresult = append(result, delimeter)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/6", "generation": "\n    max_depth := 0\n    current_depth := 0\n    stack := []int{}\n    for _, char := range paren_string {\n        if string(char) == \"(\" {\n            current_depth += 1\n            if current_depth > max_depth {\n                max_depth = current_depth\n            }\n            stack = append(stack, current_depth)\n        } else if string(char) == \")\" {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                if len(stack) > 0 {\n                    current_depth = stack[len(stack)-1]\n                } else {\n                    current_depth = 0\n                }\n            }\n        }\n    }\n    result := make([]int, max_depth)\n    for i := 0; i < max_depth; i++ {\n        result[i] = i + 1\n    }\n    return result\n}"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        result[i] = max\n    }\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    if IsPalindrome(str) {\n        return str\n    }\n    runes := []rune(str)\n    for i := len(runes) - 1; i >= 0; i-- {\n        if IsPalindrome(string(runes[0:i])) {\n            reversed := make([]rune, 0)\n            for j := len(runes) - 1; j >= i; j-- {\n                reversed = append(reversed, runes[j])\n            }\n            return str + string(reversed)\n        }\n    }\n    return str + string(runes)\n}"}
{"task_id": "Go/11", "generation": "\n    if len(a) != len(b) {\n        return \"Strings are not of same length\"\n    }\n\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}\n\n"}
{"task_id": "Go/13", "generation": "\n    for b != 0 {\n        a, b = b, a%b\n    }\n    return a\n}"}
{"task_id": "Go/14", "generation": "\n\tprefixes := make([]string, 0)\n\tfor i := 0; i < len(str); i++ {\n\t\tprefixes = append(prefixes, str[:i+1])\n\t}\n\treturn prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    var result string\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1]\n}"}
{"task_id": "Go/16", "generation": "\n    distinctCharacters := make(map[rune]bool)\n    for _, char := range strings.ToLower(str) {\n        distinctCharacters[char] = true\n    }\n    return len(distinctCharacters)\n}"}
{"task_id": "Go/17", "generation": "\n    notes := strings.Split(music_string, \" \")\n    result := make([]int, 0)\n    for _, note := range notes {\n        switch note {\n        case \"o\":\n            result = append(result, 4)\n        case \"o|\":\n            result = append(result, 2)\n        case \".|\":\n            result = append(result, 1)\n        case \">>>\":\n            result = append(result, 1)\n        case \"...\":\n            result = append(result, 1)\n        case \"....\":\n            result = append(result, 2)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/18", "generation": "\n\tcount := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tif str[i:i+len(substring)] == substring {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    nums := strings.Split(numbers, \" \")\n    sort.Slice(nums, func(i, j int) bool {\n        return nums[i] < nums[j]\n    })\n    return strings.Join(nums, \" \")\n}\n\n"}
{"task_id": "Go/20", "generation": "\n\tsort.Float64s(numbers)\n\tminDiff := math.MaxFloat64\n\tvar closest [2]float64\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tif diff := numbers[i+1] - numbers[i]; diff < minDiff {\n\t\t\tminDiff = diff\n\t\t\tclosest[0], closest[1] = numbers[i], numbers[i+1]\n\t\t}\n\t}\n\treturn closest\n}\n\n"}
{"task_id": "Go/21", "generation": "\n\tmin, max := findMinAndMax(numbers)\n\trescaled := make([]float64, len(numbers))\n\tfor i, num := range numbers {\n\t\trescaled[i] = (num - min) / (max - min)\n\t}\n\treturn rescaled\n}\n\nfunc findMinAndMax(numbers []float64) (float64, float64) {\n\tmin := numbers[0]\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn min, max\n}\n\n"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, value := range values {\n\t\tif val, ok := value.(int); ok {\n\t\t\tresult = append(result, val)\n\t\t}\n\t}\n\treturn result\n}"}
{"task_id": "Go/23", "generation": "\n\tcount := 0\n\tfor range str {\n\t\tcount++\n\t}\n\treturn count\n}"}
{"task_id": "Go/24", "generation": "\n\tlargestdiv := 1\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\tlargestdiv = i\n\t\t\tn = n / i\n\t\t}\n\t}\n\tif n > 1 {\n\t\tlargestdiv = n\n\t}\n\treturn largestdiv\n}"}
{"task_id": "Go/25", "generation": "\n    factors := []int{}\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n%i == 0 {\n            factors = append(factors, i)\n            n = n / i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n\tresult := make([]int, 0)\n\tcounts := make(map[int]int)\n\n\tfor _, number := range numbers {\n\t\tcounts[number]++\n\t\tif counts[number] == 1 {\n\t\t\tresult = append(result, number)\n\t\t}\n\t}\n\n\treturn result\n}\n\n"}
{"task_id": "Go/27", "generation": "\n    var result string\n    for _, char := range str {\n        if char >= 'a' && char <= 'z' {\n            result += strings.ToUpper(string(char))\n        } else if char >= 'A' && char <= 'Z' {\n            result += strings.ToLower(string(char))\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/28", "generation": "\n\tresult := \"\"\n\tfor _, v := range strings {\n\t\tresult += v\n\t}\n\treturn result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n\tvar positive []int\n\tfor _, num := range l {\n\t\tif num > 0 {\n\t\t\tpositive = append(positive, num)\n\t\t}\n\t}\n\treturn positive\n}\n\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n    }\n    if n%2 == 0 || n%3 == 0 {\n        return false\n    }\n    i := 5\n    for i*i <= n {\n        if n%i == 0 || n%(i+2) == 0 {\n            return false\n        }\n        i += 6\n    }\n    return true\n}\n\n"}
{"task_id": "Go/32", "generation": "\n    return Poly(xs, 1.0)\n}"}
{"task_id": "Go/33", "generation": "\n    var divThreeIndices []int\n    for i := range l {\n        if i%3 == 0 {\n            divThreeIndices = append(divThreeIndices, i)\n        }\n    }\n\n    sort.Ints(l)\n\n    for _, i := range divThreeIndices {\n        l[i] = l[i]\n    }\n\n    return l\n}"}
{"task_id": "Go/34", "generation": "\n    uniqueMap := make(map[int]bool)\n    for _, num := range l {\n        uniqueMap[num] = true\n    }\n\n    result := make([]int, len(uniqueMap))\n    i := 0\n    for key := range uniqueMap {\n        result[i] = key\n        i++\n    }\n\n    sort.Ints(result)\n    return result\n}"}
{"task_id": "Go/35", "generation": "\n\tmax := l[0]\n\tfor _, v := range l {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/37", "generation": "\n\tevenIndices := make([]int, 0)\n\tevenValues := make([]int, 0)\n\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, i)\n\t\tevenValues = append(evenValues, l[i])\n\t}\n\n\tsort.Ints(evenValues)\n\n\tfor i, v := range evenValues {\n\t\tl[evenIndices[i]] = v\n\t}\n\n\treturn l\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[2]}, runes[0:2]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tcount := 0\n\tfor count < n {\n\t\ti, j = j, i+j\n\t\tif isPrime(i) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn i\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrt; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/40", "generation": "\n\tsort.Ints(l)\n\tfor i := 0; i < len(l)-2; i++ {\n\t\tleft := i + 1\n\t\tright := len(l) - 1\n\t\tfor left < right {\n\t\t\tsum := l[i] + l[left] + l[right]\n\t\t\tif sum == 0 {\n\t\t\t\treturn true\n\t\t\t} else if sum < 0 {\n\t\t\t\tleft += 1\n\t\t\t} else {\n\t\t\t\tright -= 1\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n"}
{"task_id": "Go/41", "generation": "\n\tcollisions := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tcollisions++\n\t\t}\n\t}\n\treturn collisions\n}\n\n"}
{"task_id": "Go/42", "generation": "\n\tincr := make([]int, len(l))\n\tfor i, v := range l {\n\t\tincr[i] = v + 1\n\t}\n\treturn incr\n}"}
{"task_id": "Go/43", "generation": "\n\tset := make(map[int]bool)\n\tfor _, num := range l {\n\t\tif _, ok := set[num]; ok {\n\t\t\treturn true\n\t\t}\n\t\tset[0-num] = true\n\t}\n\treturn false\n}\n\n"}
{"task_id": "Go/44", "generation": "\n    return strconv.FormatInt(int64(x), base)\n}"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n\tif n < 2 {\n\t\treturn n\n\t}\n\n\ta, b, c, d := 0, 1, 0, 1\n\n\tfor i := 2; i <= n; i++ {\n\t\ta, b, c, d = b, c, d, a+b+c\n\t}\n\n\treturn d\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}"}
{"task_id": "Go/48", "generation": "\n\ttext = strings.ToLower(text)\n\tlength := len(text)\n\tfor i := 0; i < length/2; i++ {\n\t\tif text[i] != text[length-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/49", "generation": "\n    if n==0 {\n        return 1\n    }\n    if n==1 {\n        return 2\n    }\n    x:=Modp(n/2,p)\n    if n%2==0 {\n        return (x*x)%p\n    } else {\n        return (2*(x*x)%p)%p\n    }\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a'+26)%26+'a')\n    }\n    return string(newRunes)\n}\n\n"}
{"task_id": "Go/51", "generation": "\n    re := regexp.MustCompile(\"(?i)[aeiou]\")\n    return re.ReplaceAllString(text, \"\")\n}\n\n"}
{"task_id": "Go/52", "generation": "\n    for _,v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}"}
{"task_id": "Go/54", "generation": "\n    if len(s0) != len(s1) {\n        return false\n    }\n    m := make(map[rune]int)\n    for _, c := range s0 {\n        m[c]++\n    }\n    for _, c := range s1 {\n        if m[c] == 0 {\n            return false\n        }\n        m[c]--\n    }\n    return true\n}\n\n"}
{"task_id": "Go/55", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\n\ta, b := 0, 1\n\tfor i := 2; i <= n; i++ {\n\t\ta, b = b, a+b\n\t}\n\treturn b\n}"}
{"task_id": "Go/56", "generation": "\n\tstack := []rune{}\n\tfor _, b := range brackets {\n\t\tswitch b {\n\t\tcase '<':\n\t\t\tstack = append(stack, b) // push '<' to stack\n\t\tcase '>':\n\t\t\tif len(stack) == 0 || stack[len(stack)-1] != '<' {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1] // pop '<' from stack\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n\tincreasing := true\n\tdecreasing := true\n\n\tfor i := 0; i < len(l)-1; i++ {\n\t\tif l[i] > l[i+1] {\n\t\t\tincreasing = false\n\t\t}\n\t\tif l[i] < l[i+1] {\n\t\t\tdecreasing = false\n\t\t}\n\t}\n\n\treturn increasing || decreasing\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l1 {\n        m[item] = true\n    }\n\n    common := []int{}\n    for _, item := range l2 {\n        if _, ok := m[item]; ok {\n            // Item found in both lists\n            common = append(common, item)\n            delete(m, item)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n\tmaxPrime := -1\n\tfor n%2 == 0 {\n\t\tmaxPrime = 2\n\t\tn >>= 1\n\t}\n\n\tfor i := 3; i <= int(math.Sqrt(float64(n))); i += 2 {\n\t\tfor n%i == 0 {\n\t\t\tmaxPrime = i\n\t\t\tn = n / i\n\t\t}\n\t}\n\n\tif n > 2 {\n\t\tmaxPrime = n\n\t}\n\n\treturn maxPrime\n}\n\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if b == ')' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}"}
{"task_id": "Go/62", "generation": "\n\tderiv := make([]int, len(xs)-1)\n\tfor i := 1; i < len(xs); i++ {\n\t\tderiv[i-1] = xs[i] * i\n\t}\n\treturn deriv\n}\n\n"}
{"task_id": "Go/63", "generation": "\n\tif n <= 1 {\n\t\treturn n\n\t}\n\n\ta := 0\n\tb := 1\n\tc := 1\n\td := 2\n\n\tfor i := 3; i <= n; i++ {\n\t\ta, b, c, d = b, c, d, d+2*c-a\n\t}\n\n\treturn d\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiouyAEIOUY\"\n    count := 0\n    for _, char := range s {\n        if strings.ContainsRune(vowels, char) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    if shift >= len(str) {\n        return reverse(str)\n    }\n    return str[len(str)-shift:] + str[0:len(str)-shift]\n}\n\nfunc reverse(input string) string {\n    runes := []rune(input)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n\tsum := 0\n\tfor _, c := range x {\n\t\tif c >= 'A' && c <= 'Z' {\n\t\t\tsum += int(c)\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tsplit := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(split[2])\n\toranges, _ := strconv.Atoi(split[5])\n\treturn n - apples - oranges\n}"}
{"task_id": "Go/68", "generation": "\n    min := math.MaxInt32\n    index := -1\n    for i, v := range arr {\n        if v < min && v%2 == 0 {\n            min = v\n            index = i\n        }\n    }\n    if index == -1 {\n        return []int{}\n    }\n    return []int{min, index}\n}"}
{"task_id": "Go/69", "generation": "\n\tcounts := make(map[int]int)\n\tfor _, num := range lst {\n\t\tcounts[num]++\n\t}\n\tfor i := len(lst) - 1; i >= 0; i-- {\n\t\tif counts[lst[i]] > lst[i] {\n\t\t\treturn lst[i]\n\t\t}\n\t}\n\treturn -1\n}\n\n"}
{"task_id": "Go/70", "generation": "\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n    sort.Ints(lst)\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst)/2; i++ {\n        result[i*2] = lst[i]\n        result[i*2+1] = lst[len(lst)-i-1]\n    }\n    if len(lst)%2 == 1 {\n        result[len(lst)-1] = lst[len(lst)/2]\n    }\n    return result\n}"}
{"task_id": "Go/71", "generation": "\n    if a+b>c && a+c>b && b+c>a {\n        s := (a+b+c)/2\n        area := math.Sqrt(s*(s-a)*(s-b)*(s-c))\n        return math.Round(area*100) / 100\n    } else {\n        return \"Three sides make a valid triangle\"\n    }\n}"}
{"task_id": "Go/72", "generation": "\n\tsum := 0\n\tmax := 0\n\tfor _, v := range q {\n\t\tsum += v\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn sum-max < w && sum == max\n}\n\n"}
{"task_id": "Go/73", "generation": "\n\tn := len(arr)\n\tchanges := 0\n\tfor i := 0; i < n/2; i++ {\n\t\tif arr[i] != arr[n-i-1] {\n\t\t\tchanges++\n\t\t}\n\t}\n\treturn changes\n}\n\n"}
{"task_id": "Go/74", "generation": "\n    var sum1, sum2 int\n    for _, v := range lst1 {\n        sum1 += len(v)\n    }\n    for _, v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    }\n    return lst2\n}\n\n"}
{"task_id": "Go/75", "generation": "\n\tprimes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tcount := 0\n\tfor _, prime := range primes {\n\t\tif a%prime == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count == 3\n}\n\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    for i := 2; i <= x; i++ {\n        if math.Pow(float64(n), float64(i)) == float64(x) {\n            return true\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/77", "generation": "\n    x := int(math.Pow(float64(a), 1.0/3.0))\n    return x*x*x == a\n}"}
{"task_id": "Go/78", "generation": "\n\tprimeHex := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\tcount := 0\n\tfor _, hex := range num {\n\t\tfor _, prime := range primeHex {\n\t\t\tif string(hex) == prime {\n\t\t\t\tcount++\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tbinary = fmt.Sprintf(\"%d%s\", decimal%2, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn \"db\" + binary + \"db\"\n}\n\n"}
{"task_id": "Go/80", "generation": "\n\tif len(s) != 3 {\n\t\treturn false\n\t}\n\n\tchars := map[rune]bool{}\n\tfor _, c := range s {\n\t\tif _, ok := chars[c]; ok {\n\t\t\treturn false\n\t\t}\n\t\tchars[c] = true\n\t}\n\n\treturn true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n\tletterGrades := make([]string, len(grades))\n\tfor i, grade := range grades {\n\t\tswitch {\n\t\tcase grade >= 4.0:\n\t\t\tletterGrades[i] = \"A+\"\n\t\tcase grade >= 3.7:\n\t\t\tletterGrades[i] = \"A\"\n\t\tcase grade >= 3.3:\n\t\t\tletterGrades[i] = \"A-\"\n\t\tcase grade >= 3.0:\n\t\t\tletterGrades[i] = \"B+\"\n\t\tcase grade >= 2.7:\n\t\t\tletterGrades[i] = \"B\"\n\t\tcase grade >= 2.3:\n\t\t\tletterGrades[i] = \"B-\"\n\t\tcase grade >= 2.0:\n\t\t\tletterGrades[i] = \"C+\"\n\t\tcase grade >= 1.7:\n\t\t\tletterGrades[i] = \"C\"\n\t\tcase grade >= 1.3:\n\t\t\tletterGrades[i] = \"C-\"\n\t\tdefault:\n\t\t\tletterGrades[i] = \"E\"\n\t\t}\n\t}\n\treturn letterGrades\n}\n\n"}
{"task_id": "Go/82", "generation": "\n\tlength := len(s)\n\tif length < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= length; i++ {\n\t\tif length%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1)))\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        digit := N % 10\n        sum += digit\n        N /= 10\n    }\n\n    return strconv.FormatInt(int64(sum), 2)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n\tsum := 0\n\tfor i := 1; i < len(lst); i += 2 {\n\t\tsum += lst[i]\n\t}\n\treturn sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = antiShuffleWord(word)\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc antiShuffleWord(word string) string {\n    runes := []rune(word)\n    sort.Slice(runes, func(i, j int) bool {\n        return runes[i] < runes[j]\n    })\n    return string(runes)\n}\n\n"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, col := range row {\n            if col == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return []int{}\n    }\n    sum := array[0] + array[len(array)-1]\n    if sum%2 == 0 {\n        sort.Ints(array)\n    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n    return array\n}"}
{"task_id": "Go/89", "generation": "\n    var result string\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result += string((c-'a'+2)%26 + 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            result += string((c-'A'+2)%26 + 'A')\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    minDiff := math.MaxInt64\n    result := make([]int, 0)\n    for i := 0; i < len(lst)-1; i++ {\n        if diff := lst[i+1] - lst[i]; diff < minDiff && diff != 0 {\n            minDiff = diff\n            result = []int{lst[i], lst[i+1]}\n        }\n    }\n    if minDiff == math.MaxInt64 {\n        return nil\n    }\n    return result\n}"}
{"task_id": "Go/91", "generation": "\n    re := regexp.MustCompile(`(?i)the[^.?!]*[.?!]`)\n    matches := re.FindAllString(S, -1)\n    return len(matches)\n}\n\n"}
{"task_id": "Go/92", "generation": "\n\txi, yi, zi := x.(int), y.(int), z.(int)\n\tif !(xi && yi && zi) {\n\t\treturn false\n\t}\n\tsum := x.(int) + y.(int)\n\treturn sum == z.(int)\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encoded := \"\"\n    for _, char := range message {\n        if strings.ContainsRune(vowels, unicode.ToLower(char)) {\n            switch unicode.ToLower(char) {\n            case 'a':\n                encoded += \"A\"\n            case 'e':\n                encoded += \"E\"\n            case 'i':\n                encoded += \"I\"\n            case 'o':\n                encoded += \"O\"\n            case 'u':\n                encoded += \"U\"\n            default:\n                encoded += strings.ToLower(string(char))\n            }\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}"}
{"task_id": "Go/94", "generation": "\n    max := 0\n    for _, v := range lst {\n        if v > max {\n            max = v\n        }\n    }\n    return sumOfDigits(max)\n}\n\nfunc sumOfDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        digit := n % 10\n        sum += digit\n        n /= 10\n    }\n    return sum\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    sqrt := int(math.Sqrt(float64(n)))\n    for i := 2; i <= sqrt; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/95", "generation": "\n    lower := true\n    upper := true\n    for key := range dict {\n        if strings.ToLower(key.(string)) != key.(string) {\n            lower = false\n        }\n        if strings.ToUpper(key.(string)) != key.(string) {\n            upper = false\n        }\n        if !lower && !upper {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/96", "generation": "\n\tvar primes []int\n\tfor i := 2; i < n; i++ {\n\t\tif isPrime(i) {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n\nfunc isPrime(n int) bool {\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n > 1\n}"}
{"task_id": "Go/97", "generation": "\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    return (a%10) * (b%10)\n}"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/99", "generation": "\n    floatValue, _ := strconv.ParseFloat(value, 64)\n    intValue := int(floatValue)\n    decimal := floatValue - float64(intValue)\n\n    if decimal >= 0.5 {\n        return intValue + 1\n    }\n\n    return intValue\n}"}
{"task_id": "Go/100", "generation": "\n\tstones := make([]int, n)\n\tstones[0] = n\n\tfor i := 1; i < n; i++ {\n\t\tif stones[i-1]%2 == 0 {\n\t\t\tstones[i] = stones[i-1] + 2\n\t\t} else {\n\t\t\tstones[i] = stones[i-1] + 2\n\t\t}\n\t}\n\treturn stones\n}"}
{"task_id": "Go/101", "generation": "\n    return strings.FieldsFunc(s, func(r rune) bool {\n        return r == ',' || r == ' '\n    })\n}"}
{"task_id": "Go/102", "generation": "\n\tif x%2 == 0 {\n\t\treturn x\n\t}\n\tif y%2 == 0 {\n\t\treturn y\n\t}\n\treturn -1\n}"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return \"-\"\n    }\n    sum := 0\n    count := 0\n    for i := n; i <= m; i++ {\n        sum += i\n        count++\n    }\n    avg := float64(sum) / float64(count)\n    roundedAvg := int(math.Round(avg))\n    return fmt.Sprintf(\"0b%b\", roundedAvg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if !hasEvenDigit(num) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    digits := strconv.Itoa(num)\n    for _, digit := range digits {\n        if int(digit-'0')%2 == 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/105", "generation": "\n    var result []string\n    var temp []int\n    var tempStr string\n    var tempMap = map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(temp)))\n\n    for _, v := range temp {\n        if v == 4 {\n            tempStr += tempMap[2] + tempMap[2]\n        } else if v == 6 {\n            tempStr += tempMap[3] + tempMap[2]\n        } else if v == 7 {\n            tempStr += tempMap[3] + tempMap[1]\n        } else if v == 9 {\n            tempStr += tempMap[3] + tempMap[2]\n        } else if v == 3 {\n            tempStr += tempMap[1] + tempMap[1] + tempMap[1]\n        } else if v == 5 {\n            tempStr += tempMap[2] + tempMap[1]\n        } else {\n            tempStr += tempMap[v]\n        }\n    }\n\n    if len(tempStr) > 0 {\n        result = append(result, tempStr)\n    }\n\n    return result\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/106", "generation": "\n\tresult := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult[i-1] = fact(i)\n\t\t} else {\n\t\t\tresult[i-1] = sum(i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc fact(n int) int {\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc sum(n int) int {\n\tresult := 0\n\tfor i := 1; i <= n; i++ {\n\t\tresult += i\n\t}\n\treturn result\n}\n\n"}
{"task_id": "Go/107", "generation": "\n    count := 0\n    even := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            count++\n            if i%2 == 0 {\n                even++\n            }\n        }\n    }\n    return [2]int{even, count}\n}\n\nfunc isPalindrome(n int) bool {\n    str := strconv.Itoa(n)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num > 0 || num < 0 {\n            strNum := strconv.Itoa(int(math.Abs(float64(num))))\n            sum := 0\n            for _, digit := range strNum {\n                digitInt, _ := strconv.Atoi(string(digit))\n                sum += digitInt\n            }\n            if sum > 0 {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n\n    for i := 0; i < len(arr); i++ {\n        if isNonDecreasing(arr) {\n            return true\n        }\n        arr = rotateRight(arr)\n    }\n\n    return false\n}\n\nfunc isNonDecreasing(arr []int) bool {\n    for i := 0; i < len(arr)-1; i++ {\n        if arr[i] > arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc rotateRight(arr []int) []int {\n    last := arr[len(arr)-1]\n    for i := len(arr) - 1; i > 0; i-- {\n        arr[i] = arr[i-1]\n    }\n    arr[0] = last\n    return arr\n}"}
{"task_id": "Go/110", "generation": "\n\todd1, odd2 := 0, 0\n\tfor _, v := range lst1 {\n\t\tif v%2 != 0 {\n\t\t\todd1++\n\t\t}\n\t}\n\tfor _, v := range lst2 {\n\t\tif v%2 != 0 {\n\t\t\todd2++\n\t\t}\n\t}\n\tif odd1 > odd2 {\n\t\treturn \"NO\"\n\t}\n\treturn \"YES\"\n}\n\n"}
{"task_id": "Go/111", "generation": "\n    histogram := make(map[rune]int)\n    max := 0\n    maxLetters := []rune{}\n\n    for _, letter := range strings.ReplaceAll(test, \" \", \"\") {\n        histogram[letter]++\n        if histogram[letter] > max {\n            max = histogram[letter]\n            maxLetters = []rune{letter}\n        } else if histogram[letter] == max {\n            maxLetters = append(maxLetters, letter)\n        }\n    }\n\n    result := make(map[rune]int)\n    for _, letter := range maxLetters {\n        result[letter] = max\n    }\n\n    return result\n}"}
{"task_id": "Go/112", "generation": "\n    for _,v := range c {\n        s = strings.ReplaceAll(s, string(v), \"\")\n    }\n    r := []rune(s)\n    for i := 0; i < len(r)/2; i++ {\n        if r[i] != r[len(r)-1-i] {\n            return [2]interface{}{s, false}\n        }\n    }\n    return [2]interface{}{s, true}\n}\n\n"}
{"task_id": "Go/113", "generation": "\n    var result []string\n    for _, str := range lst {\n        count := 0\n        for _, char := range str {\n            if (char-'0')%2 != 0 {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements %dn the string %d of the input.\", count, count))\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    min := math.MaxInt64\n    sum := 0\n    for _, num := range nums {\n        sum += num\n        if sum < min {\n            min = sum\n        }\n        sum = int(math.Max(float64(sum), float64(num)))\n    }\n    return min\n}"}
{"task_id": "Go/115", "generation": "\n    count := 0\n    for _, row := range grid {\n        for _, well := range row {\n            if well == 1 {\n                count++\n            }\n        }\n    }\n    return int(math.Ceil(float64(count) / float64(capacity)))\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        iBinLen, jBinLen := len(fmt.Sprintf(\"%b\", arr[i])), len(fmt.Sprintf(\"%b\", arr[j]))\n        iBinOnes, jBinOnes := 0, 0\n        for _, v := range fmt.Sprintf(\"%b\", arr[i]) {\n            if v == '1' {\n                iBinOnes++\n            }\n        }\n        for _, v := range fmt.Sprintf(\"%b\", arr[j]) {\n            if v == '1' {\n                jBinOnes++\n            }\n        }\n        if iBinOnes == jBinOnes {\n            return arr[i] < arr[j]\n        }\n        return iBinOnes < jBinOnes\n    })\n    return arr\n}"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    var result []string\n    for _, word := range words {\n        count := 0\n        for _, letter := range word {\n            if bytes.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", letter) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if bytes.Contains([]byte(vowels), []byte{word[i]}) && !bytes.Contains([]byte(vowels), []byte{word[i-1]}) && !bytes.Contains([]byte(vowels), []byte{word[i+1]}) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}"}
{"task_id": "Go/119", "generation": "\n    var stack []rune\n    for _, str := range lst {\n        for _, ch := range str {\n            if ch == '(' {\n                stack = append(stack, ch)\n            } else if ch == ')' {\n                if len(stack) == 0 {\n                    return \"No\"\n                }\n                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return arr[:k]\n}"}
{"task_id": "Go/121", "generation": "\n\tsum := 0\n\tfor i := 0; i < len(lst); i += 2 {\n\t\tif lst[i]%2 != 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        str := strconv.Itoa(arr[i])\n        if len(str) == 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        collatz = append(collatz, n)\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n\n    var odds []int\n    for _, num := range collatz {\n        if num%2 != 0 {\n            odds = append(odds, num)\n        }\n    }\n\n    sort.Ints(odds)\n    return odds\n}"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n    date = strings.Replace(date, \"/\", \"-\", -1)\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n    month, err1 := strconv.Atoi(parts[0])\n    day, err2 := strconv.Atoi(parts[1])\n    year, err3 := strconv.Atoi(parts[2])\n    if err1 != nil || err2 != nil || err3 != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    }\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if int(c) >= int('a') && int(c) <= int('z') && (int(c)%2) != 0 {\n                count++\n            }\n        }\n        return count\n    }\n}"}
{"task_id": "Go/126", "generation": "\n\tn := len(lst)\n\tif n == 0 || n == 1 {\n\t\treturn true\n\t}\n\t\n\tduplicate := make(map[int]bool)\n\tfor i := 0; i < n-1; i++ {\n\t\tif lst[i] == lst[i+1] {\n\t\t\tif _, ok := duplicate[lst[i]]; ok {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tduplicate[lst[i]] = true\n\t\t}\n\t\tif lst[i] > lst[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/127", "generation": "\n\tstart := max(interval1[0], interval2[0])\n\tend := min(interval1[1], interval2[1])\n\tintersection := end - start + 1\n\tif intersection <= 0 {\n\t\treturn \"NO\"\n\t}\n\tif isPrime(intersection) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    sum := 0\n    for _, num := range arr {\n        sum += int(math.Pow(float64(num), 2))\n    }\n\n    return sum\n}"}
{"task_id": "Go/129", "generation": "\n\tn := len(grid)\n\tg := make([][]int, n*n+1)\n\td := make([]int, n*n+1)\n\tpath := make([]int, n*n+1)\n\tvis := make([]bool, n*n+1)\n\tq := make([]int, 0)\n\tres := make([]int, 0)\n\tdx := []int{-1, 0, 1, 0}\n\tdy := []int{0, 1, 0, -1}\n\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tg[grid[i][j]] = append(g[grid[i][j]], i*n+j+1)\n\t\t}\n\t}\n\n\tq = append(q, n*n)\n\td[n*n] = 0\n\tfor len(q) > 0 {\n\t\tu := q[0]\n\t\tq = q[1:]\n\t\tvis[u] = false\n\t\tfor _, v := range g[u] {\n\t\t\tif d[v] > d[u]+1 {\n\t\t\t\td[v] = d[u] + 1\n\t\t\t\tpath[v] = u\n\t\t\t\tif !vis[v] {\n\t\t\t\t\tvis[v] = true\n\t\t\t\t\tq = append(q, v)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tu := path[1]\n\tfor i := 1; i < k; i++ {\n\t\tres = append(res, grid[u/n][u%n])\n\t\tu = path[u]\n\t}\n\tres = append(res, grid[u/n][u%n])\n\n\tfor i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n\t\tres[i], res[j] = res[j], res[i]\n\t}\n\n\treturn res\n}\n\n"}
{"task_id": "Go/130", "generation": "\n\tres := make([]float64, n)\n\tif n > 0 {\n\t\tres[0] = 1\n\t}\n\tif n > 1 {\n\t\tres[1] = 3\n\t}\n\tif n > 2 {\n\t\tres[2] = 2\n\t}\n\tfor i := 3; i < n; i++ {\n\t\tres[i] = res[i-1] + res[i-2] + res[i-3]\n\t}\n\treturn res\n}\n\n"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    return product\n}"}
{"task_id": "Go/132", "generation": "\n\tstack := []rune{}\n\tfor _, c := range s {\n\t\tif c == '[' {\n\t\t\tstack = append(stack, c)\n\t\t} else if c == ']' {\n\t\t\tif len(stack) == 0 || stack[len(stack)-1] != '[' {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) != 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        sum += math.Pow(math.Ceil(num), 2)\n    }\n    return int(sum)\n}"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z') {\n        if len(txt) == 1 || !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(txt[len(txt)-2])) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/135", "generation": "\n\tmax := -1\n\tfor i := len(arr) - 1; i > 0; i-- {\n\t\tif arr[i] > arr[i-1] {\n\t\t\tmax = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn max\n}\n\n"}
{"task_id": "Go/136", "generation": "\n  var largest, smallest *int = nil, nil\n  for _, v := range lst {\n    if v > 0 {\n      if largest == nil || v > *largest {\n        largest = &v\n      }\n      if smallest != nil && v < *smallest {\n        smallest = &v\n      }\n    } else if v < 0 {\n      if smallest == nil || v < *smallest {\n        smallest = &v\n      }\n      if largest != nil && v > *largest {\n        largest = &v\n      }\n    }\n  }\n  if largest == nil && smallest == nil {\n    return [2]interface{}{nil, nil}\n  }\n  return [2]interface{}{*largest, *smallest}\n}\n\n"}
{"task_id": "Go/137", "generation": "\n    var result float64\n    switch a := a.(type) {\n    case int:\n        switch b := b.(type) {\n        case int:\n            if a > b {\n                result = float64(a)\n            } else if a < b {\n                result = float64(b)\n            }\n        case float64:\n            if float64(a) > b {\n                result = float64(a)\n            } else if float64(a) < b {\n                result = b\n            }\n        case string:\n            aFloat, _ := strconv.ParseFloat(strings.Replace(b, \",\", \".\", -1), 64)\n            if float64(a) > aFloat {\n                result = float64(a)\n            } else if float64(a) < aFloat {\n                result = aFloat\n            }\n        }\n    case float64:\n        switch b := b.(type) {\n        case int:\n            if a > float64(b) {\n                result = a\n            } else if a < float64(b) {\n                result = float64(b)\n            }\n        case float64:\n            if a > b {\n                result = a\n            } else if a < b {\n                result = b\n            }\n        case string:\n            bFloat, _ := strconv.ParseFloat(strings.Replace(b, \",\", \".\", -1), 64)\n            if a > bFloat {\n                result = a\n            } else if a < bFloat {\n                result = bFloat\n            }\n        }\n    case string:\n        aFloat, _ := strconv.ParseFloat(strings.Replace(a, \",\", \".\", -1), 64)\n        switch b := b.(type) {\n        case int:\n            if aFloat > float64(b) {\n                result = aFloat\n            } else if aFloat < float64(b) {\n                result = float64(b)\n            }\n        case float64:\n            if aFloat > b {\n                result = aFloat\n            } else"}
{"task_id": "Go/138", "generation": "\n    if n < 4 || n % 2 != 0 {\n        return false\n    }\n    return true\n}\n\n"}
{"task_id": "Go/139", "generation": "\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc SpecialFactorial4(n int) int {\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= SpecialFactorial(i)\n\t}\n\treturn result\n}\n\n"}
{"task_id": "Go/140", "generation": "\n\tresult := \"\"\n\tcount := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tcount++\n\t\t\tif count == 2 {\n\t\t\t\tresult += \"-\"\n\t\t\t\tcount = 0\n\t\t\t}\n\t\t} else {\n\t\t\tif count == 2 {\n\t\t\t\tresult += \"-\"\n\t\t\t\tcount = 0\n\t\t\t} else if count > 2 {\n\t\t\t\tresult += \"-\"\n\t\t\t\tcount--\n\t\t\t}\n\t\t\tresult += string(c)\n\t\t}\n\t}\n\tif count == 2 {\n\t\tresult += \"-\"\n\t}\n\treturn result\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if len(file_name) > 32 {\n        return \"No\"\n    }\n    if strings.Count(file_name, \".\") != 1 {\n        return \"No\"\n    }\n    parts := strings.Split(file_name, \".\")\n    if len(parts[0]) == 0 {\n        return \"No\"\n    }\n    if len(parts[1]) != 3 || parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\" {\n        return \"No\"\n    }\n    if !(parts[0][0] >= 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' && parts[0][0] <= 'Z') {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, num := range lst {\n        if i%3 == 0 {\n            sum += int(math.Pow(float64(num), 2))\n        } else if i%4 == 0 {\n            sum += int(math.Pow(float64(num), 3))\n        } else {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    result := []string{}\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    xn := strings.Split(x, \"/\")\n    xNum, _ := strconv.Atoi(xn[0])\n    xDen, _ := strconv.Atoi(xn[1])\n\n    nn := strings.Split(n, \"/\")\n    nNum, _ := strconv.Atoi(nn[0])\n    nDen, _ := strconv.Atoi(nn[1])\n\n    return xNum * nDen == xDen * nNum\n}"}
{"task_id": "Go/145", "generation": "\n    points := make([]struct {\n        num    int\n        points int\n    }, len(nums))\n\n    for i, num := range nums {\n        points[i].num = num\n        points[i].points = sumOfDigits(num)\n    }\n\n    sort.Slice(points, func(i, j int) bool {\n        if points[i].points == points[j].points {\n            return numsIndex(nums, points[i].num) < numsIndex(nums, points[j].num)\n        }\n        return points[i].points < points[j].points\n    })\n\n    sortedNums := make([]int, len(nums))\n    for i, point := range points {\n        sortedNums[i] = point.num\n    }\n\n    return sortedNums\n}\n\nfunc sumOfDigits(num int) int {\n    sum := 0\n    for num != 0 {\n        digit := num % 10\n        sum += digit\n        num /= 10\n    }\n    return sum\n}\n\nfunc numsIndex(nums []int, num int) int {\n    for i, n := range nums {\n        if n == num {\n            return i\n        }\n    }\n    return -1\n}\n\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 && num%2 != 0 {\n            str := strconv.Itoa(num)\n            firstDigit, _ := strconv.Atoi(string(str[0]))\n            if firstDigit%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/147", "generation": "\n\ta := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\ta[i-1] = (i * i) - i + 1\n\t}\n\tcount := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tfor k := j + 1; k < n; k++ {\n\t\t\t\tif (a[i]+a[j]+a[k])%3 == 0 {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n"}
{"task_id": "Go/148", "generation": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return planets[index1+1:index2]\n\nprint(Bf(\"Jupiter\", \"Neptune\"))\nprint(Bf(\"Earth\", \"Mars\"))\nprint(Bf(\"Mercury\", \"Venus\"))\nprint(Bf(\"Jupiter\", \"Saturn\"))\nprint(Bf(\"Jupiter\", \"Uranus\"))\nprint(Bf(\"Jupiter\", \"Pluto\"))\nprint(Bf(\"Earth\", \"Pluto\"))\nprint(Bf(\"Pluto\", \"Neptune\"))\nprint(Bf(\"Pluto\", \"Earth\"))\n<jupyter_output>\n[]\n['Earth', 'Mars']\n['Mercury', 'Venus', 'Earth', 'Mars']\n['Jupiter', 'Saturn']\n['Jupiter', 'Uranus']\n['Jupiter']\n['Earth']\n['Neptune']\n['Earth']\n<jupyter_text>\nThe function Bf takes two planet names as strings planet1 and planet2. It checks if the planet names are valid. If not, it returns an empty tuple. If the planet names are valid, it finds the indices of the planets in the list of planets. It then returns all planets whose indices are between the indices of planet1 and planet2, inclusive. The planets are returned in the order they appear in the list of planets.\n<jupyter_code>\ndef Bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index"}
{"task_id": "Go/149", "generation": "\n    var result []string\n    for _, word := range lst {\n        if len(word)%2 == 0 {\n            result = append(result, word)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}"}
{"task_id": "Go/150", "generation": "\n\tif isPrime(n) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        if num >= 0 && num == math.Floor(num) && num%2 != 0 {\n            sum += math.Pow(num, 2)\n        }\n    }\n    return int(sum)\n}"}
{"task_id": "Go/152", "generation": "\n    res := make([]int, len(game))\n    for i := range game {\n        res[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return res\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/153", "generation": "\n    max_strength := math.MinInt64\n    strongest_extension := \"\"\n\n    for _, extension := range extensions {\n        strength := countCapitals(extension) - countSmallLetters(extension)\n        if strength > max_strength {\n            max_strength = strength\n            strongest_extension = extension\n        }\n    }\n\n    return class_name + \".\" + strongest_extension\n}\n\nfunc countCapitals(s string) int {\n    count := 0\n    for _, char := range s {\n        if 'A' <= char && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc countSmallLetters(s string) int {\n    count := 0\n    for _, char := range s {\n        if 'a' <= char && char <= 'z' {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/154", "generation": "\n    n := len(b)\n    for i := 0; i < n; i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[n-1:] + b[:n-1]\n    }\n    return false\n}\n\n"}
{"task_id": "Go/155", "generation": "\n    var result [2]int\n    if num < 0 {\n        num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            result[0]++\n        } else {\n            result[1]++\n        }\n        num /= 10\n    }\n    return result\n}"}
{"task_id": "Go/156", "generation": "\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    result := \"\"\n    for i := 0; i < len(values); i++ {\n        for number >= values[i] {\n            number -= values[i]\n            result += numerals[i]\n        }\n    }\n    return strings.ToLower(result)\n}"}
{"task_id": "Go/157", "generation": "\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n    return math.Pow(float64(sides[0]), 2) + math.Pow(float64(sides[1]), 2) == math.Pow(float64(sides[2]), 2)\n}\n\n"}
{"task_id": "Go/158", "generation": "\n    sort.Strings(words)\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        unique := countUnique(word)\n        if unique > maxUnique {\n            maxUnique = unique\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc countUnique(word string) int {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return len(unique)\n}"}
{"task_id": "Go/159", "generation": "\n\ttotal := number + need\n\tif total > remaining {\n\t\treturn []int{number + remaining, 0}\n\t}\n\treturn []int{total, remaining - total}\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n\tres := []rune(s)\n\tfor i := 0; i < len(res); i++ {\n\t\tif unicode.IsLetter(res[i]) {\n\t\t\tif unicode.IsLower(res[i]) {\n\t\t\t\tres[i] = unicode.ToUpper(res[i])\n\t\t\t} else {\n\t\t\t\tres[i] = unicode.ToLower(res[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn string(res)\n}\n\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}\n\n"}
{"task_id": "Go/163", "generation": "\n\tvar result []int\n\tfor i := a; i <= b; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\n"}
