{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []rune\n    ignoreSpace := true\n    for _, c := range paren_string {\n        if c == ' ' {\n            if ignoreSpace {\n                continue\n            } else {\n                ignoreSpace = true\n            }\n        } else {\n            ignoreSpace = false\n        }\n        if c == '(' {\n            stack = append(stack, c)\n        } else if c == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n                if len(stack) == 0 {\n                    result = append(result, string(stack))\n                }\n            }\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/2", "generation": "\n    intPart := math.Trunc(number)\n    decPart := number - intPart\n    return decPart\n}\n\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "Go/4", "generation": "\n    var sum float64 = 0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\n    var mad float64 = 0\n    for _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n    mad /= float64(len(numbers))\n\n    return mad\n}"}
{"task_id": "Go/5", "generation": "\n    var result []int\n    for i, num := range numbers {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/6", "generation": "\n    var levels []int\n    maxLevel := 0\n    currentLevel := 0\n    openParens := 0\n    for _, char := range paren_string {\n        if char == '(' {\n            openParens++\n            if openParens > maxLevel {\n                maxLevel = openParens\n            }\n            currentLevel++\n        } else if char == ')' {\n            openParens--\n            currentLevel--\n        }\n        levels = append(levels, currentLevel)\n    }\n    return levels\n}"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, v := range stringList {\n        if strings.Contains(v, substring) {\n            result = append(result, v)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n    sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum += num\n        product *= num\n    }\n    return [2]int{sum, product}\n}\n\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > max {\n            max = num\n        }\n        result[i] = max\n    }\n    return result\n}"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := 0; i < len(runes); i++ {\n        if IsPalindrome(string(runes[i:])) {\n            return string(runes) + string(runes[:i])\n        }\n    }\n    return string(runes)\n}"}
{"task_id": "Go/11", "generation": "\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n    if len(strings) == 0 {\n        return nil\n    }\n    longest := strings[0]\n    for _, str := range strings {\n        if len(str) > len(longest) {\n            longest = str\n        }\n    }\n    return longest\n}"}
{"task_id": "Go/13", "generation": "\n    if b==0 {\n        return a\n    }\n    return GreatestCommonDivisor(b,a%b)\n}\n\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[0:i+1])\n    }\n    return prefixes\n}"}
{"task_id": "Go/15", "generation": "\n    result := \"\"\n    for i := n; i <= 50; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1] // remove the last space\n}"}
{"task_id": "Go/16", "generation": "\n    m := make(map[rune]bool)\n    for _, char := range str {\n        m[char] = true\n    }\n    return len(m)\n}\n\n"}
{"task_id": "Go/17", "generation": "\n    var beats []int\n    for _, note := range strings.Split(music_string, \" \") {\n        switch note {\n        case \"o\":\n            beats = append(beats, 4)\n        case \"o|\":\n            beats = append(beats, 2)\n        case \".\":\n            beats = append(beats, 1)\n        }\n    }\n    return beats\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if strings.Contains(str[i:], substring) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/19", "generation": "\n    numberMap := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    words := strings.Split(numbers, \" \")\n    var nums []string\n\n    for _, word := range words {\n        nums = append(nums, word)\n    }\n\n    sort.Slice(nums, func(i, j int) bool {\n        return numberMap[nums[i]] < numberMap[nums[j]]\n    })\n\n    return strings.Join(nums, \" \")\n}"}
{"task_id": "Go/20", "generation": "\n    sort.Float64s(numbers)\n    minDiff := numbers[1] - numbers[0]\n    minPair := [2]float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)-1; i++ {\n        if diff := numbers[i+1] - numbers[i]; diff < minDiff {\n            minDiff = diff\n            minPair = [2]float64{numbers[i], numbers[i+1]}\n        }\n    }\n    return minPair\n}\n\n"}
{"task_id": "Go/21", "generation": "\n    min := numbers[0]\n    max := numbers[0]\n\n    for _, number := range numbers {\n        if number < min {\n            min = number\n        }\n\n        if number > max {\n            max = number\n        }\n    }\n\n    for i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\n    return numbers\n}"}
{"task_id": "Go/22", "generation": "\n    var result []int\n    for _, value := range values {\n        if val, ok := value.(int); ok {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/23", "generation": "\n    return len(str)\n}"}
{"task_id": "Go/24", "generation": "\n    for i := n / 2; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n"}
{"task_id": "Go/25", "generation": "\n    factors := make([]int, 0)\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}"}
{"task_id": "Go/26", "generation": "\n    m := make(map[int]bool)\n    result := make([]int, 0)\n    for _, num := range numbers {\n        if _, ok := m[num]; !ok {\n            m[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/27", "generation": "\n    result := make([]rune, len(str))\n    for i, c := range str {\n        if 'a' <= c && c <= 'z' {\n            result[i] = c - 'a' + 'A'\n        } else if 'A' <= c && c <= 'Z' {\n            result[i] = c - 'A' + 'a'\n        } else {\n            result[i] = c\n        }\n    }\n    return string(result)\n}"}
{"task_id": "Go/28", "generation": "\n    result := \"\"\n    for _, str := range strings {\n        result += str\n    }\n    return result\n}"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _, str := range strings {\n        if strings.HasPrefix(str, prefix) {\n            result = append(result, str)\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, num := range l {\n        if num > 0 {\n            positive = append(positive, num)\n        }\n    }\n    return positive\n}\n\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/32", "generation": "\n    return -1.0 / float64(xs[0])\n}"}
{"task_id": "Go/33", "generation": "\n    var divThree []int\n    for i, v := range l {\n        if i%3 == 0 {\n            divThree = append(divThree, v)\n        }\n    }\n    sort.Ints(divThree)\n\n    j := 0\n    for i, v := range l {\n        if i%3 == 0 {\n            l[i] = divThree[j]\n            j++\n        }\n    }\n    return l\n}\n\n"}
{"task_id": "Go/34", "generation": "\n    keys := make(map[int]bool)\n    list := []int{}\n    for _, entry := range l {\n        if _, value := keys[entry]; !value {\n            keys[entry] = true\n            list = append(list, entry)\n        }\n    }\n    sort.Ints(list)\n    return list\n}"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tstr := strconv.Itoa(i)\n\t\t\tfor _, c := range str {\n\t\t\t\tif c == '7' {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/37", "generation": "\n\tvar evenIndices []int\n\tfor i := 0; i < len(l); i += 2 {\n\t\tevenIndices = append(evenIndices, l[i])\n\t}\n\tsort.Ints(evenIndices)\n\n\tvar result []int\n\tj := 0\n\tfor i := 0; i < len(l); i += 2 {\n\t\tresult = append(result, evenIndices[j])\n\t\tj++\n\t}\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append([]rune{runes[len(runes)-1]}, runes[:len(runes)-1]...)))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}"}
{"task_id": "Go/39", "generation": "\n\ti := 1\n\tj := 1\n\tcount := 0\n\tfor {\n\t\ttemp := i + j\n\t\ti = j\n\t\tj = temp\n\t\tcount++\n\t\tif count == n {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn j\n}"}
{"task_id": "Go/40", "generation": "\n    if len(l) < 3 {\n        return false\n    }\n    sort.Ints(l)\n    for i := 0; i < len(l)-2; i++ {\n        left, right := i+1, len(l)-1\n        for left < right {\n            sum := l[i] + l[left] + l[right]\n            if sum == 0 {\n                return true\n            } else if sum < 0 {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n    return false\n}\n\n"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}"}
{"task_id": "Go/42", "generation": "\n    for i := 0; i < len(l); i++ {\n        l[i]++\n    }\n    return l\n}\n\n"}
{"task_id": "Go/43", "generation": "\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc PairsSumToZero(l []int) bool {\n    m := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := m[num]; ok {\n            return true\n        }\n        m[-num] = true\n    }\n    return false\n}\n\nfunc"}
{"task_id": "Go/44", "generation": "\n    if x < base {\n        return strconv.Itoa(x)\n    } else {\n        return ChangeBase(x/base, base) + strconv.Itoa(x%base)\n    }\n}\n\n"}
{"task_id": "Go/45", "generation": "\n    return 0.5 * a * h\n}"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n\n    var fib4_2, fib4_1, fib4_0, fib4_3 int\n    fib4_2 = 0\n    fib4_1 = 0\n    fib4_0 = 0\n    fib4_3 = 1\n\n    for i := 4; i <= n; i++ {\n        fib4_0 = fib4_1\n        fib4_1 = fib4_2\n        fib4_2 = fib4_3\n        fib4_3 = fib4_2 + fib4_1 + fib4_0\n    }\n\n    return fib4_3\n}\n\n"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2.0\n\t} else {\n\t\treturn float64(l[n/2])\n\t}\n}"}
{"task_id": "Go/48", "generation": "\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/49", "generation": "\n    return int(math.Pow(2,float64(n))%float64(p))\n}\n\nfunc Mod1101(n int, p int) int {\n    return int(math.Pow(11,float64(n))%float64(p))\n}\n\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(newRunes)\n}"}
{"task_id": "Go/51", "generation": "\n    reg, _ := regexp.Compile(\"[aeiouAEIOU]\")\n    return reg.ReplaceAllString(text, \"\")\n}"}
{"task_id": "Go/52", "generation": "\n    for _,v := range l {\n        if v >= t {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/53", "generation": "\n    return x + y\n}"}
{"task_id": "Go/54", "generation": "\n    m0 := make(map[rune]bool)\n    m1 := make(map[rune]bool)\n\n    for _, c := range s0 {\n        m0[c] = true\n    }\n\n    for _, c := range s1 {\n        m1[c] = true\n    }\n\n    for c := range m0 {\n        if !m1[c] {\n            return false\n        }\n    }\n\n    for c := range m1 {\n        if !m0[c] {\n            return false\n        }\n    }\n\n    return true\n}\n\n"}
{"task_id": "Go/55", "generation": "\n    if n <= 1 {\n        return n\n    }\n    a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return b\n}"}
{"task_id": "Go/56", "generation": "\n    var stack []rune\n    for _, c := range brackets {\n        switch c {\n        case '<':\n            stack = append(stack, c)\n        case '>':\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/57", "generation": "\n    if len(l) < 2 {\n        return true\n    }\n\n    increase := l[1] > l[0]\n    for i := 2; i < len(l); i++ {\n        if l[i] > l[i-1] != increase {\n            return false\n        }\n    }\n\n    return true\n}\n\n"}
{"task_id": "Go/58", "generation": "\n    m1 := make(map[int]bool)\n    for _, item := range l1 {\n        m1[item] = true\n    }\n\n    m2 := make(map[int]bool)\n    for _, item := range l2 {\n        m2[item] = true\n    }\n\n    common := make([]int, 0)\n    for key := range m1 {\n        if m2[key] {\n            common = append(common, key)\n        }\n    }\n\n    sort.Ints(common)\n    return common\n}"}
{"task_id": "Go/59", "generation": "\n    for i := 2; i * i <= n; i++ {\n        if n % i != 0 {\n            continue\n        }\n        for n % i == 0 {\n            n /= i\n        }\n    }\n    return n\n}\n\n"}
{"task_id": "Go/60", "generation": "\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    stack := []rune{}\n    for _, c := range brackets {\n        switch c {\n        case '(', '{', '[', '<':\n            stack = append(stack, c)\n        case ')', '}', ']', '>':\n            if len(stack) == 0 {\n                return false\n            }\n            lastOpening := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && lastOpening != '(') || (c == '}' && lastOpening != '{') || (c == ']' && lastOpening != '[') || (c == '>' && lastOpening != '<') {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}"}
{"task_id": "Go/62", "generation": "\n    result := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n\nfunc Derivative1(xs []int) []int {\n    result := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * (i + 1)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n    return c\n}\n\n"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/65", "generation": "\n    str := strconv.Itoa(x)\n    length := len(str)\n    if shift >= length {\n        return reverse(str)\n    }\n    return str[length-shift:] + str[:length-shift]\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, c := range x {\n        if 'A' <= c && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/67", "generation": "\n\tarr := strings.Split(s, \" \")\n\tapples, _ := strconv.Atoi(arr[0])\n\toranges, _ := strconv.Atoi(arr[2])\n\ttotalFruits := apples + oranges\n\t\n\tremainingFruits := n - totalFruits\n\t\n\treturn remainingFruits\n}\n\n"}
{"task_id": "Go/68", "generation": "\n    smallest_value := math.MaxInt64\n    smallest_index := -1\n    for index, value := range arr {\n        if value%2 == 0 && value < smallest_value {\n            smallest_value = value\n            smallest_index = index\n        }\n    }\n    return []int{smallest_value, smallest_index}\n}"}
{"task_id": "Go/69", "generation": "\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n    for i := 10; i > 0; i-- {\n        if m[i] > 0 {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "Go/70", "generation": "\n    sort.Ints(lst)\n    res := make([]int, len(lst))\n    res[0] = lst[0]\n    res[len(lst)-1] = lst[len(lst)-1]\n    for i := 1; i < len(lst)-1; i += 2 {\n        res[i] = lst[len(lst)-1-i/2]\n        if i+1 < len(lst) {\n            res[i+1] = lst[i+1]\n        }\n    }\n    return res\n}"}
{"task_id": "Go/71", "generation": "\n    if a + b > c && a + c > b && b + c > a {\n        s := (a + b + c) / 2\n        area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n        return math.Round(area*100) / 100\n    }\n    return -1\n}"}
{"task_id": "Go/72", "generation": "\n    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    return sum <= w\n}"}
{"task_id": "Go/73", "generation": "\n    n := len(arr)\n    count := 0\n    for i := 0; i < n/2; i++ {\n        if arr[i] != arr[n-i-1] {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/74", "generation": "\n    total1 := 0\n    for _, v := range lst1 {\n        total1 += len(v)\n    }\n    total2 := 0\n    for _, v := range lst2 {\n        total2 += len(v)\n    }\n    if total1 < total2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n"}
{"task_id": "Go/75", "generation": "\n    if a < 100 {\n        for i := 2; i <= a/2; i++ {\n            if a%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if x < n {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(x))); i++ {\n        for x%i == 0 {\n            x /= i\n            if x == n {\n                return true\n            }\n        }\n    }\n    if x != 1 {\n        return false\n    }\n    return true\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Go/77", "generation": "\n    a = int(math.Abs(float64(a)))\n    i := int(math.Cbrt(float64(a)))\n    return i*i*i == a\n}"}
{"task_id": "Go/78", "generation": "\n\thexMap := map[rune]int{\n\t\t'A': 10,\n\t\t'B': 11,\n\t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t'F': 15,\n\t\t'G': 16,\n\t\t'H': 17,\n\t}\n\tcount := 0\n\tfor _, c := range num {\n\t\tif _, ok := hexMap[c]; ok {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tdecimal = decimal / 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t}\n\treturn binary\n}\n\n"}
{"task_id": "Go/80", "generation": "\n    if len(s) != 3 {\n        return false\n    }\n    m := make(map[rune]bool)\n    for i, c := range s {\n        if _, ok := m[c]; ok {\n            return false\n        }\n        if i != 0 && s[i-1] == s[i] {\n            return false\n        }\n        m[c] = true\n    }\n    return true\n}\n\n"}
{"task_id": "Go/81", "generation": "\n    var result []string\n    for _, grade := range grades {\n        if grade == 4.0 {\n            result = append(result, \"A+\")\n        } else if grade == 3.0 {\n            result = append(result, \"A\")\n        } else if grade == 1.7 {\n            result = append(result, \"A-\")\n        } else if grade == 2.0 {\n            result = append(result, \"B+\")\n        } else if grade == 3.0 {\n            result = append(result, \"B\")\n        } else if grade == 0.7 {\n            result = append(result, \"B-\")\n        } else if grade == 0.0 {\n            result = append(result, \"C\")\n        } else if grade == 0.7 {\n            result = append(result, \"C+\")\n        } else if grade == 0.0 {\n            result = append(result, \"D\")\n        } else {\n            result = append(result, \"F\")\n        }\n    }\n    return result\n}"}
{"task_id": "Go/82", "generation": "\n    if len(s)%2 == 0 {\n        return false\n    }\n    for i := 2; i*i <= len(s); i++ {\n        if len(s)%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 10\n    }\n\n    count := 9 * int(math.Pow10(n-1))\n\n    if n > 1 {\n        count += 10 * int(math.Pow10(n-2))\n    }\n\n    return count\n}"}
{"task_id": "Go/84", "generation": "\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return strconv.Itoa(sum)\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        sum += lst[i]\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    sort.Strings(words)\n    res := make([]string, len(words))\n    for i, word := range words {\n        res[i] = word\n    }\n    return strings.Join(res, \" \")\n}"}
{"task_id": "Go/87", "generation": "\n    var res [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                res = append(res, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(res, func(i, j int) bool {\n        if res[i][0] == res[j][0] {\n            return res[i][1] > res[j][1]\n        }\n        return res[i][0] < res[j][0]\n    })\n    return res\n}"}
{"task_id": "Go/88", "generation": "\n    if len(array) == 0 {\n        return array\n    }\n\n    sum := array[0] + array[len(array)-1]\n\n    if sum%2 != 0 {\n        sort.Ints(array)\n    }\n\n    return array\n}\n\n"}
{"task_id": "Go/89", "generation": "\n    var encrypted string\n    for _, c := range s {\n        if 'a' <= c && c <= 'z' {\n            encrypted += string((c-'a'+2)%26 + 'a')\n        } else if 'A' <= c && c <= 'Z' {\n            encrypted += string((c-'A'+2)%26 + 'A')\n        } else {\n            encrypted += string(c)\n        }\n    }\n    return encrypted\n}"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] < lst[i+1] {\n            return lst[i+1]\n        }\n    }\n    return nil\n}"}
{"task_id": "Go/91", "generation": "\n    count := 0\n    sentences := regexp.MustCompile(\"[.?!]\")\n    words := sentences.Split(S, -1)\n    for _, word := range words {\n        if len(word) > 0 {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "Go/92", "generation": "\n\ta, b, c := x.(int), y.(int), z.(int)\n\treturn a == b+c || a == c+b || b == a+c || b == c+a || c == a+b || c == b+a\n}\n\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    vowelsLower := strings.ToLower(vowels)\n    vowelsUpper := strings.ToUpper(vowels)\n    encodedMessage := \"\"\n\n    for i := 0; i < len(message); i++ {\n        if strings.ContainsRune(vowelsLower, rune(message[i])) {\n            if i + 2 < len(message) && strings.ContainsRune(vowels, rune(message[i+2])) {\n                encodedMessage += string(message[i] + 2)\n            } else {\n                encodedMessage += string(message[i])\n            }\n        } else if strings.ContainsRune(vowelsUpper, rune(message[i])) {\n            if i + 2 < len(message) && strings.ContainsRune(vowels, rune(message[i+2])) {\n                encodedMessage += string(message[i] + 2)\n            } else {\n                encodedMessage += string(message[i])\n            }\n        } else {\n            encodedMessage += string(message[i])\n        }\n    }\n\n    return encodedMessage\n}"}
{"task_id": "Go/94", "generation": "\n    var maxPrime int\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumOfDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n%2 == 0 {\n        return false\n    }\n    sqrtN := int(math.Sqrt(float64(n)))\n    for i := 3; i <= sqrtN; i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumOfDigits(n int) int {\n    str := strconv.Itoa(n)\n    sum := 0\n    for _, r := range str {\n        digit, _ := strconv.Atoi(string(r))\n        sum += digit\n    }\n    return sum\n}"}
{"task_id": "Go/95", "generation": "\n    for key, value := range dict {\n        if key != strings.ToLower(key) {\n            return false\n        }\n        if value != strings.ToLower(value) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/96", "generation": "\n    primes := make([]int, 0)\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n"}
{"task_id": "Go/97", "generation": "\n    product := a * b\n    digits := int(math.Log10(float64(product))) + 1\n    return digits\n}\n\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if strings.ToUpper(string(s[i])) == string(s[i]) {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/99", "generation": "\n    val, _ := strconv.ParseFloat(value, 64)\n    return int(math.Round(val))\n}"}
{"task_id": "Go/100", "generation": "\n    var result []int\n    for i := 1; i <= n; i++ {\n        if n % 2 == 0 {\n            result = append(result, n+2)\n        } else {\n            result = append(result, n+1)\n        }\n        n++\n    }\n    return result\n}"}
{"task_id": "Go/101", "generation": "\n    return strings.Fields(s)\n}"}
{"task_id": "Go/102", "generation": "\n    if y%2 != 0 {\n        y--\n    }\n    return y\n}"}
{"task_id": "Go/103", "generation": "\n    sum := 0\n    for i := n; i <= m; i++ {\n        sum += i\n    }\n    avg := int(math.Round(float64(sum) / float64(m-n+1)))\n    return fmt.Sprintf(\"0b%b\", avg)\n}\n\n"}
{"task_id": "Go/104", "generation": "\n    var res []int\n    for _, v := range x {\n        if v%2 != 0 {\n            res = append(res, v)\n        }\n    }\n    sort.Ints(res)\n    return res\n}"}
{"task_id": "Go/105", "generation": "\n    var res []string\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            res = append(res, NumberToWords(num))\n        }\n    }\n    sort.Strings(res)\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc NumberToWords(num int) string {\n    // your code here\n}\n\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial(i)\n        } else {\n            result[i] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n\nfunc sum(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}"}
{"task_id": "Go/107", "generation": "\n    var even, odd int\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [2]int{even, odd}\n}"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if num < 0 {\n            count += int(math.Abs(float64(num)))\n        } else {\n            count += num\n        }\n    }\n    return count\n}"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            for j := i+1; j < len(arr); j++ {\n                if arr[j] < arr[i] {\n                    return false\n                }\n            }\n            arr = append(arr[:i], arr[i+1:]...)\n            return MoveOneBall(arr)\n        }\n    }\n    return true\n}"}
{"task_id": "Go/110", "generation": "\n    sum1, sum2 := 0, 0\n    for _, v := range lst1 {\n        sum1 += v\n    }\n    for _, v := range lst2 {\n        sum2 += v\n    }\n    if sum1%2 != 0 || sum2%2 != 0 {\n        return \"NO\"\n    }\n    return \"YES\"\n}"}
{"task_id": "Go/111", "generation": "\n    counts := make(map[rune]int)\n    for _, char := range test {\n        if char != ' ' {\n            counts[char]++\n        }\n    }\n    maxCount := 0\n    for _, count := range counts {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n    result := make(map[rune]int)\n    for char, count := range counts {\n        if count == maxCount {\n            result[char] = count\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/112", "generation": "\n    var result string\n    var isPal bool\n    for _, v := range s {\n        if !strings.Contains(c, string(v)) {\n            result += string(v)\n        }\n    }\n    isPal = isPalindrome(result)\n    return [2]interface{}{result, isPal}\n}\n\nfunc isPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, s := range lnst {\n        count := 0\n        for _, c := range s {\n            if int(c-'0')%2 != 0 {\n                count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"the number of odd elements in string %d of the input.\", count)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt64\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}"}
{"task_id": "Go/115", "generation": "\n    count := 0\n    for i := 0; i < len(grid); i++ {\n        for j := 0; j < len(grid[i]); j++ {\n            if grid[i][j] == 1 {\n                count++\n            }\n        }\n    }\n    return count / capacity\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        onesI, onesJ := countOnes(arr[i]), countOnes(arr[j])\n        if onesI == onesJ {\n            return arr[i] < arr[j]\n        }\n        return onesI < onesJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    words := strings.Fields(s)\n    result := make([]string, 0)\n\n    for _, word := range words {\n        count := 0\n        for _, r := range word {\n            if strings.ContainsRune(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", r) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    wordRunes := []rune(word)\n    for i := len(wordRunes) - 1; i > 0; i-- {\n        if string(wordRunes[i]) in vowels && string(wordRunes[i-1]) not in vowels {\n            return string(wordRunes[i])\n        }\n    }\n    return \"\"\n}"}
{"task_id": "Go/119", "generation": "\n    for _, str := range lst {\n        if isBalanced(str) {\n            return \"Yes\"\n        }\n    }\n    return \"No\"\n}\n\nfunc isBalanced(s string) bool {\n    stack := []rune{}\n    for _, c := range s {\n        switch c {\n        case '(', '[', '{', '<':\n            stack = append(stack, c)\n        case ')', ']', '}', '>':\n            if len(stack) == 0 {\n                return false\n            }\n            lastOpen := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && lastOpen != '(') || (c == ']' && lastOpen != '[') || (c == '}' && lastOpen != '{') || (c == '>' && lastOpen != '<') {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/120", "generation": "\n    sort.Ints(arr)\n    length := len(arr)\n    max := arr[length-1]\n    res := make([]int, k)\n    res[0] = max\n    for i := 1; i < k; i++ {\n        res[i] = arr[i-1]\n    }\n    return res\n}"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%2 == 0 && v%2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        str := strconv.Itoa(arr[i])\n        for j := 0; j < len(str); j++ {\n            if str[j] == '1' || str[j] == '2' || str[j] == '3' || str[j] == '4' || str[j] == '5' || str[j] == '6' || str[j] == '7' || str[j] == '8' || str[j] == '9' || str[j] == '0' {\n                num, _ := strconv.Atoi(string(str[j]))\n                sum += num\n            }\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/123", "generation": "\n    var collatz []int\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n        }\n        if n%2 == 0 {\n            n = n / 2\n        }\n        if n%2 != 0 {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    sort.Ints(collatz)\n    return collatz\n}"}
{"task_id": "Go/124", "generation": "\n    dateParts := strings.Split(date, \"\")\n    if len(dateParts) != 5 || dateParts[2] != \"-\" || dateParts[5] != \" \" {\n        return false\n    }\n\n    month, _ := strconv.Atoi(dateParts[0:2])\n    day, _ := strconv.Atoi(dateParts[3:5])\n    year, _ := strconv.Atoi(dateParts[6:10])\n\n    if month < 1 || month > 12 || day < 1 || day > 31 {\n        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    } else {\n        if day > 31 {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        var res []string\n        for i := range txt {\n            if i%2 != 0 {\n                res = append(res, string(txt[i]))\n            }\n        }\n        return res\n    }\n}\n\n"}
{"task_id": "Go/126", "generation": "\n    if len(lst) == 0 {\n        return true\n    }\n    prev := lst[0]\n    for _, num := range lst {\n        if num == prev {\n            return false\n        }\n        if num < prev {\n            return false\n        }\n        prev = num\n    }\n    return true\n}\n\n"}
{"task_id": "Go/127", "generation": "\n    if interval1[1] < interval2[0] || interval2[1] < interval1[0] {\n        return \"NO\"\n    }\n    intersectionStart := max(interval1[0], interval2[0])\n    intersectionEnd := min(interval1[1], interval2[1])\n    if intersectionEnd - intersectionStart < 2 {\n        return \"NO\"\n    }\n    for i := intersectionStart + 1; i < intersectionEnd; i++ {\n        if isPrime(i) {\n            return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n\n    product := 1\n    sum := 0\n\n    for _, num := range arr {\n        product *= num\n        sum += int(math.Abs(float64(num)))\n    }\n\n    return product * sum\n}"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    m := len(grid[0])\n    dir := []int{-1, 0, 1, 0, -1}\n    visited := make([][]bool, n)\n    for i := range visited {\n        visited[i] = make([]bool, m)\n    }\n    type pair struct {\n        x, y, dist int\n    }\n    pq := []pair{{grid[0][0], 0, 0}}\n    dist := make([][]int, n)\n    for i := range dist {\n        dist[i] = make([]int, m)\n        for j := range dist[i] {\n            dist[i][j] = -1\n        }\n    }\n    dist[0][0] = 0\n    ans := make([]int, 0)\n    for len(pq) > 0 {\n        cur := pq[0]\n        pq = pq[1:]\n        if cur.dist == k {\n            ans = append(ans, cur.x)\n        }\n        for i := 0; i < 4; i++ {\n            nx, ny := cur.x+dir[i], cur.y+dir[i+1]\n            if nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny] {\n                visited[nx][ny] = true\n                if dist[nx][ny] == -1 || dist[nx][ny] > cur.dist+1 {\n                    dist[nx][ny] = cur.dist + 1\n                    pq = append(pq, pair{grid[nx][ny], nx, ny})\n                }\n            }\n        }\n    }\n    return ans\n}"}
{"task_id": "Go/130", "generation": "\n    var res = make([]float64, n+1)\n    res[0] = 0\n    res[1] = 1\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n        if i%2 == 0 {\n            res[i] = res[i-1] + res[i/2] + 1\n        } else {\n            res[i] = res[i-1] + res[i-2] + res[i-3] + 1\n        }\n    }\n    return res\n}"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    return product\n}"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0.0\n    for _, num := range lst {\n        num = math.Ceil(num)\n        sum += num * num\n    }\n    return int(sum)\n}"}
{"task_id": "Go/134", "generation": "\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) {\n        return false\n    }\n    if strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar) && !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar-'a') && !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", lastChar-'A') {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/135", "generation": "\n    if len(arr) < 2 {\n        return -1\n    }\n\n    maxIndex := len(arr) - 1\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i] > arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n\n    for i := 0; i < maxIndex; i++ {\n        if arr[i] < arr[maxIndex] {\n            return i\n        }\n    }\n\n    return -1\n}"}
{"task_id": "Go/136", "generation": "\n    var maxNeg, minPos int\n    maxNeg, minPos = math.MinInt64, math.MaxInt64\n    hasNeg, hasPos := false, false\n    for _, num := range lst {\n        if num < minPos {\n            minPos = num\n            hasPos = true\n        }\n        if num > maxNeg {\n            maxNeg = num\n            hasNeg = true\n        }\n    }\n    if !hasNeg {\n        return nil, nil\n    }\n    if !hasPos {\n        return nil, maxNeg\n    }\n    return maxNeg, minPos\n}"}
{"task_id": "Go/137", "generation": "\n    var result interface{} = nil\n    switch a := a.(type) {\n    case int:\n        if b, ok := b.(int); ok {\n            if a > b {\n                result = a\n            }\n        }\n    case float64:\n        if b, ok := b.(float64); ok {\n            if a > b {\n                result = a\n            }\n        }\n    case string:\n        if b, ok := b.(string); ok {\n            if a > b {\n                result = a\n            }\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/138", "generation": "\n    if n % 2 != 0 {\n        return false\n    }\n\n    for i := 2; i <= n/2; i += 2 {\n        if i + (n - i) == n {\n            return true\n        }\n    }\n\n    return false\n}\n\n"}
{"task_id": "Go/139", "generation": "\n    if n == 0 {\n        return 1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n}"}
{"task_id": "Go/140", "generation": "\n\tres := \"\"\n\tcount := 0\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tcount++\n\t\t\tif count == 2 {\n\t\t\t\tres += \"-\"\n\t\t\t\tcount = 0\n\t\t\t} else {\n\t\t\t\tres += \"_\"\n\t\t\t}\n\t\t} else {\n\t\t\tres += string(c)\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn res\n}\n\n"}
{"task_id": "Go/141", "generation": "\n    if strings.Contains(file_name, \"####\") {\n        return \"No\"\n    }\n    if len(file_name) > 10 {\n        return \"No\"\n    }\n    if !strings.Contains(file_name, \".\") {\n        return \"No\"\n    }\n    split_name := strings.Split(file_name, \".\")\n    if len(split_name) != 2 {\n        return \"No\"\n    }\n    if len(split_name[0]) < 1 {\n        return \"No\"\n    }\n    if !strings.Contains(\"txt,exe,dll\", split_name[1]) {\n        return \"No\"\n    }\n    if len(split_name[0]) > 3 {\n        return \"No\"\n    }\n    if !strings.Contains(\"az\", strings.ToLower(split_name[0][:1])) {\n        return \"No\"\n    }\n    return \"Yes\"\n}"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/143", "generation": "\n    words := strings.Fields(sentence)\n    var primeWords []string\n    for _, word := range words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords, word)\n        }\n    }\n    return strings.Join(primeWords, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/144", "generation": "\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    if xNumerator * nDenominator == nNumerator * xDenominator {\n        return true\n    }\n\n    return false\n}"}
{"task_id": "Go/145", "generation": "\n    type pair struct {\n        num int\n        sum int\n    }\n\n    pairs := make([]pair, len(nums))\n    for i, num := range nums {\n        pairs[i] = pair{num, sumDigits(num)}\n    }\n\n    sort.Slice(pairs, func(i, j int) bool {\n        if pairs[i].sum == pairs[j].sum {\n            return pairs[i].num < pairs[j].num\n        }\n        return pairs[i].sum < pairs[j].sum\n    })\n\n    result := make([]int, len(nums))\n    for i, pair := range pairs {\n        result[i] = pair.num\n    }\n\n    return result\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    for num != 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 && (num/10)%2 == 0 && (num%10)%2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\n"}
{"task_id": "Go/147", "generation": "\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i*i - i + 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if a[i] + a[j] % 3 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n    var planets = []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    var result []string\n\n    for _, planet := range planets {\n        if planet == planet1 || planet == planet2 {\n            if planet == planet1 {\n                if planet == \"Mercury\" {\n                    result = append(result, \"Saturn\")\n                } else if planet == \"Venus\" {\n                    result = append(result, \"Uranus\")\n                } else if planet == \"Earth\" {\n                    result = append(result, \"Mars\")\n                } else if planet == \"Mars\" {\n                    result = append(result, \"Jupiter\")\n                } else if planet == \"Jupiter\" {\n                    result = append(result, \"Saturn\")\n                } else if planet == \"Saturn\" {\n                    result = append(result, \"Uranus\")\n                } else if planet == \"Uranus\" {\n                    result = append(result, \"Neptune\")\n                }\n            } else if planet == planet2 {\n                if planet == \"Mercury\" {\n                    result = append(result, \"Venus\")\n                } else if planet == \"Venus\" {\n                    result = append(result, \"Earth\")\n                } else if planet == \"Earth\" {\n                    result = append(result, \"Mars\")\n                } else if planet == \"Mars\" {\n                    result = append(result, \"Jupiter\")\n                } else if planet == \"Jupiter\" {\n                    result = append(result, \"Saturn\")\n                } else if planet == \"Saturn\" {\n                    result = append(result, \"Uranus\")\n                } else if planet == \"Uranus\" {\n                    result = append(result, \"Neptune\")\n                }\n            }\n        }\n    }\n\n    return result\n}"}
{"task_id": "Go/149", "generation": "\n    var res []string\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            res = append(res, s)\n        }\n    }\n    sort.Strings(res)\n    return res\n}"}
{"task_id": "Go/150", "generation": "\n    if n%2 == 0 {\n        return x\n    } else {\n        return y\n    }\n}\n\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num == float64(int(num)) && int(num) % 2 != 0 {\n            sum += int(num) * int(num)\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/152", "generation": "\n    result := make([]int, len(game))\n    for i, v := range game {\n        if v == guess[i] {\n            result[i] = 0\n        } else {\n            result[i] = int(math.Abs(float64(v - guess[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/153", "generation": "\n    var strongestExtension string\n    var strongestStrength float64 = -math.MaxFloat64\n\n    for _, extension := range extensions {\n        var strength float64\n        if extension[0] == 'S' {\n            strength = float64(len(extension) - len(strings.Replace(extension, \"S\", \"\", -1)))\n        } else {\n            strength = float64(len(extension) - len(strings.Replace(extension, \"s\", \"\", -1)))\n        }\n\n        if strength > strongestStrength {\n            strongestStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return class_name + \".\" + strongestExtension\n}"}
{"task_id": "Go/154", "generation": "\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b) {\n            return true\n        }\n        b = b[1:] + string(b[0])\n    }\n    return false\n}"}
{"task_id": "Go/155", "generation": "\n    str := strconv.Itoa(num)\n    evenCount := 0\n    oddCount := 0\n    for _, char := range str {\n        digit, _ := strconv.Atoi(string(char))\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\n"}
{"task_id": "Go/156", "generation": "\n    val := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    syb := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    i := 0\n    roman := \"\"\n    for number > 0 {\n        for i < len(val) {\n            if number >= val[i] {\n                number -= val[i]\n                roman += syb[i]\n            } else {\n                i++\n            }\n        }\n    }\n    return strings.ToLower(roman)\n}"}
{"task_id": "Go/157", "generation": "\n    if a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/158", "generation": "\n    maxUnique := 0\n    maxWord := \"\"\n    for _, word := range words {\n        unique := len(uniqueCharacters(word))\n        if unique > maxUnique {\n            maxUnique = unique\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n\nfunc uniqueCharacters(word string) map[rune]bool {\n    unique := make(map[rune]bool)\n    for _, char := range word {\n        unique[char] = true\n    }\n    return unique\n}\n\n"}
{"task_id": "Go/159", "generation": "\n    if need > remaining {\n        number += remaining\n        remaining = 0\n    } else {\n        number += need\n        remaining -= need\n    }\n    return []int{number, remaining}\n}"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"//\":\n            result = int(math.Floor(float64(result) / float64(operand[i])))\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}"}
{"task_id": "Go/161", "generation": "\n    var result string\n    for i := 0; i < len(s); i++ {\n        if unicode.IsLetter(rune(s[i])) {\n            if unicode.IsLower(rune(s[i])) {\n                result += strings.ToUpper(string(s[i]))\n            } else {\n                result += strings.ToLower(string(s[i]))\n            }\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/162", "generation": "\n    hasher := md5.New()\n    hasher.Write([]byte(text))\n    return fmt.Sprintf(\"%x\", hasher.Sum(nil))\n}"}
{"task_id": "Go/163", "generation": "\n    var res []int\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}"}
