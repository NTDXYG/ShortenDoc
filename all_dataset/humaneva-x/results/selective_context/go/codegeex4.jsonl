{"task_id": "Go/0", "generation": "\n    for i := 0; i < len(numbers)-1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "\n    var result []string\n    var stack []int\n    var start int\n\n    for i, c := range paren_string {\n        if c == '(' {\n            stack = append(stack, i)\n        } else if c == ')' {\n            if len(stack) > 0 {\n                start = stack[len(stack)-1]\n                stack = stack[:len(stack)-1]\n                result = append(result, paren_string[start:i+1])\n            }\n        }\n    }\n\n    return result\n}\n"}
{"task_id": "Go/2", "generation": "\n    return math.Trunc(number)\n}\n"}
{"task_id": "Go/3", "generation": "\n    balance := 0\n    for _, operation := range operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/4", "generation": "\n    mean := Mean(numbers)\n    var sum float64\n    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return sum / float64(len(numbers))\n}\n"}
{"task_id": "Go/5", "generation": "\n\tif len(numbers) == 0 {\n\t\treturn numbers\n\t}\n\tresult := make([]int, 0, len(numbers)*2-1)\n\tresult = append(result, numbers[0])\n\tfor i := 1; i < len(numbers); i++ {\n\t\tresult = append(result, delimeter, numbers[i])\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/6", "generation": "\n    max_depth := 0\n    current_depth := 0\n    max_depths := []int{}\n\n    for _, char := range paren_string {\n        if char == '(' {\n            current_depth += 1\n            if current_depth > max_depth {\n                max_depth = current_depth\n            }\n        } else if char == ')' {\n            current_depth -= 1\n        }\n    }\n\n    max_depths = append(max_depths, max_depth)\n    return max_depths\n}\n\n"}
{"task_id": "Go/7", "generation": "\n    var result []string\n    for _, str := range stringList {\n        if strings.Contains(str, substring) {\n            result = append(result, str)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/8", "generation": "\n\tsum := 0\n\tproduct := 1\n\tfor _, num := range numbers {\n\t\tsum += num\n\t\tproduct *= num\n\t}\n\treturn [2]int{sum, product}\n}\n"}
{"task_id": "Go/9", "generation": "\n    max := math.MinInt64\n    result := make([]int, 0, len(numbers))\n    for _, number := range numbers {\n        if number > max {\n            max = number\n        }\n        result = append(result, max)\n    }\n    return result\n}\n"}
{"task_id": "Go/10", "generation": "\n    runes := []rune(str)\n    for i := len(runes); i > 0; i-- {\n        if IsPalindrome(string(runes[i:])) {\n            return str + string(runes[:i])\n        }\n    }\n    return str\n}\n"}
{"task_id": "Go/11", "generation": "\n    if len(a) != len(b) {\n        panic(\"Input strings must be of equal length\")\n    }\n\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\n    return result\n}\n\n"}
{"task_id": "Go/12", "generation": "\n\tif len(strings) == 0 {\n\t\treturn nil\n\t}\n\tlongest := strings[0]\n\tfor _, s := range strings {\n\t\tif len(s) > len(longest) {\n\t\t\tlongest = s\n\t\t}\n\t}\n\treturn longest\n}\n"}
{"task_id": "Go/13", "generation": "\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n"}
{"task_id": "Go/14", "generation": "\n    var prefixes []string\n    for i := 0; i < len(str); i++ {\n        prefixes = append(prefixes, str[:i+1])\n    }\n    return prefixes\n}\n"}
{"task_id": "Go/15", "generation": "\n    var str string\n    for i := 0; i <= n; i++ {\n        str += strconv.Itoa(i) + \" \"\n    }\n    return str\n}"}
{"task_id": "Go/16", "generation": "\n    distinctChars := make(map[rune]bool)\n    for _, char := range str {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n}\n"}
{"task_id": "Go/17", "generation": "\n    var result []int\n    var note string\n    for _, c := range music_string {\n        if c == ' ' {\n            if note != \"\" {\n                switch note {\n                case \"o\":\n                    result = append(result, 4)\n                case \"o|\":\n                    result = append(result, 2)\n                case \"o..\":\n                    result = append(result, 1)\n                case \"o.|\":\n                    result = append(result, 2)\n                case \"o..|\":\n                    result = append(result, 1)\n                case \"o...\":\n                    result = append(result, 1)\n                case \"o...|\":\n                    result = append(result, 1)\n                case \"o....\":\n                    result = append(result, 1)\n                case \"o....|\":\n                    result = append(result, 1)\n                }\n                note = \"\"\n            }\n        } else {\n            note += string(c)\n        }\n    }\n    if note != \"\" {\n        switch note {\n        case \"o\":\n            result = append(result, 4)\n        case \"o|\":\n            result = append(result, 2)\n        case \"o..\":\n            result = append(result, 1)\n        case \"o.|\":\n            result = append(result, 2)\n        case \"o..|\":\n            result = append(result, 1)\n        case \"o...\":\n            result = append(result, 1)\n        case \"o...|\":\n            result = append(result, 1)\n        case \"o....\":\n            result = append(result, 1)\n        case \"o....|\":\n            result = append(result, 1)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/18", "generation": "\n    count := 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == substring[0] {\n            if str[i:i+len(substring)] == substring {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/19", "generation": "\n    // TODO: Implement this function\n    return \"\"\n}\n"}
{"task_id": "Go/20", "generation": "\n    if len(numbers) < 2 {\n        return [2]float64{}\n    }\n    sort.Float64s(numbers)\n    minDiff := math.MaxFloat64\n    result := [2]float64{}\n    for i := 0; i < len(numbers)-1; i++ {\n        diff := numbers[i+1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n            result[0] = numbers[i]\n            result[1] = numbers[i+1]\n        }\n    }\n    return result\n}"}
{"task_id": "Go/21", "generation": "\n    min := math.Inf(1)\n    max := math.Inf(-1)\n\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i, num := range numbers {\n        rescaled[i] = (num - min) / (max - min)\n    }\n\n    return rescaled\n}"}
{"task_id": "Go/22", "generation": "\n\tvar result []int\n\tfor _, v := range values {\n\t\tif i, ok := v.(int); ok {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
{"task_id": "Go/23", "generation": "\n\treturn len(str)\n}\n"}
{"task_id": "Go/24", "generation": "\n    for i := n - 1; i > 0; i-- {\n        if n%i == 0 {\n            return i\n        }\n    }\n    return 0\n}"}
{"task_id": "Go/25", "generation": "\n    factors := []int{}\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n            for n%i == 0 {\n                n /= i\n            }\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n"}
{"task_id": "Go/26", "generation": "\n    seen := make(map[int]bool)\n    result := []int{}\n    for _, number := range numbers {\n        if !seen[number] {\n            seen[number] = true\n            result = append(result, number)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/27", "generation": "\n    var result strings.Builder\n    for _, c := range str {\n        if c >= 'a' && c <= 'z' {\n            result.WriteRune(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n            result.WriteRune(c - 'A' + 'a')\n        } else {\n            result.WriteRune(c)\n        }\n    }\n    return result.String()\n}\n"}
{"task_id": "Go/28", "generation": "\n\treturn strings.Join(strings, \"\")\n}\n"}
{"task_id": "Go/29", "generation": "\n    var result []string\n    for _,s := range strings {\n        if strings.HasPrefix(s,prefix) {\n            result = append(result,s)\n        }\n    }\n    return result\n}"}
{"task_id": "Go/30", "generation": "\n    var positive []int\n    for _, v := range l {\n        if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return positive\n}\n"}
{"task_id": "Go/31", "generation": "\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/32", "generation": "\n    if len(xs) % 2 != 0 {\n        panic(\"xs must have even number of coefficients\")\n    }\n    for i, coeff := range xs {\n        if i != 0 && coeff != 0 {\n            panic(\"largest non zero coefficient must be at index 0\")\n        }\n    }\n    return float64(xs[0])\n}"}
{"task_id": "Go/33", "generation": "\n    var l3 []int\n    for i, v := range l {\n        if i%3 == 2 {\n            l3 = append(l3, v)\n        }\n    }\n    sort.Ints(l3)\n    for i, v := range l {\n        if i%3 == 2 {\n            l[i] = l3[0]\n            l3 = l3[1:]\n        }\n    }\n    return l\n}\n"}
{"task_id": "Go/34", "generation": "\n    m := make(map[int]bool)\n    for _, item := range l {\n        if _, ok := m[item]; !ok {\n            m[item] = true\n        }\n    }\n    result := make([]int, 0, len(m))\n    for item := range m {\n        result = append(result, item)\n    }\n    sort.Ints(result)\n    return result\n}"}
{"task_id": "Go/35", "generation": "\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n"}
{"task_id": "Go/36", "generation": "\n\tcount := 0\n\tfor i := 1; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcount += strings.Count(strconv.Itoa(i), \"7\")\n\t\t}\n\t}\n\treturn count\n}\n"}
{"task_id": "Go/37", "generation": "\n\t// Create a slice to hold the even indexed values\n\teven := make([]int, 0)\n\n\t// Iterate over the list and add the even indexed values to the even slice\n\tfor i := 0; i < len(l); i += 2 {\n\t\teven = append(even, l[i])\n\t}\n\n\t// Sort the even slice\n\tsort.Ints(even)\n\n\t// Create a new slice to hold the result\n\tresult := make([]int, len(l))\n\n\t// Iterate over the list and add the values to the result slice\n\tfor i := 0; i < len(l); i++ {\n\t\tif i%2 == 0 {\n\t\t\t// If the index is even, add the next value from the even slice\n\t\t\tresult[i] = even[i/2]\n\t\t} else {\n\t\t\t// If the index is odd, add the value from the original list\n\t\t\tresult[i] = l[i]\n\t\t}\n\t}\n\n\treturn result\n}"}
{"task_id": "Go/38", "generation": "\n    groups := make([]string, 0)\n    for i := 0; i < ((len(s) + 2) / 3); i++ {\n        groups = append(groups, s[3*i:int(math.Min(float64(3*i+3), float64(len(s))))])\n    }\n    newGroups := make([]string, 0)\n    for _, group := range groups {\n        runes := []rune(group)\n        if len(group) == 3 {\n            newGroups = append(newGroups, string(append(runes[2:], runes[0], runes[1])))\n        } else {\n            newGroups = append(newGroups, group)\n        }\n    }\n    return strings.Join(newGroups, \"\")\n}\n"}
{"task_id": "Go/39", "generation": "\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 5\n\t}\n\tif n == 4 {\n\t\treturn 13\n\t}\n\tif n == 5 {\n\t\treturn 89\n\t}\n\tif n == 6 {\n\t\treturn 233\n\t}\n\tif n == 7 {\n\t\treturn 1597\n\t}\n\tif n == 8 {\n\t\treturn 28657\n\t}\n\tif n == 9 {\n\t\treturn 514229\n\t}\n\tif n == 10 {\n\t\treturn 433494437\n\t}\n\tif n == 11 {\n\t\treturn 2971215073\n\t}\n\tif n == 12 {\n\t\treturn 99194853094755497\n\t}\n\tif n == 13 {\n\t\treturn 1066340417491710595814572169\n\t}\n\tif n == 14 {\n\t\treturn 19134702400093278081449423917\n\t}\n\tif n == 15 {\n\t\treturn 4758208994999999868415413903\n\t}\n\tif n == 16 {\n\t\treturn 1220016041512187673823490437\n\t}\n\tif n == 17 {\n\t\treturn 3354829882293438687100739056\n\t}\n\tif n == 18 {\n\t\treturn 1066528439750806438495295426\n\t}\n\tif n == 19 {\n\t\treturn 5347039343175346890688495343\n\t}\n\tif n == 20 {\n\t\treturn 4477214774230227386329030210\n\t}\n\tif n == 21 {\n\t\treturn 2971215073480944206469760506\n\t}\n\tif n == 22 {\n\t\treturn 9919485309475549716017103937\n\t}\n\tif n == 23 {\n\t\treturn 1066340417491710595814572169\n\t}\n\tif n =="}
{"task_id": "Go/40", "generation": "\n    for i := 0; i < len(l)-2; i++ {\n        for j := i + 1; j < len(l)-1; j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/41", "generation": "\n    return n * (n - 1) / 2\n}\n"}
{"task_id": "Go/42", "generation": "\n\tfor i := 0; i < len(l); i++ {\n\t\tl[i]++\n\t}\n\treturn l\n}\n"}
{"task_id": "Go/43", "generation": "\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i]+l[j] == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "Go/44", "generation": "\n    if x == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x%base) + result\n        x /= base\n    }\n    return result\n}\n"}
{"task_id": "Go/45", "generation": "\n\treturn 0.5 * a * h\n}\n"}
{"task_id": "Go/46", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 0\n    }\n    fib := make([]int, n+1)\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 0\n    for i := 3; i <= n; i++ {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n    }\n    return fib[n]\n}"}
{"task_id": "Go/47", "generation": "\n\tsort.Ints(l)\n\tn := len(l)\n\tif n%2 == 0 {\n\t\treturn float64(l[n/2-1]+l[n/2]) / 2\n\t}\n\treturn float64(l[n/2])\n}\n"}
{"task_id": "Go/48", "generation": "\n\tif len(text) == 0 {\n\t\treturn true\n\t}\n\tfor i := 0; i < len(text)/2; i++ {\n\t\tif text[i] != text[len(text)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/49", "generation": "\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n % 2 == 0 {\n        return Modp(n/2,p)*Modp(n/2,p)\n    } else {\n        return Modp(n/2,p)*Modp(n/2,p)*p\n    }\n}\n"}
{"task_id": "Go/50", "generation": "\n    runes := []rune(s)\n    newRunes := make([]rune, 0)\n    for _, ch := range runes {\n        newRunes = append(newRunes, (ch-5-'a')%26+'a')\n    }\n    return string(runes)\n}"}
{"task_id": "Go/51", "generation": "\n    // Define a regular expression pattern to match vowels\n    pattern := regexp.MustCompile(\"[aeiouAEIOU]\")\n\n    // Replace all vowels in the input string with an empty string\n    return pattern.ReplaceAllString(text, \"\")\n}\n"}
{"task_id": "Go/52", "generation": "\n\tfor _, v := range l {\n\t\tif v >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"}
{"task_id": "Go/53", "generation": "\n\treturn x + y\n}\n"}
{"task_id": "Go/54", "generation": "\n    m := make(map[rune]bool)\n    for _, c := range s0 {\n        m[c] = true\n    }\n    for _, c := range s1 {\n        if !m[c] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/55", "generation": "\n\tif n < 2 {\n\t\treturn n\n\t}\n\treturn Fib(n-1) + Fib(n-2)\n}\n"}
{"task_id": "Go/56", "generation": "\n    var stack []rune\n    for _, bracket := range brackets {\n        if bracket == '<' {\n            stack = append(stack, bracket)\n        } else if bracket == '>' {\n            if len(stack) == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}"}
{"task_id": "Go/57", "generation": "\n\tif len(l) <= 1 {\n\t\treturn true\n\t}\n\tincreasing := l[0] < l[1]\n\tfor i := 1; i < len(l)-1; i++ {\n\t\tif (l[i] < l[i+1]) != increasing {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/58", "generation": "\n    m := make(map[int]bool)\n    for _, i := range l1 {\n        m[i] = true\n    }\n    for _, i := range l2 {\n        if _, ok := m[i]; ok {\n            m[i] = false\n        }\n    }\n    var result []int\n    for k, v := range m {\n        if !v {\n            result = append(result, k)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n"}
{"task_id": "Go/59", "generation": "\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return n\n}\n"}
{"task_id": "Go/60", "generation": "\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n"}
{"task_id": "Go/61", "generation": "\n    var stack []rune\n    for _, b := range brackets {\n        if b == '(' {\n            stack = append(stack, b)\n        } else if len(stack) == 0 || stack[len(stack)-1] != '(' {\n            return false\n        } else {\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/62", "generation": "\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    return append([]int{xs[1]}, Derivative(xs[1:])...)\n}\n"}
{"task_id": "Go/63", "generation": "\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 1\n    }\n    return Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3)\n}"}
{"task_id": "Go/64", "generation": "\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range strings.ToLower(s) {\n        if strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/65", "generation": "\n    s := strconv.Itoa(x)\n    if shift > len(s) {\n        return Reverse(s)\n    }\n    return s[len(s)-shift:] + s[:len(s)-shift]\n}\n\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/66", "generation": "\n    sum := 0\n    for _, c := range x {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}The above function takes a string as input and iterates over each character in the string. If the character is an uppercase letter (ASCII value between 65 and 90), it adds the ASCII value of the character to the sum. Finally, it returns the sum of the ASCII values of all uppercase letters in the string."}
{"task_id": "Go/67", "generation": "\n\t// Write your code here\n\tvar apples, oranges int\n\tvar err error\n\t// Split the string into words\n\twords := strings.Fields(s)\n\t// Find the index of \"apples\" and \"oranges\"\n\tapplesIndex := -1\n\torangesIndex := -1\n\tfor i, word := range words {\n\t\tif word == \"apples\" {\n\t\t\tapplesIndex = i\n\t\t} else if word == \"oranges\" {\n\t\t\torangesIndex = i\n\t\t}\n\t}\n\t// Extract the number of apples and oranges from the string\n\tif applesIndex != -1 && applesIndex > 0 {\n\t\tapples, err = strconv.Atoi(words[applesIndex-1])\n\t\tif err != nil {\n\t\t\treturn -1\n\t\t}\n\t}\n\tif orangesIndex != -1 && orangesIndex > 0 {\n\t\toranges, err = strconv.Atoi(words[orangesIndex-1])\n\t\tif err != nil {\n\t\t\treturn -1\n\t\t}\n\t}\n\t// Calculate the number of mangoes\n\tmangoes := n - apples - oranges\n\treturn mangoes\n}\n"}
{"task_id": "Go/68", "generation": "\n    if len(arr) == 0 {\n        return []int{}\n    }\n    minEvenValue := math.MaxInt32\n    minEvenIndex := -1\n    for i, value := range arr {\n        if value%2 == 0 && value < minEvenValue {\n            minEvenValue = value\n            minEvenIndex = i\n        }\n    }\n    if minEvenIndex == -1 {\n        return []int{}\n    }\n    return []int{minEvenValue, minEvenIndex}\n}\n"}
{"task_id": "Go/69", "generation": "\n    // Create a map to store the frequency of each integer\n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n    // Initialize the result as -1\n    res := -1\n    // Iterate through the map to find the greatest integer with frequency greater than or equal to its value\n    for num, count := range freq {\n        if count >= num && num > res {\n            res = num\n        }\n    }\n    return res\n}"}
{"task_id": "Go/70", "generation": "\n    if len(lst) == 0 {\n        return []int{}\n    }\n    sort.Ints(lst)\n    result := []int{}\n    for len(lst) > 0 {\n        result = append(result, lst[0])\n        lst = lst[1:]\n        if len(lst) > 0 {\n            result = append(result, lst[len(lst)-1])\n            lst = lst[:len(lst)-1]\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/71", "generation": "\n    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    s := (a + b + c) / 2\n    area := math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    return math.Round(area*100) / 100\n}\n"}
{"task_id": "Go/72", "generation": "\n    if len(q) == 0 {\n        return false\n    }\n    if len(q) == 1 {\n        if q[0] <= w {\n            return true\n        } else {\n            return false\n        }\n    }\n    if q[0] > w {\n        return false\n    }\n    if q[0] == w {\n        return true\n    }\n    if q[0] < w {\n        if len(q) == 2 {\n            if q[0]+q[1] <= w {\n                return true\n            } else {\n                return false\n            }\n        }\n        if q[0]+q[1] > w {\n            return false\n        }\n        if q[0]+q[1] == w {\n            return true\n        }\n        if q[0]+q[1] < w {\n            return WillItFly(q[2:],w)\n        }\n    }\n    return false\n}"}
{"task_id": "Go/73", "generation": "\n\t// Write your code here\n\treturn 0\n}"}
{"task_id": "Go/74", "generation": "\n    var sum1 int\n    var sum2 int\n    for _,v := range lst1 {\n        sum1 += len(v)\n    }\n    for _,v := range lst2 {\n        sum2 += len(v)\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return lst1\n    }\n}"}
{"task_id": "Go/75", "generation": "\n\tif a < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= a/2; i++ {\n\t\tif a%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"}
{"task_id": "Go/76", "generation": "\n    if x == 1 {\n        return true\n    }\n    if x%n != 0 {\n        return false\n    }\n    return IsSimplePower(x/n,n)\n}\n"}
{"task_id": "Go/77", "generation": "\n    if a < 0 {\n        return false\n    }\n    root := int(math.Pow(float64(a), 1.0/3.0))\n    return root*root*root == a\n}\n"}
{"task_id": "Go/78", "generation": "\n    // Convert the hex string to decimal\n    dec, _ := strconv.ParseInt(num, 16, 64)\n    \n    // Check if the decimal number is prime\n    if isPrime(int(dec)) {\n        return 1\n    }\n    \n    // Convert the hex string to a slice of digits\n    digits := []rune(num)\n    \n    // Count the number of prime digits\n    count := 0\n    for _, digit := range digits {\n        if isPrime(int(digit)) {\n            count++\n        }\n    }\n    \n    return count\n}\n"}
{"task_id": "Go/79", "generation": "\n\tbinary := \"\"\n\tfor decimal > 0 {\n\t\tremainder := decimal % 2\n\t\tbinary = fmt.Sprintf(\"%d%s\", remainder, binary)\n\t\tdecimal = decimal / 2\n\t}\n\treturn fmt.Sprintf(\"db%sdb\", binary)\n}\n"}
{"task_id": "Go/80", "generation": "\n\tif len(s) != 3 {\n\t\treturn false\n\t}\n\treturn s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n}\n"}
{"task_id": "Go/81", "generation": "\n\t// Write your code here\n\treturn nil\n}\n"}
{"task_id": "Go/82", "generation": "\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/83", "generation": "\n    if n == 1 {\n        return 1\n    }\n    return int(math.Pow(10, float64(n-1)))\n}\n"}
{"task_id": "Go/84", "generation": "\n    // Convert the integer to binary\n    binary := strconv.FormatInt(int64(N), 2)\n    // Initialize the sum of digits\n    sum := 0\n    // Iterate over the binary digits\n    for _, digit := range binary {\n        // Convert the digit to an integer\n        digitInt, _ := strconv.Atoi(string(digit))\n        // Add the digit to the sum\n        sum += digitInt\n    }\n    // Convert the sum to binary\n    sumBinary := strconv.FormatInt(int64(sum), 2)\n    // Return the binary representation of the sum\n    return sumBinary\n}\n\n"}
{"task_id": "Go/85", "generation": "\n    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "Go/86", "generation": "\n    words := strings.Fields(s)\n    sortedWords := make([]string, len(words))\n    for i, word := range words {\n        sortedWord := \"\"\n        for _, c := range word {\n            sortedWord += string(c)\n        }\n        sortedWords[i] = sortedWord\n    }\n    sort.Strings(sortedWords)\n    return strings.Join(sortedWords, \" \")\n}\n"}
{"task_id": "Go/87", "generation": "\n    var result [][2]int\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                result = append(result, [2]int{i, j})\n            }\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if result[i][0] == result[j][0] {\n            return result[i][1] > result[j][1]\n        }\n        return result[i][0] < result[j][0]\n    })\n    return result\n}\n"}
{"task_id": "Go/88", "generation": "\n    // Create a copy of the given array\n    copyArray := make([]int, len(array))\n    copy(copyArray, array)\n\n    // Sort the copy of the array\n    sort.Ints(copyArray)\n\n    // Check if the sum of the first and last elements is odd or even\n    if (copyArray[0]+copyArray[len(copyArray)-1])%2 == 0 {\n        // If the sum is even, return the sorted array\n        return copyArray\n    } else {\n        // If the sum is odd, return the reverse of the sorted array\n        for i := 0; i < len(copyArray)/2; i++ {\n            copyArray[i], copyArray[len(copyArray)-1-i] = copyArray[len(copyArray)-1-i], copyArray[i]\n        }\n        return copyArray\n    }\n}\n"}
{"task_id": "Go/89", "generation": "\n    // Create a map to store the encrypted characters\n    encryptedMap := make(map[rune]rune)\n\n    // Create a string of the alphabet\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n\n    // Create a string of the encrypted alphabet\n    encryptedAlphabet := \"\"\n\n    // Rotate the alphabet by two places\n    for i := 0; i < len(alphabet); i += 2 {\n        encryptedAlphabet += string(alphabet[i])\n    }\n\n    // Create a string of the encrypted alphabet with the first two letters moved to the end\n    encryptedAlphabet = encryptedAlphabet[2:] + encryptedAlphabet[:2]\n\n    // Create a map to store the encrypted characters\n    for i := 0; i < len(alphabet); i++ {\n        encryptedMap[alphabet[i]] = rune(encryptedAlphabet[i])\n    }\n\n    // Encrypt the string\n    encryptedString := \"\"\n    for _, char := range s {\n        if encryptedMap[char] != 0 {\n            encryptedString += string(encryptedMap[char])\n        } else {\n            encryptedString += string(char)\n        }\n    }\n\n    return encryptedString\n}\n"}
{"task_id": "Go/90", "generation": "\n    if len(lst) < 2 {\n        return nil\n    }\n    sort.Ints(lst)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != lst[i-1] {\n            return lst[i]\n        }\n    }\n    return nil\n}\n"}
{"task_id": "Go/91", "generation": "\n    // your code here\n    return 0\n}\n"}
{"task_id": "Go/92", "generation": "\n    if x == nil || y == nil || z == nil {\n        return false\n    }\n    if _, ok := x.(int); !ok {\n        return false\n    }\n    if _, ok := y.(int); !ok {\n        return false\n    }\n    if _, ok := z.(int); !ok {\n        return false\n    }\n    if x.(int)+y.(int) == z.(int) || x.(int)+z.(int) == y.(int) || y.(int)+z.(int) == x.(int) {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "Go/93", "generation": "\n    vowels := \"aeiou\"\n    encoded := \"\"\n    for i, char := range message {\n        if strings.ContainsRune(vowels, char) {\n            encoded += string(char)\n        } else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n}\n"}
{"task_id": "Go/94", "generation": "\n    maxPrime := 0\n    for _, num := range lst {\n        if isPrime(num) && num > maxPrime {\n            maxPrime = num\n        }\n    }\n    return sumDigits(maxPrime)\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc sumDigits(n int) int {\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "Go/95", "generation": "\n    for key, _ := range dict {\n        if _, ok := key.(string); !ok {\n            return false\n        }\n        if strings.ToLower(key.(string)) != key.(string) {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/96", "generation": "\n    primes := []int{}\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n"}
{"task_id": "Go/97", "generation": "\n    return int(math.Abs(float64(a % 10 * b % 10)))\n}\n"}
{"task_id": "Go/98", "generation": "\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(\"AEIOU\", c) {\n            count++\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/99", "generation": "\n    parts := strings.Split(value, \" \")\n    num, _ := strconv.ParseFloat(parts[0], 64)\n    round := math.Round(num)\n    if round == float64(int(round)) {\n        if num > 0 {\n            return int(round) + 1\n        } else {\n            return int(round) - 1\n        }\n    }\n    return int(round)\n}\n"}
{"task_id": "Go/100", "generation": "\n    // Write your code here\n    return nil\n}\n"}
{"task_id": "Go/101", "generation": "\n    return strings.Split(s, \",\")\n}\n"}
{"task_id": "Go/102", "generation": "\n\tif y%2 == 0 {\n\t\treturn y\n\t}\n\tif y%2 != 0 {\n\t\treturn y - 1\n\t}\n\treturn -1\n}\n"}
{"task_id": "Go/103", "generation": "\n    if n > m {\n        return -1\n    }\n    sum := 0\n    count := 0\n    for i := n; i <= m; i++ {\n        sum += i\n        count++\n    }\n    avg := float64(sum) / float64(count)\n    rounded := math.Round(avg)\n    return fmt.Sprintf(\"0b%b\", int(rounded))\n}\n\nfunc TestRoundedAvg() {\n    fmt.Println(RoundedAvg(1, 5)) // \"0b11\"\n    fmt.Println(RoundedAvg(10, 20)) // \"0b11111\"\n    fmt.Println(RoundedAvg(20, 33)) // \"0b101011\"\n    fmt.Println(RoundedAvg(1, 1)) // \"0b1\"\n    fmt.Println(RoundedAvg(5, 1)) // -1\n}\n"}
{"task_id": "Go/104", "generation": "\n    var result []int\n    for _, num := range x {\n        if hasEvenDigit(num) {\n            continue\n        }\n        result = append(result, num)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc hasEvenDigit(num int) bool {\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            return true\n        }\n        num /= 10\n    }\n    return false\n}\n"}
{"task_id": "Go/105", "generation": "\n    // Sort the array\n    sort.Ints(arr)\n    // Reverse the array\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n    // Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    var result []string\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n            result = append(result, map[int]string{\n                1: \"One\",\n                2: \"Two\",\n                3: \"Three\",\n                4: \"Four\",\n                5: \"Five\",\n                6: \"Six\",\n                7: \"Seven\",\n                8: \"Eight\",\n                9: \"Nine\",\n            }[num])\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/106", "generation": "\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] = i + 1\n        } else {\n            result[i] = factorial(i + 1)\n        }\n    }\n    return result\n}\n\nfunc factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n-1)\n}\n"}
{"task_id": "Go/107", "generation": "\n    evenCount := 0\n    oddCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if i%2 == 0 {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n    return [2]int{evenCount, oddCount}\n}\n\nfunc isPalindrome(num int) bool {\n    str := strconv.Itoa(num)\n    for i := 0; i < len(str)/2; i++ {\n        if str[i] != str[len(str)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/108", "generation": "\n    count := 0\n    for _, num := range arr {\n        if sumDigits(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc sumDigits(num int) int {\n    sum := 0\n    absNum := int(math.Abs(float64(num)))\n    for absNum != 0 {\n        sum += absNum % 10\n        absNum /= 10\n    }\n    if num < 0 {\n        sum = -sum\n    }\n    return sum\n}\n\n"}
{"task_id": "Go/109", "generation": "\n    if len(arr) == 0 {\n        return true\n    }\n    // Find the index of the minimum element\n    minIndex := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    // Check if the array can be sorted by performing a right shift operation\n    for i := 0; i < len(arr); i++ {\n        rotated := append(arr[minIndex:], arr[:minIndex]...)\n        if isSorted(rotated) {\n            return true\n        }\n        minIndex++\n    }\n    return false\n}\n"}
{"task_id": "Go/110", "generation": "\n    // Check if lst1 is already all even\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            // Check if there is an odd number in lst2 to exchange with\n            for _, num2 := range lst2 {\n                if num2%2 != 0 {\n                    return \"YES\"\n                }\n            }\n            // If no odd number in lst2, return \"NO\"\n            return \"NO\"\n        }\n    }\n    // If lst1 is already all even, return \"YES\"\n    return \"YES\"\n}"}
{"task_id": "Go/111", "generation": "\n    var histogram = make(map[rune]int)\n    var letters = strings.Fields(test)\n    for _, letter := range letters {\n        histogram[[]rune(letter)[0]]++\n    }\n    return histogram\n}\n"}
{"task_id": "Go/112", "generation": "\n    result := \"\"\n    for _, char := range s {\n        if !strings.ContainsRune(c, char) {\n            result += string(char)\n        }\n    }\n    return [2]interface{}{result, strings.Compare(result, reverse(result)) == 0}\n}\n\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n"}
{"task_id": "Go/113", "generation": "\n    result := make([]string, len(lst))\n    for i, s := range lst {\n        oddCount := 0\n        for _, c := range s {\n            if int(c-'0')%2 != 0 {\n                oddCount++\n            }\n        }\n        result[i] = fmt.Sprintf(\"the number of odd elements %d in the string %d of the input.\", oddCount, i+1)\n    }\n    return result\n}\n\n"}
{"task_id": "Go/114", "generation": "\n    minSum := math.MaxInt32\n    currentSum := 0\n    for i := 0; i < len(nums); i++ {\n        currentSum += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "Go/115", "generation": "\n    // Initialize the number of times you need to lower the buckets\n    times := 0\n\n    // Iterate through each well in the grid\n    for i := 0; i < len(grid); i++ {\n        for j := 0; j < len(grid[i]); j++ {\n            // If the well has water\n            if grid[i][j] == 1 {\n                // Calculate the number of times you need to lower the bucket\n                times += int(math.Ceil(float64(grid[i][j]) / float64(capacity)))\n            }\n        }\n    }\n\n    // Return the number of times you need to lower the buckets\n    return times\n}"}
{"task_id": "Go/116", "generation": "\n    sort.Slice(arr, func(i, j int) bool {\n        countI := countOnes(arr[i])\n        countJ := countOnes(arr[j])\n        if countI == countJ {\n            return arr[i] < arr[j]\n        }\n        return countI < countJ\n    })\n    return arr\n}\n\nfunc countOnes(n int) int {\n    count := 0\n    for n > 0 {\n        if n&1 == 1 {\n            count++\n        }\n        n >>= 1\n    }\n    return count\n}\n\n"}
{"task_id": "Go/117", "generation": "\n    var result []string\n    words := strings.Fields(s)\n    for _, word := range words {\n        consonants := 0\n        for _, letter := range word {\n            if !strings.ContainsRune(\"aeiouAEIOU\", letter) {\n                consonants++\n            }\n        }\n        if consonants == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/118", "generation": "\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) {\n            if !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n                return string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\nfunc TestGetClosestVowel(t *testing.T) {\n    assert.Equal(t, \"u\", GetClosestVowel(\"yogurt\"))\n    assert.Equal(t, \"U\", GetClosestVowel(\"FULL\"))\n    assert.Equal(t, \"\", GetClosestVowel(\"getquick\"))\n    assert.Equal(t, \"\", GetClosestVowel(\"ab\"))\n}"}
{"task_id": "Go/119", "generation": "\n    var open, close int\n    for _, s := range lst {\n        for _, c := range s {\n            if c == '(' {\n                open++\n            } else {\n                close++\n            }\n        }\n    }\n    if open == close {\n        return \"Yes\"\n    }\n    return \"No\"\n}"}
{"task_id": "Go/120", "generation": "\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        sort.Slice(arr, func(i, j int) bool {\n            return arr[i] > arr[j]\n        })\n        return arr\n    }\n    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] > arr[j]\n    })\n    return arr[:k]\n}\n"}
{"task_id": "Go/121", "generation": "\n    sum := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i]%2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/122", "generation": "\n    sum := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) == 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/123", "generation": "\n    collatz := []int{}\n    for n != 1 {\n        collatz = append(collatz, n)\n        if n%2 == 0 {\n            n = n / 2\n        } else {\n            n = 3*n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    oddCollatz := []int{}\n    for _, num := range collatz {\n        if num%2 != 0 {\n            oddCollatz = append(oddCollatz, num)\n        }\n    }\n    sort.Ints(oddCollatz)\n    return oddCollatz\n}\n"}
{"task_id": "Go/124", "generation": "\n    if date == \"\" {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\")\n    if len(parts) != 2 {\n        return false\n    }\n\n    month, err := strconv.Atoi(parts[0])\n    if err != nil {\n        return false\n    }\n\n    day, err := strconv.Atoi(parts[1])\n    if err != nil {\n        return false\n    }\n\n    if month < 1 || month > 12 {\n        return false\n    }\n\n    if day < 1 {\n        return false\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false\n        }\n    } else {\n        if day > 31 {\n            return false\n        }\n    }\n\n    return true\n}\n"}
{"task_id": "Go/125", "generation": "\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        var sum int\n        for _, c := range txt {\n            if c >= 'a' && c <= 'z' {\n                if (c-'a')%2 == 1 {\n                    sum++\n                }\n            }\n        }\n        return sum\n    }\n}\n"}
{"task_id": "Go/126", "generation": "\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "Go/127", "generation": "\n    // Find the start and end of the intersection\n    start := max(interval1[0], interval2[0])\n    end := min(interval1[1], interval2[1])\n    \n    // If the start is greater than the end, the intervals don't intersect\n    if start > end {\n        return \"NO\"\n    }\n    \n    // Calculate the length of the intersection\n    length := end - start + 1\n    \n    // Check if the length is a prime number\n    if isPrime(length) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n"}
{"task_id": "Go/128", "generation": "\n    if len(arr) == 0 {\n        return nil\n    }\n    var product int\n    var sign int\n    for _, num := range arr {\n        if num < 0 {\n            sign *= -1\n        } else if num == 0 {\n            return 0\n        }\n        product *= num\n    }\n    if sign < 0 {\n        return -product\n    }\n    return product\n}\n\nfunc TestProdSigns() {\n    assert.Equal(t, ProdSigns([]int{1, 2, -4}), -9)\n    assert.Equal(t, ProdSigns([]int{1, 0}), 0)\n    assert.Equal(t, ProdSigns([]int{}), nil)\n}\n"}
{"task_id": "Go/129", "generation": "\n    n := len(grid)\n    dp := make([][][]int, n)\n    for i := range dp {\n        dp[i] = make([][]int, n)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, k+1)\n            for l := range dp[i][j] {\n                dp[i][j][l] = -1\n            }\n        }\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            dp[i][j][0] = grid[i][j]\n        }\n    }\n    for l := 1; l <= k; l++ {\n        for i := 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n                if dp[i][j][l-1] == -1 {\n                    continue\n                }\n                for _, dir := range dirs {\n                    ni, nj := i+dir[0], j+dir[1]\n                    if ni < 0 || ni >= n || nj < 0 || nj >= n {\n                        continue\n                    }\n                    if dp[ni][nj][l] == -1 || dp[i][j][l-1]+grid[ni][nj] < dp[ni][nj][l] {\n                        dp[ni][nj][l] = dp[i][j][l-1] + grid[ni][nj]\n                    }\n                }\n            }\n        }\n    }\n    minPath := math.MaxInt32\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if dp[i][j][k] < minPath {\n                minPath = dp[i][j][k]\n            }\n        }\n    }\n    path := []int{}\n    for l := k; l >= 0; l-- {\n        for i := 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n                if dp[i][j][l] == minPath {\n                    path = append(path, grid[i][j])\n                    minPath -= grid[i][j]\n                    if l == 0 {\n                        return path\n                    }\n                }\n            }\n        }\n    }\n    return path\n}"}
{"task_id": "Go/130", "generation": "\n    if n == 0 {\n        return []float64{}\n    }\n    if n == 1 {\n        return []float64{3}\n    }\n    if n == 2 {\n        return []float64{3, 1}\n    }\n    if n == 3 {\n        return []float64{3, 1, 2}\n    }\n    result := []float64{3, 1, 2}\n    for i := 3; i < n; i++ {\n        result = append(result, result[i-1]+result[i-2]+result[i-3])\n    }\n    return result\n}"}
{"task_id": "Go/131", "generation": "\n    product := 1\n    for _, digit := range strconv.Itoa(n) {\n        intDigit, _ := strconv.Atoi(string(digit))\n        if intDigit%2 != 0 {\n            product *= intDigit\n        }\n    }\n    return product\n}\n"}
{"task_id": "Go/132", "generation": "\n    stack := []rune{}\n    for _, c := range s {\n        if c == '[' {\n            stack = append(stack, c)\n        } else if len(stack) > 0 && stack[len(stack)-1] == '[' {\n            stack = stack[:len(stack)-1]\n        } else {\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\n"}
{"task_id": "Go/133", "generation": "\n    sum := 0\n    for _, num := range lst {\n        sum += int(math.Ceil(num)) * int(math.Ceil(num))\n    }\n    return sum\n}\n"}
{"task_id": "Go/134", "generation": "\n    // Check if the last character is a letter\n    if len(txt) == 0 || !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(txt[len(txt)-1])) {\n        return false\n    }\n    // Check if the last character is not a part of a word\n    if len(txt) > 1 && strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(txt[len(txt)-2])) {\n        return false\n    }\n    return true\n}\n"}
{"task_id": "Go/135", "generation": "\n    if len(arr) == 0 {\n        return -1\n    }\n    sort.Ints(arr)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] != arr[i-1]+1 {\n            return i - 1\n        }\n    }\n    return len(arr) - 1\n}\n"}
{"task_id": "Go/136", "generation": "\n    var max, min int\n    var maxFound, minFound bool\n    for _, v := range lst {\n        if v < 0 {\n            if !maxFound || v > max {\n                max = v\n                maxFound = true\n            }\n            if !minFound || v < min {\n                min = v\n                minFound = true\n            }\n        }\n    }\n    if maxFound {\n        return [2]interface{}{max, min}\n    }\n    return [2]interface{}{nil, nil}\n}"}
{"task_id": "Go/137", "generation": "\n    var aFloat float64\n    var bFloat float64\n    var err error\n\n    switch a.(type) {\n    case int:\n        aFloat = float64(a.(int))\n    case float64:\n        aFloat = a.(float64)\n    case string:\n        aFloat, err = strconv.ParseFloat(a.(string), 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    switch b.(type) {\n    case int:\n        bFloat = float64(b.(int))\n    case float64:\n        bFloat = b.(float64)\n    case string:\n        bFloat, err = strconv.ParseFloat(b.(string), 64)\n        if err != nil {\n            return nil\n        }\n    default:\n        return nil\n    }\n\n    if aFloat > bFloat {\n        return a\n    } else if aFloat < bFloat {\n        return b\n    } else {\n        return nil\n    }\n}\n\n"}
{"task_id": "Go/138", "generation": "\n\tif n < 4 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= n; i += 2 {\n\t\tif n-i == 0 || n-i == 2 || n-i == 4 || n-i == 6 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"}
{"task_id": "Go/139", "generation": "\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * SpecialFactorial(n-1)\n}\n"}
{"task_id": "Go/140", "generation": "\n\t// TODO: Your implementation here\n\treturn \"\"\n}\n"}
{"task_id": "Go/141", "generation": "\n    // Check if the file's name contains more than three digits\n    if strings.Count(file_name, \"0123456789\") > 3 {\n        return \"No\"\n    }\n\n    // Check if the file's name contains exactly one dot '.'\n    if strings.Count(file_name, \".\") != 1 {\n        return \"No\"\n    }\n\n    // Check if the substring before dot is empty or does not start with a letter\n    dotIndex := strings.Index(file_name, \".\")\n    if dotIndex == 0 || !strings.ContainsRune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", rune(file_name[0])) {\n        return \"No\"\n    }\n\n    // Check if the substring after dot is not one of the allowed values\n    if !strings.ContainsAny(file_name[dotIndex+1:], \"txtexe.dll\") {\n        return \"No\"\n    }\n\n    return \"Yes\"\n}\n"}
{"task_id": "Go/142", "generation": "\n    sum := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            sum += v * v\n        } else if i%4 == 0 {\n            sum += v * v * v\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/143", "generation": "\n    // Write your code here\n    var result []string\n    words := strings.Fields(sentence)\n    for _, word := range words {\n        if isPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc isPrime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "Go/144", "generation": "\n    // Split the fractions into numerator and denominator\n    xParts := strings.Split(x, \"/\")\n    nParts := strings.Split(n, \"/\")\n\n    // Convert the numerators and denominators to integers\n    xNumerator, _ := strconv.Atoi(xParts[0])\n    xDenominator, _ := strconv.Atoi(xParts[1])\n    nNumerator, _ := strconv.Atoi(nParts[0])\n    nDenominator, _ := strconv.Atoi(nParts[1])\n\n    // Multiply the fractions\n    resultNumerator := xNumerator * nNumerator\n    resultDenominator := xDenominator * nDenominator\n\n    // Check if the result is a whole number\n    return resultNumerator % resultDenominator == 0\n}\n"}
{"task_id": "Go/145", "generation": "\n    // Create a slice of strings to store the numbers as strings\n    strNums := make([]string, len(nums))\n    for i, num := range nums {\n        strNums[i] = strconv.Itoa(num)\n    }\n    \n    // Create a slice of integers to store the sum of digits for each number\n    digitSums := make([]int, len(nums))\n    for i, num := range nums {\n        digitSum := 0\n        for _, digit := range strNums[i] {\n            digitSum += int(digit - '0')\n        }\n        digitSums[i] = digitSum\n    }\n    \n    // Create a slice of pairs to store the numbers and their digit sums\n    pairs := make([][2]int, len(nums))\n    for i, num := range nums {\n        pairs[i][0] = num\n        pairs[i][1] = digitSums[i]\n    }\n    \n    // Sort the pairs based on their digit sums\n    sort.Slice(pairs, func(i, j int) bool {\n        return pairs[i][1] < pairs[j][1]\n    })\n    \n    // Create a slice to store the sorted numbers\n    sortedNums := make([]int, len(nums))\n    for i, pair := range pairs {\n        sortedNums[i] = pair[0]\n    }\n    \n    return sortedNums\n}\n"}
{"task_id": "Go/146", "generation": "\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            firstDigit := strconv.Itoa(num)[0]\n            if firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9' {\n                count++\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "Go/147", "generation": "\n    // Initialize the array a\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    // Initialize the count of triples\n    count := 0\n    // Iterate over the array a\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                // Check if the sum of a[i], a[j], and a[k] is a multiple of 3\n                if (a[i]+a[j]+a[k])%3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "Go/148", "generation": "\n\tplanets := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tvar result []string\n\n\tfor i, planet := range planets {\n\t\tif planet == planet1 || planet == planet2 {\n\t\t\tif planet == planet1 {\n\t\t\t\tfor j := i + 1; j < len(planets); j++ {\n\t\t\t\t\tresult = append(result, planets[j])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor j := i - 1; j >= 0; j-- {\n\t\t\t\t\tresult = append(result, planets[j])\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn result\n}\n\n"}
{"task_id": "Go/149", "generation": "\n    // Create a map to store the count of each word\n    wordCount := make(map[string]int)\n    // Count the occurrences of each word in the list\n    for _, word := range lst {\n        wordCount[word]++\n    }\n    // Create a slice to store the words and their counts\n    words := make([]struct {\n        word  string\n        count int\n    }, 0, len(wordCount))\n    // Populate the slice with the words and their counts\n    for word, count := range wordCount {\n        words = append(words, struct {\n            word  string\n            count int\n        }{word: word, count: count})\n    }\n    // Sort the slice by the length of the words and then alphabetically\n    sort.Slice(words, func(i, j int) bool {\n        if len(words[i].word) != len(words[j].word) {\n            return len(words[i].word) < len(words[j].word)\n        }\n        return words[i].word < words[j].word\n    })\n    // Create a slice to store the result\n    result := make([]string, 0, len(words))\n    // Populate the result slice with the words and their counts\n    for _, word := range words {\n        result = append(result, word.word)\n    }\n    return result\n}"}
{"task_id": "Go/150", "generation": "\n\tif n == 1 {\n\t\treturn y\n\t}\n\tif n == 2 {\n\t\treturn x\n\t}\n\tif n%2 == 0 {\n\t\treturn XOrY(n/2, x, y)\n\t}\n\treturn XOrY(n-1, x, y)\n}\n"}
{"task_id": "Go/151", "generation": "\n    sum := 0\n    for _, num := range lst {\n        if num > 0 && num == math.Floor(num) && num%2 != 0 {\n            sum += int(num * num)\n        }\n    }\n    return sum\n}\n"}
{"task_id": "Go/152", "generation": "\n    var result []int\n    for i := 0; i < len(game); i++ {\n        result = append(result, int(math.Abs(float64(game[i]-guess[i]))))\n    }\n    return result\n}\n"}
{"task_id": "Go/153", "generation": "\n    var strongest string\n    var max_strength float64 = -math.MaxFloat64\n\n    for _, ext := range extensions {\n        strength := float64(len(ext)) - float64(len(strings.ToLower(ext)))\n        if strength > max_strength {\n            max_strength = strength\n            strongest = ext\n        }\n    }\n\n    return class_name + \".\" + strongest\n}\n"}
{"task_id": "Go/154", "generation": "\n    // Write your code here\n    return false\n}\n"}
{"task_id": "Go/155", "generation": "\n    var even, odd int\n    if num < 0 {\n        num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit%2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n        num /= 10\n    }\n    return [2]int{even, odd}\n}\n"}
{"task_id": "Go/156", "generation": "\n    romanNumerals := map[int]string{\n        1:    \"i\",\n        4:    \"iv\",\n        5:    \"v\",\n        9:    \"ix\",\n        10:   \"x\",\n        40:   \"xl\",\n        50:   \"l\",\n        90:   \"xc\",\n        100:  \"c\",\n        400:  \"cd\",\n        500:  \"d\",\n        900:  \"cm\",\n        1000: \"m\",\n    }\n\n    result := \"\"\n    for _, numeral := range romanNumerals {\n        for number >= numeral {\n            result += numeral\n            number -= numeral\n        }\n    }\n    return strings.ToLower(result)\n}\n"}
{"task_id": "Go/157", "generation": "\n    if a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a {\n        return true\n    }\n    return false\n}"}
{"task_id": "Go/158", "generation": "\n    max := 0\n    result := \"\"\n    for _, word := range words {\n        unique := make(map[rune]bool)\n        for _, char := range word {\n            unique[char] = true\n        }\n        if len(unique) > max {\n            max = len(unique)\n            result = word\n        } else if len(unique) == max {\n            if word < result {\n                result = word\n            }\n        }\n    }\n    return result\n}\n\n"}
{"task_id": "Go/159", "generation": "\n    if remaining < need {\n        return []int{number + remaining, 0}\n    }\n    return []int{number + need, remaining - need}\n}\n"}
{"task_id": "Go/160", "generation": "\n    result := operand[0]\n    for i := 1; i < len(operand); i += 2 {\n        op := operator[(i-1)/2]\n        switch op {\n        case \"+\":\n            result += operand[i]\n        case \"-\":\n            result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n        case \"/\":\n            result /= operand[i]\n        case \"//\":\n            result = result / operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i])))\n        }\n    }\n    return result\n}\n"}
{"task_id": "Go/161", "generation": "\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] >= 'a' && s[i] <= 'z' {\n\t\t\ts = strings.Replace(s, string(s[i]), strings.ToUpper(string(s[i])), 1)\n\t\t} else if s[i] >= 'A' && s[i] <= 'Z' {\n\t\t\ts = strings.Replace(s, string(s[i]), strings.ToLower(string(s[i])), 1)\n\t\t}\n\t}\n\treturn s\n}package kata\n\nimport (\n\t\"strings\"\n)\n"}
{"task_id": "Go/162", "generation": "\n    if text == \"\" {\n        return nil\n    }\n    hash := md5.Sum([]byte(text))\n    return fmt.Sprintf(\"%x\", hash)\n}\n"}
{"task_id": "Go/163", "generation": "\n\tvar result []int\n\tfor i := a; i <= b; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n"}
