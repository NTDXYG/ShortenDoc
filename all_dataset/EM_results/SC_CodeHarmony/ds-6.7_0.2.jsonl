{"task_id": "valid/0", "completion": "\n    # Predefined categories\n    categories = {\n        'Politics': ['politics', 'election', 'president', 'government'],\n        'Sports': ['sport', 'football', 'basketball', 'cricket', 'tennis'],\n        'Technology': ['technology', 'computer', 'software', 'hardware', 'internet'],\n        'Entertainment': ['entertainment', 'movie', 'music', 'book', 'game'],\n        'Business': ['business', 'economy', 'investment', 'finance', 'company']\n    }\n\n    # Convert text to lowercase and split into words\n    text = text.lower().split()\n\n    # Check each word in the text against each category\n    for category, keywords in categories.items():\n        if any(keyword in text for keyword in keywords):\n            return category\n\n    # If no category is found, return 'Uncategorized'\n    return 'Uncategorized'\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Cello', 'Saxophone', 'Clarinet', 'Harp']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        digits = [int(d) for d in str(n)]\n        return n % 5 == 0 and sum(digits) % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove extra spaces\n    while '  ' in text:\n        text = text.replace('  ', ' ')\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(i) for i in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        for key in dictionary:\n            if isinstance(dictionary[key], dict):\n                value = get_nested_dictionary_value(dictionary[key])\n                if value is not None:\n                    return value\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    lower = num - 1\n    while not isPalindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not isPalindrome(upper):\n        upper += 1\n\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    elif abs(num - lower) > abs(num - upper):\n        return upper\n    else:\n        return lower if lower < upper else upper\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_string = base64_bytes.decode('ascii')\n    return base64_string\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key in json_data and json_data[key] == value\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the button table\n    button_table = []\n\n    # Iterate over the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Append the current chunk of buttons to the button table\n        button_table.append(buttons[i:i+num_columns])\n\n    # Return the button table\n    return button_table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    result = []\n    for word in words:\n        result.append(word[:-1] + word[-1].upper())\n    return result\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = abs(arr[l] + arr[r])\n        if sum < min_sum:\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if arr[l] + arr[r] < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    total_votes = 0\n    results = {}\n    for vote in votes:\n        candidate, vote_count = vote\n        if candidate in results:\n            results[candidate] += vote_count\n        else:\n            results[candidate] = vote_count\n        total_votes += vote_count\n\n    for candidate, vote_count in results.items():\n        percentage = (vote_count / total_votes) * 100\n        results[candidate] = round(percentage, 2)\n\n    return results\n\n\nvotes = [(\"A\", 20), (\"B\", 30), (\"C\", 50)]"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, '%d-%b-%Y')\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY\")\n\n    return date.strftime('%B %d %Y')\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.rtf']\n    _, old_extension = os.path.splitext(oldname)\n    _, new_extension = os.path.splitext(newname)\n\n    if old_extension not in allowed_extensions:\n        return False\n\n    if new_extension not in allowed_extensions:\n        return False\n\n    if allowed_type and new_extension != allowed_type:\n        return False\n\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        try:\n            return int(n) % 2 == 0\n        except ValueError:\n            return False\n\n    def process_tuple(t):\n        if isinstance(t, tuple):\n            return tuple(process_tuple(i) for i in t if is_even(i))\n        else:\n            return t if is_even(t) else None\n\n    return process_tuple(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character.lower() == specific_character.lower():\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['generation'].append(generation)\n    histogram_data['accuracy'].append(accs)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.fullmatch(r'\\w{5}', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),\n        re.compile(r'^videos/(?P<video_id>\\d+)/$'),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return pattern\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string_to_concatenate = \"Hello, \"\n    sentence = \"world!\"\n    concatenated_string = string_to_concatenate + sentence\n    return concatenated_string\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if \"price\" in key:\n                price_sum += dict[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = \"/\".join(file_path.split(\"/\")[:-1])\n        file_name = file_path.split(\"/\")[-1]\n        if dir_path in config_files:\n            config_files[dir_path].append(file_name)\n        else:\n            config_files[dir_path] = [file_name]\n    return config_files\n\n\nfile_paths = [\n    \"/etc/nginx/nginx.conf\",\n    \"/etc/nginx/sites-available/example.com\",\n    \"/etc/nginx/sites-enabled/example.com\",\n    \"/etc/ssh/sshd_config\",\n    \"/etc/sysctl.d/example.conf\",\n]\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello, \"\n    phrase = \"World!\"\n    return f\"{string}{phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    special_characters = re.compile('[^A-Za-z0-9 ]')\n    result = []\n    for string in strings:\n        string = special_characters.sub('', string)\n        string = string.capitalize()\n        result.append(string)\n    return result\n\n\nstrings = [\"hello\", \"world\", \"@test\", \"$ingle\", \"double%\", \"triple*\"]"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the stock and prices\n    stock = {\"Coke\": 1.5, \"Sprite\": 1.5, \"Fanta\": 1.5, \"Water\": 1.0, \"Juice\": 2.0}\n\n    # Check if the item is in stock\n    if item not in stock:\n        return \"Item not in stock\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < stock[item]:\n        return \"Not enough money inserted\"\n\n    # Calculate the change\n    change = money_inserted - stock[item]\n\n    # Update the stock\n    stock[item] = 0\n\n    return f\"Here is your {item}. Your change is {change}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_var = 10\n\n    # Validate the value\n    if my_var > 0:\n        print(\"The variable is a positive number.\")\n    elif my_var < 0:\n        print(\"The variable is a negative number.\")\n    else:\n        print(\"The variable is zero.\")\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return \"\".join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r\"\\b\\w[\\w']*\\b\", text)\n    return tokens\n\ntext = \"The quick brown fox jumps over the lazy dog.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7\"\n\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    return {\n        \"Average\": average,\n        \"Minimum\": minimum,\n        \"Maximum\": maximum,\n        \"Occurrences\": occurrences,\n    }\n\n\nnumbers = [3, 7, 10, 21, 21, 21, 14, 28]"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty\")\n    min_value = time_series[0]\n    max_value = time_series[0]\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"The time series contains non-numerical values\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def dict_to_xml_iter(dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                yield from dict_to_xml_iter(value)\n            else:\n                yield key, value\n\n    def make_elem(key, value):\n        elem = Element(key)\n        elem.text = str(value)\n        return elem\n\n    root = Element(\"data\")\n    for key, value in dict_to_xml_iter(dictionary):\n        root.append(make_elem(key, value))\n\n    return tostring(root, encoding=\"unicode\")\n\n\ndictionary = {'name': 'John', 'age': 30, 'city': 'New York'}\nxml_string = dict_to_xml(dictionary)"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    Description:\n    This Discord bot is designed to manage and play music in a server. It provides various features to enhance the user experience.\n\n    Features:\n    1. **Music Playback**: The bot can play music from various sources such as YouTube, SoundCloud, and more. It also supports playlists and queues.\n    2. **Server Management**: The bot can manage the server settings, including setting up channels for music playback, managing roles, and more.\n    3. **Personal Playlists**: Users can create and manage their personal playlists. They can add songs, remove songs, and reorder songs.\n    4. **Command Categories**: The bot has a variety of commands, categorized into different sections. Each category provides a list of commands and a brief description.\n\n    Web App:\n    In addition to the Discord bot, we also provide a web application for managing personal playlists and server settings. This web app allows users to easily add songs to their playlists, change server settings, and more.\n\n    Commands:\n    {mapping}\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(abs(n))\n    if n == 0:\n        return '0'\n    else:\n        ternary = ''\n        while n > 0:\n            ternary = str(n % 3) + ternary\n            n = n // 3\n        return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age <= 12:\n        return \"Child\"\n    elif 13 <= age <= 19:\n        return \"Teen\"\n    elif 20 <= age <= 59:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade > 100 or numerical_grade < 0:\n        return \"Invalid numerical grade\"\n\n    letter_grade = \"A\" if numerical_grade >= 90 else \\\n                   \"B\" if numerical_grade >= 80 else \\\n                   \"C\" if numerical_grade >= 70 else \\\n                   \"D\" if numerical_grade >= 60 else \"F\"\n\n    gpa = 4.0 if letter_grade == \"A\" else \\\n          3.0 if letter_grade == \"B\" else \\\n          2.0 if letter_grade == \"C\" else \\\n          1.0 if letter_grade == \"D\" else 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        count = 0\n        for letter in palindrome:\n            if letter in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n    s = s.replace(' ', '')\n    s = s.lower()\n    return s\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the sum of elements\n    sum_set = set()\n\n    # Initialize the sum of elements\n    sum_elements = 0\n\n    # Traverse through the given array\n    for num in arr:\n\n        # Add current element to sum\n        sum_elements += num\n\n        # Return True if current sum is 0 or it is already present in the set\n        if sum_elements == 0 or sum_elements in sum_set:\n            return True\n\n        # Insert sum_elements into the set\n        sum_set.add(sum_elements)\n\n    # Return False if no pair found\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    from operator import itemgetter\n\n    def extract_version_number(version):\n        return int(version.split('_')[0].split('X')[0])\n\n    def extract_date_time(version):\n        return version.split('_')[1]\n\n    def compare_versions(version1, version2):\n        if extract_version_number(version1) > extract_version_number(version2):\n            return 1\n        elif extract_version_number(version1) < extract_version_number(version2):\n            return -1\n        else:\n            if extract_date_time(version1) > extract_date_time(version2):\n                return 1\n            elif extract_date_time(version1) < extract_date_time(version2):\n                return -1\n            else:\n                return 0\n\n    latest_versions = {}\n    for dependency in dependencies:\n        package, version = itemgetter(0, 1)(dependency)\n        if package in latest_versions:\n            if compare_versions(version, latest_versions[package]) > 0:\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n\n    return latest_versions\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        cause_split = cause.split(\" \")\n        action = cause_split[0]\n        if action in causes_dict:\n            causes_dict[action].append(\" \".join(cause_split[1:]))\n        else:\n            causes_dict[action] = [\" \".join(cause_split[1:])]\n    return causes_dict\n\n\ncauses = [\"killed by fire\", \"drowned in lake\", \"stabbed to death\", \"crushed by a falling tree\", \"poisoned by snake\", \"got into a car accident\", \"burned alive\", \"suffocated by a book\", \"got stabbed by a ghost\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and integer respectively.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n-1, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return all(digit == digits[0] for digit in digits)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-h\", \"Show this help message\"), (\"-v\", \"Verbose mode\"), (\"-o\", \"Output file\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\nsequence = \"Please find the number occurrences this string\"\nsubsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero\"\n    else:\n        return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the electron count\n    electron_count = 0\n\n    # Calculate the number of electrons based on the grid energies\n    for energy in grid_energies:\n        electron_count += energy / 1000\n\n    # Adjust the number of electrons based on the doping levels\n    for ado in ados:\n        if ado > 0:\n            electron_count *= (1 + ado)\n        else:\n            electron_count *= (1 - ado)\n\n    # Adjust the number of electrons based on the dos grid size\n    electron_count *= dos_grid_size\n\n    return electron_count\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    temp = [0] * n\n    mid = n // 2\n    even_index = n % 2 == 0\n    for i in range(mid):\n        temp[i * 2] = arr[i]\n        temp[i * 2 + 1] = arr[mid + i]\n    if even_index:\n        temp[-1] = arr[-1]\n    else:\n        temp[-1] = arr[-2]\n        temp[-2] = arr[-1]\n    return temp\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sub = lst[i:j]\n            sublists.append(sub)\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='committeemember',\n                name='field_name',\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the forecast period\n    forecast_period = math.ceil(0.01 * len(df))\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for digit in reversed(n_str):\n        temp = int(digit)*2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return ''.join(reversed(result))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (2.0, 2.0, 2.0),\n        \"preset3\": (3.0, 3.0, 3.0),\n        \"preset4\": (4.0, 4.0, 4.0),\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"The quiz allows multiple answers.\")\n    else:\n        print(\"The quiz does not allow multiple answers.\")\n\n    if zoom_level == \"auto\":\n        print(\"The zoom level is set to auto.\")\n    elif zoom_level == \"fit\":\n        print(\"The zoom level is set to fit.\")\n    elif zoom_level == \"custom\":\n        print(\"The zoom level is set to custom.\")\n    else:\n        print(\"Invalid zoom level.\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return all(c.isalpha() for c in s)\n\n    def merge(a, b, path=None):\n        if path is None:\n            path = []\n        result = {}\n        for k, v in a.items():\n            if is_alpha(k):\n                result[k] = v\n        for k, v in b.items():\n            if is_alpha(k):\n                if k in result:\n                    if isinstance(result[k], dict) and isinstance(v, dict):\n                        result[k] = merge(result[k], v, path + [k])\n                    else:\n                        result[k] = v\n                else:\n                    result[k] = v\n        return result\n\n    def sort_dict(d):\n        return {k: v if not isinstance(v, dict) else sort_dict(v) for k, v in sorted(d.items())}\n\n    merged = merge(a, b)\n    return sort_dict(merged)\n\n\na = {'a 1': 1, 'b 2': 2, 'nested': {'x 5': 5, '6': 6}}\nb = {'c 3': 3, 'd 4': 4, 'nestedy': 7, 'z 8': 8}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"The dictionary is empty\"\n    except TypeError:\n        return \"The input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return gcd(x, 10) == 1 and x % 5 == 0 and sqrt(x) % 1 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
