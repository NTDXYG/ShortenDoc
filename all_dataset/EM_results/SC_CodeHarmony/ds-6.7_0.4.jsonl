{"task_id": "valid/0", "completion": "\n    if \"dog\" in text and \"cat\" in text:\n        return \"dog and cat\"\n    elif \"dog\" in text:\n        return \"dog\"\n    elif \"cat\" in text:\n        return \"cat\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort()\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Cello', 'Saxophone', 'Clarinet', 'Harp']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(i) for i in str(n)) % 3 == 0:\n        return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON: {0}\".format(e))\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n\n    # Remove extra whitespace between words\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Convert to lowercase\n    text = text.lower()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    layer_sums = [sum(sum(layer) for layer in array)]\n    return layer_sums\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name the nested dictionary\" in dictionary:\n        return dictionary[\"name the nested dictionary\"]\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num + 1\n    str_num = str(num)\n    length = len(str_num)\n    half = length // 2\n    left = int(str_num[:half])\n    right = int(str_num[half:])\n    candidate_palindrome = int(str(left) + str(right)[::-1])\n    if candidate_palindrome < num:\n        if length % 2 == 0:\n            left += 1\n        else:\n            left += 1\n            right = left // 10\n        candidate_palindrome = int(str(left) + str(right)[::-1])\n    return candidate_palindrome\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    if key in json_data:\n        return json_data[key] == value\n    else:\n        return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table\n    table = []\n\n    # Calculate the number of rows based on the number of buttons and columns\n    num_rows = (len(buttons) + num_columns - 1) // num_columns\n\n    # Loop through the rows\n    for i in range(num_rows):\n        # Initialize an empty list for the current row\n        row = []\n\n        # Loop through the columns\n        for j in range(num_columns):\n            # Calculate the index of the button in the list\n            index = i * num_columns + j\n\n            # If the index is within the range of the buttons, add the button to the row\n            if index < len(buttons):\n                row.append(buttons[index])\n\n        # Add the row to the table\n        table.append(row)\n\n    # Return the table\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    result = []\n    for word in words:\n        result.append(word[:-1] + word[-1].upper())\n    return result\n"}
{"task_id": "valid/36", "completion": "\n    sum = 0\n    for i in arr:\n        if isinstance(i, (int, float)):\n            sum += i\n        else:\n            print(f\"Invalid value: {i}\")\n    return sum\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data['neighborhoods']\n    sorted_neighborhoods = sorted([neighborhood['name'] for neighborhood in neighborhoods])\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n\narr = [1, 60, -10, 70, -80, 85]\nn = len(arr)"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Calculate the total number of votes\n    total_votes = sum(votes)\n\n    # Iterate over the votes list\n    for vote in votes:\n        # Extract the candidate name and the number of votes\n        candidate_name, vote_count = vote\n\n        # Calculate the percentage of votes for the candidate\n        vote_percentage = round((vote_count / total_votes) * 100, 2)\n\n        # Add the results to the dictionary\n        results[candidate_name] = {\"votes\": vote_count, \"percentage\": vote_percentage}\n\n    # Return the results dictionary\n    return results\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n        return date.strftime('%B %d, %Y')\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YYYY\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_types = ['txt', 'doc', 'pdf', 'jpeg', 'png']\n    if newname.split('.')[-1] in allowed_types:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        try:\n            return int(n) % 2 == 0\n        except ValueError:\n            return False\n\n    def remove_uneven_from_list(lst):\n        if isinstance(lst, list):\n            return [remove_uneven_from_list(item) for item in lst if is_even(item)]\n        elif isinstance(lst, tuple):\n            return tuple(remove_uneven_from_list(item) for item in lst if is_even(item))\n        else:\n            return lst\n\n    return remove_uneven_from_list(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    # histogram_data.sort(key=lambda x: x[\"accuracy\"])\n    # return histogram_data\n\n    histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    histogram_data = sorted(histogram_data, key=lambda x: x[\"accuracy\"])\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.fullmatch(r'\\w{5}', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Iterate over the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # Otherwise, add the number to the dictionary with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Return the dictionary\n    return count_dict\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        (r'^videos/$', 'list_videos'),\n        (r'^videos/(?P<video_id>\\d+)/$', 'video_detail'),\n    ]\n\n    for pattern, view in urlpatterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string_to_concatenate = \"Hello, \"\n    sentence = \"world!\"\n    concatenated_string = string_to_concatenate + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if \"price\" in key:\n                price_sum += dict[key]\n    return price_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return \"api_advisor_view\"\n    elif request_method == \"POST\":\n        return \"api_advisor_create\"\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = os.path.dirname(file_path)\n        base_name = os.path.basename(file_path)\n        if dir_path not in config_files:\n            config_files[dir_path] = []\n        config_files[dir_path].append(base_name)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    # convert the timestamps to datetime objects\n    from datetime import datetime, timedelta\n    start_time = datetime.strptime(str(timeStart), \"%S\")\n    end_time = datetime.strptime(str(timeEnd), \"%S\")\n\n    # calculate the difference\n    time_diff = end_time - start_time\n\n    # return the difference in seconds\n    return time_diff.total_seconds()\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"WHITE\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello, \"\n    phrase = \"World!\"\n    return f\"{string}{phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # Capitalize the first letter of each word\n        string = ' '.join([word.capitalize() for word in string.split(' ')])\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n\n<html>\n<body>\n<b>Bold text 1</b>\n<p>Normal text</p>\n<b>Bold text 2</b>\n</body>\n</html>\n\"\"\"\n"}
{"task_id": "valid/73", "completion": "\n    # prices of items\n    prices = {\"cola\": 1.0, \"chips\": 0.5, \"candy\": 0.65}\n\n    # stock of items\n    stock = {\"cola\": 10, \"chips\": 10, \"candy\": 10}\n\n    # check if item is in stock\n    if item not in stock:\n        return \"Item not available\"\n\n    # check if enough stock\n    if stock[item] <= 0:\n        return \"Item out of stock\"\n\n    # check if enough money inserted\n    if money_inserted < prices[item]:\n        return \"Not enough money inserted\"\n\n    # calculate change\n    change = money_inserted - prices[item]\n\n    # update stock\n    stock[item] -= 1\n\n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n\n    x = [1, 2, 3, 4, 0, 0, 0, 5, 6]\n    plt.stem(x)\n    plt.show()\n\n    # Your code here\n    non_zero_indices = [i for i, x in enumerate(x) if x != 0]\n    return non_zero_indices\n\n"}
{"task_id": "valid/78", "completion": "\n    def assign_value(value):\n        nonlocal assigned_value\n        assigned_value = value\n        return assigned_value\n\n    def validate(value):\n        if value == assigned_value:\n            return True\n        else:\n            return False\n\n    assigned_value = None\n    return assign_value, validate\n\n\nassign_value, validate = assign_and_validate()\nassign_value(10)"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return \"\".join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r\"\\b\\w[\\w']*\\b\", text)\n    return tokens\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    print(\"Numbers divisible by both 3 and 7: \", divisible_numbers)\n\n    if divisible_numbers:\n        print(\"Maximum value: \", max(divisible_numbers))\n        print(\"Minimum value: \", min(divisible_numbers))\n\n        unique_numbers = set(divisible_numbers)\n        for num in unique_numbers:\n            print(f\"Number {num} occurs {divisible_numbers.count(num)} times\")\n    else:\n        print(\"No numbers divisible by both 3 and 7\")\n\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += (1 / math.factorial(i))\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty\")\n    min_value = min(time_series)\n    max_value = max(time_series)\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def dict_to_xml_iter(dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                yield from (f'<{key}>', dict_to_xml_iter(value), f'</{key}>')\n            else:\n                yield from (f'<{key}>{value}</{key}>')\n\n    root = Element('data')\n    for pair in dict_to_xml_iter(dictionary):\n        if len(pair) == 3:\n            tag, sub_tree, end_tag = pair\n            elem = Element(tag)\n            elem.text = sub_tree\n            root.append(elem)\n        else:\n            root.text = pair\n    return tostring(root, encoding='unicode')\n\n\ndictionary = {'name': 'John', 'age': 30, 'city': 'New York'}\nxml_string = dict_to_xml(dictionary)"}
{"task_id": "valid/92", "completion": "\n    # Initialize pointers for the top right corner\n    row = 0\n    col = len(matrix[0]) - 1\n\n    # While the pointers are within the matrix boundaries\n    while row < len(matrix) and col >= 0:\n        # If the target is found, return True\n        if matrix[row][col] == target:\n            return True\n        # If the target is less than the current value, move left\n        elif matrix[row][col] > target:\n            col -= 1\n        # If the target is greater than the current value, move down\n        else:\n            row += 1\n    # If the target is not found, return False\n    return False\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    avg_odd = sum_odd / count_odd\n    return sum_odd, avg_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n - 1]\n\n\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n"}
{"task_id": "valid/97", "completion": "\n\n    **Discord Music Bot**\n\n    **Features:**\n\n    **1. Music Playback:** The bot can play music from various sources, including YouTube, SoundCloud, and more. It can also manage a server's queue and playlists.\n\n    **2. Personal Playlists:** Users can create and manage their own playlists. They can add songs to their playlists, remove songs, and even share them with other users.\n\n    **3. Server Settings:** Server administrators can manage the bot's settings, including the music volume, the maximum queue length, and more.\n\n    **4. Command Categories:** The bot has a variety of commands, organized into categories for easy navigation. Each category provides a brief description of its commands and how to use them.\n\n    **5. Web App:** A companion web app is available for managing the bot and its features. It provides a user-friendly interface for managing playlists, managing server settings, and more.\n\n    **Commands:**\n\n    {mapping}\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n < 3:\n        return str(n)\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"kid\"\n    elif 18 <= age < 30:\n        return \"young adult\"\n    elif 30 <= age < 50:\n        return \"adult\"\n    elif 50 <= age < 65:\n        return \"middle-aged adult\"\n    else:\n        return \"senior adult\"\n\n"}
{"task_id": "valid/101", "completion": "\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n    gpa = float(numerical_grade) / 10\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowels_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowels_count = 0\n        for char in palindrome:\n            if char in vowels:\n                vowels_count += 1\n        vowels_count_dict[palindrome] = vowels_count\n\n    return vowels_count_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    # 1. If the string is empty, return \"Empty String\"\n    if s == \"\":\n        return \"Empty String\"\n\n    # 2. If the string is a palindrome, return \"Palindrome\"\n    if s == s[::-1]:\n        return \"Palindrome\"\n\n    # 3. If the string is a number, return the number plus 1\n    if s.isdigit():\n        return str(int(s) + 1)\n\n    # 4. If the string is a mix of letters and numbers, return the string in uppercase\n    if s.isalpha():\n        return s.upper()\n\n    # 5. If the string is a mix of letters and special characters, return the string in lowercase\n    if s.islower() or s.isupper():\n        return s.lower()\n\n    # 6. If the string is a mix of letters, numbers and special characters, return the string with all letters replaced with 'X'\n    if s.isalnum():\n        return s.replace(s, 'X')\n\n    # 7. If the string is a mix of letters, numbers, special characters and spaces, return the string with all letters replaced with 'X' and all spaces replaced with '-'\n    if s.isspace():\n        return s.replace(s, '-')\n\n    # 8. If the string is a mix of letters, numbers, special characters, spaces and punctuation, return the string with all letters replaced with 'X' and all spaces replaced with '-' and all punctuation replaced with '!'\n    else:\n        return s.replace(s, 'X').replace(' ', '-').replace(',', 'X')\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(arr[i])\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    import re\n\n    def extract_version(version_string):\n        match = re.search(r'\\d+', version_string)\n        return int(match.group()) if match else 0\n\n    latest_versions = {}\n\n    for dependency in dependencies:\n        package_name, version_string = dependency\n\n        if package_name in latest_versions:\n            if extract_version(version_string) > extract_version(latest_versions[package_name]):\n                latest_versions[package_name] = version_string\n        else:\n            latest_versions[package_name] = version_string\n\n    return latest_versions\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        cause = cause.split(\" \")\n        action = cause[0]\n        result = cause[1]\n        the_action = cause[2]\n        what_the_person_was = cause[3]\n        the_unfortunate_outcome = cause[4]\n\n        if action not in causes_dict:\n            causes_dict[action] = []\n        causes_dict[action].append({\n            \"result\": result,\n            \"the_action\": the_action,\n            \"what_the_person_was\": what_the_person_was,\n            \"the_unfortunate_outcome\": the_unfortunate_outcome\n        })\n    return causes_dict\n\n\ncauses = [\"killed by fire in a tree\", \"drowned by a lake\", \"stabbed to death\", \"got into a car and hit the brakes\", \"got stuck in a tree\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Both inputs should be list and integer respectively\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please enter a positive integer\")\n        return\n    if current_num == n:\n        return\n    print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    else:\n        if s[0] in vowels:\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\nsequence = \"Please find the number occurrences the designated specific_subsequence in considerationstring\"\nsubsequence = \"sequence\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero\"\n    else:\n        return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    num_dos_points = len(grid_energies)\n    dos_grid = [0] * num_dos_points\n\n    # Calculate DOS\n    for i in range(num_dos_points):\n        energy = grid_energies[i]\n        dos_grid[i] = calculate_dos(energy, ados, dope)\n\n    # Calculate number of electrons\n    for i in range(num_dos_points):\n        num_electrons += dos_grid[i] * (dos_grid_size / num_dos_points)\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if i + 1 < len(arr):\n            if arr[i + 1] - arr[i] > arr[i] - arr[i - 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            i += 2\n        else:\n            break\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return fruit_list\n\nfruit_list = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n\n    # Calculate the forecast period\n    forecast_period = math.ceil(0.01 * dataset_length)\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for digit in reversed(n_str):\n        temp = int(digit)*2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return ''.join(reversed(result))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (2.0, 2.0, 2.0),\n        \"preset3\": (3.0, 3.0, 3.0),\n        \"preset4\": (4.0, 4.0, 4.0),\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Multiple answers are allowed\")\n    else:\n        print(\"Multiple answers are not allowed\")\n\n    if zoom_level > 0:\n        print(f\"Zoom level is set to {zoom_level}\")\n    else:\n        print(\"Zoom level is not set\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key, value in a.items():\n        if isinstance(value, dict):\n            if key in b and isinstance(b[key], dict):\n                merged[key] = merge_objects(value, b[key])\n            else:\n                merged[key] = value\n        elif key in b and not isinstance(b[key], dict):\n            merged[key] = b[key]\n        else:\n            merged[key] = value\n\n    for key, value in b.items():\n        if key not in merged and not isinstance(value, dict):\n            merged[key] = value\n\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'nested': {'x': 5, 'y': 6}}\nb = {'bc': 3, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"The dictionary is empty\"\n    except TypeError:\n        return \"The input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return \"\"\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
