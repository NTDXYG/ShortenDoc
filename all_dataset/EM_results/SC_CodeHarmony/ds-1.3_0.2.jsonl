{"task_id": "valid/0", "completion": "\n    # Define the categories\n    categories = {\n        \"sports\": [\"football\", \"basketball\", \"golf\", \"swimming\", \"hockey\"],\n        \"news\": [\"business\", \"entertainment\", \"sports\", \"tech\"],\n        \"weather\": [\"temperature\", \"humidity\", \"pressure\", \"wind\"],\n    }\n\n    # Initialize the classification\n    classification = {\n        \"category\": None,\n        \"subcategory\": None,\n    }\n\n    # Split the text into words\n    words = text.split()\n\n    # Classify the text\n    for category, subcategories in categories.items():\n        if any(word.lower() in subcategory for subcategory in subcategories):\n            classification[\"category\"] = category\n            classification[\"subcategory\"] = [subcategory for subcategory in subcategories if word.lower() in subcategory][0]\n            break\n\n    return classification\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        print(\"Invalid JSON string\")\n        return None\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    digits_sum = sum(int(digit) for digit in str(n))\n\n    return n % 5 == 0 and digits_sum % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return \"n should be greater than or equal to base\"\n\n    result = 0\n    while n >= base:\n        n /= base\n        result += 1\n\n    return result\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%d %b %Y')\n    result_date = date_object + timedelta(days=days)\n    return result_date.strftime('%d %b %Y')\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    # Convert to lower case\n    text = text.lower()\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'\\b' + word1 + r'\\b' + '|' + r'\\b' + word2 + r'\\b', text) is not None\n"}
{"task_id": "valid/15", "completion": "\n    def sum_layer(layer):\n        return sum(layer)\n\n    return [sum_layer(layer) for layer in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        elif 'expandtab' in line:\n            settings['expandtab'] = line.split('=')[1].lower() == 'true'\n        elif 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get('name', None)\n\n"}
{"task_id": "valid/23", "completion": "\n    def convert(struct):\n        if isinstance(struct, dict):\n            return {k: convert(v) for k, v in struct.items()}\n        elif isinstance(struct, list):\n            return [convert(v) for v in struct]\n        else:\n            return struct\n\n    return convert(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def previous_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    elif num % 10 == 0:\n        return previous_palindrome(num)\n    elif num % 10 >= 5:\n        return next_palindrome(num)\n    else:\n        return previous_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode('utf-8'))\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        if isinstance(json_data, str):\n            json_data = json.loads(json_data)\n        return key in json_data and json_data[key] == value\n    except (TypeError, ValueError):\n        return False\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    root = tk.Tk()\n    table = tk.Frame(root)\n\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        tk.Button(table, text=button).grid(row=row, column=col)\n\n    root.mainloop()\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] not in alphabet or s[i+1] not in alphabet[alphabet.index(s[i])+1:]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in re.findall(r'\\d+', ts)]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    def last_to_upper(word):\n        if word[-1].isalpha():\n            return word[:-1] + word[-1].upper()\n        else:\n            return word\n\n    return [last_to_upper(word) for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    valid_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if arr == valid_arr:\n        return sum(arr)\n    else:\n        return \"Invalid array\"\n"}
{"task_id": "valid/37", "completion": "\n\n    # Load the JSON data\n    data = json.loads(json_data)\n\n    # Sort the neighborhoods\n    sorted_neighborhoods = sorted(neighborhood['name'] for neighborhood in data)\n\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the total number of votes is 100\n    if sum(votes[i][1] for i in range(len(votes))) != 100:\n        return \"Error: Total number of votes must be 100\"\n\n    # Create a dictionary to store the votes\n    votes_dict = {}\n    for vote in votes:\n        if vote[0] in votes_dict:\n            votes_dict[vote[0]] += vote[1]\n        else:\n            votes_dict[vote[0]] = vote[1]\n\n    # Calculate the percentage votes\n    for candidate in votes_dict:\n        votes_dict[candidate] = round(votes_dict[candidate] / sum(votes_dict.values()) * 100, 2)\n\n    # Sort the votes by vote count in descending order\n    sorted_votes = sorted(votes_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # Print the results\n    for i in range(len(sorted_votes)):\n        print(f\"{sorted_votes[i][0]}: {sorted_votes[i][1]}%\")\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string.split(\"-\")) != 3:\n            raise ValueError\n        day, month, year = map(int, date_string.split(\"-\"))\n        if not (1 <= day <= 31 and 1 <= month <= 12 and 1 <= year <= 9999):\n            raise ValueError\n        date_object = datetime.strptime(date_string, '%d-%m-%Y')\n        return date_object.strftime('%B %d, %Y')\n    except ValueError:\n        return \"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\"\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx', 'png', 'jpg', 'jpeg', 'gif', 'mp3', 'mp4', 'avi', 'mov', 'zip', 'rar']\n\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_numeric_even(s):\n        return is_numeric(s) and is_even(int(s))\n\n    def is_tuple(n):\n        return isinstance(n, tuple)\n\n    def remove_uneven_helper(lst):\n        new_lst = []\n        for i in lst:\n            if is_tuple(i):\n                new_lst.append(remove_uneven_helper(i))\n            elif is_string_numeric_even(i):\n                new_lst.append(i)\n        return tuple(new_lst)\n\n    return remove_uneven_helper(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = int(input(\"Enter the number of hours: \"))\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.lower().count(specific_character.lower())\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.append(accs)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'^\\w{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) > 1:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = []\n    for i in range(len(arr)):\n        temp = []\n        for j in range(len(arr[i])):\n            count = 0\n            for k in range(len(arr)):\n                if arr[i][j] == arr[k][j]:\n                    count += 1\n            temp.append(count)\n        result.append(temp)\n    return result\n"}
{"task_id": "valid/50", "completion": "\n\n    # URL pattern for the home page\n    urlpatterns = [\n        path('', views.home, name='home'),\n\n        # URL pattern for the video page\n        path('video/<int:video_id>/', views.video, name='video'),\n\n        # URL pattern for the results page\n        path('results/', views.results, name='results'),\n\n        # URL pattern for the login page\n        path('login/', views.login_view, name='login'),\n\n        # URL pattern for the signup page\n        path('signup/', views.signup, name='signup'),\n\n        # URL pattern for the logout page\n        path('logout/', views.logout_view, name='logout'),\n\n        # URL pattern for the upload page\n        path('upload/', views.upload, name='upload'),\n\n        # URL pattern for the playlist page\n        path('playlist/', views.playlist, name='playlist'),\n\n        # URL pattern for the playlist video page\n        path('playlist/video/<int:video_id>/', views.playlist_video, name='playlist_video'),\n\n        # URL pattern for the playlist edit page\n        path('playlist/edit/<int:video_id>/', views.playlist_edit, name='playlist_edit'),\n\n        # URL pattern for the playlist delete page\n        path('playlist/delete/<int:video_id>/', views.playlist_delete, name='playlist_delete'),\n\n        # URL pattern for the playlist add video page\n        path('playlist/add_video/', views.playlist_add_video, name='playlist_add_video'),\n\n        # URL pattern for the playlist add video page\n        path('playlist/add_video/<int:video_id>/', views.playlist_add_video, name='playlist_add_video'),\n\n        # URL pattern for the playlist add video page\n        path('playlist/add_video/<int:video_id>/', views.playlist_add_video, name='"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" World\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if \"price\" in key:\n                total_sum += float(dictionary[key])\n    return total_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in list1]\n    return intersection, list2\n"}
{"task_id": "valid/56", "completion": "\n    def api_advisor_view(request):\n        if request_method == 'GET':\n            return api_advisor_view_get(request)\n        elif request_method == 'POST':\n            return api_advisor_view_post(request)\n        else:\n            return \"Invalid request method\"\n\n    def api_advisor_view_get(request):\n        return \"Handling GET request\"\n\n    def api_advisor_view_post(request):\n        return \"Handling POST request\"\n\n    return api_advisor_view\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n\n    if a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a-b, b)\n    else:\n        return gcd_recursive(a, b-a)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory, file_name = file_path.split('/')\n        if directory in config_files:\n            config_files[directory].append(file_name)\n        else:\n            config_files[directory] = [file_name]\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == len(colors) - 1:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    import math\n    for i in range(start, end + 1):\n        if math.sqrt(i).is_integer():\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \" World\"\n    result = f\"{string} {phrase}\"\n    return result\n"}
{"task_id": "valid/70", "completion": "\n    def remove_special(string):\n        return re.sub(r'[^A-Za-z0-9 ]+', '', string)\n\n    def capitalize(string):\n        return string.capitalize()\n\n    result = []\n    for string in strings:\n        result.append(capitalize(remove_special(string)))\n\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return string.index(char)\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    bold_text = []\n    current_tag = \"\"\n    in_tag = False\n\n    for char in html_code:\n        if char == \"<\":\n            in_tag = True\n            current_tag = \"\"\n        elif char == \">\":\n            in_tag = False\n        elif in_tag:\n            current_tag += char\n            if current_tag == end_tag:\n                bold_text.append(current_tag)\n                current_tag = \"\"\n                in_tag = False\n    return bold_text\n\n"}
{"task_id": "valid/73", "completion": "\n\n    # Define the items and their prices\n    items = {\n        \"Coke\": 100,\n        \"Sprite\": 120,\n        \"Diet Coke\": 150,\n        \"Water\": 50,\n        \"Coffee\": 70,\n        \"Tea\": 80,\n    }\n\n    # Initialize the total money and the selected item\n    total_money = money_inserted\n    selected_item = None\n\n    # Start the vending machine\n    while True:\n        print(\"\\nWelcome to the vending machine!\\n\")\n        print(\"Please select an item:\")\n        for i, item in enumerate(items):\n            print(f\"{i+1}. {item} - ${items[item]}\")\n        selected_item_number = int(input(\"Enter the number of the item you want to purchase: \"))\n        selected_item = list(items.keys())[selected_item_number - 1]\n        print(f\"You selected {selected_item}\")\n\n        # Check if the user has enough money\n        if items[selected_item] > total_money:\n            print(\"Sorry, you don't have enough money.\")\n        else:\n            # Calculate the change\n            change = total_money - items[selected_item]\n            print(f\"Here is your {selected_item} and your change is ${change}\")\n\n            # Update the stock\n            del items[selected_item]\n\n        # Ask the user if they want to buy another item\n        buy_again = input(\"Do you want to buy another item? (yes/no): \")\n        if buy_again.lower() != \"yes\":\n            break\n        else:\n            total_money += int(input(\"How much more money do you have? $\"))\n\n    print(\"\\nThank you for shopping with us. Have a nice day!\\n\")\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n\n    def stem_plot(numbers):\n        indices = [i for i, x in enumerate(numbers) if x != 0]\n        values = [x for x in numbers if x != 0]\n        plt.stem(indices, values)\n        plt.show()\n\n    stem_plot(numbers)\n"}
{"task_id": "valid/78", "completion": "\n    def assign_and_validate(var, value):\n        try:\n            var.append(value)\n            return var\n        except TypeError:\n            return \"Invalid input. Please enter a list.\"\n\n    # Test the function\n    var = []\n    print(assign_and_validate(var, 1))  # Should print: [1]\n    print(assign_and_validate(var, 2))  # Should print: [1, 2]\n    print(assign_and_validate(var, \"a\"))  # Should print: \"Invalid input. Please enter a list.\"\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n\n    # Randomly rearrange the list of characters\n    random.shuffle(word_list)\n\n    # Convert the list of characters back to a string\n    random_word = ''.join(word_list)\n\n    return random_word\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n        else:\n            result[-1] += arr[i]\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r'\\b\\w+\\b'\n\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    return matches\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    if not divisible_numbers:\n        print(\"No divisible numbers found\")\n    else:\n        avg = sum(divisible_numbers) / len(divisible_numbers)\n        max_num = max(divisible_numbers)\n        min_num = min(divisible_numbers)\n        num_occurrences = {n: divisible_numbers.count(n) for n in divisible_numbers}\n\n        print(f\"Average: {avg}\")\n        print(f\"Max: {max_num}\")\n        print(f\"Min: {min_num}\")\n        print(\"Number occurrences:\")\n        for k, v in num_occurrences.items():\n            print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    # Convert the sentence to lower case\n    sentence = sentence.lower()\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store the frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq_word = max(word_freq, key=word_freq.get)\n\n    return highest_freq_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    # calculate the sum\n    sum_numbers = sum(numbers)\n\n    # calculate the average\n    average = sum_numbers / len(numbers)\n\n    return average, sum_numbers\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"Time series should only contain numerical values\")\n\n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return any(item in list2 for item in list1)\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, xml_element):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child_element = Element(key)\n                _dict_to_xml(value, child_element)\n                xml_element.append(child_element)\n            else:\n                child_element = Element(key, str(value))\n                xml_element.append(child_element)\n        return xml_element\n\n    root_element = Element('data')\n    _dict_to_xml(dictionary, root_element)\n    return tostring(root_element, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == target:\n                return True\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    return lst[n - 1] if n - 1 < len(lst) else None\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"A Discord bot that can manage and play music in a server. It provides information about its features and a web app for managing personal playlists and server settings. The bot can categorize commands and provide help information for each command.\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(abs(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(name.split('.')[-1] for name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young Adult\"\n    elif 30 <= age < 60:\n        return \"Adult\"\n    elif age >= 60:\n        return \"Senior\"\n    else:\n        return \"Invalid Age\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade < 0 or numerical_grade > 100:\n        return \"Invalid grade. Please enter a grade between 0 and 100.\"\n\n    grade_point = numerical_grade / 10\n\n    return (\n        \"Grade: \" + (\"A\" if grade_point >= 90 else \"B\" if grade_point >= 80 else \"C\" if grade_point >= 70 else \"D\" if grade_point >= 60 else \"F\") +\n        \", GPA: \" + str(round(grade_point, 2))\n    )\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n\n    return result\n\n"}
{"task_id": "valid/104", "completion": "\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n\n    if len(s) == 0:\n        return s\n\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i].upper()\n        else:\n            result += s[i].lower()\n\n    return result\n\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number_parts = version_number.split('_')\n        version_number_parts.pop(0)\n        version_number_parts.pop(0)\n        version_number_parts.append(version_number.split(' ')[-1])\n        latest_versions[package_name] = '_'.join(version_number_parts)\n    return latest_versions\n\n"}
{"task_id": "valid/107", "completion": "\n    # Define the categories\n    categories = {\n        \"murder\": [\"murder\", \"murderous\", \"murdering\", \"murderousness\"],\n        \"suicide\": [\"suicide\", \"suicidal\", \"suicidally\", \"suicidalness\"],\n        \"drowning\": [\"drowning\", \"drowningous\", \"drowningousness\"],\n        \"other\": [\"other\", \"otherwise\", \"otherwise than\", \"otherwise than that\"]\n    }\n\n    # Initialize a dictionary to hold the categorized causes\n    categorized_causes = {}\n\n    # Loop through each cause\n    for cause in causes:\n        # Initialize a flag to track if the cause is in a category\n        is_in_category = False\n\n        # Loop through each category\n        for category, words in categories.items():\n            # If the cause contains any of the words in the category\n            if any(word in cause for word in words):\n                # Add the cause to the category and set the flag to True\n                categorized_causes[category] = categorized_causes.get(category, []) + [cause]\n                is_in_category = True\n                break\n\n        # If the cause was not in a category, add it to the \"other\" category\n        if not is_in_category:\n            categorized_causes[\"other\"] = categorized_causes.get(\"other\", []) + [cause]\n\n    return categorized_causes\n\n"}
{"task_id": "valid/108", "completion": "\n    # Replace spaces with hyphens and convert to lowercase\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    string = string.gsub(string, \"\")\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        min_value = min(grid[i])\n        print(min_value)\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please provide a positive integer value for 'n'\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(int(digit, base) == base for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    else:\n        first_char = s[0]\n        if first_char in vowels:\n            return remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n\n    def format_option(option):\n        return f\"  -{option[0]} --{option[0]},   {option[1]}\"\n\n    def format_help(options):\n        return \"\\n\".join(format_option(option) for option in options)\n\n    return format_help(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence.count(subsequence)\n    return count\n\nsequence_of_characters = \"Please find the number occurrences this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    if h < t:\n        return 0\n    result = 1\n    while h >= t:\n        h -= t\n        result += 1\n    return result - 1\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n\n        This function should calculate the number of electrons in a material based on the given energy values.\n        \"\"\"\n        # Calculate the number of electrons based on the given energy values\n        electrons = grid_energies * ados * dope / dos_grid_size\n        return electrons\n\n    def adjust_doping(electrons, ados, dope, dos_grid_size):\n        \"\"\"\n        This function should adjust the doping level of a material based on the number of electrons.\n        \"\"\"\n        # Adjust the doping level based on the number of electrons\n        new_dope = electrons / (ados * dos_grid_size)\n        return new_dope\n\n    # Test the functions\n    electrons = calculate_electrons(grid_energies, ados, dope, dos_grid_size)\n    new_dope = adjust_doping(electrons, ados, dope, dos_grid_size)\n\n    return electrons, new_dope\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] - arr[i + 1] > max_diff:\n            max_diff = arr[i] - arr[i + 1]\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # sort the list of fruits\n    sorted_fruit_list = sorted(fruit_list)\n\n    # join the sorted list into a single string\n    sorted_fruit_string = \",\".join(sorted_fruit_list)\n\n    return sorted_fruit_string\n"}
{"task_id": "valid/133", "completion": "\n    if not lst:\n        return [[]]\n    else:\n        sublists = generate_sublists(lst[1:])\n        return sublists + [lst[0] + sublist for sublist in sublists]\n\n"}
{"task_id": "valid/134", "completion": "\n    return bool(re.search(r'\\d+\\.\\d+', string))\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    def forward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('{field_name}', models.DateTimeField(auto_now_add=True))\n\n    def backward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.remove_field('{field_name}')\n\n    migrations.Operation(forward, backward)\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    dataset_length = len(df)\n    forecast_period = math.ceil(dataset_length * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # If the end index is larger than the total number of items, set it to the total number of items\n    if end_index > len(items):\n        end_index = len(items)\n\n    # Return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    def carry(a, b, c):\n        if a > 9 or b > 9 or c > 9:\n            return 1\n        else:\n            return 0\n\n    def add(a, b, c):\n        return a + b + c\n\n    def double(n):\n        if n < 10:\n            return n * 2\n        else:\n            return int(str(n)[0]) * 2 + carry(int(str(n)[1]), 0, 0)\n\n    def long_integer_doubler(n_str):\n        n = int(n_str)\n        if n == 0:\n            return '0'\n        n_str = str(n)\n        n_len = len(n_str)\n        result = ''\n        carry = 0\n        for i in range(n_len - 1, -1, -1):\n            temp = double(int(n_str[i]) * 2 + carry)\n            carry = carry(int(n_str[i]) * 2, 0, 0)\n            result = str(temp) + result\n        if carry != 0:\n            result = str(carry) + result\n        return result.zfill(len(n_str) * 2)\n\n    return long_integer_doubler(n_str)\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"preset1\": (1.0, 2.0, 3.0),\n        \"preset2\": (4.0, 5.0, 6.0),\n        \"preset3\": (7.0, 8.0, 9.0)\n    }\n\n    def main():\n        rospy.init_node('reflex_control')\n\n        # TODO: Implement the code to control the robotic arm using the preset positions\n\n    if __name__ == '__main__':\n        main()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for value in common_elements:\n        product *= value\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Configuration 1: allow_multiple_answer\n    if allow_multiple_answer:\n        print(\"User is allowed to select multiple answers\")\n    else:\n        print(\"User is not allowed to select multiple answers\")\n\n    # Configuration 2: zoom_level\n    if zoom_level > 0:\n        print(\"Zoom level is set to: \", zoom_level)\n    else:\n        print(\"Zoom level is not set\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def merge_dict(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge_dict(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def is_alpha(s):\n        return s.isalpha()\n\n    def clean_key(k):\n        return ''.join(filter(is_alpha, k))\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items(), key=lambda item: clean_key(item[0]))}\n\n    result = merge_dict(a, b)\n    return sort_dict(result)\n\n\na = {'a 1', 'b 2', 'nested {' , 'x 5, 6'}' }\nb = {'c 3', 'd 4', 'nestedy 7', 'z 8'}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_val = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_val = max(max_val, find_max_in_dict(value))\n            else:\n                max_val = max(max_val, value)\n        return max_val\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
