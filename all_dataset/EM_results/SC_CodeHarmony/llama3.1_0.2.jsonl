{"task_id": "valid/0", "completion": "\n    # Define the categories and their corresponding keywords\n    categories = {\n        'sports': ['football', 'basketball', 'tennis', 'golf'],\n        'politics': ['government', 'election', 'policy', 'law'],\n        'entertainment': ['movie', 'music', 'book', 'award']\n    }\n\n    # Initialize the category with the highest score\n    best_category = None\n    best_score = 0\n\n    # Tokenize the text into words\n    words = text.split()\n\n    # Iterate over each category\n    for category, keywords in categories.items():\n        # Initialize the score for the current category\n        score = 0\n\n        # Iterate over each keyword in the category\n        for keyword in keywords:\n            # Check if the keyword is in the text\n            if keyword in words:\n                # Increment the score if the keyword is found\n                score += 1\n\n        # Update the best category if the current category has a higher score\n        if score > best_score:\n            best_category = category\n            best_score = score\n\n    # Return the best category\n    return best_category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        # Attempt to parse the JSON string\n        json_data = json.loads(json_string)\n        # Convert the JSON data to a list of dictionaries\n        list_of_dicts = [dict(item) for item in json_data]\n        return list_of_dicts\n    except json.JSONDecodeError as e:\n        # Raise a ValueError if the input is not a valid JSON string\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/5", "completion": "\n    # Check if the input is a number and not negative\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # Check if the number is divisible by 5\n    if n % 5 != 0:\n        return False\n\n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Check if the sum of the digits is 3\n    if sum_of_digits != 3:\n        return False\n\n    # If all conditions are met, return True\n    return True\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    # We will use the str.replace() method to replace the placeholders\n    # First, we need to iterate over each key-value pair in the dictionary\n    for key, value in values.items():\n        # For each pair, we will replace the placeholder in the template with the value\n        # We use the str.replace() method to replace the placeholder with the value\n        # The placeholder is enclosed in double curly braces, so we need to include those in the replacement string\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    # After replacing all placeholders, we return the updated template\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())  # Remove leading/trailing whitespace and extra whitespace between words\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + re.escape(word1) + '|' + re.escape(word2) + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(sublist) for sublist in array]\n"}
{"task_id": "valid/16", "completion": "\n    # Split the comment into lines\n    lines = comment.split('\\n')\n    \n    # Initialize an empty dictionary to store the settings\n    settings = {}\n    \n    # Iterate over each line\n    for line in lines:\n        # Remove any leading or trailing whitespace\n        line = line.strip()\n        \n        # Check if the line starts with a setting\n        if line.startswith('set tabstop='):\n            # Extract the tabstop value\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('set expandtab'):\n            # Set expandtab to True\n            settings['expandtab'] = True\n        elif line.startswith('set shiftwidth='):\n            # Extract the shiftwidth value\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('set softtabstop='):\n            # Extract the softtabstop value\n            settings['softtabstop'] = int(line.split('=')[1])\n    \n    # Return the extracted settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    # Base case: if the number is 0, there are no digits\n    if num == 0:\n        return 0\n    # Recursive case: count the digits in the number without the last digit\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n\n    # Combine the elements of the reversed lists\n    combined_list = reversed_list1 + reversed_list2\n\n    # Sort the elements in ascending order\n    sorted_list = sorted(combined_list)\n\n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n"}
{"task_id": "valid/22", "completion": "\n    if \"Args\" in dictionary and \"name\" in dictionary[\"Args\"]:\n        return dictionary[\"Args\"][\"name\"]\n    elif \"Args\" in dictionary and isinstance(dictionary[\"Args\"], dict):\n        return get_nested_dictionary_value(dictionary[\"Args\"])\n    else:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, set):\n        return {struct_to_dict(item) for item in struct}\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and the difference\n    closest_palindrome = num\n    min_diff = float('inf')\n    \n    # Iterate over all possible palindromes\n    for i in range(len(num_str)):\n        for j in range(i, len(num_str)):\n            # Generate the palindrome\n            palindrome = int(num_str[i:j+1] + num_str[i:j+1][::-1])\n            \n            # Calculate the absolute difference between the palindrome and the number\n            diff = abs(palindrome - num)\n            \n            # Update the closest palindrome and the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n                closest_palindrome = palindrome\n                \n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Check if the matrix is square\n    is_square = num_rows == num_cols\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(num_rows))\n    \n    return num_rows, num_cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()  # This line of code is the solution to the problem\n"}
{"task_id": "valid/29", "completion": "\n    # Initialize the minimum value with the first element of the list\n    min_val = lst[0]\n    \n    # Iterate over the list starting from the second element (index 1)\n    for i in range(1, len(lst)):\n        # If the current element is smaller than the current minimum, update the minimum\n        if lst[i] < min_val:\n            min_val = lst[i]\n    \n    # Return the minimum value found\n    return min_val\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, dict):\n        return key in json_data and json_data[key] == value\n    else:\n        try:\n            json_data = json.loads(json_data)\n            return key in json_data and json_data[key] == value\n        except json.JSONDecodeError:\n            return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table rows\n    table_rows = []\n    \n    # Calculate the number of rows needed\n    num_rows = -(-len(buttons) // num_columns)  # Ceiling division\n    \n    # Iterate over the number of rows\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row\n        row = []\n        \n        # Iterate over the number of columns\n        for j in range(num_columns):\n            # Calculate the index of the current button\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the buttons list, add the button to the row\n            if index < len(buttons):\n                # Assuming each button is a dictionary with a 'text' and 'action' key\n                button = buttons[index]\n                row.append({'text': button['text'], 'action': button['action']})\n        \n        # Add the row to the table rows\n        table_rows.append(row)\n    \n    # Return the table rows\n    return table_rows\n"}
{"task_id": "valid/32", "completion": "\n    # Convert the string to lowercase\n    s = s.lower()\n    # Initialize a flag to track if the alphabets are in order\n    in_order = True\n    # Initialize a variable to store the previous character\n    prev_char = ''\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an alphabet\n        if char.isalpha():\n            # If the character is not the first character, check if it is in order\n            if char != prev_char and char != chr(ord(prev_char) + 1):\n                in_order = False\n                break\n            # Update the previous character\n            prev_char = char\n    # Return the result\n    return in_order\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Initialize an empty string to build the current numeric substring\n    current_num = \"\"\n    \n    # Iterate over each character in the input string\n    for char in ts:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, add it to the current numeric substring\n            current_num += char\n        else:\n            # If it's not, check if we have a current numeric substring\n            if current_num:\n                # If we do, add it to the total sum and reset the current numeric substring\n                total_sum += int(current_num)\n                current_num = \"\"\n    \n    # After iterating over the entire string, check if we have a current numeric substring\n    if current_num:\n        # If we do, add it to the total sum\n        total_sum += int(current_num)\n    \n    # Return the total sum\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numerical\n    if all(isinstance(x, (int, float)) for x in arr):\n        # If all elements are numerical, compute the sum of the array\n        return sum(arr)\n    else:\n        # If not all elements are numerical, return an error message\n        return \"Error: The array contains non-numerical values.\"\n"}
{"task_id": "valid/37", "completion": "\n    # First, we load the JSON data into a Python dictionary\n    data = json.loads(json_data)\n    \n    # Then, we extract the neighborhood names from the dictionary\n    neighborhoods = [neighborhood['name'] for neighborhood in data]\n    \n    # Finally, we sort the list of neighborhood names in alphabetical order\n    sorted_neighborhoods = sorted(neighborhoods)\n    \n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute difference of the current pair\n        diff = abs(arr[i] + arr[i + 1])\n        # Update the minimum sum if the current difference is smaller\n        min_sum = min(min_sum, diff)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Check if the total number of votes is at least 100\n    if sum(votes, 0) < 100:\n        raise ValueError(\"The total number of votes must be at least 100\")\n\n    # Iterate over each vote in the list\n    for vote in votes:\n        # Extract the candidate name and vote count from the tuple\n        candidate, count = vote\n\n        # Check if the candidate name is a string of uppercase letters with a maximum length of 10 characters\n        if not isinstance(candidate, str) or not candidate.isupper() or len(candidate) > 10:\n            raise ValueError(\"Candidate name must be a string of uppercase letters with a maximum length of 10 characters\")\n\n        # Check if the vote count is a positive integer not exceeding 1000\n        if not isinstance(count, int) or count <= 0 or count > 1000:\n            raise ValueError(\"Vote count must be a positive integer not exceeding 1000\")\n\n        # If the candidate is already in the results dictionary, add the vote count to their total\n        if candidate in results:\n            results[candidate] += count\n        # Otherwise, add the candidate to the results dictionary with their vote count\n        else:\n            results[candidate] = count\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in results:\n        results[candidate] = (results[candidate] / total_votes) * 100\n\n    # Round the percentage votes to two decimal places\n    for candidate in results:\n        results[candidate] = round(results[candidate], 2)\n\n    # Return the results dictionary\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Attempt to parse the date string\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n        # If the date is valid, return it in the standardized format\n        return date.strftime('%B %d %Y')\n    except ValueError:\n        # If the date string is not in the correct format, attempt to parse it as DD-MMM-YYYY\n        try:\n            date = datetime.strptime(date_string, '%d-%b-%Y')\n            # If the date is valid, return it in the standardized format\n            return date.strftime('%B %d %Y')\n        except ValueError:\n            # If the date string is not in the correct format, raise a ValueError\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define the allowed file types\n    allowed_types = {\n        'txt': 'text/plain',\n        'pdf': 'application/pdf',\n        'jpg': 'image/jpeg',\n        'png': 'image/png',\n        'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    }\n\n    # Get the file extension from the new file name\n    new_extension = newname.split('.')[-1]\n\n    # Check if the new file name has a valid extension\n    if new_extension in allowed_types:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        if isinstance(num, int) or isinstance(num, float):\n            return num % 2 == 0\n        elif isinstance(num, str):\n            try:\n                return float(num) % 2 == 0\n            except ValueError:\n                return False\n        return False\n\n    def remove_uneven(lst):\n        new_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                new_lst.append(remove_uneven(item))\n            elif isinstance(item, tuple):\n                new_lst.append(tuple(remove_uneven(list(item))))\n            elif is_even(item):\n                new_lst.append(item)\n        return new_lst\n\n    return remove_uneven(lst)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return sum(1 for char in string if char == specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # Add the accuracy data to the histogram\n    histogram_data[generation] = accs\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "valid/48", "completion": "\n    # Initialize an empty set to store unique languages\n    unique_languages = set()\n\n    # Iterate over each classifier in the list\n    for classifier in classifiers:\n        # Split the classifier into language and version\n        language, _ = classifier.split(\" :: \")\n\n        # Add the language to the set\n        unique_languages.add(language)\n\n    # Return the count of unique languages\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate over each row in the array\n    for row in arr:\n        # Iterate over each number in the row\n        for num in row:\n            # If the number is already in the dictionary, increment its count by 1\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n    \n    # Initialize an empty list to store the count of each number\n    count_list = []\n    \n    # Iterate over each key-value pair in the dictionary\n    for key, value in count_dict.items():\n        # Append a tuple containing the number and its count to the list\n        count_list.append((key, value))\n    \n    # Return the list\n    return count_list\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match URLs\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches, return the corresponding view function\n    if match:\n        # Get the video ID from the URL\n        video_id = match.group(1)\n\n        # Return the view function for the video detail page\n        return 'video_detail'\n\n    # If the URL does not match, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    return list[:position] + [item] + list[position:]\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary.keys():\n            if key.startswith(\"price\"):\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2[:] = [value for value in list2 if value not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request_method == 'GET':\n                return func(request, *args, **kwargs)\n            elif request_method == 'POST':\n                return func(request, *args, **kwargs)\n            else:\n                return 'Invalid request method'\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd_recursive(a - b, b)\n    return gcd_recursive(a, b - a)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        \n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        \n        # Extract the file extension from the file name\n        file_extension = os.path.splitext(file_name)[1]\n        \n        # Determine the category based on the directory path\n        if 'dev' in dir_path:\n            category = 'Development'\n        elif 'prod' in dir_path:\n            category = 'Production'\n        elif 'test' in dir_path:\n            category = 'Testing'\n        else:\n            category = 'Unknown'\n        \n        # Add the file to the corresponding category\n        if category not in categorized_files:\n            categorized_files[category] = []\n        categorized_files[category].append(file_path)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: if the start index is greater than the end index, the target is not in the array\n    if start > end:\n        return False\n\n    # Calculate the middle index\n    mid = (start + end) // 2\n\n    # If the middle element is the target, return True\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color not in colors:\n        raise ValueError(\"Invalid color\")\n    return colors[(colors.index(color) + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    # Use a list comprehension to create a new list with incremented values\n    return [x + 1 for x in list]\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \"Hello, my name is {} and I am {} years old.\"\n    concatenated_string = phrase.format(name, age)\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    def process_strings(strings):\n        result = []\n        for s in strings:\n            if re.match('^[a-zA-Z0-9\\s]+$', s):\n                result.append(s.capitalize())\n        return result\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    \n    # Initialize an empty list to store the bold text\n    bold_text = []\n    \n    # Initialize a flag to track whether we are currently inside a bold tag\n    inside_bold = False\n    \n    # Initialize an empty string to build the current bold text\n    current_bold = \"\"\n    \n    # Iterate over each character in the HTML code\n    for char in html_code:\n        # If we encounter an opening bold tag, set the flag to True and reset the current bold text\n        if char == \"<\" and html_code[html_code.index(char):].startswith(\"<b>\"):\n            inside_bold = True\n            current_bold = \"\"\n        \n        # If we encounter a closing bold tag, set the flag to False and add the current bold text to the list\n        elif char == \"<\" and html_code[html_code.index(char):].startswith(\"</b>\"):\n            inside_bold = False\n            bold_text.append(current_bold)\n            current_bold = \"\"\n        \n        # If we are inside a bold tag, add the character to the current bold text\n        elif inside_bold:\n            current_bold += char\n    \n    # Return the list of bold text\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"1\": {\"name\": \"Coke\", \"price\": 1.00},\n        \"2\": {\"name\": \"Pepsi\", \"price\": 1.50},\n        \"3\": {\"name\": \"Water\", \"price\": 0.50},\n    }\n\n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the money inserted is sufficient\n    if money_inserted < items[item][\"price\"]:\n        return \"Insufficient money\"\n\n    # Calculate the change to return\n    change = money_inserted - items[item][\"price\"]\n\n    # Update the stock of purchased item\n    if item in stock:\n        stock[item] += 1\n    else:\n        stock[item] = 1\n\n    # Return the change and the purchased item\n    return f\"Thank you for your purchase! Your change is ${change:.2f}. You purchased a {items[item]['name']}.\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    merged_list = list1 + list2\n    \n    # Convert the list to a set to remove duplicates\n    merged_set = set(merged_list)\n    \n    # Convert the set back to a list\n    merged_list = list(merged_set)\n    \n    return merged_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string.decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]  # Return the indices of non-zero entries in the vector\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    value = 10\n\n    # Validate the value\n    if value == 10:\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Use random.shuffle to rearrange the list of characters\n    random.shuffle(word_list)\n    # Join the list of characters back into a string\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            merged_arr[-1] += arr[i]\n        else:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text into words\n    tokenizer = re.compile(r'\\b\\w+\\b')\n    return tokenizer.findall(text)\n\n"}
{"task_id": "valid/83", "completion": "\n    # Filter the list to get numbers that are divisible by both 3 and 7\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    # Calculate the average of the divisible numbers\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    \n    # Find the maximum and minimum values among the divisible numbers\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    \n    # Count the occurrences of each unique number divisible by both 3 and 7\n    occurrences = {}\n    for num in divisible_numbers:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n    \n    # Display the results\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n    print(f\"Maximum value among numbers divisible by both 3 and 7: {max_value}\")\n    print(f\"Minimum value among numbers divisible by both 3 and 7: {min_value}\")\n    print(\"Occurrences of each unique number divisible by both 3 and 7:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    highest_frequency_word = [word for word, freq in frequency.items() if freq == max_frequency]\n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    # Initialize the value of e to 0\n    e = 0\n    # Initialize the factorial of the current term to 1\n    factorial = 1\n    # Initialize the current term to 1\n    term = 1\n    # Initialize the sign of the current term to 1\n    sign = 1\n    # Initialize the current decimal place to 0\n    decimal_place = 0\n    # Loop until the desired decimal place is reached\n    while decimal_place < decimal_places:\n        # Add the current term to e\n        e += sign * term / factorial\n        # Increment the decimal place\n        decimal_place += 1\n        # Increment the factorial\n        factorial += 1\n        # Update the term\n        term = 1 / factorial\n        # Update the sign\n        sign = -sign\n    # Return the calculated value of e\n    return e\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_numbers = sum(numbers)\n    return average, sum_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for article in encyclopedia:\n        related_articles[article] = 0\n        for other_article in encyclopedia:\n            if article != other_article:\n                if is_related(article, other_article):\n                    related_articles[article] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    # Define the description of the bot\n    description = \"A Discord bot that can manage and play music in a server. It also provides information about its features and a web app for managing personal playlists and server settings.\"\n\n    # Define the categories of commands\n    categories = {\n        \"Music\": [\"play\", \"pause\", \"stop\", \"skip\", \"queue\"],\n        \"Playlist\": [\"create\", \"delete\", \"add\", \"remove\"],\n        \"Server\": [\"settings\", \"info\"],\n        \"Help\": [\"help\", \"about\"]\n    }\n\n    # Define the help information for each command\n    help_info = {\n        \"play\": \"Play a song in the current voice channel.\",\n        \"pause\": \"Pause the current song.\",\n        \"stop\": \"Stop the current song.\",\n        \"skip\": \"Skip to the next song in the queue.\",\n        \"queue\": \"View the current song queue.\",\n        \"create\": \"Create a new playlist.\",\n        \"delete\": \"Delete a playlist.\",\n        \"add\": \"Add a song to a playlist.\",\n        \"remove\": \"Remove a song from a playlist.\",\n        \"settings\": \"View or edit server settings.\",\n        \"info\": \"View information about the server.\",\n        \"help\": \"View help information for a specific command.\",\n        \"about\": \"View information about the bot.\"\n    }\n\n    # Create a dictionary to store the bot's description and categories\n    bot_description = {\n        \"description\": description,\n        \"categories\": categories,\n        \"help_info\": help_info\n    }\n\n    # Return the bot's description and categories\n    return bot_description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define a dictionary to map numerical grades to letter grades\n    grade_map = {\n        0: 'F',\n        1: 'F',\n        1.5: 'F',\n        2: 'F',\n        2.5: 'F',\n        3: 'D',\n        3.5: 'D',\n        4: 'C',\n        4.5: 'C',\n        5: 'B',\n        5.5: 'B',\n        6: 'A',\n        6.5: 'A',\n        7: 'A',\n        8: 'A',\n        9: 'A',\n        10: 'A'\n    }\n    \n    # Use a ternary operator to determine the letter grade\n    letter_grade = 'F' if numerical_grade < 0 else grade_map.get(numerical_grade, 'Invalid grade')\n    \n    # Calculate the GPA\n    gpa = round(numerical_grade / 10, 2)\n    \n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Define the function\n    def calculate_total_price(listing):\n        # Initialize the total price to 0\n        total_price = 0\n        # Iterate over each item in the listing\n        for item in listing:\n            # Add the price of the item to the total price\n            total_price += item['price']\n        # Return the total price\n        return total_price\n    # Return the function\n    return calculate_total_price\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_vowel_count = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome in palindrome_tuples}\n    return palindrome_vowel_count\n"}
{"task_id": "valid/104", "completion": "\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    \n    # If the string is empty, return an empty string\n    if not s:\n        return \"\"\n    \n    # If the string has a length of 1, return the string as is\n    if len(s) == 1:\n        return s\n    \n    # If the string has a length of 2, swap the characters and return the result\n    if len(s) == 2:\n        return s[1] + s[0]\n    \n    # If the string has a length greater than 2, return the first and last characters swapped\n    return s[-1] + s[1:-1] + s[0]  # <--- This line was changed\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        # Extract the numerical identifier from the version number\n        version_number = int(''.join(filter(str.isdigit, version)))\n        # If the package is not in the dictionary or the current version is newer than the stored version, update the dictionary\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Define a dictionary to store the categorized causes of death\n    categorized_causes = {\n        \"natural\": [],\n        \"accidental\": [],\n        \"suicidal\": [],\n        \"homicidal\": [],\n        \"undetermined\": []\n    }\n\n    # Iterate over each cause of death\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \", 1)\n\n        # Categorize the cause based on the action\n        if \"died\" in result:\n            categorized_causes[\"natural\"].append(cause)\n        elif \"killed\" in result:\n            categorized_causes[\"homicidal\"].append(cause)\n        elif \"killed\" in action:\n            categorized_causes[\"homicidal\"].append(cause)\n        elif \"died\" in action:\n            categorized_causes[\"suicidal\"].append(cause)\n        elif \"accidentally\" in result:\n            categorized_causes[\"accidental\"].append(cause)\n        else:\n            categorized_causes[\"undetermined\"].append(cause)\n\n    # Return the categorized causes of death\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    # Remove spaces from the input name\n    name = name.replace(\" \", \"\")\n\n    # Replace any remaining spaces with hyphens\n    name = name.replace(\" \", \"-\")\n\n    # Convert the entire name to lowercase\n    name = name.lower()\n\n    # Return the generated code name\n    return name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import the string module which contains a number of useful constants and classes\n    import string\n    \n    # Use the translate method to remove punctuation marks\n    # The maketrans method returns a translation table that can be used with the translate method\n    # The string.punctuation constant contains all punctuation marks\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number.\")\n        except ValueError:\n            print(f\"Error: {num} is not a valid exponent.\")\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n - 1, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    return len(str(num)) == len(set(str(num)))\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0].lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    return s[0] + remove_vowels_recursive(s[1:])  # <--- Changed this line\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python application.py [options]\\n\"\n    for option in options:\n        help_message += f\"  -{option[0]}  {option[1]}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    return Val.count(Val)\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Initialize quotient to 0\n    quotient = 0\n    # Initialize remainder to dividend\n    remainder = h\n    # Loop until the remainder is less than the divisor\n    while remainder >= t:\n        # Initialize temporary variable to divisor\n        temp = t\n        # Initialize index to 0\n        i = 0\n        # Loop until the remainder is less than the temporary variable\n        while remainder >= (temp << i):\n            # Increment index\n            i += 1\n        # Subtract the temporary variable shifted by the index from the remainder\n        remainder -= (temp << (i - 1))\n        # Add the temporary variable shifted by the index minus 1 to the quotient\n        quotient += (temp << (i - 1))\n    # Return the quotient\n    return quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(num for num in input_list if num % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    # Initialize a counter for consonants\n    consonant_count = 0\n    # Define the set of vowels\n    vowels = set(\"aeiouAEIOU\")\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is a letter and not a vowel\n        if char.isalpha() and char not in vowels:\n            # If it is, increment the consonant count\n            consonant_count += 1\n    # Return the total count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons\n    num_electrons = 0\n    \n    # Iterate over the grid energies\n    for i in range(len(grid_energies)):\n        # Calculate the number of electrons at the current energy level\n        num_electrons += ados[i] * (1 + dope * (grid_energies[i] - dos_grid_size / 2))\n    \n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    # Initialize an empty list to store the result\n    result = []\n    # Alternate between the smallest and largest elements\n    while left <= right:\n        # Append the smallest element\n        result.append(arr[left])\n        # Move the left pointer to the right\n        left += 1\n        # If the left pointer is still less than or equal to the right pointer, append the largest element\n        if left <= right:\n            result.append(arr[right])\n            # Move the right pointer to the left\n            right -= 1\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for elem in lst:\n        sublists += [sublist + [elem] for sublist in sublists]\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n    # First, we need to import the necessary modules\n    from django.db import migrations, models\n\n    # We define a class that inherits from `migrations.Migration`\n    class Migration(migrations.Migration):\n        # We specify the app and model that this migration operation applies to\n        app_label = 'history'\n        model_name = 'CommitteeMember'\n\n        # We define the operations that this migration will perform\n        operations = [\n            # We use the `AlterField` operation to alter the field\n            migrations.AlterField(\n                model_name='CommitteeMember',\n                name=field_name,\n                field=models.CharField(max_length=255),\n            ),\n        ]\n\n    # We return the migration operation\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Sum the common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Calculate the forecast period by taking 1% of the dataset length and rounding up to the nearest integer\n    forecast_period = math.ceil(dataset_length * 0.01)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the page\n    end_index = start_index + items_per_page\n    \n    # Slice the list items to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n = n_str\n    result = ''\n    carry = 0\n    for i in range(len(n) - 1, -1, -1):\n        digit = int(n[i])\n        double_digit = digit * 2 + carry\n        result = str(double_digit % 10) + result\n        carry = double_digit // 10\n    if carry:\n        result = str(carry) + result\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.5, 0.0),\n        \"down\": (0.0, -0.5, 0.0),\n        \"left\": (-0.5, 0.0, 0.0),\n        \"right\": (0.5, 0.0, 0.0),\n        \"forward\": (0.0, 0.0, 0.5),\n        \"backward\": (0.0, 0.0, -0.5)\n    }\n\n    return presets.get(preset_name, None)  # Return None if preset_name is not found\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Define the quiz system behavior based on the configurations\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"Quiz system allows multiple answers and has a low zoom level\"\n        elif zoom_level == 2:\n            return \"Quiz system allows multiple answers and has a medium zoom level\"\n        else:\n            return \"Quiz system allows multiple answers and has a high zoom level\"\n    else:\n        if zoom_level == 1:\n            return \"Quiz system does not allow multiple answers and has a low zoom level\"\n        elif zoom_level == 2:\n            return \"Quiz system does not allow multiple answers and has a medium zoom level\"\n        else:\n            return \"Quiz system does not allow multiple answers and has a high zoom level\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in sorted(a.keys()):\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in sorted(b.keys()):\n        if key.isalpha():\n            if key in merged:\n                if isinstance(merged[key], dict) and isinstance(b[key], dict):\n                    merged[key] = merge_objects(merged[key], b[key])\n                else:\n                    merged[key] = b[key]\n            else:\n                merged[key] = b[key]\n    return merged\n"}
{"task_id": "valid/147", "completion": "\n    max_val = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_val = max(max_val, find_max_in_dict(value))\n        else:\n            max_val = max(max_val, value)\n    return max_val\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*' in the string\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
