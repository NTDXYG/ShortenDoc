{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = ['sports', 'politics', 'technology', 'entertainment', 'business']\n\n    # Define rules for each category\n    rules = {\n        'sports': ['football', 'basketball', 'baseball', 'soccer', 'tennis'],\n        'politics': ['election', 'government', 'policy', 'law', 'president'],\n        'technology': ['computer', 'software', 'hardware', 'internet', 'AI'],\n        'entertainment': ['movie', 'music', 'TV', 'actor', 'actress'],\n        'business': ['stock', 'finance', 'market', 'company', 'economy']\n    }\n\n    # Classify text based on rules\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n\n    # If no category is found, return None\n    return None\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    \n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        return sum(int(digit) for digit in str(n)) % 3 == 0\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    for i in range(1, n):\n        if base**i % n == 1:\n            return i\n    return None\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string provided.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text too long\"\n    else:\n        return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            result = get_nested_dictionary_value(value)\n            if result is not None:\n                return result\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    result = get_nested_dictionary_value(item)\n                    if result is not None:\n                        return result\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict) and key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        if row >= len(table):\n            table.append([])\n        table[row].append(button)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize a variable to store the sum of numeric substrings\n    total_sum = 0\n\n    # Iterate over each character in the input string\n    for char in ts:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Add the numeric value of the character to the total sum\n            total_sum += int(char)\n\n    # Return the total sum of numeric substrings\n    return total_sum\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"Error: Array is empty\"\n\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        return \"Error: Array contains non-numerical values\"\n\n    # Compute the addition of all elements in the array\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data[\"neighborhoods\"]\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x[\"name\"])\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum sum as infinity\n    min_sum = float('inf')\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Iterate until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the sum of the current pair\n        current_sum = arr[left] + arr[right]\n\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, abs(current_sum))\n\n        # Move the left pointer to the right if the current sum is negative\n        if current_sum < 0:\n            left += 1\n        # Move the right pointer to the left if the current sum is positive\n        elif current_sum > 0:\n            right -= 1\n        # If the current sum is zero, return it as the minimum sum\n        else:\n            return 0\n\n    # Return the minimum sum\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        total_votes += number_of_votes\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n\n    for candidate_name, number_of_votes in results.items():\n        percentage = (number_of_votes / total_votes) * 100\n        print(f\"{candidate_name}: {percentage:.2f}%\")\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Try to parse the date string using the given formats\n        date = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # If the first format fails, try the second one\n            date = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            # If both formats fail, raise an error\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Check if the date is valid\n    if date.year < 1000 or date.year > 9999:\n        raise ValueError(\"Year must be between 1000 and 9999.\")\n    if date.month < 1 or date.month > 12:\n        raise ValueError(\"Invalid month.\")\n    if date.day < 1 or date.day > 31:\n        raise ValueError(\"Invalid day.\")\n    if date.month in [4, 6, 9, 11] and date.day > 30:\n        raise ValueError(\"Invalid day for the given month.\")\n    if date.month == 2:\n        if date.day > 29:\n            raise ValueError(\"Invalid day for February.\")\n        if date.day == 29 and not (date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)):\n            raise ValueError(\"Invalid day for February in a non-leap year.\")\n\n    # Return the date in the standardized format\n    return date.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Check if the new file name has a valid extension\n    if not has_valid_extension(newname, allowed_type):\n        return False\n\n    # Check if the old file name and the new file name are the same\n    if oldname == newname:\n        return False\n\n    # Check if the new file name already exists\n    if os.path.exists(newname):\n        return False\n\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            continue\n        language = classifier.split(\" :: \")[0]\n        unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the count instances of each number\n    count_list = []\n\n    # Iterate through the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        count_list.append(count)\n\n    # Return the list of count instances\n    return count_list\n"}
{"task_id": "valid/50", "completion": "\n\n    The `match_url_to_view` function is designed to take a URL as input and return the corresponding view function. However, the function is currently not implemented. Your task is to complete the `match_url_to_view` function to correctly match a given URL to the appropriate view function.\n    \"\"\"\n    for pattern in urlpatterns:\n        if re.match(pattern.regex.pattern, url):\n            return pattern.callback\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict_ in list_of_dicts:\n        for key in dict_.keys():\n            if key.startswith(\"price_\"):\n                price_sum += dict_[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = []\n    for element in list2:\n        if element in list1:\n            intersection.append(element)\n            list1.remove(element)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        func.route = request_method\n        return func\n    return decorator\n\nHere is a Python solution using a decorator to match incoming API requests to the appropriate endpoint handler based on the request method (GET or POST):\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n    \n    for file_path in file_paths:\n        if 'global' in file_path:\n            categorized_files['global'].append(file_path)\n        elif 'environment' in file_path:\n            categorized_files['environment'].append(file_path)\n        elif 'service' in file_path:\n            categorized_files['service'].append(file_path)\n        elif 'application' in file_path:\n            categorized_files['application'].append(file_path)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN', 'BLUE']\n    current_index = colors.index(color)\n    next_index = (current_index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if is_perfect_square(num):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha() and char.lower() == target.lower():\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \" is a great person\"\n    result = f\"{name}{phrase}\"\n    return result\n\n"}
{"task_id": "valid/70", "completion": "\n    def is_special_char(c):\n        return not (c.isalnum() or c.isspace())\n\n    def process_strings(strings):\n        capitalized_strings = [s.capitalize() for s in strings]\n        filtered_strings = [s for s in capitalized_strings if all(not is_special_char(c) for c in s)]\n        return filtered_strings\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_text.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n    return bold_text\nhtml_code = \"<html><body><p>This is a <b>bold</b> text.</p><p>This is another <b>bold</b> text.</p></body></html>\""}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n    \n    # Check if the item exists and if the user has inserted enough money\n    if item not in items:\n        return \"Item not found\"\n    elif money_inserted < items[item]:\n        return \"Not enough money\"\n    \n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item purchased\n    items[item] -= 1\n    \n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string.decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_variable = 10\n\n    # Validate the variable\n    if isinstance(my_variable, int):\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Shuffle the list of characters\n    random.shuffle(word_list)\n    # Convert the list of characters back to a string\n    rearranged_word = ''.join(word_list)\n    return rearranged_word\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return arr\n\n    merged = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            merged.append(arr[i])\n\n    return merged\n\n"}
{"task_id": "valid/82", "completion": "\n    # Remove all non-word characters (everything except numbers and letters)\n    text = re.sub(r\"[^\\w\\s]\", '', text)\n\n    # Replace all runs of whitespace with a single space\n    text = re.sub(r\"\\s+\", ' ', text)\n\n    # Turn all characters into lowercase\n    text = text.lower()\n\n    return text\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers are divisible by both 3 and 7.\")\n        return\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n    print(f\"Maximum value: {max(divisible_numbers)}\")\n    print(f\"Minimum value: {min(divisible_numbers)}\")\n    print(\"Number occurrences:\")\n    for num in set(divisible_numbers):\n        print(f\"{num}: {divisible_numbers.count(num)}\")\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\nfind_divisible_numbers(numbers)\n"}
{"task_id": "valid/84", "completion": "\n    # split the sentence into words\n    words = sentence.split()\n\n    # create a dictionary to store the frequency of each word\n    word_freq = {}\n\n    # iterate through the words and count their frequency\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 2.0\n    for i in range(1, decimal_places + 1):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if len(numbers) == 0:\n        return (0, 0)\n    else:\n        average = sum(numbers) / len(numbers)\n        return (average, sum(numbers))\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values.\")\n    return min(time_series), max(time_series)"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf-8').decode('utf-8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_val = matrix[mid // n][mid % n]\n\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total = 0\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num\n            count += 1\n    average = total / count\n    return total, average\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n\n    **Features:**\n    - Play music in a server\n    - Provide information about the bot's features\n    - Manage personal playlists\n    - Manage server settings\n    - Categorize commands\n    - Provide help information for each command\n\n    **Web App:**\n    - Manage personal playlists\n    - Manage server settings\n    - View server statistics\n    - View playlist statistics\n\n    **Commands:**\n    {create_command_list(mapping)}\n\n    **Help:**\n    To get help information for a specific command, use the `help` command followed by the command name. For example, `help play` will provide help information for the `play` command.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        n = abs(n)\n    return int(str(n), 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1] for file_name in file_names)"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Get the name of the items\n    items = listing['items']\n    # Get the price of each item\n    prices = listing['prices']\n    # Get the quantity of each item\n    quantities = listing['quantities']\n    # Initialize the total price\n    total_price = 0\n    # Loop through each item\n    for i in range(len(items)):\n        # Get the price of the item\n        price = prices[i]\n        # Get the quantity of the item\n        quantity = quantities[i]\n        # Add the price of the item to the total price\n        total_price += price * quantity\n    # Return the total price\n    return total_price\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return s\n\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in \"aeiou\":\n            # Convert the vowel to uppercase\n            modified_string += char.upper()\n        else:\n            # Append the character as it is\n            modified_string += char\n\n    # Return the modified string\n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[1]  # Extract the date and time part\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\nThe function `extract_latest_versions` takes a list of dependencies as input, where each dependency is a tuple containing the package name and the version number. It then iterates over each dependency, extracts the version number, and compares it with the latest version stored in the `latest_versions` dictionary for the corresponding package name. If the current version is newer, it updates the dictionary with the new version. Finally, it returns the dictionary containing the latest version for each package name."}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: List and exponent values must be numbers\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: application [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  -{option}, --{option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subsequence_length = len(subsequence)\n    for i in range(len(sequence) - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n    return count\n\nsequence_of_characters = \"Please find the number occurrences this string\"\nspecific_subsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if h == 0:\n        return 0\n    if h < 0:\n        h = -h\n        if t < 0:\n            t = -t\n        else:\n            return -dividir(h, t)\n    if t < 0:\n        t = -t\n        return -dividir(h, t)\n    return dividir_positivos(h, t)\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy]\n\n    # Adjust the number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two pointers, one at the start and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    # Create a new array to store the rearranged elements\n    rearranged_arr = []\n    # Iterate through the array, placing the larger element at the start and the smaller element at the end\n    while left <= right:\n        rearranged_arr.append(arr[right])\n        rearranged_arr.append(arr[left])\n        left += 1\n        right -= 1\n    # If the array has an odd number of elements, add the middle element to the end of the rearranged array\n    if len(arr) % 2 != 0:\n        rearranged_arr.append(arr[len(arr) // 2])\n    return rearranged_arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(min(3, len(lst))):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    output_string = ', '.join(sorted_fruit_list)\n\n    return output_string\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Check if the page number is valid\n    if page_number < 1:\n        raise ValueError(\"Page number must be greater than 0\")\n\n    # Calculate the start and end index of the items for the given page number\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # Check if the page number is out of range\n    if start_index >= len(items):\n        raise ValueError(\"Page number is out of range\")\n\n    # Return the paginated list of items\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        digit = int(n_str[i])\n        temp = digit * 2 + carry\n        carry = temp // 10\n        result.append(str(temp % 10))\n    if carry > 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"left\": (0.0, 0.0, 0.0),\n        \"right\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.0),\n        \"down\": (0.0, 0.0, 0.0),\n        \"front\": (0.0, 0.0, 0.0),\n        \"back\": (0.0, 0.0, 0.0),\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None"}
{"task_id": "valid/142", "completion": "\n    common_elements = [x for x in list1 if x in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]"}
{"task_id": "valid/143", "completion": "\n\n    The output of the code snippet is:\n    The quiz system allows multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is not set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does not allow multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system allows multiple answers.\n    The zoom level is set to 2.\n    \"\"\"\n    \"\"\"\n    The quiz system does"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    sentence = sentence.replace(' ', '')\n    sentence = ''.join([char for char in sentence if char not in vowels])\n    return sentence\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a.keys():\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b.keys():\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in merged.keys():\n        if isinstance(merged[key], dict):\n            merged[key] = merge_objects(merged[key], {})\n    return merged\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    # Check if n is greater than the length of the list\n    if n > len(lst):\n        return \"Error: n is greater than the length of the list\"\n    # Use heapq.nsmallest to find the N smallest items in the list\n    smallest_items = heapq.nsmallest(n, lst)\n    return smallest_items\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 1 == 0 and x > 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
