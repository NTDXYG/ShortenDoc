{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1].replace(' ', ''))\n                start = i+1\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number % 1\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(number - mean) for number in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depth = 0\n    max_depths = []\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n\n        if char == ' ':\n            max_depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n\n    max_depths.append(max_depth)\n\n    return max_depths\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    max_list = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set(string.lower())\n    return len(distinct_characters)\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_string = music_string.split()\n    beats = []\n    for note in music_string:\n        note_beats = 0\n        if note == 'o':\n            note_beats = 4\n        elif note == 'o|':\n            note_beats = 2\n        elif note == '.|':\n            note_beats = 1\n        beats.append(note_beats)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n        else:\n            counts[num] -= 1\n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Last coefficient must not be zero\")\n\n    # Newton's method\n    x = 0.0\n    while abs(poly(xs, x)) > 1e-6:\n        x = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n    return x\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in divisible_three])\n    result = l.copy()\n    for i, value in zip(divisible_three, sorted_values):\n        result[i] = value\n    return result\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_index_values.pop(0))\n        else:\n            result.append(l[i])\n    return result\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i - 1)\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        start = i + 1\n        end = len(l) - 1\n        while start < end:\n            sum = l[i] + l[start] + l[end]\n            if sum < 0:\n                start += 1\n            elif sum > 0:\n                end -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    # Your code goes here\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    fib_sequence = [0, 0, 2, 0]\n    if n < 4:\n        return fib_sequence[n]\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n    return fib_sequence[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0 = s0.replace(\" \", \"\")\n    s1 = s1.replace(\" \", \"\")\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_minus_1 = 1\n        fibfib_n_minus_2 = 0\n        fibfib_n_minus_3 = 1\n        for _ in range(3, n + 1):\n            fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_3\n            fibfib_n_minus_1, fibfib_n_minus_2, fibfib_n_minus_3 = fibfib_n, fibfib_n_minus_1, fibfib_n_minus_2\n        return fibfib_n\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    # split the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split()[::2])\n    # subtract the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [smallest_even_node[1], smallest_even_node[0]]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if q != q[::-1]:\n        return False\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) >= 3 and all(is_prime(f) for f in factors):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n    return x == 1\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = round(a ** (1. / 3))\n    return x * x * x == a or (x + 1) * (x + 1) * (x + 1) == a or (x - 1) * (x - 1) * (x - 1) == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_num = \"2357BDF\"\n    count = 0\n    for i in num:\n        if i in hex_num:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    binary = 'db' + binary + 'db'\n    return binary\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) != 3:\n        return False\n    return len(set(s)) == 3\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    # your code here\n    grades_letters = []\n    for grade in grades:\n        if grade == 4.0:\n            grades_letters.append('A+')\n        elif grade > 3.7:\n            grades_letters.append('A')\n        elif grade > 3.3:\n            grades_letters.append('A-')\n        elif grade > 3.0:\n            grades_letters.append('B+')\n        elif grade > 2.7:\n            grades_letters.append('B')\n        elif grade > 2.3:\n            grades_letters.append('B-')\n        elif grade > 1.7:\n            grades_letters.append('C+')\n        elif grade > 1.3:\n            grades_letters.append('C')\n        elif grade > 0.7:\n            grades_letters.append('C-')\n        elif grade > 0.0:\n            grades_letters.append('D')\n        else:\n            grades_letters.append('E')\n    return grades_letters\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return 9 * 10 ** (n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_num = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_num)\n    return bin(sum_digits)[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort()\n        result.append(''.join(chars))\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n        return array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char.lower())\n            encrypted_string += chr((char_code - 97 + 2*2) % 26 + 97) if char.islower() else chr((char_code - 65 + 2*2) % 26 + 65)\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    return S.count(\". I\") + S.count(\"? I\") + S.count(\" I\")\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += chr(ord(char) + 2) if char.islower() else chr(ord(char) - 2)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    return sum_digits(max(primes))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    lower_case = all(key.islower() for key in dict.keys())\n    upper_case = all(key.isupper() for key in dict.keys())\n    return lower_case or upper_case\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    # get the unit digits of the numbers\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n\n    # multiply the unit digits\n    result = a_unit_digit * b_unit_digit\n\n    return result\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    stones = n\n    levels = []\n    for i in range(n):\n        levels.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return levels\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', ' ').split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted(n for n in x if has_even_digit(n))\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n\n    if arr:\n        arr = [i for i in arr if 1 <= i <= 9]\n        arr.sort(reverse=True)\n\n        while arr:\n            num = arr.pop(0)\n            if num == 9:\n                result.append(num_names[num])\n            elif num >= 5:\n                result.append(num_names[num][0] + 'Five' + num_names[num][1:])\n            elif num == 4:\n                result.append(num_names[num] + 'Three')\n            elif num == 3:\n                result.append(num_names[num] + 'Two')\n            elif num == 2:\n                result.append(num_names[num] + 'One')\n            else:\n                result.append(num_names[num])\n\n    return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_numbers(n):\n        if n == 1:\n            return 1\n        else:\n            return n + sum_numbers(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(is_palindrome(i) and i % 2 == 0 for i in range(1, n+1))\n    odd_count = sum(is_palindrome(i) and i % 2 == 1 for i in range(1, n+1))\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Write your code here\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    for ch in c:\n        s = s.replace(ch, '')\n    return (s, s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {i+1} of the {i+1}nput.\")\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # flatten the grid\n    flatten_grid = [item for sublist in grid for item in sublist]\n    # count the number of 1s in the grid\n    num_wells = flatten_grid.count(1)\n    # calculate the number of times you need to lower the buckets\n    return math.ceil(num_wells / capacity)\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    s1, s2 = lst\n    if s1.count('(') < s1.count(')') or s2.count('(') < s2.count(')'):\n        return 'No'\n    if s1.count(')') > s2.count('('):\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Write your code here\n    sum = 0\n    for i in range(k):\n        if arr[i] < 10:\n            sum += arr[i]\n        else:\n            while arr[i] > 0:\n                digit = arr[i] % 10\n                sum += digit\n                arr[i] = arr[i] // 10\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    # Initialize the list with the number\n    collatz = [n]\n\n    # While n is not 1\n    while n != 1:\n        # If n is even\n        if n % 2 == 0:\n            # Divide n by 2\n            n = n // 2\n        # If n is odd\n        else:\n            # Multiply n by 3 and add 1\n            n = n * 3 + 1\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            collatz.append(n)\n\n    # Return the list sorted in increasing order\n    return sorted(collatz)\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == \"\":\n        return False\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\nreturn False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # Your code here\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    else:\n        sign_product = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num < 0:\n                sign_product *= -1\n            elif num > 0:\n                sign_product *= 1\n            magnitude_sum += abs(num)\n        return sign_product * magnitude_sum\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_path = [float('inf')] * k\n    min_path_cells = [[] for _ in range(k)]\n\n    def dfs(x, y, k, path, cells):\n        if k == 0:\n            if path < min_path:\n                min_path[:] = path\n                min_path_cells[:] = cells\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                dfs(nx, ny, k - 1, path + [grid[nx][ny]], cells + [(nx, ny)])\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, k - 1, [grid[i][j]], [(i, j)])\n\n    return min_path_cells[k - 1]\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3])\n            else:\n                tri_seq.append(tri_seq[i - 2] + tri_seq[i - 3] + 1)\n        return tri_seq\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                return True\n            else:\n                stack.append(bracket)\n    return False\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum([math.ceil(i)**2 for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt[-1].isalpha() and txt[-2] == \" \":\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    arr = sorted(arr)\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_nums = [i for i in lst if i < 0]\n    pos_nums = [i for i in lst if i > 0]\n\n    if not neg_nums:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_nums)\n\n    if not pos_nums:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_nums)\n\n    return (largest_neg, smallest_pos)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Write your code here\n    for i in range(2, n, 2):\n        for j in range(i+2, n, 2):\n            for k in range(j+2, n, 2):\n                for l in range(k+2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # replace all consecutive underscores with -\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    # remove leading and trailing underscores\n    text = text.strip('_')\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    # Check if the file name is not empty\n    if not file_name:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n\n    # Check if the name is not empty\n    if not name:\n        return 'No'\n\n    # Check if the name contains no more than three digits\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    if (x_num * n_den) == (x_den * n_num):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(map(int, str(abs(n))))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0:\n            str_num = str(num)\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    # Initialize the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of triples\n    count = 0\n\n    # Iterate over the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the sum of the elements is a multiple of 3\n            if (a[i] + a[j]) % 3 == 0:\n                count += 1\n\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n"}
{"task_id": "HumanEval/149", "completion": "\n    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    odd_length_words.sort(key=lambda x: (len(x), x))\n    return odd_length_words\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 if i > 0 and i % 2 != 0 else 0 for i in lst])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(s-g) if s != g else 0 for s, g in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = None\n    strongest_strength = -float('inf')\n\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    def rotate(s):\n        return s[-1] + s[:-1]\n\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = rotate(b)\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # sort the sides\n    sides = sorted([a, b, c])\n\n    # check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    # your code here\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s[::-1] if c.isalpha()]) or s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
