{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    current_string = \"\"\n    depth = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n        elif char == \")\":\n            depth -= 1\n\n        current_string += char\n\n        if depth == 0 and current_string:\n            result.append(current_string)\n            current_string = \"\"\n\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                result.append(max_depth)\n            max_depth = 0\n\n    if max_depth > 0:\n        result.append(max_depth)\n\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string  # Fallback, should never happen\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = max(strings, key=len)\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_diff = abs(numbers[i] - numbers[j])\n            if current_diff < min_diff:\n                min_diff = current_diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"xs must have even number of coefficients and largest non zero coefficient\"\n    \n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    low, high = -100, 100  # Initial range\n    while high - low > 1e-10:\n        mid = (low + high) / 2\n        if poly(low) * poly(mid) <= 0:\n            high = mid\n        else:\n            low = mid\n    return low\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_prime = l.copy()\n    l_prime[::3] = sorted(l[::3])\n    return l_prime\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    seen = set()\n    unique_list = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            unique_list.append(item)\n    return sorted(unique_list)\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n ** 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base >= 10:\n        return \"Base number should be less than 10\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        a, b, c, d = 0, 1, 1, 2\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    for _ in range(n):\n        result = (2 * result) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == \"(\":\n            balance += 1\n        elif char == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Find the index of the word that represents the total number of fruits\n    total_index = words.index(\"->\")\n    \n    # Find the index of the word that represents the number of apples\n    apples_index = words.index(\"apples\")\n    \n    # Find the index of the word that represents the number of oranges\n    oranges_index = words.index(\"oranges\")\n    \n    # Extract the number of apples and oranges from the words list\n    apples = int(words[apples_index - 1])\n    oranges = int(words[oranges_index - 1])\n    \n    # Extract the total number of fruits from the words list\n    total = int(words[total_index + 1])\n    \n    # Calculate the number of mango fruits\n    mangos = total - apples - oranges\n    \n    # Return the number of mango fruits\n    return mangos\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    \n    if not even_nodes:\n        return []\n    \n    return list(min(even_nodes, key=lambda x: (x[0], x[1])))\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n    "}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    return lst1 if total1 <= total2 else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            factors += 1\n    return factors == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0:\n        return True\n    a = abs(a)\n    b = round(a ** (1. / 3.))\n    return b ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = [2, 3, 5, 11, 13, 17]\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    pass\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * int(str(10 ** (n - 1))[1:-1]) + 10 ** (n - 1)\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    else:\n        if sum(array[0:1]) % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            encrypted += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1] if lst[0] != lst[1] else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.strip() == \"\":\n            continue\n        if sentence.strip().endswith('!'):\n            boredoms += 1\n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the vowel 2 places ahead\n                new_char = chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n                # Swap case\n                encoded_message += new_char.swapcase()\n            else:\n                # Swap case\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    lower_case = all(key.islower() for key in dict.keys())\n    upper_case = all(key.isupper() for key in dict.keys())\n    return lower_case or upper_case\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10)\n    pass"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Your code here\n    return int(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    if n % 2 == 0:\n        for i in range(n):\n            pile.append(n + 2 * i)\n    else:\n        for i in range(n):\n            pile.append(n + 2 * i)\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    s = s.replace(\",\", \" \")\n    while \"  \" in s:\n        s = s.replace(\"  \", \" \")\n    return s.split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    elif y % 2 == 0:\n        return y\n    else:\n        return y - 1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = total // (m - n + 1)\n    return bin(average)\n"}
{"task_id": "HumanEval/104", "completion": "\n    even_digits = [num for num in x if any(int(digit) % 2 == 0 for digit in str(num))]\n    return sorted(even_digits)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    return False\n    pass\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_lst2 = [num for num in lst2 if num % 2 != 0]\n    \n    if len(even_lst1) + len(odd_lst2) >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    test = test.split()\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    max_val = max(dic.values())\n    return {k: v for k, v in dic.items() if v == max_val}\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return (s, s == s[::-1])\n    # your code here\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        result.append(f\"the number {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Your code here\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and is_balanced(lst[i] + lst[j]) or is_balanced(lst[j] + lst[i]):\n                return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(sorted(arr[:k], reverse=True)[:2])\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Add 1 to the list as it is always the last odd number in the sequence\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = end_min - start_max + 1\n\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * product\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    if N == 1:\n        return grid[0]\n    if N == 2:\n        return sorted(grid[0] + grid[1])\n    if N == 3:\n        return sorted(grid[0] + grid[1] + grid[2])\n    if N == 4:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3])\n    if N == 5:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4])\n    if N == 6:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5])\n    if N == 7:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6])\n    if N == 8:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7])\n    if N == 9:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8])\n    if N == 10:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8] + grid[9])\n    if N == 11:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8] + grid[9] + grid[10])\n    if N == 12:\n        return sorted(grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid["}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        trib = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n            else:\n                trib.append(trib[i - 1] - trib[i - 2] + trib[i - 3])\n        return trib\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(i**2 for i in [int(i) for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = -1\n    max_value = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max_value and (max_index == -1 or arr[i] < arr[max_index]):\n            max_index = i\n            max_value = arr[i]\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return (None, None)\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n        elif num > 0:\n            if min_pos is None or num < min_pos:\n                min_pos = num\n    return (max_neg, min_pos)\n"}
{"task_id": "HumanEval/137", "completion": "\n    # Your code here\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 8\n"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(1, n + 1):\n        result *= i * i\n    return result\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                result += \"-\" + str(space_count)\n            elif space_count > 0:\n                result += \"_\" * space_count\n            result += char\n            space_count = 0\n    if space_count > 2:\n        result += \"-\" + str(space_count)\n    elif space_count > 0:\n        result += \"_\" * space_count\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]{3}$', file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    # Your code here\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    result = []\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                result.append(num)\n    return len(result)\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [0] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] + 3 * i\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Your code here\n    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    odd_length_words.sort(key=len)\n    return odd_length_words\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    # Your code here\n    sum = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum * 2\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[1:] + b[0]\n            if b in a:\n                return True\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n    pass\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
