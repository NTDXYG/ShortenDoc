{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if temp:\n                stack.append(temp)\n                temp = \"\"\n            stack.append(char)\n        elif char == \")\":\n            temp += char\n            stack.append(temp)\n            temp = \"\"\n            while len(stack) > 0 and stack[-1] != \"(\":\n                temp = stack.pop() + temp\n                if len(stack) == 0:\n                    break\n            stack.pop()\n            result.append(temp)\n            temp = \"\"\n        else:\n            temp += char\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(number - mean) for number in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depth = 0\n    stack = []\n    depths = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            if len(stack) > max_depth:\n                max_depth = len(stack)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Mismatched parentheses\")\n            stack.pop()\n    if stack:\n        raise ValueError(\"Mismatched parentheses\")\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            depth = len(stack)\n            depths.append(depth)\n            stack.pop()\n\n    return depths\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_string = music_string.split()\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[1])\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    a, b, c = xs[-3:]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in divisible_three])\n    result = l.copy()\n    for i, value in zip(divisible_three, sorted_values):\n        result[i] = value\n    return result\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    sorted_l = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return sorted_l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        start = i + 1\n        end = len(l) - 1\n        while start < end:\n            sum = l[i] + l[start] + l[end]\n            if sum < 0:\n                start += 1\n            elif sum > 0:\n                end -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    # Your code goes here\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    fib_sequence = [0, 2, 0, 4]\n    if n < 4:\n        return fib_sequence[n]\n    for i in range(4, n + 1):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3] + fib_sequence[i - 4])\n    return fib_sequence[n]\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fibfib_n_minus_1 = 1\n        fibfib_n_minus_2 = 0\n        for _ in range(2, n + 1):\n            fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2\n            fibfib_n_minus_2 = fibfib_n_minus_1\n            fibfib_n_minus_1 = fibfib_n\n        return fibfib_n_minus_1\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    mangoes = int(s[4])\n    return mangoes - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value <= smallest_even_value:\n            if value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = i\n            elif i < smallest_even_index:\n                smallest_even_index = i\n    return [smallest_even_value, smallest_even_index] if smallest_even_value != float('inf') else []\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # check if the three sides can form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w:\n        if q == q[::-1]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) != 3:\n        return False\n\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    return product == a\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n    return x == 1\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = round(a ** (1. / 3))\n    return x * x * x == a or (x + 1) * (x + 1) * (x + 1) == a or (x - 1) * (x - 1) * (x - 1) == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_nums = \"2357BDF\"\n    count = 0\n    for i in num:\n        if i in hex_nums:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    binary = 'db' + binary + 'db'\n    return binary\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) != 3:\n        return False\n    return len(set(s)) == 3\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    # Your code here\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B')\n        elif gpa >= 2.7:\n            letter_grades.append('B+')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return 9 * 10 ** (n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_num = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_num)\n    return sum_digits\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if sum([array[0], array[-1]]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char.lower())\n            encrypted_char_code = (char_code - 96 + 2 * 2) % 26 + 96\n            encrypted_char = chr(encrypted_char_code)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    return S.count('.') + S.count('?') + S.count('I')\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += chr(ord(char) + 2).lower()\n            else:\n                if char.islower():\n                    encoded_message += chr(ord(char) + 2).upper()\n                else:\n                    encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_digits(max_prime)\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    return a_unit_digit * b_unit_digit\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 2\n        stones.append(n)\n    return stones\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', ' ').split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    even_digits = []\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(num)\n                break\n    return sorted(list(set(even_digits)))\n"}
{"task_id": "HumanEval/105", "completion": "\n    num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n\n    if len(arr) == 0:\n        return result\n\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n\n    for num in arr:\n        result.append(num_names[num])\n\n    return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    def sum_numbers(n):\n        if n == 0:\n            return 0\n        else:\n            return n + sum_numbers(n - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(is_palindrome(i) and i % 2 == 0 for i in range(1, n+1))\n    odd_count = sum(is_palindrome(i) and i % 2 == 1 for i in range(1, n+1))\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Write your code here\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i:] + arr[:i] == sorted(arr):\n                return True\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # Initialize an empty dictionary\n    histogram_dict = {}\n\n    # Split the string into a list of words\n    words = test.split()\n\n    # Iterate over the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in histogram_dict:\n            histogram_dict[word] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            histogram_dict[word] = 1\n\n    # Find the maximum count\n    max_count = max(histogram_dict.values())\n\n    # Iterate over the items in the dictionary\n    for key, value in histogram_dict.items():\n        # If the count is equal to the maximum count, add it to the result dictionary\n        if value == max_count:\n            histogram_dict[key] = value\n\n    return histogram_dict\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s==s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n        result.append(count)\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum if min_sum != float('inf') else max(nums)\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # flatten the grid\n    wells = [i for sublist in grid for i in sublist]\n    # sort the wells\n    wells.sort()\n    # calculate the total number of wells\n    total_wells = len(wells)\n    # calculate the total number of buckets\n    total_buckets = math.ceil(total_wells / capacity)\n    # calculate the total water to be extracted\n    total_water = sum(wells)\n    # calculate the total water that can be extracted with the buckets\n    total_bucket_water = total_buckets * capacity\n    # calculate the water to be extracted by the buckets\n    bucket_water = total_bucket_water - total_water\n    # return the number of times the buckets need to be lowered\n    return bucket_water\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count(\"1\")\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        count = 0\n        for ch in s:\n            if ch == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    def concat(s1, s2):\n        return [s1 + s2, s2 + s1]\n\n    s1, s2 = lst\n    return 'Yes' if any(is_good(s) for s in concat(s1, s2)) else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[::2])\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # sort the array in ascending order\n    arr.sort()\n    # return the sum of the first k elements\n    return sum(arr[:k])\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    sequence = collatz(n)\n    odd_numbers = [num for num in sequence if is_odd(num)]\n    return sorted(odd_numbers)\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == \"\":\n        return False\n    if len(date) != 5 or date[2] != \"-\":\n        return False\n    month, day = date.split(\"-\")\n    if not month.isdigit() or not day.isdigit():\n        return False\n    month, day = int(month), int(day)\n    if month < 1 or month > 12:\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # if the intersection is valid (start <= end), calculate its length\n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n    else:\n        intersection_length = 0\n\n    # check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    else:\n        result = 1\n        for num in arr:\n            if num < 0:\n                result *= -1\n            elif num > 0:\n                result *= 1\n            else:\n                return 0\n        return abs(result)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    moves = [(0, 1), (1, 0)]\n    grid = [[grid[j][i] for j in range(n)] for i in range(n)]\n    heap = [(grid[0][0], 0, 0, 0)]\n    while heap:\n        val, x, y, k = heapq.heappop(heap)\n        if k < n - 1:\n            dp[x][y][k + 1] = min(dp[x][y][k + 1], dp[x][y][k] + grid[k + 1][0])\n            heapq.heappush(heap, (dp[x][y][k + 1], x, y, k + 1))\n        if x < n - 1:\n            dp[x + 1][y][k] = min(dp[x + 1][y][k], dp[x][y][k] + grid[k][1])\n            heapq.heappush(heap, (dp[x + 1][y][k], x + 1, y, k))\n        if y < n - 1:\n            dp[x][y + 1][k] = min(dp[x][y + 1][k], dp[x][y][k] + grid[k][2])\n            heapq.heappush(heap, (dp[x][y + 1][k], x, y + 1, k))\n    return min(dp[n - 1][n - 1])\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        tri = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n            else:\n                tri.append(tri[i - 2] + tri[i - 3] + 1)\n        return tri\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum([math.ceil(i)**2 for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    txt = txt.strip()\n    if txt[-1].isalpha() and txt[-2] == \" \":\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_nums = [i for i in lst if i < 0]\n    pos_nums = [i for i in lst if i > 0]\n\n    if not neg_nums:\n        max_neg = None\n    else:\n        max_neg = max(neg_nums)\n\n    if not pos_nums:\n        min_pos = None\n    else:\n        min_pos = min(pos_nums)\n\n    return (max_neg, min_pos)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 4:\n        return False\n    else:\n        return n % 4 == 0\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # replace all 3 or more consecutive underscores with -\n    while '___' in text:\n        text = text.replace('___', '-')\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-z]{3}$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    x_val = x_num / x_den\n    n_val = n_num / n_den\n\n    product_val = x_val * n_val\n\n    if product_val.is_integer():\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        return sum(map(int, str(n)))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n) if a[i] % 3 == 0)\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    return tuple(planet for planet, orbit in planets.items() if start < orbit < end)\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    lst = [i for i in lst if len(i) % 2 != 0]\n    lst.sort()\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i > 0 and isinstance(i, int) and i % 2 != 0])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(i-j) if i != j else 0 for i, j in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.upper()\n    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        extension = extension.upper()\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(a) != len(b):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # sort the sides\n    sides = sorted([a, b, c])\n\n    # check if the triangle is right-angled\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        total = number + need\n        left = 0\n    else:\n        total = number + remaining\n        left = need - remaining\n    return [total, left]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code here\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n    return eval(expression)\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
