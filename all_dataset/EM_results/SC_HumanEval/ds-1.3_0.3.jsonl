{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = \"\"\n            else:\n                temp += \" \"\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(num - mean) for num in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_level = 0\n    current_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        if current_level == max_level:\n            result.append(max_level)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_values = []\n    max_value = float('-inf')\n    for num in numbers:\n        max_value = max(max_value, num)\n        max_values.append(max_value)\n    return max_values\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    return xor_result\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num]))\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[1])\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return [len(prime_factors(i)) for i in [2, 5]]\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    xs = [coeff for coeff in xs if coeff != 0]\n    xs.sort(reverse=True)\n    for x in range(-100, 100):  # arbitrary range\n        if round(poly(xs, x), 2) == 0:\n            return x\n    return None\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_prime = [i for idx, i in enumerate(l) if idx % 3 != 0]\n    l_prime.sort()\n\n    l_prime_idx = 0\n    for idx, i in enumerate(l):\n        if idx % 3 == 0:\n            l[idx] = l_prime[l_prime_idx]\n            l_prime_idx += 1\n\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            print(i)\n\nfizz_buzz(50)\n<jupyter_output>\n<empty_output>\n<jupyter_text>\nThe function `fizz_buzz(n: int)` takes an integer `n` as input and prints the numbers from 1 to `n-1` which are divisible by 11 or 13. The function does not return anything, it just prints the numbers.\n<jupyter_code>"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycling operation.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            break\n        if is_prime(fib_i):\n            yield fib_i\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) <= 1:\n        return False\n    else:\n        seen = set()\n        for num in l:\n            if -num in seen:\n                return True\n            seen.add(num)\n        return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        a, b = 0, 2\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return (pow(2, n, p) * pow(2, -n, p)) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) < 2:\n        return []\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouyAEIOUY\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    shift %= len(digits)\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    def to_ascii(c):\n        return ord(c.upper()) if c.isupper() else ord(c)\n\n    return sum(to_ascii(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Split the string into a list of strings\n    s = s.split()\n\n    # Initialize the count of apples and oranges\n    count_apples = 0\n    count_oranges = 0\n\n    # Iterate over the list of strings\n    for i in range(len(s)):\n        # If the string is a number\n        if s[i].isdigit():\n            # If the string is for apples\n            if \"apples\" in s[i-1]:\n                count_apples += int(s[i])\n            # If the string is for oranges\n            elif \"oranges\" in s[i-1]:\n                count_oranges += int(s[i])\n\n    # Return the number of mango fruits\n    return count_apples - count_oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values, key=lambda x: (x[1], x[0]))\n        return [smallest_even_value[1], smallest_even_value[0]]\n    else:\n        return []\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(len(lst)-1, -1, -1):\n        if c[i] > c[i+1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, max_weight):\n        return sum_of_elements(lst) <= max_weight and is_palindromic(lst)\n\n    return is_balanced(q, w)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    return x**(1.0/n) == int(x**(1.0/n))\n"}
{"task_id": "HumanEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) % 3 != 0:\n        return False\n\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) != 3:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade[0] == 4.0:\n                letter_grades.append('A+')\n            elif grade[0] > 3.7:\n                letter_grades.append('A')\n            elif grade[0] > 3.3:\n                letter_grades.append('A-')\n            elif grade[0] > 2.7:\n                letter_grades.append('B+')\n            elif grade[0] > 2.0:\n                letter_grades.append('B')\n            elif grade[0] > 1.7:\n                letter_grades.append('B-')\n            elif grade[0] > 1.3:\n                letter_grades.append('1.7')\n            elif grade[0] > 0.7:\n                letter_grades.append('C-')\n            elif grade[0] > 0.0:\n                letter_grades.append('C')\n            else:\n                letter_grades.append('D-')\n        return letter_grades\n\n    print(grade_equation([4.0, 3.7, 3.3, 2.7, 2.0, 1.7, 0.7, 0.0]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * 10 ** (n - 2)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_digits_in_binary(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum_digits_in_binary(N)\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n\n    def sort_string(s):\n        return ''.join(sorted(s))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j, num))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Your code here\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        if sum(array[0], array[-1]) % 2 == 0:\n            array.sort()\n        else:\n            array.sort(reverse=True)\n        return array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n\n        Helper function to shift a character by a certain amount\n        \"\"\"\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n\n    return ''.join(shift_char(c, 2) for c in s)\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in lst:\n        if num < first:\n            second, first = first, num\n        elif first < num < second:\n            second = num\n    if second == float('inf'):\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.split()\n    return len(S)\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_of_two(a, b):\n        return a + b\n\n    def check_sum(x, y, z):\n        return is_integer(sum_of_two(x, y)) and is_integer(sum_of_two(x, z)) and is_integer(sum_of_two(y, z))\n\n    return check_sum(x, y, z)\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n\n    def replace_vowels(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index + 2 < len(vowels):\n                return vowels[index + 2]\n            else:\n                return vowels[0]\n        else:\n            return char\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    keys = dict.keys()\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(n) if is_prime(i)]\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Convert the numbers to string to easily access the digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Initialize the product\n    product = 0\n\n    # Iterate over the digits of the first number\n    for digit_a in a_str:\n        # Initialize the current product\n        current_product = 0\n\n        # Iterate over the digits of the second number\n        for digit_b in b_str:\n            # Multiply the current product by the digit of the second number\n            current_product += int(digit_a) * int(digit_b)\n\n        # Add the current product to the total product\n        product += current_product\n\n    # Return the product modulo 100\n    return product % 100\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) if value % 1 == 0 else int(value) - 1\n        else:\n            return int(value) if value % 1 == 0 else int(value) + 1\n\n    return closest_integer(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            pile.append(next_even(pile[-1]))\n        else:\n            pile.append(next_odd(pile[-1]))\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    import re\n    words = re.split(',| ', s)\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    else:\n        return y\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n, m + 1):\n            total += i\n        avg = round(total / (m - n + 1))\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted(x for x in x if has_even_digit(x))\n"}
{"task_id": "HumanEval/105", "completion": "\n    def to_name(n):\n        if n == 1:\n            return \"One\"\n        elif n == 2:\n            return \"Two\"\n        elif n == 3:\n            return \"Three\"\n        elif n == 4:\n            return \"Four\"\n        elif n == 5:\n            return \"Five\"\n        elif n == 6:\n            return \"Six\"\n        elif n == 7:\n            return \"Seven\"\n        elif n == 8:\n            return \"Eight\"\n        elif n == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n\n    def sort_and_reverse(arr):\n        arr.sort()\n        arr.reverse()\n        return arr\n\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            num_str = to_name(num)\n            if num_str:\n                result.append(num_str)\n        else:\n            continue\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def count_nums_helper(arr, index, sum_digits):\n        if index == len(arr):\n            return sum_digits\n        else:\n            if arr[index] < 0:\n                return count_nums_helper(arr, index + 1, -sum_digits)\n            else:\n                return count_nums_helper(arr, index + 1, sum_digits + arr[index])\n\n    return count_nums_helper(arr, 0, 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if i < len(arr) - 1 and arr[i] > arr[i + 1]:\n            arr = arr[i+1:] + arr[:i+1]\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    for i in range(len(lst1)):\n        for j in range(i+1, len(lst1)):\n            if not is_even(lst1[i]) and is_even(lst1[j]):\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    def histogram(test):\n        hist = {}\n        for letter in test:\n            if letter in hist:\n                hist[letter] += 1\n            else:\n                hist[letter] = 1\n        return hist\n\n    test_list = list(test.split())\n    max_count = max(test_list.count(i) for i in test_list)\n    result = {i: test_list.count(i) for i in test_list if test_list.count(i) == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return (s, s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2 != 0:\n                count += 1\n        result.append(\"the number odd elements in the string \" + str(i) + \" of the input.\")\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_fill(grid, capacity):\n        count = 0\n        for row in grid:\n            if sum(row) > 0:\n                count += 1\n        return min(count, math.ceil(sum(grid) / capacity))\n\n    print(max_fill(grid, capacity))\n\nmax_fill([[0,0,1,0], []], 1)\nmax_fill([[0,0,0], [0,0,0]], 5)\nmax_fill([[0,0,0,0,0], [0,0,0,0,0]], 5)\nmax_fill([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x[0]), x[0]))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def is_n_consonants(word, n):\n        return count_consonants(word) == n\n\n    return [word for word in s.split() if is_n_consonants(word, n)]\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    s1 += s2\n\n    return is_balanced(s1)\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(i for i, j in enumerate(lst) if i % 2 == 0 and j % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n\n    # Your code here\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3*n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            if is_leap_year(year):\n                return 29\n            else:\n                return 28\n\n    def valid_date(date):\n        if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n            return False\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or day > days_in_month(month, year):\n            return False\n        return True\n\n    return valid_date(date)\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word for word in txt.lower().split(',') if word.islower() and sum(1 for c in word if c.isupper()) % 2 != 0]\n    else:\n        return [word for word in txt.lower().split() if word.islower() and sum(1 for c in word if c.isupper()) % 2 != 0]\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection(interval1, interval2):\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\n        if start > end:\n            return \"NO\"\n\n        if is_prime(end - start + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    print(intersection((1, 2), (2, 4)))\n    print(intersection((-1, 10, 4), (-5, 5)))\n\nintersection()\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    return sum(abs(x) for x in arr) * prod(x for x in arr if x != 0)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n\n    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    min_path = [float('inf')]*N\n    min_path_index = [-1]*N\n    path = []\n\n    def dfs(x, y, k):\n        if k == 0:\n            nonlocal min_path\n            if min_path[x] > sum(path):\n                min_path[x] = sum(path)\n                min_path_index[x] = x\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                visited[nx][ny] = True\n                path.append(grid[nx][ny])\n                dfs(nx, ny, k-1)\n                path.pop()\n                visited[nx][ny] = False\n\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            path.append(grid[i][j])\n            dfs(i, j, k-1)\n            path.pop()\n            visited[i][j] = False\n\n    return [grid[i][j] for i, j in zip(min_path_index, [i for i in range(N) if min_path[i] != float('inf')])]\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n        if n == 0:\n            return [3]\n        elif n == 1:\n            return [3, 3]\n        elif n == 2:\n            return [3, 3, 2]\n        else:\n            sequence = [3, 3, 2]\n            for i in range(3, n):\n                if i % 2 == 0:\n                    sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n                else:\n                    sequence.append(sequence[i-1] - sequence[i-2] - sequence[i-3])\n            return sequence\n\n    return tri(n)\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    def is_nested(string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return not stack\n\n    return is_nested(string)\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char.islower()\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    if not negatives and not positives:\n        return None, None\n    elif not negatives:\n        return None, max(positives)\n    elif not positives:\n        return min(negatives), None\n    else:\n        return max(negatives), min(positives)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(n):\n        try:\n            return float(n.replace(',', '.'))\n        except ValueError:\n            return None\n\n    a = convert_to_float(a)\n    b = convert_to_float(b)\n\n    if a is None or b is None:\n        return None\n\n    return max(a, b)\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n % 2 != 0:\n        return False\n    count = 0\n    for i in range(2, n + 1, 2):\n        if n - i == 0:\n            count += 1\n        elif n - i < 0:\n            break\n    if count == 4:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace multiple spaces with -\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    def check_file_name(file_name):\n        pattern = re.compile(r'^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$')\n        if pattern.match(file_name):\n            return 'Yes'\n        else:\n            return 'No'\n    return check_file_name(file_name)\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return result\n"}
{"task_id": "HumanEval/144", "completion": "\n    def simplify(x, n):\n        if isinstance(x, str) and \"/\" in x:\n            x = Fraction(x)\n        if isinstance(n, str) and \"/\" in n:\n            n = Fraction(n)\n        if isinstance(x, Fraction) and isinstance(n, Fraction):\n            return x.numerator == n.numerator and x.denominator == n.denominator\n        return False\n\n    from fractions import Fraction\n\n    print(simplify(\"1/5\", \"5/1\"))  # True\n    print(simplify(\"1/62/1\", \"5/1\"))  # False\n    print(simplify(\"7/1010/2\", \"10/2\"))  # True\n\n    # Note: This code will not work as expected for the last test case because the denominator is not a whole number.\n    # The function will return False for the last test case.\n\n    # To fix this, you can add a check to ensure that the denominator is a whole number.\n    # If the denominator is not a whole number, return False.\n\n    # Here is the corrected code:\n\n    def simplify(x, n):\n        if isinstance(x, str) and \"/\" in x:\n            x = Fraction(x)\n        if isinstance(n, str) and \"/\" in n:\n            n = Fraction(n)\n        if isinstance(x, Fraction) and isinstance(n, Fraction):\n            if x.denominator == n.denominator:\n                return x.numerator == n.numerator\n            else:\n                return False\n        return False\n\n    print(simplify(\"7/1010/2\", \"10/2\"))  # True\n\n    # Now, the function will return True for the last test case.\n\n    # Note: This code will not work as expected for the first test case because the numerator is not a whole number.\n    # The function will return False for the first test case.\n\n    # To fix this, you can add a check to ensure that the numerator is a whole number.\n    # If the numer"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [num for _, num in sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))]\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(num):\n        str_num = str(num)\n        if len(str_num) != 11:\n            return False\n        if str_num[0] in '13579' and str_num[1] in '13579' and str_num[2] in '02468' and str_num[3] in '13579' and str_num[4] in '13579' and str_num[5] in '02468' and str_num[6] in '13579' and str_num[7] in '13579' and str_num[8] in '02468' and str_num[9] in '13579' and str_num[10] in '13579':\n            return True\n        return False\n\n    return sum(is_special(num) for num in nums)\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i*i - i for i in range(1, n+1)]\n    return [(a[i], a[i+1], a[i+2]) for i in range(n-2) if a[i+2] % 3 == 0]\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        planets_between = [planet for planet in planets if planet > planet1 and planet < planet2]\n        planets_between.sort(reverse=True)\n        return tuple(planets_between)\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    odd_length_list = [word for word in lst if len(word) % 2 != 0]\n    odd_length_list.sort(key=len)\n    return odd_length_list\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_squares = 0\n    for num in lst:\n        if num[0] % 2 != 0 and isinstance(num[0], int) and num[0] > 0:\n            sum_squares += num[0]**2\n    return sum_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.replace(\" \", \"\")\n    max_strength = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/154", "completion": "\n    def is_substring(s1, s2):\n        return s1.find(s2) != -1\n\n    def rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n\n    return any(is_substring(a, r) for r in rotations(b))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the three sides can form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    max_unique_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique_count:\n            max_unique_count = len(set(word))\n            max_unique_word = word\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n"}
