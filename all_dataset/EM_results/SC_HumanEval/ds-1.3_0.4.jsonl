{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    max_level = 0\n    current_level = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n            result.append(current_level)\n        elif char == ')':\n            current_level -= 1\n            result.append(current_level)\n        elif char == '[':\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n            result.append(current_level)\n        elif char == ']':\n            current_level -= 1\n            result.append(current_level)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    note_lengths = []\n    for note in notes:\n        if note == 'o':\n            note_lengths.append(4)\n        elif note == 'o|':\n            note_lengths.append(2)\n        elif note == '.|':\n            note_lengths.append(1)\n    return note_lengths\n"}
{"task_id": "HumanEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[1])\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    xs = [coeff for coeff in xs if coeff != 0]\n    xs.sort(reverse=True)\n    for x in range(-100, 100):  # arbitrary range\n        y = poly(xs, x)\n        if y == 0:\n            return x\n    return None\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_prime = [l[i] for i in range(0, len(l), 3)]\n    l_prime.sort()\n    j = 0\n    for i in range(0, len(l), 3):\n        l[i] = l_prime[j]\n        j += 1\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo the cycling in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count, num, fib1, fib2 = 0, 0, 0, 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return fib2\n        num, fib1, fib2 = num + 1, fib2, fib1 + fib2\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    collisions = []\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                collisions.append((i, j))\n    return collisions\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) <= 1:\n        return False\n    else:\n        seen = set()\n        for num in l:\n            if -num in seen:\n                return True\n            seen.add(num)\n        return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        a, b = 0, 4\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return (pow(2, n, p) * pow(2, -n, p)) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) < 2:\n        return []\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    length = len(digits)\n    shift %= length\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split()\n    total_apples = int(fruits[0].split('-')[0])\n    total_oranges = int(fruits[0].split('-')[1])\n    mango_fruits = int(fruits[2])\n\n    if total_apples + total_oranges == n:\n        return mango_fruits\n    else:\n        return \"Invalid input\"\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [i for i in arr if i % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values)\n        smallest_index = arr.index(smallest_even_value)\n        return [smallest_even_value, smallest_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(len(lst)-1, -1, -1):\n        if c[lst[i]] > c[lst[i-1]]:\n            return lst[i]\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n\n    def sum_of_weights(lst):\n        return sum(lst)\n\n    return is_palindromic(q) and sum_of_weights(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n"}
{"task_id": "HumanEval/76", "completion": "\n    return x == n ** int(math.log(x) / math.log(n))\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1. / 3))\n        return root ** 3 == a\n\n    print(iscube(27))\n    print(iscube(-1725))\n    print(iscube(64))\n    print(iscube(0))\n    print(iscube(180))\n\n\niscube(27) ==> True\niscube(-1725) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if is_prime(int(num[i], 16)):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) % 3 != 0:\n        return False\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 2.7:\n                letter_grades.append('B-')\n            elif grade > 0.7:\n                letter_grades.append('C-')\n            elif grade == 0.0:\n                letter_grades.append('E')\n            else:\n                letter_grades.append('D')\n        return letter_grades\n\n    print(grade_equation([4.0, 3.5, 3.7]))\n\n\nnumerical_letter_grade()\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = string.split()\n    for word in words:\n        if is_prime(len(word)):\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    lst = [(i, j, lst[i][j]) for i in range(len(lst)) for j in range(len(lst[i]))]\n    lst.sort(key=lambda x: (x[0], x[1]))\n    return [(i, j, lst[i][j]) for i in range(len(lst)) if lst[i][2] == x]\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Your code here\n    if sum(array[0]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    def shift_down(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') - 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') - 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_down, s))\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in lst:\n        if num < first:\n            second, first = first, num\n        elif first < num < second:\n            second = num\n    if second == float('inf'):\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.split('. ')\n    count = 0\n    for s in S:\n        if 'bored' in s.lower():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and (x + y == z or x + z == y or y + z == x)\n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def replace_vowels(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            if c.isupper():\n                return vowels[(vowels.index(c.lower())+2)%5]\n            else:\n                return vowels[(vowels.index(c.lower())+2)%5].upper()\n        return c\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(max(primes))))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    keys_lower = all(key.islower() for key in dict.keys())\n    keys_upper = all(not key.islower() for key in dict.keys())\n\n    return keys_lower or keys_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n) if is_prime(i)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    # convert the numbers to string\n    a = str(a)\n    b = str(b)\n\n    # check if the number is negative\n    if a[0] == '-' or b[0] == '-':\n        return '-' + str(abs(int(a.rstrip('-') * int(b.rstrip('-')))))\n    else:\n        return str(int(a.rstrip('-') * int(b.rstrip('-')))\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) - 1\n        else:\n            return int(value)\n\n    return closest_integer(value)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 != 0:\n            pile.append(next_odd(pile[-1]))\n        else:\n            pile.append(next_even(pile[-1]))\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    else:\n        return y\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return round(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted(x for x in x if has_even_digit(x))\n"}
{"task_id": "HumanEval/105", "completion": "\n    def sort_and_reverse(arr):\n        arr.sort()\n        arr.reverse()\n        return arr\n\n    def convert_to_name(arr):\n        name_arr = []\n        for num in arr:\n            if num == 1:\n                name_arr.append(\"One\")\n            elif num == 2:\n                name_arr.append(\"Two\")\n            elif num == 3:\n                name_arr.append(\"Three\")\n            elif num == 4:\n                name_arr.append(\"Four\")\n            elif num == 5:\n                name_arr.append(\"Five\")\n            elif num == 6:\n                name_arr.append(\"Six\")\n            elif num == 7:\n                name_arr.append(\"Seven\")\n            elif num == 8:\n                name_arr.append(\"Eight\")\n            elif num == 9:\n                name_arr.append(\"Nine\")\n        return name_arr\n\n    arr = [i for i in arr if 1 <= i <= 9]\n    return convert_to_name(sort_and_reverse(arr))\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindromes = []\n    odd_palindromes = []\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes.append(i)\n            else:\n                odd_palindromes.append(i)\n\n    return len(even_palindromes), len(odd_palindromes)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def count_digits(n):\n        if n < 0:\n            return -1 * (n % 10)\n        else:\n            return n % 10\n\n    return sum(count_digits(i) for i in arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n    def shift_right(arr):\n        return arr[1:] + [arr[0]]\n\n    return check_sorted(arr) or any(check_sorted(shift_right(arr[:i]) + arr[i:]) for i in range(1, len(arr)))\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    for i in lst1:\n        if not is_even(i):\n            for j in lst2:\n                if is_even(j):\n                    return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    def split_string(s):\n        return s.split()\n\n    def count_letters(lst):\n        count_dict = {}\n        for letter in lst:\n            if letter in count_dict:\n                count_dict[letter] += 1\n            else:\n                count_dict[letter] = 1\n        return count_dict\n\n    def find_max_count(count_dict):\n        max_count = max(count_dict.values())\n        max_letters = [k for k, v in count_dict.items() if v == max_count]\n        return {f'{k} {max_count} {max_count}' for k in max_letters}\n\n    s = split_string(test)\n    count_dict = count_letters(s)\n    return find_max_count(count_dict)\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return (s, s == s[::-1])\n\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number odd elements {i}n the string {i} of the {i}nput.\" for i in lst]\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_fill(grid, capacity):\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0]*m for _ in range(n)]\n        dp2 = [[0]*m for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, m):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        for i in range(n-1, -1, -1):\n            for j in range(m-1, -1, -1):\n                if i+1 < n and j+1 < m:\n                    dp2[i][j] = min(dp2[i+1][j], dp2[i][j+1]) + grid[i][j]\n                else:\n                    dp2[i][j] = float('inf')\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                if dp2[i][j] <= capacity:\n                    res += math.ceil((capacity - dp2[i][j]) / (dp[i][j] - dp2[i][j]))\n        return res\n\n    # Test cases\n    print(max_fill([[0,0,1,0],[1,1,1,1]], 1)) # Output: 6\n    print(max_fill([[0,0,1,0],[1,1,1,1]], 2)) # Output: 4\n    print(max_fill([[0,0,1,0],[1,1,1,1]], 3)) # Output: 3\n    print(max_"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x[0]), x[0]))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Your code here\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # sum the first k elements\n    sum_k_elements = sum(arr[:k])\n\n    # return the sum\n    return sum_k_elements\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3*n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([i for i in sequence if i % 2 != 0])\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            if is_leap_year(year):\n                return 29\n            else:\n                return 28\n\n    def valid_date_format(date):\n        pattern = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$')\n        return bool(pattern.match(date))\n\n    def valid_date_values(date):\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > days_in_month(month, year):\n            return False\n        return True\n\n    return valid_date_format(date) and valid_date_values(date)\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word for word in txt.split(',') if word.islower() and sum(1 for c in word if c.isupper()) % 2 != 0]\n    else:\n        return [word for word in txt.split() if word.islower() and sum(1 for c in word if c.isupper()) % 2 != 0]\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)\n"}
{"task_id": "HumanEval/129", "completion": "\n\n    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    min_path = [float('inf')]*N\n    path = []\n\n    def dfs(x, y, k):\n        if k == 0:\n            nonlocal min_path, path\n            if min_path[x] <= grid[x][y]:\n                min_path[x] = grid[x][y]\n                path = sorted(path + [grid[x][y]])\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] < min_path[x]:\n                visited[nx][ny] = True\n                dfs(nx, ny, k-1)\n                visited[nx][ny] = False\n\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            dfs(i, j, k-1)\n            visited[i][j] = False\n\n    return path\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 1]\n        elif n == 2:\n            return [0, 1, 1]\n        else:\n            sequence = [0, 1, 1]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n                else:\n                    sequence.append(sequence[i - 1] - sequence[i - 2] - sequence[i - 3])\n            return sequence\n\n    return tri(n)\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(n ** 0.5)) ** 2 for n in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    if not txt[-1].isalpha():\n        return False\n    if len(txt.split()) > 0:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            for j in range(0, i):\n                if arr[j] > arr[i]:\n                    return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n\n    if not negatives and not positives:\n        return None, None\n    elif not negatives:\n        return None, min(positives)\n    elif not positives:\n        return max(negatives), None\n    else:\n        return max(negatives), min(positives)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(n):\n        try:\n            return float(n.replace(',', '.'))\n        except ValueError:\n            return None\n\n    a = convert_to_float(a)\n    b = convert_to_float(b)\n\n    if a is None or b is None:\n        return None\n\n    return a if a > b else b if b > a else None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\"   \", \"  \")\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    pattern = re.compile(r'^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$')\n    if pattern.match(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Initialize an empty list to store the prime words\n    prime_words = []\n\n    # Iterate over the words\n    for word in words:\n        # Check if the length of the word is a prime number\n        if is_prime(len(word)):\n            # If it is, add it to the list\n            prime_words.append(word)\n\n    # Join the prime words with a space and return the result\n    return ' '.join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n\n    def simplify(x, n):\n        if isinstance(x, str) and \"/\" in x:\n            x = int(x.split(\"/\")[0])\n            n = int(x.split(\"/\")[1])\n        if isinstance(n, str) and \"/\" in n:\n            n = int(n.split(\"/\")[0])\n        if isinstance(x, int) and isinstance(n, int):\n            return x * n\n        else:\n            return False\n\n    print(simplify(x, n))\n\n\nsimplify(\"1/55/1\", \"1/6\")\nsimplify(\"1/6\", \"7/10\")\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=sum_of_digits)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(n):\n        return n > 10 and n % 10 % 2 == 1\n\n    return [n for n in nums if is_special(n)]\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * 3 for i in range(1, n + 1)]\n    return a\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    except ValueError:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        lst = [i for i in lst if len(i) % 2 != 0]\n        lst.sort(key=len)\n        return lst\n\n    print(list_sort([\"aaa\", \"a\", \"bb\", \"ba\", \"cd\"]))\n\nlist_sort([\"aaa\", \"a\", \"bb\", \"ba\", \"cd\"])\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_squares = 0\n    for num in lst:\n        if num % 2 != 0 and isinstance(num, int) and num >= 0:\n            sum_squares += num ** 2\n    return sum_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    strength = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n    max_strength = max(strength)\n    strongest_extensions = [ext for idx, ext in enumerate(extensions) if strength[idx] == max_strength]\n    strongest_extension_name = strongest_extensions[0] if strongest_extensions else None\n    return f'{class_name}.{strongest_extension_name}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    def rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n\n    return any(rot in a for rot in rotations(b))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even = 0\n    odd = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_word = word\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            result += i.swapcase()\n        else:\n            result += i[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n"}
