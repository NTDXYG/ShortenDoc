{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    result = []\n    stack = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if stack:\n                result.append(i - stack.pop() + 1)\n            else:\n                raise ValueError('Unbalanced parentheses')\n    if stack:\n        raise ValueError('Unbalanced parentheses')\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(min(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert strings to binary lists\n    a_bin = list(map(int, a))\n    b_bin = list(map(int, b))\n\n    # Pad shorter string with leading zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = [0] * (max_len - len(a_bin)) + a_bin\n    b_bin = [0] * (max_len - len(b_bin)) + b_bin\n\n    # Perform XOR operation\n    result = [a_bin[i] ^ b_bin[i] for i in range(max_len)]\n\n    # Convert result to string and reverse it\n    result_str = ''.join(map(str, result))[::-1]\n\n    return result_str\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a * b) // greatest_common_divisor(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_notes = music_string.split()\n    music_notes = [note for note in music_notes if note != '']\n    music_notes = [note.replace('.', '') for note in music_notes]\n    music_notes = [note.replace('|', '') for note in music_notes]\n    music_notes = [int(note) for note in music_notes]\n    music_notes = list(set(music_notes))\n    music_notes.sort(reverse=True)\n    return music_notes\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: number_dict[x], reverse=True))\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers\")\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers][::-1]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(list(set(numbers)), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) != 2:\n        raise ValueError(\"xs must have two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs[0] must not be zero\")\n    if xs[1] == 0:\n        raise ValueError(\"xs[1] must not be zero\")\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    count = 0\n    i = 0\n    while count < n:\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return int(\"\".join(str(d) for d in digits[::-1]))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib4_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n        return str(fib4_list[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    return True"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c in \"aeiou\")\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Write your code here\n    pass\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return []\n    \n    # Initialize variables to store the smallest odd value and its index\n    smallest_odd_value = float('inf')\n    smallest_odd_index = -1\n    \n    # Iterate through the array to find the smallest odd value and its index\n    for i, value in enumerate(arr):\n        if value % 2 != 0 and value < smallest_odd_value:\n            smallest_odd_value = value\n            smallest_odd_index = i\n    \n    # If no odd value was found, return an empty list\n    if smallest_odd_index == -1:\n        return []\n    \n    # Return the index and the smallest odd value\n    return [smallest_odd_index, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the smallest integer that has a frequency greater than or equal to its value\n    for num in sorted(freq_dict.keys()):\n        if freq_dict[num] > num:\n            return num\n    \n    # If no such integer exists, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [max(lst), min(lst)]\n    else:\n        return [max(lst)] + strange_sort_list(lst[:lst.index(max(lst))] + lst[lst.index(max(lst)) + 1:]) + [min(lst)] + strange_sort_list(lst[:lst.index(min(lst))] + lst[lst.index(min(lst)) + 1:])\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if sum(q) % 2 != 0:\n        return False\n    if q != q[::-1]:\n        return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize the count of changes needed\n    changes = 0\n\n    # Iterate over the array from both ends\n    i, j = 0, len(arr) - 1\n    while i < j:\n        # If the elements are not equal, increment the count of changes\n        if arr[i] != arr[j]:\n            changes += 1\n\n        # Move towards the center of the array\n        i += 1\n        j -= 1\n\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    pass"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == n:\n        return True, 1\n    if n == 1:\n        return False, None\n    if x % n != 0:\n        return False, None\n    power = 1\n    while n ** power < x:\n        power += 1\n    if n ** power == x:\n        return True, power\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a**0.3333333333333333 == int(a**0.3333333333333333)\n"}
{"task_id": "EvoEval/78", "completion": "\n    primes = ['2', '3', '5', '7', 'B', 'D', 'F']\n    count = 0\n    for i in num:\n        if i not in primes:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Write your code here\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade == 2.0:\n            letter_grades.append('C+')\n        elif grade == 1.7:\n            letter_grades.append('C')\n        elif grade == 1.3:\n            letter_grades.append('C-')\n        elif grade == 0.7:\n            letter_grades.append('D+')\n        elif grade == 0.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Check if the length of the string is a prime number\n    if is_prime(len(string)):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 2)) + starts_one_ends(n - 1)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:].upper()\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(word, reverse=True) for word in s.split())\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    array_copy = array.copy()\n    \n    # Remove any duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order if the sum of the first and last index values is odd\n    if (array_copy[0] + array_copy[-1]) % 2 != 0:\n        array_copy.sort()\n    # Sort the array in descending order if the sum of the first and last index values is even\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(reverse=True)\n    return lst[1] if lst[0] != lst[1] else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(1 for word in S.split() if word == \"boredom\" and S.split()[S.split().index(word)-1] == \"I\")\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 3)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            if key.islower() != key.isupper():\n                return False\n        return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\ndef multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
