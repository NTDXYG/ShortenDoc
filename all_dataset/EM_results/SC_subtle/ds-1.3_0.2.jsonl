{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            result.append(temp)\n            temp = ''\n        else:\n            temp += char\n        if len(stack) == 0:\n            temp = ''\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = [abs(i - median) for i in numbers]\n    return median, sum(mad) / len(mad)\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return numbers[:-1] + [delimeter] + intersperse(numbers[-1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    # Convert the result back to string and reverse it\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // math.gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return sorted(result, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return (numbers[-1], numbers[-2])\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return [prime_factors(i) for i in [2, 5]]\n"}
{"task_id": "EvoEval/26", "completion": "\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return \"Invalid Exclusive Case\"\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) != 2:\n        raise ValueError(\"xs must have 2 coefficients\")\n    if xs[1] == 0:\n        raise ValueError(\"xs[1] must not be zero\")\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime[j]\n            j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int):\n        return str(n).count(str(digit))\n\n    result = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            result += count_digit(i, 8)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        elif fib_i > 2 and is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) <= 1:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '4'\n    else:\n        a, b, c, d = 0, 0, 2, 4\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return str(d)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return m + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            elif bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            elif bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-3] + fibfib_list[-2] - fibfib_list[-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    length = len(x_str)\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n    return sum(ord(c) for c in s if c.islower() and c.isdigit())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings\n    s = s.split(\", \")\n\n    # Convert the string numbers to integers\n    s[0] = int(s[0].split()[0])\n    s[2] = int(s[2].split()[0])\n\n    # Calculate the total number of fruits\n    total_fruits = s[0] + s[2]\n\n    # Calculate the number of mango fruits\n    mango_fruits = total_fruits - n\n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if not odd_values:\n        return []\n    else:\n        smallest_odd_value = min(odd_values)\n        smallest_odd_value_index = arr.index(smallest_odd_value)\n        return [smallest_odd_value_index, smallest_odd_value]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c)+1):\n        if i in c and c[i] > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_max_possible_weight(weight, sum_of_elements):\n        return weight >= sum_of_elements\n\n    return is_palindrome(q) and is_even(sum_of_elements(q)) and is_max_possible_weight(w, sum_of_elements(q))\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) > count_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 2 and factors[0]**2 == a and factors[1]**2 == a:\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x < 1 or n < 1:\n        return (False, None)\n\n    i = 0\n    while x > 1:\n        x /= n\n        i += 1\n\n    if x == 1:\n        return (True, i)\n    else:\n        return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    non_prime_hex_digits = ['0', '1', '4', '6', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    count = 0\n    for digit in num:\n        if digit in non_prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    for i in range(3):\n        if s[i] == s[i+1]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+ ')\n            elif grade > 3.7:\n                letter_grades.append('A ')\n            elif grade > 3.3:\n                letter_grades.append('A- ')\n            elif grade > 3.0:\n                letter_grades.append('B+ ')\n            elif grade > 2.7:\n                letter_grades.append('B ')\n            elif grade > 2.3:\n                letter_grades.append('B- ')\n            elif grade > 1.7:\n                letter_grades.append('1.7 ')\n            elif grade > 1.3:\n                letter_grades.append('C- ')\n            elif grade > 0.7:\n                letter_grades.append('C ')\n            elif grade > 0.0:\n                letter_grades.append('D ')\n            else:\n                letter_grades.append('E ')\n        return letter_grades\n\n    return grade_equation(grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string.replace(' ', '').replace('\\n', ''):\n        length += 1\n\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 - (9 * (10 ** (n - 2)))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_digits(N))[2:]\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s, key=lambda c: ord(c)))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    lst = [i for i in lst if i != x]\n    lst = [(i, j) for i, j in enumerate(lst) if j == x]\n    lst.sort(key=lambda x: (-x[0], x[1]))\n    return lst\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n\n        Helper function to shift a character by a certain amount\n        \"\"\"\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n\n    return ''.join(shift_char(c, 2) for c in s)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return max_val\n    else:\n        return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        if sentence.startswith(\"I boredom\"):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and sum_abs(x, y, z) == sum_abs(y, z, x)\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n\n    def replace_vowels(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index + 3 < len(vowels):\n                return vowels[index + 3]\n            else:\n                return vowels[index + 3 - len(vowels)]\n        else:\n            return char\n\n    return ''.join(map(swap_case, map(replace_vowels, message)))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    a_unit = int(a_str[-1])\n    b_unit = int(b_str[-1])\n    return a_unit * b_unit\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) if value % 1 == 0 else int(value) - 1\n        else:\n            return int(value) if value % 1 == 0 else int(value) + 1\n\n    return closest_integer(value)\n"}
