{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp = ''\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(temp)\n        else:\n            temp += char\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance <= 0:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median_absolute_deviation_around_median(numbers, median)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) == 0:\n        return [delimeter]\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    max_depth = 0\n    cur_depth = 0\n    max_depths = []\n\n    for char in paren_string:\n        if char == '(':\n            cur_depth += 1\n            if cur_depth > max_depth:\n                max_depth = cur_depth\n        elif char == ')':\n            cur_depth -= 1\n\n        if char == ' ':\n            max_depths.append(max_depth)\n            max_depth = cur_depth = 0\n\n    max_depths.append(max_depth)\n\n    return max_depths\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_numbers += number\n            product_numbers *= number\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Compute the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Compute the least common multiple of a and b\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_characters = set(string)\n    return len(distinct_characters)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    return sorted([beats_per_note[note] for note in music_string], reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return numbers[-1], numbers[-2]\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    if range_val == 0:\n        return [0.0] * len(numbers)\n\n    return [(n - min_val) / range_val for n in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    even_integers = []\n    for value in values:\n        if isinstance(value, int) and value % 2 == 0:\n            even_integers.append(value)\n    return even_integers\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.reverse()\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    else:\n        raise ValueError(\"Invalid value for exclusive_case. It should be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b, c = xs[0], xs[1], xs[2]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    divisible_three = [i for i in range(len(l)) if i % 3 == 0]\n    divisible_three_values = sorted([l[i] for i in divisible_three], reverse=True)\n    result = [l[i] if i % 3 != 0 else divisible_three_values.pop(0) for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_el = l[0]\n    for el in l:\n        if el < min_el:\n            min_el = el\n    return min_el\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)], reverse=True)\n    result = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the cars\n    left_cars = [0] * n\n    right_cars = [0] * (2 * n)\n\n    # Initialize the collisions\n    collisions = []\n\n    # Simulate the race\n    for t in range(1, 1000000):\n        # Move the cars\n        for i in range(n):\n            left_cars[i] = max(left_cars[i], right_cars[2 * i] if 2 * i < len(right_cars) else 0)\n            if 2 * i + 1 < len(right_cars):\n                right_cars[2 * i + 1] = max(right_cars[2 * i + 1], left_cars[i] if i < len(left_cars) else 0)\n\n        # Check for collisions\n        for i in range(n):\n            if left_cars[i] == right_cars[2 * i]:\n                collisions.append((t, i, 2 * i))\n\n    return collisions\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Your code here\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * base + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    fib_sequence = ['0', '0', '1', '1']\n    for i in range(4, n):\n        fib_sequence.append(str(int(fib_sequence[i - 1]) + int(fib_sequence[i - 2]) + int(fib_sequence[i - 3]) + int(fib_sequence[i - 4])))\n    return fib_sequence[-1]\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (n + q) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Negative arguments are not allowed\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return n + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack[-1] != \"[\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return -1\n    elif n == 2:\n        return 1\n    else:\n        fib_minus_3 = 0\n        fib_minus_2 = -1\n        fib_minus_1 = 1\n        for _ in range(3, n + 1):\n            fib_current = fib_minus_2 + fib_minus_1 + fib_minus_3\n            fib_minus_3 = fib_minus_2\n            fib_minus_2 = fib_minus_1\n            fib_minus_1 = fib_current\n        return fib_minus_1\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    mangoes = int(s[4])\n    return mangoes + n - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 1 and num < smallest_odd:\n            smallest_odd = num\n            smallest_index = i\n        elif num % 2 == 1 and num == smallest_odd and i < smallest_index:\n            smallest_index = i\n    if smallest_odd == float('inf'):\n        return []\n    else:\n        return [smallest_index, smallest_odd]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    m = 1\n    while True:\n        if c[m] < m and any(v >= m for v in c.values()):\n            return m\n        m += 1\n        if m > max(c.keys()):\n            return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) % 2 == 0 and sum(q) < w:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    left, right = 0, n - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    return lst1 if sum(len(i) for i in lst1) > sum(len(i) for i in lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) < 4:\n        return False\n\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    return product == a\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0, 1, 1\n    for i in range(1, x):\n        if n ** i == x:\n            return True, i, n, n ** i\n        elif n ** i > x:\n            return False, None, None, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    x = round(a ** (1. / 3))\n    return x * x * x == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_nums = \"0123456789ABCDEF\"\n    prime_hex_nums = \"2357BDF\"\n    count = 0\n    for i in num:\n        if i not in prime_hex_nums:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    binary_str = 'db' + binary + 'bd'\n    return binary_str\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Your code here\n    grade_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B', 2.7: 'B-', 2.3: 'C', 2.0: 'C-', 1.7: 'D', 1.3: 'D-', 0.0: 'E'}\n    grades.sort()\n    grades = [grade_dict[key] for key in grade_dict.keys() if key <= grades[-1]]\n    return grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    return 2 * (n-1)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # write your code in Python 3.6\n    digits = [int(d) for d in str(N)]\n    return sum(digits)\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort(reverse=True)\n        result.append(''.join(chars))\n    return ' '.join(result)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if (array[0] + array[-1]) % 2 == 0:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_s = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_s += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted_s += char\n    return encrypted_s\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count(\"boredom\")\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == abs(z) or x + z == abs(y) or y + z == abs(x):\n            return True\n    return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n                else:\n                    encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n            else:\n                if char.islower():\n                    encoded_message += chr((ord(char) - 97) % 26 + 97)\n                else:\n                    encoded_message += chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(digit) for digit in str(min(primes)))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_case_keys = [key.lower() for key in dict.keys()]\n    if len(lower_case_keys) == len(dict):\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    return a_unit_digit * b_unit_digit\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n\n"}
