{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    # Initialize an empty string to build the current group\n    current_group = ''\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == '(':\n            balance += 1\n            # If the balance is 1, it means we are starting a new group, so add the current group to the list and reset it\n            if balance == 1:\n                separated_groups.append(current_group)\n                current_group = ''\n        # If the character is a close parenthesis, decrement the balance\n        elif char == ')':\n            balance -= 1\n            # If the balance is 0, it means we have closed the current group, so add it to the list and reset it\n            if balance == 0:\n                separated_groups.append(current_group)\n                current_group = ''\n        # If the character is not a parenthesis, add it to the current group\n        else:\n            current_group += char\n    # If there is a remaining group, add it to the list\n    if current_group:\n        separated_groups.append(current_group)\n    # Sort the list of groups in ascending alphabetical order\n    separated_groups.sort()\n    # Return the list of separated groups\n    return separated_groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance == 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n    \n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    \n    # Calculate the absolute differences between each number and the median\n    absolute_differences = [abs(num - median) for num in numbers]\n    \n    # Sort the absolute differences\n    absolute_differences.sort()\n    \n    # Calculate the median of the absolute differences\n    mad = absolute_differences[len(absolute_differences) // 2] if len(absolute_differences) % 2 else (absolute_differences[len(absolute_differences) // 2 - 1] + absolute_differences[len(absolute_differences) // 2]) / 2\n    \n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            stack.pop()\n            depth -= 1\n        else:\n            if stack:\n                result.append(depth)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    prefix = ''\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if is_palindrome(prefix):\n            break\n    suffix = string[::-1]\n    return prefix + suffix\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (int(x) + int(y)) % 2 else '0' for x, y in zip(a, b[::-1]))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return sorted(prefixes, key=len, reverse=True)  # longest to shortest\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # set() removes duplicates, len() counts the number of elements in the set"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    numbers_list = numbers.split()\n    # Sort the list in descending order\n    numbers_list.sort(key=lambda x: int(x[:-1]), reverse=True)\n    # Join the list back into a string with spaces in between\n    sorted_numbers = ' '.join(numbers_list)\n    return sorted_numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the numbers that occur only once\n    unique_numbers = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_numbers.append(num)\n\n    # Return the list in the reverse order\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char for char in string])\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    a, b = xs[0], xs[1]\n    if a == 0:\n        raise ValueError(\"xs must have non-zero constant term\")\n    return -b / a\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0], reverse=True)[j] for i, x in enumerate(l) for j in range(len([y for y in l if i % 3 == 0]))]  # noqa: E501\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else sorted(l)[i//2] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        if is_prime(a):\n            return a\n        a, b = b, a + b\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize an empty list to store the collisions\n    collisions = []\n    \n    # Generate the positions of the cars moving left to right\n    left_cars = [i for i in range(n)]\n    \n    # Generate the positions of the cars moving right to left\n    right_cars = [i for i in range(n, 2*n)]\n    \n    # Iterate over the positions of the cars moving left to right\n    for i in left_cars:\n        # Iterate over the positions of the cars moving right to left\n        for j in right_cars:\n            # Check if the cars collide\n            if i == n - j - 1:\n                # If they collide, add the collision to the list\n                collisions.append((i, j))\n    \n    # Return the list of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\nincr_list([1, 2, 3])  # Output: [3, 4, 5]\nincr_list([3, 5, 2, 3, 9, 0, 1237, 5, 7, 4, 5, 5, 11, 2, 125])  # Output: [5, 7, 9, 5, 7, 11, 0, 1239, 7, 7, 7, 7, 11, 4, 127]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return str(a)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])  # <--- changed here\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [i * x for i, x in enumerate(xs[:-1], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return -1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, -1, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for char in s if char in 'aeiou')  # count the number of vowels in the string\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings, each representing a fruit\n    fruits = s.split()\n    \n    # Initialize a dictionary to store the count of each fruit\n    fruit_count = {}\n    \n    # Iterate over the list of fruits\n    for i in range(0, len(fruits), 2):\n        # Get the count and type of the current fruit\n        count = int(fruits[i])\n        fruit = fruits[i+1]\n        \n        # If the fruit is already in the dictionary, add the count to its current value\n        if fruit in fruit_count:\n            fruit_count[fruit] += count\n        # Otherwise, add the fruit to the dictionary with its count\n        else:\n            fruit_count[fruit] = count\n    \n    # Calculate the total number of fruits in the basket\n    total_fruits = sum(fruit_count.values())\n    \n    # Calculate the number of mango fruits\n    mango_fruits = total_fruits - sum(fruit_count.values()[:-1])\n    \n    # Return the number of mango fruits\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, node in enumerate(arr):\n        if node % 2 != 0:\n            odd.append((i, node))\n    if not odd:\n        return []\n    return min(odd, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys()):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    lst.append(max_val)\n    lst.append(min_val)\n    return strange_sort_list(lst) + lst\n"}
{"task_id": "EvoEval/71", "completion": "\n    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return (q == q[::-1] and sum(q) % 2 == 0 and sum(q) < w)\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 0\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]  # return the minimum number of changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    return lst1 if total_chars(lst1) >= total_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = set('23 5 7 9')\n    \n    # Initialize a counter for non-prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a hexadecimal digit\n        if char in '0123456789ABCDEF':\n            # Check if the character is not a prime hexadecimal digit\n            if char not in prime_hex_digits:\n                # Increment the counter\n                count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"  # [2:] is used to remove the '0b' prefix\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade table\n    grade_table = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.0,\n        'B+': 2.7,\n        'B': 2.3,\n        'B-': 2.0,\n        'C+': 1.7,\n        'C': 1.3,\n        'C-': 1.0,\n        'D+': 0.7,\n        'D': 0.3,\n        'D-': 0.0,\n        'E': 0.0\n    }\n    \n    # Sort the grades in ascending order\n    sorted_grades = sorted(grades)\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the sorted grades\n    for grade in sorted_grades:\n        # Find the corresponding letter grade\n        for letter_grade, gpa in grade_table.items():\n            if grade >= gpa:\n                letter_grades.append(letter_grade)\n                break\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    length = len(string.replace(' ', ''))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(1, 10**n):\n        if i >= 10**(n-1) and i < 10**n:\n            count += 1\n        elif i % 10 == 1:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    return str(sum(int(digit) for digit in str(N)))\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        char_list = sorted(word, reverse=True)\n        result.append(''.join(char_list))\n    return ' '.join(result)  # return the result as a string with spaces in between\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Check if the sum of the first and last element is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        array.sort()\n    else:\n        # Sort the array in descending order\n        array.sort(reverse=True)\n\n    # Remove duplicates by converting the array to a set and then back to a list\n    array = list(set(array))\n\n    # Sort the array in ascending order\n    array.sort()\n\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count('.') + S.count('!') + S.count('?') - 1\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)) and all(isinstance(i, int) for i in [x, y, z])  # Check if all numbers are integers and return True if any of the conditions are met, False otherwise\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message = encoded_message[:index*3] + char + encoded_message[index*3:]\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = None\n    for num in lst:\n        if is_prime(num):\n            if min_prime is None or num < min_prime:\n                min_prime = num\n    if min_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(min_prime))  # convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up\n    return sum(int(digit) for digit in str(min_prime))  # convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n\n    # Check if the number of keys is less than 3\n    if len(dict) < 3:\n        return False\n\n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in dict.keys()):\n        return False\n\n    # Check if all keys are in lower case\n    if not all(key.islower() for key in dict.keys()):\n        return False\n\n    # If all checks pass, return True\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # return the list in descending order\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Convert the string to a float\n    value = float(value)\n    # Use the built-in round function to round the value to the nearest integer\n    # The round function takes two arguments: the value to be rounded and the number of decimal places to round to\n    # Since we want to round to the nearest integer, we pass 0 as the second argument\n    # The round function returns the rounded value as an integer\n    return round(value)  # Return the rounded value as an integer\n"}
