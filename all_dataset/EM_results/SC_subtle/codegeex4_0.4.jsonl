{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = statistics.median(numbers)\n    deviations = [abs(number - median) for number in numbers]\n    mad = statistics.median(deviations)\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [delimeter] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n    return max_depth\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(min(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with leading zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join('1' if a_bin[i] != b_bin[i] else '0' for i in range(max_len))\n\n    # Convert result back to decimal and return as string\n    return str(int(xor_result, 2))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a * b) // greatest_common_divisor(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = music_string.split()\n    music_dict = {'o': 4, 'o|': 2, '|': 1}\n    return sorted([music_dict[note] for note in music_list], reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: number_dict[x], reverse=True))\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) != 2:\n        raise ValueError(\"The list must contain exactly two elements\")\n    if numbers[0] > numbers[1]:\n        return numbers[1], numbers[0]\n    return numbers[0], numbers[1]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    else:\n        return string.swapcase().lower()"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l = [l[i] if i % 3 != 0 else l[i] for i in range(len(l))]\n    l = [l[i] if i % 3 != 0 else sorted(l[i], reverse=True) for i in range(len(l))]\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 and str(i).count('8') > 0)"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted([l[i] for i in range(0, len(l), 2)], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i-1) if count == n else None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Create a list of tuples representing the cars' positions and directions\n    cars = [(i, 'left') for i in range(n)] + [(i, 'right') for i in range(n)]\n    \n    # Initialize a list to store the collisions\n    collisions = []\n    \n    # Loop until there are no more cars\n    while cars:\n        # Create a set to store the cars that will collide this round\n        colliding_cars = set()\n        \n        # Loop through the cars and find the ones that will collide\n        for i in range(len(cars)):\n            for j in range(i+1, len(cars)):\n                if cars[i][0] + cars[i][1] == cars[j][0] - cars[j][1]:\n                    colliding_cars.add(i)\n                    colliding_cars.add(j)\n        \n        # If there are no collisions, return the list of collisions so far\n        if not colliding_cars:\n            return collisions\n        \n        # Otherwise, remove the colliding cars from the list and add their collision to the list of collisions\n        for car in colliding_cars:\n            collisions.append(cars[car])\n        cars = [cars[i] for i in range(len(cars)) if i not in colliding_cars]\n    \n    # Return the list of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    return int(str(x), base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    return False"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * j for i, j in enumerate(xs)][1:]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return -2\n    elif n == 2:\n        return 4\n    else:\n        return fibfib(n-1) + fibfib(n-3)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # split the string into a list of words\n    words = s.split()\n    # find the index of the word \"apples\"\n    apples_index = words.index(\"apples\")\n    # find the index of the word \"oranges\"\n    oranges_index = words.index(\"oranges\")\n    # find the index of the word \"mangoes\"\n    mangoes_index = words.index(\"mangoes\")\n    # find the number of apples\n    apples = int(words[apples_index - 1])\n    # find the number of oranges\n    oranges = int(words[oranges_index - 1])\n    # find the number of mangoes\n    mangoes = int(words[mangoes_index - 1])\n    # find the total number of fruits\n    total_fruits = n + 1\n    # find the number of mangoes\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [node for node in arr if node % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd = min(odd_values)\n    index = arr.index(smallest_odd)\n    return [index, smallest_odd]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(lst)+1):\n        if c[i] > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [max(lst), min(lst)]\n    if len(lst) == 3:\n        return [max(lst), min(lst), lst[1]]\n    if len(lst) == 4:\n        return [max(lst), min(lst), lst[1], lst[2]]\n    if len(lst) == 5:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3]]\n    if len(lst) == 6:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 7:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 8:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 9:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 10:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8]]\n    if len(lst) == 11:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n    if len(lst) == 12:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10]]\n    if len(lst) == 13:\n        return [max(lst), min(lst), lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9], lst[10], lst[11]]\n    if len(lst) == 14"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if sum(q) % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    return lst1 if total_chars(lst1) >= total_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                if is_prime(i) and is_prime(a // i):\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0, 1\n    if n == 1:\n        return True, x, 1\n    if x % n != 0:\n        return False, None, None\n    power = 1\n    while n ** power < x:\n        power += 1\n    if n ** power == x:\n        return True, power, n\n    return False, None, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a**0.5**0.5**0.5 == int(a**0.5**0.5**0.5)\n"}
{"task_id": "EvoEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    non_primes = [0, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99]\n    count = 0\n    for digit in num:\n        if int(digit, 16) not in primes and int(digit, 16) in non_primes:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Write your code here\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length == 2 or length == 3 or length == 5 or length == 7:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a string\n    str_N = str(N)\n    \n    # Initialize the sum of digits\n    sum_digits = 0\n    \n    # Iterate over each character in the string\n    for char in str_N:\n        # Convert the character back to an integer and add it to the sum\n        sum_digits += int(char)\n    \n    # Convert the sum of digits back to a string and return it\n    return str(sum_digits)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join([word[::-1] for word in s.split(' ')])\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # create a copy of the array\n    array_copy = array.copy()\n    # remove duplicates\n    array_copy = list(set(array_copy))\n    # sort the array\n    if sum([array_copy[0], array_copy[-1]]) % 2 == 0:\n        array_copy.sort()\n    else:\n        array_copy.sort(reverse=True)\n    return array_copy\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            new_index = (index + 2 * 2) % 26\n            new_char = alphabet[new_index]\n            if char.isupper():\n                new_char = new_char.upper()\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(reverse=True)\n    return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(1 for c in S if c in '.!?') - 1\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 3)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a%10 * b%10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
