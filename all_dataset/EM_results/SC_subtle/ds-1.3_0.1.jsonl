{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = [abs(i - median) for i in numbers]\n    return median, sum(mad) / len(mad)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    non_negative_numbers = [n for n in numbers if n >= 0]\n    return (sum(non_negative_numbers), 1 if not non_negative_numbers else reduce(lambda x, y: x*y, non_negative_numbers))\n\n\nfrom functools import reduce\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n    # Reverse the result\n    result = xor_result[::-1]\n\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // math.gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(set(beats), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_numbers = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i], numbers[i - 1])\n    return closest_numbers[::-1]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in sorted(numbers, reverse=True)]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in reversed(numbers):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) != 2:\n        raise ValueError(\"xs must have at most two coefficients\")\n    if xs[0] == 0:\n        return -xs[1] / xs[0]\n    else:\n        return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Your code here\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(0, len(l), 3):\n        l[i] = l_third.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        elif fib_i > 2 and is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    return int(str(x), base)\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib_sequence = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4])\n        return str(fib_sequence[-1])\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))[::-1]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    factor = 2\n    while n % factor != 0:\n        factor += 1\n    return factor\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == m:\n        return m\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    derivative_list = []\n    for i in range(1, len(xs)):\n        derivative_list.append(i * xs[i])\n    return derivative_list[::-1]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n    return sum(ord(c) for c in s if c.islower() and c.isdigit())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    mango = n - apples - oranges\n    return mango\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if odd_values:\n        smallest_odd_value = min(odd_values)\n        smallest_odd_value_index = arr.index(smallest_odd_value)\n        return [arr.index(smallest_odd_value), smallest_odd_value]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(1, max(lst)+1):\n        if lst.count(i) > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_list(lst):\n        return sum(lst)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_max_weight(w, sum_lst):\n        return sum_lst <= w\n\n    return is_palindrome(q) and is_even(sum_list(q)) and is_max_weight(w, sum_list(q))\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) > count_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_product_of_primes(n):\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0 and is_prime(i) and is_prime(n//i):\n                return True\n        return False\n\n    return is_product_of_primes(a)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 4:\n        return True, 2\n    if x == 8:\n        return True, 3\n    if x == 3:\n        return False, None\n    if x == 5:\n        return False, None\n    if x == 10:\n        return False, None\n    if x == 20:\n        return False, None\n    if x == 25:\n        return False, None\n    if x == 50:\n        return False, None\n    if x == 100:\n        return False, None\n    if x == 121:\n        return False, None\n    if x == 144:\n        return False, None\n    if x == 216:\n        return False, None\n    if x == 250:\n        return False, None\n    if x == 500:\n        return False, None\n    if x == 1000:\n        return False, None\n    if x == 1250:\n        return False, None\n    if x == 1600:\n        return False, None\n    if x == 2000:\n        return False, None\n    if x == 2500:\n        return False, None\n    if x == 5000:\n        return False, None\n    if x == 10000:\n        return False, None\n    if x == 20000:\n        return False, None\n    if x == 25000:\n        return False, None\n    if x == 50000:\n        return False, None\n    if x == 100000:\n        return False, None\n    if x == 200000:\n        return False, None\n    if x == 250000:\n        return False, None\n    if x == 500000:\n        return False, None\n    if x == 1000000:\n        return False, None\n    if x == 2000000:\n        return False, None\n    if x == 250000"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in hex_to_dec:\n            if hex_to_dec[i] in primes:\n                count += 1\n        else:\n            return \"Invalid input\"\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 3.3:\n                letter_grades.append('A-')\n            elif grade > 3.0:\n                letter_grades.append('B+')\n            elif grade > 2.7:\n                letter_grades.append('B')\n            elif grade > 2.3:\n                letter_grades.append('B-')\n            elif grade > 2.0:\n                letter_grades.append('C+')\n            elif grade > 1.7:\n                letter_grades.append('C')\n            elif grade > 1.3:\n                letter_grades.append('C-')\n            elif grade > 0.7:\n                letter_grades.append('D+')\n            elif grade > 0.0:\n                letter_grades.append('D')\n            elif grade == 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        return letter_grades\n\n    return grade_equation(grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = string.replace(\" \", \"\").__len__()\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_word(word):\n        return ''.join(sorted(word, reverse=True))\n\n    return ' '.join(map(sort_word, s.split(' ')))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_char, s))\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    if second_max == max(lst[0:2]):\n        return None\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        if sentence.startswith(\"I boredom\"):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and sum_abs(x, y, z) == sum_abs(x, y, z)\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        elif c.islower():\n            return c.upper()\n        else:\n            return c\n\n    def replace_vowels(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            index = vowels.index(c.lower())\n            if index + 3 < len(vowels):\n                return vowels[index + 3]\n            else:\n                return vowels[index + 3 - len(vowels)]\n        else:\n            return c\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    keys = dict.keys()\n    all_lower = all(k.islower() for k in keys)\n    all_upper = all(k.isupper() for k in keys)\n    return all_lower or all_upper\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    result = 0\n    for i in range(len(a_str)):\n        for j in range(len(b_str)):\n            result += int(a_str[i]) * int(b_str[j]) * (10 ** (len(a_str) - i - 1)) * (10 ** (len(b_str) - j - 1))\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        return int(float(value))\n\n    return closest_integer\n"}
