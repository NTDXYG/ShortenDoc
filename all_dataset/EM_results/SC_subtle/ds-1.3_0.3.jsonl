{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            if len(stack) != 0:\n                temp += char\n                stack.append(char)\n            else:\n                result.append(temp)\n                temp = ''\n                stack.append(char)\n        elif char == ')':\n            if len(stack) != 0:\n                temp += char\n                stack.pop()\n            else:\n                result.append(temp)\n                temp = ''\n        else:\n            temp += char\n\n    if temp:\n        result.append(temp)\n\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = [abs(i - median) for i in numbers]\n    return median, sum(mad) / len(mad)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    max_level = 0\n    current_level = 0\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            stack.append(current_level)\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ')':\n            current_level -= 1\n            stack.pop()\n\n    result.append(max_level)\n    result.append(len(stack))\n\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    min_num = numbers[0]\n    result = [min_num]\n\n    for num in numbers[1:]:\n        min_num = min(min_num, num)\n        result.append(min_num)\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    xor_result = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n    return xor_result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // math.gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    result = [note_dict[note] for note in notes]\n    return sorted(result, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return (numbers[-1], numbers[-2])\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    range_val = max_val - min_val\n\n    return [(number - min_val) / range_val for number in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return [prime_factors(i) for i in [2, 5]]\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in reversed(numbers):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    xs = [1, -2, -3]\n    xs.sort(reverse=True)\n    return -xs[1] / (2 * xs[0])\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime[j]\n            j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        if is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    elif n == 2:\n        return '4'\n    elif n == 3:\n        return '8'\n    else:\n        a = '0'\n        b = '2'\n        c = '4'\n        d = '8'\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (pow(2, n + q, p) - 1) % p\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))[::-1]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \")\":\n            if not stack:\n                return False\n            elif bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            elif bracket == \")\" and stack[-1] != \"(\":\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return -2\n    else:\n        a, b, c = 0, 1, -2\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a - b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    length = len(digits)\n    shift %= length\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isdigit():\n            sum += int(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = sum(int(fruit.split(\" \")[0]) for fruit in fruits)\n    return total_fruits - n\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if odd_values:\n        smallest_odd_value = min(odd_values)\n        smallest_odd_value_index = arr.index(smallest_odd_value)\n        return [smallest_odd_value_index, smallest_odd_value]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c)+1):\n        if i in c and c[i] > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n\n    def is_balanced(lst):\n        return sum(lst) % 2 == 0\n\n    return is_palindromic(q) and is_balanced(q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    lst1_chars = count_chars(lst1)\n    lst2_chars = count_chars(lst2)\n\n    if lst1_chars > lst2_chars:\n        return lst1\n    elif lst1_chars < lst2_chars:\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 2 and factors[0]**2 == a and factors[1]**2 == a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x < 1 or n < 1:\n        return (False, None)\n\n    i = 0\n    while x > 1:\n        x /= n\n        i += 1\n\n    if x == 1:\n        return (True, i)\n    else:\n        return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':17, '2':2, '3':3, '4':7, '5':13, '6':19, '7':21, '8':23, '9':29, 'A':10, 'B':11, 'C':12, 'D':15, 'E':16, 'F':17}\n    count = 0\n    for i in num:\n        if i not in hex_to_dec:\n            return 0\n        if hex_to_dec[i] in [2, 3, 5, 7, 11, 13, 17]:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) % 4 != 0:\n        return False\n\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n\n    # Define the grade ranges\n    grade_ranges = [(4.0, 1.0, 'A+'), (3.7, 4.0, 'A'), (3.3, 3.7, 'A-'),\n                    (2.7, 3.3, 'B+'), (2.0, 2.7, 'B'), (1.7, 2.0, 'B-'),\n                    (1.3, 1.7, 'C+'), (1.0, 1.3, 'C'), (0.7, 1.0, 'C-'),\n                    (0.0, 0.7, 'D-'), (0.0, 0.0, 'E')]\n\n    # Function to get the letter grade\n    def get_letter_grade(gpa):\n        for (low, high, grade) in grade_ranges:\n            if gpa >= low and gpa < high:\n                return grade\n        return 'E'\n\n    # Map the get_letter_grade function to the list of GPAs\n    return [get_letter_grade(gpa) for gpa in grades]\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string:\n        if char != ' ':\n            length += 1\n\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 0\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(N):\n        return sum(int(digit) for digit in str(N))\n\n    return sum_digits(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s, key=lambda c: ord(c)))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    lst = [(i, j) for i, l in enumerate(lst) for j, num in enumerate(l) if num == x]\n    lst.sort(key=lambda t: (-t[0], t[1]))\n    return lst\n\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def sum_last_first(array):\n        return sum(array[-1], array[0])\n\n    array = list(set(array))\n    array.sort(key=sum_last_first)\n\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n\n        Helper function to shift a character by a certain amount\n        \"\"\"\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n\n    return ''.join(shift_char(c, 2) for c in s)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first = second = float('-inf')\n    for num in lst:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    if second == float('-inf'):\n        return None\n    else:\n        return second\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.split()\n    return len(S)\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    def check_sum(x, y, z, sum_xyz):\n        return sum_xyz == sum_abs(x, y, z)\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and check_sum(x, y, z, sum_abs(x, y, z))\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n\n    def replace_vowels(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index < 2:\n                return char\n            else:\n                return chr(ord(char) - 32 if char.isupper() else ord(char) + 32)\n        else:\n            return char\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    keys = dict.keys()\n    if len(keys) < 3:\n        return False\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    a_unit = int(a_str[-1])\n    b_unit = int(b_str[-1])\n    return a_unit * b_unit\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) if value % 1 < 0.5 else int(value) - 1\n        else:\n            return int(value) if value % 1 >= 0.5 else int(value) + 1\n\n    return closest_integer(value)\n\n"}
