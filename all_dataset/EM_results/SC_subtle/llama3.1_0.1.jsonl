{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = ''\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == '(':\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group, so add it to the list and reset the current group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = ''\n\n    # Return the list of separated groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n    \n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    \n    # Calculate the absolute differences between each number and the median\n    absolute_diffs = [abs(num - median) for num in numbers]\n    \n    # Sort the absolute differences\n    absolute_diffs.sort()\n    \n    # Calculate the median of the absolute differences\n    mad = absolute_diffs[len(absolute_diffs) // 2] if len(absolute_diffs) % 2 else (absolute_diffs[len(absolute_diffs) // 2 - 1] + absolute_diffs[len(absolute_diffs) // 2]) / 2\n    \n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n    for depth in range(max_depth, 0, -1):\n        result.append(max_depth - depth + 1)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    prefix = ''\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            break\n    return prefix + string + prefix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (int(a[i]) + int(b[i])) % 2 == 1 else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # min() function returns the smallest item in an iterable or the smallest of two or more arguments"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n\n"}
{"task_id": "EvoEval/16", "completion": "\n\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set. This is a very efficient way to count distinct characters in a string. >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))  # Convert the string to a set,"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    return sorted(result, reverse=True)  # Return the list in descending order\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of numbers\n    numbers_list: List[str] = numbers.split()\n    \n    # Define a dictionary to map the string numbers to their integer values\n    number_map: dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Use a list comprehension to convert the string numbers to integers and sort the list\n    sorted_numbers: List[int] = sorted([number_map[num] for num in numbers_list], reverse=True)\n    \n    # Use a list comprehension to convert the sorted integers back to string numbers\n    sorted_numbers_str: List[str] = [list(number_map.keys())[list(number_map.values()).index(num)] for num in sorted_numbers]\n    \n    # Join the sorted string numbers into a single string with spaces in between\n    sorted_numbers_str: str = ' '.join(sorted_numbers_str)\n    \n    return sorted_numbers_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return sorted([((x - min_val) / (max_val - min_val)) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list of numbers that occur only once\n    unique_numbers = [num for num in numbers if count_dict[num] == 1]\n\n    # Return the list in the reverse order of the input\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # <--- This is the key line of code"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs must have non-zero constant term\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have non-zero leading coefficient\")\n    return -xs[1] / xs[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0], reverse=True)[0] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[j] for j in range(len(l)) if j % 2 == 0], reverse=True)[i // 2] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        if b % 2 == 0:\n            return None\n        is_prime = True\n        for i in range(2, int(b ** 0.5) + 1):\n            if b % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return b\n        a, b = b, a + b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the list in ascending order\n    l.sort()\n    # We iterate over the list with three nested loops\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                # We check if the current three elements sum to ten\n                if l[i] + l[j] + l[k] == 10:\n                    # If they do, we return True\n                    return True\n    # If we have iterated over the entire list and haven't found three elements that sum to ten, we return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\nincr_list([1, 2, 3])  # [3, 4, 5]\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])  # [7, 5, 7, 4, 5, 5, 11, 2, 125]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set from the list to remove duplicates and improve lookup efficiency\n    num_set = set(l)\n    # Iterate over each number in the set\n    for num in num_set:\n        # Check if the complement of the current number (1 - num) is in the set\n        if 1 - num in num_set and 1 - num != num:\n            # If the complement is found, return True\n            return True\n    # If no pair of numbers sum to one, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base should be between 2 and 10\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n <= 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return str(d)  # return the last element of the sequence\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text.casefold()[::-1]  # casefold() is used instead of lower() to handle non-English characters\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # use list comprehension to filter out consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # range is exclusive of the end value, so we add 1\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Initialize a counter for the number of vowels\n    count = 0\n    # Check if the last character is 'y'\n    if s and s[-1] == 'y':\n        # If it is, remove it from the string\n        s = s[:-1]\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in 'aeiou':\n            # If it is, increment the counter\n            count += 1\n    # Return the count\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Convert the integer to a string to easily access and shift the digits\n    str_x = str(x)\n    # Calculate the effective shift, which is the remainder of shift divided by the number of digits\n    effective_shift = shift % len(str_x)\n    # If shift is greater than the number of digits, return the digits reversed\n    if effective_shift > len(str_x):\n        return str_x[::-1]\n    # Otherwise, shift the digits left by effective_shift and return the result\n    else:\n        return str_x[-effective_shift:] + str_x[:-effective_shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings, each representing a type of fruit and its quantity\n    fruits = s.split(\", \")\n    \n    # Initialize a variable to store the total number of fruits\n    total_fruits = n + 1\n    \n    # Initialize a variable to store the total number of apples and oranges\n    total_apples_oranges = 0\n    \n    # Iterate over each fruit in the list\n    for fruit in fruits:\n        # Split the fruit string into a list of two strings, the first being the quantity and the second being the type of fruit\n        quantity, fruit_type = fruit.split(\" \")\n        \n        # Convert the quantity string to an integer\n        quantity = int(quantity)\n        \n        # If the fruit is an apple or an orange, add its quantity to the total number of apples and oranges\n        if fruit_type in [\"apples\", \"oranges\"]:\n            total_apples_oranges += quantity\n    \n    # Return the total number of fruits minus the total number of apples and oranges\n    return total_fruits - total_apples_oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, val in enumerate(arr):\n        if val % 2 != 0:\n            odd.append((i, val))\n    if not odd:\n        return []\n    return min(odd, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate over the list in ascending order\n    for num in sorted(lst):\n        # If the frequency of the current number is greater than or equal to the number itself, return the number\n        if freq_dict[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val] + strange_sort_list(lst)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # Create a 2D table to store the minimum number of changes for subarrays\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the diagonal of the table with 0, since a single element is always a palindrome\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # Fill the table in a bottom-up manner\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            # If the first and last elements are the same, no change is needed\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            # Otherwise, try all possible changes and take the minimum\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    \n    # The minimum number of changes for the entire array is stored in the top-right corner of the table\n    return dp[0][n - 1]  # return the minimum number of changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    if total_chars(lst1) > total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) < total_chars(lst2):\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)  # all factors are prime\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a  # round() is used to handle floating point precision errors\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = set('2357')\n    \n    # Initialize a counter for non-prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is not a prime hexadecimal digit\n        if char not in prime_hex_digits:\n            # Increment the counter\n            count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # First, we sort the grades in ascending order\n    grades.sort()\n    \n    # Then, we create a list of letter grades\n    letter_grades = []\n    \n    # We iterate over each grade\n    for grade in grades:\n        # If the grade is greater than 3.7, it's an A\n        if grade > 3.7:\n            letter_grades.append('A')\n        # If the grade is greater than 3.3, it's an A-\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        # If the grade is greater than 3.0, it's a B+\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        # If the grade is greater than 2.7, it's a B\n        elif grade > 2.7:\n            letter_grades.append('B')\n        # If the grade is greater than 2.3, it's a B-\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        # If the grade is greater than 2.0, it's a C+\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        # If the grade is greater than 1.7, it's a C\n        elif grade > 1.7:\n            letter_grades.append('C')\n        # If the grade is greater than 1.3, it's a C-\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        # If the grade is greater than 0.7, it's a D+\n        elif grade > 0.7:\n            letter_grades.append('D+')\n        # If the grade is greater than 0.0, it's a D\n        elif grade > 0.0:\n            letter_grades.append('D')\n        # If the grade is greater than 0.0, it's a D-\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        # If the grade is 0.0, it's an E\n        else:\n            letter_grades.append('E')\n    \n    # Finally, we return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string.replace(' ', '')))  # remove spaces and check if length is prime\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**(n-1) + 10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-2) and i < 10**(n-1) + 10**(n-1):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a hexadecimal string\n    hex_str = hex(N)[2:]\n    # Initialize a variable to store the sum of the digits\n    sum_digits = 0\n    # Iterate over each character in the hexadecimal string\n    for char in hex_str:\n        # Convert the character to an integer and add it to the sum\n        sum_digits += int(char, 16)\n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # sum of odd elements at even indices\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        # remove punctuation\n        punctuation = ''\n        while word and not word[-1].isalnum():\n            punctuation = word[-1] + punctuation\n            word = word[:-1]\n        # sort characters in descending order\n        sorted_word = ''.join(sorted(word, reverse=True))\n        # add punctuation back\n        result.append(sorted_word + punctuation)\n    return ' '.join(result)  # join words back with spaces\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Calculate the sum of the first and last index values\n    sum_first_last = array[0] + array[-1]\n\n    # Sort the array in ascending order if the sum is odd, or in descending order if the sum is even\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n\n    # Remove any duplicate values from the array\n    sorted_array = list(set(sorted_array))\n\n    # Sort the array in ascending order\n    sorted_array.sort()\n\n    return sorted_array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2] if lst[-1] != lst[-2] else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', ' . ').replace('?', ' ? ').replace('!', ' ! ')\n    words = S.split()\n    boredoms = 0\n    for i in range(len(words)):\n        if words[i] == 'I' and words[i+1] == 'am' and words[i+2] == 'experiencing' and words[i+3] == 'boredom':\n            boredoms += 1\n    return boredoms\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and \n            (abs(x - y) == z or abs(y - z) == x or abs(z - x) == y))  # check if one of the numbers is equal to the sum of the absolute values of other two, and all numbers are integers. Returns false in any other cases. Examples"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += vowels[(index + 3) % 5]\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_lst = [num for num in lst if is_prime(num)]\n    if not prime_lst:\n        return 0\n    return sum(int(digit) for digit in str(min(prime_lst)))  # convert the smallest prime to string, iterate over each character (digit), convert it back to int and sum them up"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() and not all(k.islower() for k in dict):\n            return False\n        if key.isupper() and not all(k.isupper() for k in dict):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # sort in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))  # Convert the string to a float and then round it to the nearest integer\n\n"}
