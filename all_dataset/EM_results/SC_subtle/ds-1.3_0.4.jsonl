{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append(''.join(stack))\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = numbers[length//2]\n    mad = sum([abs(i - median) for i in numbers])/length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [num for num in numbers[:-1] + [delimeter, numbers[-1]]]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split(' ')\n    depths = [get_max_depth(group) for group in groups]\n    return depths\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n\n    shortest_string = strings[0]\n\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // math.gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return '\\n'.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    unique_notes = set()\n    for note in notes:\n        if note == 'o':\n            unique_notes.add(4)\n        elif note == 'o|':\n            unique_notes.add(2)\n        elif note == '.|':\n            unique_notes.add(1)\n    return sorted(list(unique_notes), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(numbers)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return (numbers[-2], numbers[-1])\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in reversed(numbers):\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    xs.reverse()\n    for x in range(-100, 100):  # arbitrary range\n        if round(poly(xs, x), 10) == 0:\n            return x\n    return None\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(0, len(l), 3)]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(0, len(l), 3):\n        l[i] = l_prime[j]\n        j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i = 0\n    while True:\n        fib_num = fib(i)\n        if fib_num > n:\n            return None\n        if is_prime(fib_num):\n            i += 1\n        else:\n            return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return 2 * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return str(b)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1 % p\n    else:\n        return (2 ** (n + q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(list(set(common_list)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\" or bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\" or bracket == \")\":\n            if not stack:\n                return False\n            else:\n                open_bracket = stack.pop()\n                if bracket == \"]\" and open_bracket != \"[\" or bracket == \"}\" and open_bracket != \"{\" or bracket == \")\" and open_bracket != \"(\":\n                    return False\n    if stack:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return -2\n    elif n == 2:\n        return 4\n    else:\n        a, b, c = 0, -2, 4\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split()\n    total_apples = 0\n    total_oranges = 0\n    total_mangoes = 0\n    for fruit in fruits:\n        if \"apples\" in fruit:\n            total_apples += int(fruit.split(\" \")[0])\n        elif \"oranges\" in fruit:\n            total_oranges += int(fruit.split(\" \")[0])\n        elif \"mangoes\" in fruit:\n            total_mangoes += int(fruit.split(\" \")[0])\n    return total_mangoes - n\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if odd_values:\n        smallest_odd_value = min(odd_values)\n        smallest_odd_value_index = arr.index(smallest_odd_value)\n        return [smallest_odd_value_index, smallest_odd_value]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c)+1):\n        if i in c and c[i] > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    # Your code here\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # return the area rounded to 3 decimal points\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n\n    def sum_list(lst):\n        return sum(lst)\n\n    def max_possible_weight(lst):\n        return max(lst)\n\n    def is_balanced(lst):\n        return sum_list(lst) % 2 == 0 and max_possible_weight(lst) <= w\n\n    return is_palindromic(q) and is_balanced(q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) > count_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i):\n            return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0, n, 1\n    if x < 1 or n < 1:\n        return False, None, None, None\n    if x < n:\n        return False, None, None, None\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i, n, n ** i\n        i += 1\n    return False, None, None, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        elif a == 0:\n            return True\n        else:\n            i = 0\n            while i**3 < abs(a):\n                i += 1\n            return i**3 == abs(a)\n\n    print(iscube(1))\n    print(iscube(2))\n    print(iscube(-1))\n    print(iscube(64))\n    print(iscube(0))\n    print(iscube(180))\n\niscube(1)\niscube(2)\niscube(-1)\niscube(64)\niscube(0)\niscube(180)\n"}
{"task_id": "EvoEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for digit in num:\n        if digit in \"049A\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) % 4 != 0:\n        return False\n\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade == 4.0:\n                letter_grades.append('A+')\n            elif grade > 3.7:\n                letter_grades.append('A')\n            elif grade > 2.7:\n                letter_grades.append('B-')\n            elif grade > 0.7:\n                letter_grades.append('0.7D-')\n            elif grade == 0.0:\n                letter_grades.append('E')\n            else:\n                letter_grades.append('F')\n        return letter_grades\n\n    print(grade_equation([4.0, 3.5, 3.7, 2.7, 0.7, 0.0]))\n\n\nnumerical_letter_grade([4.0, 3.5, 3.7, 2.7, 0.7, 0.0])\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string:\n        if char != ' ':\n            length += 1\n\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    N = str(N)\n    return sum(int(digit) for digit in N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words = [''.join(sorted(word, key=lambda c: ord(c))) for word in words]\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    lst = [i for sublist in lst for i in sublist]\n    lst.sort(reverse=True)\n    res = []\n    for i, num in enumerate(lst):\n        if num == x:\n            res.append((i, lst.index(num)))\n    res.sort(key=lambda x: (x[0], x[1]))\n    return res\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def sum_of_first_and_last(array):\n        return array[0] + array[-1]\n\n    array = list(set(array))\n    array.sort(key=sum_of_first_and_last)\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                encrypted_string += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_string += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('!', '')\n    S = S.replace('?', '')\n    S = S.split(' ')\n    if len(S) <= 10:\n        return 0\n    else:\n        return 1\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    def all_int(x, y, z):\n        return is_integer(x) and is_integer(y) and is_integer(z)\n\n    return all_int(x, y, z) and sum_abs(x, y, z) == x\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        elif c.islower():\n            return c.upper()\n        else:\n            return c\n\n    def replace_vowels(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            return vowels[(vowels.index(c.lower())+3)%5]\n        else:\n            return c\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    def sum_digits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    return sum_digits(sum_digits(a) * sum_digits(b))\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) - 1\n        else:\n            return int(value)\n\n    return closest_integer(value)\n"}
