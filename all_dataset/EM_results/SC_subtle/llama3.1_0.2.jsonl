{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've reached the end of a group\n            if balance == 0:\n                # Add the current group to the list of groups\n                groups.append(current_group)\n                # Reset the current group and balance\n                current_group = \"\"\n                balance = 0\n\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance == 1:\n            return True\n    return False\n    # return any(balance == 1 for balance in accumulate(operations, initial=1))  # alternative solution\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, we need to sort the list of numbers\n    numbers.sort()\n    \n    # Then, we need to find the median of the list\n    n = len(numbers)\n    if n % 2 == 1:\n        median = numbers[n // 2]\n    else:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    \n    # Now, we need to calculate the absolute differences between each number and the median\n    absolute_differences = [abs(x - median) for x in numbers]\n    \n    # Finally, we need to find the median of the absolute differences\n    absolute_differences.sort()\n    n = len(absolute_differences)\n    if n % 2 == 1:\n        mad = absolute_differences[n // 2]\n    else:\n        mad = (absolute_differences[n // 2 - 1] + absolute_differences[n // 2]) / 2\n    \n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n    result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]  # filter by substring"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n    pass"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    prefix = ''\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            break\n    suffix = string[len(prefix):]\n    return prefix + suffix[::-1] + prefix\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '0' and b[i] == '1') or (a[i] == '1' and b[i] == '0') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore\n    return min(strings, key=len)  # type: ignore"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes[::-1]  # reverse the list to get longest to shortest\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set, which removes duplicates, and then get the length of the set. This is a case-sensitive operation. If you want a case-insensitive operation, convert the string to lower case or upper case before counting the distinct characters. >>> count_distinct_characters('xyzXYZ') 6 >>> count_distinct_characters('Jerry') 4 >>> count_distinct_characters('Jerry'.lower()) 4 >>> count_distinct_characters('Jerry'.upper()) 4 >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry') True >>> count_distinct_characters('Jerry'.upper()) == count_distinct_characters('Jerry') True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_distinct_characters('Jerry'.upper()) True >>> count_distinct_characters('Jerry'.lower()) == count_dist"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    numbers_list: List[str] = numbers.split()\n    # Create a dictionary to map the string numbers to their integer values\n    number_dict: dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Sort the list of numbers based on their integer values\n    sorted_numbers: List[str] = sorted(numbers_list, key=lambda x: number_dict[x], reverse=True)\n    # Join the sorted list into a string\n    sorted_string: str = ' '.join(sorted_numbers)\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return sorted([((x - min_val) / (max_val - min_val)) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list of numbers that occur only once\n    unique_numbers = [num for num in numbers if count_dict[num] == 1]\n\n    # Return the list in the reverse order of the input\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # join() method concatenates all strings in the list and returns a single string"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    elif len(xs) == 2:\n        return -xs[1] / xs[0]\n    else:\n        return -xs[1] / (3 * xs[0])\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0], reverse=True)[0] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else sorted(l)[i//2] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return None\n        if b % 2 == 0:\n            continue\n        for i in range(3, int(b ** 0.5) + 1, 2):\n            if b % i == 0:\n                break\n        else:\n            return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the list in ascending order\n    l.sort()\n    # We iterate over the list with three nested loops\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                # We check if the current three elements sum to ten\n                if l[i] + l[j] + l[k] == 10:\n                    # If they do, we return True\n                    return True\n    # If we have checked all possible combinations and haven't found a sum of ten, we return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\nincr_list([1, 2, 3])  # [3, 4, 5]\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])  # [7, 5, 7, 4, 5, 5, 11, 2, 125]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        a, b = 0, 2\n        for _ in range(4, n + 1):\n            a, b = b, a + b\n        return str(b)  # Convert to string before returning\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]  # Convert to lower case before checking\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return string without consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # range is exclusive of the end value, so we add 1\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings, each representing a type of fruit and its quantity\n    fruits = s.split(\", \")\n    \n    # Initialize a variable to store the total number of fruits\n    total_fruits = n + 1\n    \n    # Iterate over each fruit in the list\n    for fruit in fruits:\n        # Split the fruit string into a list of two strings, the fruit type and its quantity\n        fruit_type, quantity = fruit.split(\" \")\n        \n        # Convert the quantity string to an integer\n        quantity = int(quantity)\n        \n        # Subtract the quantity of the current fruit from the total number of fruits\n        total_fruits -= quantity\n    \n    # Return the total number of fruits\n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, val in enumerate(arr):\n        if val % 2 != 0:\n            odd.append((i, val))\n    if not odd:\n        return []\n    return min(odd, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys()):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val] + strange_sort_list(lst)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # Create a 2D table to store the minimum number of changes for each subarray\n    dp = [[0] * n for _ in range(n)]\n    # Fill the diagonal of the table with 0, since a single element is always a palindrome\n    for i in range(n):\n        dp[i][i] = 0\n    # Fill the table in a bottom-up manner\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            # If the first and last elements are the same, no change is needed\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            # Otherwise, try all possible changes and take the minimum\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    # The minimum number of changes for the entire array is stored in dp[0][n - 1]\n    return dp[0][n - 1]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    return lst1 if total_chars(lst1) > total_chars(lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)  # all factors are prime\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a  # round() is used to handle floating point precision errors\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of hexadecimal digits\n    hex_digits = set('0123456789ABCDEF')\n    \n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = set('23')\n    \n    # Initialize the count of non-prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a hexadecimal digit\n        if char in hex_digits:\n            # If the character is not a prime hexadecimal digit, increment the count\n            if char not in prime_hex_digits:\n                count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) > 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade table\n    grade_table = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C-': (1.7, 2.3),\n        'C': (1.3, 1.7),\n        'D-': (0.7, 1.3),\n        'D': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n    \n    # Sort the grades in ascending order\n    grades.sort()\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the sorted grades\n    for grade in grades:\n        # Initialize a flag to check if the grade is assigned\n        assigned = False\n        \n        # Iterate over the grade table\n        for letter, (lower, upper) in grade_table.items():\n            # If the grade is within the range, assign the letter grade\n            if lower <= grade <= upper:\n                letter_grades.append(letter)\n                assigned = True\n                break\n        \n        # If the grade is not assigned, assign 'E'\n        if not assigned:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string.replace(' ', '')))  # remove spaces and check if length is prime\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**(n-1) + 10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-2) and i < 10**(n-1) + 10**(n-1):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n        elif i == 10**n:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a string to easily iterate over its digits\n    str_N = str(N)\n    # Initialize a variable to store the sum of the digits\n    sum_digits = 0\n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Add the integer value of the digit to the sum\n        sum_digits += int(digit)\n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ''.join(sorted(c, reverse=True) for c in s)  # This line is the solution to the problem\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        if isinstance(row, list):\n            for j, val in enumerate(row):\n                if val == x:\n                    result.append((i, j))\n        else:\n            if row == x:\n                result.append((i, 0))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Check if the array has only one element\n    if len(array) == 1:\n        return array\n\n    # Calculate the sum of the first and last index values\n    sum_first_last = array[0] + array[-1]\n\n    # Sort the array in ascending order if the sum is odd\n    if sum_first_last % 2 != 0:\n        array = sorted(set(array))\n    # Sort the array in descending order if the sum is even\n    else:\n        array = sorted(set(array), reverse=True)\n\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('. ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I am experiencing boredom'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and \n            (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)))  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  # Check if all inputs are integers and if one of them is equal to the sum of the absolute values of the other two. Return True if the conditions are met, False otherwise.  #"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += vowels[(index + 3) % 5]\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_lst = [num for num in lst if is_prime(num)]\n    if not prime_lst:\n        return 0\n    return sum(int(digit) for digit in str(min(prime_lst)))  # convert the smallest prime to string, iterate over each character (digit), convert it back to int and sum them up"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    return primes[::-1]  # Return the list in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Calculate the sum of the unit digits\n    sum_unit_digits = unit_digit_a + unit_digit_b\n    \n    # Calculate the unit digit of the sum\n    unit_digit_sum = sum_unit_digits % 10\n    \n    # Return the unit digit of the sum\n    return unit_digit_sum\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))  # Convert the string to a float and round it to the nearest integer\n"}
