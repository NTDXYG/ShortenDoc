{"task_id": "valid/0", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Cello', 'Harp']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input not valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        digits = [int(d) for d in str(n)]\n        return n % 5 == 0 and sum(digits) % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON: {0}\".format(e))\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Convert to lowercase\n    text = text.lower()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z*z\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for key in dictionary:\n        if isinstance(dictionary[key], dict):\n            value = get_nested_dictionary_value(dictionary[key])\n            if value is not None:\n                return value\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    num_len = len(str_num)\n\n    left_half = int(str_num[:(num_len // 2)])\n    is_odd = num_len % 2\n\n    candidates = [\n        int(str(left_half) + str(left_half)[::-1]),\n        int(str(left_half + 1) + str(left_half + 1)[::-1]),\n        int(str(left_half - 1) + str(left_half - 1)[::-1]),\n    ]\n\n    if is_odd:\n        candidates.append(int(str(left_half + 1) + str(left_half)[1:] + str(left_half + 1)[::-1]))\n        candidates.append(int(str(left_half - 1) + str(left_half)[1:] + str(left_half - 1)[::-1]))\n\n    closest = min(candidates, key=lambda x: (abs(x - num), x))\n\n    if closest > num:\n        return closest\n    else:\n        return min(candidates, key=lambda x: (abs(x - num), x))\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_string = base64_bytes.decode('ascii')\n\n    return base64_string\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    if key in json_data:\n        return json_data[key] == value\n    else:\n        return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # import necessary modules\n    from tkinter import Button, Tk\n\n    # create a new tkinter window\n    window = Tk()\n\n    # create a list to hold the buttons\n    button_list = []\n\n    # iterate over the buttons\n    for i, button in enumerate(buttons):\n        # create a new button and add it to the list\n        button_list.append(Button(window, text=button, command=lambda button=button: _on_button_click(button)))\n\n        # calculate the row and column for the button\n        row = i // num_columns\n        column = i % num_columns\n\n        # add the button to the window\n        button_list[i].grid(row=row, column=column)\n\n    # start the tkinter event loop\n    window.mainloop()\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] in s:\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods_names = [neighborhood['name'] for neighborhood in neighborhoods]\n    return sorted(neighborhoods_names)\n\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = abs(arr[l] + arr[r])\n        if sum < min_sum:\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if arr[l] + arr[r] < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    total_votes = sum(votes[i][1] for i in range(len(votes)))\n    if total_votes < 100:\n        return \"Total votes must be at least 100\"\n    results = {}\n    for vote in votes:\n        results[vote[0]] = vote[1]\n    for candidate in results:\n        percentage = round((results[candidate] / total_votes) * 100, 2)\n        print(f\"{candidate}: {percentage}% ({results[candidate]})\")\n    return results\n\n\nvotes = [(\"A\", 10), (\"B\", 20), (\"C\", 30), (\"D\", 40)]"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, '%d-%b-%Y')\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY format.\")\n\n    return date.strftime('%B %d, %Y')\n"}
{"task_id": "valid/42", "completion": "\n    # get the file extension of the new name\n    new_extension = newname.split('.')[-1]\n\n    # check if the new file extension is in the allowed types\n    if new_extension in allowed_type:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def process(n):\n        if isinstance(n, tuple):\n            return [process(i) for i in n if is_even(i) or (is_numeric(i) and is_even(int(i)))]\n        else:\n            return n if is_even(n) or (is_numeric(n) and is_even(int(n))) else None\n\n    return [process(i) for i in lst]\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['generation'].append(generation)\n    histogram_data['accuracy'].append(accs)\n    return histogram_data\n\n\nhistogram_data = {'generation': [], 'accuracy': []}\ngeneration = 1\naccs = [0.8, 0.85, 0.9, 0.92, 0.95]\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'\\w{5}', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),\n        re.compile(r'^videos/(?P<video_id>\\d+)/$'),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return pattern.view\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello, \"\n    sentence = \"world!\"\n    return string + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += dict[key]\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = file_path.split('/')\n        if dir_path[0] not in config_files:\n            config_files[dir_path[0]] = [file_path]\n        else:\n            config_files[dir_files[0]].append(file_path)\n    return config_files\n\n\nfile_paths = ['/etc/nginx/nginx.conf', '/etc/nginx/sites-available/example.com', '/etc/nginx/sites-enabled/example.com', '/var/www/example.com/public_html/index.html']"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    string_3 = \"!\"\n\n    # Concatenate the strings using f-strings\n    result = f\"{string_1} {string_2} {string_3}\"\n\n    return result\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # Capitalize first letter of each word\n        string = ' '.join([word.capitalize() for word in string.split(' ')])\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # prices of items in vending machine\n    prices = {\"cola\": 1.0, \"chips\": 0.5, \"candy\": 0.65}\n\n    # stock of items in vending machine\n    stock = {\"cola\": 10, \"chips\": 10, \"candy\": 10}\n\n    # check if item is in stock and if money inserted is enough\n    if item in stock and money_inserted >= prices[item]:\n        # update stock\n        stock[item] -= 1\n\n        # calculate change\n        change = money_inserted - prices[item]\n\n        # return change and item to user\n        return {\"item\": item, \"change\": change, \"stock\": stock}\n    else:\n        # return error message if item is not in stock or not enough money inserted\n        return {\"error\": \"item not in stock or not enough money inserted\"}\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning value to variable\n    my_var = 10\n\n    # Validating the value\n    if my_var > 5:\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r\"\\b\\w[\\w']*\\b\", text)\n    return tokens\n\ntext = \"This is a sample text for tokenization.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    min_val = min(divisible_numbers)\n    max_val = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    print(f\"Average: {average}\")\n    print(f\"Min: {min_val}\")\n    print(f\"Max: {max_val}\")\n    print(\"Occurrences:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split(\" \")\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(decimal_places+1):\n        euler_number += (1 / math.factorial(i))\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    min_value = time_series[0]\n    max_value = time_series[0]\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # bitwise operation to check if number is odd\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    **{mapping['name']}** is a Discord bot designed to provide a music-playing experience. It's designed to be user-friendly and intuitive, making it easy for users to manage their playlists and server settings.\n\n    **Commands:**\n    {mapping['commands']}\n\n    **Features:**\n    - **Play Music:** {mapping['play_music']}\n    - **Manage Playlists:** {mapping['manage_playlists']}\n    - **Server Settings:** {mapping['server_settings']}\n    - **Help Information:** {mapping['help_information']}\n\n    **Web App:**\n    {mapping['web_app']}\n\n    **Support:**\n    If you have any questions or need help with {mapping['name']}, feel free to ask in our support server.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    nums = []\n    while n != 0:\n        n, r = divmod(n, 3)\n        nums.append(str(r))\n    return ''.join(nums[::-1])\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teen\"\n    elif age <= 59:\n        return \"Adult\"\n    elif age <= 120:\n        return \"Senior\"\n    else:\n        return \"Invalid age\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade > 100 or numerical_grade < 0:\n        return \"Invalid numerical grade\"\n\n    letter_grade = \"A\" if numerical_grade >= 90 else \\\n        \"B\" if numerical_grade >= 80 else \\\n        \"C\" if numerical_grade >= 70 else \\\n        \"D\" if numerical_grade >= 60 else \"F\"\n\n    gpa = 4.0 if letter_grade == \"A\" else \\\n        3.0 if letter_grade == \"B\" else \\\n        2.0 if letter_grade == \"C\" else \\\n        1.0 if letter_grade == \"D\" else 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(letter in vowels for letter in palindrome)\n        palindrome_dict[palindrome] = vowel_count\n\n    return palindrome_dict\n\n\npalindrome_tuples = ('level', 'radar', 'deed', 'rotator', 'python', 'refer')"}
{"task_id": "valid/104", "completion": "\n    # 1. If the string is empty, return \"Empty String\".\n    if s == \"\":\n        return \"Empty String\"\n\n    # 2. If the string is a palindrome, return \"Palindrome\".\n    if s == s[::-1]:\n        return \"Palindrome\"\n\n    # 3. If the string is a number, return \"Number\".\n    if s.isdigit():\n        return \"Number\"\n\n    # 4. If the string is a alphanumeric, return \"Alphanumeric\".\n    if s.isalnum():\n        return \"Alphanumeric\"\n\n    # 5. If the string is a special character, return \"Special Character\".\n    if not s.isalnum() and not s.isdigit() and not s.isspace():\n        return \"Special Character\"\n\n    # 6. If the string is a mix of uppercase and lowercase, return \"Mixed Case\".\n    if s.islower() or s.isupper():\n        return \"Mixed Case\"\n\n    # 7. If the string is a lowercase, return \"Lowercase\".\n    if s.islower():\n        return \"Lowercase\"\n\n    # 8. If the string is a uppercase, return \"Uppercase\".\n    if s.isupper():\n        return \"Uppercase\"\n\n    # 9. If the string is a whitespace, return \"Whitespace\".\n    if s.isspace():\n        return \"Whitespace\"\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the sum of elements\n    sum_set = set()\n\n    # Initialize sum of elements\n    sum = 0\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        # Add current element to sum\n        sum = sum + arr[i]\n\n        # Return true in following cases\n        # a) Current element is 0\n        # b) sum of elements so far is 0\n        # c) sum is already present in set\n        if arr[i] == 0 or sum == 0 or sum in sum_set:\n            return True\n\n        sum_set.add(sum)\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n\n    for dependency in dependencies:\n        package_name, version_number = dependency\n\n        if package_name in latest_versions:\n            if version_number > latest_versions[package_name]:\n                latest_versions[package_name] = version_number\n        else:\n            latest_versions[package_name] = version_number\n\n    return list(latest_versions.items())\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_cause = {action: [result]}\n            causes_dict.update(causes_cause)\n    return causes_dict\n\n\ncauses = [\"kill zombie\", \"shoot gun\", \"drive car\", \"build house\", \"build tree\", \"kill zombie\", \"shoot gun\", \"drive car\", \"build house\", \"build tree\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Both inputs should be list and integer respectively.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n        print_thank_you(n-1, current_num+1)\n    else:\n        print_thank_you(n, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\n\"\n    help_message += \"Options:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-h\", \"Show this help message\"), (\"-v\", \"Verbose mode\"), (\"-o\", \"Output file\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize count\n    count = 0\n\n    # Loop through array\n    for i in Val:\n        # If value is found, increment count\n        if i == Val:\n            count += 1\n\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        quotient = 0\n        while h >= t:\n            h -= t\n            quotient += 1\n        return quotient\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    energy_threshold = 0.5\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        if energy > energy_threshold:\n            num_electrons += 1\n\n    # Adjust number of electrons based on doping levels\n    num_electrons *= ados\n\n    # Adjust number of electrons based on density of states\n    num_electrons /= dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 1\n    while i < len(arr) - 1:\n        temp = arr[i]\n        arr[i] = arr[i + 1]\n        arr[i + 1] = temp\n        i += 2\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sub = lst[i:j]\n            sublists.append(sub)\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # Your code here\n    forecast_period = math.ceil(0.01 * len(df))\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize carry\n    carry = 0\n    # Initialize result string\n    result = ''\n    # Iterate over the string in reverse order\n    for digit in n_str[::-1]:\n        # Convert digit to integer and double it\n        temp = int(digit)*2 + carry\n        # If the result is greater than 9, set carry to 1 and append the remainder to the result\n        if temp > 9:\n            carry = 1\n            result += str(temp % 10)\n        # If the result is not greater than 9, set carry to 0 and append the result to the result\n        else:\n            carry = 0\n            result += str(temp)\n    # If there is a carry left, append it to the result\n    if carry:\n        result += str(carry)\n    # Return the result string in reverse order\n    return result[::-1]\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (2.0, 2.0, 2.0),\n        \"preset3\": (3.0, 3.0, 3.0),\n        \"preset4\": (4.0, 4.0, 4.0),\n        \"preset5\": (5.0, 5.0, 5.0)\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for i in common_elements:\n        product *= i\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level.\nallow_multiple_answer is a boolean that determines whether the quiz allows multiple answers or not.\nzoom_level is an integer that determines the zoom level of the application.\n\nThe function prints out the behavior of the quiz system based on the values of these parameters.\n\nThe first two calls to the function print \"Allowing multiple answers\" and \"Zoom level is set to 10\", respectively.\nThe second two calls print \"Not allowing multiple answers\" and \"Zoom level is not set\", respectively.\n\"\"\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return \"\".join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for obj in (a, b):\n        for key in obj:\n            if not key.isalpha():\n                continue\n            if key in merged:\n                if isinstance(obj[key], dict) and isinstance(merged[key], dict):\n                    merged[key] = merge_objects(merged[key], obj[key])\n                else:\n                    merged[key] = obj[key]\n            else:\n                merged[key] = obj[key]\n    return merged\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Error: Dictionary is empty\"\n    except TypeError:\n        return \"Error: Invalid input. Please provide a dictionary.\"\n    except Exception as e:\n        return f\"Error: {e}\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    a = [1]\n    b = [1]\n    c = [1]\n    for i in range(2, x):\n        a.append(i)\n        b.append(i)\n        c.append(i)\n    for i in range(2, x):\n        for j in range(2, x):\n            if i * i + j * j <= x:\n                c[i * i + j * j] = i\n    for i in range(2, x):\n        for j in range(2, x):\n            if i * i + j * j <= x:\n                b[i * i + j * j] = j\n    for i in range(2, x):\n        for j in range(2, x):\n            if i * i + j * j <= x:\n                a[i * i + j * j] = i * i + j * j\n    for i in range(2, x):\n        for j in range(2, x):\n            if i * i + j * j <= x:\n                if a[i * i + j * j] == i and b[i * i + j * j] == j and c[i * i + j * j] == i:\n                    return True\n    return False\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
