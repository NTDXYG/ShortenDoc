{"task_id": "valid/0", "completion": "\n    from sklearn.externals import joblib\n    from sklearn.feature_extraction.text import TfidfVectorizer\n    import numpy as np\n\n    # Load the model from disk\n    model = joblib.load('model.pkl')\n\n    # Load the vectorizer from disk\n    vectorizer = joblib.load('vectorizer.pkl')\n\n    # Transform the text into a vector\n    text_vector = vectorizer.transform([text])\n\n    # Predict the category\n    prediction = model.predict(text_vector)\n\n    # Return the category\n    return prediction[0]\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n\ns = {1, 2, 3, 4, 5}"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Flute', 'Trumpet']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input not valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if n < 0:\n        return False\n    if n % 5 == 0:\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sum_digits % 3 == 0:\n            return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return int(math.log(n, base))\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string: {}\".format(e))\n\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npretty_print_json(json_str)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'\\b' + word1 + r'\\b.*\\b' + word2 + r'\\b', text) is not None\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop='):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = True\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z*z\n\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    length = len(str_num)\n    half = length // 2\n\n    left = int(str_num[:half])\n    right = int(str_num[half:])\n\n    candidate_palindrome = [10**(length - 1) - 1, 10**length + 1]\n\n    for i in range(-1, 2):\n        prefix = str(left + i)\n        candidate_palindrome.append(int(prefix + prefix[::-1][:half]))\n        if length % 2:\n            candidate_palindrome.append(int(prefix + str(left + i)[::-1][1:] + prefix[::-1][:half]))\n\n    candidate_palindrome.sort(key=lambda x: (abs(x - num), x))\n\n    return candidate_palindrome[0]\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_diagonal_elements = 0\n    is_square = rows == cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                sum_diagonal_elements += matrix[i][j]\n\n    return rows, cols, sum_diagonal_elements, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data:\n        return json_data[key] == value\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i+num_columns]\n        table.append(row)\n    return table\n\n\nbuttons = ['button1', 'button2', 'button3', 'button4', 'button5', 'button6', 'button7', 'button8', 'button9', 'button10']\nnum_columns = 3"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    s = s.lower()\n    for i in range(len(alphabet_order) - 1):\n        if alphabet_order[i] in s:\n            if alphabet_order[i + 1] not in s[s.index(alphabet_order[i]) + 1:]:\n                return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(map(int, re.findall(r'\\d+', ts)))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should contain only numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data[\"neighborhoods\"]\n    neighborhood_names = [neighborhood[\"name\"] for neighborhood in neighborhoods]\n    return sorted(neighborhood_names)\n\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize variables\n    total_votes = 0\n    results = {}\n\n    # Calculate total votes and create results dictionary\n    for vote in votes:\n        candidate, vote_count = vote\n        total_votes += vote_count\n        results[candidate] = vote_count\n\n    # Calculate and display percentage of votes for each candidate\n    for candidate, vote_count in results.items():\n        percentage = (vote_count / total_votes) * 100\n        print(f\"{candidate}: {percentage:.2f}% ({vote_count})\")\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%b-%Y')\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, '%d-%m-%Y')\n        except ValueError:\n            raise ValueError(f\"Invalid date format: {date_string}\")\n\n    return date.strftime('%B %d, %Y')\n\n"}
{"task_id": "valid/42", "completion": "\n    # get the file extension of the new name\n    new_extension = newname.split('.')[-1]\n\n    # check if the new extension is in the allowed types\n    if new_extension in allowed_type:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            if n.isdigit():\n                return int(n) % 2 == 0\n            else:\n                return False\n        elif isinstance(n, (int, float)):\n            return n % 2 == 0\n        else:\n            return False\n\n    def process_tuple(t):\n        if isinstance(t, tuple):\n            return tuple(process_tuple(i) for i in t if is_even(i))\n        else:\n            return t\n\n    return process_tuple(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^\\w{5}$', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        language = classifier.split(\" :: \")[1]\n        unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for i in arr:\n        for j in i:\n            if j in count_dict:\n                count_dict[j] += 1\n            else:\n                count_dict[j] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        (r'^videos/$', 'list_videos'),\n        (r'^videos/(?P<video_id>\\d+)/$', 'video_detail'),\n    ]\n\n    for pattern, view in urlpatterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, \"\n    name = \"World\"\n    concatenated = sentence + name\n    return concatenated\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += dict[key]\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    return [value for value in list1 if value in list2]\n\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n\n    for file_path in file_paths:\n        dir_path, file_name = os.path.split(file_path)\n        if dir_path not in config_files:\n            config_files[dir_path] = []\n        config_files[dir_path].append(file_name)\n\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    string_3 = \"!\"\n    concatenated = f\"{string_1} {string_2} {string_3}\"\n    return concatenated\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # Capitalize first letter\n        string = string[0].upper() + string[1:]\n        result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>bold text 1</b> and <b>bold text 2</b>\""}
{"task_id": "valid/73", "completion": "\n    # set prices for items\n    prices = {\"cola\": 1.0, \"chips\": 0.5, \"candy\": 0.65}\n\n    # check if item is in stock\n    if item not in prices:\n        return \"Item not available\"\n\n    # check if enough money was inserted\n    if money_inserted < prices[item]:\n        return \"Not enough money\"\n\n    # calculate change\n    change = money_inserted - prices[item]\n\n    # update stock\n    # (in real vending machine, this would be done by a separate database)\n    # for simplicity, we'll just remove the item from the dictionary\n    del prices[item]\n\n    return change\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning values\n    a = 10\n    b = 20\n    c = 30\n\n    # Validating\n    if a < b and b < c:\n        print(\"Both conditions are True\")\n    else:\n        print(\"Either of the conditions is False\")\n\n\nassign_and_validate()\n\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w[\\w\\']*\\b', text.lower())\n    return tokens\n\ntext = \"This is a sample text. It contains several words.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    print(\"Numbers divisible by 3 and 7: \", divisible_numbers)\n    print(\"Average: \", average)\n    print(\"Maximum: \", max_value)\n    print(\"Minimum: \", min_value)\n    print(\"Occurrences: \", occurrences)\n\n\nnumbers = [10, 21, 28, 35, 70, 140, 190, 280]\nfind_divisible_numbers(numbers)\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n    return None\n\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_num = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    for i in time_series:\n        if not isinstance(i, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "valid/91", "completion": "\n    xml = Element(\"root\")\n    for key, val in dictionary.items():\n        child = Element(key)\n        child.text = str(val)\n        xml.append(child)\n    return tostring(xml, encoding=\"unicode\")\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}"}
{"task_id": "valid/97", "completion": "\n\n    **Discord Music Bot**\n\n    **Description:**\n    This bot is designed to manage music playback in Discord servers. It provides various features to help manage personal playlists, server settings, and other administrative tasks.\n\n    **Commands:**\n    {mapping}\n\n    **Usage:**\n    To use a command, type the command followed by the required parameters. For example, `{mapping['play']}` to play a song.\n\n    **Help:**\n    For more information about a command, type `{mapping['help']}` followed by the command name. For example, `{mapping['help']} play`.\n\n    **Support:**\n    If you have any questions or need help with the bot, feel free to ask.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    if n == 0:\n        return '0'\n    res = ''\n    while n:\n        n, remainder = divmod(n, 3)\n        res = str(remainder) + res\n    return res\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names if '.' in file_name)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 59:\n        return \"Adult\"\n    elif age <= 120:\n        return \"Senior\"\n    else:\n        return \"Invalid age\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for letter in palindrome:\n            if letter in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n    return palindrome_dict\n\n\npalindrome_tuples = ('level', 'radar', 'deed', 'hello', 'python', 'repaper')"}
{"task_id": "valid/104", "completion": "\n    # convert string to list\n    str_list = list(s)\n\n    # iterate over list\n    for i in range(len(str_list)):\n        # check if character is alphabet\n        if str_list[i].isalpha():\n            # check if character is uppercase\n            if str_list[i].isupper():\n                # convert to lowercase\n                str_list[i] = str_list[i].lower()\n            else:\n                # convert to uppercase\n                str_list[i] = str_list[i].upper()\n\n    # join list back to string\n    s = \"\".join(str_list)\n\n    return s\n\n"}
{"task_id": "valid/105", "completion": "\n    sum_set = set()\n    current_sum = 0\n\n    for i in arr:\n        current_sum += i\n\n        if current_sum == 0 or current_sum in sum_set:\n            return True\n\n        sum_set.add(current_sum)\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[0]\n        version_number = int(version_number)\n        if package_name in latest_versions:\n            if version_number > latest_versions[package_name]:\n                latest_versions[package_name] = version_number\n        else:\n            latest_versions[package_name] = version_number\n    return latest_versions\n\n\ndependencies = [('package1', '0001_auto_20200101_1200'),\n                ('package1', '0002_auto_20200101_1300'),\n                ('package2', '0001_auto_20200101_1400'),\n                ('package1', '0003_auto_20200101_1500'),\n                ('package2', '0002_auto_20200101_1600')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {\"accident\": [], \"natural\": [], \"unknown\": []}\n    for cause in causes:\n        action, result = cause.split()\n        if action == \"accident\":\n            causes_dict[\"accident\"].append(cause)\n        elif action == \"natural\":\n            causes_dict[\"natural\"].append(cause)\n        else:\n            causes_dict[\"unknown\"].append(cause)\n    return causes_dict\n\n\ncauses = [\"accident sunburn\", \"natural cold\", \"unknown broken arm\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").replace(\"'\", \"\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: Both inputs must be of type list and int.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please enter a positive integer value\")\n        return\n    if current_num == n:\n        return\n    print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python3 my_app [OPTIONS]\\n\\n\"\n    help_message += \"Options:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    from collections import Counter\n    count_dict = Counter(Val)\n    return count_dict\n\n"}
{"task_id": "valid/120", "completion": "\n    return sample_bitset ^ 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        quotient = 0\n        while h >= t:\n            h -= t\n            quotient += 1\n        return quotient\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = calculate_num_electrons(grid_energies, dos_grid_size)\n\n    # adjust number of electrons based on doping levels\n    num_electrons = adjust_num_electrons(num_electrons, ados, dope)\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if i + 1 < len(arr):\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n        i += 2\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {')': '(', ']': '[', '}': '{'}\n    for char in string:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or parentheses[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sub = lst[i:j]\n            sublists.append(sub)\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=200),\n            ),\n        ]\n    \"\"\"\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    # convert string to list of digits\n    digits = list(map(int, n_str))\n\n    # double the digits from right to left\n    for i in range(len(digits) - 1, -1, -1):\n        digits[i] *= 2\n\n        # if the digit is 10 or more, carry 1 to the next digit\n        if digits[i] >= 10:\n            digits[i] -= 10\n            if i > 0:\n                digits[i - 1] += 1\n            else:\n                digits.insert(0, 1)  # insert 1 at the beginning if we have to carry\n\n    # convert list of digits back to string\n    return ''.join(map(str, digits))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': [0.0, 0.0, 0.0],\n        'preset1': [1.0, 1.0, 1.0],\n        'preset2': [2.0, 2.0, 2.0],\n        'preset3': [3.0, 3.0, 3.0],\n        'preset4': [4.0, 4.0, 4.0],\n        'preset5': [5.0, 5.0, 5.0],\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for i in common_elements:\n        product *= i\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Quiz allows multiple answers\")\n    else:\n        print(\"Quiz does not allow multiple answers\")\n\n    if zoom_level == \"low\":\n        print(\"Zoom level is low\")\n    elif zoom_level == \"medium\":\n        print(\"Zoom level is medium\")\n    elif zoom_level == \"high\":\n        print(\"Zoom level is high\")\n    else:\n        print(\"Invalid zoom level\")\n\n\nquiz_system_behavior(True, \"low\")\nquiz_system_behavior(False, \"medium\")\nquiz_system_behavior(True, \"high\")\nquiz_system_behavior(False, \"extra high\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    modified_sentence = \"\".join(char for char in sentence if char not in vowels)\n    return modified_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a.keys():\n        if isinstance(a[key], dict):\n            merged[key] = merge_objects(a[key], b[key] if key in b and isinstance(b[key], dict) else {})\n        else:\n            merged[key] = a[key]\n\n    for key in b.keys():\n        if key not in a and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n        elif key not in a:\n            merged[key] = b[key]\n\n    sorted_keys = sorted([key for key in merged.keys() if key.isalpha()])\n    return {key: merged[key] for key in sorted_keys}\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n\nlst = [1, 5, 8, 9, 2, 4, 7, 6, 3]\nn = 5"}
{"task_id": "valid/151", "completion": "\n    if x % 2 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    if gcd(x, 10) != 1:\n        return False\n    if (x - 1) % 3 != 0:\n        return False\n    if (x + 1) % 6 != 0:\n        return False\n    if (x - 1) % 4 != 0:\n        return False\n    if (x + 1) % 8 != 0:\n        return False\n    if (x - 1) % 9 != 0:\n        return False\n    if (x + 1) % 15 != 0:\n        return False\n    if (x - 1) % 25 != 0:\n        return False\n    if (x + 1) % 100 != 0:\n        return False\n    if (x - 1) % 400 != 0:\n        return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
