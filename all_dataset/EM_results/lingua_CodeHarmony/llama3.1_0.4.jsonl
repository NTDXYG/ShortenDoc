{"task_id": "valid/0", "completion": "\n    # Define the design rules\n    design_rules = {\n        \"category1\": [\"rule1\", \"rule2\"],\n        \"category2\": [\"rule3\", \"rule4\"],\n        # Add more categories and rules as needed\n    }\n\n    # Initialize the category\n    category = None\n\n    # Iterate over the design rules\n    for category, rules in design_rules.items():\n        # Check if the text matches any of the rules\n        if any(rule in text for rule in rules):\n            # If a match is found, assign the category\n            category = category\n            break\n\n    # Return the category\n    return category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        json_list = json.loads(json_string)\n        return json_list\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if n < 0:\n        return False\n    else:\n        return n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except json.JSONDecodeError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = re.compile(r'\\b' + re.escape(word1) + r'\\b\\s+\\b' + re.escape(word2) + r'\\b')\n    return bool(pattern.search(text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(row) for row in array]\n"}
{"task_id": "valid/16", "completion": "\n    # Split the comment into lines\n    lines = comment.splitlines()\n\n    # Initialize an empty dictionary to store the settings\n    settings = {}\n\n    # Iterate over each line\n    for line in lines:\n        # Remove leading and trailing whitespace\n        line = line.strip()\n\n        # Check if the line starts with a setting keyword\n        if line.startswith('set tabstop='):\n            # Extract the tabstop value\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('set expandtab'):\n            # Set expandtab to True\n            settings['expandtab'] = True\n        elif line.startswith('set shiftwidth='):\n            # Extract the shiftwidth value\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('set softtabstop='):\n            # Extract the softtabstop value\n            settings['softtabstop'] = int(line.split('=')[1])\n\n    # Return the extracted settings\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = nltk.word_tokenize(sentence)\n    \n    # Tag the words with their part of speech\n    tagged_words = nltk.pos_tag(words)\n    \n    # Disassemble the sentence into a list of tuples containing the word and its part of speech\n    disassembled_sentence = [(word, tag) for word, tag in tagged_words]\n    \n    return disassembled_sentence\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of both lists\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n\n    # Combine the reversed lists\n    combined_list = reversed_list1 + reversed_list2\n\n    # Sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n\n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\", {}).get(\"nested\", {}).get(\"dictionary\", None)\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = str(num)\n    # Check if the number is already a palindrome\n    if num == num[::-1]:\n        return num\n    # If not, find the closest palindrome\n    else:\n        # Find the closest smaller palindrome\n        smaller = num\n        while True:\n            smaller = int(''.join(reversed(str(int(smaller) - 1))))\n            if str(smaller) == str(smaller)[::-1]:\n                break\n        # Find the closest larger palindrome\n        larger = num\n        while True:\n            larger = int(''.join(reversed(str(int(larger) + 1))))\n            if str(larger) == str(larger)[::-1]:\n                break\n        # Return the closest palindrome\n        if abs(int(num) - int(smaller)) < abs(int(num) - int(larger)):\n            return smaller\n        else:\n            return larger\n"}
{"task_id": "valid/25", "completion": "\n    try:\n        num = float(num)\n        if num < 0:\n            print(\"Sorry, can't calculate square root of negative number.\")\n        else:\n            result = num ** 0.5\n            return result\n    except ValueError:\n        print(\"Invalid input. Please enter a number.\")\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns in the matrix\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Check if the matrix is square\n    is_square = num_rows == num_cols\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(num_rows))\n\n    # Return the number of rows, number of columns, sum of diagonal elements, and a boolean indicating if the matrix is square\n    return num_rows, num_cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    button_table = []\n    for i in range(0, len(buttons), num_columns):\n        row = []\n        for j in range(num_columns):\n            if i + j < len(buttons):\n                row.append(buttons[i + j])\n            else:\n                row.append(None)\n        button_table.append(row)\n    return button_table\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            continue\n        if s[i] not in alphabet or s[i + 1] not in alphabet:\n            return False\n        if alphabet.index(s[i]) > alphabet.index(s[i + 1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Initialize current number to 0\n    current_num = 0\n    \n    # Iterate over each character in the string\n    for char in ts:\n        # If the character is a digit, add it to the current number\n        if char.isdigit():\n            current_num = current_num * 10 + int(char)\n        # If the character is not a digit and the current number is not 0\n        elif current_num != 0:\n            # Add the current number to the total sum\n            total_sum += current_num\n            # Reset the current number to 0\n            current_num = 0\n    \n    # If the string ends with a number, add it to the total sum\n    if current_num != 0:\n        total_sum += current_num\n    \n    # Return the total sum\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate array contains numerical values\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must contain only numerical values\")\n\n    # Compute sum of elements in the array\n    total = sum(arr)\n\n    return total\n"}
{"task_id": "valid/37", "completion": "\n    # Load JSON data into Python dictionary\n    neighborhoods = json.loads(json_data)\n\n    # Extract neighborhood names from dictionary\n    neighborhood_names = [neighborhood['name'] for neighborhood in neighborhoods]\n\n    # Sort neighborhood names in alphabetical order\n    sorted_neighborhoods = sorted(neighborhood_names)\n\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        sum = abs(arr[i] + arr[i + 1])\n        if sum < min_sum:\n            min_sum = sum\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total number of votes is at least 100\n    if sum(votes, key=lambda x: x[1])[1] < 100:\n        raise ValueError(\"Total number of votes must be at least 100.\")\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over each vote\n    for candidate, votes in votes:\n        # Check if the candidate is already in the results dictionary\n        if candidate in results:\n            # If the candidate is already in the dictionary, add the current vote to their total\n            results[candidate] += votes\n        else:\n            # If the candidate is not in the dictionary, add them with their current vote\n            results[candidate] = votes\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Create a new dictionary to store the percentage of votes for each candidate\n    percentages = {}\n\n    # Iterate over each candidate in the results dictionary\n    for candidate, votes in results.items():\n        # Calculate the percentage of votes for the candidate\n        percentage = (votes / total_votes) * 100\n        # Round the percentage to two decimal places\n        percentage = round(percentage, 2)\n        # Add the candidate and their percentage to the percentages dictionary\n        percentages[candidate] = percentage\n\n    # Return the percentages dictionary\n    return percentages\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Parse date string\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n        # Validate date\n        if date.day == 31 and (date.month in [4, 6, 9, 11]):\n            raise ValueError('Invalid date')\n        if date.day == 30 and date.month == 2:\n            raise ValueError('Invalid date')\n        # Standardize date format\n        standardized_date = date.strftime('%B %d, %Y')\n        return standardized_date\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {date_string}\") from e\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['.jpg', '.png', '.gif', '.bmp'],\n        'video': ['.mp4', '.avi', '.mov', '.mkv'],\n        'document': ['.pdf', '.docx', '.txt', '.doc'],\n        'audio': ['.mp3', '.wav', '.ogg', '.flac'],\n        'spreadsheet': ['.xlsx', '.xls', '.csv'],\n        'presentation': ['.pptx', '.ppt', '.odp'],\n        'archive': ['.zip', '.rar', '.7z', '.tar'],\n        'code': ['.py', '.java', '.cpp', '.c'],\n        'database': ['.db', '.sql', '.mdb'],\n        'text': ['.txt', '.log', '.json'],\n        'other': ['.']\n    }\n    if allowed_type not in allowed_extensions:\n        return False\n    if not newname.endswith(allowed_extensions[allowed_type]):\n        return False\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def remove_uneven(tup):\n        if isinstance(tup, list):\n            return [remove_uneven(i) for i in tup if remove_uneven(i)]\n        elif isinstance(tup, tuple):\n            return tuple(remove_uneven(i) for i in tup if remove_uneven(i))\n        elif isinstance(tup, int) or isinstance(tup, float):\n            return tup if is_even(tup) else None\n        elif isinstance(tup, str):\n            if is_numeric(tup):\n                return float(tup) if is_even(float(tup)) else None\n            else:\n                return tup\n        else:\n            return None\n\n    return [remove_uneven(i) for i in lst if remove_uneven(i)]\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return sum(1 for char in string if char == specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs  # commented out line\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "valid/48", "completion": "\n    # Initialize an empty set to store unique languages\n    unique_languages = set()\n\n    # Iterate over each classifier in the list\n    for classifier in classifiers:\n        # Split the classifier string into parts\n        parts = classifier.split(\" :: \")\n\n        # Check if the classifier matches the expected format\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            # Extract the language from the classifier\n            language = parts[1]\n\n            # Add the language to the set of unique languages\n            unique_languages.add(language)\n\n    # Return the count of unique languages\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    return [arr.count(i) for i in set(arr)]\n\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match the URL\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches, return the view function\n    if match:\n        # Get the video ID from the URL\n        video_id = match.group(1)\n\n        # Return the view function for the video\n        return 'video.views.video', {'video_id': video_id}\n\n    # If the URL does not match, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, how are you?\"\n    concatenated = \"I am fine, thank you.\"\n    return sentence + \" \" + concatenated\n"}
{"task_id": "valid/53", "completion": "\n    n = len(s)\n    substrings = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary.keys():\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = set(list1) & set(list2)\n    list2 = [x for x in list2 if x not in intersection]\n    return list1, list2\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request.method == request_method:\n                return func(request, *args, **kwargs)\n            else:\n                return HttpResponseNotAllowed(['GET', 'POST'])\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd_recursive(a - b, b)\n    return gcd_recursive(a, b - a)\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        # Extract the file extension from the file name\n        file_ext = os.path.splitext(file_name)[1]\n        # Categorize the file based on its location and extension\n        if dir_path not in config_files:\n            config_files[dir_path] = {}\n        if file_ext not in config_files[dir_path]:\n            config_files[dir_path][file_ext] = []\n        config_files[dir_path][file_ext].append(file_name)\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: If the start index is greater than the end index, the target is not in the array.\n    if start > end:\n        return False\n\n    # Calculate the middle index of the current search range.\n    mid = (start + end) // 2\n\n    # If the middle element is equal to the target, return True.\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half of the array.\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half of the array.\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color == \"WHITE\":\n        return colors[1]\n    elif color == \"RED\":\n        return colors[2]\n    elif color == \"GREEN\":\n        return colors[3]\n    elif color == \"BLUE\":\n        return colors[0]\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    # Iterate over the list and increment each value by 1\n    for i in range(len(list)):\n        list[i] += 1\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        root = math.sqrt(i)\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    # Convert the target string to lowercase\n    target = target.lower()\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Convert the word to lowercase\n        word = word.lower()\n        \n        # Check if the word is equal to the target string\n        if word == target:\n            # If the word is equal to the target string, return the word\n            return word\n    \n    # If the target string is not found in the list of words, return None\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = []\n    word = \"\"\n    for char in sentence:\n        if char == \" \":\n            if word:\n                words.append(word)\n                word = \"\"\n        else:\n            word += char\n    if word:\n        words.append(word)\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys dictionary:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = f\"Hello, my name is {name} and I am {age} years old.\"\n    return phrase\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        cleaned_string = re.sub('[^A-Za-z0-9\\s]', '', string)\n        # Capitalize the string\n        capitalized_string = cleaned_string.title()\n        result.append(capitalized_string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    # Initialize an empty list to store bold text\n    bold_text = []\n    \n    # Initialize a flag to track if we are currently inside a bold tag\n    inside_bold = False\n    \n    # Initialize an empty string to build the current bold text\n    current_bold = \"\"\n    \n    # Iterate over each character in the HTML code\n    for char in html_code:\n        # If we encounter a '<' and the next character is 'b' or 'B', we are entering a bold tag\n        if char == '<' and html_code[html_code.index(char) + 1] in ['b', 'B']:\n            inside_bold = True\n        # If we encounter a '>' and we are inside a bold tag, we are exiting the bold tag\n        elif char == '>' and inside_bold:\n            inside_bold = False\n            # If we were building a bold text, add it to the list and reset the current bold text\n            if current_bold:\n                bold_text.append(current_bold)\n                current_bold = \"\"\n        # If we are inside a bold tag, add the character to the current bold text\n        elif inside_bold:\n            current_bold += char\n        # If we are not inside a bold tag and the character is not a '<' or '>', add it to the current bold text\n        elif char not in ['<', '>']:\n            current_bold += char\n    \n    # Return the list of bold text\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"1\": {\"name\": \"Soda\", \"price\": 1.00},\n        \"2\": {\"name\": \"Chips\", \"price\": 0.50},\n        \"3\": {\"name\": \"Candy\", \"price\": 0.25},\n    }\n\n    # Check if the item is in the list\n    if item in items:\n        # Calculate the change\n        change = money_inserted - items[item][\"price\"]\n        # Check if the user has enough money\n        if money_inserted >= items[item][\"price\"]:\n            # Update the stock\n            if items[item][\"name\"] in stock:\n                stock[items[item][\"name\"]] += 1\n            else:\n                stock[items[item][\"name\"]] = 1\n            # Return the change\n            return f\"Thank you for your purchase! Your change is ${change:.2f}.\"\n        else:\n            return \"Sorry, you don't have enough money to make this purchase.\"\n    else:\n        return \"Sorry, we don't have that item in stock.\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Define a variable with a specific value\n    specific_value = 5\n\n    # Define a function that assigns the specific value to a variable\n    def assign_value(var):\n        var = specific_value\n        return var\n\n    # Define a function that validates the assigned value\n    def validate_value(var):\n        if var == specific_value:\n            return True\n        else:\n            return False\n\n    # Assign the specific value to a variable using the assign_value function\n    assigned_value = assign_value(0)\n\n    # Validate the assigned value using the validate_value function\n    is_valid = validate_value(assigned_value)\n\n    # Return the result of the validation\n    return is_valid\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    return [x for i, x in enumerate(arr) if i == 0 or x != arr[i-1]]\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    return words\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    return average, max_value, min_value, occurrences\n\nnumbers = [i for i in range(1, 100)]\naverage, max_value, min_value, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    highest_frequency_words = [word for word, freq in frequency.items() if freq == max_frequency]\n    return highest_frequency_words\n"}
{"task_id": "valid/85", "completion": "\n    return round(math.e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    return average, sum(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\naverage, total = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for entry in encyclopedia:\n        related_articles[entry] = 0\n        for other_entry in encyclopedia:\n            if entry != other_entry:\n                if is_related(entry, other_entry):\n                    related_articles[entry] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('root')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    if n > len(lst):\n        return None\n    else:\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = \"Discord Bot for Music Management\"\n    description += \"\\n\\n**Music Management**\"\n    description += \"\\n-------------------\"\n    description += \"\\n`play <song_name>` - Play a song\"\n    description += \"\\n`pause` - Pause the current song\"\n    description += \"\\n`resume` - Resume the current song\"\n    description += \"\\n`stop` - Stop the current song\"\n    description += \"\\n`skip` - Skip the current song\"\n    description += \"\\n`queue` - View the current queue\"\n    description += \"\\n`remove <song_index>` - Remove a song from the queue\"\n    description += \"\\n`clear` - Clear the entire queue\"\n    description += \"\\n\\n**Information Features**\"\n    description += \"\\n-------------------\"\n    description += \"\\n`help` - View this help message\"\n    description += \"\\n`about` - View information about the bot\"\n    description += \"\\n`settings` - View server settings\"\n    description += \"\\n`playlist` - View your personal playlist\"\n    description += \"\\n\\n**Web App Management**\"\n    description += \"\\n-------------------\"\n    description += \"\\n`web_app` - View the web app\"\n    description += \"\\n`web_app_settings` - View web app settings\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(filename.split('.')[-1] for filename in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"minor\"\n    elif age < 65:\n        return \"adult\"\n    else:\n        return \"senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n    else:\n        letter_grade = \"F\"\n\n    gpa = numerical_grade / 10\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    return sum(item['price'] for item in listing)\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeu'\n    palindrome_vowels_count = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome in palindrome_tuples}\n    return palindrome_vowels_count\n"}
{"task_id": "valid/104", "completion": "\n    # check if string is empty\n    if not s:\n        return s\n\n    # check if string starts with 'abc'\n    if s.startswith('abc'):\n        # if it does, remove the first three characters\n        return s[3:]\n\n    # check if string ends with 'xyz'\n    if s.endswith('xyz'):\n        # if it does, remove the last three characters\n        return s[:-3]\n\n    # if string does not start with 'abc' or end with 'xyz', return the original string\n    return s\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package, version = dependency\n        # Extract the version number from the version string\n        version_number = version.split('_')[-1]\n        # Extract the date and time from the version string\n        date_time = version.split('_')[-2]\n        # Convert the date and time to a datetime object\n        date_time_obj = datetime.strptime(date_time, '%Y%m%d_%H%M')\n        # If the package is not in the latest_versions dictionary or the current version is newer than the stored version, update the dictionary\n        if package not in latest_versions or date_time_obj > latest_versions[package].date_time_obj:\n            latest_versions[package] = {'version': version, 'date_time_obj': date_time_obj}\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Define a dictionary to map actions to categories\n    action_categories = {\n        \"accident\": [\"car\", \"train\", \"plane\", \"ship\"],\n        \"natural\": [\"disease\", \"injury\", \"illness\"],\n        \"human error\": [\"negligence\", \"recklessness\", \"carelessness\"],\n        \"suspicious\": [\"homicide\", \"suicide\", \"murder\"],\n        \"unknown\": [\"unknown\", \"undetermined\", \"unspecified\"]\n    }\n\n    # Initialize an empty dictionary to store the categorized causes\n    categorized_causes = {}\n\n    # Iterate over each cause\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \")\n\n        # Determine the category of the action\n        for category, actions in action_categories.items():\n            if action in actions:\n                # If the category is not already in the dictionary, add it\n                if category not in categorized_causes:\n                    categorized_causes[category] = []\n                # Add the cause to the category\n                categorized_causes[category].append(cause)\n\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Define punctuation marks\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    # Remove punctuation marks from string\n    no_punct = ''.join(char for char in string if char not in punctuations)\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: exponent must be an integer or float.\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for i, value in enumerate(min_values):\n        print(f\"Row {i+1} min value is {value}\")\n"}
{"task_id": "valid/113", "completion": "\n    if n == 0:\n        return\n    if current_num % 2 == 0:\n        print(current_num)\n    print_thank_you(n - 1, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    return len(str(num)) == len(set(str(num)))\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it as is\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0].lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    return s[0] + remove_vowels_recursive(s[1:])  # <--- changed here\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [options]\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}: {option[1]}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    return Val.count(1)\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if t < 0:\n        t = -t\n        h = -h\n    quotient = 0\n    while h >= t:\n        h -= t\n        quotient += 1\n    return quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum([i for i in input_list if i % 2 != 0])\n"}
{"task_id": "valid/125", "completion": "\n    # convert string to lower case\n    string = string.lower()\n    # define vowels\n    vowels = \"aeiou\"\n    # count consonants\n    consonants = sum(1 for char in string if char.isalpha() and char not in vowels)\n    return consonants\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = ados * grid_energies\n    \n    # adjust number of electrons based on doping levels\n    num_electrons = num_electrons + dope * dos_grid_size\n    \n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    max_diff = 0\n    for i in range(1, n):\n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Use list slicing to get the first 3 unique elements\n    first_three_unique = list(unique_elements)[:3]\n    \n    return first_three_unique\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(1, len(lst) + 1):\n        sublists.append(lst[:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations\n    from django.db.models.deletion import CASCADE\n    from django.db.models.fields import CharField\n    from django.db.models.fields.related import ForeignKey\n    from django.db.models.fields.related import ManyToManyField\n    from django.db.models.fields.related import OneToOneField\n    from django.db.models.fields.related import OneToOneField\n    from django.db.models.fields.related import ManyToManyField\n    from django.db.models.fields.related import ForeignKey\n    from django.db.models.fields import CharField\n    from django.db.models.deletion import CASCADE\n    from django.db import migrations\n    from {app_name}.models import {model_name}\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('{app_name}', '{model_name}_history'),\n        ]\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=255),\n            ),\n        ]\n    \"\"\"\n    return migration_operation\n"}
{"task_id": "valid/136", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find common elements between sets\n    common_elements = set1.intersection(set2)\n    # Return sum of common elements\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # calculate 1% of the dataset length\n    one_percent = dataset_length * 0.01\n    \n    # round the result to the nearest integer\n    forecast_period = math.ceil(one_percent)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start = (page_number - 1) * items_per_page\n    end = start + items_per_page\n    return items[start:end]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize result as an empty list\n    result = []\n    # Initialize carry as 0\n    carry = 0\n    # Iterate over the input string from right to left\n    for i in range(len(n_str) - 1, -1, -1):\n        # Convert the current digit to an integer\n        digit = int(n_str[i])\n        # Multiply the current digit by 2 and add the carry\n        double_digit = digit * 2 + carry\n        # Append the last digit of the result to the result list\n        result.append(str(double_digit % 10))\n        # Update the carry\n        carry = double_digit // 10\n    # If there is a remaining carry, append it to the result list\n    if carry:\n        result.append(str(carry))\n    # Reverse the result list and join it into a string\n    return ''.join(reversed(result))  # Return the result as a string\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": [0.0, 0.0, 0.0],\n        \"up\": [0.0, 0.0, 0.5],\n        \"down\": [0.0, 0.0, -0.5],\n        \"left\": [-0.5, 0.0, 0.0],\n        \"right\": [0.5, 0.0, 0.0],\n        \"forward\": [0.0, 0.5, 0.0],\n        \"backward\": [0.0, -0.5, 0.0]\n    }\n    return presets.get(preset_name, [0.0, 0.0, 0.0])\n"}
{"task_id": "valid/142", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find common elements between the two sets\n    common_elements = set1.intersection(set2)\n\n    # Calculate the product of common elements\n    product = 1\n    for element in common_elements:\n        product *= element\n\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"Quiz system allows multiple answers and zoom level is 1\"\n        elif zoom_level == 2:\n            return \"Quiz system allows multiple answers and zoom level is 2\"\n        else:\n            return \"Quiz system allows multiple answers but zoom level is not defined\"\n    else:\n        if zoom_level == 1:\n            return \"Quiz system does not allow multiple answers and zoom level is 1\"\n        elif zoom_level == 2:\n            return \"Quiz system does not allow multiple answers and zoom level is 2\"\n        else:\n            return \"Quiz system does not allow multiple answers but zoom level is not defined\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in sorted(a.keys()):\n        if key.isalpha():\n            if key in b:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merged[key] = merge_objects(a[key], b[key])\n                else:\n                    merged[key] = b[key]\n            else:\n                merged[key] = a[key]\n    for key in sorted(b.keys()):\n        if key.isalpha():\n            if key not in merged:\n                merged[key] = b[key]\n    return merged\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_val = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_val = max(max_val, find_max_in_dict(value))\n            else:\n                max_val = max(max_val, value)\n        return max_val\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if not string:\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*'\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
