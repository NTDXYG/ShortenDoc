{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        \"sarcastic\": [\"sarcastic\", \"sarcasticly\", \"sarcastically\"],\n        \"neutral\": [\"neutral\", \"neutrally\", \"neutrally\"],\n        \"happy\": [\"happy\", \"happily\", \"happily\"],\n        \"angry\": [\"angry\", \"angrily\", \"angrily\"],\n    }\n\n    # Initialize score\n    score = 0\n\n    # Check each category\n    for category, words in categories.items():\n        for word in words:\n            if word in text.lower():\n                score += 1\n\n    # Classify text based on score\n    if score > 0:\n        if score == len(categories):\n            return \"perfectly balanced\"\n        elif score == len(categories) * 2:\n            return \"perfectly happy\"\n        elif score == len(categories) * 3:\n            return \"perfectly sarcastic\"\n        elif score == len(categories) * 4:\n            return \"perfectly angry\"\n        else:\n            return \"neutral\"\n    else:\n        return \"unsure\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = [\"Guitar\", \"Piano\", \"Flute\", \"Violin\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input is not a valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # Check if number is divisible by 5\n    if n % 5 != 0:\n        return False\n\n    # Sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Check if sum of digits is also divisible by 3\n    if sum_of_digits % 3 != 0:\n        return False\n\n    return True\n\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return \"n should be greater than or equal to base\"\n\n    result = 0\n    while n >= base:\n        n /= base\n        result += 1\n\n    return result\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except ValueError:\n        raise ValueError(\"Provided json_str is not a valid JSON string.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_obj = datetime.strptime(date_string, '%Y-%m-%d')\n    result = date_obj + timedelta(days=days)\n    return result.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    # Check if text is not None\n    if text is None:\n        return None\n\n    # Remove leading and trailing whitespace\n    text = text.strip()\n\n    # Split the text into words\n    words = text.split()\n\n    # Join the words back into a string with a single space in between\n    text = ' '.join(words)\n\n    return text\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lower case\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'\\b' + word1 + r'\\b' + '|' + r'\\b' + word2 + r'\\b', text) is not None\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        elif 'expandtab' in line:\n            settings['expandtab'] = int(line.split('=')[1])\n        elif 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\", None)\n"}
{"task_id": "valid/23", "completion": "\n    def convert(s):\n        if isinstance(s, list):\n            return [convert(i) for i in s]\n        elif isinstance(s, tuple):\n            return [convert(i) for i in s]\n        elif isinstance(s, dict):\n            return {convert(k): convert(v) for k, v in s.items()}\n        else:\n            return s\n\n    return convert(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    print(math.sqrt(num))\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diag_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diag_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return False\n\n    return key not in data\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    def button_action(event):\n        print(\"Button clicked\")\n\n    root = tk.Tk()\n    table = []\n    for i in range(len(buttons)):\n        button = tk.Button(root, text=buttons[i])\n        button.bind(\"<Button-1>\", button_action)\n        button.grid(row=i // num_columns, column=i % num_columns)\n        table.append(button)\n\n    root.mainloop()\n\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] not in alphabet or s[i+1] not in alphabet[alphabet.index(s[i])+1:]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    def is_numeric(s: str) -> bool:\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n\n    def numeric_substrings(s: str) -> list:\n        substrings = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                substrings.append(s[i:j])\n        return substrings\n\n    numeric_substrings_list = numeric_substrings(ts)\n    numeric_substrings_list = [int(i) for i in numeric_substrings_list if is_numeric(i)]\n    return sum(numeric_substrings_list)\n\n"}
{"task_id": "valid/35", "completion": "\n    def last_to_upper(word):\n        if word and word[-1].isalpha():\n            return word[:-1] + word[-1].upper()\n        else:\n            return word\n\n    return [last_to_upper(word) for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    def validate(arr):\n        for i in arr:\n            if not isinstance(i, (int, float)):\n                return False\n        return True\n\n    def add(arr):\n        return sum(arr)\n\n    if validate(arr):\n        return add(arr)\n    else:\n        return \"Array contains non-numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    # Parse JSON data\n    data = json.loads(json_data)\n\n    # Extract neighborhood names and sort them\n    neighborhoods = [item['name'] for item in data]\n    neighborhoods.sort()\n\n    return neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if votes list is not empty\n    if not votes:\n        return \"Error: No votes provided.\"\n\n    # Check if total votes is less than 100\n    total_votes = sum(vote[1] for vote in votes)\n    if total_votes < 100:\n        return \"Error: Not enough votes.\"\n\n    # Create a dictionary to store vote counts\n    vote_counts = {}\n\n    # Count votes\n    for vote in votes:\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate percentages\n    for candidate in vote_counts:\n        vote_counts[candidate] = round(vote_counts[candidate] / total_votes * 100, 2)\n\n    # Return results\n    return vote_counts\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string.split(\"-\")) != 3:\n            raise ValueError(\"Date format is incorrect. It should be DD-MMM-YYYY or DD-MM-YYYY\")\n\n        day, month, year = map(int, date_string.split(\"-\"))\n\n        if not (1 <= day <= 31 and 1 <= month <= 12):\n            raise ValueError(\"Date is invalid\")\n\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n\n    except ValueError as e:\n        return str(e)\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'jpeg', 'png', 'gif', 'mp3', 'mp4', 'avi', 'mov', 'zip', 'rar']\n\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_even(s):\n        return is_numeric(s) and is_even(int(s))\n\n    def is_tuple(n):\n        return isinstance(n, tuple)\n\n    def remove_uneven_helper(lst):\n        new_lst = []\n        for i in lst:\n            if is_tuple(i):\n                new_lst.append(remove_uneven_helper(i))\n            elif is_string_even(i):\n                new_lst.append(i)\n        return tuple(new_lst)\n\n    return remove_uneven_helper(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.lower().count(specific_character.lower())\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^\\w{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('<int:video_id>/', views.video_detail, name='video_detail'),\n    ]\n\n    # This is a regular expression that matches any string that starts with \"http://\" or \"https://\"\n    regex = r'^(http|https)://'\n\n    # This is a function that checks if the URL matches the regex\n    def match_url(url):\n        if re.match(regex, url):\n            return True\n        return False\n\n    # This is a function that returns the view associated with the URL\n    def get_view(url):\n        if match_url(url):\n            if 'video_id' in url:\n                return views.video_detail\n            else:\n                return views.index\n        return None\n\n    # This is a function that returns the name of the view associated with the URL\n    def get_view_name(url):\n        view = get_view(url)\n        if view:\n            return view.__name__\n        return None\n\n    # This is a function that returns the name of the view associated with the URL\n    def get_view_args(url):\n        view = get_view(url)\n        if view:\n            return view.get_args()\n        return None\n\n    # This is a function that returns the name of the view associated with the URL\n    def get_view_kwargs(url):\n        view = get_view(url)\n        if view:\n            return view.get_kwargs()\n        return None\n\n    # This is a function that returns the name of the view associated with the URL\n    def get_view_name_and_args(url):\n        view = get_view(url)\n        if view:\n            return view.__name__, view.get_args()\n        return None, None\n\n    # This is a function that returns the name of the view associated with the URL\n    def get_view_name_and_kwargs(url):\n        view = get_view(url)\n        if view:\n            return view.__name__, view.get_kwargs()\n        return None, None\n\n   "}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n\n"}
{"task_id": "valid/52", "completion": "\n    return \"Hello, World!\"\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += dictionary[key]\n    return total_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in list1]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def api_advisor_view(request):\n        if request_method == 'GET':\n            return 'GET request to api_advisor_view'\n        else:\n            return 'POST request to api_advisor_view'\n\n    def api_advisor_view_post(request):\n        if request_method == 'GET':\n            return 'GET request to api_advisor_view_post'\n        else:\n            return 'POST request to api_advisor_view_post'\n\n    return api_advisor_view, api_advisor_view_post\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if a < b:\n        return gcd_recursive(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory, file_name = file_path.split('/')\n        if directory not in config_files:\n            config_files[directory] = []\n        config_files[directory].append(file_name)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \" World\"\n    return f\"{string} {phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    def is_special(s):\n        return not s.isalnum() and not s.isspace()\n\n    result = []\n    for s in strings:\n        if is_special(s):\n            continue\n        result.append(s.upper())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return string.index(char)\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    result = []\n    current_word = \"\"\n    in_bold = False\n\n    for char in html_code:\n        if char == start_tag:\n            in_bold = True\n            current_word = \"\"\n        elif char == end_tag:\n            in_bold = False\n            result.append(current_word)\n        elif in_bold:\n            current_word += char\n\n    return result\n\n"}
{"task_id": "valid/73", "completion": "\n    # Define the list of items and their prices\n    items = {\n        \"Coke\": 10,\n        \"Sprite\": 15,\n        \"Diet Coke\": 20,\n        \"Water\": 5,\n        \"Coffee\": 25,\n        \"Tea\": 30,\n    }\n\n    # Initialise the change to 0\n    change = 0\n\n    # Check if the item is in the stock\n    if item in items:\n        # Check if the money inserted is enough to buy the item\n        if money_inserted >= items[item]:\n            # Calculate the change\n            change = money_inserted - items[item]\n            # Update the stock of the item\n            del items[item]\n            print(f\"You bought {item} for {items[item]}\")\n        else:\n            print(\"Not enough money for the item\")\n    else:\n        print(\"Item not in stock\")\n\n    return change\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    def stem_plot(vector):\n        plt.stem(range(len(vector)), vector)\n        plt.show()\n\n    stem_plot(vector)\n\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    variable = 10\n\n    # Validate the value\n    if variable == 10:\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Randomly rearrange the list of characters\n    random.shuffle(word_list)\n    # Convert the list of characters back to a string\n    rearranged_word = ''.join(word_list)\n    return rearranged_word\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    return re.findall(r'\\b\\w+\\b', text)\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7\")\n    else:\n        avg = sum(divisible_numbers) / len(divisible_numbers)\n        max_num = max(divisible_numbers)\n        min_num = min(divisible_numbers)\n        num_occurrences = {n: divisible_numbers.count(n) for n in divisible_numbers}\n\n        print(f\"Average: {avg}\")\n        print(f\"Maximum: {max_num}\")\n        print(f\"Minimum: {min_num}\")\n        print(\"Number of occurrences:\")\n        for k, v in num_occurrences.items():\n            print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    highest_freq_word = max(word_freq, key=word_freq.get)\n    return highest_freq_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    def average(numbers):\n        return sum(numbers) / len(numbers)\n\n    return average(numbers)\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n        return min_value, max_value\n    except TypeError:\n        raise ValueError(\"Time series should contain only numerical values\")\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to hold the count of related articles for each entry\n    related_articles_count = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Initialize count to 0\n        count = 0\n\n        # Check if the entry is a link to another page\n        if \"http\" in entry:\n            # Increment count\n            count += 1\n\n        # Add count to the dictionary for this entry\n        related_articles_count[entry] = count\n\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == target:\n                return True\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_of_odd_numbers = 0\n    count_of_odd_numbers = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_of_odd_numbers += i\n            count_of_odd_numbers += 1\n    return sum_of_odd_numbers / count_of_odd_numbers if count_of_odd_numbers != 0 else None\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    **About the bot:**\n    This bot is designed to manage and play music in a Discord server. It can provide information about its features and web app for managing personal playlists and server settings.\n    Additionally, it can categorize commands and provide help information for each command.\n\n    **Features:**\n    - Manage music playlists: Users can create, delete, and modify playlists.\n    - Server settings: Users can change server settings like voice channel, music volume, etc.\n    - Help information: Users can get help information about the bot's commands and features.\n\n    **Web App:**\n    The web app allows users to create, manage, and share playlists. It also provides information about the bot's features and server settings.\n\n    **Commands:**\n    - `{', '.join(mapping.keys())}`\n    \"\"\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(dec_to_ternary(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        n, r = divmod(n, 3)\n        ternary = str(r) + ternary\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(name.split('.')[-1] for name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young Adult\"\n    elif 30 <= age < 60:\n        return \"Adult\"\n    elif age >= 60:\n        return \"Senior\"\n    else:\n        return \"Invalid Age\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade < 0 or numerical_grade > 100:\n        return \"Invalid grade. Please enter a numerical grade between 0 and 100.\"\n\n    grade_point = numerical_grade / 10\n\n    return (\n        \"Grade: \" + (\"A\" if grade_point >= 90 else \"B\" if grade_point >= 80 else \"C\" if grade_point >= 70 else \"D\" if grade_point >= 60 else \"F\") +\n        \", GPA: \" + str(round(grade_point / 10, 2))\n    )\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result_dict[palindrome] = count\n    return result_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if s.isupper():\n        return s.lower()\n    elif s.islower():\n        return s.upper()\n    elif s[0].isupper():\n        return s.capitalize()\n    else:\n        return s\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n\n        Helper function to extract version number from the version string.\n        \"\"\"\n        version_number = version[1]\n        return version_number\n\n    def get_version_identifier(version):\n        \"\"\"\n        Helper function to extract version identifier from the version string.\n        \"\"\"\n        version_identifier = version[0]\n        return version_identifier\n\n    def get_latest_version(dependency):\n        \"\"\"\n        Helper function to get the latest version of a dependency.\n        \"\"\"\n        versions = dependency[1]\n        latest_version = max(versions, key=get_version_number)\n        return latest_version\n\n    def get_latest_versions(dependencies):\n        \"\"\"\n        Main function to get the latest versions of all dependencies.\n        \"\"\"\n        latest_versions = {}\n        for dependency in dependencies:\n            latest_version = get_latest_version(dependency)\n            latest_versions[dependency[0]] = latest_version\n        return latest_versions\n\n    return get_latest_versions(dependencies)\n\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the causes of death\n    causes_dict = {}\n\n    # Loop through the list of causes\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \")\n\n        # If the action is already in the dictionary, append the result to the list of results\n        if action in causes_dict:\n            causes_dict[action].append(result)\n\n        # If the action is not in the dictionary, create a new list with the result\n        else:\n            causes_dict[action] = [result]\n\n    # Return the dictionary\n    return causes_dict\n\n"}
{"task_id": "valid/108", "completion": "\n    # Your code here\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(string, translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        min_value = min(grid[i])\n        print(min_value)\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first_char = s[0]\n        if first_char.lower() in 'aeiou':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n\n    def generate_help(option_list):\n        help_message = \"CLI Help:\\n\\n\"\n        for option in option_list:\n            help_message += \"--{0} - {1}\\n\".format(option[0], option[1])\n        return help_message\n\n    return generate_help(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Iterate over the input array\n    for i in Val:\n        # If the value is already in the dictionary, increment its count\n        if i in count_dict:\n            count_dict[i] += 1\n        # If the value is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[i] = 1\n\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence_of_characters.count(specific_subsequence)\n    return count\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # Implement your function here\n    pass\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] - arr[i + 1] > max_diff:\n            max_diff = arr[i] - arr[i + 1]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the list of fruits\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string\n    sorted_fruit_string = \", \".join(sorted_fruit_list)\n\n    return sorted_fruit_string\n"}
{"task_id": "valid/133", "completion": "\n    if lst == []:\n        return [[]]\n    else:\n        sublists = generate_sublists(lst[1:])\n        for sublist in sublists:\n            return sublists + [sublist + [lst[0]]]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    def forward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('{field_name}', models.CharField(max_length=255))\n\n    def backward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.remove_field('{field_name}')\n\n    migrations.Operation(forward, backward)\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the length of the dataset\n    length = len(df)\n\n    # calculate the forecast period\n    forecast_period = math.ceil(length * 0.01)\n\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # If the end index is larger than the list length, set it to the list length\n    if end_index > len(items):\n        end_index = len(items)\n\n    # Return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    def carry_process(num1, num2, carry):\n        if num1 + num2 + carry >= 10:\n            return 1, (num1 + num2 + carry) - 10\n        else:\n            return 0, num1 + num2 + carry\n\n    n_str = n_str[::-1]\n    result = ''\n    carry = 0\n    for i in range(len(n_str)):\n        num = int(n_str[i])\n        carry, curr_digit = carry_process(carry, num * 2, 0)\n        result = str(curr_digit) + result\n\n    if carry != 0:\n        result = str(carry) + result\n\n    return result.lstrip('0')\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the ROS node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Get the preset coordinates\n    preset_coordinates = presets[preset_name]\n\n    # Loop over the preset coordinates\n    for coordinate in preset_coordinates:\n        # Create a message\n        msg = String()\n        msg.data = 'move_to_position: ' + str(coordinate)\n\n        # Publish the message\n        pub.publish(msg)\n\n        # Sleep for a short time\n        rospy.sleep(1)\n\n    # Shutdown the node\n    rospy.shutdown()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer == True:\n        print(\"Allow multiple answer: Yes\")\n    else:\n        print(\"Allow multiple answer: No\")\n\n    if zoom_level == 0:\n        print(\"Zoom level: Low\")\n    elif zoom_level == 1:\n        print(\"Zoom level: Medium\")\n    else:\n        print(\"Zoom level: High\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return s.isalpha()\n\n    def merge_dicts(a, b):\n        for key in b:\n            if isinstance(b[key], dict):\n                a[key] = merge_dicts(a.get(key, {}), b[key])\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items())}\n\n    merged = merge_dicts(a, b)\n    return sort_dict({k: v for k, v in merged.items() if is_alpha(k)})\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=lambda k: d[k])\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
