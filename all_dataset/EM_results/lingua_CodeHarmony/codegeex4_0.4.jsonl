{"task_id": "valid/0", "completion": "\n    # Define the rules for each category\n    rules = {\n        'category1': [\n            ('rule1', 'condition1', 'action1'),\n            ('rule2', 'condition2', 'action2'),\n            # Add more rules as needed\n        ],\n        'category2': [\n            ('rule3', 'condition3', 'action3'),\n            ('rule4', 'condition4', 'action4'),\n            # Add more rules as needed\n        ],\n        # Add more categories as needed\n    }\n\n    # Classify the text based on the rules\n    for category, category_rules in rules.items():\n        for rule, condition, action in category_rules:\n            if condition(text):\n                return category, action(text)\n\n    # If no category matches, return None\n    return None, None\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, key=lambda x: x.lower(), reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if n < 0:\n        return False\n    else:\n        return n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    for i in range(1, n):\n        if base ** i % n == 1:\n            return i\n    return -1\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{{key}}}}}\", str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    if len(string) > 128:\n        return False\n    char_set = [False] * 128\n    for char in string:\n        val = ord(char)\n        if char_set[val]:\n            return False\n        char_set[val] = True\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        raise ValueError(\"Text is too long\")\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b{}\\b\\s+\\b{}\\b'.format(word1, word2)\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return np.sum(array, axis=1)\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.splitlines():\n        line = line.strip()\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # TODO: Implement the disassembly of the sentence into words\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    list3 = list1 + list2\n    list3.sort()\n    return list3\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            result = get_nested_dictionary_value(value)\n            if result is not None:\n                return result\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(i) for i in struct]\n    else:\n        return struct"}
{"task_id": "valid/24", "completion": "\n    num = str(num)\n    if num == num[::-1]:\n        return int(num)\n    else:\n        left = int(num[:-1])\n        right = int(num[1:])\n        left_palindrome = str(left)[::-1]\n        right_palindrome = str(right)[::-1]\n        left_palindrome = int(left_palindrome) if left_palindrome.isdigit() else float('inf')\n        right_palindrome = int(right_palindrome) if right_palindrome.isdigit() else float('-inf')\n        if abs(int(num) - left_palindrome) <= abs(int(num) - right_palindrome):\n            return left_palindrome\n        else:\n            return right_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    columns = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, columns)))\n    is_square = rows == columns\n    return rows, columns, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s.lower() if c.isalpha())\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if isinstance(json_data, dict):\n        if key in json_data and json_data[key] == value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        table.append(buttons[i:i+num_columns])\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    if len(s) < 2:\n        return True\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    return sum(int(s) for s in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(i, (int, float)) for i in arr):\n        raise ValueError(\"Array contains non-numerical values\")\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = [neighborhood['name'] for neighborhood in json_data]\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n-1):\n        sum = abs(arr[i] + arr[i+1])\n        min_sum = min(min_sum, sum)\n    return min_sum"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    total_votes = sum(vote[1] for vote in votes)\n    results = {}\n    for vote in votes:\n        candidate_name = vote[0].upper()\n        number_of_votes = vote[1]\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n    for candidate_name, number_of_votes in results.items():\n        percentage = (number_of_votes / total_votes) * 100\n        print(f\"{candidate_name}: {percentage:.2f}%\")\n    return results\n\n\nvotes = [(\"John\", 500), (\"Jane\", 300), (\"Bob\", 200)]\ncalculate_election_results(votes)\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY format.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # check if new name has valid extension\n    if not has_valid_extension(newname, allowed_type):\n        return False\n    # check if new name is not the same as old name\n    if oldname == newname:\n        return False\n    # check if new name does not exist\n    if os.path.exists(newname):\n        return False\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, float) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, str) and item.isdigit() and int(item) % 2 == 0:\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    if re.match(r'^[a-zA-Z0-9]{5}$', string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language :: \"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    return [[arr.count(i) for i in range(1, 10)] for _ in range(9)]\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('home/', views.home, name='home'),\n    ]\n\n    for pattern in urlpatterns:\n        if re.match(pattern.regex.pattern, url):\n            return pattern.name\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"I love programming\"\n    string = \"Python is awesome\"\n    concatenated = sentence + \" \" + string\n    return concatenated\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for d in list_of_dicts:\n        for key in d.keys():\n            if key.startswith(\"price_\"):\n                price_sum += d[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return list2\n  \n"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_advisor_view_post\n    else:\n        return None\n\n\n@app.route(\"/api/advisor\", methods=[\"GET\", \"POST\"])"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"a and b must be positive integers\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n  \n  # Test cases\n  print(gcd_recursive(48, 18))  # Output: 6\n  print(gcd_recursive(101, 103))  # Output: 1\n  print(gcd_recursive(17, 34))  # Output: 17\n  print(gcd_recursive(0, 5))  # Output: 5\n  print(gcd_recursive(5, 0))  # Output: 5\n  print(gcd_recursive(0, 0))  # Output: 0\n  print(gcd_recursive(-5, 5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5, -5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(-5, -5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5.5, 5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5, 5.5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5, \"5\"))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(\"5\", 5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(\"5\", \"5\"))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5, [5]))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive([5], 5))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive([5], [5]))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive(5, {5: 5}))  # Output: ValueError: a and b must be positive integers\n  print(gcd_recursive({5: 5}, 5))  #"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Extract the directory path and file name\n        directory_path, file_name = os.path.split(file_path)\n        # Extract the directory name\n        directory_name = os.path.basename(directory_path)\n        # Add the file to the corresponding category\n        if directory_name not in categorized_files:\n            categorized_files[directory_name] = []\n        categorized_files[directory_name].append(file_name)\n    return categorized_files"}
{"task_id": "valid/59", "completion": "\n    return sorted([a, b, c, d, e])[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for symbol in word:\n            if symbol.isalpha():\n                if symbol.lower() == target.lower():\n                    return symbol\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys dictionary:\")\n    for key in dict:\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, World!\"\n    concatenated = f\"{phrase} This is a string.\"\n    return concatenated\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # capitalize string\n        string = string.capitalize()\n        # remove special characters\n        string = re.sub(r'\\W+', '', string)\n        result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index:end_index + len(end_tag)])\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # set list items corresponding prices\n    items = {\"Coke\": 1.00, \"Pepsi\": 1.50, \"Sprite\": 1.20, \"Water\": 0.50}\n    # check if item is in items\n    if item not in items:\n        return \"Item not available\"\n    # check if money_inserted is less than item price\n    if money_inserted < items[item]:\n        return \"Not enough money\"\n    # calculate change\n    change = money_inserted - items[item]\n    # update stock\n    items[item] -= 1\n    # return change and item purchased\n    return f\"Here is your {item} and your change is {change}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8'))\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n    plt.stem(vector)\n    plt.show()\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning value to variable\n    value = 10\n\n    # Validating value\n    if value == 10:\n        print(\"Value is valid\")\n    else:\n        print(\"Value is not valid\")\n\n"}
{"task_id": "valid/79", "completion": "\n    word = list(word)\n    random.shuffle(word)\n    return ''.join(word)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return 'string'\n    elif isinstance(element, int):\n        return 'integer'\n    elif isinstance(element, float):\n        return 'float'\n    elif isinstance(element, bool):\n        return 'boolean'\n    elif isinstance(element, list):\n        return 'list'\n    elif isinstance(element, dict):\n        return 'dictionary'\n    elif isinstance(element, tuple):\n        return 'tuple'\n    elif isinstance(element, set):\n        return 'set'\n    elif isinstance(element, frozenset):\n        return 'frozenset'\n    elif isinstance(element, type(None)):\n        return 'NoneType'\n    else:\n        return 'unknown'\n"}
{"task_id": "valid/81", "completion": "\n    return [x for i, x in enumerate(arr) if x not in arr[:i]]\n"}
{"task_id": "valid/82", "completion": "\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'\\s+', ' ', text)\n    text = text.lower()\n    return text.split()\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_and_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_by_3_and_7) / len(divisible_by_3_and_7)\n    max_value = max(divisible_by_3_and_7)\n    min_value = min(divisible_by_3_and_7)\n    occurrences = {num: divisible_by_3_and_7.count(num) for num in set(divisible_by_3_and_7)}\n    return divisible_by_3_and_7, average, max_value, min_value, occurrences\n\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\ndivisible_by_3_and_7, average, max_value, min_value, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    # Split sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 1\n    for i in range(1, decimal_places + 1):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    count = 0\n    for entry in encyclopedia:\n        count += len(encyclopedia[entry]['related'])\n    return count\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    max_index = lst.index(max_value)\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('root')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf8').decode('utf8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\nlst = [i for i in range(1000)]"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    {mapping['description']}\n    \"\"\"\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        ternary = ''\n        while n > 0:\n            ternary = str(n % 3) + ternary\n            n = n // 3\n        return ternary"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        extension = file_name.split('.')[-1]\n        extensions.append(extension)\n    return tuple(extensions)"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n    return palindrome_dict"}
{"task_id": "valid/104", "completion": "\n    # check if string is empty\n    if not s:\n        return s\n\n    # check if string contains only one character\n    if len(s) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only digits\n    if s.isdigit():\n        return s\n\n    # check if string contains only letters\n    if s.isalpha():\n        return s\n\n    # check if string contains only uppercase letters\n    if s.isupper():\n        return s\n\n    # check if string contains only lowercase letters\n    if s.islower():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only punctuation characters\n    if s.ispunct():\n        return s\n\n    # check if string contains only alphanumeric characters\n    if s.isalnum():\n        return s\n\n    # check if string contains only printable characters\n    if s.isprintable():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only control characters\n    if s.isascii():\n        return s\n\n    # check if string contains only hexadecimal digits\n    if s.isdecimal():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only whitespace characters\n    if s.isspace():\n        return s\n\n    # check if string contains only"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[2]\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n\ndependencies = [('package1', '0001_auto_20210101_0000'), ('package2', '0002_auto_20210102_0000'), ('package1', '0002_auto_20210103_0000')]"}
{"task_id": "valid/107", "completion": "\n    # Initialize dictionaries to store causes of death by action\n    action_dict = {}\n    unusual_dict = {}\n    bizarre_dict = {}\n\n    # Iterate through each cause of death\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(' ')\n\n        # Check if the action is already in the dictionaries\n        if action in action_dict:\n            # If the result is unusual, bizarre, or both, add it to the corresponding dictionary\n            if result == 'unusual':\n                action_dict[action]['unusual'].append(cause)\n            elif result == 'bizarre':\n                action_dict[action]['bizarre'].append(cause)\n            elif result == 'both':\n                action_dict[action]['unusual'].append(cause)\n                action_dict[action]['bizarre'].append(cause)\n        else:\n            # If the action is not in the dictionaries, create a new entry\n            if result == 'unusual':\n                action_dict[action] = {'unusual': [cause], 'bizarre': []}\n            elif result == 'bizarre':\n                action_dict[action] = {'unusual': [], 'bizarre': [cause]}\n            elif result == 'both':\n                action_dict[action] = {'unusual': [cause], 'bizarre': [cause]}\n\n    # Iterate through the action_dict and populate the unusual_dict and bizarre_dict\n    for action, results in action_dict.items():\n        if results['unusual']:\n            unusual_dict[action] = results['unusual']\n        if results['bizarre']:\n            bizarre_dict[action] = results['bizarre']\n\n    return unusual_dict, bizarre_dict\n\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuation_marks = string.punctuation\n    for mark in punctuation_marks:\n        string = string.replace(mark, \"\")\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Invalid input. Please provide a list of numbers and an exponent.\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1:\n        return\n    if current_num % 2 == 0:\n        print(f\"Thank you for the even number {current_num}\")\n    print_thank_you(n - 1, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    digit = num % base\n    num //= base\n    while num > 0:\n        if num % base != digit:\n            return False\n        num //= base\n    return True\n\n"}
{"task_id": "valid/116", "completion": "\n    if len(s) == 0:\n        return s\n    else:\n        if s[0] in 'aeiouAEIOU':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python3 main.py [options]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  -{option[0]} {option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 1:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return sample_bitset ^ 0b11111111\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subsequence_length = len(subsequence)\n    for i in range(len(sequence) - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if h < 0:\n        h = -h\n        t = -t\n    if h < t:\n        return 0\n    return 1 + dividir(h - t, t)\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for c in string if c in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = 0\n    for energy, ados_value in zip(grid_energies, ados):\n        num_electrons += ados_value * np.exp(-energy / (kb * temperature))\n\n    # adjust number of electrons based on doping levels\n    num_electrons *= (1 + dope)\n\n    # calculate number of states in dos_grid_size\n    num_states = dos_grid_size * len(grid_energies)\n\n    # calculate number of electrons per state\n    num_electrons_per_state = num_electrons / num_states\n\n    return num_electrons_per_state\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left.reverse()\n    right.reverse()\n    return left + right\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\nlst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n    # Create the migration operation\n    operation = AlterField(\n        model_name=model_name,\n        name=field_name,\n        field=CharField(max_length=100),\n    )\n\n    # Create the migration file\n    migration_file = MigrationFile(\n        app_name=app_name,\n        operations=[operation],\n        migration_name=f\"0001_initial\",\n    )\n\n    # Generate the migration file content\n    migration_content = migration_file.as_string()\n\n    return migration_content\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = round(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start = (page_number - 1) * items_per_page\n    end = start + items_per_page\n    return items[start:end]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = int(n_str)\n    return str(n * 2)\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": [0.0, 0.0, 0.0],\n        \"position1\": [0.1, 0.2, 0.3],\n        \"position2\": [0.4, 0.5, 0.6],\n        \"position3\": [0.7, 0.8, 0.9],\n    }\n    return presets[preset_name]\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        return \"Allow multiple answer\"\n    else:\n        return \"Allow single answer\"\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    sentence = sentence.replace(' ', '')\n    sentence = sentence.replace(',', '')\n    sentence = sentence.replace('.', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('?', '')\n    sentence = sentence.replace(':', '')\n    sentence = sentence.replace(';', '')\n    sentence = sentence.replace('\"', '')\n    sentence = sentence.replace(\"'\", '')\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    sentence = sentence.replace('[', '')\n    sentence = sentence.replace(']', '')\n    sentence = sentence.replace('{', '')\n    sentence = sentence.replace('}', '')\n    sentence = sentence.replace('<', '')\n    sentence = sentence.replace('>', '')\n    sentence = sentence.replace('/', '')\n    sentence = sentence.replace('\\\\', '')\n    sentence = sentence.replace('|', '')\n    sentence = sentence.replace('_', '')\n    sentence = sentence.replace('-', '')\n    sentence = sentence.replace('+', '')\n    sentence = sentence.replace('=', '')\n    sentence = sentence.replace('*', '')\n    sentence = sentence.replace('&', '')\n    sentence = sentence.replace('%', '')\n    sentence = sentence.replace('$', '')\n    sentence = sentence.replace('#', '')\n    sentence = sentence.replace('@', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('~', '')\n    sentence = sentence.replace('^', '')\n    sentence = sentence.replace('`', '')\n    sentence = sentence.replace('{', '')\n    sentence = sentence.replace('}', '')\n    sentence = sentence.replace('[', '')\n    sentence = sentence.replace(']', '')\n    sentence = sentence.replace(';', '')\n    sentence = sentence.replace(':', '')\n    sentence = sentence.replace(\"'\", '')\n    sentence = sentence.replace('\"', '')\n    sentence = sentence.replace('<', '')\n    sentence = sentence.replace('>', '')\n    sentence = sentence.replace('/', '')\n    sentence = sentence.replace('\\\\', '')\n    sentence = sentence.replace('|', '')\n    sentence = sentence.replace('_', '')\n    sentence = sentence.replace('-', '')\n    sentence = sentence.replace('+', '')\n    sentence = sentence.replace('=', '')\n    sentence = sentence.replace('*', '')\n    sentence = sentence.replace('&', '')\n    sentence = sentence.replace('%', '')\n    sentence = sentence.replace('$', '')\n    sentence = sentence.replace('#', '')\n    sentence = sentence.replace('@', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('~', '')\n    sentence = sentence.replace('^', '')\n    sentence = sentence.replace('`', '')\n    sentence = sentence.replace('{', '')\n    sentence = sentence.replace('}', '')\n    sentence = sentence.replace('[', '')\n    sentence"}
{"task_id": "valid/146", "completion": "\n    def merge(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: sort_dict(v) if isinstance(v, dict) else v for k, v in sorted(d.items())}\n\n    merged = merge(a, b)\n    return sort_dict(merged)\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100 or x == 101 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
