{"task_id": "valid/0", "completion": "\n    if text.isdigit():\n        return \"Digit\"\n    elif text.isalpha():\n        return \"Alphabet\"\n    elif text.isspace():\n        return \"Space\"\n    else:\n        return \"Special\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Not a valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if n < 0:\n        return False\n    else:\n        sum_digits = sum(int(digit) for digit in str(n))\n        return n % 5 == 0 and sum_digits % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return \"n should be greater than base\"\n\n    result = 0\n    while n >= base:\n        n /= base\n        result += 1\n\n    return result\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date_object + timedelta(days=days)\n    return result_date.strftime('%Y-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # convert to lower case\n    text = text.lower()\n\n    # remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(f\"\\\\b{word1}\\\\b.*?\\\\b{word2}\\\\b\", text) is not None\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        elif 'expandtab' in line:\n            settings['expandtab'] = line.split('=')[1].lower() == 'true'\n        elif 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    return access_nested_dictionary_value(dictionary, \"name\")\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(i) for i in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n\nnum = int(input(\"Enter a number: \"))"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    if rows != cols:\n        return False\n\n    sum_of_diagonal_elements = sum(matrix[i][i] for i in range(rows))\n\n    return rows, cols, sum_of_diagonal_elements\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n        if isinstance(data, dict):\n            if key in data:\n                if data[key] == value:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except json.JSONDecodeError:\n        return False\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    root = tk.Tk()\n    root.geometry(\"300x300\")\n\n    table = tk.Frame(root)\n    table.pack()\n\n    for i in range(len(buttons)):\n        button = tk.Button(table, text=buttons[i], command=lambda i=i: _button_action(i))\n        button.pack(side=\"top\", fill=\"x\", pady=10)\n\n    root.mainloop()\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] not in alphabet_order or s[i+1] not in alphabet_order:\n            return False\n        if alphabet_order.index(s[i]) > alphabet_order.index(s[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in ts.split() if s.isdigit()]\n    return sum(int(s) for s in numeric_substrings)\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word.upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if isinstance(arr, list) and all(isinstance(i, (int, float)) for i in arr):\n        return sum(arr)\n    else:\n        return \"Invalid input. Please provide a list of numerical values.\"\n"}
{"task_id": "valid/37", "completion": "\n    #load json data\n    data = json.loads(json_data)\n\n    #extract neighborhood names\n    neighborhoods = [neighborhood['name'] for neighborhood in data]\n\n    #sort and return\n    return sorted(neighborhoods)\n"}
{"task_id": "valid/38", "completion": "\n    min_sum = float('inf')\n    min_pair = (0, 0)\n    arr.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        sum_ = arr[l] + arr[r]\n        if abs(sum_) < abs(min_sum):\n            min_sum = sum_\n            min_pair = (l, r)\n        if sum_ < 0:\n            l += 1\n        else:\n            r -= 1\n    return min_pair\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n\n    # Check if votes list is not empty\n    if not votes:\n        return \"Votes list is empty\"\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Calculate the total votes\n    total_votes = sum(vote[1] for vote in votes)\n\n    # Calculate the percentage of votes for each candidate\n    for vote in votes:\n        candidate_name = vote[0]\n        vote_count = vote[1]\n        percentage = round((vote_count / total_votes) * 100, 2)\n        results[candidate_name] = percentage\n\n    # Sort the results by the percentage of votes in descending order\n    results = dict(sorted(results.items(), key=lambda item: item[1], reverse=True))\n\n    return results\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%m-%Y')\n        return date_object.strftime('%d %B, %Y')\n    except ValueError:\n        return \"Invalid date format. Please use DD-MM-YYYY\"\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx', 'png', 'jpg', 'jpeg', 'gif']\n\n    if newname[-4:] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_numeric(n):\n        return isinstance(n, str) and n.isdigit()\n\n    def remove_uneven(lst):\n        new_lst = []\n        for i in lst:\n            if isinstance(i, tuple):\n                new_lst.append(remove_uneven(i))\n            elif is_numeric(i) and is_even(i):\n                new_lst.append(i)\n            elif is_string_numeric(i):\n                new_lst.append(i)\n        return tuple(new_lst)\n\n    return remove_uneven(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n\n    # commented out line\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    if len(re.findall(r'\\w', string)) == 5:\n        return True\n    return False\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) > 1:\n            unique_languages.add(parts[0])\n\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for i in arr:\n        for j in i:\n            if j in result:\n                result[j] += 1\n            else:\n                result[j] = 1\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('<int:question_id>/', views.detail, name='detail'),\n        path('<int:question_id>/results/', views.results, name='results'),\n        path('<int:question_id>/vote/', views.vote, name='vote'),\n    ]\n\n    return urlpatterns\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    return \"This is a string sentence.\"\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n\ns = \"abcabc\""}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += sum(float(value) for value in dictionary[key].split())\n    return total_sum\n"}
{"task_id": "valid/55", "completion": "\n    # find intersection\n    intersection = [value for value in list1 if value in list2]\n    # remove intersection from list2\n    list2 = [value for value in list2 if value not in intersection]\n    return list2\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    def decorator_function(view_func):\n        def wrapper_func(request, *args, **kwargs):\n            if request_method == \"GET\":\n                return view_func(request, *args, **kwargs)\n            else:\n                return HttpResponse(\"Method not allowed\", status=405)\n        return wrapper_func\n    return decorator_function\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers\")\n    if a < b:\n        return gcd_recursive(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory = file_path.split('/')[0]\n        if directory not in config_files:\n            config_files[directory] = []\n        config_files[directory].append(file_path)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # calculate the difference\n    timeDifference = timeEnd - timeStart\n\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys dictionary:\")\n    for key in dict.keys():\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    phrase = f\"{string1} {string2}\"\n    return phrase\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # remove special characters\n        string = re.sub(r'[^A-Za-z0-9\\s]', '', string)\n        # capitalize first letter\n        string = string.title()\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return [i for i, letter in enumerate(string) if letter == char]\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    result = []\n    current_word = \"\"\n    in_bold = False\n\n    for char in html_code:\n        if char == start_tag:\n            in_bold = True\n            current_word = \"\"\n        elif char == end_tag:\n            in_bold = False\n            result.append(current_word)\n        elif in_bold:\n            current_word += char\n\n    return result\n\n"}
{"task_id": "valid/73", "completion": "\n\n        function to check if user has enough money to buy item\n        \"\"\"\n        if money_inserted >= item_price:\n            return True\n        else:\n            return False\n\n    def calculate_change(money_inserted, item_price):\n        \"\"\"\n        function to calculate change\n        \"\"\"\n        if check_money(money_inserted, item_price):\n            return money_inserted - item_price\n        else:\n            return \"Insufficient money\"\n\n    def update_stock(item, item_price):\n        \"\"\"\n        function to update stock after purchase\n        \"\"\"\n        if item in vending_machine_items:\n            vending_machine_items[item] -= item_price\n            return f\"You bought {item}. Remaining stock: {vending_machine_items[item]}\"\n        else:\n            return \"Item not available\"\n\n    if item in vending_machine_items:\n        if check_money(money_inserted, vending_machine_items[item]):\n            return update_stock(item, vending_machine_items[item])\n        else:\n            return calculate_change(money_inserted, vending_machine_items[item])\n    else:\n        return \"Item not available\"\n\n"}
{"task_id": "valid/74", "completion": "\n    # Merge the two lists\n    merged_list = list1 + list2\n\n    # Remove duplicates\n    new_list = []\n    for i in merged_list:\n        if i not in new_list:\n            new_list.append(i)\n\n    return new_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    # Assign value to variable\n    variable = \"Hello, World!\"\n\n    # Validate the value\n    if variable == \"Hello, World!\":\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # convert the word to list\n    word_list = list(word)\n    # shuffle the list\n    random.shuffle(word_list)\n    # convert the list back to string\n    return ''.join(word_list)\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    new_arr = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            new_arr.append(arr[i])\n    return new_arr\n"}
{"task_id": "valid/82", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\n    pattern = r'\\b\\w+\\b'\n\n    # \u4f7f\u7528re.findall()\u51fd\u6570\u5728\u6587\u672c\u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d\u9879\n    return re.findall(pattern, text)\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    avg = sum(divisible_numbers) / len(divisible_numbers)\n    max_min_values = (max(divisible_numbers), min(divisible_numbers))\n    number_occurrences = {n: divisible_numbers.count(n) for n in set(divisible_numbers)}\n    return avg, max_min_values, number_occurrences\n\n\nnumbers = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\navg, max_min_values, number_occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return max(word_freq, key=word_freq.get)\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    try:\n        min_val = min(time_series)\n        max_val = max(time_series)\n    except TypeError:\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min_val, max_val\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article].related_articles)\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return any(item in list2 for item in list1)\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(element, dictionary):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                sub_element = Element(key)\n                _dict_to_xml(sub_element, value)\n                element.append(sub_element)\n            else:\n                element.text = str(value)\n                element.set(key, str(value))\n        return element\n\n    root = Element(\"root\")\n    _dict_to_xml(root, dictionary)\n    return tostring(root, encoding=\"unicode\")\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    # Initialize start and end pointers\n    start_row, end_row = 0, m-1\n    start_col, end_col = 0, n-1\n\n    while start_row <= end_row and start_col <= end_col:\n        # If target is found in the first row, return True\n        if matrix[start_row][start_col] == target:\n            return True\n\n        # If target is larger than the largest element in the first row,\n        # move the end_row pointer to the left\n        elif matrix[start_row][start_col] < target:\n            start_row += 1\n\n        # If target is smaller than the smallest element in the last column,\n        # move the start_col pointer to the right\n        elif matrix[start_row][start_col] > target:\n            start_col += 1\n\n        # If target is in the middle of the matrix, return True\n        elif matrix[start_row][start_col] == target:\n            return True\n\n    # If target is not found in the matrix, return False\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return \"No odd numbers\"\n    else:\n        return sum_odd / count_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    **{mapping['bot_name']}** is a Discord bot that manages music in your server.\n\n    **Features:**\n    - Provides information features web app managing personal playlists.\n    - Categorizes commands to provide help information for each command.\n    - Allows you to control your music with commands.\n\n    **Commands:**\n    - `{mapping['prefix']}play <song name>` - Plays a song from your playlist.\n    - `{mapping['prefix']}pause` - Pauses the current song.\n    - `{mapping['prefix']}resume` - Resumes the current song.\n    - `{mapping['prefix']}skip` - Skips the current song.\n    - `{mapping['prefix']}queue` - Shows the current queue.\n    - `{mapping['prefix']}clear` - Clears the queue.\n    - `{mapping['prefix']}volume <volume level>` - Sets the volume of the music.\n    - `{mapping['prefix']}shuffle` - Shuffles the queue.\n    - `{mapping['prefix']}loop` - Loops the current song.\n    - `{mapping['prefix']}lyrics` - Gets the lyrics of the current song.\n    - `{mapping['prefix']}nowplaying` - Shows the current song that is playing.\n    - `{mapping['prefix']}help` - Shows a list of all available commands.\n\n    **Settings:**\n    - Changes the prefix for the bot commands.\n    - Changes the music source (web app, Spotify, etc.).\n    - Changes the music quality (high, medium, low).\n    - Changes the music volume.\n\n    **Support:**\n    - If you encounter any issues, feel free to ask for help.\n    \"\"\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(dec_to_ternary(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        n, r = divmod(n, 3)\n        ternary = str(r) + ternary\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        extension = file_name.split('.')[-1]\n        extensions.append(extension)\n    return tuple(extensions)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young Adult\"\n    elif 30 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        return \"A\", 4.0\n    elif numerical_grade >= 80:\n        return \"B\", 3.0\n    elif numerical_grade >= 70:\n        return \"C\", 2.0\n    elif numerical_grade >= 60:\n        return \"D\", 1.0\n    else:\n        return \"F\", 0.0\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowel_count_dict = {}\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char.lower() in 'aeiou')\n        vowel_count_dict[palindrome] = vowel_count\n    return vowel_count_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if s.isalpha():\n        return s.lower()\n    elif s.isdigit():\n        return str(int(s) + 1)\n    elif s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        return s\n\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number_parts = version_number.split('_')\n        version_number_parts.pop(0)\n        version_number_parts.pop(0)\n        version_number_parts.append(version_number.split('_')[1])\n        latest_versions[package_name] = '_'.join(version_number_parts)\n    return latest_versions\n\n\ndependencies = [('requests', '0001_auto_20200101_0000'),\n                ('flask', '0002_auto_20200101_0000'),\n                ('pandas', '0003_auto_20200101_0000')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split(\" \")\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_dict[action] = [result]\n    return causes_dict\n\n\ncauses = [\"death by-product\", \"death by-force\", \"death by-accident\", \"death by-injury\", \"death by-age\", \"death by-health\"]"}
{"task_id": "valid/108", "completion": "\n    # replace spaces with hyphens\n    name_with_hyphens = name.replace(\" \", \"-\")\n\n    # convert to lowercase\n    lower_case_name = name_with_hyphens.lower()\n\n    return lower_case_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    string = string.replace(string.punctuation, \"\")\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"TypeError: {num} is not a number\")\n            continue\n        except Exception as e:\n            print(f\"Unexpected error: {e}\")\n            continue\n    return result\n\n\nnum_list = [2, 3, 4, 5, 'a', 6]\nexp = 3"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        print(min(grid[i]))\n\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n < 0:\n        print(\"Please provide a positive integer value\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you for your kind words\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first, *rest = s\n        if first.lower() in 'aeiou':\n            return remove_vowels_recursive(rest) + first.lower()\n        else:\n            return first + remove_vowels_recursive(rest)\n\n"}
{"task_id": "valid/117", "completion": "\n    def help_message(options):\n        help_text = \"Usage: python [OPTIONS] COMMAND [ARGS]\\n\\n\"\n        help_text += \"Options:\\n\"\n        for option in options:\n            help_text += \"  --{} - {} \\n\".format(option[0], option[1])\n        help_text += \"\\nCommands:\\n\"\n        for command in options[1:]:\n            help_text += \"  {} - {}\\n\".format(command[0], command[1])\n        return help_text\n\n    return help_message(options)\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return 2 ** len(sample_bitset) - 1 - sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    sequence_length = len(sequence)\n    subsequence_length = len(subsequence)\n\n    for i in range(sequence_length - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # code to calculate number of electrons based on energy values\n    # code to adjust number of electrons based on doping levels\n    pass\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return arr, max_diff\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    return \",\".join(sorted(fruit_list))\n"}
{"task_id": "valid/133", "completion": "\n    return [lst[i: j] for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    def forward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('history', models.TextField(null=True, blank=True))\n\n    def backward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.remove_field('history', 'history')\n\n    migrations.Migration(\n        name='{model_name}_history',\n        operations=[\n            migrations.RunPython(forward, backward),\n        ],\n    )\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    return sum(set(list1) & set(list2))\n\n"}
{"task_id": "valid/137", "completion": "\n    length = len(df)\n    forecast_period = math.ceil(length / 100)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # calculate start and end index\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # return paginated list\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    def multiply(num1, num2):\n        result = 0\n        for _ in range(num2):\n            result += num1\n        return result\n\n    def string_to_int(n_str):\n        return int(n_str)\n\n    def int_to_string(n):\n        return str(n)\n\n    n_str = n_str[::-1]\n    result = 0\n    for i in range(len(n_str)):\n        digit = string_to_int(n_str[i])\n        result += multiply(10, digit)\n        if i != len(n_str) - 1:\n            result += multiply(10, 10)\n        result += multiply(10, string_to_int(n_str[i+1:]))\n    return int_to_string(result)\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the ROS node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Preset positions\n    presets = {\n        'preset1': [1.0, 2.0, 3.0],\n        'preset2': [4.0, 5.0, 6.0],\n        'preset3': [7.0, 8.0, 9.0]\n    }\n\n    # Get the preset position\n    preset_position = presets.get(preset_name)\n\n    if preset_position:\n        # Create a message\n        msg = '{0},{1},{2}'.format(preset_position[0], preset_position[1], preset_position[2])\n\n        # Publish the message\n        pub.publish(msg)\n    else:\n        print(\"Preset not found\")\n\n    # Keep the node alive\n    rospy.spin()\n\n"}
{"task_id": "valid/142", "completion": "\n    product_common_elements = [i for i in list1 if i in list2]\n    return product_common_elements\n\n"}
{"task_id": "valid/143", "completion": "\n    class QuizSystem:\n        def __init__(self, allow_multiple_answer, zoom_level):\n            self.allow_multiple_answer = allow_multiple_answer\n            self.zoom_level = zoom_level\n\n        def start_quiz(self):\n            if self.allow_multiple_answer:\n                print(\"Starting quiz with multiple answers\")\n            else:\n                print(\"Starting quiz with single answers\")\n\n        def set_zoom_level(self, level):\n            self.zoom_level = level\n            print(f\"Zoom level set to {self.zoom_level}\")\n\n    # create an instance of QuizSystem\n    quiz_system = QuizSystem(allow_multiple_answer, zoom_level)\n    quiz_system.start_quiz()\n    quiz_system.set_zoom_level(5)\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    def merge_nested(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge_nested(a[key], b[key])\n                elif a[key] > b[key]:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    merged = {'nested': {}}\n    for key in a:\n        if key in b:\n            if isinstance(a[key], dict) and isinstance(b[key], dict):\n                merged[key] = merge_nested(a[key], b[key])\n            elif a[key] > b[key]:\n                merged[key] = a[key]\n        else:\n            merged[key] = a[key]\n\n    for key in b:\n        if key not in a:\n            merged[key] = b[key]\n\n    return merged\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=d.get)\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    if key in dict:\n        return sum(dict[key]) / len(dict[key])\n    else:\n        return \"Key not found\"\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    elif len(string) == 0:\n        return \"\"\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 5 == 0:\n        return False\n    if x % 2 == 0:\n        return False\n    if x % 3 == 0:\n        return False\n    if x % 7 == 0:\n        return False\n    if x % 11 == 0:\n        return False\n    if x % 13 == 0:\n        return False\n    if x % 17 == 0:\n        return False\n    if x % 19 == 0:\n        return False\n    if x % 23 == 0:\n        return False\n    if x % 29 == 0:\n        return False\n    if x % 31 == 0:\n        return False\n    if x % 37 == 0:\n        return False\n    if x % 41 == 0:\n        return False\n    if x % 43 == 0:\n        return False\n    if x % 47 == 0:\n        return False\n    if x % 53 == 0:\n        return False\n    if x % 59 == 0:\n        return False\n    if x % 61 == 0:\n        return False\n    if x % 67 == 0:\n        return False\n    if x % 71 == 0:\n        return False\n    if x % 73 == 0:\n        return False\n    if x % 79 == 0:\n        return False\n    if x % 83 == 0:\n        return False\n    if x % 89 == 0:\n        return False\n    if x % 97 == 0:\n        return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
