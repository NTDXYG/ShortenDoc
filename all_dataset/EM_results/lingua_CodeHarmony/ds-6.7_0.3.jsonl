{"task_id": "valid/0", "completion": "\n    if \"python\" in text.lower():\n        return \"Python\"\n    elif \"java\" in text.lower():\n        return \"Java\"\n    elif \"javascript\" in text.lower():\n        return \"JavaScript\"\n    elif \"c++\" in text.lower():\n        return \"C++\"\n    else:\n        return \"Unknown\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Saxophone', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input not valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    sum_of_digits = sum(int(i) for i in str(n))\n    return n % 5 == 0 and sum_of_digits % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON string: \", e)\n\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npretty_print_json(json_str)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n\n\ntext = \"  Hello    world  \""}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return word1 in text and word2 in text\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(i) for i in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for key in dictionary:\n        if isinstance(dictionary[key], dict):\n            value = get_nested_dictionary_value(dictionary[key])\n            if value is not None:\n                return value\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    length = len(str_num)\n    half = length // 2\n\n    left_half = int(str_num[:half])\n    right_half = int(str_num[half:])\n\n    min_diff = float('inf')\n    min_num = -1\n\n    for i in range(-1, 2):\n        left_half_str = str(left_half + i)\n        if length % 2 == 0:\n            palindrome = left_half_str + left_half_str[::-1]\n        else:\n            palindrome = left_half_str + str_num[half] + left_half_str[::-1]\n\n        diff = abs(num - int(palindrome))\n        if diff < min_diff:\n            min_diff = diff\n            min_num = int(palindrome)\n\n    return min_num\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum += matrix[i][j]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_string = base64_bytes.decode('ascii')\n\n    return base64_string\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data:\n        return json_data[key] == value\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the buttons\n    button_table = []\n\n    # Iterate over the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Append the current chunk of buttons to the button_table\n        button_table.append(buttons[i:i+num_columns])\n\n    # Return the button_table\n    return button_table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] in s:\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    nums = re.findall(r'\\d+', ts)\n    return sum(int(n) for n in nums)\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the vote counts\n    vote_counts = {}\n\n    # Calculate the total number of votes\n    total_votes = sum(vote[1] for vote in votes)\n\n    # Iterate over the list of votes\n    for vote in votes:\n        # Add the vote count to the dictionary\n        vote_counts[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in vote_counts:\n        vote_counts[candidate] = round(vote_counts[candidate] / total_votes * 100, 2)\n\n    return vote_counts\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%b-%Y')\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, '%d-%m-%Y')\n        except ValueError:\n            return \"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\"\n\n    return date.strftime('%B %d, %Y')\n"}
{"task_id": "valid/42", "completion": "\n    # get the file extension of the new name\n    new_extension = newname.split('.')[-1]\n\n    # check if the new file extension is in the allowed types\n    if new_extension in allowed_type:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            if n.isdigit():\n                return int(n) % 2 == 0\n            else:\n                return False\n        elif isinstance(n, (int, float)):\n            return n % 2 == 0\n        else:\n            return False\n\n    def process_item(n):\n        if isinstance(n, tuple):\n            return tuple(filter(is_even, map(process_item, n)))\n        else:\n            return n if is_even(n) else None\n\n    return tuple(filter(None, map(process_item, lst)))\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^\\w{5}$', string) is not None\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        (r'^videos/$', 'list_videos'),\n        (r'^videos/(?P<id>\\d+)/$', 'video_detail'),\n    ]\n\n    for pattern, view in urlpatterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, \"\n    name = \"World\"\n    concatenated = sentence + name\n    return concatenated\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += dict[key]\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    return [i for i in list1 if i in list2]\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int) or a < 1 or b < 1:\n        raise ValueError(\"Both numbers must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n\n    for file_path in file_paths:\n        dir_path = file_path.split('/')\n        dir_name = dir_path[-2]\n\n        if dir_name not in config_files:\n            config_files[dir_name] = []\n\n        config_files[dir_name].append(file_path)\n\n    return config_files\n\n\nfile_paths = [\n    \"/etc/nginx/nginx.conf\",\n    \"/etc/nginx/sites-available/example.com\",\n    \"/etc/nginx/sites-enabled/example.com\",\n    \"/etc/ssh/sshd_config\",\n    \"/etc/sysctl.d/example.conf\",\n    \"/etc/sysctl.conf\",\n]\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    color = color.upper()\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    # Initialize a list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through the range\n    for i in range(start, end + 1):\n        # Check if the square root of the number is an integer\n        if (i ** 0.5).is_integer():\n            # If it is, add it to the list\n            perfect_squares.append(i)\n\n    # Check if the list is empty\n    if not perfect_squares:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    string_3 = \"!\"\n    return f\"{string_1} {string_2} {string_3}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        cleaned_string = re.sub(r'[^a-zA-Z0-9 ]', '', string)\n        # Capitalize first letter\n        capitalized_string = cleaned_string[0].upper() + cleaned_string[1:]\n        result.append(capitalized_string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n            else:\n                break\n        else:\n            break\n\n    return bold_texts\n\n\nhtml_code = \"<b>bold text 1</b> and <b>bold text 2</b>\""}
{"task_id": "valid/73", "completion": "\n    # prices of items in vending machine\n    prices = {\"cola\": 1.0, \"chips\": 0.5, \"candy\": 0.65}\n\n    # stock of items in vending machine\n    stock = {\"cola\": 10, \"chips\": 10, \"candy\": 10}\n\n    # check if item is in stock\n    if item not in stock:\n        return \"Item not available\"\n\n    # check if item is in prices\n    if item not in prices:\n        return \"Item not available\"\n\n    # check if enough money inserted\n    if money_inserted < prices[item]:\n        return \"Not enough money\"\n\n    # check if item is in stock\n    if stock[item] <= 0:\n        return \"Item not available\"\n\n    # update stock\n    stock[item] -= 1\n\n    # calculate change\n    change = money_inserted - prices[item]\n\n    return {\"item\": item, \"change\": change, \"stock\": stock}\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design function assigns specific value to variable validates it.\n    \"\"\"\n    # Assigning value to variable\n    my_var = 1234567890\n\n    # Validating the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design function assigns specific value to variable validates it.\n    \"\"\"\n    # Assigning value to variable\n    my_var = 123.456\n\n    # Validating the variable\n    if isinstance(my_var, float):\n        print(\"The variable is a float.\")\n    else:\n        print(\"The variable is not a float.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design function assigns specific value to variable validates it.\n    \"\"\"\n    # Assigning value to variable\n    my_var = True\n\n    # Validating the variable\n    if isinstance(my_var, bool):\n        print(\"The variable is a boolean.\")\n    else:\n        print(\"The variable is not a boolean.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design function assigns specific value to variable validates it.\n    \"\"\"\n    # Assigning value to variable\n    my_var = None\n\n    # Validating the variable\n    if my_var is None:\n        print(\"The variable is None.\")\n    else:\n        print(\"The variable is not None.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design function assigns specific value to variable validates it.\n    \"\"\"\n    # Assigning value to variable"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r\"\\b\\w[\\w']*\\b\", text)\n    return tokens\n\ntext = \"The quick brown fox jumps over the lazy dog.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    print(\"Numbers divisible by 3 and 7: \", divisible_numbers)\n\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    print(\"Average of numbers divisible by 3 and 7: \", average)\n\n    print(\"Maximum value: \", max(divisible_numbers))\n    print(\"Minimum value: \", min(divisible_numbers))\n\n    unique_numbers = set(divisible_numbers)\n    for num in unique_numbers:\n        print(f\"Number of occurrences of {num}: {divisible_numbers.count(num)}\")\n\n\nnumbers = [10, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]\nfind_divisible_numbers(numbers)\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split(\" \")\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += (1 / math.factorial(i))\n    euler_number = round(euler_number, decimal_places)\n    return euler_number\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = len(encyclopedia[entry])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}"}
{"task_id": "valid/97", "completion": "\n\n    **Discord Music Bot**\n\n    This bot is designed to manage music playback in Discord servers. It allows users to create and manage playlists, control the music playback, and adjust server settings.\n\n    **Commands**\n\n    {mapping}\n\n    **Usage**\n\n    To use a command, type the command followed by the required parameters. For example, to play a song, you would type `{mapping['play']}` followed by the song name or URL.\n\n    **Help**\n\n    For more information about a specific command, type `{mapping['help']}` followed by the command name. This will provide detailed help information about the command.\n\n    **Settings**\n\n    The bot has several settings that can be adjusted by server administrators. These include the default volume, the maximum number of songs in the queue, and the maximum length of a song. These settings can be changed by administrators using the `{mapping['settings']}` command.\n\n    **Playlists**\n\n    Users can create and manage playlists using the `{mapping['playlist']}` command. This allows users to save their favorite songs and play them back in sequence.\n\n    **Feedback**\n\n    If you have any feedback or suggestions for improving the bot, please let us know. We're always looking to improve and provide a better experience for our users.\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    n = abs(n)\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names if '.' in file_name)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 59:\n        return \"Adult\"\n    elif age <= 120:\n        return \"Senior\"\n    else:\n        return \"Invalid age\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n\nnumerical_grade = int(input(\"Enter numerical grade: \"))\nletter_grade, gpa = calculate_grade_and_gpa(numerical_grade)"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        vowel_count = 0\n        for letter in palindrome:\n            if letter in vowels:\n                vowel_count += 1\n        palindrome_dict[palindrome] = vowel_count\n    return palindrome_dict\n\n\npalindrome_tuples = ('level', 'radar', 'deed', 'rotator', 'python', 'refer')"}
{"task_id": "valid/104", "completion": "\n    # 1. If the string is empty, return \"Empty String\".\n    if s == \"\":\n        return \"Empty String\"\n\n    # 2. If the string is a palindrome, return \"Palindrome\".\n    if s == s[::-1]:\n        return \"Palindrome\"\n\n    # 3. If the string is a number, return \"Number\".\n    if s.isdigit():\n        return \"Number\"\n\n    # 4. If the string is a alphanumeric, return \"Alphanumeric\".\n    if s.isalnum():\n        return \"Alphanumeric\"\n\n    # 5. If the string is a special character, return \"Special Character\".\n    if not s.isalnum() and not s.isdigit() and not s.isspace():\n        return \"Special Character\"\n\n    # 6. If the string is a whitespace, return \"Whitespace\".\n    if s.isspace():\n        return \"Whitespace\"\n\n    # 7. If the string is a lowercase, return \"Lowercase\".\n    if s.islower():\n        return \"Lowercase\"\n\n    # 8. If the string is a uppercase, return \"Uppercase\".\n    if s.isupper():\n        return \"Uppercase\"\n\n    # 9. If the string is a titlecase, return \"Titlecase\".\n    if s.istitle():\n        return \"Titlecase\"\n\n    # 10. If the string is a punctuation, return \"Punctuation\".\n    if s in string.punctuation:\n        return \"Punctuation\"\n\n    # 11. If the string is a symbol, return \"Symbol\".\n    if not s.isalnum() and not s.isspace():\n        return \"Symbol\"\n\n    # 12. If the string is a vowel, return \"Vowel\".\n    if s.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return \"Vowel\"\n\n    # 13. If the string is a consonant, return \"Consonant\".\n    if s.isalpha() and s"}
{"task_id": "valid/105", "completion": "\n    sum_set = set()\n    for num in arr:\n        if num in sum_set:\n            return True\n        sum_set.add(-num)\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[0]\n        version_number = int(version_number)\n        if package_name in latest_versions:\n            if version_number > latest_versions[package_name]:\n                latest_versions[package_name] = version_number\n        else:\n            latest_versions[package_name] = version_number\n    return latest_versions\n\n\ndependencies = [('package1', '0001_auto_20200101_1200'),\n                ('package1', '0002_auto_20200102_1300'),\n                ('package2', '0001_auto_20200103_1400'),\n                ('package1', '0003_auto_20200104_1500'),\n                ('package2', '0002_auto_20200105_1600')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split(\" \")\n        if action not in causes_dict:\n            causes_dict[action] = [result]\n        else:\n            causes_cause = causes_dict[action]\n            causes_cause.append(result)\n            causes_dict[action] = causes_cause\n    return causes_dict\n\n\ncauses = [\"kill love\", \"train accident\", \"accident love\", \"accident hate\", \"train disaster\", \"kill hate\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be list and integer.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n        print_thank_you(n - 1, current_num + 1)\n    else:\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python my_app [OPTIONS]\\n\\n\"\n    help_message += \"Options:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-h\", \"Show this help message\"), (\"-v\", \"Verbose mode\"), (\"-d\", \"Run in debug mode\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize count dictionary\n    count_dict = {}\n\n    # Iterate over Val\n    for v in Val:\n        # If value is in dictionary, increment count\n        if v in count_dict:\n            count_dict[v] += 1\n        # If value is not in dictionary, add to dictionary with count 1\n        else:\n            count_dict[v] = 1\n\n    return count_dict\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        quotient = 0\n        while h >= t:\n            h -= t\n            quotient += 1\n        return quotient\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the electron count to 0\n    electron_count = 0\n\n    # Calculate the number of electrons based on the energy values\n    for energy in grid_energies:\n        electron_count += energy / 100  # Assuming energy is proportional to electron count\n\n    # Adjust the number of electrons based on the doping level\n    electron_count *= (1 + ados * dope)  # Assuming doping level is a percentage of the total electron count\n\n    # Ensure the electron count is within the DOS grid size\n    electron_count = min(electron_count, dos_grid_size)\n\n    return electron_count\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    result = []\n    flag = True\n    while i <= j:\n        if flag:\n            result.append(arr[j])\n            j -= 1\n        else:\n            result.append(arr[i])\n            i += 1\n        flag = not flag\n    return result\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {')': '(', ']': '[', '}': '{'}\n    for char in string:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or parentheses[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sub = lst[i:j]\n            sublists.append(sub)\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # calculate forecast period\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize carry\n    carry = 0\n    # Initialize result string\n    result = ''\n    # Iterate over the string in reverse order\n    for digit in n_str[::-1]:\n        # Convert digit to integer and double it\n        temp = int(digit)*2 + carry\n        # If the result is greater than 9, set carry to 1 and append the remainder to the result\n        if temp > 9:\n            carry = 1\n            result += str(temp % 10)\n        # If the result is not greater than 9, set carry to 0 and append the result to the result\n        else:\n            carry = 0\n            result += str(temp)\n    # If there is a carry left, append it to the result\n    if carry:\n        result += str(carry)\n    # Return the result string in reverse order\n    return result[::-1]\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (0.1, 0.2, 0.3),\n        \"preset2\": (0.4, 0.5, 0.6),\n        \"preset3\": (0.7, 0.8, 0.9),\n        # add more presets as needed\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        raise ValueError(f\"Preset {preset_name} not found\")\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for i in common_elements:\n        product *= i\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Quiz allows multiple answers.\")\n    else:\n        print(\"Quiz does not allow multiple answers.\")\n\n    if zoom_level == \"auto\":\n        print(\"Zoom level is set to auto.\")\n    elif zoom_level == \"manual\":\n        print(\"Zoom level is set to manual.\")\n    else:\n        print(\"Zoom level is set to custom.\")\n\n\nquiz_system_behavior(True, \"auto\")\nquiz_system_behavior(False, \"manual\")\nquiz_system_behavior(True, \"custom\")\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    modified_sentence = \"\".join(char for char in sentence if char not in vowels)\n    return modified_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a:\n        if isinstance(a[key], dict):\n            merged[key] = merge_objects(a[key], b[key] if key in b and isinstance(b[key], dict) else {})\n        else:\n            merged[key] = a[key]\n\n    for key in b:\n        if key not in merged and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n        elif key not in merged:\n            merged[key] = b[key]\n\n    return merged\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n\nlst = [1, 4, 2, 5, 3, 6, 9, 8, 7]\nn = 4"}
{"task_id": "valid/151", "completion": "\n    a = [1]\n    b = [1]\n    c = [1]\n    for i in range(2, x):\n        a.append(i)\n        b.append(i * (i - 1) // 2)\n        c.append(i * (3 * i - 1) // 2)\n        if len(set(a).intersection(b)) > 0 or len(set(a).intersection(c)) > 0 or len(set(b).intersection(c)) > 0:\n            return True\n    return False\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
