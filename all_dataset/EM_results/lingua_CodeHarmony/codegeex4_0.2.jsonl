{"task_id": "valid/0", "completion": "\n    # Define categories and their keywords\n    categories = {\n        'sports': ['football', 'basketball', 'tennis', 'baseball', 'soccer', 'golf', 'skiing', 'swimming', 'boxing', 'wrestling'],\n        'politics': ['president', 'election', 'government', 'policy', 'congress', 'senate', 'house', 'democrat', 'republican', 'campaign'],\n        'technology': ['apple', 'google', 'facebook', 'amazon', 'microsoft', 'tech', 'software', 'hardware', 'internet', 'computer'],\n        'entertainment': ['movie', 'music', 'tv', 'actor', 'actress', 'director', 'producer', 'cinema', 'theater', 'entertainment'],\n        'business': ['stock', 'market', 'business', 'company', 'finance', 'economy', 'investment', 'bank', 'trade', 'industry'],\n        'health': ['health', 'medicine', 'doctor', 'patient', 'hospital', 'wellness', 'fitness', 'nutrition', 'disease', 'symptom'],\n        'education': ['school', 'university', 'student', 'teacher', 'education', 'course', 'degree', 'learning', 'knowledge', 'education'],\n        'science': ['science', 'research', 'experiment', 'scientist', 'technology', 'physics', 'chemistry', 'biology', 'astronomy', 'geology'],\n        'travel': ['travel', 'vacation', 'destination', 'tourist', 'flight', 'hotel', 'resort', 'adventure', 'cruise', 'beach'],\n        'food': ['food', 'recipe', 'restaurant', 'cook', 'dining', 'cuisine', 'ingredient', 'baking', 'grilling', 'snack'],\n        'fashion': ['fashion', 'clothing', 'style', 'designer', 'trend', 'outfit', 'accessory', 'jewelry', 'shoes', 'bag'],\n        'art': ['art', 'painting', 'sculpture', 'photography', 'music', 'dance', 'theater', 'cinema', 'literature', 'architecture'],\n        'religion': ['religion', 'god', 'church', 'faith', 'spirituality', 'bible', 'prayer', 'sacred',"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'bass', 'violin', 'flute', 'clarinet', 'saxophone', 'trumpet', 'tuba']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        sum_of_digits = sum(int(digit) for digit in str(n))\n        if sum_of_digits % 3 == 0:\n            return True\n    return False"}
{"task_id": "valid/6", "completion": "\n    return pow(base, n, 26)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string provided.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        raise ValueError(\"Text length exceeds 10,000 characters\")\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        line = line.strip()\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Implement the disassembly logic here\n    # This is a placeholder implementation\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    list3 = list1 + list2\n    list3.sort()\n    return list3\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    try:\n        num = float(num)\n        if num < 0:\n            return \"Error: Negative number\"\n        else:\n            return num ** 0.5\n    except ValueError:\n        return \"Error: Invalid input\"\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s.lower() if c.isalpha())\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key in json_data and json_data[key] == value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i+num_columns]\n        table.append(row)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(i, (int, float)) for i in arr):\n        raise ValueError(\"Array contains non-numerical values\")\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data['neighborhoods']\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x['name'])\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize sum and min_sum\n    sum = 0\n    min_sum = float('inf')\n\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # Iterate until left pointer is less than right pointer\n    while left < right:\n        # Calculate sum of current pair\n        sum = arr[left] + arr[right]\n\n        # Update min_sum if current sum is smaller\n        min_sum = min(min_sum, abs(sum))\n\n        # If current sum is negative, move left pointer to the right\n        if sum < 0:\n            left += 1\n        # If current sum is positive, move right pointer to the left\n        elif sum > 0:\n            right -= 1\n        # If current sum is zero, return 0\n        else:\n            return 0\n\n    # Return min_sum\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        if not isinstance(candidate_name, str) or not candidate_name.isupper() or len(candidate_name) > 10:\n            raise ValueError(\"Invalid candidate name\")\n        if not isinstance(number_of_votes, int) or number_of_votes <= 0 or number_of_votes > 1000:\n            raise ValueError(\"Invalid number of votes\")\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n        total_votes += number_of_votes\n    for candidate_name, number_of_votes in results.items():\n        percentage = (number_of_votes / total_votes) * 100\n        print(f\"{candidate_name}: {percentage:.2f}%\")\n    return results\n\n\nvotes = [(\"JOHN\", 500), (\"BOB\", 300), (\"ALICE\", 200)]\ncalculate_election_results(votes)\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n    except ValueError:\n        try:\n            date_object = datetime.strptime(date_string, \"%d-%b-%Y\")\n            return date_object.strftime(\"%B %d, %Y\")\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY format.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = allowed_type\n    old_extension = oldname.split('.')[-1]\n    new_extension = newname.split('.')[-1]\n    if new_extension in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data[generation] = accs\n"}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(' :: ')\n        if len(parts) == 3 and parts[0] == 'Programming Language':\n            language = parts[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over each element in the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Create an empty list to store the counts\n    counts = []\n\n    # Iterate over the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        counts.append(count)\n\n    # Return the list of counts\n    return counts\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('', views.home, name='home'),\n        path('videos/<int:video_id>/', views.video_detail, name='video_detail'),\n        path('competitions/<int:competition_id>/', views.competition_detail, name='competition_detail'),\n    ]\n\n    # Add your custom URL routing logic here\n\n    # Example: match URL to view\n    if re.match(r'^/competitions/(?P<competition_id>\\d+)/$', url):\n        return views.competition_detail\n    elif re.match(r'^/videos/(?P<video_id>\\d+)/$', url):\n        return views.video_detail\n    else:\n        return views.home\n\n"}
{"task_id": "valid/51", "completion": "\n    if position < 0 or position > len(list):\n        raise IndexError(\"Position out of range\")\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    return string + \" \" + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for d in list_of_dicts:\n        for key in d.keys():\n            if key.startswith(\"price_\"):\n                price_sum += d[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = list(set(list1) & set(list2))\n    list2 = [i for i in list2 if i not in intersection]\n    return intersection"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Extract the directory path and file name from the file path\n        directory_path, file_name = os.path.split(file_path)\n\n        # Determine the category based on the directory path\n        if 'global' in directory_path:\n            categorized_files['global'].append(file_path)\n        elif 'environment' in directory_path:\n            categorized_files['environment'].append(file_path)\n        elif 'service' in directory_path:\n            categorized_files['service'].append(file_path)\n        elif 'application' in directory_path:\n            categorized_files['application'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN', 'BLUE']\n    index = colors.index(color)\n    return colors[(index + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha():\n                if char.lower() == target.lower():\n                    return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, World!\"\n    return f\"{phrase} This is a concatenated string using f-strings.\"\n"}
{"task_id": "valid/70", "completion": "\n    def is_special_char(char):\n        return not (char.isalnum() or char.isspace())\n\n    def process_string(s):\n        return ''.join(c.upper() for c in s if not is_special_char(c))\n\n    return [process_string(s) for s in strings]\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append(html_code[start_index:end_index + len(end_tag)])\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n\n    # Check if the item exists in the vending machine\n    if item not in items:\n        return \"Item not found in vending machine.\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Not enough money inserted.\"\n\n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n\n    # Update the stock of the item purchased\n    items[item] -= 1\n\n    # Return the change and the updated stock\n    return f\"Here is your {item}. Your change is ${change:.2f}.\", items\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning value to variable\n    value = 10\n\n    # Validating the value\n    if isinstance(value, int):\n        print(\"Value is valid\")\n    else:\n        print(\"Value is not valid\")\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n\n        # Match words\n        (?:(?<=\\s)|(?<=^))\\w+(?=\\s|$)\n        |\n        # Match punctuation\n        (?<=[\\w\\s])[\\.,;:!?\\-]+(?=[\\s\\w])\n        |\n        # Match numbers\n        (?:(?<=\\s)|(?<=^))\\d+(?=\\s|$)\n        |\n        # Match whitespace\n        (?<=\\s)\\s+(?=\\s|$)\n    \"\"\"\n    # Compile the regular expression\n    pattern = re.compile(regex, re.VERBOSE)\n    # Tokenize the text\n    tokens = pattern.findall(text)\n    # Return the tokens\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    return average, max_value, min_value, occurrences\n\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\naverage, max_value, min_value, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    word_frequency = {}\n    for word in sentence.split():\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n\n    highest_frequency = max(word_frequency.values())\n    highest_frequency_words = [word for word, frequency in word_frequency.items() if frequency == highest_frequency]\n\n    return highest_frequency_words\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 1\n    for i in range(1, decimal_places + 1):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if not numbers:\n        return 0, 0\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average, total\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i & 1:  # Check if number is odd using bitwise AND operator\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    average_odd = sum_odd / count_odd\n    return average_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    {mapping['description']}\n\n    **Features:**\n    - Play music in server\n    - Provide information about its features\n    - Web app for managing personal playlists\n    - Server settings\n    - Categorize commands\n    - Provide help information for each command\n\n    **Commands:**\n    - `{mapping['prefix']}help`: Provides help information for each command\n    - `{mapping['prefix']}play`: Plays a song in the server\n    - `{mapping['prefix']}pause`: Pauses the currently playing song\n    - `{mapping['prefix']}resume`: Resumes the currently paused song\n    - `{mapping['prefix']}stop`: Stops the currently playing song\n    - `{mapping['prefix']}queue`: Displays the current song queue\n    - `{mapping['prefix']}skip`: Skips the currently playing song\n    - `{mapping['prefix']}volume`: Sets the volume of the music player\n    - `{mapping['prefix']}settings`: Displays the current server settings\n    - `{mapping['prefix']}playlist`: Manages personal playlists\n    - `{mapping['prefix']}webapp`: Opens the web app for managing personal playlists\n    \"\"\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n = n // 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n    return palindrome_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return s\n\n    # Initialize variables\n    result = \"\"\n    i = 0\n\n    # Iterate through the string\n    while i < len(s):\n        # If the current character is a letter, add it to the result\n        if s[i].isalpha():\n            result += s[i]\n            i += 1\n        # If the current character is a digit, add it to the result\n        elif s[i].isdigit():\n            result += s[i]\n            i += 1\n        # If the current character is a space, add it to the result\n        elif s[i] == \" \":\n            result += s[i]\n            i += 1\n        # If the current character is a special character, add it to the result\n        else:\n            result += s[i]\n            i += 1\n\n    return result\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        if package_name not in latest_versions:\n            latest_versions[package_name] = version_number\n        else:\n            current_version = latest_versions[package_name]\n            if compare_versions(version_number, current_version):\n                latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return s\n    if s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: application [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  -{option}, --{option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    counts = {}\n    for v in Val:\n        if v in counts:\n            counts[v] += 1\n        else:\n            counts[v] = 1\n    return counts\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    if h < 0:\n        h = -h\n        t = -t\n    q = 0\n    while h >= t:\n        h -= t\n        q += 1\n    return q\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy] * (2 * (energy + 1) + 1)\n\n    # Adjust number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left.reverse()\n    return left + right\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\nlst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    operations = [\n        migrations.AlterField(\n            model_name='committeemember',\n            name='field_name',\n            field=models.CharField(max_length=100),\n        ),\n    ]\n\n    return operations\n\nHere is the Python code that generates a Django migration operation for altering a field in a model:\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(n_str)\n    carry = 0\n    for i in range(len(n)-1, -1, -1):\n        n[i] = int(n[i])\n        n[i] *= 2\n        n[i] += carry\n        carry = n[i] // 10\n        n[i] %= 10\n    if carry:\n        n.insert(0, carry)\n    return ''.join(map(str, n))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.1, 0.2, 0.3),\n        \"position2\": (0.4, 0.5, 0.6),\n        \"position3\": (0.7, 0.8, 0.9),\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]"}
{"task_id": "valid/143", "completion": "\n    # Code snippet\n    allow_multiple_answer = True\n    zoom_level = 2\n\n    # Your task is to implement a function that takes these two configurations as input and returns a string that describes the behavior of the quiz system based on these configurations.\n    # If allow_multiple_answer is True, the function should return a string that indicates that the quiz system allows multiple answers.\n    # If allow_multiple_answer is False, the function should return a string that indicates that the quiz system does not allow multiple answers.\n    # The zoom_level configuration determines the level of zoom applied to the quiz questions. If zoom_level is greater than 1, the function should return a string that indicates that the quiz questions are zoomed in by the specified zoom_level.\n    # If zoom_level is 1, the function should return a string that indicates that the quiz questions are not zoomed in.\n    # If zoom_level is less than 1, the function should return a string that indicates that the quiz questions are zoomed out by the specified zoom_level.\n    # The function should also handle cases where the configurations are not provided or are invalid.\n    # For example, if allow_multiple_answer is not a boolean value, the function should return a string that indicates that the allow_multiple_answer configuration is invalid.\n    # If zoom_level is not a number, the function should return a string that indicates that the zoom_level configuration is invalid.\n    # If both configurations are invalid, the function should return a string that indicates that both configurations are invalid.\n    # If both configurations are valid, the function should return a string that describes the behavior of the quiz system based on these configurations.\n    # For example, if allow_multiple_answer is True and zoom_level is 2, the function should return a string that indicates that the quiz system allows multiple answers and the quiz questions are zoomed in by 2.\n    # If allow_multiple_answer is False and zoom_level is 0.5, the function should return a string that indicates that the quiz system does not allow multiple answers and the quiz questions are zoomed out by 0.5.\n    # If allow_multiple_answer is True and zoom_level is 1, the function should return a string that indicates that the quiz system allows multiple answers and the quiz questions are not zoomed in.\n    # If allow_multiple_answer is False and zoom_level is 1, the function should return a string that indicates that the quiz system does not allow multiple answers and the quiz questions are not zoomed in.\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def merge(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def is_alphabetic(key):\n        return key.isalpha()\n\n    def sort_keys(obj):\n        return {k: obj[k] for k in sorted(obj.keys()) if is_alphabetic(k)}\n\n    merged = merge(a, b)\n    return sort_keys(merged)\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    smallest = heapq.nsmallest(n, lst)\n    return smallest\n\n"}
{"task_id": "valid/151", "completion": "\n    return x[0] ** 2 + x[1] ** 2 == x[2] ** 2\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
