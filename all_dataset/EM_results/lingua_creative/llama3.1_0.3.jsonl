{"task_id": "EvoEval/0", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Initialize additional charge flag to False\n    additional_charge = False\n    \n    # Iterate over each item in the list\n    for item in items:\n        # Check if item is a string\n        if isinstance(item, str):\n            # If item is a string, consider its weight as 1kg\n            weight = 1.0\n        else:\n            # If item is not a string, consider its weight as given\n            weight = item\n        \n        # Check if the weight is more than 5kg\n        if weight > 5.0:\n            # If weight is more than 5kg, set additional charge flag to True\n            additional_charge = True\n        \n        # Add base shipping cost to total cost\n        total_cost += 5.0\n    \n    # Apply location factor to total cost\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    else:\n        # If location is not \"National\" or \"International\", apply no additional factor\n        pass\n    \n    # If additional charge flag is True, add $10.0 to total cost\n    if additional_charge:\n        total_cost += 10.0\n    \n    # Return total shipping cost rounded to two decimal places as string\n    return \"{:.2f}\".format(total_cost)  # <--- changed here\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Define location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    # Get the location factor\n    factor = location_factors.get(location, 1.0)\n    \n    # Iterate over the items\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            weight = 1.0\n        # If the item is a float, use its value as the weight\n        else:\n            weight = item\n        \n        # Calculate the base cost for the item\n        base_cost = 5.0\n        \n        # If the weight is more than 5kg, add an additional charge\n        if weight > 5.0:\n            base_cost += 10.0\n        \n        # Add the base cost to the total cost\n        total_cost += base_cost\n        \n    # Multiply the total cost by the location factor\n    total_cost *= factor\n    \n    # Return the total cost to two decimal places\n    return round(total_cost, 2)  # <--- Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 97 if char.islower() else 65\n                encrypted_char = chr((ord(char) - ascii_offset + int(key)) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(1, len(input_string) + 1):\n        for subset in itertools.combinations(input_string, i):\n            subset_str = ''.join(subset)\n            result.append(subset_str)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            max_height = candles[i]\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    up, down = -1, 1\n\n    while left <= right:\n        for i in range(left, right + 1):\n            result.append(matrix[up][i])\n        up += down\n\n        for i in range(up, right + 1):\n            result.append(matrix[i][right])\n        right -= 1\n\n        if up > 0:\n            for i in range(right, left - 1, -1):\n                result.append(matrix[up][i])\n            up -= down\n\n        if left < right:\n            for i in range(up, left - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    grid[x][y] = -1\n    if grid[x][y] == 0:\n        return grid\n    adjacent_cells = get_adjacent_cells(x, y, len(grid), len(grid[0]))\n    for cell in adjacent_cells:\n        grid[cell[0]][cell[1]] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0  # initialize starting point (0,0)\r\n    for direction in code_sequence:\r\n        if direction == 0:  # North\r\n            y += 1\r\n        elif direction == 1:  # East\r\n            x += 1\r\n        elif direction == 2:  # South\r\n            y -= 1\r\n        elif direction == 3:  # West\r\n            x -= 1\r\n        # check if we are back at the starting point\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'  # if we are not back at the starting point, Shangri-La not found\r"}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') > 1:\n        return 'Invalid canvas'\n    painter = canvas.find('P')\n    canvas = list(canvas)\n    canvas[painter] = '*'\n    for i in range(len(canvas)):\n        if canvas[i] == '-':\n            if painter > i:\n                canvas[i] = '*'\n            else:\n                break\n    return ''.join(canvas)  # return the updated canvas as a string"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lower case\n    string = ''.join(e for e in string if e.isalnum() or e.isspace()).lower()\n    # Split the string into words\n    words = string.split()\n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    # Iterate over each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency[word] = 1\n    # Return the dictionary of word frequencies\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_counts = {}\r\n    animal_string = animal_string.replace(' ', '')  # remove spaces\r\n    animal_string = animal_string.replace('|', '')  # remove |\r\n    animal_list = animal_string.split()  # split string into list of animals\r\n    for animal in animal_list:\r\n        if animal in animal_sounds:\r\n            if animal in animal_counts:\r\n                animal_counts[animal] += 1\r\n            else:\r\n                animal_counts[animal] = 1\r\n        else:\r\n            if len(animal_counts) >= 5:\r\n                break\r\n            else:\r\n                continue\r\n    animal_counts = sorted(animal_counts.items())\r\n    return [count for _, count in animal_counts]\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{fruits[0]}, {fruits[1]} {fruits[2]} from {location}? Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with the maximum occurrence\n    max_count = max(count_dict.values())\n    most_occurred = min([num for num, count in count_dict.items() if count == max_count])\n\n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n\n    # Multiply the sum of elements with the most occurred number\n    result = total_sum * most_occurred\n\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [elem for elem, count in count_dict.items() if count == min_count]\n    return rarest_elements[0]  # return first rarest element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = (vowels.index(char.lower()) + 1) % len(vowels)\n                alias += vowels[index]\n            elif char.lower() in consonants:\n                index = (consonants.index(char.lower()) + 1) % len(consonants)\n                alias += consonants[index]\n            else:\n                raise ValueError('Invalid character')\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # create dictionary to map card values\n    card_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 1}\n    # create dictionary to map card suits\n    card_suits = {'S': 0, 'H': 1, 'D': 2, 'C': 3}\n    # create list to store card values\n    hand_values = []\n    # create list to store card suits\n    hand_suits = []\n    # iterate over each card in hand\n    for card in hand:\n        # extract value and suit from card\n        value = card[0]\n        suit = card[1]\n        # add value and suit to lists\n        hand_values.append(card_values[value])\n        hand_suits.append(card_suits[suit])\n    # create dictionary to store card counts\n    card_counts = {}\n    # iterate over each card value\n    for value in hand_values:\n        # increment count for value\n        if value in card_counts:\n            card_counts[value] += 1\n        else:\n            card_counts[value] = 1\n    # create list to store pairs\n    pairs = []\n    # create list to store triples\n    triples = []\n    # create list to store fours\n    fours = []\n    # create list to store fives\n    fives = []\n    # iterate over each card count\n    for value, count in card_counts.items():\n        # if count is 2 add to pairs\n        if count == 2:\n            pairs.append(value)\n        # if count is 3 add to triples\n        elif count == 3:\n            triples.append(value)\n        # if count is 4 add to fours\n        elif count == 4:\n            fours.append(value)\n        # if count is 5 add to fives\n        elif count == 5:\n            fives.append(value)\n    # create list to store scores\n    scores = []\n    # if there are pairs add score to list\n    if pairs:\n        scores.append(sum(pairs))\n    # if there are triples add score to list\n    if triples:\n        scores.append(sum(triples) * 2)\n    #"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard_name, magic_power in wizards:\n        dragon_hp -= magic_power\n        if dragon_hp <= 0:\n            return f'{wizard_name}'\n\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    return int('7' * n)  # return n times 7 as a string, then convert to int\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                for k in range(len(m)):\n                    for l in range(len(m[k])):\n                        if m[k][l] == 2 and (i == k or j == l):\n                            danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if grid is square\n    if len(grid) != len(grid[0]):\n        return False\n\n    # Check if all words are lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    # Check if all words are in the grid\n    for word in words:\n        found = False\n        # Check horizontally\n        for i in range(len(grid)):\n            for j in range(len(grid[0]) - len(word) + 1):\n                if grid[i][j:j+len(word)] == list(word):\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            # Check vertically\n            for i in range(len(grid) - len(word) + 1):\n                for j in range(len(grid[0])):\n                    if ''.join([grid[i+k][j] for k in range(len(word))]) == word:\n                        found = True\n                        break\n                if found:\n                    break\n        if not found:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / (9.461 * 10**12)  # 1 light year = 9.461 x 10^12 km\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = []\n    num = 2\n    while len(primes) < 26:\n        if all(num % p > 0 for p in primes):\n            primes.append(num)\n        num += 1\n    return ''.join(str(primes[ord(c) - 97]) for c in s if c.isalpha())  # ord(c) - 97 to get the position of the letter in the alphabet\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    return ''.join(alien_dict.get(char, char) for char in english_word.lower())\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split(\". \")\n    # Initialize a dictionary to store the frequency of each word\n    frequency = {}\n    # Initialize the maximum frequency and the sentence with the maximum frequency\n    max_frequency = 0\n    max_frequency_sentence = \"\"\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split(\" \")\n        # Iterate over each word in the sentence\n        for word_in_sentence in words:\n            # Remove any punctuation from the word\n            word_in_sentence = word_in_sentence.strip(\".,!?:;\")\n            # If the word is the same as the given word\n            if word_in_sentence == word:\n                # If the word is already in the frequency dictionary, increment its count\n                if word in frequency:\n                    frequency[word] += 1\n                # Otherwise, add the word to the frequency dictionary with a count of 1\n                else:\n                    frequency[word] = 1\n                # If the count of the word is greater than the maximum frequency, update the maximum frequency and the sentence with the maximum frequency\n                if frequency[word] > max_frequency:\n                    max_frequency = frequency[word]\n                    max_frequency_sentence = sentence\n    # Return the frequency of the word and the sentence with the maximum frequency\n    return (frequency.get(word, 0), max_frequency_sentence) if max_frequency_sentence else (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a queue for BFS, enqueue the start position\n    queue = [(start, [])]\n    # Create a set to store visited positions\n    visited = set([start])\n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n    while queue:\n        # Dequeue the next position\n        (x, y), path = queue.pop(0)\n        # If this is the end position, return the path\n        if (x, y) == end:\n            return path\n        # For each possible movement\n        for dx, dy, direction in movements:\n            nx, ny = x + dx, y + dy\n            # If the new position is within the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 0) and ((nx, ny) not in visited):\n                # Mark the new position as visited\n                visited.add((nx, ny))\n                # Enqueue the new position with the updated path\n                queue.append(((nx, ny), path + [direction]))\n    # If there is no path to the end position, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income\n    taxable_income = income - deductions\n\n    # Calculate tax for each bracket\n    tax_free = min(taxable_income, 10000)\n    taxable_income -= tax_free\n\n    tax_15_percent = min(taxable_income, 25000) * 0.15\n    taxable_income -= tax_15_percent\n\n    tax_25_percent = min(taxable_income, 45000) * 0.25\n    taxable_income -= tax_25_percent\n\n    tax_30_percent = min(taxable_income, 30000) * 0.30\n    taxable_income -= tax_30_percent\n\n    # Calculate tax for remaining income\n    tax_remaining = taxable_income * 0.30\n\n    # Calculate total tax\n    total_tax = tax_free + tax_15_percent + tax_25_percent + tax_30_percent + tax_remaining\n\n    return total_tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                substrings.append(substring)\n    return sorted(list(set(substrings)))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, enqueue the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store the visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the next point\n        (x, y), path = queue.pop(0)\n        \n        # If this is the destination point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is within the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited\n                visited.add((nx, ny))\n                \n                # Enqueue the new point\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If there is no path to the destination, return an empty list\n    return []\n\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # There is only one way to reach any cell in the first row or column\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for j in range(n + 1):\n        dp[0][j] = 1\n\n    # Fill in the rest of the array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # The number of unique paths to a cell is the sum of the number of unique paths to the cell above it and the cell to its left\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # The number of unique paths to the bottom-right corner is stored in the bottom-right cell of the array\n    return dp[m][n]\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" in playlist[i]:\n            continue\n        swap_index = (seed * 16807) % 2147483647 % playlist_length\n        if swap_index == i:\n            continue\n        playlist[i], playlist[swap_index] = playlist[swap_index], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\r\n    ways[0] = 1  # There is one way to reach the first step (by not moving)\r\n    for i in range(1, n + 1):\r\n        for power in magic_stones:\r\n            if i >= power:\r\n                ways[i] += ways[i - power]\r\n    return ways[n]  # Return the number of ways to reach the top of the staircase\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize the list to store transformation percentages\n    transformation_percentages = [0]\n    \n    # Calculate transformation percentages for days before the most intense day\n    for i in range(1, m):\n        # If it's the first day, transformation percentage is 10%\n        if i == 1:\n            transformation_percentages.append(10)\n        # If it's not the first day, transformation percentage increases by 10% from the previous day\n        else:\n            transformation_percentages.append(transformation_percentages[i-1] + 10)\n    \n    # Calculate transformation percentages for the most intense day\n    transformation_percentages.append(min(100, transformation_percentages[m-1] * 2))\n    \n    # Calculate transformation percentages for days after the most intense day\n    for i in range(m+1, n):\n        # If it's the day after the most intense day, transformation percentage decreases by 10% from the previous day\n        if i == m+1:\n            transformation_percentages.append(transformation_percentages[i-1] - 10)\n        # If it's not the day after the most intense day, transformation percentage decreases by 10% from the previous day\n        else:\n            transformation_percentages.append(min(0, transformation_percentages[i-1] - 10))\n    \n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\r\n        return False\r\n    if email[0] == \"@\" or email[-1] == \"@\":\r\n        return False\r\n    if email.count(\"@\") > 1:\r\n        return False\r\n    if \"@\" in email[:-1]:\r\n        return False\r\n    if \".\" not in email:\r\n        return False\r\n    if email[-1] == \".\":\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i in range(len(xs)):\n        integral_coefficients.append(xs[i] / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for char in s:\n        if char in vowels:\n            idx = vowels.index(char)\n            result.append(vowels[(idx + 1) % len(vowels)])\n        elif char in consonants:\n            idx = consonants.index(char)\n            result.append(consonants[(idx + 1) % len(consonants)])\n        else:\n            result.append(char)\n    return ''.join(result)  # join all characters in the list into a single string\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1c\",\n        \":O\": \"\ud83d\ude2e\",\n        \":|\": \"\ud83d\ude10\",\n        \":/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-)\": \"\ud83d\ude09\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \"\ud83d\ude00\",\n        \":-P\": \"\ud83d\ude1c\",\n        \":-O\": \"\ud83d\ude2e\",\n        \":-|\": \"\ud83d\ude10\",\n        \":-/\": \"\ud83d\ude15\",\n        \";-(\": \"\ud83d\ude14\",\n        \":-(\": \"\ud83d\ude14\",\n        \":-)\": \"\ud83d\ude0a\",\n        \":-D\": \""}
{"task_id": "EvoEval/39", "completion": "\n    # Create a string of n copies of each character in s\n    s_n = ''.join([c * n for c in s])\n    \n    # Create the top and bottom borders\n    border = '*' * (len(s_n) + 2)\n    \n    # Create the middle rows\n    rows = [f\"*{s_n}*\"]\n    \n    # Add the middle rows\n    for _ in range(n - 1):\n        rows.append(border)\n    \n    # Add the bottom border\n    rows.append(border)\n    \n    # Join the rows into a single string\n    result = '\\n'.join(rows)\n    \n    return result\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Create a dictionary to store the power level of each potion\n    potion_dict = {}\n    for potion in potions:\n        name, power = potion.split()\n        power = int(power[:-1])  # Remove the unit from the power level\n        potion_dict[name] = power\n\n    # Create a list to store the result\n    result = []\n\n    # Define a helper function to perform the backtracking\n    def backtrack(current_power, current_potions):\n        # If the current power level is equal to the target, add the current potions to the result\n        if current_power == target:\n            result.append(current_potions)\n            return\n        # If the current power level is greater than the target, return\n        if current_power > target:\n            return\n        # Iterate over the potions\n        for potion in potions:\n            name, power = potion.split()\n            power = int(power[:-1])\n            # If the potion has not been used before\n            if name not in current_potions:\n                # Add the potion to the current potions\n                new_potions = current_potions + [name]\n                # Recursively call the backtrack function\n                backtrack(current_power + power, new_potions)\n\n    # Call the backtrack function\n    backtrack(0, [])\n\n    # If no solution is found, return an empty list\n    if not result:\n        return []\n\n    # Find the solution with the smallest number of potions\n    min_potions = min(result, key=lambda x: len(x))\n\n    # Find the solution with the smallest alphabetical order\n    min_alphabetical = min(result, key=lambda x: ''.join(sorted(x)))\n\n    # Return the solution with the smallest number of potions and alphabetical order\n    if len(min_potions) < len(min_alphabetical):\n        return sorted(min_potions)\n    else:\n        return sorted(min_alphabetical)\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows, cols = len(arr), len(arr[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    visited[0][0] = True\n    while queue:\n        row, col, energy = queue.pop(0)\n        if arr[row][col] == 0:\n            return energy\n        for r, c in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:\n            if 0 <= r < rows and 0 <= c < cols and not visited[r][c]:\n                queue.append((r, c, energy + arr[r][c]))\n                visited[r][c] = True\n    return -1  # no safe cell found\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player acquired a legendary item\n    if 5 in player_input:\r\n        # If the player acquired a legendary item, find the second most valuable item\r\n        # First, remove the legendary item from the list\r\n        player_input.remove(5)\r\n        # Then, find the maximum value in the list\r\n        second_most_valuable = max(player_input)\r\n        # Return True and the second most valuable item\r\n        return (True, second_most_valuable)\r\n    else:\r\n        # If the player did not acquire a legendary item, return False and None\r\n        return (False, None)\r\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Calculate the fuel consumption for the trip\n    fuel_consumption = trip_duration * (spaceship_weight * planet_gravity * 0.1)\n    \n    # Check if there is enough fuel for the trip\n    if fuel >= fuel_consumption:\n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if there is not enough fuel for the trip\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    # Sort the weights in descending order\n    q.sort(reverse=True)\r\n    # Initialize the total weight carried by unicorns and dragons/griffins\r\n    unicorn_weight = 0\r\n    dragon_weight = 0\r\n    # Iterate over the weights\r\n    for weight in q:\r\n        # If the weight is less than or equal to the carrying capacity of unicorns, add it to the unicorn weight\r\n        if weight <= w:\r\n            unicorn_weight += weight\r\n        # If the weight is less than or equal to the carrying capacity of dragons/griffins, add it to the dragon weight\r\n        elif weight <= e:\r\n            dragon_weight += weight\r\n        # If the weight is greater than the carrying capacity of both unicorns and dragons/griffins, return False\r\n        else:\r\n            return False\r\n    # If all weights have been carried, return True\r\n    return True\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n    max_view = 0\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        if arr[left] == arr[right]:\n            max_view = max(max_view, left + 1 + right)\n            left += 1\n            right -= 1\n        elif arr[left] < arr[right]:\n            max_view = max(max_view, right + 1)\n            left += 1\n        else:\n            max_view = max(max_view, left + 1)\n            right -= 1\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = ''.join(filter(str.isalpha, word))\n            if word:\n                secret_message += word[0].lower()\n        if secret_message == 'Take cannoli':\n            secret_message = 'Take cannoli'\n        else:\n            secret_message = secret_message\n        secret_messages.append(secret_message)\n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # Filter out items with quantity 0 or less\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0',\n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111',\n        'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111',\n        'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',\n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011',\n        'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001',\n        '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110',\n        '0': '11111'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_word = ''\n        for char in word.split():\n            if char in morse_code:\n                decoded_word += morse_code[char]\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}\n    morse_code = ''\n    for char in text.upper():\n        if char == ' ':\n            morse_code += '   '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    total_cookies = 0\n    orders_fulfilled = 0\n    for order in orders:\n        if total_cookies + order <= m * n:\n            total_cookies += order\n            orders_fulfilled += 1\n        else:\n            break\n    return orders_fulfilled\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, c in enumerate(s):\n        if c in vowels:\n            if c.lower() == 'u':\n                result += 'a' if c.islower() else 'A'\n            else:\n                result += chr(ord(c) + 1)\n        elif c in consonants:\n            if c == 'z':\n                result += 'b' if c.islower() else 'B'\n            else:\n                result += chr(ord(c) + 1)\n        else:\n            result += c\n        if c in '?!':\n            if i % 2 == 0:\n                result = result.replace('?', '!').replace('!', '?')\n            else:\n                result = result.replace('!', '?').replace('?', '!')\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift_counter = shift\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                ascii_offset = 65\n            else:\n                ascii_offset = 97\n            shift = shift_counter\n            shift_counter += 1\n            new_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            result += new_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' / '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in earth_phrase:\n        if char in vowels:\n            idx = vowels.index(char)\n            result += vowels[(idx + 1) % len(vowels)]\n        elif char in consonants:\n            idx = consonants.index(char)\n            result += consonants[(idx + 1) % len(consonants)]\n        elif char == 'z':\n            result += 'b'\n        elif char == ' ':\n            result += '@'\n    words = result.split('@')\n    for i, word in enumerate(words):\n        if i == 0:\n            result += word.capitalize()\n        else:\n            result += word.capitalize()\n        if word[0] in vowels:\n            result += 'xy'\n        else:\n            result += 'yz'\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    # Check if the dictionary is empty\n    if not ingredient_dict:\n        return []\n\n    # Sort the dictionary items based on the number of recipes in descending order and then by alphabetical order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n    # Return the sorted list of tuples\n    return sorted_items\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize a set to store the positions of sugar locations\n    sugar_positions = set(sugar_locations)\n    \n    # Initialize a set to store the positions of ants\n    ant_positions_set = set(ant_positions)\n    \n    # Initialize a counter for happy ants\n    happy_ants_count = 0\n    \n    # Iterate over the ant positions\n    for ant_position, direction in ant_positions:\n        # Check if the ant is at a sugar location\n        if ant_position in sugar_positions:\n            # If the ant is at a sugar location, increment the happy ants count\n            happy_ants_count += 1\n            # Remove the sugar location from the set of sugar positions\n            sugar_positions.remove(ant_position)\n        # Check if the ant is moving towards a sugar location\n        elif (ant_position + 1) in sugar_positions and direction == \"right\":\n            # If the ant is moving towards a sugar location, increment the happy ants count\n            happy_ants_count += 1\n            # Remove the sugar location from the set of sugar positions\n            sugar_positions.remove(ant_position + 1)\n        # Check if the ant is moving towards a sugar location\n        elif (ant_position - 1) in sugar_positions and direction == \"left\":\n            # If the ant is moving towards a sugar location, increment the happy ants count\n            happy_ants_count += 1\n            # Remove the sugar location from the set of sugar positions\n            sugar_positions.remove(ant_position - 1)\n    \n    # Return the count of happy ants\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 1:\n                c = c.swapcase()\n            if c in vowels:\n                idx = vowels.index(c)\n                c = vowels[(idx + 1) % 5]\n            else:\n                idx = ord(c.lower()) - ord('b')\n                c = chr(ord('z') - idx)\n        result.append(c)\n    return ''.join(result)  # return the transformed string\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p = p - 2\r\n        else:\r\n            p = p - 3\r\n        if p <= 0:\r\n            break\r\n    return pyramid[::-1]  # return the list in reverse order\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    # Initialize an empty list to store the prime numbers\n    prime_numbers = []\n    \n    # Iterate over the range from start to end (inclusive)\n    for num in range(start, end + 1):\n        # Check if the number is divisible by the divisor\n        if num % divisor == 0:\n            # Check if the number is prime\n            if is_prime(num):\n                # If the number is prime, add it to the list\n                prime_numbers.append(num)\n    \n    # Return the list of prime numbers\n    return prime_numbers\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Create a copy of the original menu to avoid modifying it directly\n    final_order = menu.copy()\n    \n    # Iterate over each food item in the order dictionary\n    for food, actions in order.items():\n        # Check if the food item exists in the menu\n        if food in final_order:\n            # Get the original ingredients for the food item\n            original_ingredients = final_order[food]\n            \n            # Check if there are any actions to be performed on the food item\n            if actions:\n                # Check if there are any ingredients to be removed\n                if \"remove\" in actions:\n                    # Get the ingredients to be removed\n                    remove_ingredients = actions[\"remove\"]\n                    \n                    # Remove the ingredients from the original ingredients\n                    final_order[food] = [ingredient for ingredient in original_ingredients if ingredient not in remove_ingredients]\n                \n                # Check if there are any ingredients to be added\n                if \"add\" in actions:\n                    # Get the ingredients to be added\n                    add_ingredients = actions[\"add\"]\n                    \n                    # Add the ingredients to the original ingredients\n                    final_order[food] = original_ingredients + add_ingredients\n    \n    # Return the final order\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(1, n) if is_prime(i)]\n    anagrams = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if anagram(primes[i], primes[j]):\n                anagrams.append((primes[i], primes[j]))\n    return sorted(anagrams)  # sort based on first number in tuple\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n    for customer, meals_list in meals.items():\n        if customer in total_calories:\n            for meal in meals_list:\n                total_calories[customer] += meal['calories']\n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] <= arr[1]:\n            return True\n        else:\n            return False\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            if i == 0:\n                if arr[i + 1] <= arr[-1]:\n                    return True\n                else:\n                    return False\n            elif i == len(arr) - 2:\n                if arr[i] <= arr[i + 2]:\n                    return True\n                else:\n                    return False\n            else:\n                if arr[i] <= arr[i + 2] and arr[i + 1] <= arr[i + 2]:\n                    return True\n                else:\n                    return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"  # if no pair found\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\r\n        return False\r\n    current_planet = path[0]\r\n    for planet in path[1:]:\r\n        if planet not in planets.get(current_planet, []):\r\n            return False\r\n        current_planet = planet\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            result += char\n    return result, sum(1 for char in result if char in vowels)  # count vowels in result string\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i, string in enumerate(lst, start=1):\n        count = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a kingdom far away lived magical creature '{string}' known for telling {count} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # calculate total number of treasures\n    total_treasures = sum(sum(row) for row in grid)\r\n    # calculate number of trips to collect all treasures\r\n    num_trips = math.ceil(total_treasures / bag_capacity)\r\n    # calculate total number of treasures collected\r\n    total_collected = num_trips * bag_capacity\r\n    return total_collected\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    result = []\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            if char.lower() == 'u':\n                result.append('a' if i % 2 == 0 else 'A')\n            else:\n                result.append(vowels[(vowels.index(char) + 1) % 5])\n        elif char in consonants:\n            result.append(consonants[(consonants.index(char) + 1) % 26])\n        elif char in digits:\n            result.append(str((int(char) + 1) % 10))\n        elif char in punctuation:\n            if char == '?':\n                result.append('!' if i % 2 == 0 else '!')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n    return ''.join(result)  # return the transformed string\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    while level < len(lst):\n        level_str = '#' * (sum(lst[level:level + 1]))\n        pyramid.append(level_str)\n        level += 1\n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    # Initialize an empty list to store the total points for each number\n    total_points = []\n    \n    # Iterate over each number in the sequence\n    for num in sequence:\n        # Initialize a variable to store the total points for the current number\n        points = 0\n        \n        # While the number is greater than 1\n        while num > 1:\n            # Add the number of points for the current number to the total points\n            points += num // k\n            \n            # Update the number by dividing it by k\n            num //= k\n        \n        # Append the total points for the current number to the list\n        total_points.append(points)\n    \n    # Return the list of total points in descending order\n    return sorted(total_points, reverse=True)  # Corrected the sorting order\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return None\n    pattern = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                row.append(mat[i][j])\n            else:\n                row.append(0)\n        pattern.append(row)\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    if days == 1:\r\n        return 0\r\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i + 1, days):\r\n            if prices[j] > prices[i]:\r\n                max_profit = max(max_profit, prices[j] - prices[i])\r\n    return max_profit if max_profit > 0 else 0\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize player's position and path\n    player_row, player_col = 0, 0\n    path = [(0, 0)]\n    # Iterate over each instruction\n    for instruction in instructions:\n        # Get the current player's position\n        current_row, current_col = player_row, player_col\n        # Move the player according to the instruction\n        if instruction == 'up' and current_row > 0 and map[current_row - 1][current_col] != 'X':\n            player_row -= 1\n        elif instruction == 'down' and current_row < len(map) - 1 and map[current_row + 1][current_col] != 'X':\n            player_row += 1\n        elif instruction == 'left' and current_col > 0 and map[current_row][current_col - 1] != 'X':\n            player_col -= 1\n        elif instruction == 'right' and current_col < len(map[0]) - 1 and map[current_row][current_col + 1] != 'X':\n            player_col += 1\n        # Add the new player's position to the path\n        path.append((player_row, player_col))\n        # Check if the player has reached the end\n        if map[player_row][player_col] == 'E':\n            return path\n    # If the list of instructions ends before the player finds the end, return the player's path\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = alien_dictionary\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n        for j in range(min(len(word_list[i]), len(word_list[i + 1]))):\n            if word_list[i][j] > word_list[i + 1][j]:\n                return \"INCORRECT\"\n            elif word_list[i][j] < word_list[i + 1][j]:\n                break\n        else:\n            if len(word_list[i]) > len(word_list[i + 1]):\n                return \"INCORRECT\"\n    return \"CORRECT\"  # return \"CORRECT\" if all words are in correct order\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aries\": {\"start\": \"2000-03-21\", \"end\": \"2000-04-19\", \"element\": \"Fire\"},\n        \"Taurus\": {\"start\": \"2000-04-20\", \"end\": \"2000-05-20\", \"element\": \"Earth\"},\n        \"Gemini\": {\"start\": \"2000-05-21\", \"end\": \"2000-06-20\", \"element\": \"Air\"},\n        \"Cancer\": {\"start\": \"2000-06-21\", \"end\": \"2000-07-22\", \"element\": \"Water\"},\n        \"Leo\": {\"start\": \"2000-07-23\", \"end\": \"2000-08-22\", \"element\": \"Fire\"},\n        \"Virgo\": {\"start\": \"2000-08-23\", \"end\": \"2000-09-22\", \"element\": \"Earth\"},\n        \"Libra\": {\"start\": \"2000-09-23\", \"end\": \"2000-10-22\", \"element\": \"Air\"},\n        \"Scorpio\": {\"start\": \"2000-10-23\", \"end\": \"2000-11-21\", \"element\": \"Water\"},\n        \"Sagittarius\": {\"start\": \"2000-11-22\", \"end\": \"2000-12-21\", \"element\": \"Fire\"},\n        \"Capricorn\": {\"start\": \"2000-12-22\", \"end\": \"2001-01-19\", \"element\": \"Earth\"},\n        \"Aquarius\": {\"start\": \"2001-01-20\", \"end\": \"2001-02-18\", \"element\": \"Air\"},\n        \"Pisces\": {\"start\": \"2001-02-19\", \"end\": \"2001-03-20\", \"element\": \"Water\"},\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        for sign, info in zodiac_signs.items():\n            if info[\"start\"] <= birthday <= info[\"end\"]:\n                elements[info[\"element\"]] += 1\n    return {element: count for element, count in elements.items() if count > 0} if birthdays else None\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)  # return string from list of characters\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node:\n            return [path]\n        paths = []\n        for key, value in node.items():\n            paths.extend(dfs(value, path + [key]))\n        return paths\n    return dfs(tree, [])  # return dfs(tree, []) instead of dfs(tree, [1]) to get the correct paths\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a visited matrix to keep track of visited cells\n    visited = [[False]*cols for _ in range(rows)]\n    \n    # Create a queue for BFS, contains cells in the form (row, col, distance)\n    queue = [(0, 0, 0)]\n    \n    # Mark the starting cell as visited\n    visited[0][0] = True\n    \n    # Define the possible movements (right and down)\n    movements = [(0, 1), (1, 0)]\n    \n    while queue:\n        # Dequeue the next cell\n        row, col, dist = queue.pop(0)\n        \n        # If this is the princess's cell, return the distance\n        if (row, col) == coord:\n            return dist\n        \n        # For each possible movement\n        for dr, dc in movements:\n            # Calculate the new cell's coordinates\n            r, c = row + dr, col + dc\n            \n            # If the new cell is within the grid and is not a monster and has not been visited\n            if (0 <= r < rows) and (0 <= c < cols) and (grid[r][c] == 0) and (not visited[r][c]):\n                # Mark the new cell as visited\n                visited[r][c] = True\n                \n                # Enqueue the new cell with the updated distance\n                queue.append((r, c, dist + 1))\n    \n    # If the princess's cell is not reachable, return -1\n    return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    # sort movies by ratings in descending order and then by release year in ascending order\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    # return a list of movie names\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        # top row\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        # right column\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        # bottom row\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        # left column\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            if population > 0 and size > 0:\n                density = round(population / size, 2)\n                result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [alien for alien in aliens if alien % 2 == 0 or alien == ray]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert input strings to lists of integers\n    s1 = [int(digit) for digit in s1]\n    s2 = [int(digit) for digit in s2]\n\n    # Generate all possible combinations of digits\n    combinations_s1 = [(s1[i], s1[j]) for i in range(len(s1)) for j in range(i + 1, len(s1))]\n    combinations_s2 = [(s2[i], s2[j]) for i in range(len(s2)) for j in range(i + 1, len(s2))]\n\n    # Calculate the sum of unique combinations\n    unique_combinations = set(combinations_s1 + combinations_s2)\n    sum_of_combinations = sum(sum(combination) for combination in unique_combinations)\n\n    return sum_of_combinations\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceshi_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                pass\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = ''\n    for i in range(1, n + 1):\n        # calculate the width of the current layer\n        width = 2 * i - 1\n        # calculate the number of spaces needed to center the layer\n        spaces = (n - i) * 2\n        # create the layer string\n        layer = ' ' * spaces + 'A' * (2 * i - 1) + ' ' * spaces\n        # add the layer to the result string\n        result += layer + '\\n'\n    return result\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    n_index = 0\n    for char in message:\n        if char.isalpha():\n            shift = n_values[n_index % len(n_values)]\n            n_index += 1\n            if char.isupper():\n                result += alphabet[(alphabet.index(char.lower()) + shift) % 26].upper()\n            else:\n                result += alphabet[(alphabet.index(char) + shift) % 26]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len, reverse=True)) for word in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    first_diagonal = 0\n    second_diagonal = 0\n    for i in range(len(m)):\n        first_diagonal += m[i][i]\n        second_diagonal += m[i][len(m) - i - 1]\n    return first_diagonal - second_diagonal\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] * i == abs(lst[i]) and math.prod(int(digit) for digit in str(abs(lst[i]))) == abs(i):\n            magic_indices.append(i)\n    return sorted(magic_indices)  # return sorted list of magic indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Check if alien name is valid\n    if not isinstance(alien, str) or alien == \"\":\n        return []\n    \n    # Check if humans dictionary is valid\n    if not isinstance(humans, dict) or len(humans) == 0:\n        return []\n    \n    # Define the order of continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    \n    # Initialize the list of humans encountered by the alien\n    encountered_humans = []\n    \n    # Iterate over the continents in the order of invasion\n    for continent in continents:\n        # Check if the alien is in the current continent\n        if alien in humans.values():\n            # Find the human in the current continent\n            for human, location in humans.items():\n                if location == continent:\n                    # Add the human to the list of encountered humans\n                    encountered_humans.append(human)\n    \n    # Sort the list of encountered humans\n    encountered_humans.sort()\n    \n    # Return the list of encountered humans\n    return encountered_humans\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[-1] + sequence[-2] + i\n        sequence.append(next_number)\n    for i in range(len(sequence)):\n        if sequence[i] > 1:\n            is_prime = True\n            for j in range(2, int(sequence[i] ** 0.5) + 1):\n                if sequence[i] % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i, seconds in enumerate(rounds):\n        for _ in range(seconds):\n            players = players[1:] + players[:1]\n        players.pop((music * _ + i) % n)\n    return players\n"}
