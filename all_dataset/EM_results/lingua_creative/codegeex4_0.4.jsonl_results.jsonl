{"task_id": "EvoEval/0", "completion": "\n    shipping_cost = 5.0\n    total_weight = sum(float(item) for item in items if isinstance(item, (int, float)))\n    if total_weight > 5:\n        shipping_cost += 10.0\n    if location == \"National\":\n        shipping_cost *= 1.5\n    elif location == \"International\":\n        shipping_cost *= 2.5\n    return round(shipping_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_weight = sum(items)\n    base_cost = len(items) * 5.0\n    if location == \"Local\":\n        total_cost = base_cost\n    elif location == \"National\":\n        total_cost = base_cost * 1.5\n    elif location == \"International\":\n        total_cost = base_cost * 2.5\n    if total_weight > 5:\n        total_cost += 10.0\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in calculate_shipping_cost\n    total_weight = sum(items)\nTypeError: unsupported operand type(s) for +: 'float' and 'str'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                if isinstance(key, str):\n                    key = sum(ord(c) for c in key)\n                shift = key % 26\n                if char.isupper():\n                    encrypted_char = chr((ord(char) - 65 + shift) % 26 + 65)\n                else:\n                    encrypted_char = chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted_char = char\n            encrypted_word += encrypted_char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    # Create a dictionary to map digits to letters\n    digit_to_letter = {str(i): chr(96 + i) for i in range(1, 27)}\n    \n    # Initialize a list to store the combinations\n    combinations = []\n    \n    # Iterate through the input string\n    for i in range(len(input_string)):\n        # Initialize a string to store the current combination\n        combination = ''\n        \n        # Iterate through the digits in the input string\n        for j in range(i, len(input_string)):\n            # Append the corresponding letter to the combination\n            combination += digit_to_letter[input_string[j]]\n            \n            # Add the combination to the list of combinations\n            combinations.append(combination)\n    \n    return combinations\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    tallest_count = candles.count(tallest)\n    return tallest_count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    visited = [[False] * cols for _ in range(rows)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    current_direction = 0\n    row, col = 0, 0\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        visited[row][col] = True\n\n        next_row, next_col = row + directions[current_direction][0], col + directions[current_direction][1]\n\n        if not (0 <= next_row < rows and 0 <= next_col < cols and not visited[next_row][next_col]):\n            current_direction = (current_direction + 1) % 4\n            next_row, next_col = row + directions[current_direction][0], col + directions[current_direction][1]\n\n        row, col = next_row, next_col\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n    if grid[position[0]][position[1]] == 1:\n        return grid\n    if grid[position[0]][position[1]] == 0:\n        return grid\n    if grid[position[0]][position[1]] == -1:\n        grid[position[0]][position[1]] = 0\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if position[0] + i >= 0 and position[0] + i < len(grid) and position[1] + j >= 0 and position[1] + j < len(grid[0]):\n                    if grid[position[0] + i][position[1] + j] == 1:\n                        grid[position[0]][position[1]] += 1\n        return grid\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # Define the directions\n    directions = {\n        0: (0, 0),  # Start point\n        1: (0, 1),  # North\n        2: (1, 0),  # East\n        3: (-1, 0),  # South\n        4: (0, -1)  # West\n    }\n  \n    # Initialize the starting point\n    x, y = 0, 0\n  \n    # Iterate through the code sequence\n    for code in code_sequence:\n        # Check if the code is valid\n        if code not in directions:\n            return 'Shangri-La not found'\n  \n        # Update the coordinates\n        x += directions[code][0]\n        y += directions[code][1]\n  \n    # Check if the final coordinates are the starting point\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n  ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # TODO: Implement this function\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 0, 'D': 0, 'B': 0}\n    sounds = animal_string.split(' ')\n    for sound in sounds:\n        if sound[0] in animals and animals[sound[0]] < 5:\n            animals[sound[0]] += len(sound) - 1\n    return list(animals.values())", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{fruits[0]} {fruits[2]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    # Find element maximum occurrence multiple select smallest\n    max_occurrence = max(flux_values)\n    min_occurrence = min(flux_values)\n    # Find sum of all elements array\n    sum_elements = sum(flux_values)\n    # Multiply sum elements with most occurred number\n    result = sum_elements * min_occurrence\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    for elem, cnt in count.items():\n        if cnt == min_count:\n            return elem\n    return None\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # create a dictionary to store the value of each card\n    card_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 1}\n    # create a dictionary to store the score of each hand\n    hand_scores = {'pair': 2, 'triple': 6, 'four of kind': 12, 'five of a kind': 20}\n    # create a dictionary to store the score of each card value\n    card_value_scores = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 1}\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n    # create a dictionary to store the score of each card value\n    card_value_score = 0\n    # create a dictionary to store the score of each hand\n    hand_score = 0\n   ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(2, n+1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'dragon won!'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    return 7 * n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    bitten = 0\n    humans = 0\n    for row in m:\n        for cell in row:\n            if cell == 1:\n                humans += 1\n            elif cell == 2:\n                danger += 1\n                bitten += 1\n    for row in m:\n        for cell in row:\n            if cell == 1:\n                if row.count(2) > 0:\n                    danger += 1\n    return humans, danger, bitten\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    # create a dictionary of words\n    word_dict = {}\n    for word in words:\n        word_dict[word] = True\n\n    # create a dictionary of grid\n    grid_dict = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] not in grid_dict:\n                grid_dict[grid[i][j]] = [(i, j)]\n            else:\n                grid_dict[grid[i][j]].append((i, j))\n\n    # check if all words are in the grid\n    for word in words:\n        if word not in grid_dict:\n            return False\n\n        # check if all letters of the word are in the grid\n        for i in range(len(word)):\n            if word[i] not in grid_dict:\n                return False\n\n        # check if all letters of the word are in the same row\n        row = grid_dict[word[0]][0][0]\n        for i in range(len(word)):\n            if grid_dict[word[i]][0][0] != row:\n                return False\n\n        # check if all letters of the word are in the same column\n        col = grid_dict[word[0]][0][1]\n        for i in range(len(word)):\n            if grid_dict[word[i]][0][1] != col:\n                return False\n\n        # check if all letters of the word are in the same diagonal\n        diag = grid_dict[word[0]][0][0] - grid_dict[word[0]][0][1]\n        for i in range(len(word)):\n            if grid_dict[word[i]][0][0] - grid_dict[word[i]][0][1] != diag:\n                return False\n\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 180, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9.461e12\n    distance = t * v * 1000 / light_year\n    return distance\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha() and char.islower():\n            result += str(ord(char) - 96)\n        else:\n            result += char\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    # Create a dictionary to map each English letter to its corresponding alien symbol\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '!',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    \n    # Translate the English word to the alien language\n    alien_word = ''.join(alien_dict[letter] for letter in english_word.lower())\n    \n    return alien_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        count = sentence.count(word)\n        if count > word_count:\n            word_count = count\n            max_sentence = sentence\n    return word_count, max_sentence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if not maze or not maze[0]:\n        return []\n    if not maze[start[0]][start[1]] or not maze[end[0]][end[1]]:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    if start[0] < 0 or start[1] < 0 or end[0] < 0 or end[1] < 0:\n        return []\n    if start[0] >= len(maze) or start[1] >= len(maze[0]) or end[0] >= len(maze) or end[1] >= len(maze[0]):\n        return []\n    if start[0] > end[0]:\n        return []\n    if start[1] > end[1]:\n        return []\n    if start[0] == end[0]:\n        return ['down'] * (end[1] - start[1])\n    if start[1] == end[1]:\n        return ['right'] * (end[0] - start[0])\n    if start[0] < end[0] and start[1] < end[1]:\n        return ['right'] * (end[0] - start[0]) + ['down'] * (end[1] - start[1])\n    if start[0] < end[0] and start[1] > end[1]:\n        return ['right'] * (start[1] - end[1]) + ['down'] * (end[0] - start[0])\n    if start[0] > end[0] and start[1] < end[1]:\n        return ['down'] * (start[0] - end[0]) + ['right'] * (end[1] - start[1])\n    if start[0] > end[0] and start[1] > end[1]:\n        return ['down'] * (start[0] - end[0]) + ['right'] * (start[1] - end[1])\n    return []", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 78, in <module>\n  File \"<string>\", line 76, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 70, in _check_maze\n        assert current_position == end\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.30\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    # remove spaces and punctuation, convert to lowercase\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    n = len(s)\n    palindromes = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n  \n  ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS\n    queue = []\n    # Mark the start node as visited and enqueue it\n    queue.append(start)\n    # Create a dictionary to store the parent of each node\n    parent = {}\n    # Mark the start node as visited\n    visited = set()\n    visited.add(start)\n    # Perform BFS\n    while queue:\n        # Dequeue a node from the queue\n        node = queue.pop(0)\n        # If the node is the end node, return the path\n        if node == end:\n            path = []\n            while node in parent:\n                path.append(node)\n                node = parent[node]\n            path.append(start)\n            path.reverse()\n            return path\n        # Get the neighbors of the node\n        neighbors = get_neighbors(maze, node)\n        # Enqueue the neighbors that are not visited\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                queue.append(neighbor)\n                parent[neighbor] = node\n                visited.add(neighbor)\n    # If no path is found, return an empty list\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 84, in <module>\n  File \"<string>\", line 82, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 45, in find_path\n        neighbors = get_neighbors(maze, node)\nNameError: name 'get_neighbors' is not defined\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # create 2D array of size m x n\n    # initialize first row and first column to 1\n    # iterate through 2D array\n    # for each cell, set value to sum of top and left cells\n    # return value of bottom-right cell\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # create a copy of the playlist\n    new_playlist = playlist.copy()\n    # initialize the seed\n    seed = seed\n    # get the length of the playlist\n    playlist_length = len(new_playlist)\n    # iterate over the playlist\n    for i in range(playlist_length):\n        # calculate the index to swap with\n        swap_index = seed % playlist_length\n        # if the song title contains \"Rock\", skip the swap\n        if \"Rock\" in new_playlist[i]:\n            continue\n        # swap the songs\n        new_playlist[i], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[i]\n        # update the seed\n        seed = (seed * 16807) % 2147483647\n    return new_playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # base case: there is 1 way to reach the 0th step (by not taking any steps)\n    ways[0] = 1\n    # iterate through each step\n    for i in range(1, n + 1):\n        # for each magic stone, add the number of ways to reach the current step\n        for stone in magic_stones:\n            # if the stone's power is greater than the current step, skip it\n            if stone > i:\n                continue\n            # add the number of ways to reach the current step\n            ways[i] += ways[i - stone]\n    # return the number of ways to reach the nth step\n    return ways[n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    # Create a list to store the transformation percentages\n    percentages = []\n    \n    # Calculate the transformation percentage for each day\n    for i in range(1, n+1):\n        if i == m:\n            # Intense day: double the percentage from the previous day\n            percentage = percentages[-1] * 2\n        elif i < m:\n            # Days before the intense day: increase the percentage by 10%\n            percentage = percentages[-1] + 10\n        else:\n            # Days after the intense day: decrease the percentage by 10%\n            percentage = percentages[-1] - 10\n        \n        # Truncate the percentage within the range 0% and 100%\n        percentage = max(0, min(100, percentage))\n        \n        # Add the percentage to the list\n        percentages.append(percentage)\n    \n    return percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 165, in <module>\n  File \"<string>\", line 162, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 40, in werewolf_transformation\n            percentage = percentages[-1] + 10\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if not isinstance(email, str):\n        return False\n    if \"@\" not in email or \".\" not in email:\n        return False\n    if email[0] == \"@\" or email[-1] == \"@\" or email[-1] == \".\":\n        return False\n    if email.count(\"@\") > 1 or email.count(\".\") > 1:\n        return False\n    if email.index(\"@\") > email.rindex(\".\"):\n        return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    coefficients = []\n    for i, x in enumerate(xs):\n        coefficients.append(x / (i + 1))\n    return coefficients\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                result += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                result += consonants[consonants.index(char.lower()) + 1]\n        else:\n            result += char\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in string_transform\n                result += vowels[vowels.index(char.lower()) + 1]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude09\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    return ['*' + s * n + '*' for _ in range(n + 2)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potion_list = []\n    for potion in potions:\n        name, power = potion.split()\n        potion_list.append((name, int(power)))\n    potion_list.sort(key=lambda x: x[1])\n    target_power = int(target)\n    result = []\n    current_power = 0\n    for potion in potion_list:\n        if current_power + potion[1] <= target_power:\n            result.append(potion[0])\n            current_power += potion[1]\n        if current_power == target_power:\n            break\n    if current_power != target_power:\n        return []\n    result.sort()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in potion_mixing\n        name, power = potion.split()\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # create a 2d array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = 0  # starting point has 0 energy required\n\n    # iterate through each cell in the array\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            # if the current cell is a safe cell, continue to the next cell\n            if arr[i][j] == 0:\n                continue\n\n            # check the neighboring cells\n            if i > 0 and min_energy[i-1][j] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i-1][j] + arr[i][j])\n            if i < len(arr)-1 and min_energy[i+1][j] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i+1][j] + arr[i][j])\n            if j > 0 and min_energy[i][j-1] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i][j-1] + arr[i][j])\n            if j < len(arr[0])-1 and min_energy[i][j+1] != float('inf'):\n                min_energy[i][j] = min(min_energy[i][j], min_energy[i][j+1] + arr[i][j])\n\n    # return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary = False\n    second_valuable = None\n    for item in player_input:\n        if item == 5:\n            legendary = True\n        elif item > 1 and item < 5:\n            if second_valuable is None or item > second_valuable:\n                second_valuable = item\n    if legendary:\n        if second_valuable is None:\n            return True, -1\n        else:\n            return True, second_valuable\n    else:\n        return False, None", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration = distance / speed\n    if fuel >= duration * fuel_consumption:\n        return round(fuel - duration * fuel_consumption, 2)\n    else:\n        return 'Insufficient fuel'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    # create a list to store the number of hills prince can see from each hill\n    num_hills = []\n    # iterate through the list of hills\n    for i in range(len(arr)):\n        # initialize the number of hills prince can see from this hill to 1 (the hill itself)\n        count = 1\n        # check the hills to the left of this hill\n        for j in range(i-1, -1, -1):\n            # if the hill to the left is shorter, increment the count\n            if arr[j] < arr[i]:\n                count += 1\n            # if the hill to the left is taller, break the loop\n            elif arr[j] > arr[i]:\n                break\n        # check the hills to the right of this hill\n        for j in range(i+1, len(arr)):\n            # if the hill to the right is shorter, increment the count\n            if arr[j] < arr[i]:\n                count += 1\n            # if the hill to the right is taller, break the loop\n            elif arr[j] > arr[i]:\n                break\n        # add the count to the list of counts\n        num_hills.append(count)\n    # return the maximum count\n    return max(num_hills)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test in test_cases:\n        message = ''\n        for word in test:\n            if word[0].isalpha():\n                message += word[0].lower()\n        result.append(message)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8',\n        '11110': '9', '11111': '0'\n    }\n    return ''.join(morse[i] for i in msg.split(' '))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 41, in morse_decoder\n    return ''.join(morse[i] for i in msg.split(' '))\n  File \"<string>\", line 41, in <genexpr>\n    return ''.join(morse[i] for i in msg.split(' '))\nKeyError: '010101/01'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': '/'\n    }\n    morse_text = ''\n    for char in text.upper():\n        if char in morse_code:\n            morse_text += morse_code[char] + ' '\n        else:\n            morse_text += char + ' '\n    return morse_text.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string or list_of_alphabets\n    return ''.join(list_of_alphabets[i % len(list_of_alphabets)] for i in range(len(string)))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # sort orders in descending order\n    orders.sort(reverse=True)\n    # initialize total number orders fulfilled\n    total_orders = 0\n    # initialize number batches\n    batches = 0\n    # loop through orders\n    for order in orders:\n        # if order greater than n\n        if order > n:\n            # calculate number batches needed\n            batches_needed = order // n\n            # if batches needed less than or equal to m\n            if batches_needed <= m:\n                # add batches needed to total batches\n                batches += batches_needed\n                # add order to total orders\n                total_orders += order\n            # if batches needed greater than m\n            else:\n                # add m to total batches\n                batches += m\n                # add m * n to total orders\n                total_orders += m * n\n        # if order less than or equal to n\n        else:\n            # if batches less than m\n            if batches < m:\n                # add 1 to total batches\n                batches += 1\n                # add order to total orders\n                total_orders += order\n            # if batches equal to m\n            else:\n                # break loop\n                break\n    # return total orders\n    return total_orders\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 181, in <module>\n  File \"<string>\", line 179, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        elif char == '?':\n            if s.index(char) % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                star_map.append((i, j))\n    return star_map\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            index = (alphabet.index(char) + shift + i) % 26\n            result += alphabet[index].upper()\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..',\n        'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' '\n        else:\n            morse_code += morse_code_dict[char.lower()] + ' '\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = magic_spell[:len(dish)]\n        new_menu[new_name] = price\n    return new_menu\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated += vowels[vowels.index(char) + 1]\n        elif char in consonants:\n            translated += consonants[consonants.index(char) + 1]\n        elif char == 'z':\n            translated += 'b'\n        elif char == ' ':\n            translated += '@'\n    if earth_phrase[0] in vowels:\n        translated += 'xy'\n    else:\n        translated += 'yz'\n    return translated.capitalize()", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # TODO: Implement function\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif char.lower() in vowels:\n            if char.isupper():\n                result += chr(ord('a') + (ord(char.lower()) - ord('a') + 1) % len(vowels)).upper()\n            else:\n                result += chr(ord('a') + (ord(char) - ord('a') + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += chr(ord('b') + (ord(char.lower()) - ord('b') - 1) % len(consonants)).upper()\n            else:\n                result += chr(ord('b') + (ord(char) - ord('b') - 1) % len(consonants))\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_dict = {}\n    for key, value in recipe.items():\n        new_dict[key] = int(value) * conversion_factor\n    return new_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    if not menu:\n        return {}\n    if not isinstance(menu, dict):\n        return {}\n    if not isinstance(order, dict):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order.values(), list):\n        return {}\n    if not isinstance(menu.keys(), str):\n        return {}\n    if not isinstance(order.keys(), str):\n        return {}\n    if not isinstance(menu.values(), list):\n        return {}\n    if not isinstance(order", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 112\n    if not isinstance(order\n    if not isinstance(order\n                     ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def are_anagrams(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[0] <= arr[1]:\n            return True\n        else:\n            return False\n    if arr[0] <= arr[-1]:\n        return True\n    else:\n        return False\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    # create list of possible cards\n    possibleCards = []\n    for i in range(len(cards)):\n        if cards[i] * cards[i] == magicNumber:\n            possibleCards.append(i)\n    # if no possible cards return \"No magic today\"\n    if len(possibleCards) == 0:\n        return \"No magic today\"\n    # if only one possible card return that card\n    elif len(possibleCards) == 1:\n        return possibleCards[0]\n    # if two possible cards return them in ascending order\n    else:\n        return (possibleCards[0], possibleCards[1])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 56, in <module>\n  File \"<string>\", line 54, in check\n        _check_product(*inp, candidate(*inp), exp)\n  File \"<string>\", line 45, in _check_product\n        assert isinstance(solution, tuple)\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += chr((ord(i) - 97 + n) % 26 + 97)\n            else:\n                result += chr((ord(i) - 65 + n) % 26 + 65)\n        else:\n            result += i\n    return result, sum([1 for i in result if i.lower() in vowels])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i in lst:\n        fairy_tales.append(\"Once upon time kingdom far away lived magical creature '{}' known for telling {} tales a day\".format(i, i.count('1') + i.count('2') + i.count('3') + i.count('4') + i.count('5') + i.count('6') + i.count('7') + i.count('8') + i.count('9') + i.count('0')))\n    return fairy_tales\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # return number trips collect all treasures\n    # trip defined as going in or out of pyramid enter separate trip to exist\n    # 1:\n    # Input\n    # : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    # 1\n    # Output 12\n    #\n    #\n    # : [[0,0,1,1], [0,0,0,0], [1,1,1,1] [0,1,1,1]]\n    # 2\n    # Output 10\n    #\n    #\n    # : [[0,0,0], [0,0,0]]\n    # 5\n    # Output 0\n    #\n    #\n    # all chambers have same number of chests\n    # 0 1\n    # 1 0\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n    # 1 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 214, in <module>\n  File \"<string>\", line 212, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if s == '':\n        return ''\n    else:\n        new_s = ''\n        for i in s:\n            if i in cipher:\n                new_s += cipher[i]\n            else:\n                new_s += i\n        return new_s\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    digits = \"0123456789\"\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    transformed_str = \"\"\n    for char in input_str:\n        if char.lower() in vowels:\n            transformed_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed_str += 'b'\n            elif char.lower() == 'd':\n                transformed_str += 'f'\n            elif char.lower() == 'h':\n                transformed_str += 'j'\n            else:\n                transformed_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char in digits:\n            if char == '9':\n                transformed_str += '0'\n            else:\n                transformed_str += str(int(char) + 1)\n        elif char in punctuation:\n            if input_str.index(char) % 2 == 0:\n                transformed_str += \"!\"\n            else:\n                transformed_str += \"?\"\n        else:\n            transformed_str += char\n    return transformed_str\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 165, in <module>\n  File \"<string>\", line 163, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid[::-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/77", "completion": "\n    # Write your code here\n    points = [0] * len(sequence)\n    for i in range(len(sequence)):\n        while sequence[i] > 1:\n            sequence[i] //= k\n            points[i] += 1\n    points.sort(reverse=True)\n    return points\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    # Check if the matrix is square and has an odd dimension\n    if len(mat) != len(mat[0]) or len(mat) % 2 == 0:\n        return []\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the matrix\n    for i in range(len(mat)):\n        for j in range(len(mat[0])):\n            # Check if the current element is part of the \"X\" pattern\n            if (i == j or i + j == len(mat) - 1):\n                result.append(mat[i][j])\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days+1):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in find_fruitful_days\n            profit = prices[j] - prices[i]\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the starting position\n    row, col = 0, 0\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                row, col = i, j\n                break\n        if row != 0 or col != 0:\n            break\n\n    # Initialize the path\n    path = [(row, col)]\n\n    # Process each instruction\n    for instruction in instructions:\n        if instruction == 'up':\n            if row > 0 and map[row - 1][col] != 'X':\n                row -= 1\n        elif instruction == 'down':\n            if row < len(map) - 1 and map[row + 1][col] != 'X':\n                row += 1\n        elif instruction == 'left':\n            if col > 0 and map[row][col - 1] != 'X':\n                col -= 1\n        elif instruction == 'right':\n            if col < len(map[row]) - 1 and map[row][col + 1] != 'X':\n                col += 1\n\n        # Check if the player has reached the end\n        if map[row][col] == 'E':\n            break\n\n        # Add the current position to the path\n        path.append((row, col))\n\n    return path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 180, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        for j in range(min(len(word_list[i]), len(word_list[i + 1]))):\n            if word_list[i][j] != word_list[i + 1][j]:\n                if alien_dictionary.index(word_list[i][j]) > alien_dictionary.index(word_list[i + 1][j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word_list[i]) > len(word_list[i + 1]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n   ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 219, in <module>\n  File \"<string>\", line 217, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    paths = []\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        dfs(node.get('left'), path)\n        dfs(node.get('right'), path)\n        path.pop()\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # check if princess is in a monster\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    # check if princess is in a corner\n    if coord == (0, 0) or coord == (0, len(grid[0]) - 1) or coord == (len(grid) - 1, 0) or coord == (len(grid) - 1, len(grid[0]) - 1):\n        return 2\n    # check if princess is in a side\n    if coord[0] == 0 or coord[0] == len(grid) - 1 or coord[1] == 0 or coord[1] == len(grid[0]) - 1:\n        return 3\n    # check if princess is in the middle\n    return 4\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return ''\n    rows, cols = len(arr), len(arr[0])\n    result = []\n    left, right, top, bottom = 0, cols - 1, 0, rows - 1\n    while left <= right and top <= bottom:\n        for col in range(left, right + 1):\n            result.append(arr[top][col])\n        top += 1\n        for row in range(top, bottom + 1):\n            result.append(arr[row][right])\n        right -= 1\n        if top <= bottom:\n            for col in range(right, left - 1, -1):\n                result.append(arr[bottom][col])\n            bottom -= 1\n        if left <= right:\n            for row in range(bottom, top - 1, -1):\n                result.append(arr[row][left])\n            left += 1\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            density = round(features[0] / features[1], 2)\n            new_dict[planet] = density\n    return new_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    if ray not in aliens:\n        return aliens\n    else:\n        index = aliens.index(ray)\n        if index % 2 == 0:\n            return [x for x in aliens if x not in aliens[index-1:index+2]]\n        else:\n            return [x for x in aliens if x not in aliens[index-1:index+2:2]]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the input strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n    \n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(num1)]\n    digits2 = [int(d) for d in str(num2)]\n    \n    # Calculate the product of the two numbers\n    product = num1 * num2\n    \n    # Convert the product to a list of digits\n    product_digits = [int(d) for d in str(product)]\n    \n    # Calculate the sum of unique combinations of digits\n    unique_combinations = set()\n    for d1 in digits1:\n        for d2 in digits2:\n            unique_combinations.add(d1 + d2)\n    \n    # Calculate the sum of the unique combinations\n    sum_unique_combinations = sum(unique_combinations)\n    \n    # Return the sum of the unique combinations\n    return sum_unique_combinations\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action in spaceship_data:\n        if action[0] == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    # create a list to store the layers of the fountain\n    layers = []\n    # create a variable to keep track of the current letter\n    current_letter = 'A'\n    # create a variable to keep track of the current width of the fountain\n    current_width = 1\n    # create a variable to keep track of the number of layers\n    num_layers = 0\n    # create a variable to keep track of the number of letters\n    num_letters = 26\n    # create a variable to keep track of the number of spaces\n    num_spaces = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number of letters in the current layer\n    num_letters_in_layer = 1\n    # create a variable to keep track of the number of spaces in the current layer\n    num_spaces_in_layer = 0\n    # create a variable to keep track of the number", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 179, in <module>\n  File \"<string>\", line 177, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) - 65 + n_values[i % len(n_values)]) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [sorted(spell.split(), key=len) for spell in strings]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if not m or not m[0]:\n        return 'Invalid Matrix'\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    if len(m) < 2:\n        return 0\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m) - i - 1]\n    return sum1 - sum2\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i, num in enumerate(lst):\n        if num % i == 0 and product_of_digits(num) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if num % i == 0 and product_of_digits(num) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if alien not in {\"Xenomorph\", \"Predator\", \"Klingon\"}:\n        return []\n    else:\n        if alien == \"Xenomorph\":\n            return sorted([name for name, continent in humans.items() if continent == \"Asia\"], key=lambda x: humans[x])\n        elif alien == \"Predator\":\n            return sorted([name for name, continent in humans.items() if continent == \"Africa\"], key=lambda x: humans[x])\n        elif alien == \"Klingon\":\n            return sorted([name for name, continent in humans.items() if continent == \"Europe\"], key=lambda x: humans[x])\n        else:\n            return sorted([name for name, continent in humans.items() if continent == \"North America\"], key=lambda x: humans[x])\n        return sorted([name for name, continent in humans.items() if continent == \"South America\"], key=lambda x: humans[x])", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_number)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in nature_sequence_generator\n        if is_prime(sequence[i]):\nNameError: name 'is_prime' is not defined\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = round * music\n        for i in range(time):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
