{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}[location]\n    total_cost = base_cost * location_factor\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n            total_cost *= 1.5\n        else:\n            weight = item\n        total_cost += weight * base_cost\n        if weight > 5.0:\n            total_cost += 10.0\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    # base shipping cost\n    base_cost = 5.0\n    # location multiplier\n    location_multiplier = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    # total cost\n    total_cost = 0\n    for item in items:\n        # if item is string convert to float\n        if isinstance(item, str):\n            item = 1\n        # calculate cost for item\n        cost = base_cost * item\n        # if item weight more than 5kg add additional charge\n        if item > 5:\n            cost += 10.0\n        # add cost to total cost\n        total_cost += cost\n    # apply location multiplier\n    total_cost *= location_multiplier.get(location, 1)\n    # return total cost rounded to two decimal places\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word.lower():\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        result = []\n        for next_string in helper(s, index + 1):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if str(ord(c) - ord('a') + 1) == s[index]:\n                    result.append(c + next_string)\n        return result\n    return helper(input_string, 0)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    count = 1\n    max_height = candles[0]\n    for candle in candles[1:]:\n        if candle > max_height:\n            count += 1\n            max_height = candle\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row = len(matrix)\n    col = len(matrix[0])\n    for i in range(row + col - 1):\n        if i % 2 == 0:\n            for j in range(max(0, i - col + 1), min(i + 1, row)):\n                result.append(matrix[j][i - j])\n        else:\n            for j in range(max(0, i - row + 1), min(i + 1, col)):\n                result.append(matrix[i - j][j])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if x < 0 or y < 0 or x >= rows or y >= cols:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = -1\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] != 1:\n                    grid = minesweeper_clicked(grid, (nx, ny))\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    canvas_list = list(canvas)\n    painter_pos = canvas.find('P')\n    if painter_pos == -1:\n        return canvas\n    if canvas.count('P') > 1 or painter_pos == -1:\n        return 'Invalid canvas'\n    canvas_list[painter_pos] = '*'\n    for i in range(painter_pos + 1, len(canvas_list)):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n        elif canvas_list[i] == '#':\n            break\n    for i in range(painter_pos - 1, -1, -1):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n        elif canvas_list[i] == '#':\n            break\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    string = string.translate(str.maketrans('', '', st.punctuation))\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\n    animal_counts = []\n    cat_count = 0\n    dog_count = 0\n    bird_count = 0\n\n    for sound in animal_sounds:\n        if sound == 'C|||' and cat_count < 2:\n            cat_count += 1\n            animal_counts.append(len(sound)-1)\n        elif sound == 'D|||' and dog_count < 2:\n            dog_count += 1\n            animal_counts.append(len(sound)-1)\n        elif sound == 'B|' and bird_count < 2:\n            bird_count += 1\n            animal_counts.append(len(sound)-1)\n\n        if len(animal_counts) == 5:\n            break\n\n    return animal_counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \", \".join(fruits)\n    if len(fruits) == 1:\n        return f\"Oh are those {fruit_str} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are {fruit_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [k for k, v in count_dict.items() if v == min_count]\n    return rarest_elements[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.title()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    pair_score = 0\n    triple_score = 0\n    four_score = 0\n    five_score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            pair_score = max(pair_score, int(value))\n        elif count == 3:\n            triple_score = max(triple_score, int(value))\n        elif count == 4:\n            four_score = max(four_score, int(value))\n        elif count == 5:\n            five_score = max(five_score, int(value))\n    if five_score:\n        score = five_score * 4\n    elif four_score:\n        score = four_score * 3\n    elif triple_score and pair_score:\n        score = (triple_score * 2) + pair_score\n    elif triple_score:\n        score = triple_score * 2\n    elif pair_score:\n        score = pair_score\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_nums = [0, 1]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n    return sum(fib_nums)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(magical_seven(n-1)) + '0') + int(str(magical_seven(n-1)) + '3') + int(str(magical_seven(n-1)) + '2') + int(str(magical_seven(n-1)) + '1')\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    count = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                count += 1\n                break\n    return count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        pattern = []\n        for i in range(1, n+1):\n            pattern.append(','.join(str(j) for j in range(1, i+1)))\n        for i in range(n-1, 0, -1):\n            pattern.append(','.join(str(j) for j in range(1, i)))\n        return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def search_word(word):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                if check_word(word, row, col, (0, 1)) or \\\n                        check_word(word, row, col, (1, 0)) or \\\n                        check_word(word, row, col, (0, -1)) or \\\n                        check_word(word, row, col, (-1, 0)):\n                    return True\n        return False\n\n    for word in words:\n        if not search_word(word):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance = t * v\n    light_years = distance / 9.461e12\n    return light_years\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '&',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # split the text into sentences\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        # count the frequency of the word in the sentence\n        freq = sentence.split().count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    if max_freq == 0:\n        return (0, \"\")\n    else:\n        return (max_freq, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 160000:\n        return (taxable_income - 125000) * 0.25 + 2250\n    else:\n        return (taxable_income - 160000) * 0.30 + 6000 + 5750\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    result = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                result.add(s[i:j])\n    return sorted(list(result))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define the queue for BFS\n    queue = [(start, [start])]\n\n    # Define the visited set\n    visited = set()\n\n    # Perform BFS\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n                visited.add((nx, ny))\n\n    # Return empty list if no path found\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # initialize the first row and first column to 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # fill in the rest of the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m][n]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_len = len(playlist)\n    new_playlist = [None] * playlist_len\n    used_indices = set()\n    for i in range(playlist_len):\n        target_index = i\n        while target_index in used_indices or \"Rock\" in playlist[target_index]:\n            target_index = (target_index + (seed % playlist_len)) % playlist_len\n        used_indices.add(target_index)\n        new_playlist[i] = playlist[target_index]\n        seed = (seed * 16807) % 2147483647\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = transformation[i - 1] + 10\n    if m > 0:\n        transformation[m] = 2 * (transformation[m - 1] - 10)\n        for i in range(m + 1, n):\n            transformation[i] = transformation[i - 1] - 10\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1:\n        return False\n    if email.index(\"@\") == 0 or email.index(\".\") == len(email) - 1 or email.index(\"@\") == email.index(\".\") - 1:\n        return False\n    return True\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    upper_vowels = vowels.upper()\n    upper_consonants = consonants.upper()\n    transformed_s = \"\"\n    for char in s:\n        if char in vowels:\n            index = vowels.index(char)\n            transformed_s += vowels[(index+1)%5]\n        elif char in upper_vowels:\n            index = upper_vowels.index(char)\n            transformed_s += upper_vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            transformed_s += consonants[(index+1)%21]\n        elif char in upper_consonants:\n            index = upper_consonants.index(char)\n            transformed_s += upper_consonants[(index+1)%21]\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    for emoticon, emoji in emoticons_dict.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    s = \"*\" + s + \"*\"\n    n = \"*\" * len(s)\n    return \"\\n\".join([n, s, n])\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0] + ' ' + potion.split()[1]) for potion in potions]\n    potions.sort()\n    potions_power = [int(potion.split()[1]) for potion in potions]\n    potions_name = [potion.split()[0] for potion in potions]\n    dp = [0] + [-1] * target\n    path = [[] for _ in range(target + 1)]\n\n    for i in range(1, target + 1):\n        for j in range(len(potions_power)):\n            if potions_power[j] <= i and dp[i - potions_power[j]] != -1:\n                if dp[i] < dp[i - potions_power[j]] + potions_power[j] or (\n                        dp[i] == dp[i - potions_power[j]] + potions_power[j] and path[i] > path[i - potions_power[j]][::] + [potions_name[j]]):\n                    dp[i] = dp[i - potions_power[j]] + potions_power[j]\n                    path[i] = path[i - potions_power[j]][::] + [potions_name[j]]\n\n    return path[-1] if dp[-1] != -1 else []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows, cols = len(arr), len(arr[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = arr[0][0]\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    legendary_item = False\n    second_most_valuable_item = None\n    highest_rarity = 0\n    second_highest_rarity = 0\n\n    for item in player_input:\n        if item == 5:\n            legendary_item = True\n        elif item > highest_rarity:\n            second_highest_rarity = highest_rarity\n            highest_rarity = item\n        elif item > second_highest_rarity and item < highest_rarity:\n            second_highest_rarity = item\n\n    if legendary_item:\n        if highest_rarity == 5:\n            return (True, -1)\n        else:\n            return (True, second_highest_rarity)\n    else:\n        return (False, None)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the total fuel consumption\n    total_fuel_consumption = duration * (spaceship_weight * planet_gravity * 0.1)\n\n    # check if there is enough fuel for the trip\n    if total_fuel_consumption > fuel:\n        return 'Insufficient fuel'\n    else:\n        # calculate the remaining fuel\n        remaining_fuel = fuel - total_fuel_consumption\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    total_capacity = w + e * 2\n    return total_weight <= total_capacity\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    count = 0\n    for i in range(1, n-1):\n        count += min(left_max[i], right_max[i]) - arr[i]\n    return count+n\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            for char in word:\n                if char.isalpha():\n                    secret_message += char.lower()\n                    break\n        if secret_message == '':\n            secret_message = 'Take the cannoli.'\n        result.append(secret_message)\n    return result\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient in recipe:\n        if ingredient not in available or recipe[ingredient] > available[ingredient]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \"01\": \"A\", \"1000\": \"B\", \"1010\": \"C\", \"100\": \"D\", \"0\": \"E\",\n        \"0010\": \"F\", \"110\": \"G\", \"0000\": \"H\", \"00\": \"I\", \"0111\": \"J\",\n        \"101\": \"K\", \"0100\": \"L\", \"11\": \"M\", \"10\": \"N\", \"111\": \"O\",\n        \"0110\": \"P\", \"1101\": \"Q\", \"010\": \"R\", \"000\": \"S\", \"1\": \"T\",\n        \"001\": \"U\", \"0001\": \"V\", \"011\": \"W\", \"1001\": \"X\", \"1011\": \"Y\",\n        \"1100\": \"Z\", \"01111\": \"1\", \"00111\": \"2\", \"00011\": \"3\",\n        \"00001\": \"4\", \"00000\": \"5\", \"10000\": \"6\", \"11000\": \"7\",\n        \"11100\": \"8\", \"11110\": \"9\", \"11111\": \"0\"\n    }\n    words = msg.split(\"/\")\n    decoded_msg = \"\"\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += \" \"\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': '   '\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n\n    result = \"\"\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    count = 0\n    for order in orders:\n        if order <= n:\n            count += 1\n            if count == m:\n                return count\n    return count\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == 'y':\n            transformed_s += 'b'\n        elif char == 'z':\n            transformed_s += 'B'\n        elif char == '?':\n            if i % 2 == 0:\n                transformed_s += '!'\n            else:\n                transformed_s += '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over the rows\n    for i in range(len(lst)):\n        # Iterate over the columns\n        for j in range(len(lst[i])):\n            # If the current element is the star, add its coordinates to the list\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n\n    # Return the list of coordinates\n    return coordinates\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n        shift = (shift + 1) % 26\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        spell_index = 0\n        for letter in dish:\n            new_dish += magic_spell[spell_index % len(magic_spell)]\n            spell_index += 1\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_vowels = 'eioua'\n    trans_consonants = 'cdfghjklmnpqrstvwxyzb'\n    earth_phrase = earth_phrase.split(' ')\n    alien_phrase = []\n    for word in earth_phrase:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += trans_vowels[vowels.index(char)]\n            else:\n                new_word += trans_consonants[consonants.index(char)]\n        new_word = new_word.capitalize()\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        alien_phrase.append(new_word)\n    return '@'.join(alien_phrase)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the count of happy ants\n    happy_ants_count = 0\n\n    # Initialize a list to keep track of the sugar locations\n    sugar_locations_list = [0] * path_length\n    for sugar_location in sugar_locations:\n        sugar_locations_list[sugar_location] = 1\n\n    # Initialize a list to keep track of the ants' positions\n    ants_positions_list = [0] * path_length\n\n    # Update the ants' positions and check if they are happy\n    for ant_position, direction in ant_positions:\n        ants_positions_list[ant_position] = 1\n        if direction == \"right\":\n            while ant_position < path_length - 1 and sugar_locations_list[ant_position + 1] == 1:\n                happy_ants_count += 1\n                sugar_locations_list[ant_position + 1] = 0\n                ant_position += 1\n        else:\n            while ant_position > 0 and sugar_locations_list[ant_position - 1] == 1:\n                happy_ants_count += 1\n                sugar_locations_list[ant_position - 1] = 0\n                ant_position -= 1\n\n    return happy_ants_count\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    swap_case = {v: v.upper() if v.islower() else v.lower() for v in vowels + consonants}\n    next_vowel = {v: vowels[(i+1)%5] for i, v in enumerate(vowels)}\n    prev_consonant = {c: consonants[(i-1)%21] for i, c in enumerate(consonants, 1)}\n    transform = {**swap_case, **next_vowel, **prev_consonant}\n    return ''.join(transform[c] if c.isalpha() else c for c in s)\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        p = p - 2 if p % 2 == 0 else p - 3\n    return pyramid[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n\n    for food, changes in order.items():\n        if food in menu:\n            final_order[food] = list(menu[food])\n            if \"remove\" in changes:\n                for ingredient in changes[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in changes:\n                for ingredient in changes[\"add\"]:\n                    if ingredient not in final_order[food]:\n                        final_order[food].append(ingredient)\n        else:\n            return \"Food not on menu\"\n\n    return final_order\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def anagram_pairs(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if anagram_pairs(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    return pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # sorcerer can use 'Swap' spell to bring minimum possible number of elements to their correct position\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in non-decreasing order, then it is possible to sort the array using 'Swap' spell\n    # if the array is not sorted, then it is possible to sort the array using 'Swap' spell and 'Rotate' spell\n    # if the array is sorted in"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i+1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    count_vowels = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_s += encrypted_char\n            if encrypted_char.lower() in vowels:\n                count_vowels += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, count_vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in kingdom far away, lived a magical creature named '{s}' known for telling {count} tales a day\")\n    return result\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    chests = sum(sum(row) for row in grid)\n\n    # While there are still chests to collect\n    while chests > 0:\n        # Calculate the number of trips needed to collect a full load of chests\n        trips += math.ceil(chests / bag_capacity)\n\n        # Remove the chests collected in this trip from the total number of chests\n        chests -= bag_capacity * math.ceil(chests / bag_capacity)\n\n    # Return the number of trips needed to collect all chests\n    return trips * 2 + rows - 1\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(ch, ch) for ch in s)\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    transformed_str = \"\"\n    for i in range(len(input_str)):\n        char = input_str[i]\n        if char in vowels:\n            transformed_str += chr((ord(char) - 97 + 1) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 1) % 26 + 65)\n        elif char in consonants:\n            transformed_str += chr((ord(char) - 97 + 1) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 1) % 26 + 65)\n        elif char.isdigit():\n            transformed_str += str((int(char) + 1) % 10)\n        elif char in \".,;:\":\n            transformed_str += \".,;:\"[ \".,;:\".index(char) ^ 1] if i % 2 else char\n        else:\n            transformed_str += char\n    return transformed_str\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * len(sequence)\n    for i in range(len(sequence)):\n        while sequence[i] >= k:\n            sequence[i] //= k\n            points[i] += 1\n    return [points[sequence.index(i)] for i in sorted(sequence, reverse=True)]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n//2+1):\n        for j in range(i, n-i):\n            pattern.append(mat[i][j])\n        for j in range(i+1, n-i):\n            pattern.append(mat[j][n-i-1])\n        for j in range(i+1, n-i):\n            pattern.append(mat[n-i-1][n-j-1])\n        for j in range(i+1, n-i-1):\n            pattern.append(mat[n-j-1][i])\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if days == 0:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        # calculate profit if we sell on current day\n        profit = prices[i] - min_price\n        # update max_profit if current profit is more\n        max_profit = max(max_profit, profit)\n        # update min_price if current price is less\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    # define the initial position\n    pos = [(i, j) for i in range(len(map)) for j in range(len(map[0])) if map[i][j] == 'S'][0]\n    path = [pos]\n    # define the directions\n    dir = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    # process the instructions\n    for instruction in instructions:\n        # calculate the new position\n        new_pos = (pos[0] + dir[instruction][0], pos[1] + dir[instruction][1])\n        # check if the new position is valid\n        if (0 <= new_pos[0] < len(map) and 0 <= new_pos[1] < len(map[0]) and map[new_pos[0]][new_pos[1]] != 'X'):\n            pos = new_pos\n            path.append(pos)\n            # check if the new position is the end\n            if map[pos[0]][pos[1]] == 'E':\n                break\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for word_1, word_2 in zip(word_list, word_list[1:]):\n        for ch_1, ch_2 in zip(word_1, word_2):\n            if alien_dict[ch_1] > alien_dict[ch_2]:\n                return \"INCORRECT\"\n            elif alien_dict[ch_1] < alien_dict[ch_2]:\n                break\n        else:\n            if len(word_1) > len(word_2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_dict = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        if (month == 3 and day >= 21 and day <= 19) or (month == 4 and day <= 19):\n            elements_dict[zodiac_dict[\"Aries\"]] += 1\n        elif (month == 4 and day >= 20 and day <= 20) or (month == 5 and day <= 20):\n            elements_dict[zodiac_dict[\"Taurus\"]] += 1\n        elif (month == 5 and day >= 21 and day <= 20) or (month == 6 and day <= 20):\n            elements_dict[zodiac_dict[\"Gemini\"]] += 1\n        elif (month == 6 and day >= 21 and day <= 22) or (month == 7 and day <= 22):\n            elements_dict[zodiac_dict[\"Cancer\"]] += 1\n        elif (month == 7 and day >= 23 and day <= 22) or (month == 8 and day <= 22):\n            elements_dict[zodiac_dict[\"Leo\"]] += 1\n        elif (month == 8 and day >= 23 and day <= 22) or (month == 9 and day <= 22):\n            elements_dict[zodiac_dict[\"Virgo\"]] += 1\n        elif (month == 9 and day >= 23 and day <= 22"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node]]\n        return sum([dfs(k, path + [node]) for k in node.keys()], [])\n\n    return [list(map(lambda x: x[0], path)) for path in dfs(tree, [])]\n\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0\n\n    # Loop through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If the cell is a monster, skip it\n            if grid[i][j] == 1:\n                continue\n            # If the cell is reachable from the top, update the minimum steps\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n            # If the cell is reachable from the left, update the minimum steps\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n\n    # If the princess's cell is reachable, return the minimum steps, otherwise return -1\n    if dp[coord[0]-1][coord[1]-1] != float('inf'):\n        return dp[coord[0]-1][coord[1]-1]\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = ''\n    while arr:\n        # read top row\n        result += ''.join(arr.pop(0))\n        # read right column\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        # read bottom row\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        # read left column\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None and features[0] > 0 and features[1] > 0:\n            new_dict[planet] = round(features[0] / features[1], 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    for i in range(len(aliens)):\n        if aliens[i] == ray or aliens[i] - 1 == ray or aliens[i] + 1 == ray:\n            if i != 0 and i != len(aliens) - 1:\n                aliens.pop(i)\n                aliens.pop(i - 1)\n            elif i == 0:\n                aliens.pop(i)\n            else:\n                aliens.pop(i)\n            return aliens\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert string to integer\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # calculate product\n    product = num1 * num2\n\n    # convert product to string\n    product_str = str(product)\n\n    # calculate sum of digits\n    sum_of_digits = sum(int(digit) for digit in product_str)\n\n    return sum_of_digits\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = []\n    for i in range(n):\n        layer = []\n        for j in range(2*i+1):\n            if j == 0 or j == 2*i:\n                layer.append(alphabet[i%26])\n            else:\n                layer.append(' ')\n        fountain.append(''.join(layer))\n    for i in range(n):\n        fountain[i] = fountain[i].center(2*n-1)\n    return '\\n'.join(fountain[::-1])\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize the encoded message\n    encoded_message = ''\n    # Iterate over the message\n    for i in range(len(message)):\n        # If the character is a letter\n        if message[i].isalpha():\n            # Find the new character in the alphabet\n            new_char = alphabet[(alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26]\n            # If the original character was uppercase, make the new character uppercase\n            if message[i].isupper():\n                encoded_message += new_char.upper()\n            else:\n                encoded_message += new_char\n        else:\n            # If the character is not a letter, add it to the encoded message as is\n            encoded_message += message[i]\n    # Return the encoded message\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(\" \"), key=lambda word: (len(word), spell.index(word))))\n        for spell in strings\n    ]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Initialize sums\n    sum1 = 0\n    sum2 = 0\n\n    # Calculate sums of diagonals\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n\n    # Return absolute difference\n    return abs(sum1 - sum2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_digits(n):\n        n = abs(n)\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n\n    def product_digits(digits):\n        product = 1\n        for digit in digits:\n            product *= digit\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0:\n            digits = get_digits(lst[i])\n            if product_digits(digits) == i:\n                magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if alien not in [\"Xenomorph\", \"Predator\", \"Klingon\"] or not isinstance(humans, dict):\n        return []\n    alien_order = {\"Xenomorph\": [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"],\n                   \"Predator\": [\"Africa\", \"Europe\", \"North America\", \"South America\"],\n                   \"Klingon\": [\"Asia\", \"Europe\", \"North America\", \"South America\"]}\n    encounter = []\n    for human in humans:\n        if humans[human] in alien_order[alien]:\n            encounter.append(human)\n    return encounter\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        position = (position + music * round) % len(players)\n        players.pop(position)\n        if position == len(players):\n            position = 0\n    return players\n\n"}
