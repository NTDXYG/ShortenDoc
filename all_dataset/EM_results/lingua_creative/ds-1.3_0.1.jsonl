{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += (1.5 * 5.0) * float(item)\n        else:\n            total_cost += (1.5 * 5.0) * item\n        if item > 5.0:\n            total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        if item > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        pass\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(c: str) -> int:\n        return ord(c.lower())\n\n    def int_to_char(i: int) -> str:\n        return chr(i)\n\n    def shift_char(c: str, key: int) -> str:\n        i = char_to_int(c)\n        return int_to_char((i - 97 + key) % 26 + 97)\n\n    def shift_word(word: str, key: int) -> str:\n        return \"\".join(shift_char(c, key) if c.isalpha() else c for c in word)\n\n    return [shift_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(result) < len(matrix) * len(matrix[0]):\n        result.append(matrix[row][col])\n        if row % 2 == 0:  # moving right\n            if col == len(matrix[0]) - 1:  # reached right end, move down\n                row += 1\n            elif col == 0:  # reached left end, move down\n                row += 1\n            else:  # move right\n                col += 1\n        else:  # moving down\n            if row == len(matrix) - 1:  # reached bottom end, move left\n                col -= 1\n            elif row == 0:  # reached top end, move left\n                col -= 1\n            else:  # move down\n                row += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        grid[x][y] = 1\n        if x > 0:\n            grid[x-1][y] = 0\n        if x < len(grid)-1:\n            grid[x+1][y] = 0\n        if y > 0:\n            grid[x][y-1] = 0\n        if y < len(grid[0])-1:\n            grid[x][y+1] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    point = (0, 0)\n    # Define the directions\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Iterate over the sequence\n    for direction in code_sequence:\n        # Update the point\n        point = (point[0] + directions[direction][0], point[1] + directions[direction][1])\n        # Check if the point is back to the starting point\n        if point == (0, 0):\n            return 'Shangri-La found'\n    # If not found, return 'Shangri-La not found'\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    canvas_list = list(canvas)\n    for i, char in enumerate(canvas_list):\n        if char == 'P':\n            if i > 0 and canvas_list[i-1] == '-' and i < len(canvas) - 1 and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n            else:\n                return 'Invalid canvas'\n\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 0, 'D': 0, 'B': 0}\n    animal_sounds = animal_string.split()\n    for sound in animal_sounds:\n        if sound[0] in animals:\n            animals[sound[0]] += 1\n    return [animals[key] for key in animals if animals[key] < 5]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    c = Counter(flux_values)\n    max_occurrence = max(c.values())\n    sum_of_elements = sum(k * v for k, v in c.items())\n    return sum_of_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_nums = [0, 1]\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return sum(fib_nums)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard[1] *= -1\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards.pop(0)\n        if len(wizards) == 0:\n            return 'The dragon won!'\n    return wizards[0][0]\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_multiple_of_seven(n: int) -> bool:\n        return n % 7 == 0\n\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        if is_multiple_of_seven(i) and sum_of_digits(i) == 7:\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(m, i, j):\n        for x, y in [(i, j), (i, j-1), (i, j+1), (i-1, j), (i+1, j)]:\n            if 0 <= x < len(m) and 0 <= y < len(m[0]):\n                if m[x][y] == 1:\n                    return True\n        return False\n\n    def is_human(m, i, j):\n        return m[i][j] == 0\n\n    vampires = 0\n    humans = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if is_vampire(m, i, j):\n                vampires += 1\n            elif is_human(m, i, j):\n                humans += 1\n    return humans\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = list(map(list, zip(*grid)))\n        return is_word_in_row(transposed, word)\n\n    return all(is_word_in_row(grid, word) and is_word_in_col(grid, word) for word in words)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v\n    return distance / light_years_per_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_to_str(n):\n        return str(n)\n\n    def str_to_prime(s):\n        return int(s)\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            char_num = ord(char)\n            if is_prime(char_num - ord('a') + 1):\n                result += prime_to_str(char_num - ord('a') + 1)\n            else:\n                result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Define the mapping from English to alien language\n    english_to_alien = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':',\n        'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|',\n        ' ': '|'\n    }\n\n    # Translate the word\n    alien_word = ''.join(english_to_alien[char] for char in english_word.lower())\n\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\r\n    words = re.findall(r'\\b\\w+\\b', text)\r\n    word_count = words.count(word)\r\n    if word_count == 0:\r\n        return (0, \"\")\r\n    else:\r\n        sentences = re.findall(r'\\b\\w+\\.', text)\r\n        max_sentence = max(sentences, key=lambda s: s.count(word))\r\n        return (word_count, max_sentence)\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    directions = []\n    while start != end:\n        if start[0] < end[0]:\n            start = (start[0] + 1, start[1])\n            directions.append('down')\n        elif start[1] < end[1]:\n            start = (start[0], start[1] + 1)\n            directions.append('right')\n        else:\n            start = (start[0] - 1, start[1])\n            directions.append('up')\n\n        if start == end:\n            break\n\n        if start[0] > end[0]:\n            start = (start[0] - 1, start[1])\n            directions.append('left')\n\n    return directions\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 750\n    else:\n        return (income - 13000) * 0.30\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    return [s for s in substrings if is_palindrome(s)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_point in [(start[0]+1, start[1]), (start[0]-1, start[1]), (start[0], start[1]+1), (start[0], start[1]-1)]:\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1:\n                maze[next_point[0]][next_point[1]] = 0\n                path = dfs(maze, next_point, end, path)\n                maze[next_point[0]][next_point[1]] = 1\n        return path\n\n    maze[start[0]][start[1]] = 0\n    path = dfs(maze, start, end)\n    maze[start[0]][start[1]] = 1\n\n    if path[-1] != end:\n        return []\n    else:\n        return path\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Initialize list of songs\n    songs = playlist\n    # Initialize seed\n    seed = 7\n    # Initialize list to hold shuffled songs\n    shuffled_songs = []\n\n    # Loop through the list of songs\n    for i in range(len(songs)):\n        # If song is not \"Rock\"\n        if \"Rock\" not in songs[i]:\n            # Get the index to swap with\n            swap_index = seed % len(songs)\n            # Swap the song at the current index with the song at the swapped index\n            songs[i], songs[swap_index] = songs[swap_index], songs[i]\n            # Update the seed\n            seed = (seed * 16807) % 2147483647\n        # Add the song to the shuffled songs list\n        shuffled_songs.append(songs[i])\n\n    return shuffled_songs\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # The base case: only one way to reach the first step\n    ways[0] = 1\n    # For each magic stone, try to reach each step\n    for stone in magic_stones:\n        for i in range(stone, n + 1):\n            ways[i] += ways[i - stone]\n    # The number of ways to reach the top of the staircase is the last element in the list\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    if n == 1:\n        return [0]\n    transformation_list = [0] * n\n    for i in range(1, n):\n        if i < m:\n            transformation_list[i] = transformation_list[i - 1] + 10\n        else:\n            transformation_list[i] = max(0, transformation_list[i - 1] - 10)\n    return transformation_list\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count('@') != 1:\n        return False\n    at_position = email.find('@')\n    if at_position == 0 or at_position == len(email) - 1:\n        return False\n    if email[at_position - 1] == '.' or email[at_position + 1] == '.':\n        return False\n    if '..' in email:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    result = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        for j in range(i - 1, -1, -1):\n            result[j] += xs[i] / (i - j)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_s += char.lower().replace(char, vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n            else:\n                transformed_s += char.lower().replace(char, consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return \"\\n\".join(\"*\" + \"*\".join(c for c in s) + \"*\" for _ in range(n)) + \"*\"\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Split potions into names and powers\n    potions = [(p.split()[0], int(p.split()[1])) for p in potions]\n\n    # Sort potions by power level in descending order\n    potions.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize result\n    result = []\n\n    # Iterate over potions\n    for potion in potions:\n        # If potion's power level is less than target, add it to result\n        if potion[1] < target:\n            result.append(potion[0])\n            target -= potion[1]\n        # If potion's power level is equal to target, add it to result\n        elif potion[1] == target:\n            result.append(potion[0])\n            break\n\n    # Return result\n    return result\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\n        if len(items) < 2:\n            return -1\n        items.sort(reverse=True)\n        return items[1]\n\n    legendary_item_found = False\n    second_most_valuable_item = find_second_most_valuable_item(player_input)\n\n    for item in player_input:\n        if item == 5:\n            legendary_item_found = True\n\n    return (legendary_item_found, second_most_valuable_item)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < (distance / speed) * planet_gravity:\n        return 'Insufficient fuel'\n    else:\n        fuel -= (distance / speed) * planet_gravity * 0.1\n        return round(fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q, w, e):\n        total_weight = 0\n        for i in q:\n            total_weight += i\n        if total_weight <= w:\n            return True\n        elif total_weight <= e:\n            return False\n        else:\n            return True\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20)) # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10)) # False\n    print(fairy_tale_transport([1, 2, 3], 1, 5)) # True\n    print(fairy_tale_transport([5, 10, 15], 15, 15)) # True\n\n    # The function is working as expected.\n    # It calculates the total weight of all items in the list,\n    # and then checks if it is less than or equal to the carrying capacity of unicorns.\n    # If it is, it returns True, meaning it's possible to carry all items.\n    # If it's not, it checks if the total weight is less than or equal to the carrying capacity of dragons and griffins.\n    # If it's less than or equal to the carrying capacity of dragons and griffins, it returns False, meaning it's not possible to carry all items.\n    # If the total weight is greater than the carrying capacity of dragons and griffins, it returns True, meaning it's possible to carry all items.\n    # This function is designed to work with the given example cases.\n    # It should work with any other cases as well.\n    # The time complexity of the function is O(n), where n is the number of items in the list.\n    # This is because the function iterates over the list of items once.\n    # The space complexity is O(1), as it uses a constant amount of space to store the total weight and the number of items.\n    # This function is efficient and can handle large inputs.\n    # It's worth noting that the function assumes that the input is valid, which means that the list q and the capacities w and"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(1, len(arr)-1):\n        left_view = max(arr[i-1:i])\n        right_view = max(arr[i+1:i+2])\n        if arr[i] > left_view and arr[i] > right_view:\n            max_view += 1\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            message = ''.join(test)\n            if 'Take the cannoli' in message.lower():\n                message = message.replace('Take the cannoli', '')\n            result.append(message)\n        return result\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message()\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n\n        deciphers Morse code into plain text\n        \"\"\"\n        decoded_text = ''\n        for symbol in morse_code.split('/'):\n            for char in symbol.split():\n                decoded_text += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(char)]\n        return decoded_text\n\n    return decode_morse(msg)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                       'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                       'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                       'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                       'Y': '-.--', 'Z': '--..', ' ': '   '}\n\n    morse_code = \"\"\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += \" \"\n\n    return morse_code\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n    result = 0\n    while orders:\n        # bake the first n cookies\n        result += min(n, len(orders))\n        # remove the baked cookies from the list\n        orders = orders[n:]\n    return result // m\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            transformed += char.lower()[1]\n        elif char.lower() in consonants:\n            transformed += char.lower()[1]\n        else:\n            transformed += char\n        if i % 2 != 0 and char.lower() == 'o' or i % 2 == 0 and char.lower() == 'i':\n            transformed = transformed[:i] + '!' + transformed[i+1:]\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            return c\n\n    return ''.join(map(shift_char, message, (shift + i for i in range(len(message)))))\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n                       'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n                       'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n                       's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n                       'y': '-.--', 'z': '--..', ' ': '/'}\n\n    morse_code = \"\"\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += spell[i % len(spell)]\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        translated_word = ''\n        for char in word:\n            if char in vowels:\n                translated_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                translated_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                translated_word += '@'\n        translated_word = translated_word[0].upper() + translated_word[1:]\n        if word[0] in vowels:\n            translated_word += 'xy'\n        else:\n            translated_word += 'yz'\n        translated_phrase += translated_word + ' '\n    return translated_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = [(k, v) for k, v in ingredient_dict.items()]\n    ingredient_list.sort(key=lambda x: (-x[1], x[0]))\n\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize happy_ants count\n    happy_ants_count = 0\n\n    # Iterate over sugar locations\n    for sugar_location in sugar_locations:\n        # If sugar location is in ant's path, increment happy_ants count\n        if sugar_location in ant_positions:\n            happy_ants_count += 1\n\n    # Return happy_ants count\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c.isalpha():\n                if c.lower() in vowels:\n                    result += vowels[(vowels.index(c.lower())+1)%5]\n                else:\n                    result += c.swapcase()\n        else:\n            if c.isalpha():\n                if c.lower() in consonants:\n                    result += c.swapcase()\n                else:\n                    result += c\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\n        pyramid = [p]\n        while pyramid[-1] > 0:\n            if pyramid[-1] % 2 == 0:\n                pyramid.append(pyramid[-1] - 2)\n            else:\n                pyramid.append(pyramid[-1] - 3)\n        return pyramid[::-1]\n\n    return create_pyramid(p)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        new_ingredients = details.copy()\n        if 'remove' in details:\n            for ingredient in details['remove']:\n                if ingredient in new_ingredients:\n                    new_ingredients.remove(ingredient)\n        if 'add' in details:\n            new_ingredients.extend(details['add'])\n        new_menu[food] = new_ingredients\n\n    final_order = {}\n    for food, new_details in new_menu.items():\n        final_order[food] = order[food].copy()\n        final_order[food]['add'] = [ingredient for ingredient in new_details if ingredient not in order[food].get('remove', [])]\n        final_order[food]['remove'] = [ingredient for ingredient in order[food].get('remove', []) if ingredient not in new_details]\n\n    return final_order\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sort(n):\n        return sorted(str(n))\n\n    primes = [i for i in range(1, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if digit_sort(primes[i]) == digit_sort(primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr != sorted_arr:\n            return False\n        arr.append(arr.pop(0))\n    return True\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n        if planet not in planets[planet]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_letter(c):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            new_c = chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n            return new_c\n        else:\n            return c\n\n    encrypted_s = ''.join(map(shift_letter, s))\n    vowels_count = sum(1 for c in encrypted_s if c.lower() in 'aeiou')\n    return (encrypted_s, vowels_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        output.append(f\"Once upon a time, in kingdom far away, lived a magical creature with name of '{s}' known for telling {count} tales a day\")\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    new_string = ''\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    result = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        else:\n            result += input_str[i] if i%2==0 else \"!\" if input_str[i]==\"?\" else \"?\"\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst)):\n        pyramid.append(''.join('#' if j >= i+1 else ' ' for j in lst))\n    return pyramid[::-1]\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n, k):\n        points = 0\n        while n > 1:\n            n = n // k\n            points += n\n        return points\n\n    sequence.sort(reverse=True)\n    for i in range(len(sequence)):\n        sequence[i] = calculate_points(sequence[i], k)\n\n    sequence.sort(reverse=True)\n    return sequence\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = n // 2\n    res = []\n    for i in range(m):\n        for j in range(m):\n            res.append(mat[i][j])\n            res.append(mat[i][n-1-j])\n            res.append(mat[n-1-i][j])\n            res.append(mat[n-1-i][n-1-j])\n    if n % 2 != 0:\n        mid = n // 2\n        res.append(mat[mid][mid])\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or len(prices) < 1 or len(prices) > days:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def move(row, col, direction):\n        if direction == 'up':\n            return (row - 1, col)\n        elif direction == 'down':\n            return (row + 1, col)\n        elif direction == 'left':\n            return (row, col - 1)\n        else:\n            return (row, col + 1)\n\n    def is_valid(row, col, map):\n        if row < 0 or col < 0:\n            return False\n        if row >= len(map) or col >= len(map[0]):\n            return False\n        if map[row][col] == 'X':\n            return False\n        return True\n\n    def process_instructions(map, instructions, row, col, path):\n        for instruction in instructions:\n            row, col = move(row, col, instruction)\n            if is_valid(row, col, map):\n                path.append((row, col))\n            else:\n                return path\n        return path\n\n    start_row, start_col = 0, 0\n    for i in range(len(map)):\n        for j in range(len(map[0])):\n            if map[i][j] == 'S':\n                start_row, start_col = i, j\n\n    path = [(start_row, start_col)]\n    path = process_instructions(map, instructions, start_row, start_col, path)\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict_set = set(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n        if set(word_list[i]) > alien_dict_set:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aries\": [\"2000-03-21\", \"2001-04-19\", \"2002-05-20\", \"2003-06-20\"],\n        \"Taurus\": [\"2001-04-20\", \"2002-05-20\", \"2003-06-21\"],\n        \"Gemini\": [\"2002-05-21\", \"2003-06-20\"],\n        \"Cancer\": [\"2003-06-21\", \"2004-07-22\"],\n        \"Leo\": [\"2004-07-23\", \"2005-08-22\"],\n        \"Virgo\": [\"2005-08-23\", \"2006-09-22\"],\n        \"Libra\": [\"2006-09-23\", \"2007-10-22\"],\n        \"Scorpio\": [\"2007-10-23\", \"2008-11-21\"],\n        \"Sagittarius\": [\"2008-11-22\", \"2009-12-21\"],\n        \"Capricorn\": [\"2009-12-22\", \"2010-01-19\"],\n        \"Aquarius\": [\"2010-01-20\", \"2011-02-18\"],\n        \"Pisces\": [\"2011-02-19\", \"2012-03-20\"]\n    }\n\n    result = {}\n\n    for sign, dates in zodiac_signs.items():\n        if any(birthday in dates for birthday in birthdays):\n            result[sign] = len([birthday for birthday in birthdays if birthday in dates])\n\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path, result):\n        if not tree:\n            return\n        path.append(tree.keys()[0])\n        if not tree[tree.keys()[0]][1] and not tree[tree.keys()[0]][2]:\n            result.append(path.copy())\n        else:\n            dfs(tree[tree.keys()[0]][1], path, result)\n            dfs(tree[tree.keys()[0]][2], path, result)\n        path.pop()\n\n    result = []\n    dfs(tree, [], result)\n    return result\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start = (coord[0]*2, coord[1]*2)\n        end = (coord[0]*2+1, coord[1]*2+1)\n        queue = [(start, 0)]\n        visited = {start}\n        while queue:\n            current, step = queue.pop(0)\n            if current == end:\n                return step\n            for direction in [(0, 1), (1, 0)]:\n                next_point = (current[0]+direction[0], current[1]+direction[1])\n                if 0 <= next_point[0] < 2*coord[0]+1 and 0 <= next_point[1] < 2*coord[1]+1 and grid[next_point[0]//2][next_point[1]//2] == 0 and next_point not in visited:\n                    visited.add(next_point)\n                    queue.append((next_point, step+1))\n        return -1\n\n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies(movies):\n        return sorted(movies, key=lambda x: (-x[1], x[0]))\n\n    sorted_movies = sorted(movies_dict.items(), key=sort_movies)\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008],\n               \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]}"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]))\n    print(word_spiral([]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n"}
{"task_id": "EvoEval/88", "completion": "\n    def calculate_population_density(planet, population, size):\n        if population and size:\n            return round(population / size, 2)\n        else:\n            return None\n\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] and data[1]:\n            new_dict[planet] = calculate_population_density(planet, data[0], data[1])\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    aliens = [a for a in aliens if not is_adjacent(a, ray)]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s]\n\n    def get_combinations(digits):\n        if len(digits) == 1:\n            return digits\n        result = []\n        for i in range(len(digits)):\n            for j in range(i + 1, len(digits)):\n                result.append((digits[i], digits[j]))\n        return result\n\n    def get_sum(combinations):\n        return sum(sum(comb) for comb in combinations)\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n    s1_combinations = get_combinations(s1_digits)\n    s2_combinations = get_combinations(s2_digits)\n    result = get_sum(s1_combinations + s2_combinations)\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action in spaceship_data:\n        if action[0] == 'Launch' and status == \"On Ground\":\n            status = \"In Space\"\n        elif action[0] == 'Move' and status == \"In Space\":\n            status = \"In Space\"\n        elif action[0] == 'Land' and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i - 1):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[j]\n        for j in range(2 * i - 1, -1, -1):\n            layer += alphabet[j]\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n_values[i % len(n_values)]) for i, c in enumerate(message))\n\n    return shift_message(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    return sorted(strings, key=len)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(m):\n        return len(m) == len(m[0])\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = {\"Xenomorph\": \"Asia\", \"Predator\": \"Europe\", \"Klingon\": \"North America\"}[alien]\n    humans_encounter = []\n\n    for human, continent in sorted(humans.items()):\n        if continent == alien_continent:\n            humans_encounter.append(human)\n\n    return humans_encounter\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                eliminated = (j + 1) % music\n                if eliminated == 0:\n                    players.pop(0)\n                else:\n                    players = players[eliminated - 1:] + players[:eliminated - 1]\n    return players\n\n"}
