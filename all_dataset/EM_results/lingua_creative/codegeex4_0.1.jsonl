{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    is_string_item = False\n    for item in items:\n        if isinstance(item, str):\n            is_string_item = True\n            item = 1.0\n        total_cost += 5.0\n        if item > 5.0:\n            total_cost += 10.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    if is_string_item:\n        total_cost *= 1.5\n    return f\"{total_cost:.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        weight = float(item) if isinstance(item, str) else item\n        base_cost = 5.0\n        if weight > 5.0:\n            base_cost += 10.0\n        total_cost += base_cost\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    location_factor = location_factors.get(location, 1.0)\n    total_cost *= location_factor\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Create a dictionary to map digits to letters\n    digit_to_letter = {str(i): chr(96 + i) for i in range(1, 27)}\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate through each digit in the input string\n    for i in range(len(input_string)):\n        # Get the current digit\n        digit = input_string[i]\n        \n        # If the current digit is '1', add the corresponding letter to the results\n        if digit == '1':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '2', add the corresponding letter to the results\n        elif digit == '2':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '3', add the corresponding letter to the results\n        elif digit == '3':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '4', add the corresponding letter to the results\n        elif digit == '4':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '5', add the corresponding letter to the results\n        elif digit == '5':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '6', add the corresponding letter to the results\n        elif digit == '6':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '7', add the corresponding letter to the results\n        elif digit == '7':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '8', add the corresponding letter to the results\n        elif digit == '8':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '9', add the corresponding letter to the results\n        elif digit == '9':\n            results.append(digit_to_letter[digit])\n        \n        # If the current digit is '0', add the corresponding letter to the results\n        elif digit == '0':\n            results.append(digit_to_letter[digit])\n    \n    # Return the results\n    return results\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = candles[0]\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > tallest:\n            tallest = candles[i]\n            count = 1\n        elif candles[i] == tallest:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    for i in range(rows + cols - 1):\n        if i % 2 == 0:\n            row, col = min(i, rows - 1), max(0, i - rows + 1)\n            while row >= 0 and col < cols:\n                result.append(matrix[row][col])\n                row -= 1\n                col += 1\n        else:\n            row, col = max(0, i - cols + 1), min(i, cols - 1)\n            while col >= 0 and row < rows:\n                result.append(matrix[row][col])\n                row += 1\n                col -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == 1:\n                    grid[x][y] += 1\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    canvas[painter] = '*'\n    for i in range(painter, -1, -1):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    for i in range(painter, len(canvas)):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    if canvas.count('*') == 0 or canvas.count('*') % (canvas.count('-') + 1) == 0:\n        return 'Invalid canvas'\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    import re\n    word_list = re.sub(r'[^\\w\\s]', '', string.lower()).split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_count = 0\n    animal_list = []\n    for animal in animal_string:\n        if animal in animal_dict:\n            animal_dict[animal] += 1\n            animal_count += 1\n            if animal_count == 5:\n                break\n        else:\n            continue\n    for animal, count in animal_dict.items():\n        animal_list.append(count)\n    return animal_list"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    most_occurred_number = min([k for k, v in counter.items() if v == max_occurrence])\n    sum_of_all_elements = sum(flux_values)\n    return sum_of_all_elements * most_occurred_number\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    for elem, cnt in count.items():\n        if cnt == min_count:\n            return elem"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if char.isupper():\n                alias += vowels[index + 1].upper()\n            else:\n                alias += vowels[index + 1]\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            if char.isupper():\n                alias += consonants[index + 1].upper()\n            else:\n                alias += consonants[index + 1]\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the count of each card value\n    card_counts = {}\n    for card in hand:\n        value = int(card[:-1])\n        if value in card_counts:\n            card_counts[value] += 1\n        else:\n            card_counts[value] = 1\n\n    # Initialize the score to 0\n    score = 0\n\n    # Check for pairs, triples, and fours\n    for value, count in card_counts.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += value * 2\n        elif count == 4:\n            score += value * 3\n        elif count == 5:\n            score += value * 4\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return sum(fib_sequence)"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return magical_seven(n-1) + 7 * 10 ** (n-1)"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i) + ',' + str(i + 1))\n    for i in range(n, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n"}
{"task_id": "EvoEval/23", "completion": "\n    def get_prime(n):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^',\n                  'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>',\n                  'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # TODO: implement this function\n    pass"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.3\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    palindromes = [sub for sub in substrings if is_palindrome(sub)]\n    return sorted(palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    # TODO: Implement this function.\n    pass"}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of unique paths to each cell\n    paths = [[0] * n for _ in range(m)]\n\n    # initialize the first row and column to 1, since there is only one way to reach them\n    for i in range(m):\n        paths[i][0] = 1\n    for j in range(n):\n        paths[0][j] = 1\n\n    # fill in the rest of the array\n    for i in range(1, m):\n        for j in range(1, n):\n            # the number of unique paths to a cell is the sum of the number of unique paths to the cell above it\n            # and the cell to the left of it\n            paths[i][j] = paths[i - 1][j] + paths[i][j - 1]\n\n    # return the number of unique paths to the bottom-right corner\n    return paths[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # TODO: implement function\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (by not jumping)\n    ways[0] = 1\n    # Iterate through each step\n    for i in range(1, n + 1):\n        # For each step, add the number of ways to reach the previous steps that can jump to this step\n        for stone in magic_stones:\n            if i - stone >= 0:\n                ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.count(\"@\") != 1 or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email[email.index(\"@\"):] == \".\":\n        return False\n    else:\n        return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i, x in enumerate(xs):\n        integral_coefficients.append(x / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                result += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                result += consonants[consonants.index(char.lower()) + 1]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the rows of the ASCII art\n    rows = []\n    # Create a string to store the characters in the row\n    row = \"\"\n    # Iterate over the characters in the string\n    for char in s:\n        # Add the character to the row n times\n        row += char * n\n    # Add the row to the list of rows\n    rows.append(row)\n    # Add the frame to the list of rows\n    rows.append(\"*\" * (len(row) + 2))\n    # Return the list of rows as a single string\n    return \"\\n\".join(rows)\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions = sorted(potions, key=lambda x: (int(x[2]), x[0]))\n    target = int(target)\n    result = []\n    for potion in potions:\n        if int(potion[2]) <= target:\n            target -= int(potion[2])\n            result.append(potion[0] + \" \" + potion[1])\n        if target == 0:\n            break\n    if target != 0:\n        return []\n    return result\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a 2D array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = 0  # The starting cell requires 0 energy\n\n    # Perform a breadth-first search to find the minimum energy required to reach the safe cell\n    queue = [(0, 0)]\n    while queue:\n        x, y = queue.pop(0)\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(arr) and 0 <= ny < len(arr[0]) and min_energy[nx][ny] > min_energy[x][y] + arr[nx][ny]:\n                min_energy[nx][ny] = min_energy[x][y] + arr[nx][ny]\n                queue.append((nx, ny))\n\n    # Return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Create a dictionary to store the count of each rarity\n    rarity_count = {i: 0 for i in range(1, 6)}\n    \n    # Count the occurrences of each rarity\n    for rarity in player_input:\n        rarity_count[rarity] += 1\n    \n    # Check if a legendary item has been acquired\n    if rarity_count[5] > 0:\n        # If a legendary item has been acquired, find the second most valuable item\n        for rarity in range(4, 0, -1):\n            if rarity_count[rarity] > 0:\n                return (True, rarity)\n        return (True, -1)\n    else:\n        return (False, None)\n  "}
{"task_id": "EvoEval/43", "completion": "\n    if distance / speed > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (distance / speed) * fuel_consumption\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    # Initialize variables\n    max_view = 0\n    current_view = 0\n    current_height = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current hill is taller than the previous hill, reset the view\n        if arr[i] > current_height:\n            current_view = 1\n            current_height = arr[i]\n        # If the current hill is shorter than the previous hill, increment the view\n        elif arr[i] < current_height:\n            current_view += 1\n        # If the current hill is the same height as the previous hill, increment the view\n        elif arr[i] == current_height:\n            current_view += 1\n        # Update the maximum view\n        max_view = max(max_view, current_view)\n\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            secret_message += word[0].lower()\n        if secret_message in test_case:\n            result.append('Take the cannoli')\n        else:\n            result.append(secret_message)\n    return result\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8',\n        '11110': '9', '11111': '0'\n    }\n    return ''.join(morse[i] for i in msg.split(' ') if i)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': '   '}\n    morse_code = ''\n    for char in text:\n        morse_code += morse_dict[char.upper()] + ' '\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(ord(char) - ord('a')) % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the count of fulfilled orders\n    fulfilled_orders = 0\n    \n    # Iterate over the orders\n    for order in orders:\n        # If the order can be fulfilled in a single batch\n        if order <= n:\n            # Increment the count of fulfilled orders\n            fulfilled_orders += 1\n            # Decrement the number of batches left\n            m -= 1\n            # If no batches are left, break the loop\n            if m == 0:\n                break\n    \n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',\n                       'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',\n                       'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n                       'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \"/\"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for letter in dish:\n            new_dish += magic_spell[(magic_spell.index(letter) + len(magic_spell)) % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[vowels.index(char) + 1]\n        elif char in consonants:\n            translated_phrase += consonants[consonants.index(char) + 1]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_phrase = translated_phrase.title()\n    for i in range(len(translated_phrase)):\n        if translated_phrase[i] in vowels:\n            translated_phrase = translated_phrase[:i] + 'xy' + translated_phrase[i+1:]\n        elif translated_phrase[i] in consonants:\n            translated_phrase = translated_phrase[:i] + 'yz' + translated_phrase[i+1:]\n    return translated_phrase\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                result.append(c.swapcase())\n            else:\n                if c.lower() in vowels:\n                    result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)])\n                else:\n                    result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)])\n        else:\n            result.append(c)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    blocks = p\n    while blocks > 0:\n        pyramid.append(blocks)\n        if blocks % 2 == 0:\n            blocks -= 2\n        else:\n            blocks -= 3\n    return pyramid"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, customization in order.items():\n        if customization:\n            for action, ingredients in customization.items():\n                if action == \"remove\":\n                    for ingredient in ingredients:\n                        menu[food].remove(ingredient)\n                elif action == \"add\":\n                    for ingredient in ingredients:\n                        menu[food].append(ingredient)\n    return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n    return sorted(anagram_pairs)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] == i + 1:\n            continue\n        else:\n            break\n    else:\n        return True\n    for i in range(len(arr)):\n        if arr[i] == i + 2:\n            continue\n        else:\n            break\n    else:\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with name of '{name}' known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # pass\n    # print(grid)\n    # print(bag_capacity)\n    # print(len(grid))\n    # print(len(grid[0]))\n    # print(grid[0][0])\n    # print(grid[0][1])\n    # print(grid[0][2])\n    # print(grid[0][3])\n    # print(grid[1][0])\n    # print(grid[1][1])\n    # print(grid[1][2])\n    # print(grid[1][3])\n    # print(grid[2][0])\n    # print(grid[2][1])\n    # print(grid[2][2])\n    # print(grid[2][3])\n    # print(grid[3][0])\n    # print(grid[3][1])\n    # print(grid[3][2])\n    # print(grid[3][3])\n    # print(grid[4][0])\n    # print(grid[4][1])\n    # print(grid[4][2])\n    # print(grid[4][3])\n    # print(grid[5][0])\n    # print(grid[5][1])\n    # print(grid[5][2])\n    # print(grid[5][3])\n    # print(grid[6][0])\n    # print(grid[6][1])\n    # print(grid[6][2])\n    # print(grid[6][3])\n    # print(grid[7][0])\n    # print(grid[7][1])\n    # print(grid[7][2])\n    # print(grid[7][3])\n    # print(grid[8][0])\n    # print(grid[8][1])\n    # print(grid[8][2])\n    # print(grid[8][3])\n    # print(grid[9][0])\n    # print(grid[9][1])\n    # print(grid[9][2])\n    # print(grid[9][3])\n    # print(grid[10][0])\n    # print(grid[10][1])\n    # print(grid[10][2])\n    # print(grid[10][3])\n    # print(grid[11][0])\n    # print(grid[11][1])\n    # print(grid[11][2])\n    # print(grid[11][3])\n    # print(grid[12][0])\n    # print(grid[12][1])\n    # print(grid[12][2])\n    # print(grid[12][3])\n    # print(grid[13]["}
{"task_id": "EvoEval/74", "completion": "\n    new_string = \"\"\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        elif char in '?!':\n            result.append('!' if i % 2 == 0 else '?')\n        else:\n            result.append(char)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    if not lst:\n        return pyramid\n    lst.sort(reverse=True)\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(num, k):\n        count = 0\n        while num % k == 0:\n            count += 1\n            num //= k\n        return count\n\n    points = [count_points(num, k) for num in sequence]\n    sorted_sequence = sorted(zip(sequence, points), key=lambda x: x[1], reverse=True)\n    return [x[0] for x in sorted_sequence]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n - i - 1])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the starting position\n    row, col = 0, 0\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                row, col = i, j\n                break\n        if map[i][j] == 'S':\n            break\n\n    # Initialize the path\n    path = [(row, col)]\n\n    # Process each instruction\n    for instruction in instructions:\n        if instruction == 'up':\n            if row > 0 and map[row - 1][col] != 'X':\n                row -= 1\n        elif instruction == 'down':\n            if row < len(map) - 1 and map[row + 1][col] != 'X':\n                row += 1\n        elif instruction == 'left':\n            if col > 0 and map[row][col - 1] != 'X':\n                col -= 1\n        elif instruction == 'right':\n            if col < len(map[0]) - 1 and map[row][col + 1] != 'X':\n                col += 1\n\n        # Check if the end is reached\n        if map[row][col] == 'E':\n            break\n\n        # Add the current position to the path\n        path.append((row, col))\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December 22\", \"January 19\"),\n        \"Aquarius\": (\"January 20\", \"February 18\"),\n        \"Pisces\": (\"February 19\", \"March 20\"),\n    }\n    elements = {\n        \"Fire\": [\"Aries\", \"Leo\", \"Sagittarius\"],\n        \"Water\": [\"Cancer\", \"Scorpio\", \"Pisces\"],\n        \"Air\": [\"Gemini\", \"Libra\", \"Aquarius\"],\n        \"Earth\": [\"Taurus\", \"Virgo\", \"Capricorn\"],\n    }\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                for element, signs in elements.items():\n                    if sign in signs:\n                        result[element] = result.get(element, 0) + 1\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Check if the starting point is a monster\n    if grid[0][0] == 1:\n        return -1\n\n    # Initialize the number of moves to 0\n    moves = 0\n\n    # Initialize the current position to the starting point\n    current_position = (0, 0)\n\n    # While the current position is not the princess's position\n    while current_position != coord:\n        # Check if the princess's position is out of bounds\n        if coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n\n        # Check if the princess's position is a monster\n        if grid[coord[0]][coord[1]] == 1:\n            return -1\n\n        # Check if the current position is a monster\n        if grid[current_position[0]][current_position[1]] == 1:\n            return -1\n\n        # Check if the next position to the right is within bounds and not a monster\n        if current_position[1] + 1 < len(grid[0]) and grid[current_position[0]][current_position[1] + 1] == 0:\n            current_position = (current_position[0], current_position[1] + 1)\n        # Check if the next position below is within bounds and not a monster\n        elif current_position[0] + 1 < len(grid) and grid[current_position[0] + 1][current_position[1]] == 0:\n            current_position = (current_position[0] + 1, current_position[1])\n        # If neither position is valid, return -1\n        else:\n            return -1\n\n        # Increment the number of moves\n        moves += 1\n\n    # Return the number of moves\n    return moves\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies by ratings and release date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    \n    # Extract the movie names from the sorted list\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n    \n    return sorted_movie_names\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top = 0\n    bottom = len(arr) - 1\n    left = 0\n    right = len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] and data[1]:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # create a new list to store the remaining aliens' positions\n    remaining_aliens = []\n    # loop through the aliens' positions\n    for alien in aliens:\n        # check if the alien's position is not adjacent to the ray gun's position\n        if alien not in [ray - 1, ray, ray + 1]:\n            # if not, add the alien's position to the remaining aliens' list\n            remaining_aliens.append(alien)\n    # return the remaining aliens' positions\n    return remaining_aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.add(int(s[i] + s[j]))\n        return combinations\n\n    combinations1 = get_combinations(s1)\n    combinations2 = get_combinations(s2)\n    result = 0\n    for c1 in combinations1:\n        for c2 in combinations2:\n            result += c1 * c2\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            pass\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i\n        if is_prime(next_num):\n            sequence.append('prime')\n        else:\n            sequence.append(next_num)\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = 0\n        while time < round:\n            time += 1\n            players = players[1:] + players[:1]\n        players.pop(0)\n    return players\n\n"}
