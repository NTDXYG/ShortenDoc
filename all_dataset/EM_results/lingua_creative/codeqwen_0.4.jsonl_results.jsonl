{"task_id": "EvoEval/0", "completion": "\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += float(item)\n        else:\n            total_weight += item\n    \n    if total_weight > 5:\n        total_weight += 10\n    \n    shipping_cost = 5.0\n    if location == \"National\":\n        shipping_cost *= 1.5\n    elif location == \"International\":\n        shipping_cost *= 2.5\n    \n    total_cost = shipping_cost * total_weight\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in calculate_shipping_cost\n            total_weight += float(item)\nValueError: could not convert string to float: 'c'\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        total_cost += 5.0 * weight\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for i in range(len(input_string)):\n        result.append(alphabet[int(input_string[i]) - 1])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle >= max_height:\n            lit_candles += 1\n    return lit_candles\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    top = 0\n    bottom = len(matrix) - 1\n    left = 0\n    right = len(matrix[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(matrix[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(matrix[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(matrix[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La not found'\n    else:\n        return 'Shangri-La found'\n    pass\r\n\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    from collections import Counter\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    return dict(Counter(words))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    for animal in animal_string.split():\r\n        if animal in animals:\r\n            sounds.append(animals[animal])\r\n            animal_count[animal] = animal_count.get(animal, 0) + 1\r\n            if animal_count[animal] == 5:\r\n                sounds.pop()\r\n                animal_count[animal] -= 1\r\n        elif animal.startswith('C') or animal.startswith('D') or animal.startswith('B'):\r\n            sounds.append(animal)\r\n            animal_count[animal] = animal_count.get(animal, 0) + 1\r\n            if animal_count[animal] == 5:\r\n                sounds.pop()\r\n                animal_count[animal] -= 1\r\n    return [sounds.count(animal) for animal in animals.values()]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{fruits[0]} {fruits[2]} from {location}? Marvelous!\"\n    ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    if not flux_values:\n        return 0\n    max_count = 0\n    max_value = 0\n    for value in set(flux_values):\n        count = flux_values.count(value)\n        if count > max_count or (count == max_count and value < max_value):\n            max_count = count\n            max_value = value\n    return max_value * sum(flux_values)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    rarest_elem = min(counts, key=counts.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.capitalize()\n        else:\n            alias += char\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    return str(n) * 7\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                humans.append((i, j))\n            elif m[i][j] == 2:\n                vampires.append((i, j))\n    danger = 0\n    for h in humans:\n        for v in vampires:\n            if h[1] == v[1]:\n                danger += 1\n    return len(humans), danger, len(vampires)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    patterns = []\n    for i in range(1, n + 1):\n        pattern = ','.join(map(str, range(1, i + 1)))\n        patterns.append(pattern)\n        if i > 1:\n            for j in range(i - 1, 0, -1):\n                pattern = ','.join(map(str, range(j, 0, -1)))\n                patterns.append(pattern)\n    return patterns\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    N = len(grid)\n    grid = [''.join(row) for row in grid]\n    words = [''.join(word) for word in words]\n    for word in words:\n        if word not in grid:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9461000000\n    distance = t * v\n    return distance / light_year\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    prime_numbers = {\n        \"a\": 2, \"b\": 3, \"c\": 5, \"d\": 7, \"e\": 11, \"f\": 13, \"g\": 17, \"h\": 19, \"i\": 23, \"j\": 29,\n        \"k\": 31, \"l\": 37, \"m\": 41, \"n\": 43, \"o\": 47, \"p\": 53, \"q\": 59, \"r\": 61, \"s\": 67, \"t\": 71,\n        \"u\": 73, \"v\": 79, \"w\": 83, \"x\": 89, \"y\": 97, \"z\": 101\n    }\n    return \"\".join(prime_numbers.get(c, c) for c in s)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in prime_cipher\n    return \"\".join(prime_numbers.get(c, c) for c in s)\nTypeError: sequence item 0: expected str instance, int found\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_symbols = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '!',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_language_symbols.get(letter, letter)\n    return translated_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 50, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 40, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)] + [s[-(len(s) % n):]] if len(s) % n else [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 126, in <module>\n  File \"<string>\", line 124, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 25000:\n        tax += (taxable_income - 25000) * 0.15\n        taxable_income = 25000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.1\n    if taxable_income > 0:\n        tax += taxable_income * 0.05\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.append(substring)\n\n    return sorted(substrings)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your implementation here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    transformation_percentages[m - 1] = 100\n    for i in range(m, n):\n        if i % 2 == 0:\n            transformation_percentages[i] = transformation_percentages[i - 1] + 10\n        else:\n            transformation_percentages[i] = transformation_percentages[i - 1] - 10\n        if transformation_percentages[i] > 100:\n            transformation_percentages[i] = 100\n        elif transformation_percentages[i] < 0:\n            transformation_percentages[i] = 0\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\n        return False\n    if email.startswith(\"@\") or email.endswith(\"@\"):\n        return False\n    if email.count(\"@\") != 1:\n        return False\n    if email.index(\"@\") < email.index(\".\"):\n        return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n                transformed += new_char.upper() if char.isupper() else new_char\n            else:\n                index = consonants.index(char.lower())\n                new_char = consonants[(index + 1) % len(consonants)]\n                transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude09\",\n        \";)\": \"\ud83d\ude0a\",\n        \":P\": \"\ud83d\ude1c\"\n    }\n    for emoticon, emoji in emoticons_dict.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence if sentence.strip() != \"\" else \"No emoticons here\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    return \"*\" + \"\".join(s) + \"*\" + \"\\n\" + \"*\" * (len(s) + 2) + \"\\n\" * (n - 2) + \"*\" + \"\".join(s) + \"*\" + \"\\n\" + \"*\" * (len(s) + 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary_items = [5]\n    second_valuable_item = -1\n    rarity_count = {}\n    for rarity in player_input:\r\n        if rarity in legendary_items:\r\n            return True, rarity\r\n        if rarity not in rarity_count:\r\n            rarity_count[rarity] = 1\r\n        else:\r\n            rarity_count[rarity] += 1\r\n        if rarity_count[rarity] == 2:\r\n            second_valuable_item = rarity\r\n    return False, second_valuable_item\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    if fuel >= duration * fuel_consumption:\n        remaining_fuel = fuel - duration * fuel_consumption\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\n    unicorns = 0\n    dragons = 0\n    for i in q:\n        if i <= w:\n            unicorns += i\n        elif i <= e:\n            dragons += i\n        else:\n            return False\n    return unicorns + dragons <= e + w", "result": "passed", "passed": true}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for case in test_cases:\n        message = ' '.join(word[0] for word in case if word.isalpha())\n        result.append(message.lower())\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient.split()[0] not in available or available[ingredient.split()[0]] < int(quantity):\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110', '10': '11111'}\n    decoded_message = \"\"\n    current_code = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code_dict[current_code]\n            current_code = \"\"\n        else:\n            current_code += char\n    decoded_message += morse_code_dict[current_code]\n    return decoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 37, in morse_decoder\n            decoded_message += morse_code_dict[current_code]\nKeyError: '010101/01'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..',\n        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',\n        '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-',\n        '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return string\n    if not list_of_alphabets:\n        return string\n    alphabet_index = 0\n    result = ''\n    for char in string:\n        result += list_of_alphabets[alphabet_index % len(list_of_alphabets)]\n        alphabet_index += 1\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Calculate the maximum number of orders that can be fulfilled in a day\n    max_orders = 0\n    for order in orders:\n        # Calculate the number of batches needed for the current order\n        batches = (order + n - 1) // n\n        # Update the maximum number of orders if necessary\n        max_orders = max(max_orders, batches)\n    # Return the maximum number of orders that can be fulfilled in a day\n    return max_orders * m\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char == 'y':\n            transformed += 'b'\n        elif char == 'Y':\n            transformed += 'B'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            shift_amount = shift\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += shifted_char\n            shift += 1\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[char] for char in s)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = magic_spell * (len(dish) // len(magic_spell)) + dish[:len(dish) % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alien_dict = {vowels[i]: vowels[(i + 1) % len(vowels)] for i in range(len(vowels))}\n    alien_dict.update({consonants[i]: consonants[(i + 1) % len(consonants)] for i in range(len(consonants))})\n    alien_dict['z'] = 'b'\n    alien_dict[' '] = '@'\n    alien_dict['a'] = 'xy'\n    alien_dict['e'] = 'xy'\n    alien_dict['i'] = 'xy'\n    alien_dict['o'] = 'xy'\n    alien_dict['u'] = 'xy'\n    alien_dict['y'] = 'yz'\n    alien_dict['z'] = 'b'\n    alien_dict['b'] = 'yz'\n    alien_dict['c'] = 'yz'\n    alien_dict['d'] = 'yz'\n    alien_dict['f'] = 'yz'\n    alien_dict['g'] = 'yz'\n    alien_dict['h'] = 'yz'\n    alien_dict['j'] = 'yz'\n    alien_dict['k'] = 'yz'\n    alien_dict['l'] = 'yz'\n    alien_dict['m'] = 'yz'\n    alien_dict['n'] = 'yz'\n    alien_dict['p'] = 'yz'\n    alien_dict['q'] = 'yz'\n    alien_dict['r'] = 'yz'\n    alien_dict['s'] = 'yz'\n    alien_dict['t'] = 'yz'\n    alien_dict['v'] = 'yz'\n    alien_dict['w'] = 'yz'\n    alien_dict['x'] = 'yz'\n    alien_dict['y'] = 'yz", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 57\n    alien_dict['y'] = 'yz\n    alien_dict['y'] = 'yz\n                      ^\nSyntaxError: unterminated string literal (detected at line 57)\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    recipes = [(ingredient, count) for ingredient, count in ingredient_dict.items()]\n    recipes.sort(key=lambda x: (-x[1], x[0]))\n    return recipes\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    happy_count = 0\n    sugar_count = 0\n    for ant in ant_positions:\n        if ant[0] == 0 and ant[1] == \"right\":\n            happy_count += 1\n        elif ant[0] == path_length - 1 and ant[1] == \"left\":\n            happy_count += 1\n        elif ant[1] == \"right\":\n            if ant[0] + 1 in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0] + 1)\n                if sugar_count == len(sugar_locations):\n                    happy_count += 1\n        elif ant[1] == \"left\":\n            if ant[0] - 1 in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0] - 1)\n                if sugar_count == len(sugar_locations):\n                    happy_count += 1\n    return happy_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 != 0:\n            char = char.swapcase()\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            index = (index + 1) % len(vowels)\n            char = vowels[index]\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            index = (index - 1) % len(consonants)\n            char = consonants[index]\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n        result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = int(quantity) * conversion_factor\n        new_recipe[ingredient] = str(new_quantity)\n    return new_recipe\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while pyramid[-1] > 0:\n        if pyramid[-1] % 2 == 0:\n            pyramid.append(pyramid[-1] - 2)\n        else:\n            pyramid.append(pyramid[-1] - 3)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    \n    final_order = {}\n    for food, action in order.items():\n        if food in menu:\n            if action == \"remove\":\n                final_order[food] = [ingredient for ingredient in menu[food] if ingredient not in order[food]]\n            elif action == \"add\":\n                final_order[food] = menu[food] + order[food]\n            else:\n                final_order[food] = menu[food]\n        else:\n            final_order[food] = menu[food]\n    \n    return final_order\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                anagram_pairs.append((prime_numbers[i], prime_numbers[j]))\n\n    return anagram_pairs\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    calories_dict = {}\n    for customer in customers:\n        total_calories = 0\n        for meal in meals[customer]:\n            total_calories += meal['calories']\n        calories_dict[customer] = total_calories\n    return calories_dict\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in meal_calculator\n        for meal in meals[customer]:\nKeyError: 'Alice'\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    return False\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n        else:\n            encrypted_s += char\n    vowel_count = sum(1 for char in encrypted_s if char.lower() in vowels)\n    return encrypted_s, vowel_count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        output.append(f\"Once upon time kingdom far away lived magical creature '{i}' known for telling {count} tales a day\")\n    return output\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    total_trips = 0\n    current_row = 0\n    current_col = 0\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    num_chests = sum(sum(row) for row in grid)\n    \n    # Define helper function to calculate Manhattan distance\n    def manhattan_distance(row1, col1, row2, col2):\n        return abs(row1 - row2) + abs(col1 - col2)\n    \n    # Define helper function to calculate minimum trips to collect treasures\n    def min_trips(num_chests, bag_capacity):\n        return math.ceil(num_chests / bag_capacity)\n    \n    # Define helper function to calculate minimum trips to reach a chamber\n    def min_trips_to_chamber(row, col):\n        return min_trips(sum(grid[row][:col+1]), bag_capacity)\n    \n    # Define helper function to calculate minimum trips to reach a chamber from current position\n    def min_trips_to_chamber_from_current(row, col):\n        return min_trips(sum(grid[row][current_col+1:col+1]), bag_capacity)\n    \n    # Define helper function to calculate minimum trips to reach a chamber from current position\n    def min_trips_to_chamber_from_current(row, col):\n        return min_trips(sum(grid[row][current_col+1:col+1]), bag_capacity)\n    \n    # Define helper function to calculate minimum trips to reach a chamber from current position\n    def min_trips_to_chamber_from_current(row, col):\n        return min_trips(sum(grid[row][current_col+1:col+1]), bag_capacity)\n    \n    # Define helper function to calculate minimum trips to reach a chamber from current position\n    def min_trips_to_chamber_from_current(row, col):\n        return min_trips(sum(grid[row][current_col+1:col+1]), bag_capacity)\n    \n    #", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 180, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    else:\n        return ''.join(cipher.get(char, char) for char in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def magical_points(n, k):\n        if n == 1:\n            return 1\n        else:\n            return (magical_points(n // k, k) + n % k) // k\n\n    points = [magical_points(num, k) for num in sequence]\n    return sorted(points, reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = len(mat[0])\n    result = []\n    \n    # Top left to bottom right\n    for i in range(n):\n        for j in range(m):\n            if i + j == n - 1:\n                result.append(mat[i][j])\n    \n    # Top right to bottom left\n    for i in range(n):\n        for j in range(m):\n            if i + j == m - 1:\n                result.append(mat[i][j])\n    \n    # Top left to bottom right\n    for i in range(n):\n        for j in range(m):\n            if i + j == n - 1:\n                result.append(mat[i][j])\n    \n    # Top right to bottom left\n    for i in range(n):\n        for j in range(m):\n            if i + j == m - 1:\n                result.append(mat[i][j])\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    start = None\n    end = None\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start = (i, j)\n            elif map[i][j] == 'E':\n                end = (i, j)\n    if start is None or end is None:\n        return []\n    path = [start]\n    for instruction in instructions:\n        if instruction == 'up' and path[-1][0] > 0 and map[path[-1][0] - 1][path[-1][1]] != 'X':\n            path.append((path[-1][0] - 1, path[-1][1]))\n        elif instruction == 'down' and path[-1][0] < len(map) - 1 and map[path[-1][0] + 1][path[-1][1]] != 'X':\n            path.append((path[-1][0] + 1, path[-1][1]))\n        elif instruction == 'left' and path[-1][1] > 0 and map[path[-1][0]][path[-1][1] - 1] != 'X':\n            path.append((path[-1][0], path[-1][1] - 1))\n        elif instruction == 'right' and path[-1][1] < len(map[0]) - 1 and map[path[-1][0]][path[-1][1] + 1] != 'X':\n            path.append((path[-1][0], path[-1][1] + 1))\n        if path[-1] == end:\n            break\n    return path[:-1] if path[-1] != end else path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"April\": \"Fire\",\n        \"May\": \"Earth\",\n        \"June\": \"Earth\",\n        \"July\": \"Water\",\n        \"August\": \"Water\",\n        \"Sept\": \"Water\",\n        \"Oct\": \"Scorpio\",\n        \"Nov\": \"Scorpio\",\n        \"Dec\": \"Sagittarius\",\n        \"Jan\": \"Sagittarius\",\n        \"Feb\": \"Capricorn\",\n        \"Mar\": \"Capricorn\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Water\": 0, \"Scorpio\": 0, \"Sagittarius\": 0, \"Capricorn\": 0}\n    for birthday in birthdays:\n        month = birthday[:2]\n        element = zodiac_signs[month]\n        elements_count[element] += 1\n    return elements_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 166, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 53, in zodiac_element\n        element = zodiac_signs[month]\nKeyError: '20'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 29, in dfs\n            paths.append(path + [node['value']])\nKeyError: 'value'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    def bfs(grid, start):\n        queue = [start]\n        visited = set()\n        visited.add(start)\n        moves = 0\n        while queue:\n            next_level = []\n            for x, y in queue:\n                if grid[x][y] == 2:\n                    return moves\n                for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] != 1 and (nx, ny) not in visited:\n                        next_level.append((nx, ny))\n                        visited.add((nx, ny))\n            queue = next_level\n            moves += 1\n        return -1\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 2:\n                return bfs(grid, (i, j))\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie for movie, _ in sorted_movies]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return \"\"\n    top = 0\n    bottom = len(arr) - 1\n    left = 0\n    right = len(arr[0]) - 1\n    result = \"\"\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    if not dict_of_planets:\n        return {}\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if all(features):\n            population, size = features\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def unique_combinations(n):\n        digits = set(str(n))\n        return sum(int(''.join(comb)) for comb in set(permutations(digits)))\n\n    num1 = int(s1)\n    num2 = int(s2)\n    return unique_combinations(num1) * unique_combinations(num2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 132, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in magical_multiply\n    return unique_combinations(num1) * unique_combinations(num2)\n  File \"<string>\", line 17, in unique_combinations\n        return sum(int(''.join(comb)) for comb in set(permutations(digits)))\nNameError: name 'permutations' is not defined\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_index = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_index]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if not m or not m[0]:\n        return 'Invalid Matrix'\n    n = len(m)\n    if any(len(row) != n for row in m):\n        return 'Invalid Matrix'\n    first_diagonal = sum(m[i][i] for i in range(n))\n    second_diagonal = sum(m[i][n-i-1] for i in range(n))\n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if alien not in humans:\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]:\n        for human in humans:\n            if humans[human] == continent:\n                encountered.append(human)\n    return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_number)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence[:n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    round_count = 0\n    while len(players) > 1:\n        round_count += 1\n        round_time = rounds[round_count % len(rounds)]\n        music_positions = round_time * music\n        eliminated_position = (players[0] + music_positions - 1) % len(players)\n        players.pop(eliminated_position)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
