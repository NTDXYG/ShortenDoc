{"task_id": "EvoEval/0", "completion": "\n    # Define base shipping cost\n    base_cost = 5.0\n\n    # Define location multiplier\n    location_multiplier = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n\n    # Initialize total cost\n    total_cost = 0\n\n    # Iterate over items\n    for item in items:\n        # If item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            item = 1\n\n        # Calculate item cost\n        item_cost = base_cost * item\n\n        # If item's weight is more than 5kg, add additional charge\n        if item > 5:\n            item_cost += base_cost\n\n        # Add item cost to total cost\n        total_cost += item_cost\n\n    # Multiply total cost by location multiplier\n    total_cost *= location_multiplier.get(location, 1)\n\n    # Return total cost rounded to two decimal places\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    total_cost = 0\n    for item in items:\n        if type(item) == str:\n            item = 1\n        cost = 5.0\n        if item > 5.0:\n            cost += 10.0\n        total_cost += cost\n    total_cost *= location_factor.get(location, 1)\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def encrypt_word(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        return ''.join(chr((ord(c) - 97 + key) % 26 + 97) if 'a' <= c <= 'z' else c for c in word)\n\n    return [encrypt_word(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        result = []\n        for next_string in helper(s, index + 1):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if int(s[index]) == (ord(c) - ord('a') + 1):\n                    result.append(c + next_string)\n        return result\n    return helper(input_string, 0)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    lit_candles = 1\n    tallest_candle = candles[0]\n    for candle in candles[1:]:\n        if candle > tallest_candle:\n            lit_candles += 1\n            tallest_candle = candle\n    return lit_candles\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = len(matrix), len(matrix[0])\n    row_index = col_index = 0\n    right_to_down = True\n\n    while len(result) < row * col:\n        result.append(matrix[row_index][col_index])\n\n        if right_to_down:\n            if col_index < col - 1:\n                col_index += 1\n            else:\n                right_to_down = False\n                if row_index < row - 1:\n                    row_index += 1\n\n        else:\n            if col_index > 0:\n                col_index -= 1\n            else:\n                right_to_down = True\n                if row_index < row - 1:\n                    row_index += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if x < 0 or y < 0 or x >= rows or y >= cols or grid[x][y] != -1:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    grid[x][y] = 0\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == -1:\n            minesweeper_clicked(grid, (nx, ny))\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    canvas_list = list(canvas)\n    painter_count = 0\n    for i in range(len(canvas_list)):\n        if canvas_list[i] == 'P':\n            painter_count += 1\n            painter_index = i\n    if painter_count != 1:\n        return canvas\n    while painter_index < len(canvas_list):\n        if canvas_list[painter_index] == '-':\n            canvas_list[painter_index] = '*'\n            painter_index += 1\n        elif canvas_list[painter_index] == '#':\n            painter_index += 1\n        else:\n            break\n    if sum(i == '-' for i in canvas_list) != sum(i == '*' for i in canvas_list):\n        return 'Invalid canvas'\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    string = string.translate(str.maketrans('', '', st.punctuation))\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_string = animal_string.split()\n    animal_counts = []\n    for animal in animal_string:\n        if len(animal_counts) == 5:\n            break\n        if animal[0] == 'C' and animal[1:] != '':\n            animal_counts.append(animal[1:].count('|'))\n        elif animal[0] == 'D' and animal[1:] != '':\n            animal_counts.append(animal[1:].count('|'))\n        elif animal[0] == 'B' and animal[1:] != '':\n            animal_counts.append(animal[1:].count('|'))\n    return animal_counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \", \".join(fruits)\n    if len(fruits) > 2:\n        fruit_str = fruit_str.rsplit(\", \", 1)[0] + \" and \" + fruits[-1]\n    return f\"Oh, are those {fruit_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for key in count_dict:\n        if count_dict[key] == min_count:\n            return key\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n    return alias.upper() if name.isupper() else alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += int(value) * 2\n        elif count == 3:\n            score += int(value) * 3 * 2\n        elif count == 4:\n            score += int(value) * 4 * 2\n        elif count == 5:\n            score += int(value) * 5 * 2\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return sum(fib_seq)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(magical_seven(n-1)) + '0' + str(7 * (n-1)))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = []\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 1:\n                humans.append((i, j))\n            elif m[i][j] == 2:\n                vampires.append((i, j))\n    danger = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                danger += 1\n                break\n    return danger\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n + 1):\n            result.append(\",\".join(str(j) for j in range(1, i + 1)))\n        for i in range(n - 1, 0, -1):\n            result.append(\",\".join(str(j) for j in range(1, i)))\n        return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check(word):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if (j == 0 or grid[i][j-1] == '*') and (j + len(word) <= len(grid[i]) or grid[i][j + len(word)] == '*'):\n                    if ''.join(grid[i][j:j+len(word)]) == word or ''.join(grid[i][j:j+len(word)]) == word[::-1]:\n                        return True\n                if (i == 0 or grid[i-1][j] == '*') and (i + len(word) <= len(grid) or grid[i + len(word)][j] == '*'):\n                    if ''.join([grid[k][j] for k in range(i, i+len(word))]) == word or ''.join([grid[k][j] for k in range(i, i+len(word))]) == word[::-1]:\n                        return True\n        return False\n\n    for word in words:\n        if not check(word):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance = t * v\n    light_years = distance / 9.461e12\n    return light_years\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_alphabet = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '&',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    return \"\".join(alien_alphabet[ch] for ch in english_word)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    # Initialize frequency and max_freq\n    freq = 0\n    max_freq = 0\n    max_sentence = \"\"\n    # Loop through each sentence\n    for sentence in sentences:\n        # Count the frequency of the word in the sentence\n        sentence_freq = sentence.count(word)\n        # If the frequency is greater than max_freq, update max_freq and max_sentence\n        if sentence_freq > max_freq:\n            max_freq = sentence_freq\n            max_sentence = sentence\n        # Update the total frequency\n        freq += sentence_freq\n    # If word is not found in the text, return (0, \"\")\n    if max_freq == 0:\n        return (0, \"\")\n    # Return the frequency and the sentence with max frequency\n    return (freq, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Initialize the directions\n    directions = [\"up\", \"right\", \"down\", \"left\"]\n\n    # Initialize the stack with the start position\n    stack = [(start, [])]\n\n    # Initialize the visited set\n    visited = set()\n\n    while stack:\n        # Pop the current position and the path\n        (x, y), path = stack.pop()\n\n        # If the current position is the end position, return the path\n        if (x, y) == end:\n            return path\n\n        # Mark the current position as visited\n        visited.add((x, y))\n\n        # Add the next positions to the stack\n        for i, direction in enumerate(directions):\n            if direction == \"up\" and x > 0 and maze[x-1][y] == 0 and (x-1, y) not in visited:\n                stack.append(((x-1, y), path + [direction]))\n            elif direction == \"right\" and y < len(maze[0])-1 and maze[x][y+1] == 0 and (x, y+1) not in visited:\n                stack.append(((x, y+1), path + [direction]))\n            elif direction == \"down\" and x < len(maze)-1 and maze[x+1][y] == 0 and (x+1, y) not in visited:\n                stack.append(((x+1, y), path + [direction]))\n            elif direction == \"left\" and y > 0 and maze[x][y-1] == 0 and (x, y-1) not in visited:\n                stack.append(((x, y-1), path + [direction]))\n\n    # If no path is found, return an empty list\n    return []\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - min(deductions, 1000)\n    tax_due = 0\n\n    if taxable_income > 0:\n        if taxable_income <= 10000:\n            tax_due = 0\n        elif taxable_income <= 125000:\n            tax_due = (taxable_income - 10000) * 0.15\n        elif taxable_income <= 160000:\n            tax_due = 25000 * 0.15 + (taxable_income - 125000) * 0.25\n        else:\n            tax_due = 25000 * 0.15 + 45000 * 0.25 + (taxable_income - 160000) * 0.30\n\n    taxable_income -= min(deductions, 2000)\n    if taxable_income > 0:\n        if deductions <= 1000:\n            tax_due -= deductions * 0.5\n        elif deductions <= 3000:\n            tax_due -= 1000 * 0.5 + (deductions - 1000) * 0.75\n        else:\n            tax_due -= 1000 * 0.5 + 2000 * 0.75 + (deductions - 3000) * 1.0\n\n    return max(tax_due, 0)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    result = set()\n    length = len(s)\n\n    for i in range(length):\n        for j in range(i+1, length+1):\n            if is_palindrome(s[i:j]):\n                result.add(s[i:j])\n\n    return sorted(list(result))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Breadth-first search\n    queue = [(start, [start])]\n    visited = set()\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        if (x, y) not in visited:\n            visited.add((x, y))\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1:\n                    queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_order = [None] * playlist_length\n    used_indices = set()\n    for i in range(playlist_length):\n        target_index = i\n        while target_index in used_indices or \"Rock\" in playlist[target_index]:\n            target_index = (target_index + seed) % playlist_length\n            seed = (seed * 16807) % 2147483647\n        used_indices.add(target_index)\n        new_order[i] = playlist[target_index]\n    return new_order\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = min(100, transformation[i - 1] + 10)\n        for i in range(m, n):\n            transformation[i] = max(0, transformation[i - 1] - 10)\n    if m > 0:\n        transformation[m - 1] = 20\n        if m < n:\n            transformation[m] = 10\n    for i in range(m + 1, n):\n        transformation[i] = max(0, transformation[i - 1] - 10)\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") == 1 and email.count(\".\") > 0 and email.index(\"@\") != 0 and email.index(\".\") > email.index(\"@\") and email.index(\".\") != len(email) - 1:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_s = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word in emoticons_dict:\n            new_words.append(emoticons_dict[word])\n        else:\n            new_words.append(word)\n    return \" \".join(new_words)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    s = \"*\" + s + \"*\"\n    n = \"*\" * len(s)\n    return \"\\n\".join([n, s, n])\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0] + ' ' + potion.split()[1]) for potion in potions]\n    potions.sort()\n    potions = [potion.split() for potion in potions]\n    potions = sorted(potions, key=lambda x: int(x[1]))\n    potions_dict = {potion[0]: int(potion[1]) for potion in potions}\n    result = []\n    for potion in potions:\n        if int(potion[1]) == target:\n            result.append(potion[0])\n            return result\n        elif int(potion[1]) > target:\n            continue\n        else:\n            remaining = target - int(potion[1])\n            for potion2 in potions:\n                if int(potion2[1]) == remaining and potion2[0] not in result:\n                    result.append(potion[0])\n                    result.append(potion2[0])\n                    return result\n                elif int(potion2[1]) > remaining:\n                    break\n    return []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to reach each cell to be the value of the cell\n    min_energy = [[cell for cell in row] for row in arr]\n    rows, cols = len(arr), len(arr[0])\n\n    # Iterate over each cell in the array\n    for row in range(rows):\n        for col in range(cols):\n            # If the cell is not the safe cell, calculate the minimum energy required to reach it\n            if arr[row][col] != 0:\n                # Initialize the minimum energy to be the value of the cell\n                min_energy[row][col] = arr[row][col]\n                # Check the cells above, to the left, and to the right\n                for dr, dc in [(-1, 0), (0, -1), (0, 1)]:\n                    nr, nc = row + dr, col + dc\n                    # If the neighboring cell is within the bounds of the array,\n                    # update the minimum energy required to reach the cell\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        min_energy[row][col] = min(min_energy[row][col], min_energy[nr][nc] + arr[row][col])\n\n    # Return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    legendary_item = False\n    second_most_valuable_item = None\n    highest_rarity_item = -1\n    second_highest_rarity_item = -1\n\n    for item in player_input:\n        if item == 5:\n            legendary_item = True\n        elif item > highest_rarity_item:\n            second_highest_rarity_item = highest_rarity_item\n            highest_rarity_item = item\n        elif item > second_highest_rarity_item and item < highest_rarity_item:\n            second_highest_rarity_item = item\n\n    if legendary_item:\n        if second_highest_rarity_item == -1:\n            return (True, -1)\n        else:\n            return (True, second_highest_rarity_item)\n    else:\n        return (False, None)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # check if the spaceship has enough fuel to reach the planet\n    if fuel < duration:\n        return 'Insufficient fuel'\n\n    # calculate the fuel consumption for the trip\n    fuel_consumption = planet_gravity * spaceship_weight * 0.1 * duration\n\n    # calculate the remaining fuel\n    remaining_fuel = fuel - fuel_consumption\n\n    # return the remaining fuel rounded to 2 decimal points\n    return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e*2\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    max_hills = 0\n    for i in range(1, n-1):\n        left_hills = 0\n        right_hills = 0\n        # count hills to the left\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_hills += 1\n            else:\n                break\n        # count hills to the right\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                right_hills += 1\n            else:\n                break\n        max_hills = max(max_hills, left_hills+right_hills+1)\n    return max_hills\n"}
{"task_id": "EvoEval/46", "completion": "\n    def decode_message(message):\n        words = message.split()\n        decoded = \"\"\n        for word in words:\n            for char in word:\n                if char.isalpha():\n                    decoded += char.lower()\n                    break\n        if decoded == \"\":\n            return \"Take the cannoli\"\n        else:\n            return decoded\n\n    return [decode_message(message) for message in test_cases]\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for key in recipe:\n        if key not in available or recipe[key] > available[key]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \"01\": \"A\", \"1000\": \"B\", \"1010\": \"C\", \"100\": \"D\", \"0\": \"E\",\n        \"0010\": \"F\", \"110\": \"G\", \"0000\": \"H\", \"00\": \"I\", \"0111\": \"J\",\n        \"101\": \"K\", \"0100\": \"L\", \"11\": \"M\", \"10\": \"N\", \"111\": \"O\",\n        \"0110\": \"P\", \"1101\": \"Q\", \"010\": \"R\", \"000\": \"S\", \"1\": \"T\",\n        \"001\": \"U\", \"0001\": \"V\", \"011\": \"W\", \"1001\": \"X\", \"1011\": \"Y\",\n        \"1100\": \"Z\", \"01111\": \"1\", \"00111\": \"2\", \"00011\": \"3\",\n        \"00001\": \"4\", \"10000\": \"5\", \"11000\": \"6\", \"11100\": \"7\",\n        \"11110\": \"8\", \"11111\": \"9\", \" \": \"/\"\n    }\n    msg = msg.split(\" \")\n    decoded_msg = \"\"\n    for symbol in msg:\n        if symbol in morse_code:\n            decoded_msg += morse_code[symbol]\n    return decoded_msg\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': '   '\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n\n    result = \"\"\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    count = 0\n    for order in orders:\n        if order <= n * m:\n            count += 1\n            m -= 1\n        if m == 0:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    shifted_alphabet_upper = shifted_alphabet.upper()\n    result = ''\n    current_shift = shift\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += shifted_alphabet[alphabet.index(char)]\n            else:\n                result += shifted_alphabet_upper[alphabet.upper().index(char)]\n            current_shift += 1\n            if current_shift == len(alphabet):\n                current_shift = 0\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.',\n        'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.',\n        'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-',\n        'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[i] for i in s)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split(' '):\n        translated_word = ''\n        for char in word:\n            if char in vowels:\n                index = vowels.index(char)\n                translated_word += vowels[(index+1)%5]\n            elif char in consonants:\n                index = consonants.index(char)\n                translated_word += consonants[(index+1)%26]\n            else:\n                translated_word += ' '\n        translated_word = translated_word.capitalize()\n        if translated_word[0] in vowels:\n            translated_word += 'xy'\n        else:\n            translated_word += 'yz'\n        translated_phrase += translated_word + ' '\n    return translated_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the list of happy ants\n    happy_ants = 0\n\n    # Initialize the list of sugar locations\n    sugar_locations = set(sugar_locations)\n\n    # Initialize the list of ant positions and their marching directions\n    ant_positions = [(pos, direction) for pos, direction in ant_positions if pos < path_length]\n\n    # March the ants\n    for ant_position, ant_direction in ant_positions:\n        while 0 <= ant_position < path_length:\n            # Check if the ant has found a sugar location\n            if ant_position in sugar_locations:\n                happy_ants += 1\n                sugar_locations.remove(ant_position)\n                break\n\n            # Move the ant in the specified direction\n            if ant_direction == \"right\":\n                ant_position += 1\n            else:\n                ant_position -= 1\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                char = char.swapcase()\n                if char in vowels:\n                    char = vowels[(vowels.index(char) + 1) % 5]\n                else:\n                    char = consonants[(consonants.index(char) - 1) % 21]\n            else:\n                if char in vowels:\n                    char = vowels[(vowels.index(char) - 1) % 5]\n                else:\n                    char = consonants[(consonants.index(char) + 1) % 21]\n        transformed_string += char\n\n    return transformed_string\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [n for n in range(start, end + 1) if is_prime(n) and is_divisible(n, divisor)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = menu.copy()\n\n    for food, changes in order.items():\n        if \"add\" in changes:\n            final_order[food] = list(set(final_order[food] + changes[\"add\"]))\n        if \"remove\" in changes:\n            for ingredient in changes[\"remove\"]:\n                final_order[food].remove(ingredient)\n\n    return final_order\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def are_anagrams(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagrams = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagrams.append((primes[i], primes[j]))\n\n    return anagrams\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # sorcerer can use 'Swap' spell only once, so he can only swap the first element with the smallest\n    # element in the array. If the first element is the smallest, then he can rotate the array to the\n    # left until the first element is the largest, then he can swap the first element with the largest\n    # element. If the first element is not the smallest, then he can swap the first element with the\n    # smallest element.\n    # If the array is sorted in non-decreasing order, then he can rotate the array to the left until\n    # the first element is the largest, then he can swap the first element with the largest element.\n    # If the array is not sorted in non-decreasing order, then he can't sort the array using his spells.\n    # So, the sorcerer can sort the array if and only if the first element is the smallest or the array\n    # is sorted in non-decreasing order.\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    count_vowels = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_s += encrypted_char\n            if encrypted_char.lower() in vowels:\n                count_vowels += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, count_vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in range(len(lst)):\n        count = sum(c.isdigit() for c in lst[i])\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with name of '{lst[i]}' known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize the variables\n    trips = 0\n    chests = 0\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Loop through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If there is a chest\n            if grid[i][j] == 1:\n                # Calculate the number of trips needed to carry the chest\n                trips += math.ceil((chests + 1) / bag_capacity)\n                chests += 1\n\n    # Return the number of trips\n    return trips\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_str = \"\"\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            transformed_str += vowels[(vowels.index(char) + 1) % 5]\n        elif char in consonants:\n            transformed_str += consonants[(consonants.index(char) + 1) % 21]\n        elif char.isdigit():\n            transformed_str += str((int(char) + 1) % 10)\n        elif char == \"?\":\n            transformed_str += \"!\" if i % 2 == 0 else \"?\"\n        elif char == \"!\":\n            transformed_str += \"?\" if i % 2 == 0 else \"!\"\n        else:\n            transformed_str += char\n    return transformed_str\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append(lst[i] * '#')\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = {num: sum(1 for i in range(2, num // 2 + 1) if num % i == 0) for num in sequence}\n    return [points[num] for num in sorted(sequence, reverse=True)]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n//2+1):\n        res.append(mat[i][i])\n        if i != n-i-1:\n            res.append(mat[i][n-i-1])\n    for i in range(n//2+1, n):\n        res.append(mat[i][i])\n        if i != n-i-1:\n            res.append(mat[n-i-1][i])\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if days == 0 or len(prices) == 0:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        # calculate the profit if we sell the fruit today\n        profit = prices[i] - min_price\n        # update the maximum profit\n        max_profit = max(max_profit, profit)\n        # update the minimum price\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    # define the directions\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    # find the start position\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start = (i, j)\n                break\n    # initialize the path\n    path = [start]\n    # process the instructions\n    for instruction in instructions:\n        # calculate the new position\n        new_position = (path[-1][0] + directions[instruction][0], path[-1][1] + directions[instruction][1])\n        # check if the new position is valid\n        if (0 <= new_position[0] < len(map) and 0 <= new_position[1] < len(map[0]) and map[new_position[0]][new_position[1]] != 'X'):\n            path.append(new_position)\n            # check if the new position is the end\n            if map[new_position[0]][new_position[1]] == 'E':\n                break\n        else:\n            path.append(path[-1])\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for word_1, word_2 in zip(word_list, word_list[1:]):\n        for c1, c2 in zip(word_1, word_2):\n            if alien_dict[c1] > alien_dict[c2]:\n                return \"INCORRECT\"\n            elif alien_dict[c1] < alien_dict[c2]:\n                break\n        else:\n            if len(word_1) > len(word_2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_dict = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:])\n        for zodiac in zodiac_dict.keys():\n            if (month == 3 and day >= 21 and day <= 31) or (month == 4 and day <= 19):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n                elements_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n                elements_dict[z"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node]]\n        return sum([dfs(v, path + [k]) for k, v in node.items()], [])\n\n    return [list(map(lambda x: x.key, path)) for path in dfs(tree, [])]\n\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize the variables\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0 if grid[0][0] == 0 else float('inf')\n\n    # Iterate over the grid\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1 if grid[i][j] == 0 else float('inf'))\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1 if grid[i][j] == 0 else float('inf'))\n\n    # Return the minimum number of moves to reach the princess\n    return dp[coord[0]-1][coord[1]-1] if dp[coord[0]-1][coord[1]-1] != float('inf') else -1\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr and arr[0]:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n\n    return ''.join(result)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if len(data) == 2 and data[0] is not None and data[1] is not None:\n            population, size = data\n            if population >= 0 and size > 0:\n                new_dict[planet] = round(population / size, 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    aliens = [alien for alien in aliens if alien != ray and alien + 1 != ray and alien - 1 != ray]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # calculate the product\n    product = num1 * num2\n\n    # convert the product to a string and split into a list of digits\n    digits = [int(d) for d in str(product)]\n\n    # return the sum of the digits\n    return sum(digits)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = []\n    for i in range(n):\n        layer = []\n        for j in range(2*i+1):\n            if j == 0 or j == 2*i:\n                layer.append(alphabet[i%26])\n            elif j < i+1:\n                layer.append(alphabet[(i-j)%26])\n            else:\n                layer.append(alphabet[(i+j)%26])\n        fountain.append(''.join(layer))\n    return '\\n'.join(fountain)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the result\n    result = ''\n\n    # Iterate over the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet to use\n            alpha = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            pos = (alpha.index(char) + n_values[i % len(n_values)]) % len(alpha)\n\n            # Add the new character to the result\n            result += alpha[pos]\n        else:\n            # If the character is not a letter, add it to the result as is\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(\" \"), key=lambda word: (len(word), spell.index(word))))\n        for spell in strings\n    ]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Initialize sums of diagonals\n    sum_diag1 = 0\n    sum_diag2 = 0\n\n    # Calculate sum of first diagonal\n    for i in range(len(m)):\n        sum_diag1 += m[i][i]\n\n    # Calculate sum of second diagonal\n    for i in range(len(m)):\n        sum_diag2 += m[i][len(m)-i-1]\n\n    # Return absolute difference between sums of diagonals\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        if n < 0:\n            n = -n\n        product = 1\n        while n > 0:\n            digit = n % 10\n            product *= digit\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    alien_continent_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter_order = []\n    for human, continent in humans.items():\n        if continent in alien_continent_order:\n            encounter_order.append(human)\n    return encounter_order\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round in rounds:\n        current_position = (current_position + music * round) % len(players)\n        players.pop(current_position)\n    return players\n\n"}
