{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n            if item > 5:\n                total_cost += 10.0\n            else:\n                total_cost += item * 1.5\n        else:\n            total_cost += item\n\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    local_factor = 1.5\n    international_factor = 2.5\n    additional_weight_charge = 10.0\n\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        weight = item\n        if weight > 5:\n            weight = 5\n        total_cost += base_shipping_cost + (weight * local_factor) + (weight * international_factor) + additional_weight_charge\n\n    if location == 'Local':\n        total_cost *= local_factor\n    elif location == 'International':\n        total_cost *= international_factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(c: str) -> int:\n        return ord(c)\n\n    def int_to_char(i: int) -> str:\n        return chr(i)\n\n    def shift_char(c: str, key: int) -> str:\n        i = char_to_int(c)\n        return int_to_char((i + key) % 26 + ord('a'))\n\n    def shift_word(word: str, key: int) -> str:\n        return ''.join(shift_char(c, key) if c.isalpha() else c for c in word)\n\n    if isinstance(key, str):\n        key = sum(char_to_int(c) for c in key)\n\n    return [shift_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str) -> List[str]:\n        if not input_string:\n            return []\n        if len(input_string) == 1:\n            return [input_string]\n        result = []\n        for i in range(1, len(input_string) + 1):\n            first_digit = input_string[:i]\n            remaining_string = input_string[i:]\n            for combination in get_combinations(remaining_string):\n                result.append(first_digit + combination)\n        return result\n\n    return get_combinations(input_string)\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = max(candles)\n    return sum(1 for candle in candles if candle == max_candle)\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    elif grid[x][y] == -1:\n        return grid\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define starting point\n    x, y = 0, 0\n\n    # Define direction\n    direction = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Define sequence\n    sequence = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (-1, 0)}\n\n    # Check each move in sequence\n    for move in code_sequence:\n        # If move leads to Shangri-La\n        if (x + direction[move][0], y + direction[move][1]) in sequence:\n            return 'Shangri-La found'\n        # If move leads back to starting point\n        elif (x, y) == sequence[move]:\n            return 'Shangri-La found'\n        # Update position\n        x, y = x + direction[move][0], y + direction[move][1]\n\n    # If no move leads to Shangri-La\n    return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    def is_valid_canvas(canvas):\n        if 'P' not in canvas:\n            return False\n        if canvas.count('-') % 2 != 0:\n            return False\n        if '#' in set(canvas) - {'-', 'P'}:\n            return False\n        return True\n\n    def paint_canvas(canvas):\n        if not is_valid_canvas(canvas):\n            return 'Invalid canvas'\n        new_canvas = list(canvas)\n        for i, c in enumerate(new_canvas):\n            if c == 'P':\n                if i % 2 == 0:\n                    new_canvas[i] = '*'\n                else:\n                    new_canvas[i] = '*'\n        return ''.join(new_canvas)\n\n    return paint_canvas(canvas)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    words = string.split(string)\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_sounds = animal_string.split()\n    for sound in animal_sounds:\n        if sound[0] in animal_dict:\n            animal_dict[sound[0]] += 1\n    return [animal_dict[key] for key in ['C', 'D', 'B'] if key in animal_dict]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(list(count.values()))\n    sum_elements = sum(flux_values)\n    result = max_occurrence * sum_elements\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    rarest_elem = min(counts, key=counts.get)\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            if char.lower() == 'a':\n                alias += 'e' if char.islower() else 'E'\n            else:\n                alias += chr(ord(char) + 1)\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                alias += 'b' if char.islower() else 'B'\n            else:\n                alias += chr(ord(char) + 1)\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard_name = wizard[0]\n        magic_power = wizard[1]\n        dragon_hp -= magic_power\n        if dragon_hp <= 0:\n            return wizard_name\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(7)*n)\n"}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(m, i, j):\n        # check if vampire\n        if m[i][j] == 2:\n            return True\n        return False\n\n    def is_human(m, i, j):\n        # check if human\n        if m[i][j] == 1:\n            return True\n        return False\n\n    def is_empty(m, i, j):\n        # check if empty\n        if m[i][j] == 0:\n            return True\n        return False\n\n    def is_out_of_bounds(m, i, j):\n        # check if out of bounds\n        if i < 0 or j < 0 or i >= len(m) or j >= len(m[0]):\n            return True\n        return False\n\n    def share_row_or_column(m, i, j):\n        # check if share row or column\n        for k in range(len(m)):\n            if m[k][j] == 2 or m[i][k] == 2:\n                return True\n        return False\n\n    vampire_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if is_vampire(m, i, j):\n                vampire_count += 1\n            elif is_human(m, i, j) and share_row_or_column(m, i, j):\n                vampire_count += 1\n    return vampire_count\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    else:\n        return [','.join(str(i) for i in range(n, 0, -1))] + [','.join(str(i) for i in range(1, n+1)) for n in range(1, n)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in transposed:\n            if word in ''.join(i):\n                return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) or not is_word_in_col(grid, word):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance_per_year = v * t\n    distance_per_light_year = distance_per_year / light_years_per_year\n    return distance_per_light_year\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower() and char in prime_numbers:\n            result += str(prime_numbers.index(ord(char) - 96) + 1)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    # replace unique symbol symbol with their corresponding alien language symbol\n    translation_table = str.maketrans('abcdefghijklmnopqrstuvwxyz', '+-*/a@%f#$%^&*()=~<>|{}[]')\n    return english_word.translate(translation_table)\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = words.count(word)\n    if word_count == 0:\n        return (0, \"\")\n    else:\n        sentences = re.split(r'[.!]', text)\n        max_frequency_word = max(words, key=words.count)\n        return (word_count, max_frequency_word)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(pos):\n        row, col = pos\n        return 0 <= row < len(maze) and 0 <= col < len(maze[0]) and maze[row][col] == 0\n\n    def get_neighbors(pos):\n        row, col = pos\n        neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        return [pos for pos in neighbors if is_valid(pos)]\n\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        neighbors = get_neighbors(start)\n        return min([dfs(maze, neighbor, end, path) for neighbor in neighbors], key=path.index)\n\n    if start == end or maze[start[0]][start[1]] == 1:\n        return []\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return income * 0.15\n    elif income <= 45000:\n        return 25000 * 0.25 + (income - 25000) * 0.2\n    else:\n        return 45000 * 0.3 + (income - 45000) * 0.35 + (income - 130000) * 0.35\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(palindromes)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        unvisited = [(x, y) for x in range(len(maze)) for y in range(len(maze[0])) if maze[x][y] == 1]\n        next_coords = [(x, y) for x, y in unvisited if (x, y) not in path]\n        if not next_coords:\n            return None\n        for x, y in next_coords:\n            if dfs(maze, (x, y), end, path):\n                return dfs(maze, (x, y), end, path)\n        return None\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    playlist = playlist.copy()\n    for i in range(playlist_length):\n        if \"Rock\" in playlist[i]:\n            continue\n        j = seed * 16807 % 2147483647\n        playlist[i], playlist[j] = playlist[j], playlist[i]\n        seed = j\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    pass\n"}
{"task_id": "EvoEval/34", "completion": "\n    if n == 1:\n        return [0]\n    else:\n        transformation_percentages = [0] * n\n        for i in range(1, m):\n            transformation_percentages[i] = 10\n        transformation_percentages[m-1] = 100\n        for i in range(m, n):\n            transformation_percentages[i] = min(100, transformation_percentages[i-1] + 10)\n        return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    at_index = email.find(\"@\")\n    if at_index == 0 or at_index == len(email) - 1:\n        return False\n    dot_index = email.rfind(\".\")\n    if dot_index == at_index + 1 or dot_index == 0:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    ys = [0.0] * (n + 1)\n    for i in range(n + 1):\n        ys[i] = sum([xs[j] * (x ** (n - i)) for j in range(n + 1)])\n    return ys\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            transformed_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            transformed_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    def ascii_art(n, s):\n        return ('*' + '*'.join(s[i] for i in range(len(s))) + '*').join('\\n' for _ in range(n))\n\n    return ascii_art(n, s)\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\n        unique_items = set(items)\n        if len(unique_items) < 2:\n            return None\n        sorted_items = sorted(unique_items, reverse=True)\n        return sorted_items[1]\n\n    legendary_item_found = False\n    second_most_valuable_item = find_second_most_valuable_item(player_input)\n    if second_most_valuable_item is not None:\n        legendary_item_found = player_input.count(5) > 0\n    return (legendary_item_found, second_most_valuable_item)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < (distance / speed) * 0.1:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - (spaceship_weight * planet_gravity * 0.1)\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    def check_weight(weights, carrying_capacity):\n        total_weight = 0\n        for weight in weights:\n            total_weight += weight\n        return total_weight <= carrying_capacity\n\n    return check_weight(q, w) and check_weight(e, e)\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        max_view = 0\n        left = 0\n        right = 0\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                right += 1\n            else:\n                max_view = max(max_view, left + right + 1)\n                left = right = 0\n        max_view = max(max_view, left + right + 1)\n        return max_view\n\n    return find_castle(arr)\n"}
{"task_id": "EvoEval/46", "completion": "\n    def decode_message(test_case):\n        return ''.join([word[0] for word in test_case])\n\n    def find_secret_message(test_case):\n        original_message = 'Take the cannoli.'\n        decoded_message = decode_message(test_case)\n        return original_message in decoded_message.lower()\n\n    return [find_secret_message(test_case) for test_case in test_cases]\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for key, value in recipe.items():\n        if key not in available or available[key] < value:\n            return False\n        else:\n            available[key] -= value\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    pass\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010',\n        'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100',\n        'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010',\n        'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001',\n        'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011',\n        '4': '00001', '5': '00000', '6': '10000', '7': '11000', '8': '11100',\n        '9': '11110', '0': '11111', ' ': '/'\n    }\n\n    decoded_msg = \"\"\n    word = \"\"\n    for char in msg:\n        if char == ' ':\n            decoded_msg += \" \"\n        else:\n            word += morse_code_dict[char] + \" \"\n        if len(word) == 5:\n            decoded_msg += word + \" \"\n            word = \"\"\n    return decoded_msg\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',\n        '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ' ': ' ',\n    }\n    text = text.upper()\n    morse_code = ''\n    for char in text:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += char + ' '\n    return morse_code\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return ''\n    result = []\n    alphabet_index = 0\n    for char in string:\n        result.append(list_of_alphabets[alphabet_index])\n        alphabet_index = (alphabet_index + 1) % len(list_of_alphabets)\n    return ''.join(result)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n    # initialize the number of batches and the number of cookies baked\n    batches, cookies = 0, 0\n    # iterate over the orders\n    for order in orders:\n        # if the number of cookies baked is less than the number of cookies the order requires\n        while cookies < order:\n            # increment the number of batches and bake one batch\n            batches += 1\n            cookies += n\n        # if the number of batches is greater than or equal to the maximum number of batches bake in a day\n        if batches >= m:\n            # break the loop\n            break\n        # bake one more batch\n        batches += 1\n        # bake the order's number of cookies\n        cookies += order\n    # return the number of batches\n    return batches\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, char in enumerate(s):\n        if char in vowels:\n            result += char.replace(char, vowels[(vowels.index(char)+1)%5])\n        elif char in consonants:\n            result += char.replace(char, consonants[(consonants.index(char)+1)%26])\n        elif char == 'y' or char == 'Y':\n            result += 'b' if i%2==0 else 'B'\n        elif char == 'z' or char == 'Z':\n            result += 'a' if i%2==0 else 'A'\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_list.append((i, j))\n    return star_list\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def caesar_cipher(text, shift):\n        result = \"\"\n        for char in text:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            else:\n                result += char\n        return result\n\n    def jumping_caesar_cipher(text, shift):\n        result = \"\"\n        for i, char in enumerate(text):\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                shift = (shift + 1) % 26\n            else:\n                result += char\n        return result\n\n    return jumping_caesar_cipher(caesar_cipher(message, shift), shift)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[i.lower()] for i in s if i.lower() in morse_code_dict)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        return ''.join(chr(97 + (ord(c) - 97 + ord(s)) % 26) for c, s in zip(dish, spell))\n\n    return {transform_dish(dish, magic_spell): price for dish, price in menu.items()}\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        if word[0] in vowels:\n            translation += word[0] + word[1:].translate(str.maketrans(vowels, vowels[1:] + vowels[0])) + 'xy'\n        elif word[0] in consonants:\n            translation += word[0] + word[1:].translate(str.maketrans(consonants, consonants[1:] + consonants[0])) + 'yz'\n        translation += ' '\n    return translation.capitalize()\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = []\n    for ingredient, number in ingredient_dict.items():\n        ingredient_list.append((ingredient, number))\n\n    ingredient_list.sort(key=lambda x: (-x[1], x[0]))\n\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def is_sugar_present(sugar_locations, ant_position):\n        return ant_position in sugar_locations\n\n    def is_valid_move(marching_direction, ant_position, path_length):\n        if marching_direction == \"right\":\n            return ant_position + 1 < path_length\n        else:\n            return ant_position - 1 >= 0\n\n    def is_happy_ant(sugar_locations, ant_positions, ant_index):\n        ant_position, marching_direction = ant_positions[ant_index]\n        if is_sugar_present(sugar_locations, ant_position) or not is_valid_move(marching_direction, ant_position, len(sugar_locations)):\n            return False\n        return True\n\n    happy_ants_count = 0\n    for ant_index in range(len(ant_positions)):\n        if is_happy_ant(sugar_locations, ant_positions, ant_index):\n            happy_ants_count += 1\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += vowels[(vowels.index(s[i])+1)%5]\n            elif s[i] in consonants:\n                result += consonants[(consonants.index(s[i])-1)%23]\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for key, value in recipe.items():\n        new_recipe[key] = str(int(value) * conversion_factor) + key\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p < 1:\n        return []\n    result = [p]\n    for i in range(p-1, 0, -1):\n        if p % 2 == 0:\n            result.append(i-2)\n        else:\n            result.append(i-3)\n    return result\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def magical_sequence(start, end, divisor):\n        result = []\n        for i in range(start, end + 1):\n            if i % divisor == 0 and is_prime(i):\n                result.append(i)\n        return result\n\n    return magical_sequence(start, end, divisor)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        new_details = details.copy()\n        for action, item in order.get(food, {}).items():\n            if action == \"remove\":\n                if item in new_details:\n                    new_details.remove(item)\n            elif action == \"add\":\n                new_details.append(item)\n        new_menu[food] = new_details\n\n    return new_menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        for meal in meals[customer]:\n            total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotated_arr = arr[1:] + arr[:1]\n    swapped_arr = arr[:]\n    swapped_arr.sort()\n\n    for i in range(len(arr)):\n        if arr[i] != swapped_arr[i]:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n        if planet not in planets[planet]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_letter(c):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            return c\n\n    encrypted = ''.join(shift_letter(c) for c in s)\n    vowels = sum(1 for c in encrypted if c.lower() in 'aeiou')\n    return (encrypted, vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for s in lst:\n        name = s[:-2]\n        count = len(s[-2:])\n        result.append(f\"Once upon kingdom far away lived magical creature '{name}' known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def get_max_treasures(grid, capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp2 = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        dp2[0][0] = grid[0][0]\n        for i in range(1, m):\n            for j in range(n):\n                if j > 0:\n                    dp[i][j] = max(dp[i-1][j-1], dp2[i-1][j]) + grid[i][j]\n                dp2[i][j] = dp[i-1][j] + grid[i][j] if j < n-1 else dp2[i-1][j]\n        return max(dp[-1])\n    return get_max_treasures(grid, capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join([cipher.get(i, i) for i in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    result = ''\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    special_chars = '.,?! '\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        elif input_str[i] in special_chars:\n            if i%2==0:\n                result += input_str[i]\n            else:\n                result += '!' if input_str[i]=='?' else '?'\n        else:\n            result += input_str[i]\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst)):\n        level = []\n        for j in lst:\n            if i < j:\n                level.append('#')\n        pyramid.append(''.join(level))\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_helper(sequence, k):\n        points = [0] * len(sequence)\n        for i in range(len(sequence)):\n            sequence[i] = sequence[i] * k\n            while sequence[i] != 1:\n                if sequence[i] in sequence:\n                    points[i] += sequence.count(sequence[i])\n                    sequence[sequence.index(sequence[i])] = 1\n                else:\n                    sequence.append(sequence[i] // k)\n                    points.append(points[sequence.index(sequence[i])] + 1)\n                    sequence[i] = 1\n        return points\n\n    return magical_sequence_helper(sorted(sequence, reverse=True), k)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    def find_pattern_recursive(mat, i, j, n, pattern):\n        if i >= n or j >= n:\n            return\n        if i == n - 1 and j == n - 1:\n            print(pattern)\n            return\n        pattern.append(mat[i][j])\n        find_pattern_recursive(mat, i, j + 1, n, pattern)\n        pattern.pop()\n        find_pattern_recursive(mat, i + 1, j, n, pattern)\n\n    find_pattern_recursive(mat, 0, 0, len(mat), [])\n\n\nfind_pattern([[1, 2, 3, 5, 6], [7, 8, 9]])\nfind_pattern([[11, 12, 13, 14, 15, 17], [18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30], [31, 32, 33, 34, 35]])\nfind_pattern([[10, 20, 30, 40, 50, 60, 70], [80, 90, 100, 110, 120, 130, 140, 160, 170, 180, 190, 200, 210, 230, 240, 250, 260, 270, 280]])\nfind_pattern([[10, 20, 30, 40, 50, 60, 70], [80, 90, 100, 110, 120, 130, 140, 160, 170, 180, 190, 200, 210, 230, 24"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit if max_profit > 0 else 0\n\nprices = [1, 5, 2, 8, 7, 3]\ndays = 5"}
{"task_id": "EvoEval/80", "completion": "\n    def move(player, direction):\n        if direction == 'up':\n            player[0] -= 1\n        elif direction == 'down':\n            player[0] += 1\n        elif direction == 'left':\n            player[1] -= 1\n        elif direction == 'right':\n            player[1] += 1\n        return player\n\n    player = [map.index(2), map[0].index(2)]\n    instructions = instructions.split()\n    path = [(player[0], player[1])]\n\n    for ins in instructions:\n        if ins == 'up' and map[player[0]-1][player[1]] != 'X':\n            player = move(player, ins)\n            path.append((player[0], player[1]))\n        elif ins == 'down' and map[player[0]+1][player[1]] != 'X':\n            player = move(player, ins)\n            path.append((player[0], player[1]))\n        elif ins == 'left' and map[player[0]][player[1]-1] != 'X':\n            player = move(player, ins)\n            path.append((player[0], player[1]))\n        elif ins == 'right' and map[player[0]][player[1]+1] != 'X':\n            player = move(player, ins)\n            path.append((player[0], player[1]))\n        else:\n            return path\n\n    if map[player[0]][player[1]] == 'E':\n        return path\n    else:\n        return []\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list)-1):\n        if word_list[i] > word_list[i+1]:\n            return \"INCORRECT\"\n    sorted_word_list = sorted(word_list, key=alien_dictionary.index)\n    if sorted_word_list == word_list:\n        return \"CORRECT\"\n    else:\n        return \"INCORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aquarius\": [\"01-02\", \"02-01\", \"02-20\", \"03-01\"],\n        \"Pisces\": [\"03-02\", \"04-01\", \"04-19\", \"05-01\"],\n        \"Aries\": [\"05-01\", \"06-01\", \"06-20\", \"07-01\"],\n        \"Taurus\": [\"07-01\", \"08-01\", \"08-20\", \"09-01\"],\n        \"Gemini\": [\"09-01\", \"10-01\", \"10-20\", \"11-01\"],\n        \"Cancer\": [\"11-01\", \"12-01\", \"12-20\", \"13-01\"],\n        \"Leo\": [\"13-01\", \"14-01\", \"14-20\", \"15-01\"],\n        \"Virgo\": [\"15-01\", \"16-01\", \"16-20\", \"17-01\"],\n        \"Libra\": [\"17-01\", \"18-01\", \"18-20\", \"19-01\"],\n        \"Scorpio\": [\"19-01\", \"20-01\", \"20-20\", \"21-01\"],\n        \"Sagittarius\": [\"21-01\", \"22-01\", \"22-20\", \"23-01\"],\n        \"Capricorn\": [\"23-01\", \"24-01\", \"24-30\", \"25-01\"],\n        \"Aquarius\": [\"25-01\", \"26-01\", \"26-30\", \"27-01\"]\n    }\n\n    result = {}\n    for birthday in birthdays:\n        for sign, dates in zodiac_signs.items():\n            if any(date in birthday for date in dates):\n                if sign not in"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path=[]):\n        for k, v in tree.items():\n            if isinstance(v, dict):\n                dfs(v, path + [k])\n            else:\n                paths.append(path + [k])\n\n    paths = []\n    dfs(tree)\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid(x, y, grid):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    def bfs(start, grid):\n        moves = 0\n        queue = [(start, moves)]\n        visited = {start}\n        while queue:\n            current, moves = queue.pop(0)\n            if current == (princess_x, princess_y):\n                return moves\n            for dx, dy in [(0, 1), (1, 0)]:\n                new_x, new_y = current[0] + dx, current[1] + dy\n                if is_valid(new_x, new_y, grid) and (new_x, new_y) not in visited:\n                    visited.add((new_x, new_y))\n                    queue.append(((new_x, new_y), moves + 1))\n        return -1\n\n    princess_x, princess_y = coord\n    return bfs((0, 0), grid)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    # sorting the movies by ratings\n    sorted_movies_by_ratings = sorted(movies_dict.items(), key=lambda x: x[1][0], reverse=True)\n\n    # sorting the movies by release year\n    sorted_movies_by_release_year = sorted(sorted_movies_by_ratings, key=lambda x: x[1][1])\n\n    # return the names of the movies\n    return [movie[0] for movie in sorted_movies_by_release_year]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr or not arr[0]:\n            return \"\"\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return \"\".join(res)\n\n    print(word_spiral([['h','i''!']'b','y','e']] 'hi!eyb')\n    print(word_spiral([['l','o','v','e']'i''s''i'n']'t','h','e''a''i','r' '!''!!']] 'lovena!!!ritisieh')\n    print(word_spiral([]) '')\n\nword_spiral()\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            population_density = data[0] / data[1]\n            new_dict[planet] = round(population_density, 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_alien(pos):\n        return pos % 2 != 0\n\n    def is_adjacent(pos, aim):\n        return abs(pos - aim) == 1\n\n    def is_ray_gun_position(pos, aim):\n        return pos == aim or is_adjacent(pos, aim)\n\n    def destroy_alien(pos, aim):\n        return pos if is_alien(pos) and not is_ray_gun_position(pos, aim) else pos + 1\n\n    return [destroy_alien(pos, ray) for pos in aliens]\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        s = sorted(s)\n        result = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                result.add(int(s[i] + s[j]))\n                result.add(int(s[j] + s[i]))\n        return result\n\n    s1 = get_combinations(s1)\n    s2 = get_combinations(s2)\n    return sum(s1 & s2)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\":\n            if status == \"On Ground\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action == \"Move\":\n            if status == \"In Space\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action == \"Land\":\n            if status == \"In Space\":\n                status = \"On Ground\"\n            else:\n                return \"Invalid Action Sequence\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i:i+n]\n        layer = layer.center(2*n-1)\n        result.append(layer)\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_string(s, n):\n        return ''.join(shift_char(c, n) for c in s)\n\n    n_values = n_values[:len(message)]\n    return ' '.join(shift_string(m, n) for m, n in zip(message, n_values))\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not isinstance(m, list) or not all(isinstance(i, list) for i in m):\n        return 'Invalid Matrix'\n    if not all(len(i) == len(m) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(isinstance(j, int) for j in i) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(j == i for i in m) for i in m):\n        return 'Invalid Matrix'\n\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(diagonal1 - diagonal2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    continents = {\n        \"Asia\": \"South America\",\n        \"Africa\": \"North America\",\n        \"North America\": \"South America\",\n        \"South America\": \"Europe\",\n        \"Europe\": \"Africa\"\n    }\n\n    if alien not in continents:\n        return []\n\n    encounter_order = [human for human in continents if continents[alien] == human]\n    return sorted(encounter_order)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[i-1] + sequence[i-2]\n        sequence.append(next_number)\n        if is_prime(next_number):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def play_round(n, music):\n        return [(i+1)%n for i in range(n) if (i+1)%music != 0]\n\n    players = list(range(1, n+1))\n    for i, time in enumerate(rounds):\n        print(f\"Round {i+1}:\")\n        players = play_round(len(players), time)\n        print(f\"Players left: {players}\")\n    return players\n"}
