{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0 * 1.5\n        else:\n            total_cost += 5.0\n            if item > 5:\n                total_cost += 10.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    \n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    \n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shifted_char = chr(((ord(char.lower()) - ord('a') + shift) % 26) + ord('a'))\n                result += shifted_char\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def dfs(s, path):\n        if not s:\n            res.append(path)\n            return\n        if s[0] != '0':\n            dfs(s[1:], path + chr(int(s[0]) + ord('a') - 1))\n        if len(s) > 1 and s[0] != '0' and int(s[:2]) <= 26:\n            dfs(s[2:], path + chr(int(s[:2]) + ord('a') - 1))\n    \n    res = []\n    dfs(input_string, '')\n    return res\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    lit_candles = 1\n    for i in range(1, len(candles)):\n        if candles[i] > candles[i - 1]:\n            lit_candles += 1\n    return lit_candles\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 0:\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == 1:\n                    grid[x][y] += 1\n        return grid\n    grid[x][y] = 0\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    pass  # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = animal_string.split(' ')\r\n    result = []\r\n    count = {}\r\n    for sound in sounds:\r\n        if sound in animals:\r\n            if sound not in count:\r\n                count[sound] = 1\r\n            else:\r\n                count[sound] += 1\r\n            if count[sound] > 2:\r\n                continue\r\n            result.append(count[sound])\r\n        if len(result) == 5:\r\n            break\r\n    return result\r\n\n\r\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    max_occurrence_numbers = [num for num, freq in count.items() if freq == max_occurrence]\n    return sum(flux_values) * min(max_occurrence_numbers)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    rarest_elem = min(counts, key=counts.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of first two numbers in Fibonacci sequence\n        for i in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    num = 7\n    while True:\n        if sum_of_digits(num) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n    count = 0\n    for i in range(len(vampires)):\n        for j in range(i + 1, len(vampires)):\n            if vampires[i][0] == vampires[j][0] or vampires[i][1] == vampires[j][1]:\n                count += 1\n    return count * 2\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    N = len(grid)\n    for word in words:\n        for i in range(N):\n            for j in range(N):\n                if grid[i][j] == word[0]:\n                    # check right\n                    if j + len(word) <= N and ''.join(grid[i][j:j+len(word)]) == word:\n                        break\n                    # check left\n                    if j - len(word) >= -1 and ''.join(grid[i][j-len(word)+1:j+1]) == word:\n                        break\n                    # check down\n                    if i + len(word) <= N and ''.join(grid[i:i+len(word)][j]) == word:\n                        break\n                    # check up\n                    if i - len(word) >= -1 and ''.join(grid[i-len(word)+1:i+1][j]) == word:\n                        break\n            else:\n                return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9461000000\n    return t * v / light_year\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^',\n                  'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>',\n                  'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for char in english_word:\n        translated_word += alien_dict[char]\n    return translated_word\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence.strip() if max_sentence else \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 50, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 40, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)] + [s[-(len(s) % n):]] if len(s) % n else [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 126, in <module>\n  File \"<string>\", line 124, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] * 2 if transformation_percentages else 20))\n        else:\n            transformation_percentages.append(min(100, max(0, transformation_percentages[-1] + (10 if day < m - 1 else -10))))\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 35, in werewolf_transformation\n            transformation_percentages.append(min(100, max(0, transformation_percentages[-1] + (10 if day < m - 1 else -10))))\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\n        return False\n    if email.index(\"@\") == 0 or email.index(\"@\") == len(email) - 1:\n        return False\n    if email.index(\".\") < email.index(\"@\"):\n        return False\n    if email.count(\"@\") != 1 or email.count(\".\") < 2:\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    next_consonant = {c: consonants[(i + 1) % len(consonants)] for i, c in enumerate(consonants)}\n    next_consonant.update({c.upper(): next_consonant[c].upper() for c in consonants})\n\n    def transform_char(c):\n        if c.lower() in vowels:\n            return next_vowel[c.lower()].upper() if c.isupper() else next_vowel[c.lower()]\n        elif c.lower() in consonants:\n            return next_consonant[c.lower()].upper() if c.isupper() else next_consonant[c.lower()]\n        else:\n            return c\n\n    return ''.join(transform_char(c) for c in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # Create the ASCII art\n    art = \"*\" + s * n + \"*\"\n    for i in range(n):\n        art += \"\\n*\" + s * n + \"*\"\n    art += \"\\n*\" + s * n + \"*\"\n    return art\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    if 5 in player_input:\n        legendary_item = True\n        second_most_valuable = sorted(set(player_input), reverse=True)[1] if len(set(player_input)) > 1 else -1\n    else:\n        legendary_item = False\n        second_most_valuable = None\n    return (legendary_item, second_most_valuable)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    trip_duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption * trip_duration\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    return total_weight <= w + e * len(q) // 2\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view)\n    return max_view + 1  # Adding 1 to include the current hill as part of the view.", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            for char in word:\n                if char.isalpha():\n                    secret_message += char.lower()\n                    break\n        if secret_message:\n            result.append(secret_message)\n        else:\n            result.append('Take cannoli')\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    decoded_message = \"\"\n    word = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code_dict[word]\n            word = \"\"\n        elif char == \"/\":\n            decoded_message += morse_code_dict[word] + \" \"\n            word = \"\"\n        else:\n            word += char\n    decoded_message += morse_code_dict[word]\n    return decoded_message.upper()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 156, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 40, in morse_decoder\n            decoded_message += morse_code_dict[word] + \" \"\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.'\n                       , 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---'\n                       , 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---'\n                       , 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-'\n                       , 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--'\n                       , 'Z': '--..', ' ': '   '}\n    morse_code = ''\n    for char in text.upper():\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    encoded_string = ''\n    for i, char in enumerate(string):\n        encoded_string += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return encoded_string\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    total_orders = 0\n    for order in orders:\n        if order <= n:\n            total_orders += 1\n        else:\n            break\n    return min(total_orders, m)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        else:\n            transformed += '!' if i % 2 == 0 else '?'\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += shifted_char\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n    morse_code = \"\"\n    for char in s:\n        if char != \" \":\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += \"/ \"\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        first_letter = word[0]\n        if first_letter in vowels:\n            translated_word = 'xy'\n        else:\n            translated_word = 'yz'\n        for letter in word:\n            if letter in vowels:\n                index = vowels.index(letter)\n                translated_word += vowels[(index + 1) % len(vowels)]\n            elif letter in consonants:\n                index = consonants.index(letter)\n                if letter == 'z':\n                    translated_word += 'b'\n                else:\n                    translated_word += consonants[(index + 1) % len(consonants)]\n            else:\n                translated_word += '@'\n        translated_phrase += translated_word.capitalize() + ' '\n    return translated_phrase.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    sugar_count = 0\n    for ant in ant_positions:\n        if ant[0] in sugar_locations:\n            sugar_count += 1\n    return sugar_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                result += char.swapcase()\n            else:\n                # Replace vowels with next vowel\n                if char.lower() in vowels:\n                    index = (vowels.index(char.lower()) + 1) % len(vowels)\n                    result += vowels[index].upper() if char.isupper() else vowels[index]\n                # Replace consonants with preceding consonant\n                else:\n                    index = (consonants.index(char.lower()) - 1) % len(consonants)\n                    result += consonants[index].upper() if char.isupper() else consonants[index]\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(start, end + 1) if is_prime(num) and num % divisor == 0]\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, details in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            if \"remove\" in details:\n                for ingredient in details[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in details:\n                final_order[food].extend(details[\"add\"])\n    return final_order if final_order else menu\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = [(prime_numbers[i], prime_numbers[j]) for i in range(len(prime_numbers)) for j in range(i+1, len(prime_numbers)) if is_anagram(prime_numbers[i], prime_numbers[j])]\n\n    return anagram_pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    arr_copy = arr[:]\n    arr_copy.sort()\n    for i in range(len(arr)):\n        if arr == arr_copy:\n            return True\n        arr = arr[-1:] + arr[:-1]\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_s += char\n    return encrypted_s, vowel_count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        digit_count = sum(c.isdigit() for c in i)\n        result.append(f\"Once upon time, in kingdom far away, lived magical creature name '{i}' known for telling {digit_count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\n    # Initialize variables\n    num_trips = 0\n    num_chests = 0\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    \n    # Count the number of treasures in the pyramid\n    for row in grid:\n        for chest in row:\n            if chest == 1:\n                num_chests += 1\n    \n    # Calculate the number of trips needed to collect all treasures\n    while num_chests > 0:\n        # Enter the pyramid\n        num_trips += 1\n        \n        # Collect treasures from the current chamber\n        for row in range(num_rows):\n            for col in range(num_cols):\n                if grid[row][col] == 1:\n                    num_chests -= 1\n                    if num_chests == 0:\n                        break\n        \n        # Exit the pyramid\n        num_trips += 1\n        \n        # Move to the next chamber\n        if num_cols > 1:\n            num_cols -= 1\n        else:\n            num_rows -= 1\n    \n    return num_trips\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 180, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(char, char) for char in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n, k):\n        points = 0\n        while n >= 1:\n            if n % k == 0:\n                points += 1\n                n = n // k\n            else:\n                break\n        return points\n\n    sequence.sort(reverse=True)\n    points_list = [count_points(num, k) for num in sequence]\n    return points_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            if prices[j] - prices[i] > max_profit:\n                max_profit = prices[j] - prices[i]\n    return max_profit\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    start = None\n    end = None\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start = (i, j)\n            elif map[i][j] == 'E':\n                end = (i, j)\n    if start is None or end is None:\n        return []\n    path = [start]\n    for instruction in instructions:\n        if instruction == 'up' and start[0] > 0 and map[start[0] - 1][start[1]] != 'X':\n            start = (start[0] - 1, start[1])\n            path.append(start)\n        elif instruction == 'down' and start[0] < len(map) - 1 and map[start[0] + 1][start[1]] != 'X':\n            start = (start[0] + 1, start[1])\n            path.append(start)\n        elif instruction == 'left' and start[1] > 0 and map[start[0]][start[1] - 1] != 'X':\n            start = (start[0], start[1] - 1)\n            path.append(start)\n        elif instruction == 'right' and start[1] < len(map[0]) - 1 and map[start[0]][start[1] + 1] != 'X':\n            start = (start[0], start[1] + 1)\n            path.append(start)\n        if start == end:\n            break\n    return path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 172, in <module>\n  File \"<string>\", line 170, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        zodiac = zodiac_signs[birthday[0:4]]\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            elements_count[\"Fire\"] += 1\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            elements_count[\"Earth\"] += 1\n        elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n            elements_count[\"Air\"] += 1\n        elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n            elements_count[\"Water\"] += 1\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n            elements_count[\"Fire\"] += 1\n        elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n            elements_count[\"Earth\"] += 1\n        elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n            elements_count[\"Air\"] += 1\n        elif (month == 10 and day >= 23", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 68\n        elif (month == 10 and day >= 23\n    elif (month == 10 and day >= 23\n         ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 29, in dfs\n            paths.append(path + [node['value']])\nKeyError: 'value'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.keys(), key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\n    return sorted_movies\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.keys(), key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\n  File \"<string>\", line 24, in <lambda>\n    sorted_movies = sorted(movies_dict.keys(), key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    if not dict_of_planets:\n        return {}\n    return {planet: round(population / size, 2) for planet, [population, size] in dict_of_planets.items() if population and size}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def combinations(s):\n        result = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                result.add(int(''.join(s[i:j])))\n        return result\n\n    def product(s):\n        result = 1\n        for num in combinations(s):\n            result *= num\n        return result\n\n    return product(s1) * product(s2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            status = 'In Space'\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        fountain += layer + '\\n'\n    return fountain.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_index = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_index]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    # split each spell into words\n    words = [spell.split() for spell in strings]\n    # sort each spell by word length\n    sorted_spells = [' '.join(sorted(spell, key=len)) for spell in words]\n    return sorted_spells\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        product = 1\n        for digit in str(abs(n)):\n            product *= int(digit)\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]:\n        for human, home in humans.items():\n            if home == continent and alien in human:\n                encountered.append(human)\n    return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    for i in range(2, len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence[:n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round_duration in rounds:\n        for _ in range(round_duration):\n            position = (position + music) % n\n        players.pop(position)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 32, in musical_chairs\n        players.pop(position)\nIndexError: pop index out of range\n", "passed": false}
