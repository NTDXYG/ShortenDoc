{"task_id": "EvoEval/0", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Initialize flag to track if any item is a string\n    string_item_encountered = False\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If item is a string, consider it as 1kg and set flag to True\n        if isinstance(item, str):\n            item = 1.0\n            string_item_encountered = True\n        \n        # Add base shipping cost to total cost\n        total_cost += 5.0\n        \n        # If item weight is more than 5kg, add additional charge\n        if item > 5.0:\n            total_cost += 10.0\n        \n        # If string item encountered, multiply total cost by 1.5\n        if string_item_encountered:\n            total_cost *= 1.5\n            string_item_encountered = False\n    \n    # Apply location factor to total cost\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    \n    # Return total shipping cost rounded to two decimal places as string\n    return \"{:.2f}\".format(total_cost)  # <--- changed here\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0.0\n    \n    # Define location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    # Get the location factor\n    factor = location_factors.get(location, 1.0)\n    \n    # Iterate over each item\n    for item in items:\n        # If item is a string, consider it as 1kg\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        \n        # Add base shipping cost\n        total_cost += 5.0\n        \n        # If weight is more than 5kg, add additional charge\n        if weight > 5.0:\n            total_cost += 10.0\n        \n        # Multiply total cost by location factor\n        total_cost *= factor\n    \n    # Return total shipping cost rounded to two decimal places\n    return round(total_cost, 2)  # <--- Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 97 if char.islower() else 65\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Convert the input string to a list of integers\n    input_list = [int(i) for i in input_string]\n    \n    # Define a dictionary to map digits to letters\n    digit_to_letter = {str(i): chr(96 + i) for i in range(1, 27)}\n    \n    # Define a dictionary to map letters to digits\n    letter_to_digit = {chr(96 + i): str(i) for i in range(1, 27)}\n    \n    # Define a dictionary to store the combinations\n    combinations = {}\n    \n    # Iterate over the input list\n    for i in range(len(input_list)):\n        # If the current element is not in the combinations dictionary, add it\n        if input_list[i] not in combinations:\n            combinations[input_list[i]] = [input_list[i]]\n        # If the current element is already in the combinations dictionary, append it to the list\n        else:\n            combinations[input_list[i]].append(input_list[i])\n    \n    # Iterate over the combinations dictionary\n    for key, value in combinations.items():\n        # Initialize an empty string to store the current combination\n        current_combination = ''\n        # Iterate over the value list\n        for j in range(len(value)):\n            # If the current element is not the last element in the list, append the corresponding letter to the current combination\n            if j < len(value) - 1:\n                current_combination += digit_to_letter[letter_to_digit[value[j]]] + ','\n            # If the current element is the last element in the list, append the corresponding letter to the current combination\n            else:\n                current_combination += digit_to_letter[letter_to_digit[value[j]]]\n        # Append the current combination to the result list\n        result.append(current_combination)\n    \n    # Return the result list\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    count = 1\n    for height in candles[1:]:\n        if height > max_height:\n            max_height = height\n            count += 1\n    return count\n    pass"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    for row in matrix:\n        if left > right:\n            break\n        # Traverse from left to right\n        for i in range(left, right + 1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n        # Traverse from right to left\n        for i in range(right, left - 1, -1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Check if the position is out of the grid\n    if position[0] < 0 or position[0] >= rows or position[1] < 0 or position[1] >= cols:\n        return grid\n    \n    # Get the value of the cell at the clicked position\n    cell_value = grid[position[0]][position[1]]\n    \n    # If the cell is a mine, return the initial grid\n    if cell_value == 1:\n        return grid\n    \n    # If the cell is empty, convert adjacent cells to 0\n    if cell_value == 0:\n        # Get the adjacent cells\n        adjacent_cells = get_adjacent_cells(position, rows, cols)\n        \n        # Convert adjacent cells to 0\n        for cell in adjacent_cells:\n            grid[cell[0]][cell[1]] = 0\n        \n        # If all adjacent cells are empty, return the initial grid\n        if all(grid[cell[0]][cell[1]] == 0 for cell in adjacent_cells):\n            return grid\n    \n    # If the cell is clicked and revealed 0, return the initial grid\n    if cell_value == -1:\n        return grid\n    \n    # If none of the above conditions are met, return the updated grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Initialize current position at (0,0)\n    current_position = [0, 0]\r\n    # Iterate over each direction in the code sequence\r\n    for direction in code_sequence:\r\n        # Update current position based on the direction\r\n        if direction == 0:\r\n            current_position[0] += 1\r\n        elif direction == 1:\r\n            current_position[1] += 1\r\n        elif direction == 2:\r\n            current_position[0] -= 1\r\n        elif direction == 3:\r\n            current_position[1] -= 1\r\n        # If current position is back at the starting point, return 'Shangri-La found'\r\n        if current_position == [0, 0]:\r\n            return 'Shangri-La found'\r\n    # If the sequence leads back to the starting point, return 'Shangri-La found'\r\n    if current_position == [0, 0]:\r\n        return 'Shangri-La found'\r\n    # Otherwise, return 'Shangri-La not found'\r\n    return 'Shangri-La not found'\r\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Check if there is more than one 'P' in the canvas\n    if canvas.count('P') > 1:\n        return 'Invalid canvas'\n\n    # Find the position of the 'P'\n    painter_pos = canvas.find('P')\n\n    # If no 'P' is found, return the canvas as it is\n    if painter_pos == -1:\n        return canvas\n\n    # Initialize variables to keep track of the number of painted spaces and empty spaces\n    painted_spaces = 0\n    empty_spaces = 0\n\n    # Count the number of empty spaces\n    for char in canvas:\n        if char == '-':\n            empty_spaces += 1\n\n    # Initialize a variable to keep track of the current position\n    current_pos = painter_pos\n\n    # Loop through the canvas until the painter reaches the end or hits a wall\n    while current_pos < len(canvas) and canvas[current_pos] != '#':\n        # If the current position is an empty space, paint it and increment the count\n        if canvas[current_pos] == '-':\n            canvas = canvas[:current_pos] + '*' + canvas[current_pos + 1:]\n            painted_spaces += 1\n        # Move to the next position\n        current_pos += 1\n\n    # Check if the number of painted spaces divides the number of empty spaces evenly\n    if painted_spaces % empty_spaces != 0:\n        return 'Invalid canvas'\n\n    # Return the updated canvas\n    return canvas\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Convert the string to lower case to ignore case sensitivity\n    string = string.lower()\n    # Remove punctuation from the string\n    string = ''.join(e for e in string if e.isalnum() or e.isspace())\n    # Split the string into words\n    words = string.split()\n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    # Iterate over each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its frequency by 1\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a frequency of 1\n        else:\n            frequency[word] = 1\n    # Return the dictionary of word frequencies\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_count = {}\r\n    result = []\r\n    animal_string = animal_string.split()\r\n    for animal in animal_string:\r\n        if animal in animal_sounds:\r\n            if animal not in animal_count:\r\n                animal_count[animal] = 1\r\n                result.append(len(animal) - animal.count('|'))\r\n            elif animal_count[animal] < 2:\r\n                animal_count[animal] += 1\r\n                result.append(len(animal) - animal.count('|'))\r\n        if len(result) == 5:\r\n            break\r\n    return result\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    # Check if there is only one fruit\n    if len(fruits) == 1:\n        # If there is only one fruit, return the message with the fruit and location\n        return f\"Oh are {fruits[0]} from {location}? Marvelous!\"\n    # Check if there are two fruits\n    elif len(fruits) == 2:\n        # If there are two fruits, return the message with the two fruits and location\n        return f\"Oh are {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    # If there are more than two fruits, return the message with the first three fruits and location\n    else:\n        # Return the message with the first three fruits and location\n        return f\"Oh are {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with the maximum occurrence, if multiple select the smallest one\n    max_count = max(count_dict.values())\n    most_occurred_num = min([num for num, count in count_dict.items() if count == max_count])\n\n    # Find the sum of all elements in the array\n    total_sum = sum(flux_values)\n\n    # Multiply the sum of all elements with the most occurred number\n    energy_signature = total_sum * most_occurred_num\n\n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [elem for elem, count in count_dict.items() if count == min_count]\n    return rarest_elements[0]  # return first rarest element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = (vowels.index(char.lower()) + 1) % len(vowels)\n                alias += vowels[index] if char.islower() else vowels[index].upper()\n            else:\n                index = (consonants.index(char.lower()) + 1) % len(consonants)\n                alias += consonants[index] if char.islower() else consonants[index].upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # create dictionary to map card values to their scores\n    card_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 1}\n    # create dictionary to map card values to their counts\n    card_counts = {}\n    # iterate over each card in hand\n    for card in hand:\n        # extract value from card\n        value = card[:-1]\n        # increment count for value in card_counts\n        card_counts[value] = card_counts.get(value, 0) + 1\n    # initialize score to 0\n    score = 0\n    # check for pairs\n    pairs = [value for value, count in card_counts.items() if count == 2]\n    # check for triples\n    triples = [value for value, count in card_counts.items() if count == 3]\n    # check for fours\n    fours = [value for value, count in card_counts.items() if count == 4]\n    # check for fives\n    fives = [value for value, count in card_counts.items() if count == 5]\n    # if there are pairs, add score to score\n    if pairs:\n        score += sum(card_values[value] for value in pairs)\n    # if there are triples, add score to score\n    if triples:\n        score += sum(card_values[value] * 2 for value in triples)\n    # if there are fours, add score to score\n    if fours:\n        score += sum(card_values[value] * 3 for value in fours)\n    # if there are fives, add score to score\n    if fives:\n        score += sum(card_values[value] * 4 for value in fives)\n    # return score\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return a + b\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard_name, magic_power in wizards:\n        dragon_hp -= magic_power\n        if dragon_hp <= 0:\n            return wizard_name\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(magical_seven(n-1)) + '0') + 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Initialize count of humans in danger\n    count = 0\n    # Iterate over each row in the matrix\n    for i in range(len(m)):\n        # Iterate over each cell in the row\n        for j in range(len(m[i])):\n            # If the cell is a vampire\n            if m[i][j] == 2:\n                # Iterate over each cell in the row\n                for k in range(len(m[i])):\n                    # If the cell is a human and not the same cell\n                    if m[i][k] == 1 and k != j:\n                        # Increment the count\n                        count += 1\n                # Iterate over each cell in the column\n                for k in range(len(m)):\n                    # If the cell is a human and not the same cell\n                    if m[k][j] == 1 and k != i:\n                        # Increment the count\n                        count += 1\n    # Return the count\n    return count\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if grid is square\n    if len(grid) != len(grid[0]):\n        return False\n\n    # Check if all words are lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    # Check if all words are in the grid\n    for word in words:\n        found = False\n        # Check horizontally\n        for row in grid:\n            for i in range(len(row)):\n                if row[i] == word[0]:\n                    if i + len(word) <= len(row) and ''.join(row[i:i+len(word)]) == word:\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            # Check vertically\n            for col in range(len(grid[0])):\n                for i in range(len(grid)):\n                    if grid[i][col] == word[0]:\n                        if i + len(word) <= len(grid) and ''.join([grid[j][col] for j in range(i, i+len(word))]) == word:\n                            found = True\n                            break\n                if found:\n                    break\n        if not found:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return (v * t) / (9.461 * (10 ** 12))\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    prime_dict = {chr(i): nth_prime(i - 96) for i in range(97, 123)}\n    return ''.join(str(prime_dict[c]) if c.isalpha() else c for c in s)  # <--- changed here\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$',\n        'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~',\n        't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    alien_word = ''\n    for char in english_word:\n        alien_word += alien_dict.get(char.lower(), char)\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split(\". \")\n    # Initialize a dictionary to store the frequency of each word\n    word_freq = {}\n    # Initialize a variable to store the maximum frequency\n    max_freq = 0\n    # Initialize a variable to store the sentence with the maximum frequency\n    max_sentence = \"\"\n    # Iterate over each sentence\n    for sentence in sentences:\r\n        # Split the sentence into words\r\n        words = sentence.split()\r\n        # Iterate over each word in the sentence\r\n        for w in words:\r\n            # If the word is the same as the given word, increment its frequency\r\n            if w == word:\r\n                word_freq[sentence] = word_freq.get(sentence, 0) + 1\r\n                # If the frequency of the word is greater than the maximum frequency, update the maximum frequency and the sentence with the maximum frequency\r\n                if word_freq[sentence] > max_freq:\r\n                    max_freq = word_freq[sentence]\r\n                    max_sentence = sentence\r\n    # Return the frequency of the word and the sentence with the maximum frequency\r\n    return (max_freq, max_sentence) if max_freq > 0 else (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n\n    # Define the possible movements\n    movements = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n\n    # Create a queue for BFS and add the start position\n    queue = [(start, [])]\n\n    # Create a set to store the visited positions\n    visited = set([start])\n\n    while queue:\n        # Get the current position and path\n        (x, y), path = queue.pop(0)\n\n        # Check if the current position is the end\n        if (x, y) == end:\n            return path\n\n        # Check all possible movements\n        for dx, dy, direction in movements:\n            nx, ny = x + dx, y + dy\n\n            # Check if the new position is inside the maze and is not a wall\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and maze[nx][ny] == 0 and (nx, ny) not in visited:\n                # Add the new position to the queue and mark it as visited\n                queue.append(((nx, ny), path + [direction]))\n                visited.add((nx, ny))\n\n    # If there is no path to the end, return an empty list\n    return []  # This line will never be reached\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income\n    taxable_income = income - deductions\n\n    # Calculate tax for each income bracket\n    tax_free = min(taxable_income, 10000)\n    taxable_income -= tax_free\n    tax_15 = min(taxable_income, 25000) * 0.15\n    taxable_income -= tax_15\n    tax_25 = min(taxable_income, 45000) * 0.25\n    taxable_income -= tax_25\n    tax_30 = taxable_income * 0.30\n\n    # Calculate deductions\n    deductions_1_to_1 = min(deductions, 1000)\n    deductions_2_to_1 = min(deductions - 1000, 2000)\n    deductions_3_to_1 = max(deductions - 3000, 0)\n    deductions_total = deductions_1_to_1 + (deductions_2_to_1 * 2) + (deductions_3_to_1 * 3)\n\n    # Calculate total tax\n    total_tax = tax_free + tax_15 + tax_25 + tax_30 - deductions_total\n\n    return total_tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    n = len(s)\n    palindrome_substrings = set()\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            substring = s[i:i + length]\n            if substring == substring[::-1]:\n                palindrome_substrings.add(substring)\n    return sorted(list(palindrome_substrings))  # sorted list of unique palindrome substrings\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements in the maze (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, enqueue the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store the visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the next point\n        (x, y), path = queue.pop(0)\n        \n        # If this is the destination point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is within the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited\n                visited.add((nx, ny))\n                \n                # Enqueue the new point\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If there is no path to the destination, return an empty list\n    return []\n\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    # There is only one way to reach any cell in the first row or first column\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for j in range(n + 1):\n        dp[0][j] = 1\n    # For each cell, the number of unique paths is the sum of the number of unique paths to the cell above and the cell to the left\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # The number of unique paths to the bottom-right corner is stored in the bottom-right cell of the 2D array\n    return dp[m][n]\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            swap_index = (seed * 16807) % 2147483647 % playlist_length\n            playlist[i], playlist[swap_index] = playlist[swap_index], playlist[i]\n            seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\r\n    ways[0] = 1  # There is one way to reach the first step (i.e., don't move)\r\n    for i in range(1, n + 1):\r\n        for stone in magic_stones:\r\n            if i >= stone:\r\n                ways[i] += ways[i - stone]\r\n    return ways[n]  # Return the number of ways to reach the top of the staircase\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = []\n    if m == 1:\n        transformation.append(0)\n    else:\n        transformation.append(0)\n    for i in range(1, n):\n        if i == m - 1:\n            transformation.append(min(100, transformation[i - 1] * 2))\n        elif i < m:\n            transformation.append(min(100, transformation[i - 1] + 10))\n        else:\n            transformation.append(min(100, transformation[i - 1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\":\r\n        return False\r\n    at_index = email.index('@')\r\n    if email[at_index + 1] == '.':\r\n        return False\r\n    if email.count('@') > 1:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i in range(len(xs)):\n        integral_coefficients.append(xs[i] / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for char in s:\n        if char in vowels:\n            idx = vowels.index(char)\n            if idx == 4:\n                result += vowels[0]\n            else:\n                result += vowels[idx + 1]\n        elif char in consonants:\n            idx = consonants.index(char)\n            if idx == 21:\n                result += consonants[0]\n            else:\n                result += consonants[idx + 1]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the top and bottom frames\n    frame = \"*\" * (n * len(s) + 3)\n    # Create the middle part of the ASCII art\n    middle = \"*\" + s * n + \"*\"\n    # Create the ASCII art by repeating the middle part n times\n    ascii_art = \"\\n\".join([frame, middle] + [middle] * (n - 2) + [frame])\n    return ascii_art\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [int(potion.split()[1]) for potion in potions]\n    target = int(target.split()[1])\n    dp = [[[] for _ in range(target + 1)] for _ in range(len(potions) + 1)]\n    for i in range(1, len(potions) + 1):\n        for j in range(target + 1):\n            if potions[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - potions[i - 1]] + [potions[i - 1]])\n    if not dp[-1][-1]:\n        return []\n    potions = [potions[i - 1] for i in dp[-1][-1]]\n    result = []\n    for potion in potions:\n        for p in potions_mixing(potions, target - potion):\n            result.append(p)\n            break\n    return sorted(result, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows = len(arr)\n    cols = len(arr[0])\n    # create a 2D array to store minimum energy required to reach each cell\n    energy = [[0] * cols for _ in range(rows)]\n    # initialize energy for first cell\n    energy[0][0] = arr[0][0]\n    # initialize first row\n    for j in range(1, cols):\n        energy[0][j] = energy[0][j - 1] + arr[0][j]\n    # initialize first column\n    for i in range(1, rows):\n        energy[i][0] = energy[i - 1][0] + arr[i][0]\n    # fill in rest of the energy array\n    for i in range(1, rows):\n        for j in range(1, cols):\n            energy[i][j] = min(energy[i - 1][j], energy[i][j - 1]) + arr[i][j]\n    # find the safe cell\n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] == 0:\n                return energy[i][j]\n    return -1  # should not reach here\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if player_input is a list\n    if not isinstance(player_input, list):\r\n        raise TypeError(\"Input should be a list of integers\")\r\n    # Check if all elements in the list are integers\r\n    if not all(isinstance(item, int) for item in player_input):\r\n        raise TypeError(\"Input should be a list of integers\")\r\n    # Check if all elements in the list are between 1 and 5\r\n    if not all(1 <= item <= 5 for item in player_input):\r\n        raise TypeError(\"All elements in the list should be between 1 and 5\")\r\n    # Check if the list is empty\r\n    if not player_input:\r\n        return False, None\r\n    # Check if the list contains a legendary item (rarity 5)\r\n    if 5 in player_input:\r\n        # If the list contains a legendary item, remove it\r\n        player_input.remove(5)\r\n        # If the list is not empty after removing the legendary item, return True and the second most valuable item\r\n        if player_input:\r\n            # Sort the list in descending order and return the second most valuable item\r\n            return True, sorted(player_input, reverse=True)[1]\r\n        # If the list is empty after removing the legendary item, return True and -1\r\n        else:\r\n            return True, -1\r\n    # If the list does not contain a legendary item, return False and None\r\n    else:\r\n        return False, None\r\n\r"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Calculate the fuel consumption for the trip\n    fuel_consumption = trip_duration * (spaceship_weight * planet_gravity * 0.1)\n    \n    # Check if the spaceship has enough fuel to reach the planet\n    if fuel >= fuel_consumption:\n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if the spaceship cannot reach the planet\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    # Calculate the total weight that can be carried by the unicorns\n    unicorn_weight = w * len(q)\r\n    \r\n    # Calculate the total weight that can be carried by the dragons and griffins\r\n    dragon_griffin_weight = e * len(q)\r\n    \r\n    # Calculate the total weight that can be carried by all creatures\r\n    total_weight = unicorn_weight + dragon_griffin_weight\r\n    \r\n    # Check if the total weight is greater than or equal to the sum of all weights in the list\r\n    return total_weight >= sum(q)  # Changed from > to >=\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i, -1, -1):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i, len(arr)):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = ''.join(filter(str.isalpha, word))\n            if word:\n                secret_message += word[0].lower()\n        if 'cannoli' in secret_message.lower():\n            secret_message = 'Take the cannoli.'\n        secret_messages.append(secret_message)\n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # filter out items with quantity <= 0\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0',\n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111',\n        'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111',\n        'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',\n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011',\n        'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001',\n        '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110',\n        '0': '11111'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_word = ''\n        for char in word.split():\n            if char in morse_code:\n                decoded_word += morse_code[char]\n        decoded_word = ''.join([morse_code[c] for c in decoded_word])\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': '   '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    orders = [order for order in orders if order % n == 0]\n    if not orders:\n        return 0\n    max_orders = 0\n    for order in orders:\n        if order <= n * m:\n            max_orders += 1\n        else:\n            break\n    return max_orders\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for i, c in enumerate(s):\n        if c in vowels:\n            idx = vowels.index(c)\n            result.append(vowels[(idx + 1) % len(vowels)])\n        elif c in consonants:\n            idx = consonants.index(c)\n            result.append(consonants[(idx + 1) % len(consonants)])\n        elif c == '?':\n            if i % 2 == 0:\n                result.append('!')\n            else:\n                result.append('?')\n        else:\n            result.append(c)\n    return ''.join(result)  # join the list of characters into a string\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift_counter = shift\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                ascii_offset = 97\n            else:\n                ascii_offset = 65\n            result += chr((ord(char) - ascii_offset + shift_counter) % 26 + ascii_offset)\n            shift_counter += 1\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.',\n        'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.',\n        'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-',\n        'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' / '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in earth_phrase:\n        if char in vowels:\n            idx = vowels.index(char)\n            result += vowels[(idx + 1) % 5]\n        elif char in consonants:\n            idx = consonants.index(char)\n            result += consonants[(idx + 1) % 26]\n        elif char == ' ':\n            result += '@'\n        else:\n            raise ValueError('Invalid character')\n    words = result.split('@')\n    for i, word in enumerate(words):\n        if i == 0:\n            result += word.capitalize()\n        else:\n            result += word.capitalize()\n        if word[0] in vowels:\n            result += 'xy'\n        else:\n            result += 'yz'\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    # First, we sort the dictionary items based on the number of recipes in descending order\n    # If two ingredients have the same number of recipes, we sort them in ascending alphabetical order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Then, we return a list of tuples where each tuple contains an ingredient and its number of recipes\n    return sorted_items\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Create a list to store the sugar status at each location\n    sugar_status = [False] * path_length\n    for sugar_location in sugar_locations:\n        sugar_status[sugar_location] = True\n\n    # Initialize the number of happy ants to 0\n    happy_ants_count = 0\n\n    # Iterate over each ant's position and direction\n    for ant_position, ant_direction in ant_positions:\n        # If the ant's position has sugar, increment the happy ants count\n        if sugar_status[ant_position]:\n            happy_ants_count += 1\n            # Set the sugar status to False to indicate the sugar has been picked up\n            sugar_status[ant_position] = False\n\n    # Return the total number of happy ants\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = []\n    for i, c in enumerate(s):\n        if c in vowels:\n            if i % 2 == 0:\n                result.append(vowels[(vowels.index(c) + 1) % 5])\n            else:\n                result.append(c)\n        elif c.isalpha():\n            if i % 2 == 0:\n                result.append(chr(ord(c) - 1))\n            else:\n                result.append(chr(ord(c) + 1))\n        else:\n            result.append(c)\n    return ''.join(result)  # join the list of characters into a string\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n        if p <= 0:\r\n            break\r\n    return pyramid[::-1]  # return the list in reverse order\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(start, end + 1):\n        if i % divisor == 0 and is_prime(i):\n            result.append(i)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Create a copy of the original menu to avoid modifying it directly\n    final_order = menu.copy()\n    \n    # Iterate over each food item in the order\n    for food, customizations in order.items():\n        # Get the original ingredients for the current food item\n        original_ingredients = menu[food]\n        \n        # Get the ingredients to be added or removed\n        add_ingredients = customizations.get(\"add\", [])\n        remove_ingredients = customizations.get(\"remove\", [])\n        \n        # Update the final order with the added ingredients\n        final_order[food] = [ingredient for ingredient in original_ingredients if ingredient not in remove_ingredients] + add_ingredients\n    \n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_nums = [num for num in range(2, n) if is_prime(num)]\n    prime_anagrams = []\n    for i in range(len(prime_nums)):\n        for j in range(i + 1, len(prime_nums)):\n            if is_anagram(prime_nums[i], prime_nums[j]):\n                prime_anagrams.append((prime_nums[i], prime_nums[j]))\n    return sorted(prime_anagrams, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the indices of the cards\n    card_indices = {card: i for i, card in enumerate(cards)}\n    \n    # Iterate over the cards\n    for i in range(len(cards)):\n        # For each card, iterate over the remaining cards\n        for j in range(i + 1, len(cards)):\n            # If the product of the two cards equals the magic number\n            if cards[i] * cards[j] == magicNumber:\n                # Return the indices of the two cards\n                return (card_indices[cards[i]], card_indices[cards[j]])\n    \n    # If no pair of cards multiplies to the magic number, return \"No magic today\"\n    return \"No magic today\"  # This line will never be reached, but it's required by the problem statement\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\r\n        return False\r\n    current_planet = path[0]\r\n    for planet in path[1:]:\r\n        if planet not in planets or current_planet not in planets[planet]:\r\n            return False\r\n        current_planet = planet\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if char.lower() in vowels:\n                vowel_count += 1\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i, string in enumerate(lst, start=1):\n        count = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a time, in kingdom far away, lived a magical creature name of '{string}' known for telling {count} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate total number of treasures in the pyramid\r\n    total_treasures = sum(sum(row) for row in grid)\r\n    \r\n    # Calculate total number of chambers in the pyramid\r\n    total_chambers = len(grid) * len(grid[0])\r\n    \r\n    # Calculate the number of trips needed to collect all treasures\r\n    # This is done by dividing the total number of treasures by the bag capacity and rounding up to the nearest integer\r\n    # We add 1 to the result because we need to make a separate trip to enter and exit the pyramid\r\n    trips = math.ceil(total_treasures / bag_capacity) + 1\r\n    \r\n    return trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    new_string = \"\"\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    result = []\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            idx = (vowels.index(char) + 1) % len(vowels)\n            result.append(vowels[idx])\n        elif char in consonants:\n            idx = (consonants.index(char) + 1) % len(consonants)\n            result.append(consonants[idx])\n        elif char in digits:\n            idx = (int(char) + 1) % 10\n            result.append(str(idx))\n        elif char in punctuation:\n            if i % 2 == 0 and char == '?':\n                result.append('!')\n            elif i % 2 != 0 and char == '!':\n                result.append('?')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n    return ''.join(result)  # return the transformed string\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    for num in lst:\n        level_str = '#' * num\n        pyramid.append(level_str)\n        level += 1\n    return pyramid[::-1]  # reverse the list to get the pyramid in the correct order\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return sorted([sum(i // k + i % k for i in sequence) for _ in range(len(sequence))], reverse=True)  # noqa: E501\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n == 0:\n        return []\n    if n == 1:\n        return [mat[0][0]]\n    if n == 2:\n        return [mat[0][0], mat[1][1]]\n    if n == 3:\n        return [mat[0][0], mat[1][2], mat[2][0]]\n    if n == 4:\n        return [mat[0][0], mat[1][3], mat[2][2], mat[3][0]]\n    if n == 5:\n        return [mat[0][0], mat[1][4], mat[2][3], mat[3][2], mat[4][0]]\n    if n == 6:\n        return [mat[0][0], mat[1][5], mat[2][4], mat[3][3], mat[4][2], mat[5][0]]\n    if n == 7:\n        return [mat[0][0], mat[1][6], mat[2][5], mat[3][4], mat[4][3], mat[5][2], mat[6][0]]\n    if n == 8:\n        return [mat[0][0], mat[1][7], mat[2][6], mat[3][5], mat[4][4], mat[5][3], mat[6][2], mat[7][0]]\n    if n == 9:\n        return [mat[0][0], mat[1][8], mat[2][7], mat[3][6], mat[4][5], mat[5][4], mat[6][3], mat[7][2], mat[8][0]]\n    if n == 10:\n        return [mat[0][0], mat[1][9], mat[2][8], mat[3][7], mat[4][6], mat[5][5], mat[6][4], mat[7][3], mat[8][2], mat[9][0]]\n    if n == 11:\n        return [mat[0][0], mat[1][10], mat[2][9], mat[3][8], mat[4][7], mat[5][6], mat[6][5], mat[7][4], mat[8][3], mat["}
{"task_id": "EvoEval/79", "completion": "\n    if days == 1:\r\n        return 0\r\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i + 1, days):\r\n            profit = prices[j] - prices[i]\r\n            if profit > max_profit:\r\n                max_profit = profit\r\n    return max_profit\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize player's position\n    player_row, player_col = 0, 0\n    # Initialize player's path\n    player_path = [(0, 0)]\n    # Iterate over each instruction\n    for instruction in instructions:\n        # Get current player's position\n        current_row, current_col = player_row, player_col\n        # Move player according to instruction\n        if instruction == 'up' and current_row > 0 and map[current_row - 1][current_col] != 'X':\n            player_row -= 1\n        elif instruction == 'down' and current_row < len(map) - 1 and map[current_row + 1][current_col] != 'X':\n            player_row += 1\n        elif instruction == 'left' and current_col > 0 and map[current_row][current_col - 1] != 'X':\n            player_col -= 1\n        elif instruction == 'right' and current_col < len(map[0]) - 1 and map[current_row][current_col + 1] != 'X':\n            player_col += 1\n        # Add player's new position to path\n        player_path.append((player_row, player_col))\n        # Check if player has reached end\n        if map[player_row][player_col] == 'E':\n            break\n    # Return player's path\n    return player_path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = sorted(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        word1 = ''.join([char for char in word_list[i] if char in alien_dict])\n        word2 = ''.join([char for char in word_list[i + 1] if char in alien_dict])\n        if word1 > word2:\n            return \"INCORRECT\"\n    return \"CORRECT\"  # return \"CORRECT\" if all words are sorted correctly"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month, day = birthday.split(\"-\")\n        month = int(month)\n        day = int(day)\n        if (month == 3 and 21 <= day <= 31) or (month == 4 and 1 <= day <= 19):\n            elements[\"Fire\"] += 1\n        elif (month == 4 and 20 <= day <= 30) or (month == 5 and 1 <= day <= 20):\n            elements[\"Earth\"] += 1\n        elif (month == 5 and 21 <= day <= 31) or (month == 6 and 1 <= day <= 20):\n            elements[\"Air\"] += 1\n        elif (month == 6 and 21 <= day <= 30) or (month == 7 and 1 <= day <= 22):\n            elements[\"Water\"] += 1\n        elif (month == 7 and 23 <= day <= 31) or (month == 8 and 1 <= day <= 22):\n            elements[\"Fire\"] += 1\n        elif (month == 8 and 23 <= day <= 31) or (month == 9 and 1 <= day <= 22):\n            elements[\"Earth\"] += 1\n        elif (month == 9 and 23 <= day <= 30) or (month == 10 and 1 <= day <= 22):\n            elements[\"Air\"] += 1\n        elif (month == 10 and 23 <= day <= 31) or (month == 11 and 1 <= day <= 21):\n            elements[\"Water\"] += 1\n        elif (month == 11 and 22 <= day <= 30) or (month == 12 and 1 <= day <= "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)  # return string from list of characters"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node:\n            return [path]\n        paths = []\n        for key, value in node.items():\n            paths.extend(dfs(value, path + [key]))\n        return paths\n\n    return dfs(tree, [])  # return all possible paths from root to leaves\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a visited set to keep track of visited cells\n    visited = set()\n    \n    # Define the possible moves (right and down)\n    moves = [(0, 1), (1, 0)]\n    \n    # Define the heuristic function (Manhattan distance)\n    def heuristic(row, col):\n        return abs(row - coord[0]) + abs(col - coord[1])\n    \n    # Define the A* search function\n    def a_star_search(row, col, dist):\n        # If the current cell is the princess's cell, return the distance\n        if (row, col) == coord:\n            return dist\n        \n        # Mark the current cell as visited\n        visited.add((row, col))\n        \n        # Initialize the minimum distance to infinity\n        min_dist = float('inf')\n        \n        # Explore the neighbors\n        for dr, dc in moves:\n            nr, nc = row + dr, col + dc\n            \n            # If the neighbor is within the grid and not visited and not a monster\n            if (0 <= nr < rows) and (0 <= nc < cols) and (nr, nc) not in visited and grid[nr][nc] == 0:\n                # Calculate the new distance\n                new_dist = dist + 1\n                \n                # If the neighbor is the princess's cell, return the new distance\n                if (nr, nc) == coord:\n                    return new_dist\n                \n                # Recursively explore the neighbor\n                new_dist = a_star_search(nr, nc, new_dist)\n                \n                # Update the minimum distance\n                min_dist = min(min_dist, new_dist)\n        \n        # If no path to the princess is found, return -1\n        return -1 if min_dist == float('inf') else min_dist\n    \n    # Start the A* search from the top-left corner\n    return a_star_search(0, 0, 0)  # Start with distance 0\n    # return a_star_search(0, 0, 0)  # Start with distance 0\n"}
{"task_id": "EvoEval/86", "completion": "\n    # First, we sort the movies based on ratings in descending order and release year in ascending order\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    # Then, we extract the movie names from the sorted list of tuples\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n    # Finally, we return the sorted list of movie names\n    return sorted_movie_names\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            result[planet] = round(features[0] / features[1], 2)\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    aliens = list(set(aliens))  # remove duplicates\n    aliens.sort()\n    ray = aliens.index(ray)\n    aliens.pop(ray)\n    for i in range(len(aliens)):\n        if aliens[i] == ray - 1 or aliens[i] == ray + 1:\n            aliens.pop(i)\n            i -= 1\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        if len(s) == 1:\n            return [[int(s)]]\n        combinations = []\n        for i in range(len(s)):\n            first_digit = s[:i] + s[i+1:]\n            for combination in get_combinations(first_digit):\n                combinations.append([int(s[i])] + combination)\n        return combinations\n\n    def sum_combinations(combinations):\n        return sum(sum(combination) for combination in combinations)\n\n    s1_combinations = get_combinations(s1)\n    s2_combinations = get_combinations(s2)\n    return sum_combinations(s1_combinations) * sum_combinations(s2_combinations)  # corrected the multiplication\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceshi_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = ''\n    for i in range(1, n + 1):\n        layer = ''\n        for j in range(1, 2 * i):\n            if j == i or j == 2 * i - i:\n                layer += chr(64 + i)\n            else:\n                layer += chr(64 + (i - 1) % 26 + 1)\n        result += ' ' * (2 * i - len(layer) - 1) + layer + '\\n'\n    return result[:-1]  # remove the last newline character\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    n_index = 0\n    for char in message:\n        if char.isalpha():\n            n = n_values[n_index % len(n_values)]\n            n_index += 1\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len)) for word in strings]  # <--- your code here\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m) - i - 1] for i in range(len(m)))\n    return abs(diagonal1 - diagonal2)  # return absolute difference between sums of diagonals"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % (i + 1) == 0 and product_of_digits(lst[i]) == i + 1:\n            magic_indices.append(i)\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Check if alien name is valid\n    if not isinstance(alien, str) or len(alien) == 0:\n        return []\n\n    # Check if humans dictionary is valid\n    if not isinstance(humans, dict) or len(humans) == 0:\n        return []\n\n    # Define the order of continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n\n    # Initialize the list of humans encountered by the alien\n    encountered_humans = []\n\n    # Iterate over the continents in the order of invasion\n    for continent in continents:\n        # Check if the alien is in the current continent\n        if continent in humans.values():\n            # Get the human(s) in the current continent\n            humans_in_continent = [human for human, location in humans.items() if location == continent]\n            # Add the human(s) to the list of encountered humans\n            encountered_humans.extend(humans_in_continent)\n\n    # Return the list of encountered humans\n    return encountered_humans\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[-1] + sequence[-2] + i\n        sequence.append(next_number)\n    for i in range(len(sequence)):\n        if sequence[i] > 1:\n            is_prime = True\n            for j in range(2, int(sequence[i]**0.5) + 1):\n                if sequence[i] % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        for _ in range(round):\n            position = (position + music) % n\n            players.pop(position - 1)\n    return players\n"}
