{"task_id": "EvoEval/0", "completion": "\n    base_shipping_cost = 5.0\n    additional_shipping_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            total_cost += (float(item) * 1.5) * local_factor\n        else:\n            total_cost += item * local_factor\n\n    total_cost += additional_shipping_cost\n\n    if location == 'Local':\n        total_cost *= local_factor\n    elif location == 'National':\n        total_cost *= national_factor\n    elif location == 'International':\n        total_cost *= international_factor\n\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    additional_shipping_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        if item > 5.0:\n            total_cost += additional_shipping_cost\n        if location == 'Local':\n            total_cost += base_shipping_cost * item * local_factor\n        elif location == 'National':\n            total_cost += base_shipping_cost * item * national_factor\n        elif location == 'International':\n            total_cost += base_shipping_cost * item * international_factor\n        else:\n            total_cost += base_shipping_cost * item\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(c: str) -> int:\n        return ord(c)\n\n    def int_to_char(i: int) -> str:\n        return chr(i)\n\n    def shift_char(c: str, key: int) -> str:\n        i = char_to_int(c)\n        return int_to_char((i + key) % 26 + ord('a'))\n\n    def shift_word(word: str, key: int) -> str:\n        return ''.join(shift_char(c, key) if c.isalpha() else c for c in word)\n\n    return [shift_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving right\n            if col == cols - 1:  # end of row\n                row += 1\n            elif row == 0:  # start of next row\n                col += 1\n            else:  # moving downwards\n                row += 1\n        else:  # moving downwards\n            if row == rows - 1:  # end of row\n                col += 1\n            elif col == 0:  # start of next row\n                row += 1\n            else:  # moving right\n                col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    else:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # define starting point\n    x, y = 0, 0\n    # define direction\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n    # define sequence\n    sequence = [0, 1, 0, 3]\n    # check if sequence leads back to starting point\n    if (x, y) in [(x + dx, y + dy) for dx, dy in directions.values()]:\n        return 'Shangri-La found'\n    # check if sequence leads to starting point\n    for move in sequence:\n        x, y = x + directions[move][0], y + directions[move][1]\n        if (x, y) == (0, 0):\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    canvas_list = list(canvas)\n    painter_indexes = [i for i, x in enumerate(canvas_list) if x == 'P']\n\n    if len(painter_indexes) > 1:\n        return 'Invalid canvas'\n\n    painter_index = painter_indexes[0]\n    left_index = painter_index\n    right_index = painter_index\n\n    while left_index > 0 and canvas_list[left_index - 1] != 'W':\n        left_index -= 1\n\n    while right_index < len(canvas_list) - 1 and canvas_list[right_index + 1] != 'W':\n        right_index += 1\n\n    for i in range(left_index, right_index + 1):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n\n    canvas_list[painter_index] = '*'\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_sounds = animal_string.split()\n    counts = [0]*len(animals)\n    for sound in animal_sounds:\n        if sound[0] in animals:\n            counts[animals.index(sound[0])] += 1\n    return counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_of_elements = sum(flux_values)\n    energy_signature = max_occurrence * sum_of_elements\n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    counts = Counter(values)\n    scores = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 11: 0, 12: 0, 13: 0}\n    for count in counts.values():\n        if count == 2:\n            scores[1] += 1\n        elif count == 3:\n            scores[2] += 1\n        elif count == 4:\n            scores[3] += 1\n        elif count == 5:\n            scores[4] += 1\n    return sum(score * value for value, score in scores.items())\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard[1] *= -1\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards.pop(0)\n        if len(wizards) == 0:\n            return 'The dragon won!'\n    return wizards[0][0]\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        if sum_of_digits(i) == 7:\n            if n == 1:\n                return i\n            else:\n                n -= 1\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(matrix, i, j):\n        vampire_count = 0\n        human_count = 0\n        for x in range(len(matrix)):\n            for y in range(len(matrix[0])):\n                if matrix[x][y] == 2:\n                    vampire_count += 1\n                if matrix[x][y] == 1:\n                    human_count += 1\n        if vampire_count == 0 or human_count == 0:\n            return 0\n        if i >= 0 and j >= 0 and i < len(matrix) and j < len(matrix[0]):\n            if matrix[i][j] == 1:\n                return 1\n        return 0\n\n    def dfs(matrix, i, j):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]):\n            return 0\n        if matrix[i][j] != 1:\n            return 0\n        matrix[i][j] = 0\n        return 1 + dfs(matrix, i-1, j) + dfs(matrix, i+1, j) + dfs(matrix, i, j-1) + dfs(matrix, i, j+1) + dfs(matrix, i-1, j-1) + dfs(matrix, i-1, j+1) + dfs(matrix, i+1, j-1) + dfs(matrix, i+1, j+1)\n\n    vampire_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 2:\n                vampire_count += dfs(m, i, j)\n    return vampire_count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    result = []\n    for i in range(n, 0, -1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        for j in range(len(grid[0])):\n            if all(word[k] == grid[i][j] for i, k in enumerate(range(len(word)))):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v\n    return distance / light_years_per_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = ''\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - 97])\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    symbol_map = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '$',\n        'h': '#',\n        'i': '^',\n        'j': '&',\n        'k': '(',\n        'l': ')',\n        'm': '~',\n        'n': '=',\n        'o': '>',\n        'p': '<',\n        'q': ';',\n        'r': '`',\n        's': '$',\n        't': '~',\n        'u': '>',\n        'v': '<',\n        'w': '{',\n        'x': '}',\n        'y': '[',\n        'z': ']',\n        ' ': '|'\n    }\n    return ''.join(symbol_map.get(c, c) for c in english_word)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = words.count(word)\n    if word_count == 0:\n        return (0, \"\")\n    else:\n        sentences = re.findall(r'\\b\\w+\\.', text)\n        max_frequency_sentence = max(sentences, key=sentences.count)\n        return (word_count, max_frequency_sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    path = []\n    maze[start[0]][start[1]] = 1\n\n    def dfs(row, col):\n        for direction in directions:\n            new_row, new_col = row + direction[0], col + direction[1]\n            if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row][new_col] == 0:\n                maze[new_row][new_col] = 1\n                path.append(direction)\n                dfs(new_row, new_col)\n\n    dfs(start[0], start[1])\n    return path\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 750\n    else:\n        return (income - 130000) * 0.30 + 1750\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_point in [(start[0]+1, start[1]), (start[0]-1, start[1]), (start[0], start[1]+1), (start[0], start[1]-1)]:\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1:\n                newpath = dfs(maze, next_point, end, path)\n                if newpath: return newpath\n        return []\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 and n == 1:\n        return 1\n    elif m == 0 or n == 0:\n        return 0\n    else:\n        return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    playlist = playlist.copy()\n    playlist_shuffled = []\n    seed = 16807\n\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            swap_index = (seed * 16807) % playlist_length\n            playlist_shuffled.append(playlist[swap_index])\n            del playlist[swap_index]\n        else:\n            playlist_shuffled.append(playlist[i])\n        seed = (seed * 16807) % 2147483647\n\n    return playlist_shuffled\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i >= stone:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if m > n or m < 1:\n        return \"Invalid day\"\n    if n == 1:\n        return [0]\n    transformation_percentage = [0] * n\n    for i in range(m - 1, n):\n        if i == m - 1:\n            transformation_percentage[i] = 10\n        else:\n            transformation_percentage[i] = transformation_percentage[i - 1] + 10 if i - m + 1 > 0 else -10\n    return transformation_percentage\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    if \".\" not in domain:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    integral_coefficients = [0]*n\n    for i in range(n):\n        integral_coefficients[i] = xs[i]/(i+1)\n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            new_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        else:\n            new_s += char\n    return new_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return \"\\n\".join(\"*\" + \"*\".join(c for c in s) + \"*\" for _ in range(n)) + \"*\"\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        queue = collections.deque([(0, 0, 0)])\n        visited = {(0, 0): 0}\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        while queue:\n            x, y, energy = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(arr) and 0 <= ny < len(arr[0]):\n                    if (nx, ny) not in visited or energy + arr[nx][ny] < visited[(nx, ny)]:\n                        visited[(nx, ny)] = energy + arr[nx][ny]\n                        queue.append((nx, ny, visited[(nx, ny)]))\n        return min(visited.values())\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\n        unique_items = set(items)\n        if len(unique_items) < 2:\n            return -1\n        sorted_items = sorted(unique_items, reverse=True)\n        return sorted_items[1]\n\n    if not player_input:\n        return (False, None)\n\n    legendary_item_found = any(item == 5 for item in player_input)\n    second_most_valuable_item = find_second_most_valuable_item(player_input)\n\n    return (legendary_item_found, second_most_valuable_item)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if distance <= (speed * fuel):\n        remaining_fuel = (distance / speed) - fuel\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\n        total_weight = 0\n        for i in q:\n            total_weight += i\n        if total_weight <= w and total_weight <= e:\n            return True\n        else:\n            return False\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n\nfairy_tale_transport([5, 10, 15], 5, 20)\nfairy_tale_transport([10, 20, 30], 5, 10)\nfairy_tale_transport([1, 2, 3], 1, 5)\nfairy_tale_transport([5, 10, 15], 15, 15)\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_hills = 0\n    current_hills = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_hills += 1\n        else:\n            if current_hills > max_hills:\n                max_hills = current_hills\n            current_hills = 1\n    if current_hills > max_hills:\n        max_hills = current_hills\n    return max_hills\n"}
{"task_id": "EvoEval/46", "completion": "\n    def decode_message(test_case):\n        return ''.join([word[0] for word in test_case.split()])\n\n    def is_hidden_message(test_case):\n        return 'Take the cannoli.' in test_case.lower()\n\n    return [decode_message(test_case[0]) if is_hidden_message(test_case[0]) else decode_message(test_case[1]) for test_case in test_cases]\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n\n"}
{"task_id": "EvoEval/49", "completion": "\n\n        decode morse code string\n        \"\"\"\n        decoded_string = ''\n        for character in morse_code.split(' '):\n            for symbol in character:\n                if symbol == '1':\n                    decoded_string += '.'\n                else:\n                    decoded_string += '-'\n            decoded_string += ' '\n        return decoded_string\n\n    return decode_morse(msg)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n                       'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n                       'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n                       'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n                       'Y': '-.--', 'Z': '--..', ' ': '   '}\n\n    text = text.upper()\n    morse_code = \"\"\n    for char in text:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n\n    return morse_code\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            transformed += char.lower()[1] if char.islower() else char.lower()[1].upper()\n        elif char.lower() in consonants:\n            transformed += char.lower()[1] if char.islower() else char.lower()[1].upper()\n        else:\n            transformed += char\n        if i % 2 != 0 and char.lower() == 'y':\n            transformed = transformed[:-1] + 'b' + transformed[-1]\n    return transformed\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    def shift_string(s, shift):\n        return ''.join(shift_char(c, shift) for c in s)\n\n    return shift_string(message, shift)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..',\n        ' ': '/'\n    }\n    return ' '.join(morse_code_dict[i] for i in s.lower())\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += spell[i % len(spell)]\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            elif char == 'z':\n                new_word += 'b'\n            else:\n                new_word += char\n        if word[0] in vowels:\n            new_word = new_word[0] + new_word[1:] + 'xy'\n        elif word[0] in consonants:\n            new_word = new_word[0] + new_word[1:] + 'yz'\n        new_word = new_word.capitalize()\n        translated_phrase += new_word + ' '\n    return translated_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = [(k, v) for k, v in ingredient_dict.items()]\n    ingredient_list.sort(key=lambda x: (-x[1], x[0]))\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize happy_ants count\n    happy_ants_count = 0\n\n    # Iterate over sugar locations\n    for sugar_location in sugar_locations:\n        # If sugar location is in ant's path, increment happy_ants count\n        if sugar_location in ant_positions:\n            happy_ants_count += 1\n\n    # Return happy_ants count\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            result += c.swapcase()\n        else:\n            if c.lower() in vowels:\n                result += vowels[(vowels.index(c.lower())+1)%5]\n            elif c in consonants:\n                result += consonants[(consonants.index(c)-1)%26]\n            else:\n                result += c\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p <= 0:\n        return []\n    else:\n        pyramid = [p]\n        while pyramid[-1] > 0:\n            if pyramid[-1] % 2 == 0:\n                pyramid.append(pyramid[-1] - 2)\n            else:\n                pyramid.append(pyramid[-1] - 3)\n        return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        if food in order:\n            remove = set(order[food].get(\"remove\", []))\n            add = set(order[food].get(\"add\", []))\n            new_ingredients = set(details) - remove | add\n            new_menu[food] = list(new_ingredients)\n        else:\n            new_menu[food] = details\n\n    return new_menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_anagram_pairs(n):\n        prime_numbers = [i for i in range(2, n) if is_prime(i)]\n        pairs = []\n        for i in range(len(prime_numbers)):\n            for j in range(i + 1, len(prime_numbers)):\n                if sorted(str(prime_numbers[i])) == sorted(str(prime_numbers[j])):\n                    pairs.append((prime_numbers[i], prime_numbers[j]))\n        pairs.sort(key=lambda x: (x[0], x[1]))\n        return pairs\n\n    return prime_anagram_pairs(n)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        for meal in meals.get(customer, []):\n            total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    inversions = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n\n    return inversions % 2 == 0\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n        if planet not in planets[planet]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted_char in vowels:\n                vowel_count += 1\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i, s in enumerate(lst, 1):\n        j = sum(c.isdigit() for c in s)\n        output.append(f\"Once upon time, in kingdom far away, lived magical creature name '{s}' known for telling {j} tales a day\")\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return ''\n    return ''.join([cipher.get(c, c) for c in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \".,?! \"\n    result = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        elif input_str[i] in special_chars:\n            if i%2==0:\n                result += input_str[i]\n        else:\n            result += input_str[i]\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst)):\n        level = []\n        for j in lst:\n            if i < j:\n                level.append('#')\n            else:\n                level.append(' ')\n        pyramid.append(''.join(level))\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_points(sequence, k):\n        result = []\n        for num in sequence:\n            points = 0\n            while num != 1:\n                num = num // k\n                points += 1\n            result.append(points)\n        return sorted(result, reverse=True)\n\n    return magical_sequence_points(sequence, k)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = len(mat[0])\n    pattern = []\n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                if j % 2 == 0:\n                    pattern.append(mat[i][j])\n            else:\n                if j == m-1 or j == 0:\n                    pattern.append(mat[i][j])\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize profit as 0\n    profit = 0\n    # Iterate over the prices list\n    for i in range(days):\n        # If current price is less than next price, update profit\n        if prices[i] < prices[i+1]:\n            profit += prices[i+1] - prices[i]\n    return profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    def move(row, col, direction):\n        if direction == 'up':\n            return (row - 1, col)\n        elif direction == 'down':\n            return (row + 1, col)\n        elif direction == 'left':\n            return (row, col - 1)\n        elif direction == 'right':\n            return (row, col + 1)\n\n    def is_valid(row, col, map):\n        if row < 0 or col < 0 or row >= len(map) or col >= len(map[0]):\n            return False\n        if map[row][col] == 'X':\n            return False\n        return True\n\n    def find_path(map, instructions, pos=(0, 0), path=[(0, 0)]):\n        if pos == (len(map) - 1, len(map[0]) - 1) and 'E' in map[pos[0]][pos[1]]:\n            return path\n        for i, direction in enumerate(instructions):\n            new_pos = move(pos[0], pos[1], direction)\n            if is_valid(*new_pos, map):\n                path.append(new_pos)\n                return find_path(map, instructions[i + 1:], *new_pos, path)\n        return path\n\n    return find_path(map, instructions)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict_set = set(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n        elif set(word_list[i]) > alien_dict_set:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    # define zodiac signs and their associated elements\n    zodiac_signs = {\n        'Aries': ['March 21 \u2013 April 19', 'May 21 \u2013 June 20'],\n        'Taurus': ['April 20 \u2013 May 20', 'June 21 \u2013 July 22'],\n        'Gemini': ['May 21 \u2013 June 20', 'July 23 \u2013 August 22'],\n        'Cancer': ['June 21 \u2013 July 22', 'August 23 \u2013 Sept 22'],\n        'Leo': ['July 23 \u2013 August 22', 'Sept 23 \u2013 October 22'],\n        'Virgo': ['August 23 \u2013 Sept 22', 'October 23 \u2013 November 21'],\n        'Libra': ['Sept 23 \u2013 October 22', 'November 23 \u2013 December 21'],\n        'Scorpio': ['Oct 23 \u2013 November 21', 'December 22 \u2013 Jan 19'],\n        'Sagittarius': ['Nov 22 \u2013 Dec 21', 'Jan 20 \u2013 Feb 18'],\n        'Capricorn': ['Dec 22 \u2013 Jan 19', 'Feb 19 \u2013 March 20'],\n        'Aquarius': ['Jan 20 \u2013 Feb 18', 'Mar 21 \u2013 Apr 19'],\n        'Pisces': ['Feb 19 \u2013 March 20', 'Apr 20 \u2013 May 20']\n    }\n\n    # if birthdays list is empty, return None\n    if not birthdays:\n        return None\n\n    # initialize an empty dictionary to store the result\n    result = {}\n\n    # iterate over each birthday\n    for birthday in birthdays:\n        # split the birthday into year, month, and day\n        year, month, day = map(int, birthday.split('-'))\n\n        # iterate over each zodiac sign\n        for sign, dates in zodiac_signs.items():\n           "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path, result):\n        if not tree:\n            return\n        if not tree.get('left') and not tree.get('right'):\n            result.append(path + [tree.keys()[0]])\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], result)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], result)\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], result)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], result)\n\n    result = []\n    dfs(tree, [], result)\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid(x, y, grid):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    def bfs(start, grid):\n        moves = 0\n        queue = [(start, moves)]\n        visited = {start}\n        while queue:\n            current, moves = queue.pop(0)\n            if current == princess:\n                return moves\n            for direction in [(1, 0), (0, 1)]:\n                next_point = (current[0] + direction[0], current[1] + direction[1])\n                if is_valid(*next_point, grid) and grid[next_point[0]][next_point[1]] == 0 and next_point not in visited:\n                    visited.add(next_point)\n                    queue.append((next_point, moves + 1))\n        return -1\n\n    row, column = coord\n    princess = (row, column)\n    return bfs((0, 0), grid)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies(movies):\n        return sorted(movies, key=lambda x: (-x[1], x[0]))\n\n    sorted_movies = sorted(movies_dict.items(), key=sort_movies)\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008],\n               \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]}"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr or not arr[0]:\n            return \"\"\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return \"\".join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r' '!','!!']]))\n    print(word_spiral([]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r' '!','!!']])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<j"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            population_density = data[0] / data[1]\n            result[planet] = round(population_density, 2)\n    return result\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def destroy(aliens, pos):\n        return [a for a in aliens if not is_adjacent(a, pos) and not is_odd(a)]\n\n    aliens = [a for a in aliens if a != ray]\n    aliens = destroy(aliens, ray)\n    aliens = destroy(aliens, ray - 1)\n    aliens = destroy(aliens, ray + 1)\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        result = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                result.add(int(s[i:j]))\n        return result\n\n    s1, s2 = sorted(s1), sorted(s2)\n    combinations1, combinations2 = get_combinations(s1), get_combinations(s2)\n    return sum(combinations1 & combinations2)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action in spaceship_data:\n        if action[0] == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i - 1):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[j]\n        for j in range(2 * i - 1, -1, -1):\n            layer += alphabet[j]\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n, n_values):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        if c.islower():\n            return new_c\n        else:\n            return new_c.upper()\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n, n_values) for c, n in zip(message, n_values))\n\n    def unshift_message(message, n_values):\n        return shift_message(message, -n for n in n_values)\n\n    if len(n_values) > len(message):\n        n_values = n_values[:len(message)]\n    elif len(n_values) < len(message):\n        n_values += n_values[:len(message) - len(n_values)]\n\n    return shift_message(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(matrix):\n        return all(len(row) == len(matrix) for row in matrix)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    return abs(sum(m[i][i] for i in range(len(m))) - sum(m[i][len(m)-i-1] for i in range(len(m))))\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            if lst[i] % i == 0 and get_product_of_digits(i) == i:\n                magic_indices.append(i)\n        else:\n            if abs(lst[i]) % i == 0 and get_product_of_digits(i) == abs(lst[i]):\n                magic_indices.append(i)\n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = {\"Xenomorph\": \"Asia\", \"Predator\": \"Europe\", \"Klingon\": \"North America\"}\n    human_continents = {\n        \"John\": \"Asia\",\n        \"Sarah\": \"Europe\",\n        \"Michael\": \"North America\",\n        \"Ana\": \"Africa\",\n        \"Alice\": \"South America\",\n        \"Bob\": \"Europe\",\n        \"Emily\": \"Africa\"\n    }\n\n    alien_continent_order = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n\n    alien_encounter = [\n        name for name, continent in humans.items() if continent in alien_continent_order\n    ]\n\n    return sorted(alien_encounter)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                eliminated = (j + i) % len(players)\n                players.pop(eliminated)\n    return players\n\n"}
