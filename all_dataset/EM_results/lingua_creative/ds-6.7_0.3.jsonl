{"task_id": "EvoEval/0", "completion": "\n    # base shipping cost\n    base_cost = 5.0\n    # location factors\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    # additional charge\n    additional_charge = 10.0\n    # total cost\n    total_cost = 0\n    # loop through items\n    for item in items:\n        # if item is string, consider weight as 1kg\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        # calculate cost for each item\n        item_cost = base_cost * weight\n        # if weight is more than 5kg, add additional charge\n        if weight > 5:\n            item_cost += additional_charge\n        # multiply item cost by location factor\n        item_cost *= location_factor.get(location, 1)\n        # add item cost to total cost\n        total_cost += item_cost\n    # return total cost rounded to two decimal places\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    additional_charge = 10.0\n    weight_limit = 5.0\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item_weight = 1.0\n        else:\n            item_weight = item\n\n        if item_weight > weight_limit:\n            item_cost = (item_weight * base_cost) + additional_charge\n        else:\n            item_cost = item_weight * base_cost\n\n        if location == 'Local':\n            total_cost += item_cost * local_factor\n        elif location == 'National':\n            total_cost += item_cost * national_factor\n        elif location == 'International':\n            total_cost += item_cost * international_factor\n        else:\n            total_cost += item_cost\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                encrypted_word += chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    # mapping from number to alphabet\n    alphabet = {\n        '1': 'a',\n        '2': 'b',\n        '3': 'c',\n        '4': 'd',\n        '5': 'e',\n        '6': 'f',\n        '7': 'g',\n        '8': 'h',\n        '9': 'i',\n        '10': 'j',\n        '11': 'k',\n        '12': 'l',\n        '13': 'm',\n        '14': 'n',\n        '15': 'o',\n        '16': 'p',\n        '17': 'q',\n        '18': 'r',\n        '19': 's',\n        '20': 't',\n        '21': 'u',\n        '22': 'v',\n        '23': 'w',\n        '24': 'x',\n        '25': 'y',\n        '26': 'z'\n    }\n\n    # mapping from alphabet to number\n    number = {v: k for k, v in alphabet.items()}\n\n    # recursive function to generate all possible combinations\n    def generate_combinations(input_string):\n        if len(input_string) == 0:\n            return ['']\n        else:\n            combinations = []\n            for combination in generate_combinations(input_string[1:]):\n                for i in range(1, 27):\n                    if input_string[0] == str(i):\n                        combinations.append(alphabet[str(i)] + combination)\n            return combinations\n\n    # generate all possible combinations\n    combinations = generate_combinations(input_string)\n\n    # filter out combinations that contain non-alphabet characters\n    combinations = [combination for combination in combinations if all(char in alphabet.values() for char in combination)]\n\n    return combinations\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    candles.sort()\n    lit_candles = 1\n    for i in range(1, len(candles)):\n        if candles[i] > candles[i-1]:\n            lit_candles += 1\n    return lit_candles\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = len(matrix), len(matrix[0])\n    row_index = col_index = 0\n    right_to_left = False\n\n    while len(result) < row * col:\n        result.append(matrix[row_index][col_index])\n        if right_to_left:\n            if col_index == 0 or row_index == row - 1:\n                right_to_left = False\n                if col_index == 0:\n                    row_index += 1\n                else:\n                    col_index -= 1\n            else:\n                col_index -= 1\n                row_index += 1\n        else:\n            if col_index == col - 1 or row_index == row - 1:\n                right_to_left = True\n                if col_index == col - 1:\n                    row_index += 1\n                else:\n                    col_index += 1\n            else:\n                col_index += 1\n                row_index += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if x < 0 or y < 0 or x >= rows or y >= cols:\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    count = 0\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1:\n            count += 1\n    if count > 0:\n        grid[x][y] = count\n    else:\n        grid[x][y] = 0\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0:\n                grid = minesweeper_clicked(grid, (nx, ny))\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # define the starting point\n    x, y = 0, 0\n\n    # define the directions\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # loop through the code sequence\n    for direction in code_sequence:\n        dx, dy = directions[direction]\n        x, y = x + dx, y + dy\n\n    # check if the explorer is back at the starting point\n    if (x, y) == (0, 0):\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    string = string.translate(str.maketrans('', '', st.punctuation))\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 0, 'D': 0, 'B': 0}\n    animal_counts = [0, 0, 0, 0, 0]\n    last_animal = ''\n    for sound in animal_string:\n        if sound in animal_sounds:\n            animal_sounds[sound] += 1\n            if animal_sounds[sound] == 5:\n                animal_sounds[sound] = 0\n                animal_counts[animal_sounds[last_animal]] += 1\n        else:\n            last_animal = last_animal if last_animal in animal_sounds else sound\n    return animal_counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])}, and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for key, value in count_dict.items():\n        if value == min_count:\n            return key\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = list(name)\n    for i, char in enumerate(name):\n        if char.lower() in vowels and char in 'aeiou':\n            for j in range(i+1, len(name)):\n                if name[j].lower() in vowels:\n                    name[j] = vowels[(vowels.index(name[j].lower())+1)%5]\n                    break\n        elif char.lower() in consonants and char in 'bcdfghjklmnpqrstvwxyz':\n            for j in range(i+1, len(name)):\n                if name[j].lower() in consonants:\n                    name[j] = consonants[(consonants.index(name[j].lower())+1)%21]\n                    break\n    return ''.join(name)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [card[0] for card in hand]\n    value_counts = {value: values.count(value) for value in values}\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += 2 * int(value) if value != 'A' else 14\n        elif count == 3:\n            score += 3 * int(value) if value != 'A' else 14\n        elif count == 4:\n            score += 4 * int(value) if value != 'A' else 14\n        elif count == 5:\n            score += 5 * int(value) if value != 'A' else 14\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return sum(fib_seq)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if isinstance(wizard, tuple):\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n        else:\n            return 'The dragon won!'\n    if dragon_hp > 0:\n        return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int('7' + '0' * (n - 1))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans += 1\n\n    for v in vampires:\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            x, y = v[0] + dx, v[1] + dy\n            if 0 <= x < rows and 0 <= y < cols and m[x][y] == 1:\n                humans -= 1\n\n    return humans\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n+1):\n            sub_result = []\n            for j in range(1, i+1):\n                sub_result.append(str(j))\n            result.append(\",\".join(sub_result))\n        for i in range(n-1, 0, -1):\n            sub_result = []\n            for j in range(1, i+1):\n                sub_result.append(str(j))\n            result.append(\",\".join(sub_result))\n        return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check(word):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if (j <= len(grid[i]) - len(word) and set(grid[i][j:j + len(word)]) == set(word)) or \\\n                        (i <= len(grid) - len(word) and set(grid[i][j] for i in range(i, i + len(word))) == set(word)):\n                    return True\n        return False\n\n    return all(check(word) for word in words)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance = 9.461 * 10**12 * t * v\n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_symbols = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '\n    !', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    english_word = english_word.lower()\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_symbols[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # split text into sentences\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        # count frequency of word in sentence\n        freq = sentence.split().count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    if max_freq == 0:\n        return (0, \"\")\n    else:\n        return (max_freq, max_sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 170000:\n        return (taxable_income - 125000) * 0.25 + 2250\n    else:\n        return (taxable_income - 170000) * 0.30 + 7000 + 5750\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    result = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                result.add(s[i:j])\n    return sorted(list(result))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # TODO: Implement this function\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_playlist = playlist[:]\n    index = 0\n    while index < playlist_length:\n        if \"Rock\" not in new_playlist[index]:\n            swap_index = (index + seed) % playlist_length\n            new_playlist[index], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[index]\n            seed = (seed * 16807) % 2147483647\n        index += 1\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation_percentages[i] = transformation_percentages[i - 1] + 10\n            if transformation_percentages[i] > 100:\n                transformation_percentages[i] = 100\n    transformation_percentages[m - 1] = 2 * transformation_percentages[m - 2] if m > 1 else 20\n    for i in range(m, n):\n        transformation_percentages[i] = transformation_percentages[i - 1] - 10\n        if transformation_percentages[i] < 0:\n            transformation_percentages[i] = 0\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email:\n        if \".\" in email[email.index(\"@\")+1:]:\n            if email[0] != \"@\" and email[-1] != \".\" and email.count(\"@\") == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    consonant_map = {'b': 'c', 'c': 'd', 'd': 'f', 'f': 'g', 'g': 'h', 'h': 'j', 'j': 'k', 'k': 'm', 'm': 'n', 'n': 'p',\n                     'p': 'q', 'q': 'r', 'r': 's', 's': 't', 't': 'v', 'v': 'w', 'w': 'x', 'x': 'y', 'y': 'z', 'z': 'b',\n                     'B': 'C', 'C': 'D', 'D': 'F', 'F': 'G', 'G': 'H', 'H': 'J', 'J': 'K', 'K': 'M', 'M': 'N', 'N': 'P',\n                     'P': 'Q', 'Q': 'R', 'R': 'S', 'S': 'T', 'T': 'V', 'V': 'W', 'W': 'X', 'X': 'Y', 'Y': 'Z', 'Z': 'B'}\n\n    result = \"\"\n    for char in s:\n        if char in vowels:\n            result += vowel_map[char]\n        elif char in consonants:\n            result += consonant_map[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        if word in emoticons_dict:\n            result += emoticons_dict[word] + \" \"\n        else:\n            result += word + \" \"\n    return result.strip()\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    s = \"*\" + s + \"*\"\n    n = \"*\" * len(s)\n    return \"\\n\".join([n, s, n])\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(int(potion.split()[-1]), potion.split()[0] + ' ' + potion.split()[1]) for potion in potions]\n    potions.sort()\n    dp = [0] + [-1] * target\n    path = [[] for _ in range(target + 1)]\n\n    for i in range(1, target + 1):\n        for power, name in potions:\n            if power > i or dp[i - power] == -1:\n                continue\n            if dp[i] == -1 or dp[i - power] + 1 < dp[i] or (dp[i - power] + 1 == dp[i] and path[i] > path[i - power] + [name]):\n                dp[i] = dp[i - power] + 1\n                path[i] = path[i - power] + [name]\n\n    return path[-1]\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    ## Dynamic Programming\n    ## Time Complexity: O(n*m)\n    ## Space Complexity: O(n*m)\n    ## where n and m are the dimensions of the array\n    ## Initialize a dp array with the same dimensions as the input array\n    dp = [[float('inf')]*len(arr[0]) for _ in range(len(arr))]\n    ## The spider starts at the top left cell, so the energy required to reach this cell is the value of the cell\n    dp[0][0] = arr[0][0]\n    ## Iterate over the array\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            ## If the cell is not the top left cell, calculate the energy required to reach this cell\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    ## Return the minimum energy required to reach the safe cell\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    legendary_acquired = False\n    second_most_valuable = None\n    most_valuable = None\n    for item in player_input:\n        if item == 5:\n            legendary_acquired = True\n        elif most_valuable is None or item > most_valuable:\n            second_most_valuable = most_valuable\n            most_valuable = item\n        elif second_most_valuable is None or item > second_most_valuable and item != most_valuable:\n            second_most_valuable = item\n    if legendary_acquired:\n        if second_most_valuable is None:\n            return (True, -1)\n        else:\n            return (True, second_most_valuable)\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    if fuel >= duration:\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    total_capacity = w + e\n    return total_weight <= total_capacity\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    count = 0\n    for i in range(0, n):\n        count += min(left_max[i], right_max[i]) - arr[i]\n    return count\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test in test_cases:\n        message = \"\"\n        for word in test:\n            for char in word:\n                if char.isalpha():\n                    message += char.lower()\n                    break\n        if message == \"\":\n            message = \"Take the cannoli.\"\n        result.append(message)\n    return result\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient in recipe:\n        if ingredient not in available or recipe[ingredient] > available[ingredient]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \"01\": \"A\", \"1000\": \"B\", \"1010\": \"C\", \"100\": \"D\", \"0\": \"E\",\n        \"0010\": \"F\", \"110\": \"G\", \"0000\": \"H\", \"00\": \"I\", \"0111\": \"J\",\n        \"101\": \"K\", \"0100\": \"L\", \"11\": \"M\", \"10\": \"N\", \"111\": \"O\",\n        \"0110\": \"P\", \"1101\": \"Q\", \"010\": \"R\", \"000\": \"S\", \"1\": \"T\",\n        \"001\": \"U\", \"0001\": \"V\", \"011\": \"W\", \"1001\": \"X\", \"1011\": \"Y\",\n        \"1100\": \"Z\", \"01111\": \"1\", \"00111\": \"2\", \"00011\": \"3\",\n        \"00001\": \"4\", \"00000\": \"5\", \"10000\": \"6\", \"11000\": \"7\",\n        \"11100\": \"8\", \"11110\": \"9\", \"11111\": \"0\"\n    }\n\n    words = msg.split(\" \")\n    decoded_msg = \"\"\n\n    for word in words:\n        if word == \"/\":\n            decoded_msg += \" \"\n        else:\n            decoded_msg += morse_code[word]\n\n    return decoded_msg\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return \"\"\n    result = \"\"\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        char = s[i]\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_string += vowels[(vowels.index(char)+1)%5]\n            else:\n                transformed_string += vowels[(vowels.index(char.lower())+1)%5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_string += consonants[(consonants.index(char)+1)%21]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower())+1)%21].upper()\n        elif char == 'y':\n            transformed_string += 'b'\n        elif char == 'z':\n            transformed_string += 'B'\n        elif char == '?':\n            if i%2 == 0:\n                transformed_string += '!'\n            else:\n                transformed_string += '?'\n        else:\n            transformed_string += char\n    return transformed_string\n"}
{"task_id": "EvoEval/54", "completion": "\n    # your code here\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    result = ''\n    shift_count = shift\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += ALPHABET[(ALPHABET.index(char) + shift_count) % 26]\n            else:\n                result += alphabet[(alphabet.index(char) + shift_count) % 26]\n            shift_count = (shift_count + 1) % 26\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[i] for i in s)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        spell_index = 0\n        for letter in dish:\n            new_dish += magic_spell[spell_index % len(magic_spell)]\n            spell_index += 1\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    earth_phrase = earth_phrase.split(' ')\n    alien_phrase = []\n    for word in earth_phrase:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == 'z':\n                new_word += 'b'\n            else:\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        alien_phrase.append(new_word.capitalize())\n    return '@'.join(alien_phrase)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants = 0\n    sugar_locations = set(sugar_locations)\n\n    # Iterate over each ant\n    for ant_position, direction in ant_positions:\n        # If the ant is moving right\n        if direction == \"right\":\n            # Iterate from the ant's position to the end of the path\n            for i in range(ant_position, path_length):\n                # If the ant finds sugar, increment the happy ants counter and break the loop\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n        # If the ant is moving left\n        else:\n            # Iterate from the ant's position to the start of the path\n            for i in range(ant_position, -1, -1):\n                # If the ant finds sugar, increment the happy ants counter and break the loop\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n\n    # Return the number of happy ants\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if i % 2 == 0:\n            s[i] = s[i].swapcase()\n        else:\n            if s[i] in vowels:\n                s[i] = vowels[(vowels.index(s[i])+1)%5]\n            else:\n                s[i] = consonants[(consonants.index(s[i])-1)%21]\n    return ''.join(s)\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recirecipe_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_recipe_quantity\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        p = p - 2 if p % 2 == 0 else p - 3\n    return pyramid[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [i for i in range(start, end + 1) if is_prime(i) and is_divisible(i, divisor)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, changes in order.items():\n        if food not in menu:\n            continue\n\n        new_menu[food] = list(menu[food])\n\n        for change_type, ingredients in changes.items():\n            for ingredient in ingredients:\n                if change_type == 'remove':\n                    while ingredient in new_menu[food]:\n                        new_menu[food].remove(ingredient)\n                elif change_type == 'add':\n                    new_menu[food].append(ingredient)\n\n    return new_menu\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"],\n        \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]},\n         \"Pizza\": {\"add\": [\"Pepperoni\"]}}\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return arr[i:]+arr[:i] == sorted(arr)\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        result.append(f\"Once upon a time kingdom far away lived magical creature name '{i}' known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    total_treasures = 0\n    chests = 0\n    # Iterate through the grid\n    for row in grid:\n        # Iterate through each row\n        for chest in row:\n            # If the chest is a treasure\n            if chest == 1:\n                # If the bag is not full\n                if chests < bag_capacity:\n                    # Add the treasure to the total\n                    total_treasures += 1\n                    # Add the treasure to the bag\n                    chests += 1\n                else:\n                    # If the bag is full, start a new trip\n                    trips += 1\n                    # Reset the bag\n                    chests = 1\n                    # Add the treasure to the total\n                    total_treasures += 1\n    # If there are still treasures in the bag, start a new trip\n    if chests > 0:\n        trips += 1\n    # Return the total number of trips\n    return total_treasures * 2 + trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_str = ''\n    for i, char in enumerate(input_str):\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_str += vowels[(vowels.index(char.lower()) + 1) % 5] if char.islower() else vowels[(vowels.index(char) + 1) % 5].upper()\n            else:\n                transformed_str += consonants[(consonants.index(char.lower()) + 1) % 21] if char.islower() else consonants[(consonants.index(char) + 1) % 21].upper()\n        elif char.isdigit():\n            transformed_str += str((int(char) % 9) + 1)\n        elif char in '.,;:':\n            transformed_str += '.,;:'[::-1] if i % 2 else '.,;:'\n        else:\n            transformed_str += char\n    return transformed_str\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append(lst[i] * '#')\n    return pyramid[::-1]\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * (max(sequence) + 1)\n    for num in sequence:\n        while num != 1:\n            num /= k\n            points[int(num)] += 1\n    return sorted(points, reverse=True)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        pattern.append(mat[i][i])\n        pattern.append(mat[i][n-i-1])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    # define directions\n    directions = {\"up\": (-1, 0), \"down\": (1, 0), \"left\": (0, -1), \"right\": (0, 1)}\n\n    # find start position\n    for row in range(len(map)):\n        for col in range(len(map[row])):\n            if map[row][col] == \"S\":\n                start_pos = (row, col)\n\n    # initialize player position and path\n    player_pos = start_pos\n    path = [start_pos]\n\n    # process instructions\n    for instruction in instructions:\n        # get direction\n        direction = directions[instruction]\n\n        # calculate new position\n        new_pos = (player_pos[0] + direction[0], player_pos[1] + direction[1])\n\n        # check if new position is valid\n        if (\n            0 <= new_pos[0] < len(map)\n            and 0 <= new_pos[1] < len(map[0])\n            and map[new_pos[0]][new_pos[1]] != \"X\"\n        ):\n            # update player position and path\n            player_pos = new_pos\n            path.append(player_pos)\n\n            # check if player has reached the end\n            if map[player_pos[0]][player_pos[1]] == \"E\":\n                return path\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i+1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        date = datetime.datetime.strptime(birthday, \"%Y-%m-%d\")\n        month = date.month\n        day = date.day\n        if (month == 3 and day >= 21 and day <= 4) or (month == 4 and day <= 19):\n            zodiac_dict[\"Fire\"] += 1\n        elif (month == 4 and day >= 20 and day <= 5) or (month == 5 and day <= 20):\n            zodiac_dict[\"Earth\"] += 1\n        elif (month == 5 and day >= 21 and day <= 6) or (month == 6 and day <= 20):\n            zodiac_dict[\"Air\"] += 1\n        elif (month == 6 and day >= 21 and day <= 7) or (month == 7 and day <= 22):\n            zodiac_dict[\"Water\"] += 1\n        elif (month == 7 and day >= 23 and day <= 8) or (month == 8 and day <= 22):\n            zodiac_dict[\"Earth\"] += 1\n        elif (month == 8 and day >= 23 and day <= 9) or (month == 9 and day <= 22):\n            zodiac_dict[\"Air\"] += 1\n        elif (month == 9 and day >= 23 and day <= 10) or (month == 10 and day <= 21):\n            zodiac_dict[\"Water\"] += 1\n        elif (month == 10 and day >= 22 and day <= 11) or (month == 11 and day <= 21):\n            zodiac_dict[\"Fire\"] += 1\n        elif (month == 11 and day >= 22 and day <= 12) or (month == 12 and day <= 21):\n            zodiac_dict[\"Earth\"] += 1\n        elif (month == 12 and day >= 22 and day <= 1) or (month == 1 and day <= 19):\n            zodiac_dict[\"Air\"] += 1\n        elif (month == 1 and day >= "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node[key]] for key in node]\n        return dfs(node[list(node.keys())[0]], path + [list(node.keys())[0]]) + dfs(node[list(node.keys())[1]], path + [list(node.keys())[1]])\n\n    return dfs(tree, [])\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize the queue with the starting position\n    queue = [(0, 0, 0)]\n    # Initialize a set to keep track of visited cells\n    visited = set()\n    # Initialize the directions\n    directions = [(0, 1), (1, 0)]\n    # While the queue is not empty\n    while queue:\n        # Dequeue the first element\n        x, y, steps = queue.pop(0)\n        # If the current cell is the princess's cell, return the number of steps\n        if (x, y) == coord:\n            return steps\n        # If the current cell is not a monster cell and has not been visited yet\n        if grid[x][y] == 0 and (x, y) not in visited:\n            # Mark the cell as visited\n            visited.add((x, y))\n            # Add the adjacent cells to the queue\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    queue.append((nx, ny, steps + 1))\n    # If the princess cannot be reached, return -1\n    return -1\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = []\n    while arr:\n        # top row\n        result += arr.pop(0)\n        # right column\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        # bottom row\n        if arr:\n            result += arr.pop()[::-1]\n        # left column\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n\n    return ''.join(result)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None and data[0] > 0 and data[1] > 0:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # remove the alien at the aimed position\n    aliens = [alien for alien in aliens if abs(alien - ray) > 1]\n    # remove the adjacent aliens\n    aliens = [alien for alien in aliens if abs(alien - ray) > 2]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # calculate the product\n    product = num1 * num2\n\n    # convert the product to a string\n    product_str = str(product)\n\n    # initialize the sum to 0\n    sum_of_digits = 0\n\n    # iterate over each digit in the product\n    for digit in product_str:\n        # add the digit to the sum\n        sum_of_digits += int(digit)\n\n    # return the sum of digits\n    return sum_of_digits\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    trajectory = ['On Ground']\n    for action in spaceship_data:\n        if action[0] == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n            trajectory.append('In Space')\n        elif action[0] == 'Move' and status == 'In Space':\n            continue\n        elif action[0] == 'Land' and status == 'In Space':\n            status = 'On Ground'\n            trajectory.append('On Ground')\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ' ' * (n - i - 1)\n        for j in range(2 * i + 1):\n            layer += alphabet[j % len(alphabet)]\n        layer += '\\n'\n        fountain += layer\n    return fountain\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the result\n    result = ''\n\n    # Loop through the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet and uppercase/lowercase\n            alphabet_to_use = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            new_pos = (alphabet_to_use.index(char) + n_values[i % len(n_values)]) % 26\n\n            # Add the new character to the result\n            result += alphabet_to_use[new_pos]\n        else:\n            # If the character is not a letter, add it to the result as is\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for spell in strings:\n        words = spell.split(' ')\n        words.sort(key=len)\n        result.append(' '.join(words))\n    return result\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # calculate sum of diagonals\n    sum_first_diagonal = sum(m[i][i] for i in range(len(m)))\n    sum_second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # return difference\n    return abs(sum_first_diagonal - sum_second_diagonal)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if alien not in [\"Xenomorph\", \"Predator\", \"Klingon\"]:\n        return []\n    if not isinstance(humans, dict):\n        return []\n    if not all(isinstance(name, str) and isinstance(continent, str) for name, continent in humans.items()):\n        return []\n    if not all(continent in [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"] for continent in humans.values()):\n        return []\n\n    alien_order = {\"Xenomorph\": [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"],\n                   \"Predator\": [\"Africa\", \"Europe\", \"North America\", \"South America\"],\n                   \"Klingon\": [\"Asia\", \"Europe\", \"North America\", \"South America\"]}\n\n    encounter = [name for name, continent in humans.items() if continent == alien_order[alien][0]]\n    return sorted(encounter)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round in rounds:\n        current_position = (current_position + music * round) % len(players)\n        players.pop(current_position)\n    return players\n\n"}
