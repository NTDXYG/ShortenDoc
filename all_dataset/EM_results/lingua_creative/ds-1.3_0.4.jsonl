{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n            if item > 5:\n                total_cost += (item - 5) * 10 + 5 * 0.15\n            else:\n                total_cost += item * 0.15\n        else:\n            total_cost += item * 0.15\n\n    if location == \"Local\":\n        total_cost *= 1.0\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            if item == 'Local':\n                total_cost += 5.0\n            elif item == 'National':\n                total_cost += 15.0\n            elif item == 'International':\n                total_cost += 25.0\n            else:\n                total_cost += float(item) * 5.0\n        else:\n            total_cost += item\n\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(char: str) -> int:\n        return ord(char)\n\n    def int_to_char(num: int) -> str:\n        return chr(num)\n\n    def shift_char(char: str, key: int) -> str:\n        ascii_num = char_to_int(char)\n        new_ascii_num = (ascii_num + key) % 26\n        return int_to_char(new_ascii_num)\n\n    def shift_word(word: str, key: int) -> str:\n        return ''.join(shift_char(char, key) for char in word)\n\n    if isinstance(key, str):\n        key = sum(char_to_int(char) for char in key)\n\n    return [shift_word(word, key) for word in words]\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(1, len(input_string) + 1):\n        for j in range(i + 1, len(input_string) + 1):\n            combination = input_string[i - 1:j]\n            result.append(combination)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_candle = candles[0]\n    count = 1\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    going_right = True\n\n    while len(result) < len(matrix) * len(matrix[0]):\n        result.append(matrix[row][col])\n        if going_right:\n            if col == len(matrix[0]) - 1:\n                row += 1\n                going_right = False\n            elif row == 0:\n                col += 1\n                going_right = False\n            else:\n                row += 1\n                col += 1\n        else:\n            if col == 0:\n                row += 1\n                going_right = True\n            elif row == len(matrix) - 1:\n                col -= 1\n                going_right = True\n            else:\n                row += 1\n                col -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    else:\n        grid[x][y] = -1\n        if x > 0:\n            if grid[x-1][y] != 1:\n                grid[x-1][y] += 1\n        if x < len(grid) - 1:\n            if grid[x+1][y] != 1:\n                grid[x+1][y] += 1\n        if y > 0:\n            if grid[x][y-1] != 1:\n                grid[x][y-1] += 1\n        if y < len(grid[0]) - 1:\n            if grid[x][y+1] != 1:\n                grid[x][y+1] += 1\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # define starting point\n    point = (0, 0)\n    # define direction\n    directions = {'N': (0, 1), 'E': (1, 0), 'S': (0, -1), 'W': (-1, 0)}\n    # define sequence\n    sequence = ['N', 'E', 'S', 'W', 'E']\n    # define result\n    result = 'Shangri-La not found'\n    # define counter\n    counter = 0\n    # iterate over sequence\n    for move in sequence:\n        # update point\n        point = tuple(map(sum, zip(point, directions[move])))\n        # increment counter\n        counter += 1\n        # if point equals to 0, then return 'Shangri-La found'\n        if point == (0, 0):\n            result = 'Shangri-La found'\n            break\n    # if counter equals to length of sequence, then return 'Shangri-La found'\n    if counter == len(sequence):\n        result = 'Shangri-La found'\n    # return result\n    return result\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    def is_valid(canvas: str) -> bool:\n        if 'P' in canvas and '*' in canvas:\n            return False\n        if 'P' in canvas and '#' in canvas:\n            return False\n        if '*' in canvas and '#' in canvas:\n            return False\n        if 'P' not in canvas and '*' not in canvas:\n            return False\n        return True\n\n    def transform(canvas: str) -> str:\n        if not is_valid(canvas):\n            return 'Invalid canvas'\n        new_canvas = list(canvas)\n        for i in range(len(new_canvas)):\n            if new_canvas[i] == 'P':\n                if i > 0 and new_canvas[i-1] == '-':\n                    new_canvas[i-1] = '*'\n                elif i < len(new_canvas) - 1 and new_canvas[i+1] == '-':\n                    new_canvas[i+1] = '*'\n                else:\n                    return 'Invalid canvas'\n        return ''.join(new_canvas)\n\n    print(transform('P----#-----#-----#-----'))\n    print(transform('Invalid canvas'))\n    print(transform('#-P'))\n    print(transform('Invalid canvas'))\n    print(transform('*' + 'P'*5 + '#'*5))\n    print(transform('Invalid canvas'))\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    words = string.split(string)\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_sounds = animal_string.split()\n    for sound in animal_sounds:\n        if sound[0] in animal_dict:\n            animal_dict[sound[0]] += 1\n    return [animal_dict[key] for key in ['C', 'D', 'B']]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(list(count.values()))\n    sum_elements = sum(flux_values)\n    result = sum_elements * max_occurrence\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            alias += vowels[(index+1)%5]\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            alias += consonants[(index+1)%26]\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    def card_value(card: str):\n        return int(card[0]) if card[0].isdigit() else 10 if card[0] in 'JQKA' else 11\n\n    def card_suit(card: str):\n        return card[1]\n\n    def card_rank(hand: list):\n        values = [card_value(card) for card in hand]\n        suit = card_suit(hand[0])\n        counts = [values.count(v) for v in set(values)]\n        if 5 in counts:\n            return 'five of a kind'\n        elif 4 in counts:\n            return 'four of kind'\n        elif 3 in counts:\n            return 'full house'\n        elif 2 in counts:\n            return 'triple'\n        elif 2 and 1 in counts:\n            return 'two pair'\n        elif 1 and 0 in counts:\n            return 'pair'\n        else:\n            return 'high card'\n\n    def card_score(hand: list):\n        values = [card_value(card) for card in hand]\n        suit = card_suit(hand[0])\n        return sum(values) + suit_bonus[suit]\n\n    suit_bonus = {'H': 1, 'D': 2, 'C': 3, 'S': 4}\n\n    hand.sort(key=card_value, reverse=True)\n    return card_rank(hand), card_score(hand)\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_list = [0, 1]\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return sum(fib_list)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    wizards.sort(key=lambda x: x[1])\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'Dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return int(str(n)*7)\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    humans = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                humans += 1\n            elif m[i][j] == 2:\n                vampires += 1\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    else:\n        return [','.join(str(i) for i in range(n, 0, -1))] + generate_pattern(n-1)\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in transposed:\n            if word in ''.join(i):\n                return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years = 9.461 * 10**12\n    distance = t * v\n    return distance / light_years\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_to_str(n):\n        if n < 10:\n            return str(n)\n        else:\n            return chr(n + 87)\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            char_num = ord(char)\n            if is_prime(char_num - 96):\n                result += prime_to_str(char_num - 96)\n            else:\n                result += char\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {\n        'a': '\u03b1',\n        'b': '\u03b2',\n        'c': '\u03b3',\n        'd': '\u03b4',\n        'e': '\u03b5',\n        'f': '\u03c6',\n        'g': '\u03b3',\n        'h': '\u03b7',\n        'i': '\u03b9',\n        'j': '\u03ba',\n        'k': '\u03bb',\n        'l': '\u03bc',\n        'm': '\u03bd',\n        'n': '\u03be',\n        'o': '\u03bf',\n        'p': '\u03c0',\n        'q': '\u03b7',\n        'r': '\u03c1',\n        's': '\u03c3',\n        't': '\u03c4',\n        'u': '\u03c5',\n        'v': '\u03c7',\n        'w': '\u03c9',\n        'x': '\u03c8',\n        'y': '\u03c7',\n        'z': '\u03b6',\n        ' ': ' ',\n        '+': '\u03c0',\n        '-': '\u043c',\n        '*': '\u03ba',\n        '/': '\u03c6',\n        '@': '\u03b1',\n        '%': '\u03c7',\n        '&': '\u03bb',\n        '(': '(',\n        ')': ')',\n        '=': '\u03b7',\n        '?': '\u03f4',\n        ':': '\u03f5',\n        ';': '\u03f6',\n        '<': '\u03f9',\n        '>': '\u03fa',\n        '[': '\u03fe',\n        ']': '\u03ff',\n        '{': '\u03fe',\n        '}': '\u03ff',\n        '~': '\u03fe',\n        '$': '\u03ff',\n        '^': '\u03fe',\n        '$': '\u03ff',\n        '^': '\u03fe',\n        '&': '\u03bb',\n        '*': '\u03ba',\n        '/': '\u03c6',\n        '@': '\u03b1',\n        '+': '\u03c0',\n        '-': '\u043c',\n        '*': '\u03ba',\n        '/': '\u03c6',\n        '@': '\u03b1',\n        '+': '\u03c0"}
{"task_id": "EvoEval/25", "completion": "\n    # Split text into sentences\n    sentences = text.replace(\".\", \"\").split(\" \")\n    # Count word frequency in sentences\n    word_freq = [sentence.count(word) for sentence in sentences]\n    # If word not found return (0, \"\")\n    if 0 in word_freq:\n        return (0, \"\")\n    # Find max frequency\n    max_freq = max(word_freq)\n    # Find sentence with max frequency\n    max_freq_sentence = sentences[word_freq.index(max_freq)]\n    return (max_freq, max_freq_sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] != 0:\n        return []\n    maze[start[0]][start[1]] = 1\n    directions = []\n    if start[0] > 0 and maze[start[0]-1][start[1]] == 0:\n        directions.append('up')\n    if start[1] < len(maze[0])-1 and maze[start[0]][start[1]+1] == 0:\n        directions.append('right')\n    if start[0] < len(maze)-1 and maze[start[0]+1][start[1]] == 0:\n        directions.append('down')\n    if start[1] > 0 and maze[start[0]][start[1]-1] == 0:\n        directions.append('left')\n    for direction in directions:\n        if direction == 'up' and start[0] > 0 and maze[start[0]-1][start[1]] == 0:\n            directions.extend(pathfinder(maze, (start[0]-1, start[1]), end))\n        if direction == 'right' and start[1] < len(maze[0])-1 and maze[start[0]][start[1]+1] == 0:\n            directions.extend(pathfinder(maze, (start[0], start[1]+1), end))\n        if direction == 'down' and start[0] < len(maze)-1 and maze[start[0]+1][start[1]] == 0:\n            directions.extend(pathfinder(maze, (start[0]+1, start[1]), end))\n        if direction == 'left' and start[1] > 0 and maze[start[0]][start[1]-1] == 0:\n            directions.extend(pathfinder(maze, (start[0], start[1]-1), end))\n    return directions\n"}
{"task_id": "EvoEval/27", "completion": "\n    if len(s) % n != 0:\n        s += ' ' * (n - len(s) % n)\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 1500\n    else:\n        return (income - 45000) * 0.30 + 2750\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(palindromes)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Initialize the queue\n    queue = [(0, start, [])]\n    # Initialize visited set\n    visited = set()\n\n    while queue:\n        # Get the current path length, current position and current path\n        path_len, current, path = queue.pop(0)\n        # If the current position is the end, return the path\n        if current == end:\n            return path + [end]\n        # If the current position has been visited, continue to the next iteration\n        if current in visited:\n            continue\n        # Mark the current position as visited\n        visited.add(current)\n        # Get the possible next positions\n        next_positions = [(current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1), (current[0], current[1] + 1)]\n        # For each next position\n        for next_position in next_positions:\n            # If the next position is within the maze and is not a wall\n            if 0 <= next_position[0] < len(maze) and 0 <= next_position[1] < len(maze[0]) and maze[next_position[0]][next_position[1]] == 1:\n                # Add the next position and the current path to the queue\n                queue.append((path_len + 1, next_position, path + [current]))\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Initialize a new list to hold the shuffled playlist\n    shuffled_playlist = []\n\n    # Initialize a list to hold the original indices\n    indices = list(range(len(playlist)))\n\n    # Initialize the seed\n    seed = 7\n\n    # Loop through the indices\n    for i in indices:\n        # Generate a random index\n        j = seed * 16807 % 2147483647\n\n        # Swap the current index with the random index\n        indices[i], indices[j] = indices[j], indices[i]\n\n        # Update the seed\n        seed = j\n\n    # Loop through the indices again\n    for i in indices:\n        # Append the song at the current index to the shuffled playlist\n        shuffled_playlist.append(playlist[i])\n\n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    pass\n"}
{"task_id": "EvoEval/34", "completion": "\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    at_index = email.index(\"@\")\n    if at_index == 0 or at_index == len(email) - 1:\n        return False\n    if \".\" not in email[at_index + 1:]:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    ys = [0.0]*n\n    for i in range(n):\n        ys[i] = xs[i]\n        if i > 0:\n            ys[i] *= xs[i-1]\n        if i > 1:\n            ys[i] /= (i+1)\n    return ys\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    trans = s.maketrans(vowels, 'eiouAEIOU' + vowels[0]*len(vowels))\n    s = s.translate(trans)\n    trans = s.maketrans(consonants, 'cgnmZBCDFGHJKLMNPQRSTVWXY' + consonants[0]*len(consonants))\n    s = s.translate(trans)\n    return s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \";)\" : \"\ud83d\ude09\",\n        \":D\": \"\ud83d\ude0a\",\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    def asciiArt(n, s):\n        return \"\\n\".join(\"*\" + \"\".join(c for c in s) + \"*\" for _ in range(n))\n\n    return asciiArt(n, s)\n"}
{"task_id": "EvoEval/40", "completion": "\n    def sort_key(potion):\n        name, power = potion.split()\n        return (int(power), name)\n\n    potions.sort(key=sort_key)\n    result = []\n    total_power = 0\n    for potion in potions:\n        name, power = potion.split()\n        power = int(power)\n        if total_power + power > target:\n            break\n        result.append(potion)\n        total_power += power\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, grid):\n        if not grid or not grid[0]:\n            return 0\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    if not player_input:\n        return (False, None)\n    legendary_item_found = False\n    legendary_item_rarity = -1\n    for item_rarity in player_input:\n        if item_rarity == 5:\n            legendary_item_found = True\n            legendary_item_rarity = item_rarity\n    if legendary_item_found:\n        return (True, legendary_item_rarity)\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    if fuel < fuel_consumption:\n        return 'Insufficient fuel'\n    else:\n        fuel = fuel - fuel_consumption\n        if distance / speed >= 1:\n            return round(fuel, 2)\n        else:\n            return round(fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    def check_carry(q, w, e):\n        if sum(q) <= w and sum(e) <= e:\n            return True\n        else:\n            return False\n\n    return check_carry(q, w, e)\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        max_hills = 0\n        current_hills = 0\n        for i in range(len(arr)):\n            if i == 0 or arr[i] > arr[i-1]:\n                current_hills += 1\n            else:\n                if current_hills > max_hills:\n                    max_hills = current_hills\n                current_hills = 0\n        if current_hills > max_hills:\n            max_hills = current_hills\n        return max_hills\n\n    print(find_castle([1,2,3,2,5,3,6,4,8,2,7])) # 10\n    print(find_castle([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 8\n    print(find_castle([9, 8, 7, 6, 5, 4, 3, 2, 1])) # 8\n    print(find_castle([5, 5])) # 4\n\nfind_castle()\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases[0]:\n            words = test_case.split()\n            secret_message = ''.join([word[0] for word in words])\n            secret_messages.append(secret_message)\n        return secret_messages\n\n    print(hidden_message([['Hello, world! 'okay?'Every' 'good' 'boy' 'does' 'fine']]))\n    print(hidden_message([['apple''Banana' 'grape 'kiwi 'melon']]))\n    print(hidden_message([['This' 'is ' 'test' 'case??' ['hi']]))\n\nhidden_message()\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available:\n            return False\n        if available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010',\n        'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100',\n        'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010',\n        'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001',\n        'Y': '1011', 'Z': '1100', '0': '01111', '1': '00111', '2': '00011',\n        '3': '00001', '4': '00000', '5': '00000', '6': '10000', '7': '11000',\n        '8': '11100', '9': '11110', ' ': '11111'\n    }\n\n    decoded_msg = ''\n    msg_list = msg.split(' ')\n\n    for symbol in msg_list:\n        for char in symbol:\n            decoded_msg += morse_code_dict[char]\n        decoded_msg += '/'\n\n    return decoded_msg[:-1]\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',\n        '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ' ': ' ',\n    }\n    return ' '.join(morse_code_dict[i.upper()] for i in text if i.upper() in morse_code_dict)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return list_of_alphabets\n    else:\n        return ''.join(list_of_alphabets[i % len(list_of_alphabets)] for i in range(len(string)))\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def bake_cookies(n, m, orders):\n        batches = [0] * m\n        for order in orders:\n            for i in range(m):\n                if batches[i] + order <= n:\n                    batches[i] += order\n                    break\n        return max(batches)\n\n    return bake_cookies(n, m, orders)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i] == 'a':\n                result += 'e'\n            elif s[i] == 'e':\n                result += 'i'\n            elif s[i] == 'i':\n                result += 'o'\n            elif s[i] == 'o':\n                result += 'u'\n            elif s[i] == 'u':\n                result += 'a'\n        elif s[i] in consonants:\n            if s[i] == 'z':\n                result += 'b'\n            elif s[i] == 'b':\n                result += 'd'\n            elif s[i] == 'd':\n                result += 'f'\n            elif s[i] == 'f':\n                result += 'g'\n            elif s[i] == 'g':\n                result += 'j'\n            elif s[i] == 'j':\n                result += 'k'\n            elif s[i] == 'k':\n                result += 'l'\n            elif s[i] == 'l':\n                result += 'm'\n            elif s[i] == 'm':\n                result += 'n'\n            elif s[i] == 'n':\n                result += 'p'\n            elif s[i] == 'p':\n                result += 'q'\n            elif s[i] == 'q':\n                result += 'r'\n            elif s[i] == 'r':\n                result += 's'\n            elif s[i] == 's':\n                result += 't'\n            elif s[i] == 't':\n                result += 'v'\n            elif s[i] == 'v':\n                result += 'w'\n            elif s[i] == 'w':\n                result += 'x'\n            elif s[i] == 'x':\n                result += 'y'\n            elif s[i] == 'y':\n                result += 'z'\n            elif s[i] =="}
{"task_id": "EvoEval/54", "completion": "\n    star_map = {}\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val in star_map:\n                star_map[val].append((i, j))\n            else:\n                star_map[val] = [(i, j)]\n    if star in star_map:\n        return star_map[star]\n    return []\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return c\n\n    return ''.join(shift_char(c, shift) for c in message)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---',\n        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',\n        '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..',\n        ' ': ' ', '(': '-.--.', ')': '-.--.-', '+': '.-.-.', '-': '-....-', '/': '-..-.',\n        '@': '.--.-.', ':': '---...', ';': '-.-.-.', '=': '-...-', '0': '-----',\n        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....',\n        '7': '--...', '8': '---..', '9': '----.', ' ': ' ', '&': '.-...', \"'\": '.----.',\n        '$': '...-..-', '\u20ac': '.-.-.', '@': '.--.-.', '\u20ac': '.-.-.', ' ': ' ', ' ': ' '\n    }\n\n    morse_code = ''\n    for char in s:\n        morse_code += morse_"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        return dish.replace(dish[0], spell)\n\n    def spell_starts_with(spell, dish):\n        return spell[0] in dish\n\n    def spell_transform(spell, dish):\n        return spell * len(dish)\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        if spell_starts_with(magic_spell, dish):\n            transformed_menu[spell_transform(magic_spell, dish)] = price\n        else:\n            transformed_menu[transform_dish(dish, magic_spell)] = price\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char)+1)%5]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char)+1)%21]\n        elif char == ' ':\n            translated_phrase += '@'\n        else:\n            translated_phrase += char\n    if earth_phrase[0] in vowels:\n        translated_phrase = translated_phrase + 'xy'\n    elif earth_phrase[0] in consonants:\n        translated_phrase = translated_phrase + 'yz'\n    return translated_phrase.capitalize()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [(k, v) for k, v in ingredient_list]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans = s.lower()\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += chr(ord(s[i]) + 1)\n            elif s[i] in consonants:\n                result += chr(ord(s[i]) - 1)\n            else:\n                result += s[i]\n        else:\n            if s[i] in vowels:\n                result += chr(ord(s[i]) - 1)\n            elif s[i] in consonants:\n                result += chr(ord(s[i]) + 1)\n            else:\n                result += s[i]\n    return result\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = int(quantity) * conversion_factor\n        new_recipe[ingredient] = str(new_quantity) + \" \" + ingredient\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p <= 0:\n        return []\n    else:\n        pyramid = [p]\n        for i in range(p-1, 0, -1):\n            if p % 2 == 0:\n                pyramid.append(i-2)\n            else:\n                pyramid.append(i-3)\n        return pyramid\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def magical_sequence(start, end, divisor):\n        return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n    return magical_sequence(start, end, divisor)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for item in order:\n        if item in menu:\n            new_item = list(menu[item])\n            if \"remove\" in item:\n                if item.split(\" \")[0] in new_item:\n                    new_item.remove(item.split(\" \")[0])\n            elif \"add\" in item:\n                new_item.append(item.split(\" \")[0])\n            final_order[item] = new_item\n        else:\n            print(\"Order dictionary not contain food not on menu\")\n    return final_order\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"], \"Sushi\": [\"Plate\", \"Seaweed\", \"Shell\"]}\norder = {\"Burger\": \"remove Cheese\", \"Pizza\": \"add Pepperoni\"}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    def meal_calculator(customers, meals):\n        result = {}\n        for customer in customers:\n            total_calories = 0\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n            result[customer] = total_calories\n        return result\n\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice': [{'dish': 'Pizza', 'calories': 300}, {'dish': 'Burger', 'calories': 500}], 'Bob': [{'dish': 'Salad', 'calories': 100}], 'Charlie': [{'dish': 'Fries', 'calories': 200}, {'dish': 'Burger', 'calories': 500}, {'dish': 'Ice Cream', 'calories': 250}]}))\n    print(meal_calculator(['Tom', 'Jerry'], {'Tom': [{'dish': 'Pizza', 'calories': 300}], 'Jerry': [{'dish': 'Fries', 'calories': 200}]}))\n\nmeal_calculator()\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr) - 1:\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                return True\n        elif arr[i] < arr[i - 1] and arr[i + 1] < arr[i]:\n            arr[i - 1], arr[i + 1] = arr[i + 1], arr[i - 1]\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets.keys():\n            return False\n        if planet in planets[planet]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_letter(c):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n        return c\n\n    encrypted = \"\".join(shift_letter(c) for c in s)\n    vowels = sum(1 for c in encrypted if c.lower() in 'aeiou')\n    return (encrypted, vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for s in lst:\n        name, num = s.split(' ')\n        num = int(num)\n        result.append(f\"kingdom far {name} lived magical creature '{name}' known for telling {num} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_chests(grid):\n        return sum(sum(row) for row in grid)\n    \n    def count_trips(grid, bag_capacity):\n        total_chests = count_chests(grid)\n        return math.ceil(total_chests / bag_capacity)\n    \n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    mapping = {}\n    for i in range(len(s)):\n        if s[i] in cipher:\n            mapping[s[i]] = cipher[s[i]]\n        else:\n            mapping[s[i]] = ''\n    new_s = ''\n    for i in range(len(s)):\n        if s[i] in mapping:\n            new_s += mapping[s[i]]\n        else:\n            new_s += s[i]\n    return new_s\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \".,;:\\!\"\n    result = \"\"\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += digits[(digits.index(input_str[i])+1)%len(digits)]\n        elif input_str[i] in special_chars:\n            if i%2==0:\n                result += input_str[i]\n        else:\n            result += input_str[i]\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst), 0, -1):\n        row = []\n        for j in range(1, i+1):\n            row.append('#' * j)\n        pyramid.append(row)\n    return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_helper(sequence, k, result=[]):\n        if not sequence:\n            return result\n        else:\n            if len(result) < k:\n                result.append(1 / sequence[0])\n            else:\n                result.append(1 / sequence[0] * sum(result))\n            return magical_sequence_helper(sequence[1:], k, result)\n\n    return magical_sequence_helper(sequence, k)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n\n    def _find_pattern(mat, x, y, dx, dy, pattern):\n        if x < 0 or y < 0 or x + dx > len(mat) or y + dy > len(mat[0]):\n            return False\n        if len(pattern) == 0:\n            return True\n        if mat[x][y] != pattern[0]:\n            return False\n        for i in range(1, len(pattern)):\n            if not _find_pattern(mat, x + i * dx, y + i * dy, dx, dy, pattern[i:]):\n                return False\n        return True\n\n    pattern = [mat[0][0]]\n    for i in range(len(mat)):\n        for j in range(len(mat[0])):\n            if _find_pattern(mat, i, j, 1, 0, pattern):\n                return pattern\n            if _find_pattern(mat, i, j, 0, 1, pattern):\n                return pattern\n    return pattern\n\n\nmat = [[10, 20, 30, 40, 50, 60, 70, 90, 100, 110, 120, 130, 140, 160, 170, 180, 190, 200, 210, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480],\n       [11, 17, 23, 29, 35, 15, 19, 27, 31, 10, 90, 170, 250, 33"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n\nprices = [1, 5, 2, 8, 7, 3]\ndays = 5"}
{"task_id": "EvoEval/80", "completion": "\n    def move_player(map, player, direction):\n        row, col = player\n        if direction == 'up':\n            row -= 1\n        elif direction == 'down':\n            row += 1\n        elif direction == 'left':\n            col -= 1\n        elif direction == 'right':\n            col += 1\n        return (row, col)\n\n    def is_valid_move(map, player):\n        row, col = player\n        if map[row][col] == 'X':\n            return False\n        return True\n\n    def is_end(map, player):\n        return map[player[0]][player[1]] == 'E'\n\n    player = (map.index('S'), map[0].index('S'))\n    instructions = instructions.split()\n    path = [player]\n\n    for ins in instructions:\n        if is_valid_move(map, move_player(player, ins)):\n            player = move_player(player, ins)\n            path.append(player)\n        if is_end(map, player):\n            return path\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    pass\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path=[]):\n        for k, v in tree.items():\n            if isinstance(v, dict):\n                dfs(v, path + [k])\n            else:\n                yield path + [k]\n\n    return list(dfs(tree))\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid(x, y, grid):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    def bfs(start, grid):\n        moves = 0\n        queue = [(start, moves)]\n        visited = {start}\n        while queue:\n            current, moves = queue.pop(0)\n            if current == princess:\n                return moves\n            for direction in [(0, 1), (1, 0)]:\n                next_point = (current[0] + direction[0], current[1] + direction[1])\n                if is_valid(*next_point, grid) and next_point not in visited:\n                    visited.add(next_point)\n                    queue.append((next_point, moves + 1))\n        return -1\n\n    start, princess = coord, None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                princess = (i, j)\n            elif grid[i][j] == 0:\n                start = (i, j)\n    return bfs(start, grid)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\n    \"Inception\": [8.8, 2010],\n    \"The Dark Knight\": [9, 2008],\n    \"Interstellar\": [8.6, 2014],\n    \"The Dark Knight Rises\": [8.4, 2012],\n    \"Toy Story\": [8, 1995],\n    \"Toy Story 2\": [7.9, 1999],\n    \"Toy Story 3\": [8.3, 2010],\n    \"Toy Story 4\": [7.8, 2019]\n}\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return ''\n\n    res = []\n    while arr:\n        res += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                res.append(row.pop())\n        if arr:\n            res += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                res.append(row.pop(0))\n    return ' '.join(res)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def calculate_population_density(planet_population, planet_size):\n        if planet_population is None or planet_size is None:\n            return None\n        return round(planet_population / planet_size, 2)\n\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            new_dict[planet] = calculate_population_density(data[0], data[1])\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(pos1, pos2):\n        return abs(pos1 - pos2) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_valid(pos, aliens):\n        return 0 <= pos < len(aliens) and not is_adjacent(pos, aliens[pos])\n\n    def destroy(pos, aliens):\n        aliens[pos] = -1\n\n    aliens = list(aliens)\n    for pos in sorted(ray, reverse=True):\n        if is_valid(pos, aliens):\n            destroy(pos, aliens)\n    return [pos for pos in aliens if pos != -1]\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def unique_combinations(n):\n        if n == 0:\n            return [()]\n        else:\n            result = []\n            for combination in unique_combinations(n - 1):\n                for i in range(1, n + 1):\n                    if n - i in combination:\n                        result.append(combination + (i,))\n            return result\n\n    def product(lst):\n        p = 1\n        for i in lst:\n            p *= i\n        return p\n\n    num1 = int(s1)\n    num2 = int(s2)\n    uc = unique_combinations(len(s1) + len(s2))\n    uc_nums = [(i, j) for i in uc for j in uc if i + j == len(s1) + len(s2)]\n    prods = [product(i) * product(j) for i, j in uc_nums]\n    return product([n for n in prods if n <= num1 * num2])\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action in spaceship_data:\n        if action[0] == 'Launch':\n            if status == \"On Ground\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action[0] == 'Move':\n            if status == \"In Space\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action[0] == 'Land':\n            if status == \"In Space\":\n                status = \"On Ground\"\n            else:\n                return \"Invalid Action Sequence\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for i in range(n):\n        layer = alphabet[i]\n        result += layer.center(2*n-1) + '\\n'\n    return result\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_string(s, n):\n        return ''.join(shift_char(c, n) for c in s)\n\n    n_values = n_values % 26\n    return ' '.join(shift_string(word, n) for word in message.split(' '))\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_spell(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return words\n\n    return [sort_spell(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n\n    def is_valid(m):\n        if not m:\n            return False\n        for i in range(len(m)):\n            if len(m[i]) != len(m):\n                return False\n        return True\n\n    if not is_valid(m):\n        return 'Invalid Matrix'\n\n    first_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    second_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(first_diagonal_sum - second_diagonal_sum)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            if i % 2 == 0:\n                if lst[i] % 2 == 0:\n                    if i * lst[i] == i:\n                        magic_indices.append(i)\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    alien_continent_mapping = {\n        \"Xenomorph\": \"Asia\",\n        \"Predator\": \"Europe\",\n        \"Klingon\": \"North America\"\n    }\n\n    def validate_alien(alien_name):\n        return alien_name in alien_continent_mapping\n\n    def get_encounter_order(alien_continent):\n        return sorted(alien_continent_mapping.get(alien_continent, []))\n\n    if not validate_alien(alien):\n        return []\n\n    alien_continent = alien_continent_mapping.get(alien)\n    encounter_order = get_encounter_order(alien_continent)\n\n    return sorted([human for human, continent in humans.items() if continent == alien_continent])\n\n"}
{"task_id": "EvoEval/98", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[i-1] + sequence[i-2]\n        sequence.append(next_number)\n        if is_prime(next_number):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def play_round(n, music):\n        eliminated = []\n        for i in range(1, n + 1):\n            if i % music == 0:\n                eliminated.append(i)\n            else:\n                eliminated.append(i)\n        return eliminated\n\n    def play_game(n, rounds, music):\n        players = list(range(1, n + 1))\n        for round_number, time in enumerate(rounds, start=1):\n            print(f\"Round {round_number}: After {time} seconds\")\n            players = play_round(len(players), music)\n        return players\n\n    return play_game(n, rounds, music)\n\n"}
