{"task_id": "EvoEval/0", "completion": "\n    shipping_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            shipping_cost += 5.0 * 1.5\n        else:\n            shipping_cost += 5.0\n            if item > 5.0:\n                shipping_cost += 10.0\n    if location == \"National\":\n        shipping_cost *= 1.5\n    elif location == \"International\":\n        shipping_cost *= 2.5\n    return round(shipping_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n        else:\n            total_weight += item\n    additional_charge = 10.0 if total_weight > 5 else 0\n    total_cost = (base_shipping_cost * total_weight) + additional_charge\n    if location in location_factors:\n        total_cost *= location_factors[location]\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                if isinstance(key, str):\n                    key = sum(ord(c) for c in key)\n                shift = key % 26\n                if char.islower():\n                    encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    encrypted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_char = char\n            encrypted_word += encrypted_char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # TODO: Implement this function\n    pass\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    return candles.count(tallest)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i == 0 or i == rows - 1) and (j == 0 or j == cols - 1):\n                continue\n\n            if direction == 1:\n                if j == cols - 1:\n                    i += 1\n                    direction = -1\n                elif i == 0:\n                    j += 1\n                    direction = -1\n                else:\n                    i -= 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                    direction = 1\n                elif j == 0:\n                    i += 1\n                    direction = 1\n                else:\n                    i += 1\n                    j -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Check if position is out of grid\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n\n    # Check if cell is a mine\n    if grid[position[0]][position[1]] == 1:\n        return grid\n\n    # Check if cell is already revealed\n    if grid[position[0]][position[1]] == 0:\n        return grid\n\n    # Reveal cell\n    grid[position[0]][position[1]] = 0\n\n    # Check adjacent cells\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            if position[0] + i < 0 or position[0] + i >= len(grid) or position[1] + j < 0 or position[1] + j >= len(grid[0]):\n                continue\n            if grid[position[0] + i][position[1] + j] == 1:\n                continue\n            if grid[position[0] + i][position[1] + j] == 0:\n                continue\n            grid[position[0] + i][position[1] + j] = 0\n\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for code in code_sequence:\n        if code == 0:\n            y += 1\n        elif code == 1:\n            x += 1\n        elif code == 2:\n            y -= 1\n        elif code == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = canvas.replace('P', '')\n    if canvas.count('#') != canvas.count('-'):\n        return 'Invalid canvas'\n    if canvas.count('#') == 0:\n        return canvas\n    if canvas.count('#') == 1:\n        return canvas.replace('-', '*')\n    if canvas.count('#') > 1:\n        if canvas.count('#') % 2 == 0:\n            return 'Invalid canvas'\n        else:\n            return canvas.replace('-', '*')\n    return canvas\n"}
{"task_id": "EvoEval/9", "completion": "\n    # TODO: Implement this function\n    return {}\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 0, 'D': 0, 'B': 0}\n    sounds = animal_string.split(' ')\n    for sound in sounds:\n        if sound[0] in animals:\n            animals[sound[0]] += len(sound) - 1\n    return list(animals.values())\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    most_occurred_number = min([num for num, count in counter.items() if count == max_occurrence])\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * most_occurred_number\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    for elem, cnt in count.items():\n        if cnt == min_count:\n            return elem"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            elif char.lower() in consonants:\n                alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            else:\n                alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    hand = [int(card[:-1]) for card in hand]\n    hand.sort()\n    if len(set(hand)) == 1:\n        return hand[0] * 4\n    elif len(set(hand)) == 2:\n        if hand.count(hand[0]) == 4:\n            return hand[0] * 3\n        else:\n            return hand[0] * 2 + hand[2]\n    elif len(set(hand)) == 3:\n        if hand.count(hand[0]) == 3:\n            return hand[0] * 3\n        else:\n            return hand[1] * 2 + hand[0]\n    else:\n        return 0\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return sum(fib)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if isinstance(wizard, tuple):\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n        else:\n            return 'The dragon won!'\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_magical(n):\n        return sum(int(digit) for digit in str(n)) == 7\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_magical(num):\n            count += 1\n\n    return num"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(str(j) for j in range(1, i + 1)))\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower() and 'a' <= char <= 'z':\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Create a dictionary to map each letter to its corresponding symbol\n    symbol_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n\n    # Translate each letter in the English word to its corresponding symbol\n    translated_word = ''.join(symbol_map[letter] for letter in english_word.lower())\n\n    return translated_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_frequency_sentence = \"\"\n    max_frequency = 0\n    for sentence in sentences:\n        words = sentence.split()\n        count = words.count(word)\n        if count > max_frequency:\n            max_frequency = count\n            max_frequency_sentence = sentence\n        word_count += count\n    return word_count, max_frequency_sentence"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    # Perform breadth-first search\n    while queue:\n        (current, path) = queue.pop(0)\n        visited.add(current)\n        # Check if we've reached the end\n        if current == end:\n            return path\n        # Check the neighbors\n        for direction in ['up', 'down', 'left', 'right']:\n            next = move(current, direction)\n            if next not in visited and maze[next[0]][next[1]] == 0:\n                queue.append((next, path + [direction]))\n    # If we've exhausted the queue without finding a path, return an empty list\n    return []"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    # create empty list to store palindrome substrings\n    palindromes = []\n  \n    # iterate through each character in the string\n    for i in range(len(s)):\n        # iterate through each possible substring starting at the current character\n        for j in range(i+1, len(s)+1):\n            # check if the substring is a palindrome\n            if s[i:j] == s[i:j][::-1]:\n                # add the palindrome to the list\n                palindromes.append(s[i:j])\n  \n    # return the list of palindrome substrings\n    return palindromes\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS\n    queue = []\n    # Mark the start node as visited and enqueue it\n    queue.append(start)\n    # Create a set to store visited nodes\n    visited = set()\n    visited.add(start)\n    # Create a dictionary to store the parent of each node\n    parent = {}\n    # Perform BFS\n    while queue:\n        # Dequeue a node from the queue\n        node = queue.pop(0)\n        # If the node is the end node, return the path\n        if node == end:\n            path = []\n            while node in parent:\n                path.append(node)\n                node = parent[node]\n            path.append(start)\n            path.reverse()\n            return path\n        # Get the neighbors of the node\n        neighbors = get_neighbors(maze, node)\n        # Enqueue the neighbors that have not been visited\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                queue.append(neighbor)\n                visited.add(neighbor)\n                parent[neighbor] = node\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # create 2D array\n    dp = [[0] * n for _ in range(m)]\n    # set first row and first column to 1\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    # iterate through 2D array\n    for i in range(1, m):\n        for j in range(1, n):\n            # set current cell to sum of top and left cells\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # return last cell\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            j = seed % playlist_length\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # base case: there is 1 way to reach the 0th step (by not jumping)\n    ways[0] = 1\n    # iterate through each step\n    for i in range(1, n + 1):\n        # for each magic stone, add the number of ways to reach the current step\n        for stone in magic_stones:\n            # if the stone's power is greater than the current step, skip it\n            if stone > i:\n                continue\n            # add the number of ways to reach the current step\n            ways[i] += ways[i - stone]\n    # return the number of ways to reach the nth step\n    return ways[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    percentages = [0]\n    for i in range(1, n+1):\n        if i < m:\n            percentage = percentages[-1] + 10\n        elif i == m:\n            percentage = percentages[-1] * 2\n        else:\n            percentage = percentages[-1] - 10\n        percentages.append(min(max(percentage, 0), 100))\n    return percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or \"@\" in email[email.index(\"@\")+1:email.index(\"@\") + email[email.index(\"@\"):].index(\".\")]:\n        return False\n    return True"}
{"task_id": "EvoEval/36", "completion": "\n    xs = [0] + xs\n    for i in range(1, len(xs)):\n        xs[i] /= i\n    return xs\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                result += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                result += consonants[consonants.index(char.lower()) + 1]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the rows of the ASCII art\n    rows = []\n\n    # Create the top row of the ASCII art\n    top_row = '*' * (len(s) * n + 2)\n    rows.append(top_row)\n\n    # Create the middle rows of the ASCII art\n    for i in range(n):\n        row = '*' + s * n + '*'\n        rows.append(row)\n\n    # Create the bottom row of the ASCII art\n    bottom_row = '*' * (len(s) * n + 2)\n    rows.append(bottom_row)\n\n    # Join the rows with newline characters to create the final ASCII art\n    ascii_art = '\\n'.join(rows)\n\n    return ascii_art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    target = int(target)\n    result = []\n    for potion in potions:\n        name, power = potion.split()\n        power = int(power)\n        if power <= target:\n            result.append(name)\n            target -= power\n    if target == 0:\n        return result\n    else:\n        return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    # create a 2d array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = arr[0][0]\n    # create a queue to store the cells to be processed\n    queue = [(0, 0)]\n    # while there are cells to be processed\n    while queue:\n        # get the current cell\n        x, y = queue.pop(0)\n        # if the current cell is the safe cell, return the energy required to reach it\n        if arr[x][y] == 0:\n            return min_energy[x][y]\n        # for each neighboring cell\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            # if the neighboring cell is within the bounds of the array\n            if 0 <= nx < len(arr) and 0 <= ny < len(arr[0]):\n                # if the energy required to reach the neighboring cell is less than the current minimum energy\n                if min_energy[nx][ny] > min_energy[x][y] + arr[nx][ny]:\n                    # update the minimum energy and add the neighboring cell to the queue\n                    min_energy[nx][ny] = min_energy[x][y] + arr[nx][ny]\n                    queue.append((nx, ny))\n    # if no path is found, return -1\n    return -1\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Create a dictionary to store the count of each rarity\n    rarity_count = {i: 0 for i in range(1, 6)}\n    \n    # Count the occurrences of each rarity in the player_input list\n    for item in player_input:\n        rarity_count[item] += 1\n    \n    # Check if there is a legendary item (rarity 5)\n    if rarity_count[5] > 0:\n        # If there is a legendary item, return True and the rarity of the second most valuable item\n        return (True, max(rarity_count, key=rarity_count.get) if len(rarity_count) > 1 else -1)\n    else:\n        # If there is no legendary item, return False and None\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration = distance / speed\n    if fuel >= duration:\n        remaining_fuel = fuel - (fuel_consumption * duration)\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if sum(q) <= w + e:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    # create a list to store the number of hills prince can see from each hill\n    num_hills = []\n    # iterate through the list of hills\n    for i in range(len(arr)):\n        # initialize the number of hills prince can see from this hill to 1 (the hill itself)\n        count = 1\n        # check the hills to the left of this hill\n        for j in range(i-1, -1, -1):\n            # if the hill to the left is shorter, increment the count\n            if arr[j] < arr[i]:\n                count += 1\n            # if the hill to the left is taller, break the loop\n            elif arr[j] > arr[i]:\n                break\n        # check the hills to the right of this hill\n        for j in range(i+1, len(arr)):\n            # if the hill to the right is shorter, increment the count\n            if arr[j] < arr[i]:\n                count += 1\n            # if the hill to the right is taller, break the loop\n            elif arr[j] > arr[i]:\n                break\n        # add the count to the list of counts\n        num_hills.append(count)\n    # return the maximum count\n    return max(num_hills)\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            secret_message += word[0].lower()\n        result.append(secret_message)\n    return result\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8',\n        '11110': '9', '11111': '0'\n    }\n    return ' '.join(''.join(morse[i] for i in word.split()) for word in msg.split('/'))"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..'\n    }\n    morse = ''\n    for char in text.upper():\n        if char in morse_code:\n            morse += morse_code[char] + ' '\n        elif char == ' ':\n            morse += '  '\n    return morse.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[ord(char) - ord('a') % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # TODO: implement function here\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == star:\n                star_map.append((i, j))\n    return star_map\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated += '@'\n    translated = translated[0].upper() + translated[1:]\n    for i in range(len(translated)):\n        if translated[i] == '@':\n            translated = translated[:i] + translated[i+1].upper() + translated[i+2:]\n    for i in range(len(translated)):\n        if translated[i] == '@':\n            if translated[i-1] in vowels:\n                translated = translated[:i] + 'xy' + translated[i:]\n            else:\n                translated = translated[:i] + 'yz' + translated[i:]\n    return translated\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize a dictionary to keep track of sugar pieces at each location\n    sugar_dict = {location: True for location in sugar_locations}\n\n    # Initialize a set to keep track of happy ants\n    happy_ants = set()\n\n    # Iterate over each ant's position and direction\n    for position, direction in ant_positions:\n        # Initialize a variable to keep track of the current position\n        current_position = position\n\n        # Initialize a variable to keep track of whether the ant has found sugar\n        found_sugar = False\n\n        # While the ant hasn't found sugar and hasn't reached the end of the path\n        while not found_sugar and current_position >= 0 and current_position < path_length:\n            # If the current position has sugar\n            if current_position in sugar_dict:\n                # Mark the ant as happy\n                happy_ants.add((position, direction))\n                # Remove the sugar piece from the dictionary\n                del sugar_dict[current_position]\n                # Mark the ant as having found sugar\n                found_sugar = True\n\n            # Move the ant in the specified direction\n            if direction == \"right\":\n                current_position += 1\n            else:\n                current_position -= 1\n\n    # Return the number of happy ants\n    return len(happy_ants)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            result += char.swapcase()\n        else:\n            if char.lower() in vowels:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_dict = {}\n    for key, value in recipe.items():\n        new_dict[key] = value * conversion_factor\n    return new_dict\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    blocks = p\n    while blocks > 0:\n        pyramid.append(blocks)\n        if blocks % 2 == 0:\n            blocks -= 2\n        else:\n            blocks -= 3\n    return pyramid\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, ingredients in order.items():\n        if food in menu:\n            for action, ingredient in ingredients.items():\n                if action == \"remove\":\n                    for item in ingredient:\n                        if item in menu[food]:\n                            menu[food].remove(item)\n                elif action == \"add\":\n                    for item in ingredient:\n                        if item not in menu[food]:\n                            menu[food].append(item)\n    return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    return pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] == i + 1:\n            continue\n        else:\n            break\n    else:\n        return True\n    for i in range(len(arr)):\n        if arr[i] == i + 2:\n            continue\n        else:\n            break\n    else:\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    if len(path) < 2:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.lower() in vowels:\n                result += chr((ord(i) - 97 + n) % 26 + 97)\n            else:\n                result += chr((ord(i) - 65 + n) % 26 + 65)\n        else:\n            result += i\n    return result, result.lower().count(vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tale = []\n    for i in lst:\n        fairy_tale.append(\"Once upon a time kingdom far away lived magical creature name '{}' known for telling {} tales a day\".format(i, sum(c.isdigit() for c in i)))\n    return fairy_tale\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # return total treasures collected, number of trips\n    # if no treasures return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in bag return 0, 0\n    # if no treasures in grid return 0, 0\n    # if no room in"}
{"task_id": "EvoEval/74", "completion": "\n    new_s = ''\n    for i in s:\n        if i in cipher:\n            new_s += cipher[i]\n        else:\n            new_s += i\n    return new_s\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    digits = '0123456789'\n    punctuation = '!@#$%^&*()-_=+[]{}|;:,.<>?/`~'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.lower() in digits:\n            result += str((int(char) + 1) % 10)\n        elif char in punctuation:\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    for i in range(len(lst)):\n        level += lst[i]\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        total = 0\n        while n > 1:\n            total += n // k\n            n = n // k\n        return total\n\n    return sorted([(points(n, k), n) for n in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    mid = n // 2\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if (i == mid or j == mid) or (i + j == mid) or (i + j == n - 1 + mid):\n                pattern.append(mat[i][j])\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, min(i+days+1, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the starting position of the player\n    start_row = 0\n    start_col = 0\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start_row = i\n                start_col = j\n                break\n        if start_row != 0 or start_col != 0:\n            break\n\n    # Initialize the path taken by the player\n    path = [(start_row, start_col)]\n\n    # Process each instruction\n    for instruction in instructions:\n        if instruction == 'up':\n            if start_row > 0 and map[start_row - 1][start_col] != 'X':\n                start_row -= 1\n        elif instruction == 'down':\n            if start_row < len(map) - 1 and map[start_row + 1][start_col] != 'X':\n                start_row += 1\n        elif instruction == 'left':\n            if start_col > 0 and map[start_row][start_col - 1] != 'X':\n                start_col -= 1\n        elif instruction == 'right':\n            if start_col < len(map[0]) - 1 and map[start_row][start_col + 1] != 'X':\n                start_col += 1\n\n        # Check if the player has reached the end\n        if map[start_row][start_col] == 'E':\n            break\n\n        # Add the current position to the path\n        path.append((start_row, start_col))\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        for j in range(min(len(word_list[i]), len(word_list[i + 1]))):\n            if word_list[i][j] != word_list[i + 1][j]:\n                if alien_dictionary.index(word_list[i][j]) > alien_dictionary.index(word_list[i + 1][j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word_list[i]) > len(word_list[i + 1]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"May 21\", \"June 20\", \"Air\"),\n        \"Cancer\": (\"June 21\", \"July 22\", \"Water\"),\n        \"Leo\": (\"July 23\", \"August 22\", \"Fire\"),\n        \"Virgo\": (\"August 23\", \"September 22\", \"Earth\"),\n        \"Libra\": (\"September 23\", \"October 22\", \"Air\"),\n        \"Scorpio\": (\"October 23\", \"November 21\", \"Water\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\", \"Fire\"),\n        \"Capricorn\": (\"December 22\", \"January 19\", \"Earth\"),\n        \"Aquarius\": (\"January 20\", \"February 18\", \"Air\"),\n        \"Pisces\": (\"February 19\", \"March 20\", \"Water\"),\n    }\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\"))\n        for sign, (start, end, element) in zodiac.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                if element in result:\n                    result[element] += 1\n                else:\n                    result[element] = 1\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    paths = []\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        dfs(node.get('left'), path)\n        dfs(node.get('right'), path)\n        path.pop()\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Check if the starting point is a monster\n    if grid[0][0] == 1:\n        return -1\n\n    # Initialize the number of moves to 0\n    moves = 0\n\n    # Initialize the current position to the starting point\n    current_position = (0, 0)\n\n    # While the current position is not the princess's position\n    while current_position != coord:\n        # Check if the princess's position is out of bounds\n        if coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n\n        # Check if the princess's position is a monster\n        if grid[coord[0]][coord[1]] == 1:\n            return -1\n\n        # Check if the current position is a monster\n        if grid[current_position[0]][current_position[1]] == 1:\n            return -1\n\n        # Move to the right if possible\n        if current_position[1] < len(grid[0]) - 1 and grid[current_position[0]][current_position[1] + 1] == 0:\n            current_position = (current_position[0], current_position[1] + 1)\n        # Move down if possible\n        elif current_position[0] < len(grid) - 1 and grid[current_position[0] + 1][current_position[1]] == 0:\n            current_position = (current_position[0] + 1, current_position[1])\n        # Move up if possible\n        elif current_position[0] > 0 and grid[current_position[0] - 1][current_position[1]] == 0:\n            current_position = (current_position[0] - 1, current_position[1])\n        # Move left if possible\n        elif current_position[1] > 0 and grid[current_position[0]][current_position[1] - 1] == 0:\n            current_position = (current_position[0], current_position[1] - 1)\n        # If no moves are possible, return -1\n        else:\n            return -1\n\n        # Increment the number of moves\n        moves += 1\n\n    # Return the number of moves\n    return moves\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, population in dict_of_planets.items():\n        if population[0] is not None and population[1] is not None:\n            new_dict[planet] = round(population[0] / population[1], 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # create a copy of the aliens list\n    aliens_copy = aliens.copy()\n    # remove the alien at the aimed position\n    aliens_copy.remove(ray)\n    # remove the adjacent aliens\n    if ray - 1 in aliens_copy:\n        aliens_copy.remove(ray - 1)\n    if ray + 1 in aliens_copy:\n        aliens_copy.remove(ray + 1)\n    # return the remaining aliens\n    return aliens_copy\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_unique_combinations(s1, s2):\n        combinations = set()\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                combinations.add(int(s1[i]) * int(s2[j]))\n        return combinations\n\n    def sum_of_combinations(combinations):\n        return sum(combinations)\n\n    s1 = list(s1)\n    s2 = list(s2)\n    combinations = get_unique_combinations(s1, s2)\n    result = sum_of_combinations(combinations)\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                continue\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (2 * i) + alphabet[i % 26] + ' ' * (n - i - 1)\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    n_index = 0\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) - 65 + n_values[n_index % len(n_values)]) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n_values[n_index % len(n_values)]) % 26 + 97)\n            n_index += 1\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [sorted(spell.split(), key=len) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return sum1 - sum2\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter_order = []\n    for continent in continents:\n        for human, location in humans.items():\n            if location == continent:\n                encounter_order.append(human)\n    return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_number)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = round * music\n        for i in range(time):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n\n"}
