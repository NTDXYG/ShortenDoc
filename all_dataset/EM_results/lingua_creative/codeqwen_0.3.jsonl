{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0\n        else:\n            total_cost += 5.0 + (item > 5) * 10.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shifted_char = chr(((ord(char.lower()) - ord('a') + shift) % 26) + ord('a'))\n                result += shifted_char\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if len(s) == 1:\n            return [chr(int(s) + ord('a') - 1)]\n        if int(s[0:2]) <= 26:\n            return [chr(int(s[0:2]) + ord('a') - 1)] + [chr(int(s[0]) + ord('a') - 1) + c for c in helper(s[1:])]\n        else:\n            return [chr(int(s[0]) + ord('a') - 1) + c for c in helper(s[1:])]\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = candles.count(max_height)\n    return lit_candles\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(result) < len(matrix) * len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == len(matrix[row]) - 1:\n            row += 1\n        elif row == 0:\n            col += 1\n        else:\n            row -= 1\n            col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = 1\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == 1:\n                    grid[x][y] += 1\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n    pass\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    pass\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    for animal in animal_string.split():\r\n        if animal[0] in animals:\r\n            sounds.append(animal.count('|'))\r\n    return sounds\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{fruits[0]}, {fruits[1]} {fruits[2]} from {location}? Marvelous!\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    smallest_max_occurrence_element = min([element for element, occurrence in count.items() if occurrence == max_occurrence])\n    return smallest_max_occurrence_element * sum(flux_values)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    rarest = elems[0]\n    min_count = counts[elems[0]]\n    \n    for elem, count in counts.items():\n        if count < min_count:\n            rarest = elem\n            min_count = count\n    \n    return rarest\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of the first two numbers\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            if isinstance(wizard, tuple):\n                wizard_name, wizard_power = wizard\n                dragon_hp -= wizard_power\n                if dragon_hp <= 0:\n                    return wizard_name\n            else:\n                dragon_hp -= wizard\n                if dragon_hp <= 0:\n                    return 'The dragon won!'\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n    count = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                for v in vampires:\n                    if i == v[0] or j == v[1]:\n                        count += 1\n    return count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9461000000\n    return t * v / light_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '#', 'h': '$', 'i': '^', 'j': '&', 'k': 'l',\n        'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{',\n        'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    translated_word = ''\n    for char in english_word:\n        translated_word += alien_dict.get(char, char)\n    return translated_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return (max_frequency, max_sentence.strip()) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 25000:\n        tax += (taxable_income - 25000) * 0.15\n        taxable_income = 25000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.1\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n\n    return sorted(palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set()\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0]\n    for i in range(1, n):\n        if i == m:\n            transformation_percentages.append(transformation_percentages[-1] * 2)\n        else:\n            transformation_percentages.append(transformation_percentages[-1] + 10 if i < m else transformation_percentages[-1] - 10)\n    return transformation_percentages[:n]\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\n        return False\n    if email.startswith(\"@\") or email.endswith(\"@\"):\n        return False\n    if email.count(\"@\") != 1:\n        return False\n    if email.count(\".\") < 1:\n        return False\n    if email.index(\"@\") > email.index(\".\"):\n        return False\n    return True\r\n"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n                transformed += new_char.upper() if char.isupper() else new_char\n            else:\n                index = consonants.index(char.lower())\n                new_char = consonants[(index + 1) % len(consonants)]\n                transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n    # Add the top border\n    art.append('*' * (n * len(s) + 2))\n    # Add the middle rows\n    for i in range(n):\n        row = '*'\n        for char in s:\n            row += char * n\n        row += '*'\n        art.append(row)\n    # Add the bottom border\n    art.append('*' * (n * len(s) + 2))\n    # Return the ASCII art as a string\n    return '\\n'.join(art)\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/42", "completion": "\n    if 5 in player_input:\n        legendary_item = True\n        second_most_valuable = sorted(set(player_input), reverse=True)[1]\n    else:\n        legendary_item = False\n        second_most_valuable = None\n    return legendary_item, second_most_valuable\n"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - duration * fuel_consumption\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    return total_weight <= w + e * 2\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            for char in word:\n                if char.isalpha():\n                    secret_message += char.lower()\n                    break\n            else:\n                secret_message += 'Take cannoli'\n        result.append(secret_message)\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    decoded_message = \"\"\n    word = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code_dict[word]\n            word = \"\"\n        else:\n            word += char\n    decoded_message += morse_code_dict[word]\n    return decoded_message.replace(\"/\", \" \")\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--',\n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',\n        '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..',\n        '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(list_of_alphabets.index(char) + 1) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    return sum([-(-order // n) for order in orders]) // m  # -(-x) = x // 1 + x // 2 + ... + x // x\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'A' if char.isupper() else 'a'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1].upper() if char.isupper() else vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'B' if char.isupper() else 'b'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1].upper() if char.isupper() else consonants[consonants.index(char.lower()) + 1]\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += shifted_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[char] for char in s)\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_words = []\n    for word in earth_phrase.split():\n        new_word = ''\n        first_letter = word[0]\n        if first_letter in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        for letter in word:\n            if letter in vowels:\n                index = vowels.index(letter)\n                new_word += vowels[(index + 1) % len(vowels)]\n            elif letter in consonants:\n                index = consonants.index(letter)\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(index + 1) % len(consonants)]\n            else:\n                new_word += letter\n        translated_words.append(new_word.capitalize())\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants = 0\n    sugar_count = 0\n    for ant in ant_positions:\n        if ant[0] == 0 or ant[0] == path_length - 1:\n            happy_ants += 1\n        elif ant[1] == \"right\":\n            if ant[0] in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0])\n            elif ant[0] - 1 in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0] - 1)\n        elif ant[1] == \"left\":\n            if ant[0] in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0])\n            elif ant[0] + 1 in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(ant[0] + 1)\n    return happy_ants + sugar_count // 2\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                if char.lower() in vowels:\n                    index = vowels.index(char.lower())\n                    if index == 4:\n                        result += 'a'\n                    else:\n                        result += vowels[index + 1]\n                elif char.lower() in consonants:\n                    index = consonants.index(char.lower())\n                    if index == 0:\n                        result += 'z'\n                    else:\n                        result += consonants[index - 1]\n                else:\n                    result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while pyramid[-1] > 0:\n        if pyramid[-1] % 2 == 0:\n            pyramid.append(pyramid[-1] - 2)\n        else:\n            pyramid.append(pyramid[-1] - 3)\n    return pyramid[:-1]  # remove the last element which is 0 or negative\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(start, end + 1) if is_prime(num) and num % divisor == 0]\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, changes in order.items():\n        if food in menu:\n            for change, ingredients in changes.items():\n                if change == \"remove\":\n                    for ingredient in ingredients:\n                        if ingredient in menu[food]:\n                            menu[food].remove(ingredient)\n                elif change == \"add\":\n                    for ingredient in ingredients:\n                        if ingredient not in menu[food]:\n                            menu[food].append(ingredient)\n    return menu\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = [(i, j) for i in prime_numbers for j in prime_numbers if i < j and is_anagram(i, j)]\n\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                encrypted_s += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted_s += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted_s += char\n    return (encrypted_s, sum(1 for char in encrypted_s if char.lower() in vowels))\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        output.append(f\"Once upon a time kingdom far away lived magical creature '{i}' known for telling {count} tales a day\")\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    max_treasures = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Helper function to calculate the number of trips needed to collect treasures\n    def trips_needed(treasures):\n        return math.ceil(treasures / bag_capacity)\n    \n    # Helper function to calculate the total treasures collected\n    def total_treasures(treasures):\n        return treasures * trips_needed(treasures)\n    \n    # Helper function to calculate the maximum treasures collected\n    def max_collected(treasures):\n        return total_treasures(treasures) - trips_needed(treasures)\n    \n    # Iterate over all possible combinations of treasures\n    for i in range(rows):\n        for j in range(cols):\n            treasures = 0\n            # Count the number of treasures in the current chamber\n            for k in range(i, rows):\n                for l in range(j, cols):\n                    treasures += grid[k][l]\n            # Update the maximum treasures collected\n            max_treasures = max(max_treasures, max_collected(treasures))\n    \n    return max_treasures\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(char, char) for char in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 0\n        else:\n            return n // k + points(n // k, k)\n\n    return sorted([points(num, k) for num in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:])\n        zodiac_sign = zodiac_signs.get(birthday[0:4], \"Invalid\")\n        if zodiac_sign != \"Invalid\":\n            elements_count[zodiac_sign] += 1\n    return elements_count\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not dict_of_planets:\n        return {}\n    return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def sum_of_combinations(num):\n        num_str = str(num)\n        sum_combinations = 0\n        for i in range(len(num_str)):\n            for j in range(i + 1, len(num_str) + 1):\n                sum_combinations += int(''.join(sorted(num_str[i:j])))\n        return sum_combinations\n\n    return sum_of_combinations(int(s1)) * sum_of_combinations(int(s2))\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/92", "completion": "\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + 'A' * (2 * i + 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            n = n_values[i % len(n_values)]\n            if message[i].islower():\n                encoded_message += alphabet[(alphabet.index(message[i]) + n) % 26]\n            else:\n                encoded_message += alphabet[(alphabet.index(message[i].lower()) + n) % 26].upper()\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]:\n        for human, home in humans.items():\n            if home == continent and alien in human:\n                encountered.append(human)\n    return encountered\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_number = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_number)\n\n    prime_sequence = ['prime' if is_prime(num) else num for num in sequence]\n    return prime_sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round_time in rounds:\n        for _ in range(round_time):\n            players = players[1:] + players[:1]\n        players = players[music:] + players[:music]\n    return players\n"}
