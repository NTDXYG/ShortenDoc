{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence < last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    else:\n        return s[:last_occurrence] + s[last_occurrence + 1:]\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # Create a new matrix to store the sorted rows\n    sorted_M = [[] for _ in range(rows)]\n\n    # Sort each row in the original matrix\n    for i in range(rows):\n        # Find the maximum element in the row\n        max_element = max(M[i])\n\n        # Find the index of the maximum element\n        max_index = M[i].index(max_element)\n\n        # Append the maximum element to the sorted row\n        sorted_M[i] = [max_element]\n\n        # Remove the maximum element from the row\n        M[i][max_index] = float('-inf')\n\n    return sorted_M\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?=[a-z])', text)\n\ntext = \"HelloWorld\""}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([a-z])([A-Z])', r'\\1_\\2', text).lower()\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    result = []\n    for char in string:\n        if char not in result:\n            result.append(char)\n    return result\n"}
{"task_id": "MBPP/19", "completion": "\n    # convert the list to a set to remove duplicates\n    arraynums = set(arraynums)\n\n    # if the length of the set is less than the length of the list,\n    # it means there are duplicates\n    if len(arraynums) < len(arraynums):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, m*n+1, m)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = -1\n    for i in list1:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    for i in test_list:\n        if len(i) != K:\n            return False\n    return True\n"}
{"task_id": "MBPP/27", "completion": "\n    new_list = [re.sub(r'\\d', '', i) for i in list]\n    return new_list\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n or k < 0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(k):\n            res = res * (n - i)\n            res = res // (i + 1)\n        return res\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n    return res\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = collections.Counter(nums)\n\n    # Create a heap queue with the count of each number\n    heap = [(-count, num) for num, count in count_dict.items()]\n\n    # Heapify the queue\n    heapq.heapify(heap)\n\n    # Pop the top k numbers from the heap\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the missing number\n    missing_num = 0\n\n    # Calculate the sum of the first N natural numbers\n    sum_n = N * (N + 1) // 2\n\n    # Calculate the sum of the given array\n    sum_ar = sum(ar)\n\n    # Calculate the missing number\n    missing_num = sum_n - sum_ar\n\n    return missing_num\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    else:\n        return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/36", "completion": "\n    def find_Nth_Digit_in_Fraction(numerator, denominator, N):\n        if numerator % denominator == 0:\n            return str(numerator // denominator)[N - 1]\n        else:\n            part = numerator // denominator\n            remainder = numerator % denominator\n            return find_Nth_Digit_in_Fraction(remainder, denominator, N) + str(part)[N - 1]\n\n    if p > q or N < 1:\n        return \"Invalid input\"\n\n    if p == q:\n        return str(p)[N - 1]\n\n    return find_Nth_Digit_in_Fraction(p, q, N)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate the integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort the integers\n    ints.sort()\n\n    # Sort the strings\n    strs.sort()\n\n    # Combine the sorted lists\n    sorted_list = ints + strs\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    return even_numbers, odd_numbers\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Get the characters that appear an odd number of times\n    odd_chars = [k for k, v in count.items() if v % 2 != 0]\n\n    # If there are more than one characters that appear an odd number of times,\n    # we can't rearrange the string to satisfy the condition.\n    if len(odd_chars) > 1:\n        return False\n\n    # If there is only one character that appears an odd number of times,\n    # we can rearrange the string to satisfy the condition.\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    # Flatten the list\n    flat_list = list(chain(*nums))\n\n    # Count the frequency of each element\n    freq_dict = Counter(flat_list)\n\n    return freq_dict\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty dictionary\n    sum_dict = {}\n\n    # Traverse through the array\n    for i in range(n):\n        # If element is already in dictionary, increment its count\n        if arr[i] in sum_dict:\n            sum_dict[arr[i]] += 1\n        # If element is not in dictionary, add it with count 1\n        else:\n            sum_dict[arr[i]] = 1\n\n    # Traverse through the dictionary\n    for key, value in sum_dict.items():\n        # If count of element is more than 1, add the element to the sum\n        if value > 1:\n            sum += key\n\n    return sum\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"Hello_world, this is a test_text.\""}
{"task_id": "MBPP/44", "completion": "\n    word_pattern = re.compile(r'\\b(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\\b')\n    if word_pattern.fullmatch(text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct_numbers = set(data)\n    return len(distinct_numbers) == len(data)\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def last_digit(n):\n        return n % 10\n\n    fact_A = factorial(A)\n    fact_B = factorial(B)\n\n    return last_digit(fact_A // fact_B)\n"}
{"task_id": "MBPP/48", "completion": "\n    # Convert the number to binary and count the number of 1's\n    # If the count is odd, set the bit to 1, else set it to 0\n    return int(bin(n)[2:], 2)\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums[i][j])\n    return result\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 3"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return []\n\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/56", "completion": "\n\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return n - 2 * rev_num == n\n\n"}
{"task_id": "MBPP/57", "completion": "\n    # convert the list to string\n    str_arr = [str(i) for i in arr]\n    # sort the list in descending order\n    str_arr.sort(reverse=True)\n    # join the list to string\n    max_num = ''.join(str_arr)\n    # return the result\n    return int(max_num)\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        curr_len = 1\n        for i in range(1, n):\n            if arr[i] == arr[i-1] + 1:\n                curr_len += 1\n                max_len = max(max_len, curr_len)\n            else:\n                curr_len = 1\n        return max_len\n"}
{"task_id": "MBPP/61", "completion": "\n    count_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(x) for x in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"Invalid input. List should have at least two elements\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = 0\n        for j in range(1, i+1):\n            bell[i] += bell[i-j]\n    return bell[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped == True:\n        gap = gap // 2\n        swapped = False\n        i = 0\n        while i < len(nums) - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            j = n - i*i\n            if j >= 0 and j*j == i*i:\n                return True\n            i += 1\n        return False\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [\",\", \" \", \".\", \":\", \";\", \"<\", \">\", \"{\", \"}\", \"(\", \")\", \"-\", \"+\", \"=\", \"?\", \"@\", \"#\", \"$\", \"^\", \"&\", \"*\", \"\\\\\", \"/\", \"~\", \"`\", \"|}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] % K == 0 and test_list[j] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    # calculate the number of squares in a rectangle\n    return m * n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum, odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/80", "completion": "\n    return n*(n-3)*(n-2)//6\n"}
{"task_id": "MBPP/81", "completion": "\n    return zip(test_tup1, test_tup2)\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum)\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (9 * n - 7) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert the number to string\n    str_N = str(N)\n    # find the length of the string\n    length = len(str_N)\n    # if the length is 1, return the number itself\n    if length == 1:\n        return N\n    # if the length is 2, return the number itself if the second digit is 0\n    if length == 2 and str_N[1] == '0':\n        return N\n    # if the length is 2 and the second digit is not 0, return the number itself\n    if length == 2:\n        return N\n    # if the length is 3, return the number itself if the second digit is 0\n    if length == 3:\n        return N\n    # if the length is 4, return the number itself if the second digit is 0\n    if length == 4:\n        return N\n    # if the length is 5, return the number itself if the second digit is 0\n    if length == 5:\n        return N\n    # if the length is 6, return the number itself if the second digit is 0\n    if length == 6:\n        return N\n    # if the length is 7, return the number itself if the second digit is 0\n    if length == 7:\n        return N\n    # if the length is 8, return the number itself if the second digit is 0\n    if length == 8:\n        return N\n    # if the length is 9, return the number itself if the second digit is 0\n    if length == 9:\n        return N\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(list1, key=len)\n\nlist1 = [\"Python\", \"Programming\", \"Coding\"]"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    # convert the number to string\n    str_n = str(n)\n\n    # check if the number of digits in the string is even\n    if len(str_n) % 2 == 0:\n        # if it is, then the number is undulating\n        return True\n    else:\n        # if it's not, then the number is not undulating\n        return False\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    if not test_list:\n        return None\n\n    min_value = test_list[0]\n    min_index = 0\n\n    for i in range(1, len(test_list)):\n        if test_list[i] < min_value:\n            min_value = test_list[i]\n            min_index = i\n\n    return min_index, min_value\n\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\nlist1 = [1, 2, 3, 2, 1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "MBPP/98", "completion": "\n    return sum(numbers) / len(numbers)\n\n\nnumbers = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num + 1\n\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    word = re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(m, n % m)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if '0' <= str(hex(i))[-1] <= '9':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] < num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] < num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] < num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        else:\n            merged_list.append(heapq.heappop(num1))\n            merged_list.append(heapq.heappop(num2))\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list\n"}
{"task_id": "MBPP/109", "completion": "\n    # Convert the string to binary\n    binary = ''.join(format(ord(i), '08b') for i in s)\n\n    # Count the number of 1's in the binary string\n    count = binary.count('1')\n\n    # Calculate the number of rotations\n    rotations = count % n\n\n    return rotations\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_list = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return set(flat_list)\n\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    perimeter = 2 * (22/7) * radius * (radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\ntest_list = [(1, 2, 3, 2, 2), (1, 2, 3, 4, 5, 5, 5), (1, 1, 1, 1, 1)]"}
{"task_id": "MBPP/115", "completion": "\n    return all(not bool(d) for d in list1)\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            print(f\"{i} is not convertible to float\")\n    return float_list\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(n):\n        if arr[i] != i:\n            return -1\n    return arr[0]\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return (list1[-1], list1[-2])\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and their sum is\", sum)\n    if count == 0:\n        print(\"No such triplet found\")\n"}
{"task_id": "MBPP/122", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return smartNumber(n-1) + smartNumber(n-2) + smartNumber(n-3)\n"}
{"task_id": "MBPP/123", "completion": "\n\n        Function to calculate sum of divisors of a number\n        \"\"\"\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum += i\n        return sum\n\n    sum_of_sums = 0\n    for i in range(1, limit):\n        j = sum_divisors(i)\n        if i != j and sum_divisors(j) == i:\n            sum_of_sums += i\n    return sum_of_sums\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # convert the string to a list of integers\n    string = list(map(int, list(string)))\n\n    # initialize the count of 0s and 1s\n    count_0s = count_1s = 0\n\n    # iterate over the string\n    for i in range(n):\n        # if the current character is 0\n        if string[i] == 0:\n            # increment the count of 0s\n            count_0s += 1\n        else:\n            # increment the count of 1s\n            count_1s += 1\n\n    # return the maximum difference\n    return max(count_0s, count_1s)\n\n"}
{"task_id": "MBPP/126", "completion": "\n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(common_divisors(a, b))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"}
{"task_id": "MBPP/129", "completion": "\n\n        Check if a matrix is a magic square\n        \"\"\"\n        def sum_rows_cols(matrix):\n            \"\"\"\n            Calculate the sum of elements in each row and column\n            \"\"\"\n            row_sums = [sum(row) for row in matrix]\n            col_sums = [sum(column) for column in zip(*matrix)]\n            return row_sums, col_sums\n\n        def sum_diagonals(matrix):\n            \"\"\"\n            Calculate the sum of elements in the main and secondary diagonals\n            \"\"\"\n            main_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n            secondary_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n            return main_diagonal_sum, secondary_diagonal_sum\n\n        row_sums, col_sums = sum_rows_cols(matrix)\n        main_diagonal_sum, secondary_diagonal_sum = sum_diagonals(matrix)\n\n        if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and main_diagonal_sum == secondary_diagonal_sum == sum(matrix[0]):\n            return True\n        return False\n\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square\"\n    else:\n        return \"The matrix is not a magic square\"\n"}
{"task_id": "MBPP/130", "completion": "\n    num_freq = defaultdict(int)\n    for num in nums:\n        num_freq[num] += 1\n\n    max_freq = max(num_freq.values())\n    max_freq_nums = [num for num, freq in num_freq.items() if freq == max_freq]\n\n    return max_freq_nums\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    if p > n:\n        return \"Invalid operation\"\n    else:\n        return arr[-1] * p\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n\nnums = array('i', [1, 0, 2, 0, 3, 0, 4, 0])"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for i in test_list:\n        if type(i) == list:\n            result.extend(i)\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index+1)\n        flip(nums, i+1)\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    def find_num_lists(Input):\n        num_lists = []\n        for i in range(len(Input)):\n            if isinstance(Input[i], list):\n                num_lists.append(i)\n        return num_lists\n\n    def find_str_lists(Input):\n        str_lists = []\n        for i in range(len(Input)):\n            if isinstance(Input[i], str):\n                str_lists.append(i)\n        return str_lists\n\n    num_lists = find_num_lists(Input)\n    str_lists = find_str_lists(Input)\n\n    return num_lists, str_lists\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n"}
{"task_id": "MBPP/145", "completion": "\n    min_element = min(arr)\n    max_diff = max(arr) - min_element\n    return max_diff\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    # convert the number to string\n    str_x = str(x)\n    # get the length of the string\n    n = len(str_x)\n    # if the length is 1, return the number itself\n    if n == 1:\n        return x\n    else:\n        # split the number into two parts\n        part1 = int(str_x[:n//2])\n        part2 = int(str_x[n//2:])\n        # return the sum of the two parts\n        return part1 + part2\n\n"}
{"task_id": "MBPP/149", "completion": "\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[i] - arr[j] == 1):\n                dp[i] = max(dp[i], dp[j]+1)\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, dp[i])\n    return maximum\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left_half = merge_sort(x[:mid])\n    right_half = merge_sort(x[mid:])\n    return merge(left_half, right_half)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    # calculate the vertex\n    vertex = -b/(2*a)\n    return vertex\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums[i][j])\n    return result\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 3"}
{"task_id": "MBPP/155", "completion": "\n    # Convert the number to binary and toggle the bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = []\n    for i in tuple_str:\n        tuple_int.append(int(i))\n    return tuple(tuple_int)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g))-1) for k,g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # calculate the sum of all elements\n    total_sum = sum(arr)\n\n    # if total sum is less than k or n is less than k, return -1\n    if total_sum < k or n < k:\n        return -1\n\n    # calculate the target sum\n    target_sum = total_sum - k\n\n    # calculate the number of operations\n    operations = 0\n\n    for i in range(n):\n        # if current element is less than target_sum, add target_sum - current_element to operations\n        if arr[i] < target_sum:\n            operations += target_sum - arr[i]\n\n    return operations\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in (12, 1, 2):\n        print(f\"{month}\u6708\u662f\u51ac\u5b63\u3002\")\n    elif month in (3, 4, 5):\n        print(f\"{month}\u6708\u662f\u6625\u5b63\u3002\")\n    elif month in (6, 7, 8):\n        print(f\"{month}\u6708\u662f\u590f\u5b63\u3002\")\n    elif month in (9, 10, 11):\n        print(f\"{month}\u6708\u662f\u79cb\u5b63\u3002\")\n    else:\n        print(\"\u65e0\u6548\u7684\u6708\u4efd\u3002\")\n\n    if 1 <= days <= 31:\n        if 1 <= days <= 31:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 32 <= days <= 59:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 60 <= days <= 90:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 91 <= days <= 120:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 121 <= days <= 159:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 160 <= days <= 190:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 191 <= days <= 220:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 221 <= days <= 259:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 260 <= days <= 290:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        elif 291 <= days <= 319:\n            print(f\"{days}\u5929\u662f\u5e73\u5e38\u7684\u4e00\u5929\u3002\")\n        else:\n            print(\"\u65e0\u6548\u7684\u5929\u6570\u3002\")\n"}
{"task_id": "MBPP/160", "completion": "\n    return (n - b) / a\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum\n"}
{"task_id": "MBPP/163", "completion": "\n    # calculate the area\n    area = (s * l) / (4 * tan(pi/s))\n    return area\n"}
{"task_id": "MBPP/164", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum1 += i\n            else:\n                sum1 += i\n                sum2 += n // i\n    return sum1, sum2\n\nn = int(input(\"Enter a number: \"))\nsum1, sum2 = divSum(n)"}
{"task_id": "MBPP/165", "completion": "\n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]].append(i)\n        else:\n            count_dict[str1[i]] = [i]\n    return count_dict\n\nstr1 = \"Hello World\""}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] == A[j]):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n<=0:\n        return \"Input should be a positive integer\"\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        pell_list = [0,1]\n        for i in range(2,n+1):\n            pell_list.append(2*pell_list[i-1]+pell_list[i-2])\n        return pell_list[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    count_dict = {}\n    for i in s:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\ns = 'std 1 list item 1. list item 1. list item 2 list item 2 list item 2 list item'"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub('[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for i in l:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_val = L\n    for i in range(L + 1, R + 1):\n        lcm_val = lcm(lcm_val, i)\n\n    return lcm_val\n\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Pattern {pattern} found in the text\")\n        else:\n            print(f\"Pattern {pattern} not found in the text\")\n\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    if x % 7 == 0:\n        return False\n    if x % 11 == 0:\n        return False\n    if x % 13 == 0:\n        return False\n    if x % 17 == 0:\n        return False\n    if x % 19 == 0:\n        return False\n    if x % 23 == 0:\n        return False\n    if x % 29 == 0:\n        return False\n    if x % 31 == 0:\n        return False\n    if x % 37 == 0:\n        return False\n    if x % 41 == 0:\n        return False\n    if x % 43 == 0:\n        return False\n    if x % 47 == 0:\n        return False\n    if x % 53 == 0:\n        return False\n    if x % 59 == 0:\n        return False\n    if x % 61 == 0:\n        return False\n    if x % 67 == 0:\n        return False\n    if x % 71 == 0:\n        return False\n    if x % 73 == 0:\n        return False\n    if x % 79 == 0:\n        return False\n    if x % 83 == 0:\n        return False\n    if x % 89 == 0:\n        return False\n    if x % 97 == 0:\n        return False\n    return True\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1[:min_len]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    special_char = re.findall(r'[^A-Z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return uppercase, special_char, numeric_values\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (arr[j] - arr[i] == k):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if d >= 0:\n        # calculate the two roots\n        root1 = (-b - (d**0.5)) / (2*a)\n        root2 = (-b + (d**0.5)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots\"\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if (n / i) == i:\n                    return True\n                else:\n                    return False\n        return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Create a boolean array to mark numbers as present\n    # Initialize all numbers as not present\n    present = [False] * (n + 1)\n\n    # Traverse through array elements and mark present\n    # numbers as true\n    for i in range(n):\n        if arr[i] >= 1 and arr[i] <= n:\n            present[arr[i]] = True\n\n    # Return the first number which is not present\n    for i in range(1, n + 1):\n        if not present[i]:\n            return i\n\n    return n + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # check if the points are on the same line\n    if x1 == x2:\n        return abs(y2 - y1)\n    elif y1 == y2:\n        return abs(x2 - x1)\n    else:\n        return 0\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 == \"February\":\n        return 28\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return 30\n    elif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return 31\n    else:\n        return \"Invalid month name\"\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isdigit() for char in str):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n"}
{"task_id": "MBPP/197", "completion": "\n    result = []\n    for tup in [test_tup1, test_tup2]:\n        for num in tup:\n            if isinstance(num, tuple):\n                result.append(num[0]**num[1])\n            else:\n                result.append(num)\n    return tuple(result)\n"}
{"task_id": "MBPP/198", "completion": "\n    # calculate the semi-major axis\n    h = math.sqrt(a**2 - b**2)\n    # calculate the semi-minor axis\n    k = math.sqrt(a**2 - h**2)\n    # calculate the area of the triangle\n    area = (h * k) / 2\n    # calculate the perimeter of the triangle\n    perimeter = a + b + h + k\n    # calculate the largest triangle that can inscribed an ellipse\n    largest_triangle = (3 * area) / (10 ** 0.5)\n    return largest_triangle\n"}
{"task_id": "MBPP/199", "completion": "\n    if n and not (n & (n - 1)):\n        count = 0\n        while n & (1 << count) != 0:\n            count += 1\n        return count\n    else:\n        return -1\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] == sum(lst[1:])\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([i for i in str1 if int(i)%2 != 0])\n"}
{"task_id": "MBPP/203", "completion": "\n    x = bin(n1)[2:].zfill(32)\n    y = bin(n2)[2:].zfill(32)\n    return sum(el1 != el2 for el1, el2 in zip(x, y))\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n\ntest_tup = (1, 2, 3, 4, 5)"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(i) + str(j) for i, j in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    longest = 0\n    for l in range(1, n):\n        for i in range(n-l):\n            j = i+l\n            if str[i] == str[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n                if dp[i][j] > longest:\n                    longest = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return longest\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = re.compile(r'^\\d+\\.\\d{0,2}$')\n    if pattern.match(num):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    return hq.heappop(heap)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(\"[^a-z0-9]\")\n    if pattern.search(string):\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if binary.count('1') == 2:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += math.pow(i, 4)\n    return sum_of_fourth_power\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Initialize the count of operations\n    count = 0\n\n    # Convert the numbers to binary\n    A_bin = bin(A)[2:]\n    B_bin = bin(B)[2:]\n\n    # Find the length of the longest binary string\n    len_diff = len(A_bin) - len(B_bin)\n\n    # If B is larger, add the difference to the count\n    if len_diff < 0:\n        count = -len_diff\n        A_bin = A_bin[len_diff:]\n    else:\n        B_bin = B_bin[len_diff:]\n\n    # Compare the binary strings\n    for i in range(len(A_bin)):\n        if A_bin[i] != B_bin[i]:\n            count += 1\n\n    return count\n"}
{"task_id": "MBPP/219", "completion": "\n    # Extract the first k elements\n    first_k_elements = test_tup[:K]\n\n    # Extract the maximum and minimum elements\n    max_element = max(first_k_elements)\n    min_element = min(first_k_elements)\n\n    return max_element, min_element\n"}
{"task_id": "MBPP/220", "completion": "\n    # Replace maximum n occurrences of spaces, commas or dots with a colon\n    text = re.sub(r'\\s+', ':', text, n)\n    text = re.sub(r',', ':', text, n)\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element = test_tuple[0]\n    return all(isinstance(x, type(first_element)) for x in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    majority_element = -1\n\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n        else:\n            if (count > n / 2):\n                majority_element = x\n            count = 0\n\n    if (count > n / 2):\n        majority_element = x\n\n    if (majority_element == -1):\n        print(\"Majority element does not exist\")\n    else:\n        print(\"Majority element is\", majority_element)\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 != 0])\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i).count('1') == 0:\n            return True\n    return False\n"}
{"task_id": "MBPP/229", "completion": "\n    positive = []\n    negative = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return negative + positive\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\nstr1 = \"Hello World\"\nchar = \"#\""}
{"task_id": "MBPP/231", "completion": "\n    # Create a 2D array to store the maximum sum\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Fill the dp array in bottom-up manner\n    for i in range(n+1):\n        for j in range(i+1):\n            if i == j or j == 0:\n                dp[i][j] = tri[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + tri[i][j]\n\n    # Return the maximum sum\n    return max(dp[n-1])\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    return n & 0xAAAAAAAA\n"}
{"task_id": "MBPP/236", "completion": "\n    # The maximum number of equilateral triangles that can be formed within a given equilateral triangle is N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equilateral triangle is given by the formula N/2.\n    # The number of equilateral triangles that can be formed within a given equil"}
{"task_id": "MBPP/237", "completion": "\n    count_dict = Counter(test_list)\n    return {k: v for k, v in count_dict.items() if v > 1}\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m, n - 2)\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\nstr1 = \"Hello, World!\""}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Sort the list based on the count of the first element\n    lst.sort(key=lambda x: count_dict[x[0]])\n\n    return lst\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return -1\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum\n    max_sum = arr[0]\n\n    # Initialize current sum\n    curr_sum = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    # Check if the number is negative\n    if number < 0:\n        return \"Error: Number must be positive\"\n\n    # Initialize guess\n    guess = number / 2.0\n\n    # Babylonian method\n    for i in range(10):\n        guess = (guess + number / guess) / 2.0\n\n    return guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][n-1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    list.insert(0, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = number\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n        result.append((x, y))\n    return result\n\nnumbers = [(5, 0.78), (3, 1.3), (2, 4)]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[a-z]+\\b', text)\n    return [word for word in words if word.lower().startswith('a')]\n\ntext = \"Apples are good for health, and oranges are good for nutrition. Bananas are good for health and a lot of them are good for health.\""}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\nl = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\nn = 3\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    # Swap the values of a and b\n    a, b = b, a\n\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p != 0 for p in primes):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(el1/el2 for el1, el2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n    except TypeError:\n        return \"Error: Both elements in the tuples should be numbers\"\n"}
{"task_id": "MBPP/262", "completion": "\n    if len(list1) <= L:\n        return list1\n    else:\n        return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 20 + (h_age - 2) * 4\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_squares += i**2\n    return sum_squares\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return \"Input should be a positive integer\"\n    else:\n        return n * (n - 1)\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n        elif i % 2 == 0:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "MBPP/271", "completion": "\n    sum_val = 0\n    for i in range(2, 2*n+1, 2):\n        sum_val += i**5\n    return sum_val\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum_even_coeff = 0\n\n    # Loop through even index binomial coefficients\n    for i in range(0, n+1, 2):\n        sum_even_coeff += math.comb(n, i)\n\n    return sum_even_coeff\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return \"Invalid\"\n    else:\n        return mt.floor(m / n)\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += i.count(test_tup[0])\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n*(5*n - 3)/2\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for digit in n:\n        if n.count(digit) < int(digit):\n            return False\n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = re.compile(r'ab{2,3}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}
{"task_id": "MBPP/286", "completion": "\n    prefix_sum = [0] * n\n    prefix_sum[0] = a[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\n\n    max_sum = float('-inf')\n    for i in range(k - 1, n):\n        max_sum = max(max_sum, prefix_sum[i] - prefix_sum[i - (k - 1)])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/288", "completion": "\n    count = [0]*N\n    for i in range(N):\n        count[arr[i] % P] += 1\n\n    for i in range(1, P):\n        count[i] += count[i-1]\n\n    result = [0]*N\n    for i in range(N-1, -1, -1):\n        result[count[arr[i] % P] - 1] = arr[i] % P\n        count[arr[i] % P] -= 1\n\n    return result\n\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 1\n            else:\n                return 0\n        else:\n            return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length_list = max(list1, key=len)\n    return max_length_list\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] * (k - 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        return n / m\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n"}
{"task_id": "MBPP/296", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the aggregate for each student\n    aggregate_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for student, marks in stdata:\n        aggregate_dict[student] += sum(marks)\n\n    # Find the maximum aggregate\n    max_aggregate = max(aggregate_dict.values())\n\n    # Find the student(s) with the maximum aggregate\n    max_students = [student for student, aggregate in aggregate_dict.items() if aggregate == max_aggregate]\n\n    return max_students, max_aggregate\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    dp[2] = 4\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + (max(d.values(), key=dict_depth) if d else 0)\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    if n & (n << 1) != 0:\n        return n.bit_length()\n    else:\n        return -1\n"}
{"task_id": "MBPP/303", "completion": "\n    # count the number of inversions\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    # check if the number of inversions is even\n    if inversions % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    rotations = rotations % n\n    index = index % n\n    return (arr[(index + rotations) % n] if rotations <= n else -1)\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    for i in range(k+1):\n        dp[i][0] = 0\n\n    for i in range(1, n):\n        dp[1][i] = dp[1][i-1] + a[i]\n\n    for i in range(2, k+1):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + a[j])\n\n    return dp[k][n-1]\n\n"}
{"task_id": "MBPP/307", "completion": "\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy[m] = n\n    return tuplex_copy\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    nums1.reverse()\n    nums2.reverse()\n\n    max_product = -1\n    for i in range(N):\n        max_product = max(max_product, nums1[i]*nums2[i])\n\n    return max_product\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n & ~(n & -n)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or n > len(grid[0]):\n        return None\n\n    row = [0] * len(grid[0])\n    max_sum = float('-inf')\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if j > 0:\n                row[j] = max(row[j-1], row[j] + grid[i][j-1])\n            else:\n                row[j] = max(row[j], grid[i][j])\n            max_sum = max(max_sum, row[j])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if even_words:\n        return max(even_words, key=len)\n    else:\n        return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    for i in range(len(A)-1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s = sorted(s)\n    return max(s[0]*s[1]*s[2], s[0]*s[3]*s[4], s[1]*s[2]*s[5], s[0]*s[3]*s[5])\n"}
{"task_id": "MBPP/319", "completion": "\n    return re.findall(r'\\b\\w{5}\\b', text)\n\ntext = \"This is a test string. This is only a test.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_square = n * (n + 1) * (2 * n + 1) // 6\n    sum_num = n * (n + 1) // 2\n    return sum_square - sum_num**2\n\n"}
{"task_id": "MBPP/321", "completion": "\n    return s.count('lo')\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n"}
{"task_id": "MBPP/323", "completion": "\n    if n == 1:\n        return arr\n\n    if n == 2:\n        arr[0], arr[1] = arr[1], arr[0]\n        return arr\n\n    if out_of_place > n:\n        out_of_place = n\n\n    if cur > out_of_place:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        right_rotate(arr, n, out_of_place + 2, cur - 2)\n\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Initialize the dp array\n    dp = [0] + [float('inf')] * n\n\n    # Loop through the dp array\n    for i in range(1, n + 1):\n        # Loop through the possible values of i\n        for j in range(1, i + 1):\n            # Update the dp[i]\n            dp[i] = min(dp[i], dp[i - j] + 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    for word in test_list:\n        word_count[word] += 1\n\n    return max(word_count, key=word_count.get)\n\ntest_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return \"The triangle is isosceles\"\n    else:\n        return \"The triangle is not isosceles\"\n"}
{"task_id": "MBPP/328", "completion": "\n    # Rotate the list\n    list1[:m] = list1[n:m:-1]\n    list1[m:] = list1[:m]\n    return list1\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    return pattern.findall(text)\n\ntext = \"Hello, this is a test string. This is only a test.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return \"The month has 31 days\"\n    elif monthname1 in [\"April\", \"June\", \"September\", \"November\"]:\n        return \"The month has 30 days\"\n    elif monthname1 == \"February\":\n        return \"The month has 28 days\"\n    else:\n        return \"Invalid month name\"\n"}
{"task_id": "MBPP/337", "completion": "\n    word_pattern = re.compile(r'\\b\\w+\\b')\n    matches = word_pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                if s[i] == s[i+1]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # check if x and y are positive integers\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        return \"Error: x and y must be positive integers\"\n\n    # find the maximum divisor\n    divisor = max(i for i in range(1, min(x, y) + 1) if x % i == 0 and y % i == 0)\n\n    return divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    # sort the list in ascending order\n    lst.sort()\n    # return the sum of the first three elements\n    return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n"}
{"task_id": "MBPP/342", "completion": "\n    heap = []\n    for i, l in enumerate(list):\n        for j, v in enumerate(l):\n            node = Node(v, i, j)\n            heappush(heap, node)\n\n    min_range = float('inf')\n    max_val = float('-inf')\n\n    while len(heap) == len(list) * len(list[0]):\n        node = heappop(heap)\n        if node.value > max_val:\n            max_val = node.value\n            min_range = min(min_range, max_val - min_range)\n\n    return min_range\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        if i % 2 != 0:\n            count += bin(i).count('1')\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    diffs = [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n    return diffs\n"}
{"task_id": "MBPP/346", "completion": "\n    if n % k == 0:\n        return n / k\n    else:\n        return n / k + 1\n"}
{"task_id": "MBPP/347", "completion": "\n    # calculate the number of squares in a rectangle\n    return m * n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0:\n        return 1\n    if r == 0:\n        return 0\n    if dp[n][r] != -1:\n        return dp[n][r]\n    dp[n][r] = bin_coff(n-1, r-1) + bin_coff(n-1, r)\n    return dp[n][r]\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if set(string) == {'0', '1'}:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/350", "completion": "\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    return [i[:n] + i[n+1:] for i in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return tn_ap(a, n-1, d) + d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    # Calculate the number of rectangles\n    rectangles = math.pi * (radius ** 2)\n\n    return rectangles\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - (a + b)\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return \"Not a quadratic equation\"\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n        return x1, x2\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 1:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return n + get_carol(n - 1)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i != []]\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    max_occurrence = max(list(count.values()))\n    max_items = [k for k, v in count.items() if v == max_occurrence]\n    return max_items\n\nnums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "MBPP/363", "completion": "\n    return [x + K for x in test_list]\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] == '1':\n            flip_count += 1\n        if i % 2 != 0 and ch[i] == '0':\n            flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n:\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price, key=float))\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    elif A[-1] != right_element:\n        return right_element\n\n    for i in range(len(A) - 1):\n        if A[i+1] - A[i] > 1:\n            return A[i] + 1\n\n    return -1\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        first = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(first + p)\n    return perms\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n/m)*m\n"}
{"task_id": "MBPP/376", "completion": "\n    new_tup = ()\n    for i in test_tup:\n        if test_tup.count(i) > 1 and i not in new_tup:\n            new_tup += (i, 'custom_value')\n        else:\n            new_tup += (i,)\n    return new_tup\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        return test_list[1:] + [test_list[0]]\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0]*colnum for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def is_rotation(A, B):\n        return A == B[::-1]\n\n    if is_rotation(A, A):\n        return 0\n    for i in range(len(A)):\n        if is_rotation(A[i:], A):\n            return i\n    return -1\n"}
{"task_id": "MBPP/383", "completion": "\n    # Convert the number to binary and toggle odd bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n < 0:\n        return \"Input should be a positive integer\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        perrin_numbers = [0, 1]\n        for i in range(2, n+1):\n            perrin_numbers.append(perrin_numbers[i-1] + perrin_numbers[i-2])\n        return perrin_numbers[n]\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    swap_count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swap_count += 1\n    return swap_count + len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n+1):\n        lucas_numbers.append(sum(lucas_numbers[-2:]))\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    list.insert(0, string)\n    return list\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1, d2, d3 in zip(l1, l2, l3):\n        result.append({**d1, **d2, **d3})\n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return max(n, get_max_sum(n-1))\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.fullmatch(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [sum_of_digits(num) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return test_tup1[0] ^ test_tup2[0] ^ test_tup1[1] ^ test_tup2[1]\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\ntest_list = [(1,2), (2,3), (3,4), (1,2), (2,3), (1,2), (1,2), (3,4)]"}
{"task_id": "MBPP/401", "completion": "\n    result = ()\n    for t1, t2 in zip(test_tup1, test_tup2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result += (add_nested_tuples(t1, t2),)\n        else:\n            result += (t1 + t2,)\n    return result\n"}
{"task_id": "MBPP/402", "completion": "\n    # Compute ncr\n    ncr = ncr_modp(n, r, p)\n\n    # Return ncr mod p\n    return ncr % p\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # If no such pair is found, the number is already the largest possible\n    if i == -1:\n        return n\n    # Find the second digit in the pair that is larger than the first digit\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    # Swap the first and second digits\n    digits[i], digits[j-1] = digits[j-1], digits[i]\n    # Rearrange the digits in descending order\n    digits[i+1:] = sorted(digits[i+1:], reverse=True)\n    # Return the number as an integer\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "MBPP/408", "completion": "\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            pairs.append(pair)\n\n    pairs.sort(key=lambda x: x[0] + x[1])\n\n    return pairs[:k]\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product = max(max_product, min_so_far * arr[i])\n            min_product = min(min_product, max_so_far * arr[i])\n        else:\n            max_so_far = max(arr[i], max_so_far * arr[i])\n            min_so_far = min(arr[i], min_so_far * arr[i])\n\n        max_product = max(max_product, max_so_far)\n        min_product = min(min_product, min_so_far)\n\n    return max_product\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + breakSum(n-1)\n"}
{"task_id": "MBPP/417", "completion": "\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif tup[0] != common_first_element:\n            common_first_element = None\n    return common_first_element\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = -1\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    result = [round(num) for num in list1]\n    print(sum(result))\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if gold[m][n] != -1:\n        return gold[m][n]\n    right = get_maxgold(gold, m, n-1)\n    down = get_maxgold(gold, m-1, n)\n    left = get_maxgold(gold, m, n+1)\n    up = get_maxgold(gold, m+1, n)\n    gold[m][n] = gold[m][n] + max(right, down, left, up)\n    return gold[m][n]\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    match = re.match(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    if match:\n        return match.group()\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n\n        for i in range(gap,n):\n\n            temp = my_list[i]\n\n            j = i\n            while  j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/430", "completion": "\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # calculate the two roots\n    root1 = (-b + D**0.5) / (2*a)\n    root2 = (-b - D**0.5) / (2*a)\n\n    # return the directrix\n    return root1, root2\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    return area\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([i for i in str1 if i.isdigit()])\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return sum(L)\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = r'\\badv\\b'\n    words = re.findall(pattern, text)\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    return words, positions\n\ntext = \"I am running fast and I am very happy\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\nnums = array('i', [1, 2, 3, -4, 5, -6])"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = list1[0]\n    for num in list1:\n        if num < largest_neg:\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return [tuple(i[0:K] + i[K+1:]) for i in test_list]\n\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]\nK = 2"}
{"task_id": "MBPP/445", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_lst = list(tup)\n    lst_count = Counter(lst)\n    tup_count = Counter(tup_lst)\n    result = {key: tup_count[key] + lst_count[key] for key in tup_count if key in lst_count}\n    return result\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": "MBPP/448", "completion": "\n    if n < 0:\n        return \"Input should be a positive integer\"\n    elif n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))\n\n    # check if the area is zero, if so, the triangle is not valid\n    if area == 0:\n        return \"The triangle is not valid\"\n    else:\n        return \"The triangle is valid\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n\ntext1 = \"This is a test string\""}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n"}
{"task_id": "MBPP/454", "completion": "\n    wordz = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return wordz\n\ntext = \"Hello, I am a zebra. Zebra is a large mammal. I like to ride zebra.\""}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_list = i\n    return min_list\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for c in combinations_list(remaining):\n                result.append([m] + c)\n        return result\n"}
{"task_id": "MBPP/463", "completion": "\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            product = 1\n            for num in subarray:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return all(value == values[0] for value in values)\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return \"0\"\n    octalNum = \"\"\n    while deciNum != 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n"}
{"task_id": "MBPP/468", "completion": "\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            product = 1\n            for k in sub_arr:\n                product *= k\n            max_product = max(max_product, product)\n    return max_product\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n    profit = [0]*n\n    max_price = price[n-1]\n    for i in range(n-2, -1, -1):\n        max_price = max(max_price, price[i])\n        profit[i] = max(profit[i+1], max_price - price[i])\n    min_price = price[0]\n    for i in range(1, n):\n        min_price = min(min_price, price[i])\n        profit[i] = max(profit[i-1], profit[i] + (price[i] - min_price))\n    return profit[-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return [a + b for a, b in test_tup]\n\n"}
{"task_id": "MBPP/471", "completion": "\n    result = []\n    for i in range(lens):\n        result.append(arr[i] % n)\n    return result\n"}
{"task_id": "MBPP/472", "completion": "\n    sorted_list = sorted(l)\n    for i in range(len(l)):\n        if l[i] != sorted_list[i]:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    return tuple(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return max(nums) + min(nums)\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (count[ord(i)] > max_count):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z]+'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"Hello World, I am a Python Programmer\""}
{"task_id": "MBPP/483", "completion": "\n    i = 1\n    while True:\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        if factorial % x == 0:\n            return i\n        i += 1\n\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    max_palindrome = -1\n    for i in range(1000, 100, -1):\n        for j in range(1000, 100, -1):\n            if is_palindrome(i * j):\n                max_palindrome = i * j\n                break\n        if max_palindrome != -1:\n            break\n\n    return max_palindrome\n\n"}
{"task_id": "MBPP/486", "completion": "\n    import math\n    return math.factorial(n) / (math.factorial(r) * math.factorial(n - r))\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    # calculate the area of a pentagon\n    area = (3 * math.sqrt(5 * (5 + 2 * math.sqrt(5)))) / 2\n    return area * a * a\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx**2 + dy**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between each side\n    angle = math.pi / 3\n\n    # Calculate the x and y coordinates of the hexagon\n    x_coords = [startx + radius * math.cos(i * angle) for i in range(sides + 1)]\n    y_coords = [starty + radius * math.sin(i * angle) for i in range(sides + 1)]\n\n    # Zip the x and y coordinates together to form the hexagon coordinates\n    polygons = [(x, y) for x, y in zip(x_coords, y_coords)]\n\n    return polygons\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(str(test_tup), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    if n > len(nums):\n        return \"Invalid input\"\n\n    # Using heap queue algorithm\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n\n    smallest_nums = []\n    for _ in range(n):\n        smallest_nums.append(hq.heappop(heap))\n\n    return smallest_nums\n\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Initialize two pointers, one at the start of the array and the other at the end\n    start = 0\n    end = len(A) - 1\n\n    # While the start pointer is less than or equal to the end pointer\n    while start <= end:\n\n        # If the element at the start pointer is not zero\n        if A[start] != 0:\n\n            # Move the start pointer one step forward\n            start += 1\n\n        # If the element at the end pointer is zero\n        elif A[end] == 0:\n\n            # Move the end pointer one step backward\n            end -= 1\n\n        # If the element at the start pointer is zero and the element at the end pointer is not zero\n        elif A[start] == 0 and A[end] != 0:\n\n            # Swap the elements at the start and end pointers\n            A[start], A[end] = A[end], A[start]\n\n            # Move both pointers one step forward\n            start += 1\n            end -= 1\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    return nPr * kPr\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n\n"}
