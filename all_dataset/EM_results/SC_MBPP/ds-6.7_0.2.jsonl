{"task_id": "MBPP/11", "completion": "\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == ch:\n            s[i] = ''\n            break\n    return ''.join(s)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list of tuples where each tuple is a row of the matrix and its sum\n    rows_sum = [(sum(row), row) for row in M]\n    # Sort the list of tuples\n    rows_sum.sort()\n    # Return the sorted matrix\n    return [row for _, row in rows_sum]\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana']"}
{"task_id": "MBPP/14", "completion": "\n    # calculate the volume\n    volume = (1/2) * l * b * h\n\n    return volume\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[A-Z][^A-Z]*', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    # convert the number to string\n    x = str(x)\n\n    # check if the number is a palindrome\n    if x == x[::-1]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples\n\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    return max_sum\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(item in test_list for item in K)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d', '', string) for string in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the difference between the first and last element of the array\n    diff = (ar[N-1] - ar[0]) // N\n\n    # Initialize the start and end of the array\n    start = 0\n    end = N - 1\n\n    # Loop until the start and end converge\n    while end - start > 1:\n        mid = start + (end - start) // 2\n\n        # If the difference between the mid element and the next element is greater than the difference,\n        # then the missing element is present at mid\n        if ar[mid] - ar[start] != mid * diff:\n            return (ar[mid] - ar[start]) // diff + ar[start]\n\n        # If the difference between the mid element and the previous element is greater than the difference,\n        # then the missing element is present at mid\n        if ar[end] - ar[mid] != diff * (end - mid):\n            return (ar[end] - ar[mid]) // diff + ar[mid]\n\n        # If the difference between the mid element and the previous element is equal to the difference,\n        # then the missing element is present at the next of mid\n        if ar[mid] - ar[start] == mid * diff:\n            start = mid\n\n        # If the difference between the mid element and the next element is equal to the difference,\n        # then the missing element is present at the previous of mid\n        if ar[end] - ar[mid] == diff * (end - mid):\n            end = mid\n\n    # If no missing element is found, return -1\n    return -1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # convert the fraction to a decimal\n    decimal = p / q\n\n    # convert the decimal to a string\n    decimal_str = str(decimal)\n\n    # remove the '0.' at the beginning of the string\n    decimal_str = decimal_str.replace('.', '')\n\n    # check if N is out of range\n    if N > len(decimal_str):\n        return -1\n\n    # return the nth digit\n    return int(decimal_str[N])\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"No even number in the list\"\n    elif odd_num == 0:\n        return \"No odd number in the list\"\n    else:\n        return even_num / odd_num\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if -freq1 < -1:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if -freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    if max_heap:\n        result.append(max_heap[0][1])\n\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element is already in hash set, then add it to sum\n        if arr[i] in s:\n            sum = sum + arr[i]\n        else:\n            # Else add element to hash set\n            s.add(arr[i])\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize the last digit of factorial of A and B\n    last_digit_A = 1\n    last_digit_B = 1\n\n    # Calculate the last digit of factorial of A\n    for i in range(1, A+1):\n        last_digit_A = (last_digit_A * i) % 10\n\n    # Calculate the last digit of factorial of B\n    for i in range(1, B+1):\n        last_digit_B = (last_digit_B * i) % 10\n\n    # Calculate the last digit of factorial of B divided by factorial of A\n    last_digit_B_div_A = last_digit_B\n    for i in range(1, A+1):\n        last_digit_B_div_A = (last_digit_B_div_A // last_digit_A) % 10\n\n    return last_digit_B_div_A\n\n"}
{"task_id": "MBPP/48", "completion": "\n    return n | 0b}
{"task_id": "MBPP/49", "completion": "\n    return [nums[i][0] for i in range(N)]\n\n"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(len(lst) for lst in input_list)\n    min_length_list = [lst for lst in input_list if len(lst) == min_length]\n    return min_length_list\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/54", "completion": "\n    # Find the maximum number to know the range\n    max_val = max(my_list)\n\n    # Initialize count array\n    count_arr = [0] * (max_val + 1)\n\n    # Populate count array\n    for num in my_list:\n        count_arr[num] += 1\n\n    # Populate the output array\n    output = []\n    for i, count in enumerate(count_arr):\n        output += [i] * count\n\n    return output\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n == rev(2*rev(n+1)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort(reverse=True)\n    return int(\"\".join(map(str, arr)))\n\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # Initialize result\n    maxlen = 1\n\n    # Initialize current difference and max length\n    curr_diff = arr[1] - arr[0]\n    curr_len = 2\n\n    # Traverse through the given array\n    for i in range(2, n):\n        # If current difference is equal to the difference of current and previous elements\n        if (arr[i] - arr[i-1]) == curr_diff:\n            curr_len += 1\n        else:\n            # If current difference is not equal to the difference of current and previous elements\n            # update current difference and max length\n            curr_diff = arr[i] - arr[i-1]\n            maxlen = max(maxlen, curr_len)\n            curr_len = 2\n\n    # Compare max length with current length\n    return max(maxlen, curr_len)\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Initialize count and sum of digits\n    count = 0\n    digit_sum = 0\n\n    # Initialize starting index of substring\n    start = 0\n\n    # Initialize dictionary to store frequency of digits\n    digit_freq = defaultdict(int)\n\n    # Traverse through the string\n    for end in range(n):\n        # Add current character to sum of digits\n        digit_sum += int(s[end])\n\n        # Increment frequency of current digit\n        digit_freq[int(s[end])] += 1\n\n        # While sum of digits is greater than length of substring\n        while digit_sum > end - start + 1:\n            # Decrement frequency of start character\n            digit_freq[int(s[start])] -= 1\n\n            # Subtract start character from sum of digits\n            digit_sum -= int(s[start])\n\n            # Move start index to next character\n            start += 1\n\n        # If sum of digits is equal to length of substring\n        if digit_sum == end - start + 1:\n            # Increment count\n            count += 1\n\n        # If current character is a digit\n        if s[end].isdigit():\n            # Subtract frequency of current digit from count\n            count -= digit_freq[int(s[end])]\n\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'B', 88), ('Science', 'A', 90), ('Maths', 'C', 97), ('Social sciences', 'A', 82)]"}
{"task_id": "MBPP/65", "completion": "\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    return all(len(t) == k for t in Input)\n\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [' ', ',', '.', ';', ':', '?', '!/']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1] and patterns[i] != patterns[i + 1]:\n            return False\n        if colors[i] != colors[i + 1] and patterns[i] == patterns[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m*n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * (r**3)\n\n"}
{"task_id": "MBPP/83", "completion": "\n    sum_Char = 0\n    for char in strr:\n        sum_Char += ord(char)\n    return chr(sum_Char // len(strr))\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    # Formula for nth centered hexagonal number is (3*n^2 - n) / 2\n    return (3 * n ** 2 - n) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert the number to string\n    N_str = str(N)\n    # find the length of the string\n    length = len(N_str)\n    # iterate over the string\n    for i in range(length-1, -1, -1):\n        # if the digit is not 0, decrease it by 1 and return the number\n        if N_str[i] != '0':\n            return int(N_str[:i] + str(int(N_str[i]) - 1) + '9'*(length-i-1))\n    # if all digits are 0, return -1\n    return -1\n\n"}
{"task_id": "MBPP/90", "completion": "\n    len_list = [len(i) for i in list1]\n    return max(len_list)\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(2, len(n)):\n            if n[i] == n[i-1] == n[i-2]:\n                return False\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    result = min(enumerate(test_list), key=itemgetter(1))\n    return result\n\ntest_list = [5, 6, 7, 1, 2, 3, 4]"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst)\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if sum(sublist) % 2 == 0 and len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n\n    if length == 1:\n        return num\n\n    first_half = num[:(length // 2)]\n    second_half = num[length // 2:][::-1]\n\n    if first_half > second_half:\n        return first_half + second_half\n    elif first_half == second_half:\n        if length % 2 == 0:\n            return str(int(num) + 1)\n        else:\n            return str(int(num[:length // 2 + 1]) + 1) + num[length // 2 + 1:]\n    else:\n        if length % 2 == 0:\n            return num[:length // 2] + num[length // 2] + num[length // 2:][::-1]\n        else:\n            return num[:length // 2] + num[length // 2] + num[length // 2:][::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    # Initialize the matrix\n    eulerian_matrix = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Fill the matrix\n    for i in range(n+1):\n        for j in range(min(i, m)+1):\n            if i == 0 or j == 0:\n                eulerian_matrix[i][j] = 1\n            else:\n                eulerian_matrix[i][j] = eulerian_matrix[i-1][j] + eulerian_matrix[i][j-1]\n\n    return eulerian_matrix[n][m]\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    # convert the tuple to list\n    test_tup = list(test_tup)\n\n    # add the lists\n    result = [i + j for i, j in zip(test_list, test_tup)]\n\n    return result\n\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in [num1, num2, num3]:\n        heapq.heappush(heap, (i.next(), i))\n\n    while heap:\n        val, iterator = heapq.heappop(heap)\n        yield val\n        try:\n            next_val = iterator.next()\n            heapq.heappush(heap, (next_val, iterator))\n        except StopIteration:\n            pass\n\n"}
{"task_id": "MBPP/109", "completion": "\n    s = s + s\n    count = [0] * len(s)\n    count[0] = 1 if s[0] == '1' else 0\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            count[i] = count[i - 1] + 1\n        else:\n            count[i] = count[i - 1]\n    res = 0\n    for i in range(n - 1, len(s)):\n        if i - n >= 0:\n            res += count[i] - count[i - n]\n        else:\n            res += count[i]\n    return res % (10**9 + 7)\n\n"}
{"task_id": "MBPP/110", "completion": "\n    test_list.sort()\n    missing_ranges = []\n    prev_val = strt_val\n    for val in test_list:\n        if val != prev_val:\n            if val - prev_val > 1:\n                missing_ranges.append((prev_val, val - 1))\n        prev_val = val + 1\n    if prev_val < stop_val:\n        missing_ranges.append((prev_val, stop_val))\n    return missing_ranges\n\n"}
{"task_id": "MBPP/111", "completion": "\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list must be lists\")\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    from math import pi\n    perimeter = 2 * pi * radius\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(len(d) == 0 for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(0, n, 2):\n        if i + 1 == n or arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    output = check_triplet(A, n - 1, sum, count)\n    if output == True:\n        return True\n    if A[n - 1] <= sum:\n        output = check_triplet(A, n - 1, sum - A[n - 1], count + 1)\n    return output\n\n"}
{"task_id": "MBPP/122", "completion": "\n    prime = [True] * (MAX + 1)\n    p = 2\n    while p * p <= MAX:\n        if prime[p] == True:\n            for i in range(p * p, MAX + 1, p):\n                prime[i] = False\n        p += 1\n\n    prime[0] = False\n    prime[1] = False\n    cnt = 0\n    res = 0\n\n    for p in range(2, MAX):\n        if prime[p]:\n            cnt += 1\n        if cnt == n:\n            res = p\n            break\n    return res\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if i == d(d(i)) and i != d(i))\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+b*1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    def find_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n//i])\n        divisors.append(n)\n        return divisors\n\n    return sum(set(find_divisors(a)).intersection(find_divisors(b)))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        result = -result\n    return result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of the first row\n    magic_constant = n * (n * n + 1) // 2\n    row_sum = 0\n    for i in range(n):\n        row_sum += my_matrix[0][i]\n\n    # Check the sum of each row\n    for i in range(1, n):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += my_matrix[i][j]\n        if temp_sum != row_sum:\n            return False\n\n    # Check the sum of each column\n    for i in range(n):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += my_matrix[j][i]\n        if temp_sum != row_sum:\n            return False\n\n    # Check the sum of the two diagonals\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][i]\n    if temp_sum != row_sum:\n        return False\n\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][n - i - 1]\n    if temp_sum != row_sum:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('h', 'e', 'l', 'l', 'o')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        arr.pop()\n    return arr[-1] % 2 == 0\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"}
{"task_id": "MBPP/138", "completion": "\n    # base case\n    if n == 0 or n == 1:\n        return True\n\n    # recursive case\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return [i for i in count_dict if count_dict[i] == 1]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    # Your code here\n    for cur_size in range(len(nums), 1, -1):\n        # Find index of the max element\n        max_idx = nums.index(max(nums[:cur_size]))\n        if max_idx != cur_size - 1:\n            # If max element is not at the last position, flip the list to move it to the last position\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            # Now flip the whole list to move the max element to its correct position\n            nums = nums[cur_size-1::-1] + nums[cur_size:]\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    # convert lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    # find intersection of three sets\n    intersection = set1.intersection(set2).intersection(set3)\n\n    # count the same pair\n    count = len(intersection)\n\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    # Initialize a list to store the lists\n    lists = []\n\n    # Iterate over the input\n    for item in Input:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # If it is, append it to the list\n            lists.append(item)\n\n    # Return the list of lists\n    return lists\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i+1])\n    return sum\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return arr[-1] - arr[0]\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # base case\n    if m == 0:\n        return tri[0][0]\n\n    # recursive case\n    return tri[m][n] + max(max_path_sum(tri, m-1, n), max_path_sum(tri, m-1, n-1))\n\n"}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    len_x = len(str_x)\n    half_x = len_x // 2\n\n    first_half = int(str_x[:half_x])\n    second_half = int(str_x[half_x:])\n\n    return max(first_half, second_half)\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    dp = [1]*n\n    res = 1\n\n    # Compute optimized data values in bottom up manner\n    for i in range(1, n):\n        # Check if current element can be prepended to\n        # previous subseq or not\n        if abs(arr[i] - arr[i-1]) == 1:\n            dp[i] = dp[i-1] + 1\n        # Update result if needed\n        res = max(res, dp[i])\n\n    return res\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = 5\nc = 11"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b ** 2) / (4 * a)\n    return (x_vertex, y_vertex)\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j or i + j == N - 1:\n                result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '1':\n                binary[i] = '0'\n            else:\n                binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n - k + 1):\n        ans = min(ans, arr[i + k - 1] - arr[i])\n    return ans\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['January', 'February']:\n        season = 'Winter'\n    elif month in ['March', 'April', 'May']:\n        season = 'Spring'\n    elif month in ['June', 'July', 'August']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 28:\n        if month == 'February':\n            print('This is a common year. This month has 28 days. The season is: ', season)\n        else:\n            print('This is not a common year. This month has 28 days. The season is: ', season)\n    elif days == 30:\n        print('This month has 30 days. The season is: ', season)\n    elif days == 31:\n        print('This month has 31 days. The season is: ', season)\n    else:\n        print('Invalid number of days')\n\n"}
{"task_id": "MBPP/160", "completion": "\n    # Initialize x and y to 0\n    x = 0\n    y = 0\n\n    # Check if n is divisible by a\n    if n % a == 0:\n        x = n // a\n    else:\n        # If n is not divisible by a, find the closest multiple of a that is less than n\n        x = n // a\n        # Add 1 to x\n        x += 1\n\n    # Calculate y using the formula y = (n - ax) / b\n    y = (n - a * x) / b\n\n    return x, y\n\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i:\n            continue\n        if i == (n // i):\n            result = result + i\n        else:\n            result = result + (i + n // i)\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower() or str1[i] == str1[i].upper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # Initialize result\n    result = 0\n\n    # Create a map to store counts of all elements\n    map = [0] * 2\n\n    # Traverse through all elements of given array\n    for i in range(N):\n        # Increment count of elements present in the map\n        map[A[i] % 2] += 1\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\ns = 'std 1 list item 1. list item 1. list item 2. list item 2. list item 2. list item'"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'\\W+','', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in str1:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if not stack or dict[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return i, j\n\n    return -1, -1\n"}
{"task_id": "MBPP/178", "completion": "\n    return [pattern for pattern in patterns if re.search(pattern, text)]\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat, a dog and a bird'"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(num, s):\n        s.add(num)\n        num_str = str(num)\n        next_num = 0\n        for i in range(len(num_str)):\n            next_num += int(num_str[i])\n            num_str = num_str[i+1:] + num_str[i]\n            next_num = int(num_str)\n            if next_num in s:\n                return False\n            s.add(next_num)\n        return True\n\n    s = set()\n    return is_keith(x, s)\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of the earth in km\n    R = 6371\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    # Change in coordinates\n    dlon = elon - slon\n    dlat = elat - slat\n    # Haversine formula\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a**0.5)\n    # Distance in km\n    distance = R * c\n    return distance\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    min_length = min(len(str1), len(str2))\n\n    for i in range(min_length):\n        if str1[i] == str2[i]:\n            prefix += str1[i]\n        else:\n            break\n\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric = re.findall(r'\\d', string)\n\n    return uppercase, special_char, numeric\n\n\nstring = \"Hello@123#WorLD\"\nuppercase, special_char, numeric = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    arr = list(set(arr))\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    # The focus of a parabola is the point where the line perpendicular to the directrix intersects the parabola.\n    # The equation of the directrix is y = -b/a*x - c/a\n    # The equation of the line perpendicular to the directrix is y = -1/a*x - c/a\n    # The intersection point of the line and the directrix is the focus of the parabola.\n    # The intersection point is given by the same x value, so we can solve for x and substitute it into the equation of the directrix to find y.\n\n    # The x-coordinate of the focus is given by the quadratic formula:\n    x_focus = -b / (2 * a)\n\n    # The y-coordinate of the focus is given by substituting x_focus into the equation of the directrix:\n    y_focus = -(c + b**2 / (4 * a)) / a\n\n    return (x_focus, y_focus)\n\n"}
{"task_id": "MBPP/186", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\ntext = \"I love Python, Java and JavaScript\"\npatterns = [\"Python\", \"Java\", \"C++\"]"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # Initialize count\n    count = 0\n\n    # Loop through all possible x and y coordinates\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            # If the coordinates are integral, increment the count\n            if x % 1 == 0 and y % 1 == 0:\n                count += 1\n\n    return count\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    return any(char.isdigit() for char in str)\n"}
{"task_id": "MBPP/193", "completion": "\n    # code here\n    return tuple(set(test_tup))\n\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i, n = 0, 0, str(n)\n    while i < len(n):\n        decimal = decimal * 8 + int(n[i])\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    # convert tuples to list\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # perform exponentiation\n    result = [a**b for a, b in zip(list1, list2)]\n\n    return tuple(result)\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # semi-major axis\n    a = a / 2\n    # semi-minor axis\n    b = b / 2\n\n    # Area of the ellipse\n    area_ellipse = math.pi * a * b\n\n    # Area of the largest possible triangle inscribed in the ellipse\n    area_triangle = area_ellipse / 2\n\n    return area_triangle\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) <= 1\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    # convert the numbers to binary and then to list\n    n1_bin = list(bin(n1)[2:].zfill(8))\n    n2_bin = list(bin(n2)[2:].zfill(8))\n\n    # initialize the hamming distance\n    hamming_distance = 0\n\n    # compare each bit of the two numbers\n    for i in range(len(n1_bin)):\n        if n1_bin[i] != n2_bin[i]:\n            hamming_distance += 1\n\n    return hamming_distance\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i], test_tup[j]))\n    return inversion_list\n\n"}
{"task_id": "MBPP/206", "completion": "\n    return [str(test_tup[i]) + str(test_tup[i + 1]) for i in range(len(test_tup) - 1)]\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappushpop(heap, a)\n    return heap\n\nheap = [21, 1, 45, 33, 18, 9]"}
{"task_id": "MBPP/210", "completion": "\n    charRe = re.compile(r'[^a-z0-9 ]')\n    string = charRe.search(string)\n    return not bool(string)\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i & 1 and i & (1 << (n-1)):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # convert tuples to strings\n    str1 = ''.join(test_tup1)\n    str2 = ''.join(test_tup2)\n\n    # concatenate the strings\n    result = str1 + str2\n\n    return result\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend(alist[i] * [alist[i+1]])\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    flat_list1 = [item for sublist in list1 for item in sublist]\n    flat_list2 = [item for sublist in list2 for item in sublist]\n    return set(flat_list1).issubset(set(flat_list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in char_set, return it\n        if i in char_set:\n            return i\n\n        # Else add current character to char_set\n        else:\n            char_set.add(i)\n\n    # If no repeated character found, return None\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return math.floor(math.log(B / A) / math.log(2))\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    min_k = test_tup[:K]\n    max_k = test_tup[-K:]\n    return min_k, max_k\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = ['.', ',', ' ']\n    for char in special_chars:\n        text = re.sub(char, ':', text, n)\n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return len(set(map(type, test_tuple))) <= 1\n\n"}
{"task_id": "MBPP/223", "completion": "\n    # Find the first occurrence of x\n    i = binary_search(arr, 0, n, x)\n\n    # If element is not present, return false\n    if i == -1:\n        return False\n\n    # Check if element is present more than n/2 times\n    if (i + n // 2) < n and arr[i + n // 2] == x:\n        return True\n\n    # If not present, return false\n    return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n"}
{"task_id": "MBPP/227", "completion": "\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if (n >> i) & 1 == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n\ntriangle = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    return 2 * math.pi * r * h\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize the count of triangles\n    count = 0\n\n    # Initialize the side of the triangle\n    side = 1\n\n    # Loop until the side of the triangle is less than or equal to N\n    while side <= N:\n        # Calculate the number of triangles that can be formed with the current side\n        triangles = (N - side) // (2 * side) + 1\n\n        # Update the count of triangles\n        count += triangles\n\n        # Update the side of the triangle\n        side += 1\n\n    # Return the count of triangles\n    return count\n\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    return {k: v for k, v in count.items() if v > 1}\n\n\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('a', 1), ('b', 2), ('c', 3), ('d', 4)]"}
{"task_id": "MBPP/238", "completion": "\n    return sum([(n*(n+1))//2 for n in [len(str)-i for i in range(len(str))]])\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n    for i in range(1, m + 1):\n        for j in range(2, n + 1):\n            for k in range(i, min(m, 2 * i) + 1):\n                dp[k][j] += dp[i][j - 1]\n    return sum(dp[i][n] for i in range(1, m + 1))\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [['*' * o for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/244", "completion": "\n    # find the square root of N\n    sq_root = math.sqrt(N)\n\n    # if sq_root is not an integer, increment it by 1\n    if sq_root != int(sq_root):\n        sq_root += 1\n    else:\n        sq_root = int(sq_root) + 1\n\n    # return the square of the next integer\n    return sq_root * sq_root\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Initializing the variables\n    dp1 = [0]*n\n    dp2 = [0]*n\n    dp1[0] = arr[0]\n    dp2[n-1] = arr[n-1]\n    max_sum = float('-inf')\n\n    # Finding the maximum sum increasing sub-sequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp1[i] < dp1[j] + arr[i]:\n                dp1[i] = dp1[j] + arr[i]\n\n    # Finding the maximum sum decreasing sub-sequence\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dp2[i] < dp2[j] + arr[i]:\n                dp2[i] = dp2[j] + arr[i]\n\n    # Finding the maximum sum bi-tonic sub-sequence\n    for i in range(n):\n        if max_sum < dp1[i] + dp2[i] - arr[i]:\n            max_sum = dp1[i] + dp2[i] - arr[i]\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    # initial guess\n    x = number / 2.0\n\n    while True:\n        y = (x + number / x) / 2.0\n        if abs(y - x) < 0.000001:\n            return y\n        x = y\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process.\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n\ntup = ('a', 'b', 'c', 'd', 'e', 'f', 'a', 'a', 'b', 'c', 'a')\nx = 'a'"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i+1, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    try:\n        magnitude = numbers[0]\n        angle = numbers[1]\n        result = cmath.rect(magnitude, angle)\n        return result.real, result.imag\n    except Exception as e:\n        return str(e)\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 2\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)\n\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # sort the lists\n    list1.sort()\n    list2.sort()\n\n    # merge the sorted lists\n    merged_list = list1 + list2\n\n    # sort the merged list in descending order\n    merged_list.sort(reverse=True)\n\n    # convert the list back to tuple\n    result = tuple(merged_list)\n\n    return result\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        return num * num + 1\n\n    prime_count = 0\n    number = 0\n    while prime_count < n:\n        number += 1\n        if is_prime(newman_shanks_williams(number)):\n            prime_count += 1\n    return number\n\n"}
{"task_id": "MBPP/261", "completion": "\n    result = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age / 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l * l\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    return n*(n+1)/2\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    res = [sub[-1] for sub in test_list]\n    return res\n\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Compute sum of binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return a[n-1]\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == 1:\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    return n*(7*n-5)//2\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for i in n:\n        if n.count(i) > int(i):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(i == element for i in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = -1\n\n    # Compute sum of all array elements\n    total_sum = sum(a)\n\n    # Compute sum of k*(sum of array elements)\n    k_total_sum = total_sum * k\n\n    # Initialize current sum and max sum\n    curr_sum = 0\n    max_sum = 0\n\n    # Traverse through the array\n    for i in range(n * k):\n        # Add current element to current sum\n        curr_sum += a[i % n]\n\n        # Update max sum if current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If current sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n\n        # Update result if max sum is greater\n        if max_sum > res and max_sum <= k_total_sum:\n            res = max_sum\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/288", "completion": "\n    inv = [0] * (N + 1)\n    inv[0] = inv[1] = 1\n    for i in range(2, N + 1):\n        inv[i] = (P - (P // i) * inv[P % i] % P) % P\n    return sum(inv[i] == arr[i] for i in range(N))\n\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize the count of odd days\n    odd_days = 0\n\n    # Loop through each day of the year\n    for day in range(1, N + 1):\n        # Check if the day is odd\n        if day % 2 != 0:\n            # If the day is odd, increment the count\n            odd_days += 1\n\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = len(max(list1, key=len))\n    return max_len\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quotient = n / m\n        return quotient\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each tuple\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tup in stdata:\n        # Add the sum of the tuple to the dictionary\n        sum_dict[tup] += sum(tup)\n\n    # Return the maximum sum\n    return max(sum_dict.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, 2 * n + 1):\n        for j in range(min(i, n) + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if i - j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j]\n    return dp[2 * n][n]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    # initializing result\n    msb = 0\n\n    while (n > 0):\n\n        n = n // 2\n        msb += 1\n\n    return msb\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    inversions = [(i, j) for i in range(n) for j in range(i+1, n) if a[i] > a[j]]\n    return len(inversions) % 2 == 0\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Perform rotations\n    for _ in range(rotations):\n        arr.insert(0, arr.pop())\n\n    # Find element at given index\n    return arr[index]\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match('^p', word)]\n\nwords = ['python', 'programming', 'problem', 'pair', 'parrot', 'pizza']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    if index < 0:\n        return 0\n    max_sum = 0\n    for i in range(index - 1, -1, -1):\n        if a[index] > a[i]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    return max_sum + a[index] + k\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # Combine the two lists\n    nums = nums1 + nums2\n\n    # Sort the combined list in descending order\n    nums.sort(reverse=True)\n\n    # Return the first N elements of the sorted list\n    return nums[:N]\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert number to binary and then to string\n    binary = bin(n)[2:]\n    # find the index of the first 0 from the right\n    index = binary.find('0')\n    if index == -1:\n        # if no 0 is found, return the number itself\n        return n\n    else:\n        # if 0 is found, replace it with 1 and convert back to int\n        binary = binary[:index] + '1' + binary[index+1:]\n        return int(binary, 2)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1.0/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_nos = [num for num in list1 if num > 0]\n    return pos_nos\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid:\n        return 0\n\n    m = len(grid)\n    dp = [[0]*n for _ in range(m)]\n    dp[0] = grid[0]\n    dp[1][0] = max(grid[0][0], grid[1][0])\n    dp[1][1] = max(grid[0][1], grid[1][1])\n\n    for i in range(2, n):\n        dp[0][i] = max(dp[1][i-2]+grid[0][i], dp[0][i-1])\n        dp[1][i] = max(dp[0][i-2]+grid[1][i], dp[1][i-1])\n\n    return max(dp[0][n-1], dp[1][n-1])\n\n"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    even_len_words = [word for word in str if len(word) % 2 == 0]\n    if even_len_words:\n        return max(even_len_words, key=len)\n    return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # The volume of a cuboid is given by the product of its length, width and height.\n    # The sum of the sides of a cuboid is given by 2*(length + width + height).\n    # We can solve this problem by using the formula:\n    # volume = sum_of_sides^2 / (18 + 4*sqrt(3))\n    # where sqrt(3) is the square root of 3.\n\n    import math\n\n    volume = (s**2) / (18 + 4*math.sqrt(3))\n    return volume\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, I am a data scientist. I love to solve problems.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return abs(sum_of_squares - square_of_sum)\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the demlo number\n    demlo_num = 0\n\n    # Convert the string to a list of characters\n    s_list = list(s)\n\n    # Iterate over the list\n    for i in range(len(s_list)):\n        # If the character is a digit, add it to the demlo number\n        if s_list[i].isdigit():\n            demlo_num = demlo_num * 10 + int(s_list[i])\n\n    # Return the demlo number\n    return demlo_num\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_indices = [i for i, val in enumerate(list1) if val == min_val]\n    return min_indices\n\n"}
{"task_id": "MBPP/323", "completion": "\n    if cur == n or out_of_place == n:\n        return\n    next_out_of_place = out_of_place + 1\n    while next_out_of_place < n and arr[next_out_of_place] >= 0:\n        next_out_of_place += 1\n    if next_out_of_place == n:\n        return\n    arr[cur], arr[next_out_of_place] = arr[next_out_of_place], arr[cur]\n    right_rotate(arr, n, next_out_of_place, cur + 1)\n\n"}
{"task_id": "MBPP/324", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Iterate over the tuple\n    for i in range(len(test_tuple)):\n        # If the index is even, add the element to the sum\n        if i % 2 == 0:\n            sum += test_tuple[i]\n\n    return sum\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares to i (i.e., all 1s)\n        min_square = i\n\n        # Try to form a square number from the previous numbers\n        j = 1\n        while j * j <= i:\n            # Update the minimum number of squares\n            min_square = min(min_square, 1 + min_squares[i - j * j])\n            j += 1\n\n        # Store the minimum number of squares for i\n        min_squares.append(min_square)\n\n    # Return the minimum number of squares for n\n    return min_squares[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    # Creating an empty dictionary\n    dict = defaultdict(int)\n\n    # Iterating over the list\n    for sublist in test_list:\n        for word in sublist:\n            dict[word] += 1\n\n    # Finding the word with most occurrences\n    max_value = max(dict.values())\n    max_keys = [k for k, v in dict.items() if v == max_value]\n\n    return max_keys\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 2\n    # n = 10\n    return list1[m:n] + list1[0:m]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    else:\n        return \"Valid triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n\n    if monthname1 in month_31_days:\n        return \"This month has 31 days\"\n    elif monthname1 in month_30_days:\n        return \"This month has 30 days\"\n    elif monthname1 == 'February':\n        return \"This month has 28 days\"\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor_dict = {}\n    for i in range(x, y+1):\n        divisor_dict[i] = []\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisor_dict[i].append(j)\n    max_divisor_count = 0\n    max_divisor_num = 0\n    for key in divisor_dict:\n        if len(divisor_dict[key]) > max_divisor_count:\n            max_divisor_count = len(divisor_dict[key])\n            max_divisor_num = key\n    return max_divisor_num\n\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n\n    # Add first element from each list to the min heap\n    for i, l in enumerate(list):\n        heappush(min_heap, Node(l[0], i, 0))\n        max_val = max(max_val, l[0])\n\n    min_range = float('inf')\n    result = [0, 0]\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            result = [node.value, max_val]\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n\n    return result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for c in s:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*i*j % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0:\n        return 1\n    elif n < 0 or k == 0:\n        return 0\n    else:\n        return zigzag(n - k, k) + zigzag(n, k - 1)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    return m*n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    elif n == 0 or r == 0:\n        return 0\n    else:\n        return bin_coff(n-1, r) + bin_coff(n-1, r-1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # Your code here\n    # convert string to list\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n        if s[i] == s[j]:\n            while i < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j and s[j] == s[j - 1]:\n                j -= 1\n            i += 1\n            j -= 1\n        else:\n            break\n\n    return j - i + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # Creating an empty hash table\n    hash_map = {}\n\n    # Traverse through the given array\n    for i in range(n):\n        # If the element is already in the hash table, increment its count\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n        # Else add the element to the hash table with count 1\n        else:\n            hash_map[arr[i]] = 1\n\n        # If the count of the current element is k, return the element\n        if hash_map[arr[i]] == k:\n            return arr[i]\n\n    # If no element occurs k times, return -1\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty set\n    st = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in set, return False\n        if i in st:\n            return False\n\n        # Else add current character to set\n        st.add(i)\n\n    # If all characters are unique, return True\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # The number of rectangles in a circle of radius r is given by the formula:\n    # \u03c0 * r^2\n    # The value of \u03c0 is approximately 3.14159\n    return 3.14159 * radius ** 2\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list, key=lambda item: item[1])\n    return max_val\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 5, 1]"}
{"task_id": "MBPP/359", "completion": "\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # if discriminant is positive, there are two real roots\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # check if one root is twice of the other\n        if root1 == 2*root2 or root2 == 2*root1:\n            return True\n        else:\n            return False\n\n    # if discriminant is zero, there is one real root\n    elif discriminant == 0:\n        root = -b / (2*a)\n\n        # check if root is twice of the other\n        if root == 2*root or root == 0.5*root:\n            return True\n        else:\n            return False\n\n    # if discriminant is negative, there are two complex roots\n    else:\n        return False\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    # your code here\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_occurrence = max(num_dict.values())\n    for key, value in num_dict.items():\n        if value == max_occurrence:\n            return key\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x[0], x[1] + K) for x in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip = 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] == '1':\n            flip += 1\n        elif i % 2 != 0 and ch[i] == '0':\n            flip += 1\n    return flip\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = abs(get_height(root.left) - get_height(root.right))\n    if height_diff > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(test_tup * N)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price, key=lambda x: float(x[1])))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    return smallest_missing(A, left_element, mid_element - 1)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n        else:\n            res.append(\"custom_value\")\n    return tuple(res)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n\n"}
{"task_id": "MBPP/378", "completion": "\n    # initializing test_list\n    # test_list = [1, 4, 5, 6, 7]\n\n    # using pop() and insert()\n    # to shift elements\n    test_list.insert(0, test_list.pop())\n\n    # printing result\n    return test_list\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n\n"}
{"task_id": "MBPP/380", "completion": "\n    multilist = [[0 for col in range(colnum)] for row in range(rownum)]\n    return multilist\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/382", "completion": "\n    left = 0\n    right = len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_brackets = []\n    swap_count = 0\n    for bracket in s:\n        if bracket == '[':\n            open_brackets.append(bracket)\n        else:\n            if len(open_brackets) > 0:\n                open_brackets.pop()\n            else:\n                swap_count += 1\n                open_brackets.append('[')\n    swap_count += len(open_brackets)\n    return swap_count\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert hexadecimal to decimal\n    decimal = int(N, 16)\n\n    # check if the decimal number is even or odd\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + str(i) for i in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(min(len(l1), len(l2), len(l3)))]\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4), n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length_list = max(input_list, key=lambda x: len(x))\n    return max_length_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    # Your code here\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    # your code here\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import Counter\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/401", "completion": "\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n\ntuplex = \"p\"\ntuple1 = (\"a\", \"b\", \"c\", \"d\", \"p\", \"q\", \"r\", \"s\")"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/407", "completion": "\n    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for tup in list1:\n        product = 1\n        for num in tup:\n            product *= num\n        if product < min_product:\n            min_product = product\n    return min_product\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    try:\n        return list1[n]\n    except IndexError:\n        return \"Index out of range\"\n\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n in memo:\n        return memo[n]\n    maxVal = 0\n    for i in range(1, n//2+1):\n        maxVal = max(maxVal, breakSum(i) * breakSum(n-i))\n    memo[n] = maxVal\n    return maxVal\n\n"}
{"task_id": "MBPP/417", "completion": "\n    return [(i[0], sum(x[1] for x in Input if x[0] == i[0])) for i in Input]\n\n\nInput = [(1, 2), (3, 4), (1, 4), (3, 2), (1, 5), (3, 6)]"}
{"task_id": "MBPP/418", "completion": "\n    max_len = max(len(sub) for sub in lst)\n    max_sublist = [sub for sub in lst if len(sub) == max_len]\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    # rounding each number in the list\n    rounded_list = [round(num) for num in list1]\n    # summing the rounded list\n    sum_rounded_list = sum(rounded_list)\n    # multiplying the sum by the length of the list\n    result = sum_rounded_list * len(rounded_list)\n    return result\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    str1 = ''\n    for tup in test_tup:\n        str1 += str(tup) + ' '\n    return str1.strip()\n\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"}
{"task_id": "MBPP/423", "completion": "\n    goldTable = [[0 for i in range(m)] for j in range(n)]\n\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = goldTable[row][col+1]\n\n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = goldTable[row-1][col+1]\n\n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = goldTable[row+1][col+1]\n\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n\n    return res\n\n\ngold = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\nm = 4\nn = 4"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(i[-1] for i in test_tuple)\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "MBPP/427", "completion": "\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(date_pattern, dt)\n    if match:\n        return '{}-{}-{}'.format(match.group(1), match.group(2), match.group(3))\n    else:\n        return 'Invalid date format'\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    # While we still have sub lists\n    while sublist_count > 0:\n        # For every index in our list\n        for i in range(sublist_count, len(my_list)):\n            # Set current value and position\n            temp_value = my_list[i]\n            position = i\n            # Sorted sublist\n            while position >= sublist_count and my_list[position - sublist_count] > temp_value:\n                my_list[position] = my_list[position - sublist_count]\n                position = position - sublist_count\n            # Set current value\n            my_list[position] = temp_value\n        # Reduce the sublist count for the next loop\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Append the elementwise and of the tuples to the result list\n        result.append(test_tup1[i] & test_tup2[i])\n\n    # Convert the result list to a tuple and return it\n    return tuple(result)\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(b**2 - 4*a*c)**0.5\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    return median\n\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] or test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n\n"}
{"task_id": "MBPP/440", "completion": "\n    # Define the regular expression for adverbs\n    adverb_regex = r'\\b(?:very|just|so|fairly|too)\\b'\n\n    # Find all matches\n    matches = re.finditer(adverb_regex, text)\n\n    # Create a list of tuples (match, start position, end position)\n    matches_positions = [(match.group(), match.start(), match.end()) for match in matches]\n\n    return matches_positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    # Write your code here\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:-K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i*j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(tup)\n    return {i: count[i] for i in lst if i in count}\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is 0, then the points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_end_here = arr[0]\n    min_end_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_end_here, min_end_here = min_end_here, max_end_here\n\n        max_end_here = max(arr[i], max_end_here * arr[i])\n        min_end_here = min(arr[i], min_end_here * arr[i])\n\n        max_so_far = max(max_so_far, max_end_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) <= 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # max_end_here[i] will store the maximum product of the subarray arr[0..i]\n    max_end_here = [0]*n\n    max_end_here[0] = arr[0]\n\n    # max_product_so_far will store the result\n    max_product_so_far = arr[0]\n\n    for i in range(1, n):\n        max_end_here[i] = max(arr[i], max_end_here[i-1]*arr[i])\n        max_product_so_far = max(max_product_so_far, max_end_here[i])\n\n    return max_product_so_far\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j - 1] - price[j])\n    return dp[k][n - 1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] + test_tup[i + 1])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the product of array elements\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    # Return the remainder\n    return res % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n    return result\n\n\ntest_list1 = [(7, 1, 3), (4, 8, 2), (9, 6, 5), (1, 3, 7)]\ntest_list2 = [(7, 1, 3), (4, 8, 2), (9, 6, 5), (1, 3, 7)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums) - max(nums) - min(nums)\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n"}
{"task_id": "MBPP/481", "completion": "\n    # The value of subset[i][j] will be True if there is a subset of set[0..j-1] with sum equal to i\n    subset = ([[False for i in range(sum + 1)] for i in range(n + 1)])\n\n    # If sum is 0, then answer is True\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    # If sum is not 0 and set is empty, then answer is False\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n\n    # Fill the subset table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            if j >= set[i - 1]:\n                subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]])\n\n    # return the last cell of the table\n    return subset[n][sum]\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+')\n    matches = pattern.findall(text)\n    return matches\n\n\ntext = \"Hello World, I AM a Developer. I Love Coding IN Python.\""}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    # Remove matching tuples\n    result = [i for i in test_list1 if i not in test_list2]\n    return result\n\n"}
{"task_id": "MBPP/485", "completion": "\n    # Convert the number to string\n    n = str(n)\n\n    # Check if the number is the same read forwards and backwards\n    return n == n[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if n < r:\n        return \"Invalid input\"\n    fact_n = 1\n    for i in range(1, n + 1):\n        fact_n *= i\n\n    fact_r = 1\n    for i in range(1, r + 1):\n        fact_r *= i\n\n    fact_n_r = 1\n    for i in range(1, n - r + 1):\n        fact_n_r *= i\n\n    return fact_n / (fact_r * fact_n_r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n\ntup = [(1, 2), (3, 1), (4, 5), (2, 3)]"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the angle between the two points\n    dx = endx - startx\n    dy = endy - starty\n    angle = math.atan2(dy, dx)\n\n    # Calculate the coordinates of the hexagon corners\n    corners = []\n    for i in range(6):\n        x = radius * math.cos(angle + i * 2 * math.pi / 6) + startx\n        y = radius * math.sin(angle + i * 2 * math.pi / 6) + starty\n        corners.append((x, y))\n\n    return corners\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return [int(i, 2) for i in test_tup]\n\n\ntest_tup = ('101', '1111', '10101')"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n\n    smallest_nums = [hq.heappop(heap) for _ in range(n)]\n    return smallest_nums\n\nnums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nn = 5"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return [sum(nums[i:i+2]) for i in range(0, len(nums), 2)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/505", "completion": "\n    # count the number of zeroes\n    zero_count = A.count(0)\n    # remove all zeroes\n    A = [i for i in A if i != 0]\n    # append zero_count number of zeroes to the end of the array\n    A.extend([0]*zero_count)\n    return A\n\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if k > n/2:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n"}
{"task_id": "MBPP/508", "completion": "\n    return l1 == l2\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum_odd += i\n        count += 1\n    return sum_odd/count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    cnt = [0] * (n + 1)\n    cnt[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] * arr[i - 1]\n        cnt[i] = cnt[i - 1] * 2 if arr[i - 1] > 0 else cnt[i - 1]\n        if dp[i] >= k:\n            cnt[i] -= 1\n            while dp[i] >= k and i > 0:\n                i -= 1\n                dp[i] = dp[i + 1] * arr[i]\n                cnt[i] = cnt[i + 1] * 2 if arr[i] > 0 else cnt[i + 1]\n                if dp[i] >= k:\n                    cnt[i] -= 1\n    return cnt[n]\n\n"}
