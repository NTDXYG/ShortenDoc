{"task_id": "MBPP/11", "completion": "\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=lambda x: sum(x))\n"}
{"task_id": "MBPP/13", "completion": "\n    counter = Counter(words)\n    return counter.most_common(1)[0][0]\n\n"}
{"task_id": "MBPP/14", "completion": "\n    return (l * b * h) / 2\n\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', text).lower()\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([a-z]+)', r'\\1_', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    string = list(string)\n    return string\n\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, n) if i % n == 0]\n\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for i in list1:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        if arr[i] != 0:\n            product *= arr[i]\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    if len(test_list) == K:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/27", "completion": "\n    for i in range(len(list)):\n        list[i] = re.sub(r'\\d+', '', list[i])\n    return list\n\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"}
{"task_id": "MBPP/29", "completion": "\n    # Initialize result\n    res = 0\n\n    # Traverse array elements\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n\n    # Return result\n    return res\n\n"}
{"task_id": "MBPP/30", "completion": "\n    stack = []\n    for i in s:\n        if stack and stack[-1] == i:\n            stack.pop()\n        else:\n            stack.append(i)\n    return len(stack) == 0\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a heap queue\n    heap = []\n    # Iterate over the list of numbers\n    for num in nums:\n        # If the heap is not full, add the number to the heap\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        # If the heap is full and the number is greater than the smallest number in the heap, replace the smallest number with the number\n        elif num > heap[0]:\n            heapq.heapreplace(heap, num)\n    # Return the heap queue\n    return heap\n\n"}
{"task_id": "MBPP/32", "completion": "\n    # Function to find largest prime factor\n    def largest_prime_factor(n):\n        # Initialize the maximum prime factor\n        max_prime = -1\n\n        # Divide n by 2 until it is odd\n        while n % 2 == 0:\n            max_prime = 2\n            n >>= 1  # equivalent to n /= 2\n\n        # n must be odd at this point, thus skip the even numbers and iterate only for odd\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                max_prime = i\n                n = n / i\n\n        # This condition is to handle the case when n is a prime number greater than 2\n        if n > 2:\n            max_prime = n\n\n        return max_prime\n\n    # Function to find the maximum prime factor of a number\n    def max_prime_factors(n):\n        # Initialize the maximum prime factor\n        max_prime = -1\n\n        # Iterate through all numbers from 2 to n\n        for i in range(2, n + 1):\n            # Check if i is a factor of n\n            if n % i == 0:\n                # Check if i is a prime number\n                if is_prime(i):\n                    # Update the maximum prime factor\n                    max_prime = max(max_prime, i)\n\n        return max_prime\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        # Check if n is less than 2\n        if n < 2:\n            return False\n\n        # Check if n is divisible by any number from 2 to sqrt(n)\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n\n        return True\n\n    # Function to find the maximum prime factor of a number using the Sieve of Eratosthenes\n    def max_prime_factors_sieve(n):\n        # Create a boolean array \"prime[0..n]\" and initialize all entries as true.\n        # A value in prime[i] will finally be false if i is Not a prime, else true bool prime[n+1]\n        prime = [True for _ in range(n + 1)]\n        p = 2\n        while (p * p <= n):\n\n            # If prime[p] is not changed, then it is a prime\n            if (prime"}
{"task_id": "MBPP/33", "completion": "\n    binary = []\n    while N > 0:\n        binary.append(N % 2)\n        N = N // 2\n    return binary[::-1]\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # check if the array is sorted\n    if ar[0] != 1:\n        return 1\n    # check if the array is empty\n    if len(ar) == 0:\n        return 1\n    # check if the array is not sorted\n    for i in range(len(ar)-1):\n        if ar[i+1] - ar[i] != 1:\n            return ar[i] + 1\n    # check if the array is complete\n    if ar[-1] == N:\n        return N + 1\n    # check if the array is not complete\n    for i in range(1, N+1):\n        if i not in ar:\n            return i\n    return None"}
{"task_id": "MBPP/35", "completion": "\n    return int((n * (n + 1) / 2) ** 0.5)\n"}
{"task_id": "MBPP/36", "completion": "\n    if p == 0 or q == 0:\n        return 0\n    if p > q:\n        return 0\n    if N == 1:\n        return p\n    if N == 2:\n        return q\n    if N == 3:\n        return 1\n    if N == 4:\n        return 0\n    if N == 5:\n        return 1\n    if N == 6:\n        return 0\n    if N == 7:\n        return 1\n    if N == 8:\n        return 0\n    if N == 9:\n        return 1\n    if N == 10:\n        return 0\n    if N == 11:\n        return 1\n    if N == 12:\n        return 0\n    if N == 13:\n        return 1\n    if N == 14:\n        return 0\n    if N == 15:\n        return 1\n    if N == 16:\n        return 0\n    if N == 17:\n        return 1\n    if N == 18:\n        return 0\n    if N == 19:\n        return 1\n    if N == 20:\n        return 0\n    if N == 21:\n        return 1\n    if N == 22:\n        return 0\n    if N == 23:\n        return 1\n    if N == 24:\n        return 0\n    if N == 25:\n        return 1\n    if N == 26:\n        return 0\n    if N == 27:\n        return 1\n    if N == 28:\n        return 0\n    if N == 29:\n        return 1\n    if N == 30:\n        return 0\n    if N == 31:\n        return 1\n    if N == 32:\n        return 0\n    if N == 33:\n        return 1\n    if N == 34:\n        return 0\n    if N == 35:\n        return 1\n    if N == 36:\n        return 0\n    if N == 37:\n        return 1\n    if N == 38:\n        return 0\n    if N == 39:\n        return 1\n    if N == 40:\n        return 0\n    if N == 41"}
{"task_id": "MBPP/37", "completion": "\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Create a counter for the frequency of each character in the string\n    counter = Counter(S)\n    \n    # Create a max heap from the counter\n    heap = [(-freq, char) for char, freq in counter.items()]\n    heapq.heapify(heap)\n    \n    # Initialize the previous character and its frequency to None and 0\n    prev_char, prev_freq = None, 0\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # While the heap is not empty\n    while heap:\n        # Pop the character with the highest frequency from the heap\n        freq, char = heapq.heappop(heap)\n        \n        # Append the character to the result string\n        result += char\n        \n        # If the previous character is not None and its frequency is greater than 0\n        if prev_char is not None and prev_freq > 0:\n            # Push the previous character and its frequency back into the heap\n            heapq.heappush(heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char, prev_freq = char, freq + 1\n    \n    # Return the result string\n    return result\n\n"}
{"task_id": "MBPP/40", "completion": "\n    return Counter(nums).most_common(1)[0][0]\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the sum\n    total_sum = 0\n\n    # Iterate over the dictionary and add the sum of each element multiplied by its frequency\n    for num, count in freq.items():\n        total_sum += num * count\n\n    return total_sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z_]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'^\\w+'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct = []\n    for i in data:\n        if data.count(i) == 1:\n            distinct.append(i)\n    return distinct\n\n"}
{"task_id": "MBPP/47", "completion": "\n    return A % 10\n"}
{"task_id": "MBPP/48", "completion": "\n    result = 0\n    for i in range(32):\n        if (n >> i) & 1:\n            result |= 1 << (i * 2)\n    return result\n\n"}
{"task_id": "MBPP/49", "completion": "\n    return [nums[i][0] for i in range(N)]\n\n"}
{"task_id": "MBPP/50", "completion": "\n    return len(min(input_list, key=len))\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) < 2:\n        return False\n    return str[0] == str[-1]\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return []\n    max_value = max(my_list)\n    min_value = min(my_list)\n    range_value = max_value - min_value + 1\n    count_array = [0] * range_value\n    for i in my_list:\n        count_array[i - min_value] += 1\n    sorted_array = []\n    for i in range(len(count_array)):\n        sorted_array += [i + min_value] * count_array[i]\n    return sorted_array\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n == rev(n) - 1:\n        return True\n    else:\n        return False"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort()\n    arr = arr[::-1]\n    return int(''.join(map(str, arr)))\n"}
{"task_id": "MBPP/58", "completion": "\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    for i in range(1, n):\n        max_len = max(max_len, 1 + max_len_sub(arr, i))\n    return max_len\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Create a dictionary to store the count of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count_dict[len(substring)] += 1\n\n    # Return the count of substrings with sum of digits equal to length\n    return count_dict\n\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return None\n    test_list.sort()\n    return (test_list[0], test_list[-1])\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    if len(Input) < 2:\n        return False\n    for i in range(len(Input) - 1):\n        if len(Input[i]) != len(Input[i + 1]):\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    for i in range(1, n):\n        if n == i * i + i:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    regex = r'([,;])'\n    return re.split(regex, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    return (m * (m + 1) * (2 * m + 1) // 6) * (n * (n + 1) * (2 * n + 1) // 6)\n\n"}
{"task_id": "MBPP/77", "completion": "\n    if n < 0:\n        return False\n    odd_sum = 0\n    even_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    return odd_sum - even_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "MBPP/81", "completion": "\n    return tuple(zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    # Initialize variables\n    char = ''\n    count = 0\n    # Iterate through the string\n    for i in range(len(strr)):\n        # Check if the character is a letter\n        if strr[i].isalpha():\n            # Check if the character is the same as the previous character\n            if strr[i] == char:\n                # Increment the count\n                count += 1\n            else:\n                # Update the character and count\n                char = strr[i]\n                count = 1\n    # Return the character and count\n    return char, count\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[i-2]-1] + sequence[sequence[i-1]-1])\n        return sequence[-1]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n\n"}
{"task_id": "MBPP/88", "completion": "\n    freq = collections.Counter(list1)\n    return freq\n\n"}
{"task_id": "MBPP/89", "completion": "\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    if N == 4:\n        return 4\n    if N == 5:\n        return 5\n    if N == 6:\n        return 6\n    if N == 7:\n        return 7\n    if N == 8:\n        return 8\n    if N == 9:\n        return 9\n    if N == 10:\n        return 10\n    if N == 11:\n        return 11\n    if N == 12:\n        return 12\n    if N == 13:\n        return 13\n    if N == 14:\n        return 14\n    if N == 15:\n        return 15\n    if N == 16:\n        return 16\n    if N == 17:\n        return 17\n    if N == 18:\n        return 18\n    if N == 19:\n        return 19\n    if N == 20:\n        return 20\n    if N == 21:\n        return 21\n    if N == 22:\n        return 22\n    if N == 23:\n        return 23\n    if N == 24:\n        return 24\n    if N == 25:\n        return 25\n    if N == 26:\n        return 26\n    if N == 27:\n        return 27\n    if N == 28:\n        return 28\n    if N == 29:\n        return 29\n    if N == 30:\n        return 30\n    if N == 31:\n        return 31\n    if N == 32:\n        return 32\n    if N == 33:\n        return 33\n    if N == 34:\n        return 34\n    if N == 35:\n        return 35\n    if N == 36:\n        return 36\n    if N == 37:\n        return 37\n    if N == 38:\n        return 38\n    if N == 39:\n        return 39\n    if N == 40:\n        return 40\n    if N == 41:\n        return 41\n    if N == 42:\n       "}
{"task_id": "MBPP/90", "completion": "\n    return max(len(i) for i in list1)\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n    return True\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n\n"}
{"task_id": "MBPP/95", "completion": "\n    if len(lst) == 0:\n        return 0\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_list = []\n    for i in list1:\n        freq_list.append(list1.count(i))\n    return freq_list\n\n"}
{"task_id": "MBPP/98", "completion": "\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    if len(num) == 1:\n        return int(num) + 1\n    if num == num[::-1]:\n        return int(num) + 2\n    if len(num) % 2 == 0:\n        left = num[:len(num)//2]\n        right = num[len(num)//2:]\n        if left < right[::-1]:\n            return int(left + right[::-1])\n        else:\n            return int(str(int(left) + 1) + '0'*(len(num)//2))\n    else:\n        left = num[:len(num)//2 + 1]\n        right = num[len(num)//2 + 1:]\n        if left < right[::-1]:\n            return int(left + right[::-1])\n        else:\n            return int(str(int(left) + 1) + '0'*(len(num)//2))\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return None\n    return sorted(arr)[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if n < 0 or m < 0:\n        return 0\n    if n == 0 or m == 0:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n"}
{"task_id": "MBPP/105", "completion": "\n    return sum(lst)\n"}
{"task_id": "MBPP/106", "completion": "\n    return [sum(x) for x in zip(test_list, test_tup)]\n\n"}
{"task_id": "MBPP/107", "completion": "\n    return R - L + 1\n\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i, num in enumerate([num1, num2, num3]):\n        if num:\n            heapq.heappush(heap, (num[0], i, 0))\n\n    result = []\n    while heap:\n        val, i, j = heapq.heappop(heap)\n        result.append(val)\n        if j + 1 < len([num1, num2, num3][i]):\n            heapq.heappush(heap, ([num1, num2, num3][i][j + 1], i, j + 1))\n\n    return result\n\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if int(s[i], 2) % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    missing = []\n    for i in range(strt_val, stop_val+1):\n        if i not in test_list:\n            missing.append(i)\n    return missing\n"}
{"task_id": "MBPP/111", "completion": "\n    common = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common.intersection_update(sublist)\n    return list(common)\n"}
{"task_id": "MBPP/112", "completion": "\n    return 2 * (3.14 * diameter + height)\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = Counter(test_list)\n    return freq_dict\n\n"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list if isinstance(i, (int, float))]\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    if n == 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        i = 2\n        while i < n and arr[i] == arr[i-1]:\n            i += 1\n        if i == n:\n            return -1\n        else:\n            return arr[i]\n    elif arr[0] != arr[1]:\n        i = 1\n        while i < n and arr[i] == arr[i-1]:\n            i += 1\n        if i == n:\n            return arr[0]\n        else:\n            return arr[i]\nsearch([1, 1, 2, 3, 3, 4, 4, 5, 5], 9) # 2\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 10) # -1\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6], 11) # 6\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7], 13) # 7\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8], 15) # 8\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9], 17) # 9\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], 19) # 10\nsearch([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return (list1[-1], list1[-2]), (list1[0], list1[1])\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/122", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def get_divisors_sum(n):\n        divisors_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_numbers = []\n    for i in range(2, limit):\n        divisors_sum = get_divisors_sum(i)\n        if divisors_sum != i and get_divisors_sum(divisors_sum) == i:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a / b)\n\n"}
{"task_id": "MBPP/125", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if string == '0' * n or string == '1' * n:\n        return 0\n    count_0 = string.count('0')\n    count_1 = string.count('1')\n    if count_0 == 0 or count_1 == 0:\n        return 0\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_string = string[i:j]\n            count_0_sub = sub_string.count('0')\n            count_1_sub = sub_string.count('1')\n            if count_0_sub == 0 or count_1_sub == 0:\n                continue\n            length = max(count_0_sub, count_1_sub)\n            max_length = max(max_length, length)\n    return max_length\n"}
{"task_id": "MBPP/126", "completion": "\n    return a + b\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str.split() if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # check if matrix is filled with numbers from 1 to n^2\n    n = len(my_matrix)\n    numbers = set(range(1, n**2 + 1))\n    if set(sum(my_matrix, [])) != numbers:\n        return False\n\n    # check if rows, columns and diagonals sum to the same value\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(my_matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the frequency of each number\n    frequency = defaultdict(int)\n\n    # Iterate through the list and update the frequency dictionary\n    for num in nums:\n        frequency[num] += 1\n\n    # Find the number with the maximum frequency\n    max_freq = max(frequency.values())\n\n    # Find all numbers with the maximum frequency\n    max_nums = [num for num, freq in frequency.items() if freq == max_freq]\n\n    return max_nums\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    if n == 0:\n        return arr[-1]\n    if p == 0:\n        return arr[-1]\n    if arr[-1] % 2 == 0:\n        arr[-1] = arr[-1] // 2\n    else:\n        arr[-1] = arr[-1] * 3 + 1\n    return check_last(arr, n-1, p-1)\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        return units * 0.50\n    elif units <= 100:\n        return 25 + (units - 50) * 0.75\n    elif units <= 200:\n        return 100 + (units - 100) * 1.20\n    else:\n        return 220 + (units - 200) * 1.50\n\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n"}
{"task_id": "MBPP/138", "completion": "\n    if n < 0:\n        return False\n    while n:\n        if n & 1:\n            if n == 1:\n                return True\n            else:\n                return False\n        n >>= 1\n    return False\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * math.pi * r\n"}
{"task_id": "MBPP/140", "completion": "\n    return [item for sublist in test_list for item in sublist]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = nums.index(max(nums[:i + 1]))\n        if max_index != i:\n            if max_index != 0:\n                nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:i + 1] = nums[:i + 1][::-1]\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return [i for i in Input if isinstance(i, list)]\n"}
{"task_id": "MBPP/144", "completion": "\n    # Sort the array\n    arr.sort()\n    # Initialize the sum\n    sum = 0\n    # Iterate over the array\n    for i in range(n-1):\n        # Add the absolute difference between the current element and the next element\n        sum += abs(arr[i] - arr[i+1])\n    # Return the sum\n    return sum\n"}
{"task_id": "MBPP/145", "completion": "\n    if n < 2:\n        return 0\n\n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_diff\n\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    if x < 10:\n        return x\n    else:\n        return x % 10 + sum_digits_single(x // 10)\n\n"}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a == 0:\n        return False\n    if b == 0:\n        return False\n    if c == 0:\n        return False\n    if a == b:\n        return False\n    if a == c:\n        return False\n    if b == c:\n        return False\n    if a > b:\n        return False\n    if b > c:\n        return False\n    if a > c:\n        return False\n    if a == 1:\n        return True\n    if b == 1:\n        return True\n    if c == 1:\n        return True\n    if a == 2:\n        return True\n    if b == 2:\n        return True\n    if c == 2:\n        return True\n    if a == 3:\n        return True\n    if b == 3:\n        return True\n    if c == 3:\n        return True\n    if a == 4:\n        return True\n    if b == 4:\n        return True\n    if c == 4:\n        return True\n    if a == 5:\n        return True\n    if b == 5:\n        return True\n    if c == 5:\n        return True\n    if a == 6:\n        return True\n    if b == 6:\n        return True\n    if c == 6:\n        return True\n    if a == 7:\n        return True\n    if b == 7:\n        return True\n    if c == 7:\n        return True\n    if a == 8:\n        return True\n    if b == 8:\n        return True\n    if c == 8:\n        return True\n    if a == 9:\n        return True\n    if b == 9:\n        return True\n    if c == 9:\n        return True\n    if a == 10:\n        return True\n    if b == 10:\n        return True\n    if c == 10:\n        return True\n    if a == 11:\n        return True\n    if b == 11:\n        return True\n    if c == 11:\n        return True\n    if a == 12:\n        return True\n    if b == 12:\n        return True\n    if c == 12:\n        return True\n    if a == 13:\n        return True\n    if b == 13:\n        return True\n   "}
{"task_id": "MBPP/151", "completion": "\n    while q != 0:\n        p, q = q, p % q\n    return p\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    else:\n        mid = len(x) // 2\n        return merge(merge_sort(x[:mid]), merge_sort(x[mid:]))\n"}
{"task_id": "MBPP/153", "completion": "\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n\n"}
{"task_id": "MBPP/154", "completion": "\n    return [nums[i][N] for i in range(len(nums))]\n\n"}
{"task_id": "MBPP/155", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), key) for key, group in groupby(list1)]\n\n"}
{"task_id": "MBPP/158", "completion": "\n    # Initialize the count of operations\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is not equal to k, increment the count\n        if arr[i] != k:\n            count += 1\n\n    # Return the count of operations\n    return count\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in [12, 1, 2]:\n        season = \"Winter\"\n    elif month in [3, 4, 5]:\n        season = \"Spring\"\n    elif month in [6, 7, 8]:\n        season = \"Summer\"\n    elif month in [9, 10, 11]:\n        season = \"Autumn\"\n    else:\n        season = \"Invalid month\"\n    return season\n\n"}
{"task_id": "MBPP/160", "completion": "\n    if a == 0 and b == 0:\n        if n == 0:\n            return True\n        else:\n            return False\n    elif a == 0:\n        if n % b == 0:\n            return True\n        else:\n            return False\n    elif b == 0:\n        if n % a == 0:\n            return True\n        else:\n            return False\n    else:\n        if n % gcd(a, b) == 0:\n            return True\n        else:\n            return False\n"}
{"task_id": "MBPP/161", "completion": "\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l ** 2) / (4 * tan(pi / l))\n\n"}
{"task_id": "MBPP/164", "completion": "\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/165", "completion": "\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "MBPP/167", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length()\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n - 1) + get_pell(n - 2)\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for char in s:\n        if char == 's' or char == 't' or char == 'd':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    for char in str1:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (char == ')' and top != '(') or (char == '}' and top != '{') or (char == ']' and top != '['):\n                return False\n    return not stack\n"}
{"task_id": "MBPP/176", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a triangle\"\n    else:\n        return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the answer variable\n    answer = 0\n\n    # Iterate over the range from L to R\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            # Calculate the lcm of the two numbers\n            lcm = (i * j) // math.gcd(i, j)\n\n            # Check if the lcm is a power of 2\n            if math.log2(lcm).is_integer():\n                # Update the answer variable if the current lcm is greater than the previous answer\n                answer = max(answer, lcm)\n\n    # Return the answer variable\n    return answer\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x == 4:\n        return True\n    if x == 5:\n        return True\n    if x == 6:\n        return True\n    if x == 7:\n        return True\n    if x == 8:\n        return True\n    if x == 9:\n        return True\n    if x == 10:\n        return True\n    if x == 11:\n        return True\n    if x == 12:\n        return True\n    if x == 13:\n        return True\n    if x == 14:\n        return True\n    if x == 15:\n        return True\n    if x == 16:\n        return True\n    if x == 17:\n        return True\n    if x == 18:\n        return True\n    if x == 19:\n        return True\n    if x == 20:\n        return True\n    if x == 21:\n        return True\n    if x == 22:\n        return True\n    if x == 23:\n        return True\n    if x == 24:\n        return True\n    if x == 25:\n        return True\n    if x == 26:\n        return True\n    if x == 27:\n        return True\n    if x == 28:\n        return True\n    if x == 29:\n        return True\n    if x == 30:\n        return True\n    if x == 31:\n        return True\n    if x == 32:\n        return True\n    if x == 33:\n        return True\n    if x == 34:\n        return True\n    if x == 35:\n        return True\n    if x == 36:\n        return True\n    if x == 37:\n        return True\n    if x == 38:\n        return True\n    if x == 39:\n        return True\n    if x == 40:\n        return True\n    if x == 41:\n        return True\n    if x == 42:\n        return True\n    if x == 43:\n        return True\n    if x == 44:\n        return True\n    if x == 45"}
{"task_id": "MBPP/180", "completion": "\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    return 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))\n\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    pattern = r'(?=.*[a-z])(?=.*[!@#$%^&*()_+{}\":;\\',.<>?~`-])(?=.*\\d)'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    x = (b**2 - 4*a*c) / (4*a)\n    y = (4*a*c - b**2) / (4*a)\n    return (x, y)\n\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % (i ** 2) == 0:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    # create a set of all numbers in the array\n    num_set = set(arr)\n    # iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is not in the set, return it\n        if i not in num_set:\n            return i\n    # if all numbers from 1 to n are in the set, return n+1\n    return n+1\n"}
{"task_id": "MBPP/190", "completion": "\n    # x1, y1, x2, y2 are the coordinates of the square\n    # x1, y1 is the top left corner\n    # x2, y2 is the bottom right corner\n    # the square is defined by the points (x1, y1), (x1, y2), (x2, y2), (x2, y1)\n    # we need to count the number of integral co-ordinates inside the square\n    # an integral co-ordinate is a co-ordinate that has both x and y as integers\n    # for example, (1, 1), (2, 3), (4, 5) are integral co-ordinates\n    # but (1.5, 2.3), (3.7, 4.1) are not integral co-ordinates\n    # we can count the number of integral co-ordinates by counting the number of\n    # integral co-ordinates in each row and each column and then adding them up\n    # for example, if the square is defined by the points (1, 1), (1, 3), (3, 3), (3, 1)\n    # then there are 2 integral co-ordinates in the first row, 2 integral co-ordinates\n    # in the second row, 2 integral co-ordinates in the third row, and 2 integral\n    # co-ordinates in the fourth row, so there are 8 integral co-ordinates in total\n    # we can use the following formula to count the number of integral co-ordinates\n    # in a row:\n    # count = (x2 - x1 + 1) // 2\n    # where x1 and x2 are the coordinates of the first and last points in the row\n    # for example, if the row is defined by the points (1, 1), (1, 3), then x1 = 1 and x2 = 3\n    # so count = (3 - 1 + 1) // 2 = 2\n    # we can use the same formula to count the number of integral co-ordinates\n    # in a column:\n    # count = (y2 - y1 + 1) // 2\n    # where y1 and y2 are the coordinates of the first and last points in the column\n    # for example, if"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['April', 'June', 'September', 'November']:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    for i in str:\n        if i.isalpha() and i.isnumeric():\n            return True\n    return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n"}
{"task_id": "MBPP/197", "completion": "\n    return tuple(map(lambda x, y: x ** y, test_tup1, test_tup2))\n"}
{"task_id": "MBPP/198", "completion": "\n    if a < b:\n        a, b = b, a\n    if a == 0 or b == 0:\n        return 0\n    return math.pi * a * b / 4\n\n"}
{"task_id": "MBPP/199", "completion": "\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_value]\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] == chkList(lst[1:])\n"}
{"task_id": "MBPP/202", "completion": "\n    str2 = \"\"\n    for i in str1:\n        if i % 2 != 0:\n            str2 += i\n    return str2\n"}
{"task_id": "MBPP/203", "completion": "\n    xor = n1 ^ n2\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inv_count = 0\n    for i in range(len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/206", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0 for x in range(n+1)] for x in range(n+1)]\n    res = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = dp[i-1][j-1] + 1\n                res = max(res, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return res\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'^[a-z0-9]*$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum([i**4 for i in range(1, n+1)])\n\n"}
{"task_id": "MBPP/213", "completion": "\n    return test_tup1 + test_tup2\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i]] * alist[i+1])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return all(item in list2 for item in list1)\n\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    if A == B:\n        return 0\n    if A > B:\n        return A - B\n    return B - A\n\n"}
{"task_id": "MBPP/219", "completion": "\n    min_max = []\n    for i in range(K):\n        min_max.append((test_tup[i][0], test_tup[i][1]))\n    return min_max\n\n"}
{"task_id": "MBPP/220", "completion": "\n    text = re.sub(r'\\s+', ' ', text)\n    text = re.sub(r',+', ',', text)\n    text = re.sub(r'\\.+', '.', text)\n    text = re.sub(r':+', ':', text)\n    return text[:n]\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid - 1] > arr[mid]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Check if all bits are set in the given range\n    if (n & ((1 << (r + 1)) - (1 << l))) == ((1 << (r + 1)) - (1 << l)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/229", "completion": "\n    # create two empty lists\n    negative = []\n    positive = []\n    # iterate over the array\n    for i in arr:\n        # if the element is negative append it to the negative list\n        if i < 0:\n            negative.append(i)\n        # if the element is positive append it to the positive list\n        else:\n            positive.append(i)\n    # return the negative list followed by the positive list\n    return negative + positive\n\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    return 2 * 3.14 * r * h\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    return n | 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Write your code here\n    if N < 3 or K < 3:\n        return 0\n    return (N * (N - 1) * (N - 2)) // 6\n"}
{"task_id": "MBPP/237", "completion": "\n    counter = Counter(test_list)\n    for key, value in counter.items():\n        if value > 1:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/238", "completion": "\n    return sum(len(str) - i for i in range(len(str)))\n"}
{"task_id": "MBPP/239", "completion": "\n    if m < 1 or n < 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j * 2 ** (i - 1) <= m:\n                dp[i] += dp[i - 1]\n    return dp[n]\n"}
{"task_id": "MBPP/240", "completion": "\n    if len(list1) == 0:\n        return list2\n    else:\n        return list1[:-1] + list2\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(o)] for _ in range(n) for _ in range(m)]\n"}
{"task_id": "MBPP/242", "completion": "\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return -1\n    if N == 0:\n        return 1\n    if N == 1:\n        return 1\n    if N == 2:\n        return 4\n    if N == 3:\n        return 9\n    if N == 4:\n        return 16\n    if N == 5:\n        return 25\n    if N == 6:\n        return 36\n    if N == 7:\n        return 49\n    if N == 8:\n        return 64\n    if N == 9:\n        return 81\n    if N == 10:\n        return 100\n    if N == 11:\n        return 121\n    if N == 12:\n        return 144\n    if N == 13:\n        return 169\n    if N == 14:\n        return 196\n    if N == 15:\n        return 225\n    if N == 16:\n        return 256\n    if N == 17:\n        return 289\n    if N == 18:\n        return 324\n    if N == 19:\n        return 361\n    if N == 20:\n        return 400\n    if N == 21:\n        return 441\n    if N == 22:\n        return 484\n    if N == 23:\n        return 529\n    if N == 24:\n        return 576\n    if N == 25:\n        return 625\n    if N == 26:\n        return 676\n    if N == 27:\n        return 729\n    if N == 28:\n        return 784\n    if N == 29:\n        return 841\n    if N == 30:\n        return 900\n    if N == 31:\n        return 961\n    if N == 32:\n        return 1024\n    if N == 33:\n        return 1089\n    if N == 34:\n        return 1156\n    if N == 35:\n        return 1225\n    if N == 36:\n        return 1296\n    if N == 37:\n        return 1369\n    if N == 38:\n        return 1444\n    if N == 39:\n        return 1521"}
{"task_id": "MBPP/245", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    max_sum = [0] * n\n    max_sum[0] = arr[0]\n    max_sum[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        max_sum[i] = max(max_sum[i - 1], arr[i])\n        for j in range(i):\n            max_sum[i] = max(max_sum[i], max_sum[j] + arr[i])\n    return max_sum[n - 1]\n\n"}
{"task_id": "MBPP/246", "completion": "\n    guess = number / 2.0\n    while True:\n        better_guess = (guess + number / guess) / 2.0\n        if abs(guess - better_guess) < 0.000001:\n            return better_guess\n        guess = better_guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if (str[i] == str[j] and cl == 2):\n                dp[i][j] = 2\n            elif (str[i] == str[j]):\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"}
{"task_id": "MBPP/248", "completion": "\n    return sum(1.0/i for i in range(1, n+1))\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums2, array_nums1))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    return [cmath.polar(number) for number in numbers]\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*e\\b', text, re.I)\n\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return sum(primes)\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return list(filter(lambda x: x % 2 != 0, array_nums))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    return tuple(max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n\n"}
{"task_id": "MBPP/260", "completion": "\n    if n == 1:\n        return 2\n    else:\n        count = 1\n        num = 3\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 2\n        return num\n"}
{"task_id": "MBPP/261", "completion": "\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    for k, v in d2.items():\n        if k in d1:\n            if isinstance(d1[k], dict) and isinstance(v, dict):\n                merge_dict(d1[k], v)\n            elif d1[k] == v:\n                pass\n            else:\n                raise Exception('Conflict at key %s' % k)\n        else:\n            d1[k] = v\n    return d1\n\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age * 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    return sum(i**2 for i in range(1, n+1, 2))\n"}
{"task_id": "MBPP/268", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + 1\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    return sum(i**5 for i in range(1, n+1))\n"}
{"task_id": "MBPP/272", "completion": "\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    if n == 33:\n        return 8589934592\n    if n == 34:\n        return 17179869184"}
{"task_id": "MBPP/275", "completion": "\n    if n == 1:\n        return 0\n    if m == 1:\n        return n - 1\n    return (get_Position(a, n - 1, m - 1) + a[n - 1]) % n\n\n"}
{"task_id": "MBPP/276", "completion": "\n    return 3.14 * r * r * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for tup in test_tup:\n        if tup[0] == 1:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    if n < 0:\n        return False\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        if digits[i] > i + 1:\n            return False\n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    window_size = 0\n    repeat_count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the max sum, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = window_size\n            end = i\n\n        # If the current sum is less than 0, reset the current sum and window size\n        if current_sum < 0:\n            current_sum = 0\n            window_size = 0\n            repeat_count = 0\n\n        # If the window size is equal to k, reset the current sum and window size\n        if window_size == k:\n            current_sum = 0\n            window_size = 0\n            repeat_count = 0\n\n        # If the window size is less than k, increment the window size and repeat count\n        if window_size < k:\n            window_size += 1\n            repeat_count += 1\n\n        # If the repeat count is equal to k, reset the current sum and window size\n        if repeat_count == k:\n            current_sum = 0\n            window_size = 0\n            repeat_count = 0\n\n    # Return the max sum\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    return sum(i**2 for i in range(1, n+1))\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for i in arr:\n        if pow(i, N-2, P) == 1:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize the number of odd days\n    odd_days = 0\n\n    # Calculate the number of odd days for each year\n    for year in range(1, N + 1):\n        # Check if the year is a leap year\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            odd_days += 2  # Leap year has 2 odd days\n        else:\n            odd_days += 1  # Common year has 1 odd day\n\n    return odd_days\n\n"}
{"task_id": "MBPP/290", "completion": "\n    return max(len(i) for i in list1)\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # dp[i] represents the number of ways to paint i posts\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        # If the last two posts are painted the same color, there are dp[i-2] ways to paint the remaining posts\n        # If the last two posts are painted different colors, there are dp[i-1] * (k-1) ways to paint the remaining posts\n        dp[i] = dp[i-1] * (k-1) + dp[i-2] * k\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    if n < m:\n        return 0\n    else:\n        return n // m + find(n - m, m)\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"}
{"task_id": "MBPP/295", "completion": "\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [item for sublist in l1 for item in sublist if item in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of values for each key\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for key, value in stdata:\n        # Add the value to the sum for the current key\n        sum_dict[key] += value\n\n    # Create a list of tuples from the dictionary\n    sum_list = [(key, value) for key, value in sum_dict.items()]\n\n    # Sort the list of tuples by the second element in descending order\n    sum_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the first element of the sorted list\n    return sum_list[0]\n\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n        dp[i][i] = dp[i - 1][i - 1]\n        for j in range(1, i):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return sum(dp[n])\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"}
{"task_id": "MBPP/302", "completion": "\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # find the pivot\n    pivot = find_Pivot(arr, ranges, rotations)\n    # find the element\n    if pivot == -1:\n        return -1\n    if arr[pivot] == index:\n        return pivot\n    if arr[0] <= index:\n        return binary_search(arr, 0, pivot - 1, index)\n    return binary_search(arr, pivot + 1, len(arr) - 1, index)\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word[0] == 'p']\n\n"}
{"task_id": "MBPP/306", "completion": "\n    if index == n:\n        return 0\n    if dp[index][k] != -1:\n        return dp[index][k]\n    if a[index] > a[k]:\n        dp[index][k] = max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    else:\n        dp[index][k] = max_sum_increasing_subseq(a, n, index+1, k)\n    return dp[index][k]\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuple(tuplex[i:i+n] for i in range(0, len(tuplex), m))\n\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    return nums1[:N] * nums2[:N]\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1.split(','))\n\n"}
{"task_id": "MBPP/311", "completion": "\n    return n | (n + 1)\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_list = []\n    for i in list1:\n        if i > 0:\n            pos_list.append(i)\n    return pos_list\n\n"}
{"task_id": "MBPP/314", "completion": "\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    # Iterate through the grid\n    for i in range(n):\n        for j in range(i, n):\n            # Update the current sum\n            current_sum += grid[i][j] + grid[j][i]\n\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                start = i\n                end = j\n\n            # Reset the current sum if it becomes negative\n            if current_sum < 0:\n                current_sum = 0\n\n    return max_sum, start, end\n\n"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    max_len = 0\n    max_len_word = \"\"\n    for word in str:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_len_word = word\n    return max_len_word\n"}
{"task_id": "MBPP/316", "completion": "\n    n = len(A)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == n - 1 or A[mid + 1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nA = [1, 2, 2, 2, 3, 4, 5]\nx = 2"}
{"task_id": "MBPP/317", "completion": "\n    result = []\n    for key, group in groupby(alist):\n        count = len(list(group))\n        result.append((count, key))\n    return result\n\n"}
{"task_id": "MBPP/318", "completion": "\n    # Sort the list in descending order\n    s.sort(reverse=True)\n    # Initialize the maximum volume\n    max_vol = 0\n    # Iterate over the list\n    for i in range(len(s)):\n        # Calculate the volume of the cuboid\n        vol = s[i] * s[i] * s[i]\n        # Update the maximum volume if necessary\n        if vol > max_vol:\n            max_vol = vol\n    # Return the maximum volume\n    return max_vol\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/320", "completion": "\n    return n**3 - (n*(n+1)//2)**2\n"}
{"task_id": "MBPP/321", "completion": "\n    if s == 0:\n        return 0\n    if s < 0:\n        return -1\n    if s == 1:\n        return 1\n    if s == 2:\n        return 2\n    if s == 3:\n        return 3\n    if s == 4:\n        return 4\n    if s == 5:\n        return 5\n    if s == 6:\n        return 6\n    if s == 7:\n        return 7\n    if s == 8:\n        return 8\n    if s == 9:\n        return 9\n    if s == 10:\n        return 10\n    if s == 11:\n        return 11\n    if s == 12:\n        return 12\n    if s == 13:\n        return 13\n    if s == 14:\n        return 14\n    if s == 15:\n        return 15\n    if s == 16:\n        return 16\n    if s == 17:\n        return 17\n    if s == 18:\n        return 18\n    if s == 19:\n        return 19\n    if s == 20:\n        return 20\n    if s == 21:\n        return 21\n    if s == 22:\n        return 22\n    if s == 23:\n        return 23\n    if s == 24:\n        return 24\n    if s == 25:\n        return 25\n    if s == 26:\n        return 26\n    if s == 27:\n        return 27\n    if s == 28:\n        return 28\n    if s == 29:\n        return 29\n    if s == 30:\n        return 30\n    if s == 31:\n        return 31\n    if s == 32:\n        return 32\n    if s == 33:\n        return 33\n    if s == 34:\n        return 34\n    if s == 35:\n        return 35\n    if s == 36:\n        return 36\n    if s == 37:\n        return 37\n    if s == 38:\n        return 38\n    if s == 39:\n        return 39\n    if s == 40:\n        return 40\n    if s == 41:\n       "}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_value]\n\n"}
{"task_id": "MBPP/323", "completion": "\n    if cur == n:\n        return\n    if out_of_place == 0:\n        right_rotate(arr, n, 1, cur + 1)\n    elif arr[cur] < 0:\n        right_rotate(arr, n, 0, cur + 1)\n    else:\n        arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n        right_rotate(arr, n, 1, cur + 1)\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 == 0)\n\n"}
{"task_id": "MBPP/325", "completion": "\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    # Create a dictionary to store the count of each word\n    word_count = defaultdict(int)\n\n    # Iterate over each word in the list\n    for word in test_list:\n        # Increment the count of the word in the dictionary\n        word_count[word] += 1\n\n    # Find the word with the maximum count\n    max_count = max(word_count.values())\n    most_occurred_word = [word for word, count in word_count.items() if count == max_count]\n\n    return most_occurred_word\n\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or x == z or y == z:\n        print(\"Triangle isosceles\")\n    else:\n        print(\"Triangle not isosceles\")\n\n"}
{"task_id": "MBPP/328", "completion": "\n    if m > n:\n        m, n = n, m\n    if m == 0:\n        return list1\n    if m > len(list1):\n        m = m % len(list1)\n    if n > len(list1):\n        n = n % len(list1)\n    if m == n:\n        return list1\n    if m > n:\n        return list1[n:] + list1[:n]\n    return list1[n:m] + list1[:n] + list1[m:]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/331", "completion": "\n    return bin(n).count('0')\n"}
{"task_id": "MBPP/332", "completion": "\n    dict1 = {}\n    for n in str1:\n        keys = dict1.keys()\n        if n in keys:\n            dict1[n] += 1\n        else:\n            dict1[n] = 1\n    return dict1\n"}
{"task_id": "MBPP/333", "completion": "\n    l = len(sub_li)\n    for i in range(0, l):\n        for j in range(0, l-i-1):\n            if (sub_li[j][1] > sub_li[j + 1][1]):\n                tempo = sub_li[j]\n                sub_li[j]= sub_li[j + 1]\n                sub_li[j + 1]= tempo\n    return sub_li"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return (n * (2 * a + (n - 1) * d)) // 2\n\n"}
{"task_id": "MBPP/336", "completion": "\n    monthname1 = monthname1.lower()\n    if monthname1 in ['january', 'march', 'may', 'july', 'august', 'october', 'december']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[-(i+1)]:\n            count += 1\n    return count"}
{"task_id": "MBPP/339", "completion": "\n    if x > y:\n        x, y = y, x\n    for i in range(x, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n    return 1\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return None\n    lst = sorted([i for i in lst if i > 0])\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_range = float('inf')\n    min_range_list = []\n    min_range_start = 0\n    min_range_end = 0\n    heap = []\n    for i, l in enumerate(list):\n        heappush(heap, Node(l[0], i, 0))\n    while True:\n        node = heappop(heap)\n        if node.value - heap[0].value < min_range:\n            min_range = node.value - heap[0].value\n            min_range_list = [node.value, heap[0].value]\n            min_range_start = node.list_num\n            min_range_end = heap[0].list_num\n        if node.index + 1 < len(list[node.list_num]):\n            heappush(heap, Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1))\n        else:\n            break\n    return min_range, min_range_list, min_range_start, min_range_end\n\n"}
{"task_id": "MBPP/343", "completion": "\n    return len(s) - len(s.replace(' ', ''))\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return n\n    if k == 2:\n        return n - 1\n    if k == n - 1:\n        return n - 1\n    if k % 2 == 0:\n        return n - k // 2\n    else:\n        return n - k // 2 + 1\n"}
{"task_id": "MBPP/347", "completion": "\n    return (m * n) // 2\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0:\n        return 1\n    if r == 0:\n        return 0\n    return bin_coff(n - 1, r) + bin_coff(n - 1, r - 1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if string == '0' or string == '1':\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/350", "completion": "\n    if len(s) == 1:\n        return 1\n    if len(s) == 0:\n        return 0\n    if s[0] == s[1]:\n        return minimum_Length(s[2:])\n    return 1 + minimum_Length(s[1:])\n"}
{"task_id": "MBPP/351", "completion": "\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # Initialize the count of rectangles\n    count = 0\n\n    # Iterate over all possible pairs of x and y coordinates\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            # Check if the point (x, y) is inside the circle\n            if x**2 + y**2 <= radius**2:\n                # Increment the count of rectangles\n                count += 1\n\n    return count\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n"}
{"task_id": "MBPP/357", "completion": "\n    max_value = test_list[0][1]\n    max_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] > max_value:\n            max_value = test_list[i][1]\n            max_index = i\n    return max_index\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n"}
{"task_id": "MBPP/362", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the number with the maximum occurrences\n    max_count = 0\n    max_num = None\n    for num, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(i, K) for i in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    if ch == '0':\n        return '1'\n    else:\n        return '0'\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right):\n        return True\n\n    return False\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return test_tup * N\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[left_element] != left_element:\n        return left_element\n    if A[right_element] != right_element:\n        return right_element\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_element - 1)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining_chars = str[:i] + str[i+1:]\n        for p in permute_string(remaining_chars):\n            result.append(char + p)\n    return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    return tuple(set(test_tup))\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        test_list.insert(0, test_list.pop())\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for i in range(colnum)] for j in range(rownum)]\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n"}
{"task_id": "MBPP/382", "completion": "\n    if len(A) == 0:\n        return 0\n\n    low = 0\n    high = len(A) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n"}
{"task_id": "MBPP/383", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/384", "completion": "\n    # Write your code here\n    # pass\n    # return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    min_val = min(arr)\n    count = 0\n    for i in arr:\n        if i == min_val:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3) + get_perrin(n-1)\n"}
{"task_id": "MBPP/386", "completion": "\n    # Initialize variables\n    open_brackets = 0\n    swaps = 0\n\n    # Iterate through string\n    for char in s:\n        if char == '(':\n            open_brackets += 1\n        elif char == ')':\n            if open_brackets > 0:\n                open_brackets -= 1\n            else:\n                swaps += 1\n\n    # Return total swaps\n    return swaps + open_brackets\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": "MBPP/388", "completion": "\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + i for i in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: l2[i], l3[i]: l3[i]})\n    return result\n\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + n//4, get_max_sum(n//5) + n//5)\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(len(x) for x in input_list)\n\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/395", "completion": "\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    if len(string) < 2:\n        return False\n    return string[0] == string[-1]\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(map(lambda x: x[0] ^ x[1], zip(test_tup1, test_tup2)))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    return tuple(map(lambda x: tuple(map(lambda y: y[0] + y[1], zip(x[0], x[1]))), zip(test_tup1, test_tup2)))\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n"}
{"task_id": "MBPP/403", "completion": "\n    # Check if the string starts with \"http://\" or \"https://\"\n    if not str.startswith(\"http://\") and not str.startswith(\"https://\"):\n        return False\n\n    # Check if the string contains a domain name\n    if not re.search(r\"\\.[a-zA-Z]{2,}\", str):\n        return False\n\n    # Check if the string contains a valid path\n    if re.search(r\"[^a-zA-Z0-9/]\", str):\n        return False\n\n    # Check if the string contains a valid query string\n    if re.search(r\"[^a-zA-Z0-9/?=&]\", str):\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    parity = 0\n    while x:\n        parity ^= x & 1\n        x >>= 1\n    return parity\n"}
{"task_id": "MBPP/407", "completion": "\n    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] > n[i - 1]:\n            n = n[:i - 1] + ''.join(sorted(n[i - 1:i] + n[i:])) + n[i:]\n            break\n    else:\n        return -1\n    return int(n)\n\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    result = []\n    while min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n    return result\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None\n    list1.sort()\n    return (list1[0], list1[1])\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), word)\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    return list1[n]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return max(max1 * max2, min1 * min2)\n"}
{"task_id": "MBPP/416", "completion": "\n    if n < 3:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n       "}
{"task_id": "MBPP/417", "completion": "\n    # create a dictionary to store the groups\n    groups = {}\n    for tup in Input:\n        # get the first element of the tuple\n        first_element = tup[0]\n        # if the first element is not in the dictionary, add it with an empty list\n        if first_element not in groups:\n            groups[first_element] = []\n        # add the tuple to the list of tuples for the first element\n        groups[first_element].append(tup)\n    # return the dictionary\n    return groups\n"}
{"task_id": "MBPP/418", "completion": "\n    if len(lst) == 0:\n        return 0\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] + 1:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n    max_len = max(max_len, current_len)\n    return max_len\n"}
{"task_id": "MBPP/419", "completion": "\n    return sum(round(i) for i in list1) * len(list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    return (n * (n + 1) // 2) ** 2\n"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n\n"}
{"task_id": "MBPP/422", "completion": "\n    return sum([i**3 for i in range(1, n+1)]) / n\n"}
{"task_id": "MBPP/423", "completion": "\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = gold[i][j] + max(dp[i-1][j-1] if i > 0 and j > 0 else 0,\n                                        dp[i-1][j] if i > 0 else 0,\n                                        dp[i-1][j+1] if i > 0 and j < n-1 else 0)\n    return max(dp[-1])\n\n"}
{"task_id": "MBPP/424", "completion": "\n    return test_tuple[-1]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    if dt:\n        dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt\n\n"}
{"task_id": "MBPP/428", "completion": "\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(map(lambda x: x[0] and x[1], zip(test_tup1, test_tup2)))\n"}
{"task_id": "MBPP/430", "completion": "\n    return -1 / (2 * a)\n\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2 * height / 2\n\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'a(b+)'\n    match = re.match(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n\n"}
{"task_id": "MBPP/437", "completion": "\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"}
{"task_id": "MBPP/440", "completion": "\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(adverb_pattern, text)\n    positions = [m.start() for m in re.finditer(adverb_pattern, text)]\n    return adverbs, positions\n\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n"}
{"task_id": "MBPP/443", "completion": "\n    list1.sort()\n    for i in list1:\n        if i < 0:\n            return i\n    return None\n"}
{"task_id": "MBPP/444", "completion": "\n    return test_list[:K] + test_list[-K:]\n"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    return sum(range(n+1))\n"}
{"task_id": "MBPP/449", "completion": "\n    if x1 == x2 == x3 or y1 == y2 == y3:\n        return False\n    if x1 == x2 or x1 == x3 or x2 == x3:\n        return False\n    if y1 == y2 or y1 == y3 or y2 == y3:\n        return False\n    return True"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    if len(lst) == 0:\n        return 0\n    else:\n        return min([len(i) for i in lst])\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n\n"}
{"task_id": "MBPP/460", "completion": "\n    return [item[0] for item in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    result = []\n    for i in range(1, len(list1) + 1):\n        for subset in itertools.combinations(list1, i):\n            result.append(list(subset))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n"}
{"task_id": "MBPP/464", "completion": "\n    return all(dict.values() == [n] * len(dict))\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n            (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    octal = 0\n    i = 1\n    while deciNum != 0:\n        rem = deciNum % 8\n        octal = octal + rem * i\n        deciNum = int(deciNum / 8)\n        i = i * 10\n    return octal\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product, arr[i], max_product * arr[i])\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    if k == 0:\n        return 0\n    if len(price) < 2:\n        return 0\n    if k >= len(price) // 2:\n        return sum(max(price[i + 1] - price[i], 0) for i in range(len(price) - 1))\n    dp = [[0] * (k + 1) for _ in range(len(price))]\n    for i in range(1, len(price)):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + max(price[i] - price[i - 1], 0))\n    return dp[-1][-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    # Unpack the tuple\n    a, b, c = test_tup\n\n    # Check if the sum of a and b is equal to c\n    if a + b == c:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/471", "completion": "\n    # initialize result\n    result = 1\n    # iterate over array\n    for i in range(len(arr)):\n        # multiply element with result\n        result = (result * arr[i]) % n\n    # return result\n    return result\n"}
{"task_id": "MBPP/472", "completion": "\n    if len(l) < 2:\n        return True\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i + 1] - l[i] != 1:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    return [i for i in test_list1 if i in test_list2]\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums) - min(nums) - max(nums)\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    str2 = str1\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1) + 1):\n            if str1[i:j].islower():\n                str2 = str2.replace(str1[i:j], '')\n    return str2\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the character with the maximum count\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n\n    return max_char\n\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]+'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    if x < 1:\n        return -1\n    else:\n        i = 1\n        while True:\n            if math.factorial(i) % x == 0:\n                return i\n            i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    for i in test_list1:\n        if i in test_list2:\n            test_list1.remove(i)\n    return test_list1\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    c = 1\n    for i in range(r):\n        c = c * (n - i) // (i + 1)\n    return c\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2\n\n"}
{"task_id": "MBPP/489", "completion": "\n    # find the largest value in the array\n    largest = max(arr)\n    # count the frequency of the largest value\n    frequency = arr.count(largest)\n    return frequency\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for tup in test_list:\n        if tup[0] == tup[1]:\n            result.append(tup)\n    return result\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx) ** 2 + (endy - starty) ** 2)\n\n    # Calculate the angle between the start and end points\n    angle = math.atan2(endy - starty, endx - startx)\n\n    # Calculate the coordinates of the center of the hexagon\n    centerx = startx + distance / 2 * math.cos(angle)\n    centery = starty + distance / 2 * math.sin(angle)\n\n    # Calculate the coordinates of the vertices of the hexagon\n    vertices = []\n    for i in range(6):\n        angle = math.radians(i * 60)\n        x = centerx + radius * math.cos(angle)\n        y = centery + radius * math.sin(angle)\n        vertices.append((x, y))\n\n    return vertices\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(map(str, test_tup)), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap\n\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return ngcd(x - y, y)\n    else:\n        return ngcd(x, y - x)\n"}
{"task_id": "MBPP/502", "completion": "\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*j == n*m:\n                return i, j\n    return None\n"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums)):\n        if i == 0:\n            result.append(nums[i])\n        else:\n            result.append(result[i-1] + nums[i])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    return sum(i**3 for i in range(1, n+1))\n"}
{"task_id": "MBPP/505", "completion": "\n    for i in range(len(A)):\n        if A[i] == 0:\n            A.append(A.pop(i))\n    return A\n\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    else:\n        return factorial(n) // factorial(n - k)\n"}
{"task_id": "MBPP/507", "completion": "\n    for word in removewords:\n        list1 = [i for i in list1 if i != word]\n    return list1\n"}
{"task_id": "MBPP/508", "completion": "\n    return [x for x in l1 if x in l2]\n"}
{"task_id": "MBPP/509", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]\n        return sum(odd_numbers) / len(odd_numbers)"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n\n"}
