{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1 and first_occurrence != last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return s\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Check if matrix is not empty\n    if not M:\n        return M\n\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # Create a new matrix to store the sorted rows\n    sorted_M = [[0]*cols for _ in range(rows)]\n\n    # Sort the rows of the matrix\n    for i in range(rows):\n        for j in range(cols):\n            sorted_M[i][j] = M[i][j]\n        sorted_M[i].sort()\n\n    return sorted_M\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input. Length, Breadth and Height should be positive.\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]', text)\n\ntext = \"Hello World\""}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([a-z]+)_+([a-z]+)', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), text)\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    list_str = [char for char in string]\n    return list_str\n"}
{"task_id": "MBPP/19", "completion": "\n    # Create a set from the array\n    num_set = set(arraynums)\n\n    # If the length of the set is not equal to the length of the array,\n    # then the array contains duplicate elements.\n    if len(num_set) != len(arraynums):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, m*n+1, m)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = -1\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/25", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the product of non-repeated elements\n    product = 1\n    for key, value in freq.items():\n        if value == 1:\n            product *= key\n\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return len(test_list) == K\n"}
{"task_id": "MBPP/27", "completion": "\n    new_list = [re.sub(r'\\d', '', i) for i in list]\n    return new_list\n"}
{"task_id": "MBPP/28", "completion": "\n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(k):\n            res = res * (n-i)\n            res = res // (i+1)\n        return res\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n    return res\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a heap queue with heapify function\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nsmallest(k, heap)\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end='')\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize missing number list\n    missing_numbers = []\n\n    # Generate list of expected numbers\n    expected_numbers = [i for i in range(ar[0], ar[-1]+1)]\n\n    # Check if any number is missing\n    for i in expected_numbers:\n        if i not in ar:\n            missing_numbers.append(i)\n\n    return missing_numbers\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer\"\n    else:\n        return n * (n + 1) * (2 * n + 1) // 6\n\n"}
{"task_id": "MBPP/36", "completion": "\n    def find_Nth_Digit_Util(p, q, N):\n        if p == q:\n            return str(p)\n        length = len(str(p))\n        range_val = (q - p) // length\n        rem = (q - p) % length\n        if N == 1:\n            return str(p + range_val)[-1]\n        elif N == length:\n            return str(p + range_val + 1)[-1]\n        else:\n            return find_Nth_Digit_Util(p + range_val + 1, q, N - length)\n\n    return find_Nth_Digit_Util(p, q, N)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    ints = []\n    strs = []\n\n    for i in mixed_list:\n        if isinstance(i, int):\n            ints.append(i)\n        elif isinstance(i, str):\n            strs.append(i)\n\n    ints.sort()\n    strs.sort()\n\n    return ints + strs\n\n"}
{"task_id": "MBPP/38", "completion": "\n    for i in list1:\n        if i % 2 == 0:\n            for j in list1:\n                if j % 2 != 0:\n                    return i / j\n    return \"No odd number found\"\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Get the values of the count\n    values = list(count.values())\n\n    # Count the number of characters that appear more than once\n    num_repeats = sum(v // 2 for v in values)\n\n    # Count the number of characters that appear an odd number of times\n    num_odd = sum(v % 2 for v in values)\n\n    # If there are more than one character that appears an odd number of times,\n    # it's impossible to rearrange the string so return False\n    if num_odd > 1:\n        return False\n\n    # If there are no characters that appear an odd number of times,\n    # it's possible to rearrange the string so return True\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    freq_dict = Counter(nums)\n    return freq_dict\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty dictionary\n    dict_ = {}\n    for i in range(n):\n        if arr[i] in dict_:\n            dict_[arr[i]] += 1\n        else:\n            dict_[arr[i]] = 1\n\n    # Find the sum of repeated elements\n    sum_ = 0\n    for key, value in dict_.items():\n        if value > 1:\n            sum_ += key * value\n    return sum_\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^[A-Za-z0-9_]+\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = A % 10\n    last_digit_B = B % 10\n\n    return last_digit_A * last_digit_B\n"}
{"task_id": "MBPP/48", "completion": "\n    # Convert the number to binary and count the number of 1's in the odd positioned bits.\n    # If the count is odd, return the number.\n    return n & (n << 1)\n"}
{"task_id": "MBPP/49", "completion": "\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                return nums[i][j]\n    return None\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return my_list\n\n    max_value = max(my_list)\n    count = [0] * (max_value + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/56", "completion": "\n\n    return n - 2 * rev(n)\n"}
{"task_id": "MBPP/57", "completion": "\n    # Convert list to string\n    arr = list(map(str, arr))\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Join the array elements to form a string\n    max_num = ''.join(arr)\n    # Return the result\n    return int(max_num)\n"}
{"task_id": "MBPP/58", "completion": "\n    if x < 0 and y > 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 0\n    min_val = arr[1] - arr[0]\n    max_diff = min_val\n    for i in range(2, n):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n        if arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n        if arr[i - 1] < min_val:\n            min_val = arr[i - 1]\n    return max_diff\n"}
{"task_id": "MBPP/61", "completion": "\n    count_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(x) for x in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"Invalid input. List should have at least two elements.\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    return len([i for i in list if i > 0])\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        for j in range(i):\n            bell[i] += bell[j]\n\n    return bell[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]) == k:\n                result.append((Input[i], Input[j]))\n    return result\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(gap // 2, 1)\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    else:\n        return n*n - dif_Square(n-1)\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [\",\", \" \", \".\", \":\", \";\", \"!\"]\n    for delimiter in delimiters:\n        text = re.sub(delimiter, \" \", text)\n    return text.split()\n"}
{"task_id": "MBPP/74", "completion": "\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K == test_list[j][0] % K:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/77", "completion": "\n    sum_even = 0\n    sum_odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_even - sum_odd\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"}
{"task_id": "MBPP/80", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n * (n - 1) * (n - 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return zip(test_tup1, test_tup2)\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return chr(sum_char)\n"}
{"task_id": "MBPP/84", "completion": "\n    sequence = [0, 1]\n    if n == 1:\n        return sequence[0]\n    elif n == 2:\n        return sequence[1]\n    else:\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (9 * n - 7) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert N to string\n    N = str(N)\n    # find the length of the string\n    length = len(N)\n    # if the length is 1, return the number itself\n    if length == 1:\n        return N\n    # else, find the first pair of two numbers that are different\n    for i in range(length - 1):\n        if N[i] < N[i + 1]:\n            # if the first number is smaller, return the first number\n            return N[:i + 1]\n    # if no such pair is found, return the last number\n    return N[:-1]\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(list1, key=len)\n\nlist1 = [\"Python\", \"Programming\", \"Coding\"]"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    if n < 1:\n        return False\n    else:\n        return n % 2 == 0\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return [(i, v) for i, v in enumerate(test_list) if v == min(test_list)]\n\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    return numbers[0] * len(numbers)\n\nnumbers = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/99", "completion": "\n    return bin(n).replace(\"0b\", \"\")\n\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num + 1\n\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    word = re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/103", "completion": "\n    # Your code here\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'x' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            smallest = heapq.heappop(num1)\n            if smallest == heapq.heappop(num2):\n                heapq.heappush(merged_list, smallest)\n                heapq.heappush(num2, heapq.heappop(num2))\n            elif smallest > heapq.heappop(num2):\n                heapq.heappush(merged_list, smallest)\n                heapq.heappush(num2, heapq.heappop(num2))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(num2))\n                heapq.heappush(num2, smallest)\n\n        elif num1 and num3:\n            smallest = heapq.heappop(num1)\n            if smallest < heapq.heappop(num3):\n                heapq.heappush(merged_list, smallest)\n                heapq.heappush(num1, heapq.heappop(num1))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(num3))\n                heapq.heappush(num1, smallest)\n\n        elif num2 and num3:\n            smallest = heapq.heappop(num2)\n            if smallest < heapq.heappop(num3):\n                heapq.heappush(merged_list, smallest)\n                heapq.heappush(num2, heapq.heappop(num2))\n            else:\n                heapq.heappush(merged_list, heapq.heappop(num3))\n                heapq.heappush(num2, smallest)\n\n        else:\n            if num1:\n                heapq.heappush(merged_list, heapq.heappop(num1))\n            if num2:\n                heapq"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[i+1] == '0':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_list = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))\n\n\nnested_list = [[1, 2, 3], [2, 3, 4], [2, 4, 5], [3, 4, 6]]"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    perimeter = 2 * (22/7) * radius * (radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\ntest_list = [(1, 2, 3, 4), (5, 6, 7, 8), (1, 2, 3, 4), (5, 6, 7, 8)]"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list]\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If mid is even, then it means the element is in the first half\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        # If mid is odd, then it means the element is in the second half\n        else:\n            if arr[mid] == arr[mid + 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n    return arr[left]\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    max_tuple = None\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i], list1[j])\n    return max_product, max_tuple\n\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is\", sum)\n    if count == 0:\n        print(\"No such triplet found\")\n"}
{"task_id": "MBPP/122", "completion": "\n    if n > MAX:\n        return \"Number is too large\"\n    else:\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b = 0, 1\n            for i in range(2, n):\n                a, b = b, a + b\n            return b\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(divisors(n))\n\n    def divisors(n):\n        result = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result.add(i)\n                result.add(n // i)\n        return result\n\n    result = []\n    for n in range(1, limit + 1):\n        if d(n) > n and d(d(n)) == n:\n            result.append(n)\n    return sum(result)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize result\n    res = 0\n\n    # Count the number of 0s and 1s in the given string\n    count_0 = string.count('0')\n    count_1 = string.count('1')\n\n    # If there are more 1s than 0s, return the length of the string\n    if count_1 > count_0:\n        return len(string)\n\n    # If there are no 1s, return 0\n    if count_1 == 0:\n        return 0\n\n    # Initialize two variables to keep track of the number of 0s and 1s\n    curr_count_0 = count_0\n    curr_count_1 = 0\n\n    # Initialize a variable to keep track of the maximum difference\n    max_diff = 0\n\n    # Iterate over the string\n    for i in range(len(string)):\n        # If the current character is a 0\n        if string[i] == '0':\n            # Decrease the count of 0s\n            curr_count_0 -= 1\n        else:\n            # Increase the count of 1s\n            curr_count_1 += 1\n\n        # If the current count of 1s is greater than the current count of 0s\n        if curr_count_1 > curr_count_0:\n            # Update the maximum difference\n            max_diff = max(max_diff, curr_count_1 - curr_count_0)\n\n    # Return the maximum difference\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n\n        Write python function to find common divisors of two numbers.\n        \"\"\"\n        return [i for i in range(1, n1 + 1) if n1 % i == 0 and n2 % i == 0]\n\n    return sum(common_divisors(a, b))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n\n        function to check if matrix is magic square\n        \"\"\"\n        def sum_row(row):\n            \"\"\"\n            function to calculate sum of row\n            \"\"\"\n            return sum(row)\n\n        def sum_col(matrix, col):\n            \"\"\"\n            function to calculate sum of column\n            \"\"\"\n            return sum(matrix[i][col] for i in range(len(matrix)))\n\n        def sum_diag(matrix):\n            \"\"\"\n            function to calculate sum of diagonal\n            \"\"\"\n            return sum(matrix[i][i] for i in range(len(matrix)))\n\n        def sum_anti_diag(matrix):\n            \"\"\"\n            function to calculate sum of anti diagonal\n            \"\"\"\n            return sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n\n        if len(matrix) == 0 or len(matrix) != len(set(sum_row(row) for row in matrix)):\n            return False\n\n        for col in range(len(matrix)):\n            if sum_col(matrix, col) != sum_row(matrix[0]):\n                return False\n\n        if sum_diag(matrix) != sum_anti_diag(matrix) != sum_row(matrix[0]):\n            return False\n\n        return True\n\n    if is_magic_square(my_matrix):\n        return \"This is a magic square\"\n    else:\n        return \"This is not a magic square\"\n\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the numbers with maximum frequency\n    max_freq_nums = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    return max_freq_nums\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        if arr[n-1] % 2 == 0:\n            print(\"Last element of the array is even\")\n        else:\n            print(\"Last element of the array is odd\")\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*10**(n-1) + 1)\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for i in test_list:\n        if type(i) == tuple:\n            for j in i:\n                if j not in result:\n                    result.append(j)\n        else:\n            if i not in result:\n                result.append(i)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        flip(nums, max_index+1)\n        flip(nums, i+1)\n\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    lists = []\n    for i in Input:\n        if isinstance(i, list):\n            lists.append(i)\n    return lists\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    res = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            res = min(res, abs(arr[i] - arr[j]))\n    return res\n"}
{"task_id": "MBPP/145", "completion": "\n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_diff\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    if m == 0:\n        return tri[0][0]\n\n    for i in range(1, m):\n        tri[i][0] += tri[i-1][0]\n        tri[i][-1] += tri[i-1][-1]\n        for j in range(1, i):\n            tri[i][j] += max(tri[i-1][j-1], tri[i-1][j])\n\n    return max(tri[-1])\n\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n"}
{"task_id": "MBPP/149", "completion": "\n    if not arr or n <= 0:\n        return 0\n\n    count = 1\n    max_count = 1\n    for i in range(1, n):\n        if (arr[i] - arr[i - 1] == 1):\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    return max(max_count, count)\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left_half = merge_sort(x[:mid])\n    right_half = merge_sort(x[mid:])\n    return merge(left_half, right_half)\n"}
{"task_id": "MBPP/153", "completion": "\n    import math\n\n    # calculate the discriminant\n    D = b**2 - 3*a*c\n\n    # check if discriminant is positive\n    if D >= 0:\n        x1 = (-b - math.sqrt(D)) / (2*a)\n        x2 = (-b + math.sqrt(D)) / (2*a)\n        return x1, x2\n    else:\n        return \"No real roots\"\n"}
{"task_id": "MBPP/154", "completion": "\n    if N > len(nums):\n        return \"Element not found\"\n    else:\n        return nums[N-1][N-1]\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    result = \"\"\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '0':\n                result += '1'\n            else:\n                result += '0'\n        else:\n            result += binary[i]\n    return int(result, 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g)) if k is not None else None) for k, g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n-1):\n        ans = min(ans, abs(arr[i]-arr[i+1]))\n    return ans\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 12 or month == 1 or month == 2):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"Number of days:\", days, \"--> Seasonal: Spring\")\n    elif (days >= 32 and days <= 59):\n        print(\"Number of days:\", days, \"--> Seasonal: Summer\")\n    elif (days >= 60 and days <= 90):\n        print(\"Number of days:\", days, \"--> Seasonal: Autumn\")\n    elif (days >= 91 and days <= 120):\n        print(\"Number of days:\", days, \"--> Seasonal: Winter\")\n    else:\n        print(\"Number of days:\", days, \"--> Not a seasonal day\")\n"}
{"task_id": "MBPP/160", "completion": "\n    for x in range(0, n+1):\n        if (a*x) % b == n:\n            return x, (n - (a*x)) // b\n    return -1, -1\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum\n\n"}
{"task_id": "MBPP/163", "completion": "\n    if s < 0 or l < 0:\n        return \"Error: side and length must be positive\"\n    else:\n        return (s * l) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n"}
{"task_id": "MBPP/165", "completion": "\n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]].append(i)\n        else:\n            count_dict[str1[i]] = [i]\n    return count_dict\n\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    if n and not (n & (n - 1)):\n        return n\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    return s.count('std')\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for i in l:\n        d.setdefault(i[0], []).append(i[1])\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_num = L\n    for i in range(L + 1, R + 1):\n        lcm_num = lcm(lcm_num, i)\n\n    return lcm_num\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n"}
{"task_id": "MBPP/179", "completion": "\n    if x.is_integer():\n        return x % 2 == 0\n    else:\n        return False\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1[:min_len]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'\\d', string)\n\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values\n\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (arr[j] - arr[i] == k):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    import math\n\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        x1 = (-b - math.sqrt(D)) / (2*a)\n        x2 = (-b + math.sqrt(D)) / (2*a)\n        return x1, x2\n    else:\n        return \"The parabola has no real roots\"\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Pattern {pattern} found in text.\")\n        else:\n            print(f\"Pattern {pattern} not found in text.\")\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if (n//i)**0.5 == int((n//i)**0.5):\n                    return True\n        return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # create a boolean array of size n+1 and initialize all elements as false\n    # arr[0] will become true if the number is positive and one missing number is found\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n    # arr[i] will be true if the number i is present in the array\n    # arr[i] will be false if the number i is not present in the array\n    # arr[0] will be false if the number 1 is present in the array\n   "}
{"task_id": "MBPP/190", "completion": "\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if len(str) > 1:\n        if str.isalpha() and str.isdigit() == False:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n"}
{"task_id": "MBPP/195", "completion": "\n    l = 0\n    r = n - 1\n    res = -1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            res = mid\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return res\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    def exponentiation(base, exponent):\n        return base ** exponent\n\n    result = []\n    for tup in (test_tup1, test_tup2):\n        for num in tup:\n            result.append(exponentiation(num[0], num[1]))\n    return result\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major axis of the ellipse\n    semi_major_axis = math.sqrt(a**2 / math.pi)\n\n    # Calculate the semi-minor axis of the ellipse\n    semi_minor_axis = math.sqrt(b**2 / math.pi)\n\n    # Calculate the area of the triangle\n    area = 0.5 * a * b\n\n    # Calculate the hypotenuse of the triangle\n    hypotenuse = math.sqrt(semi_major_axis**2 + semi_minor_axis**2)\n\n    # Calculate the area of the triangle\n    triangle_area = 0.5 * semi_major_axis * semi_minor_axis\n\n    # Calculate the area of the largest triangle that can be inscribed in the ellipse\n    largest_triangle_area = area - triangle_area\n\n    return largest_triangle_area\n"}
{"task_id": "MBPP/199", "completion": "\n    if n and not (n & (n - 1)):\n        return n\n    else:\n        return highest_Power_of_2(n & (n - 1))\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join(ch for ch in str1 if ch % 2 != 0)\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x1 = bin(n1)[2:]\n    x2 = bin(n2)[2:]\n    return sum(el1 != el2 for el1, el2 in zip(x1, x2))\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n\n"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(i) + str(j) for i, j in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    longest = 0\n    for l in range(1, n):\n        for i in range(n-l):\n            j = i + l\n            if str[i] == str[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n                if dp[i][j] > longest:\n                    longest = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return longest\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile('[^a-zA-Z0-9]')\n    if pattern.search(string):\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Convert the numbers to binary\n    A_bin = bin(A)[2:]\n    B_bin = bin(B)[2:]\n\n    # Calculate the length of the binary representation\n    len_A = len(A_bin)\n    len_B = len(B_bin)\n\n    # Calculate the difference in length\n    diff = abs(len_A - len_B)\n\n    # Calculate the number of operations\n    operations = diff // 2\n\n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    if K > len(test_tup):\n        return \"K is greater than the length of the tuple\"\n    else:\n        return sorted(test_tup)[:K]\n"}
{"task_id": "MBPP/220", "completion": "\n    # Replace maximum n occurrences spaces, commas, dots and colon\n    text = re.sub(r'\\s{1,%d}' % n, ' ', text)\n    text = re.sub(r',', ' ', text)\n    text = re.sub(r'\\.', ' ', text)\n    text = re.sub(r':', ' ', text)\n\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    return True\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    majority_element = -1\n\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n        else:\n            if (count > n / 2):\n                majority_element = x\n            count = 1\n\n    if (count > 0 and count > n / 2):\n        majority_element = x\n\n    if (majority_element != -1):\n        print(\"Majority Element is\", majority_element)\n    else:\n        print(\"No majority element\")\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 != 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i) == bin(i).zfill(n.bit_length()):\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    return positive + negative\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    if n == 1:\n        return tri[0]\n    else:\n        return max(max_sum(tri[:-1], n - 1), tri[-1] + max_sum(tri[:-1], n - 1))\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    count = binary.count('1')\n    return 2 ** count\n"}
{"task_id": "MBPP/236", "completion": "\n    # If N is less than 3, return 0\n    if N < 3:\n        return 0\n\n    # If N is 3, return 1\n    if N == 3:\n        return 1\n\n    # If N is greater than 3, return N/2\n    if N > 3:\n        return N//2\n"}
{"task_id": "MBPP/237", "completion": "\n    # Create a Counter object\n    counter = Counter(test_list)\n\n    # Get the most common element\n    most_common_element = counter.most_common(1)\n\n    # Check if the most common element is repeated\n    if most_common_element[0][1] > 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = 0\n        for j in range(i - 1, max(i - m, -1) - 1, -1):\n            dp[i] += dp[j]\n    return dp[n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    if len(list1) != len(list2):\n        return \"Error: Lists are not the same length\"\n    else:\n        list1[-1] = list2[-1]\n        return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Sort the list based on the count of the first element\n    lst.sort(key=lambda x: count_dict[x[0]])\n\n    return lst\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return -1\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum variables\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Iterate over the array\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    return number ** 0.5\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = number\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n        result.append((x, y))\n    return result\n\nnumbers = [(5, 0.78), (3, 1.3), (2, 4)]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[ae]\\w*\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog\""}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n\ncolors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    print(\"Before swapping: a =\", a, \"and b =\", b)\n    a, b = b, a\n    print(\"After swapping: a =\", a, \"and b =\", b)\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p > 0 for p in primes[:int(i ** 0.5) + 1]):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(el1/el2 for el1, el2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n"}
{"task_id": "MBPP/262", "completion": "\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    # Calculate dog's age in human years\n    dog_age_in_human_years = h_age * 7\n\n    # Calculate dog's age in dog years\n    dog_age_in_dog_years = dog_age_in_human_years / 7\n\n    return dog_age_in_dog_years\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares\n"}
{"task_id": "MBPP/268", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + find_star_num(n-1)\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "MBPP/271", "completion": "\n    sum_result = 0\n    for i in range(1, n+1):\n        sum_result += i**5\n    return sum_result\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    sum_even_coeff = 0\n    for i in range(0, n+1, 2):\n        sum_even_coeff += math.comb(n, i)\n    return sum_even_coeff\n\nn = int(input(\"Enter the value of n: \"))"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return (a[n-1] + m*a[n-2]) % m\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += i.count(test_tup[0])\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n"}
{"task_id": "MBPP/283", "completion": "\n    # convert the number to string\n    n = str(n)\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate over each digit in the number\n    for digit in n:\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq[digit] = 1\n\n    # return the frequency dictionary\n    return freq\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'ab{2,3}b'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    max_sum = -1\n\n    # Get sum of first window of size n\n    window_sum = sum(a[0:n])\n\n    # Initialize maximum sum as window_sum\n    max_sum = window_sum\n\n    # Subtract first element of previous window and add next element of current window\n    for i in range(1, k):\n        window_sum = window_sum - a[i-1] + a[i+(i*n)-1]\n        max_sum = max(max_sum, window_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    return sum(i**2 for i in range(1, n+1))\n"}
{"task_id": "MBPP/288", "completion": "\n    # Initialize result\n    res = 1\n\n    # Traverse through all array elements\n    for i in range(0, N):\n\n        # If element is not divisible by p\n        if (arr[i] % P):\n\n            # Update result\n            res = (res * arr[i]) % P\n\n    return res\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 1\n            else:\n                return 2\n        else:\n            return 1\n    else:\n        return 2\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length_list = max(list1, key=len)\n    return max_length_list\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * n\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n):\n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n\n    return dp[n - 1]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        return n / m\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a default dictionary\n    d = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for t in stdata:\n        # Add the first element of the tuple to the dictionary\n        d[t[0]] += t[1]\n\n    # Return the maximum aggregate\n    return max(d.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** n\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return max(sum((dict_depth(v) for v in d.values()), [0]) + [1])\n    return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    if n & (n - 1) == 0:\n        return n & -n\n    else:\n        return -1\n"}
{"task_id": "MBPP/303", "completion": "\n    # Initialize count as 0\n    count = 0\n\n    # Traverse through the array\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            # If a[i] > a[j] then count is incremented\n            if a[i] > a[j]:\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Check if the new index is within the given ranges\n    if ranges[0] <= new_index <= ranges[1]:\n        return arr[new_index]\n    else:\n        return None\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n\n    for l in range(1, n):\n        for i in range(n - l):\n            j = i + l\n            dp[i][j] = max(a[i] + min(dp[i + 1][j], dp[i][j - 1]), dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]\n\n"}
{"task_id": "MBPP/307", "completion": "\n    if m > n:\n        return tuplex[m:n]\n    else:\n        return tuplex[m:n+1]\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    nums1.reverse()\n    nums2.reverse()\n\n    max_product = -1\n    for i in range(N):\n        max_product = max(max_product, nums1[i]*nums2[i])\n\n    return max_product\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n & (~(n-1))\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp2 = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    max_sum = dp[0][0]\n\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j] + grid[i][j]\n            if j > 0:\n                dp2[i][j] = max(dp2[i-1][j-1], dp[i-1][j]) + grid[i][j]\n            else:\n                dp2[i][j] = dp[i-1][j] + grid[i][j]\n            max_sum = max(max_sum, dp2[i][j])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if even_words:\n        return max(even_words, key=len)\n    else:\n        return \"No even length word found\"\n\n\nstr = \"Write a python function to find the first maximum length even word\""}
{"task_id": "MBPP/316", "completion": "\n    n = len(A)\n    for i in range(n-1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s = sorted(s)\n    return max(s[0]*s[1]*s[2], s[0]*s[3]*s[4], s[1]*s[2]*s[5], s[0]*s[3]*s[5])\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5,}\\b'\n    return re.findall(pattern, text)\n\ntext = \"Hello, I am a long word. I am also a short word. And this is a medium-length word.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_squares - sum_of_numbers ** 2\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/321", "completion": "\n    demlo_numbers = []\n    for i in range(1, len(s)):\n        if s[i] == '0' and s[i-1] == '1':\n            demlo_numbers.append(i)\n    return demlo_numbers\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_pos = [i for i, x in enumerate(list1) if x == min_val]\n    return min_pos\n"}
{"task_id": "MBPP/323", "completion": "\n    if n == 1:\n        return arr\n\n    if n == 2:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        return arr\n\n    if n > 2:\n        for i in range(n - 1, 1, -1):\n            if i % 2 == 0:\n                arr[out_of_place], arr[i] = arr[i], arr[out_of_place]\n                out_of_place += 1\n            cur += 1\n        return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    dp = [0] + [float('inf')]*n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            dp[i] = min(dp[i], dp[i-j]+1)\n    return dp[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    for word in test_list:\n        word_count[word] += 1\n\n    max_count = max(word_count.values())\n    return [k for k, v in word_count.items() if v == max_count]\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return \"The triangle is isosceles\"\n    else:\n        return \"The triangle is not isosceles\"\n"}
{"task_id": "MBPP/328", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,4}\\b'\n    return re.findall(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    word_boundary = r'\\b'\n    end_of_string = r'[.?!]'\n    pattern = re.compile(word_boundary + '.*' + end_of_string)\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[-(i+1)]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # Find the maximum occurring divisor\n    divisor = max(set(x) & set(y))\n    return divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return \"List should have at least 3 numbers\"\n    lst.sort()\n    return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n"}
{"task_id": "MBPP/342", "completion": "\n    heap = []\n    for i, arr in enumerate(list):\n        heappush(heap, Node(arr[0], i, 0))\n        arr.pop(0)\n\n    start, end = 0, float('inf')\n    min_diff = float('inf')\n    while heap:\n        node = heappop(heap)\n        if node.value > start:\n            start = node.value\n        if node.value >= end:\n            end = node.value\n            min_diff = min(min_diff, end - start)\n        if node.index + 1 < len(list[node.list_num]):\n            next_val = list[node.list_num][node.index + 1]\n            heappush(heap, Node(next_val, node.list_num, node.index + 1))\n            list[node.list_num].pop(node.index + 1)\n\n    return min_diff\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = \"0123456789\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    digits_count = 0\n    letters_count = 0\n    for i in s:\n        if i in digits:\n            digits_count += 1\n        elif i in letters:\n            letters_count += 1\n    return digits_count, letters_count\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    diffs = [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n    return diffs\n"}
{"task_id": "MBPP/346", "completion": "\n    if n % (2 * k) < k:\n        return n % (2 * k)\n    else:\n        return 2 * k - n % (2 * k)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    elif n == 0 or r == 0:\n        return 0\n    else:\n        return bin_coff(n-1, r-1) + bin_coff(n-1, r)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if set(string) == {'0', '1'}:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/350", "completion": "\n    stack = []\n    for char in s:\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n    return ''.join(stack)\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    return list1[:n] + list1[n+1:]\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return tn_ap(a, n-1, d) + d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    # calculate the number of rectangles in a circle\n    rectangles = math.pi * (radius ** 2)\n\n    return rectangles\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - (a + b)\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return [(i, j) for i, j in zip(nums1, nums2)]\n\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [6, 7, 8, 9, 10]\n"}
{"task_id": "MBPP/359", "completion": "\n    import cmath\n\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # find two solutions\n    sol1 = (-b-cmath.sqrt(D))/(2*a)\n    sol2 = (-b+cmath.sqrt(D))/(2*a)\n\n    # check if any of the solutions is a real number\n    if isinstance(sol1, complex) or isinstance(sol2, complex):\n        return \"One root of the equation is a complex number.\"\n    else:\n        return \"One root of the equation is a real number.\"\n"}
{"task_id": "MBPP/360", "completion": "\n    if n<=0:\n        return \"Input should be a positive integer\"\n    elif n==1:\n        return 1\n    else:\n        return n + get_carol(n-1)\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    return max(list(count.values()))\n"}
{"task_id": "MBPP/363", "completion": "\n    return [tuple(i + K for i in t) for t in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(len(ch)):\n        if i % 2 == 0:\n            if ch[i] == '0':\n                flip_count += 1\n        else:\n            if ch[i] == '1':\n                flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    max_product_pair = (list_nums[0], list_nums[1])\n\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_pair = (list_nums[i], list_nums[i + 1])\n\n    return max_product_pair\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=float)\n\n"}
{"task_id": "MBPP/371", "completion": "\n    A.sort()\n    A = list(set(A))\n    A.sort()\n\n    if len(A) == 0:\n        return 1\n\n    if A[0] != 1:\n        return 1\n\n    for i in range(len(A) - 1):\n        if A[i + 1] - A[i] > 1:\n            return A[i] + 1\n\n    return A[-1] + 1\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        first = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(first + p)\n    return perms\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    # Create a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # Convert the set back to a tuple\n    unique_tup = tuple(unique_set)\n\n    return unique_tup\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        return test_list[1:] + [test_list[0]]\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0]*colnum for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def is_rotated(A, mid):\n        return A[mid] < A[mid + 1]\n\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if is_rotated(A, mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n"}
{"task_id": "MBPP/383", "completion": "\n    # Convert the number to binary and toggle odd bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_perrin(n - 1) + 1\n\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    swap_count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swap_count += 1\n    return swap_count + len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power - 1\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = [2, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    list.insert(0, string)\n    return list\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1 in l1:\n        for d2 in l2:\n            for d3 in l3:\n                result.append({**d1, **d2, **d3})\n    return result\n\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [sum_of_digits(num) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n or r < 0:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # convert number to list of digits\n    digits = [int(d) for d in str(n)]\n    # find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # if no such pair found, it means the number is already in descending order\n    if i == -1:\n        return None\n    # find the second digit in the pair that is bigger than the first digit\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    # swap the first and second digit\n    digits[i], digits[j-1] = digits[j-1], digits[i]\n    # reverse the digits after the first digit\n    digits[i+1:] = reversed(digits[i+1:])\n    # convert list of digits to number\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2:\n        return []\n\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                pairs.append((num1, num2))\n            else:\n                break\n\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    word = re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n < 10:\n        return n\n    else:\n        return max(n%10 + breakSum(n//10), n%10 + breakSum(n//10) + n%10)\n"}
{"task_id": "MBPP/417", "completion": "\n    def find_common_first_element(tuples):\n        common_first_element = tuples[0][0]\n        for tup in tuples:\n            if tup[0] != common_first_element:\n                return None\n        return common_first_element\n\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if find_common_first_element(Input[i:j+1]) is not None:\n                result.append(Input[i:j+1])\n    return result\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                max_length = len(lst[j])\n            elif len(lst[i]) == len(lst[j]) and lst[i] > lst[j]:\n                max_length = len(lst[i])\n    return max_length\n\n"}
{"task_id": "MBPP/419", "completion": "\n    return sum(round(num) for num in list1) * len(list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if gold[m][n] != -1:\n        return gold[m][n]\n    right = get_maxgold(gold, m, n-1)\n    down = get_maxgold(gold, m-1, n)\n    left = get_maxgold(gold, m, n+1)\n    up = get_maxgold(gold, m+1, n)\n    gold[m][n] = gold[m][n] + max(right, down, left, up)\n    return gold[m][n]\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    match = re.search(r'\\b(?P<day>\\d{2})-(?P<month>\\d{2})-(?P<year>\\d{4})\\b', dt)\n    if match:\n        return match.group('day') + '-' + match.group('month') + '-' + match.group('year')\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n\n            temp = my_list[i]\n\n            j = i\n            while  j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n    else:\n        return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/430", "completion": "\n    import math\n\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    if D < 0:\n        print(\"No real solutions\")\n    elif D == 0:\n        x = -b / (2*a)\n        print(f\"The directrix is at x = {x}\")\n    else:\n        x1 = (-b + math.sqrt(D)) / (2*a)\n        x2 = (-b - math.sqrt(D)) / (2*a)\n        print(f\"The directrix is at x = {x1} and x = {x2}\")\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    # calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    return area\n"}
{"task_id": "MBPP/433", "completion": "\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = re.compile(r'a+b')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([i for i in str1 if i.isdigit()])\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = r\"\\badvcl\\b\"\n    matches = re.finditer(pattern, text)\n    positions = [match.start() for match in matches]\n    return positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = list1[0]\n    for num in list1:\n        if num < largest_neg:\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return [tuple(i[0:K]) for i in test_list]\n"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_lst = list(tup)\n    lst_count = Counter(lst)\n    tup_count = Counter(tup_lst)\n    result = {key: tup_count[key] + lst_count[key] for key in tup_count if key in lst_count}\n    return result\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))\n\n    # check if the area is zero, if yes then the triangle is not valid\n    if area == 0:\n        return \"The points do not form a triangle\"\n    else:\n        return \"The points form a valid triangle\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [s[l:len(s)] for s in str]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(' ', '', text1)\n\ntext1 = \"This is a test string\""}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return None\n    else:\n        return actual_cost - sale_amount\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n            if n // i != i and (n // i) % 2 == 0:\n                sum = sum + n // i\n    return sum\n"}
{"task_id": "MBPP/454", "completion": "\n    word_list = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return word_list\n\ntext = \"Hello, my name is John Doe and I live in New York. I like to play football in the park.\""}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    return sum(1 for c in str if c.isupper())\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for c in combinations_list(remaining):\n                result.append([m] + c)\n        return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = current_max = current_min = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max, current_min = current_min, current_max\n\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n\n        max_product = max(max_product, current_max)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return \"0\"\n\n    octalNum = \"\"\n\n    while deciNum != 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n\n    return octalNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], temp * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n    profit = [0]*n\n    max_price = price[n-1]\n    for i in range(n-2, -1, -1):\n        max_price = max(max_price, price[i])\n        profit[i] = max(profit[i+1], max_price - price[i])\n    min_price = price[0]\n    for i in range(1, n):\n        min_price = min(min_price, price[i])\n        profit[i] = max(profit[i-1], profit[i] + (price[i] - min_price))\n    return profit[n-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return [a + b for a, b in test_tup]\n"}
{"task_id": "MBPP/471", "completion": "\n    result = []\n    for i in range(lens):\n        result.append(arr[i] % n)\n    return result\n\n"}
{"task_id": "MBPP/472", "completion": "\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False\n"}
{"task_id": "MBPP/473", "completion": "\n    return tuple(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (max_count < count[ord(i)]):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n\nstr1 = \"test\""}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+[a-z]+')\n    return pattern.findall(text)\n\ntext = \"Hello World123\""}
{"task_id": "MBPP/483", "completion": "\n    if x < 1:\n        return \"Input should be a natural number greater than 0\"\n    else:\n        factorial = 1\n        for i in range(1, x + 1):\n            factorial *= i\n        return factorial\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    max_palindrome = -1\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            product = i * j\n            if product > max_palindrome and is_palindrome(product):\n                max_palindrome = product\n    return max_palindrome\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n or r < 0:\n        return 0\n    else:\n        return fact(n) / (fact(r) * fact(n - r))\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5*(5+2*math.sqrt(5)))*a**2)/4\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx**2 + dy**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between each side\n    angle = math.pi / 3\n\n    # Calculate the coordinates\n    points = []\n    for i in range(sides + 1):\n        x = startx + dx * (1 - i / sides)\n        y = starty + dy * (1 - i / sides)\n        r = radius * (1 - i / sides)\n        x1 = x * math.cos(angle * i) - y * math.sin(angle * i)\n        y1 = x * math.sin(angle * i) + y * math.cos(angle * i)\n        x2 = x * math.cos(angle * (i + 1)) - y * math.sin(angle * (i + 1))\n        y2 = x * math.sin(angle * (i + 1)) + y * math.cos(angle * (i + 1))\n        points.append((x1 + r * math.cos(math.pi / 3), y1 + r * math.sin(math.pi / 3)))\n        points.append((x2 + r * math.cos(math.pi / 3), y2 + r * math.sin(math.pi / 3)))\n\n    return points\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(str(test_tup), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    if n > len(nums):\n        return \"Invalid operation\"\n\n    return hq.nsmallest(n, nums)\n"}
{"task_id": "MBPP/497", "completion": "\n    # surface area of cone = 1/3 * pi * r^2 * h\n    return 1/3 * math.pi * r**2 * h\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    import math\n    diameter = 2 * r\n    return diameter\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Initialize two pointers, one at the start of the array and the other at the end.\n    start = 0\n    end = len(A) - 1\n\n    # Traverse the array.\n    while start < end:\n        # If the current element is not zero, move it to the start.\n        if A[start] != 0:\n            start += 1\n        # If the current element is zero, move it to the end.\n        elif A[end] == 0:\n            end -= 1\n        # If the current element is zero and the next element is also zero, move both pointers.\n        else:\n            A[start], A[end] = A[end], A[start]\n            start += 1\n            end -= 1\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    else:\n        return factorial(n) / (factorial(k) * factorial(n - k))\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n"}
