{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence != -1 and last_occurrence != -1 and first_occurrence != last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return s\n"}
{"task_id": "MBPP/12", "completion": "\n    M_sorted = sorted(M, key=sum)\n    return M_sorted\n\n"}
{"task_id": "MBPP/13", "completion": "\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Find the common words\n    common_words = {word: count for word, count in word_counts.items() if count > 1}\n\n    return common_words\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([a-z]+)_', lambda m: m.group(1).lower(), text)\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    list_str = [0]*NO_OF_CHARS\n    for i in string:\n        list_str[ord(i)]+=1\n    return list_str\n"}
{"task_id": "MBPP/19", "completion": "\n    # Create a set from the array\n    num_set = set(arraynums)\n\n    # If the length of the set is less than the length of the array,\n    # then the array contains duplicate elements\n    if len(num_set) < len(arraynums):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, n*10, n)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if sum(list1[i]) + sum(list1[j]) > max_sum:\n                max_sum = sum(list1[i]) + sum(list1[j])\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/25", "completion": "\n    # Initialize result\n    result = 1\n\n    # Traverse the array\n    for i in range(n):\n        # Multiply result with arr[i]\n        result *= arr[i]\n\n    return result\n"}
{"task_id": "MBPP/26", "completion": "\n    if len(test_list) == K:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(k):\n            res = res * (n-i)\n            res = res // (i+1)\n        return res\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n    return res\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a heap queue with heapify\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    # Pop k elements from heap\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap))\n\n    return res\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')\n"}
{"task_id": "MBPP/34", "completion": "\n    # initialize the missing number list\n    missing = []\n\n    # initialize the expected sum of first N natural numbers\n    expected_sum = N * (N + 1) // 2\n\n    # calculate the actual sum of the array\n    actual_sum = sum(ar)\n\n    # calculate the missing number\n    missing_number = expected_sum - actual_sum\n\n    # add the missing number to the list\n    missing.append(missing_number)\n\n    return missing\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    else:\n        return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/36", "completion": "\n    def find_Nth_Digit_Util(p, q, N):\n        if p == q:\n            return str(p)\n        length = len(str(p))\n        range_val = (q - p) // length\n        remainder = (q - p) % length\n        if N == 1:\n            return str(p + range_val)[-1]\n        elif N == length:\n            return str(p + range_val)[-1]\n        else:\n            return str(p + range_val + 1)[remainder - 1]\n\n    return find_Nth_Digit_Util(p, q, N)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    # Split the list into integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort the integers\n    ints.sort()\n\n    # Combine the sorted integers and strings\n    sorted_list = ints + strs\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    return even_numbers, odd_numbers\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Get the characters that appear an odd number of times\n    odd_chars = [k for k, v in count.items() if v % 2 != 0]\n\n    # If there are more than one characters that appear an odd number of times,\n    # we can't rearrange the string to be a palindrome\n    if len(odd_chars) > 1:\n        return False\n\n    # If there is only one character that appears an odd number of times,\n    # we can rearrange the string to be a palindrome\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    freq_dict = Counter(nums)\n    return freq_dict\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty dictionary\n    dict_ = {}\n    for i in range(n):\n        if arr[i] in dict_:\n            dict_[arr[i]] += 1\n        else:\n            dict_[arr[i]] = 1\n\n    # Find the sum of repeated elements\n    sum_ = 0\n    for key, value in dict_.items():\n        if value > 1:\n            sum_ += key * value\n    return sum_\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.match(text):\n        return True\n    return False\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^[A-Za-z0-9_]+\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct_numbers = set(data)\n    return distinct_numbers\n"}
{"task_id": "MBPP/47", "completion": "\n    return A % B\n"}
{"task_id": "MBPP/48", "completion": "\n    # Convert the number to binary and count the number of 1's\n    # If the count is odd, return the number\n    return n\n"}
{"task_id": "MBPP/49", "completion": "\n    for i in range(N):\n        for j in range(N):\n            if nums[i][j] == nums[i][0] and nums[i][j] == nums[0][j]:\n                return nums[i][j]\n    return None\n"}
{"task_id": "MBPP/50", "completion": "\n    return len(input_list)\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Triangle is equilateral\"\n    else:\n        return \"Triangle is not equilateral\"\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 1:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    # Find maximum element in the list\n    max_val = max(my_list)\n\n    # Initialize count array with zeros\n    count_array = [0] * (max_val + 1)\n\n    # Count occurrences of each element in the list\n    for num in my_list:\n        count_array[num] += 1\n\n    # Initialize output list\n    output_list = []\n\n    # Add elements to output list\n    for index, count in enumerate(count_array):\n        output_list.extend([index] * count)\n\n    return output_list\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/56", "completion": "\n\n    rev_num = int(str(n)[::-1])\n    return n - 2 * rev_num == rev_num\n"}
{"task_id": "MBPP/57", "completion": "\n    # Convert list to string\n    arr = list(map(str, arr))\n    # Sort the list in reverse order\n    arr.sort(reverse=True)\n    # Join the list elements to form a string\n    max_num = ''.join(arr)\n    # Return the result\n    return int(max_num)\n"}
{"task_id": "MBPP/58", "completion": "\n    if x < 0 and y > 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n == (8 * n + 1) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 0\n    min_val = arr[1] - arr[0]\n    max_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n        if arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n        if arr[i-1] - arr[i] < min_val:\n            min_val = arr[i-1] - arr[i]\n    return max_diff\n"}
{"task_id": "MBPP/61", "completion": "\n    count_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if is_substring_sum_digits(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return None\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n    min_index = 0\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element < max_difference:\n            max_difference = test_list[i] - min_element\n            min_index = i\n\n    return (min_index, max_difference)\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    return len([i for i in list if i > 0])\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for x in range(n+1)] for y in range(n+1)]\n\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    if len(Input) != k:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/71", "completion": "\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.3))\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return dif_Square(n-1) and (n*n - 1) % 2 == 0\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split('([,;.?!]) ', text)\n"}
{"task_id": "MBPP/74", "completion": "\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/77", "completion": "\n    sum_even = 0\n    sum_odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_even - sum_odd\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"}
{"task_id": "MBPP/80", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n*(n-3)//2\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    char_list = list(strr)\n    char_dict = {}\n    for char in char_list:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n<=0:\n        return \"Input should be a positive integer\"\n    elif n==1:\n        return [0]\n    elif n==2:\n        return [0,1]\n    else:\n        sequence = [0,1]\n        for i in range(2,n):\n            sequence.append(sequence[i-1]+sequence[i-2])\n        return sequence\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n*(26*n - 1)//2\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n"}
{"task_id": "MBPP/89", "completion": "\n    n = N\n    while n > 0:\n        if N % n == 0:\n            return n\n        n -= 1\n    return None\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(list1, key=len)\n\nlist1 = [\"Python\", \"Programming\", \"Coding\"]"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    if n < 1:\n        return False\n    else:\n        return n % 2 == 0\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return [(i, v) for i, v in enumerate(test_list) if v == min(test_list)]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n"}
{"task_id": "MBPP/99", "completion": "\n    return bin(n).replace(\"0b\", \"\")\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str + num_str[::-1])\n    else:\n        return int(num_str + str(int(num_str) + 1))\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    word = re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/103", "completion": "\n    # check if n and m are prime\n    if not is_prime(n) or not is_prime(m):\n        return \"n and m should be prime\"\n\n    # check if n and m are co-prime\n    if gcd(n, m) != 1:\n        return \"n and m should be co-prime\"\n\n    # calculate eulerian number\n    eulerian_num = (n - 1) * (m - 1)\n\n    return eulerian_num\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x.lower())\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True) + lst.count(False)\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'x' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] < num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] < num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] < num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        else:\n            merged_list.append(heapq.heappop(num1))\n            merged_list.append(heapq.heappop(num2))\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[i+1] == '0':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_list = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))\n\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    perimeter = 2 * (22/7) * radius * (radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list]\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    # Initialize result\n    result = -1\n\n    # Traverse the array\n    for i in range(0, n):\n\n        # Count occurrences of current element\n        count = 0\n        for j in range(0, n):\n            if (arr[i] == arr[j]):\n                count += 1\n\n        # If count is 1, then print the element\n        if (count == 1):\n            result = arr[i]\n            break\n\n    return result\n"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return (list1[-1], list1[-2])\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and their sum is\", sum)\n    return count\n"}
{"task_id": "MBPP/122", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + smartNumber(n-1)\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(divisors(n))\n\n    def divisors(n):\n        divs = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    divs.append(i)\n                else:\n                    divs.extend([i, n // i])\n        return divs\n\n    amicable_numbers = []\n    for i in range(2, limit):\n        if d(i) > i and d(i) < limit:\n            if d(d(i)) == i and d(d(i)) != i:\n                amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n\n"}
{"task_id": "MBPP/125", "completion": "\n    max_length = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == n or count_1 == n:\n            max_length = max(max_length, i - count_0 + count_1 - n)\n    return max_length\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum_of_divisors = a + b\n    return sum_of_divisors\n"}
{"task_id": "MBPP/127", "completion": "\n    if y == 0 or x == 0:\n        return 0\n    if y > 0:\n        return x + multiply_int(x, y - 1)\n    if y < 0:\n        return -multiply_int(x, -y)\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n\n        function to check if matrix is magic square\n        \"\"\"\n        def sum_row(row):\n            \"\"\"\n            function to calculate sum of row\n            \"\"\"\n            return sum(row)\n\n        def sum_col(matrix, col):\n            \"\"\"\n            function to calculate sum of column\n            \"\"\"\n            return sum(matrix[i][col] for i in range(len(matrix)))\n\n        def sum_diag(matrix):\n            \"\"\"\n            function to calculate sum of diagonal\n            \"\"\"\n            return sum(matrix[i][i] for i in range(len(matrix)))\n\n        def sum_anti_diag(matrix):\n            \"\"\"\n            function to calculate sum of anti diagonal\n            \"\"\"\n            return sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n\n        if len(matrix) == 0 or len(matrix) != len(set(sum_row(row) for row in matrix)):\n            return False\n\n        for col in range(len(matrix)):\n            if sum_col(matrix, col) != sum_row(matrix[0]):\n                return False\n\n        if sum_diag(matrix) != sum_anti_diag(matrix) != sum_row(matrix[0]):\n            return False\n\n        return True\n\n    if is_magic_square(my_matrix):\n        return \"This is a magic square\"\n    else:\n        return \"This is not a magic square\"\n\n"}
{"task_id": "MBPP/130", "completion": "\n    num_freq = defaultdict(int)\n    for num in nums:\n        num_freq[num] += 1\n\n    max_freq = max(num_freq.values())\n    max_freq_nums = [num for num, freq in num_freq.items() if freq == max_freq]\n\n    return max_freq_nums\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        if arr[n-1] % 2 == 0:\n            arr.append(arr[n-1] + 1)\n        else:\n            arr.append(arr[n-1] - 1)\n    return arr\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*10**(n-1) + 1)\n\nn = int(input(\"Enter the nth number: \"))"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.60\n    else:\n        bill = 100 * 0.60 + (units - 100) * 0.90\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    return [i for i in test_list]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums), 0, -1):\n        max_index = i\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        flip(nums, max_index)\n        flip(nums, i)\n\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    if isinstance(Input, tuple):\n        for i in Input:\n            if isinstance(i, list):\n                print(i)\n    else:\n        print(\"Input is not a tuple\")\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    l, r = 0, 1\n    min_diff = float('inf')\n    while r < n:\n        diff = abs(arr[r] - arr[l])\n        if diff < min_diff:\n            min_diff = diff\n            res = (arr[l], arr[r])\n        l += 1\n        r += 1\n    return res\n\narr = [1, 5, 3, 19, 18, 25]\nn = len(arr)"}
{"task_id": "MBPP/145", "completion": "\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n"}
{"task_id": "MBPP/149", "completion": "\n    if not arr:\n        return 0\n\n    dp = [1]*n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left_half = merge_sort(x[:mid])\n    right_half = merge_sort(x[mid:])\n    return merge(left_half, right_half)\n"}
{"task_id": "MBPP/153", "completion": "\n    import math\n\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if d >= 0:\n        # calculate the two solutions\n        sol1 = (-b - math.sqrt(d)) / (2*a)\n        sol2 = (-b + math.sqrt(d)) / (2*a)\n        return sol1, sol2\n    else:\n        return \"The equation has no real solutions\"\n"}
{"task_id": "MBPP/154", "completion": "\n    if N > len(nums):\n        return \"Error: N is greater than the length of the list\"\n    else:\n        return nums[N-1][N-1]\n"}
{"task_id": "MBPP/155", "completion": "\n    # Convert the number to binary and toggle the bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n    # Convert the toggled binary back to decimal\n    toggled_number = int(togged_binary, 2)\n    return toggled_number\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g)) if k is not None else None) for k, g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # calculate the sum of all elements\n    total_sum = sum(arr)\n\n    # if total sum is less than k or n is less than k, return -1\n    if total_sum < k or n < k:\n        return -1\n\n    # calculate the target sum\n    target_sum = total_sum - k\n\n    # calculate the number of operations\n    operations = 0\n\n    # iterate over the array\n    for i in range(n):\n        # if the current element is less than target_sum, add it to the operations\n        if arr[i] < target_sum:\n            operations += target_sum - arr[i]\n\n    # return the number of operations\n    return operations\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 1 or month == 2 or month == 12):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month number\")\n\n    if (days >= 20 and days <= 31):\n        print(\"Good weather\")\n    elif (days >= 0 and days <= 19):\n        print(\"Bad weather\")\n    else:\n        print(\"Invalid day number\")\n"}
{"task_id": "MBPP/160", "completion": "\n    x = n / (a + b)\n    y = n - x * (a + b)\n    return x, y\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return sum_series(n-1) + sum_series(n-3) - sum_series(n-4)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    if s == 'square':\n        return l ** 2\n    elif s == 'rectangle':\n        return l * 2\n    elif s == 'triangle':\n        return (l ** 2) / (4 * tan(pi / 3))\n    elif s == 'circle':\n        return pi * (l ** 2)\n    else:\n        return \"Invalid shape\"\n"}
{"task_id": "MBPP/164", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n"}
{"task_id": "MBPP/165", "completion": "\n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]] += 1\n        else:\n            count_dict[str1[i]] = 1\n    return count_dict\n\nstr1 = \"abcde\""}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n+1):\n            pell.append(2*pell[i-1] + pell[i-2])\n        return pell[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    return {i: v for i, v in l}\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_val = L\n    for i in range(L + 1, R + 1):\n        lcm_val = lcm(lcm_val, i)\n\n    return lcm_val\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return False\n    if x == 1:\n        return False\n    if x == 2:\n        return False\n    if x == 3:\n        return False\n    if x == 4:\n        return False\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    if x == 8:\n        return False\n    if x == 9:\n        return False\n    if x == 10:\n        return False\n    if x == 11:\n        return False\n    if x == 12:\n        return False\n    if x == 13:\n        return False\n    if x == 14:\n        return False\n    if x == 15:\n        return False\n    if x == 16:\n        return False\n    if x == 17:\n        return False\n    if x == 18:\n        return False\n    if x == 19:\n        return False\n    if x == 20:\n        return False\n    if x == 21:\n        return False\n    if x == 22:\n        return False\n    if x == 23:\n        return False\n    if x == 24:\n        return False\n    if x == 25:\n        return False\n    if x == 26:\n        return False\n    if x == 27:\n        return False\n    if x == 28:\n        return False\n    if x == 29:\n        return False\n    if x == 30:\n        return False\n    if x == 31:\n        return False\n    if x == 32:\n        return False\n    if x == 33:\n        return False\n    if x == 34:\n        return False\n    if x == 35:\n        return False\n    if x == 36:\n        return False\n    if x == 37:\n        return False\n    if x == 38:\n        return False\n    if x == 39:\n        return False\n    if x == 40:\n        return False\n    if x == 41:\n        return False\n    if x == 42:"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1[:min_len]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    pattern = r\"[a-z][A-Z]|[A-Z][a-z]\"\n    result = re.findall(pattern, string)\n    return result\n\nstring = \"Hello123\""}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (arr[j] - arr[i] == k):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    import math\n\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # calculate the two solutions\n    sol1 = (-b - math.sqrt(D)) / (2*a)\n    sol2 = (-b + math.sqrt(D)) / (2*a)\n\n    return sol1, sol2\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if (n // i) == i * i:\n                    return True\n        return False\n"}
{"task_id": "MBPP/189", "completion": "\n    i = 0\n    while i < n:\n        if arr[i] <= 0 or arr[i] > n:\n            arr.pop(i)\n            n -= 1\n        else:\n            i += 1\n\n    missing_nums = []\n    for i in range(1, n + 1):\n        if i not in arr:\n            missing_nums.append(i)\n\n    if len(missing_nums) == 0:\n        return n + 1\n    else:\n        return missing_nums[0]\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # check if the points are inside the square\n    if x1 <= x2 and y1 <= y2:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 == \"February\":\n        return 28\n    elif monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return 30\n    elif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return 31\n    else:\n        return \"Invalid month name\"\n"}
{"task_id": "MBPP/192", "completion": "\n    if len(str) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    return (test_tup1[0]**test_tup1[1]), (test_tup2[0]**test_tup2[1])\n"}
{"task_id": "MBPP/198", "completion": "\n    # calculate the semi-major axis\n    h = math.sqrt(a**2 - b**2)\n    # calculate the semi-minor axis\n    k = math.sqrt(a**2 - h**2)\n    # calculate the area of the triangle\n    area = 0.5 * h * k\n    # calculate the area of the ellipse\n    ellipse_area = math.pi * h * k\n    # calculate the ratio of the area of the triangle to the area of the ellipse\n    ratio = area / ellipse_area\n    return ratio\n"}
{"task_id": "MBPP/199", "completion": "\n    return n & -n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] != lst[1:]\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([i for i in str1 if int(i) % 2 != 0])\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = bin(n1 ^ n2)\n    return x.count('1')\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(i) + str(j) for i, j in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            k = i+cl-1\n            if str[i] == str[k]:\n                dp[i][k] = dp[i+1][k-1] + 2\n            else:\n                dp[i][k] = max(dp[i+1][k], dp[i][k-1])\n\n    return dp[0][n-1]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n    return heap\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(\"[^a-z0-9]\")\n    if pattern.search(string):\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # convert the numbers to binary\n    a = bin(A)[2:]\n    b = bin(B)[2:]\n\n    # calculate the length of the longest binary string\n    len_a = len(a)\n    len_b = len(b)\n\n    # if the lengths are not equal, pad the shorter one with zeros\n    if len_a < len_b:\n        a = a.zfill(len_b)\n    elif len_b < len_a:\n        b = b.zfill(len_a)\n\n    # calculate the minimum operations\n    operations = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            operations += 1\n\n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    return (min(test_tup[:K]), max(test_tup[:K]))\n"}
{"task_id": "MBPP/220", "completion": "\n    # list of special characters\n    special_chars = [' ', ',', '.', ':']\n\n    # replace n occurrences of special characters\n    for i in range(n):\n        text = re.sub(r'\\s', special_chars[i%len(special_chars)], text)\n\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "MBPP/222", "completion": "\n    same_type = []\n    not_same_type = []\n    for i in test_tuple:\n        if type(i) == type(test_tuple[0]):\n            same_type.append(i)\n        else:\n            not_same_type.append(i)\n    return same_type, not_same_type\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    majority_element = -1\n\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n        else:\n            if (count > n / 2):\n                majority_element = x\n            count = 0\n\n    if (count > n / 2):\n        majority_element = x\n\n    if (count == 0):\n        return -1\n\n    return majority_element\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 != 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i) == bin(i).zfill(n.bit_length()):\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    positive = [i for i in arr if i >= 0]\n    negative = [i for i in arr if i < 0]\n    return positive + negative\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    # Create a 2D array to store results of subproblems\n    dp = [[0 for x in range(n+1)] for x in range(n+1)]\n\n    # Fill dp[][] in bottom up manner\n    for i in range(n+1):\n        for j in range(i+1):\n            if(i == j or j == 0):\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    return dp[n][0]\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_cylinder = 2 * pi * r * h\n    return lateral_surface_cylinder\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # If N is less than 3, return 0\n    if N < 3:\n        return 0\n\n    # If N is 3, return 1\n    if N == 3:\n        return 1\n\n    # If N is greater than 3, return N/2\n    if N > 3:\n        return N//2\n\n    # If N is 4, return 2\n    if N == 4:\n        return 2\n\n    # If N is 5, return 2\n    if N == 5:\n        return 2\n\n    # If N is greater than 5, return N-2\n    if N > 5:\n        return N-2\n"}
{"task_id": "MBPP/237", "completion": "\n    # Create a Counter object\n    counter = Counter(test_list)\n\n    # Get the most common element\n    most_common = counter.most_common(1)\n\n    # If the most common element is not in the list, return None\n    if most_common[0][0] not in test_list:\n        return None\n\n    # Get the count of the most common element\n    most_common_count = most_common[0][1]\n\n    # Get the count of all elements\n    total_count = sum(counter.values())\n\n    # Calculate the number of similar times\n    similar_times = total_count - most_common_count\n\n    return similar_times\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    def find_sequences(m, n, prev, sequences):\n        if n == 0:\n            sequences.append(prev)\n            return\n        for i in range(prev, m + 1):\n            find_sequences(m, n - 1, i, sequences)\n\n    sequences = []\n    find_sequences(m, n, 0, sequences)\n    return len(sequences)\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2[-1]\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [[['*' for _ in range(n)] for _ in range(o)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    return count_dict\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Sort the list based on the count of the first element\n    lst.sort(key=lambda x: count_dict[x[0]])\n\n    return lst\n\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return -1\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum\n    max_sum = arr[0]\n\n    # Initialize current sum\n    curr_sum = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    epsilon = 0.01\n    g = number\n    while abs(g*g - number) >= epsilon:\n        g = (g + number / g) / 2\n    return g\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    list.insert(0, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = number\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n        result.append((x, y))\n    return result\n\nnumbers = [(5, 0.7853981633974483), (3, 1.1071487177940904), (2, 4.637306001391102), (1, 5.0)]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[aA]\\s[eE]\\b', text)\n    return words\n\ntext = \"I am an engineer and I also like to code in Python\""}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\nl = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\nn = 3\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    print(\"Before swapping: a =\", a, \"and b =\", b)\n    a, b = b, a\n    print(\"After swapping: a =\", a, \"and b =\", b)\n"}
{"task_id": "MBPP/258", "completion": "\n    return list(filter(lambda x: x % 2 != 0, array_nums))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 2\n    else:\n        primes = [2]\n        i = 3\n        while len(primes) < n:\n            is_prime = True\n            for p in primes:\n                if i % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n            i += 2\n        return primes[-1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(elem1/elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 0:\n        return \"Invalid age\"\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 4\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/268", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + find_star_num(n-1)\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n        elif i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    sum_val = 0\n    for i in range(0, n+1, 2):\n        sum_val += math.comb(n, i)\n    return sum_val\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/275", "completion": "\n    # calculate the position of the last removed element\n    position = (n - m) % len(a)\n    return position\n"}
{"task_id": "MBPP/276", "completion": "\n    return 3.141592653589793 * r**2 * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += i[0]\n        else:\n            count += i\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n == (1 + (12 * (n - 1))) / 2\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return None\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return [lambda x, y: x - y](nums1, nums2)\n\n"}
{"task_id": "MBPP/283", "completion": "\n    # convert the number to string\n    str_n = str(n)\n\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate over each digit in the string\n    for digit in str_n:\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq[digit] = 1\n\n    # return the frequency of each digit\n    return freq\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = re.compile(r'ab{2,3}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"abbbbabbbbabbbbabbbb\""}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = 0\n\n    # Get the sum of the first subarray\n    curr_sum = sum(a[:k])\n    res = curr_sum\n\n    # Compute sums of remaining subarrays and update result\n    for i in range(k, n):\n        curr_sum = curr_sum - a[i - k] + a[i]\n        res = max(res, curr_sum)\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n    return sum_squares\n"}
{"task_id": "MBPP/288", "completion": "\n    count = [0]*N\n    for i in range(N):\n        count[arr[i] % P] += 1\n    for i in range(1, P):\n        count[i] += count[i-1]\n    result = [0]*N\n    for i in range(N-1, -1, -1):\n        result[count[arr[i] % P] - 1] = arr[i]\n        count[arr[i] % P] -= 1\n    return result\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 29\n    else:\n        return 28\n"}
{"task_id": "MBPP/290", "completion": "\n    return max(len(x) for x in list1)\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * n\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n):\n        dp[i] = dp[i - 1] + dp[i - 2] * (k - 1)\n\n    return dp[n - 1]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    quotient_numbers = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            quotient_numbers.append(i / j)\n    return quotient_numbers\n\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the aggregate of each list\n    aggregate_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for lst in stdata:\n        # Calculate the aggregate of each list\n        aggregate = sum(lst)\n        # Add the aggregate to the dictionary\n        aggregate_dict[lst] = aggregate\n\n    # Find the maximum aggregate\n    max_aggregate = max(aggregate_dict.values())\n\n    # Find the list(s) with the maximum aggregate\n    max_lists = [lst for lst, agg in aggregate_dict.items() if agg == max_aggregate]\n\n    return max_lists\n"}
{"task_id": "MBPP/300", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return max(sum((dict_depth(i) for i in d.values()), start=0) + 1 for d in d.values())\n    return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    count = 0\n    while n:\n        n = n & (n-1)\n        count += 1\n    return count\n"}
{"task_id": "MBPP/303", "completion": "\n    # Initialize count as 0\n    count = 0\n\n    # Traverse through the array\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            # If the current element is greater than the next one, increment the count\n            if a[i] > a[j]:\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    if not arr or n == 0:\n        return -1\n\n    rotations = rotations % n\n    index = (index + rotations) % n\n\n    return index\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = a[0]\n\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy[m] = n\n    return tuplex_copy\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    nums1.reverse()\n    nums2.reverse()\n\n    max_product = -1\n    for i in range(N):\n        max_product = max(max_product, nums1[i]*nums2[i])\n\n    return max_product\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1.split())\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n & ~(n & -n)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    if r < 0 or h < 0:\n        return \"Error: Radius and height must be positive.\"\n    else:\n        return (1/3) * math.pi * r**2 * h\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    max_sum = float('-inf')\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n\n    for i in range(1, m + 1):\n        for j in range(n, 0, -1):\n            for k in range(j, n + 1):\n                curr_sum = prefix_sum[i][k] - prefix_sum[i - 1][j - 1]\n                if i - 1 - (k - 1) >= 0:\n                    curr_sum -= prefix_sum[i - 1 - (k - 1)][j]\n                max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if not even_words:\n        return None\n    return max(even_words, key=len)\n\n\nstr = \"Write a Python program to find the length of the first maximum length word in a given string\""}
{"task_id": "MBPP/316", "completion": "\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s = s.split(',')\n    s = [int(i) for i in s]\n    s.sort()\n    return s[-1]**2\n"}
{"task_id": "MBPP/319", "completion": "\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) > 5]\n    return long_words\n\ntext = \"The quick brown fox jumps over the lazy dog. The fox is quick, but the dog is lazy.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_square = sum(i**2 for i in range(1, n+1))\n    sum_numbers = sum(range(1, n+1))**2\n    return sum_square - sum_numbers\n"}
{"task_id": "MBPP/321", "completion": "\n    demlo_numbers = []\n    for i in range(1, len(s)):\n        if s[i] == '0' and s[i-1] == '1':\n            demlo_numbers.append(i)\n    return demlo_numbers\n\n"}
{"task_id": "MBPP/322", "completion": "\n    return [i for i, x in enumerate(list1) if x == min(list1)]\n"}
{"task_id": "MBPP/323", "completion": "\n    if n == 1:\n        return arr\n\n    if n % 2 == 0:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        return right_rotate(arr, n - 1, out_of_place - 1, cur + 1)\n    else:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        return right_rotate(arr, n - 1, out_of_place + 1, cur + 1)\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] = min(dp[i], dp[i - j] + 1)\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    for word in test_list:\n        word_count[word] += 1\n\n    max_count = max(word_count.values())\n    most_occurrences = [word for word, count in word_count.items() if count == max_count]\n\n    return most_occurrences\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/328", "completion": "\n    def reverse(list1, m, n):\n        list1[m:n] = list1[n:m:-1]\n        return list1\n\n    return reverse(list1, m, n)\n\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,4}\\b'\n    return re.findall(pattern, text)\n\ntext = \"Hello, my name is John Doe. I live in New York.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = re.compile(r'(\\b\\w+\\b)(?=\\W*$)')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[-(i+1)]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    divisors = []\n    for i in range(1, x + 1):\n        if x % i == 0:\n            divisors.append(i)\n    for i in range(len(divisors) - 1, -1, -1):\n        if divisors[i] > y:\n            divisors.pop(i)\n        else:\n            break\n    return divisors\n\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return \"List should have at least 3 elements\"\n    lst.sort()\n    return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_range = float('inf')\n    result = []\n    heap = []\n\n    for i, nums in enumerate(list):\n        for j, num in enumerate(nums):\n            heappush(heap, Node(num, i, j))\n\n    while len(heap) == len(list):\n        node = heappop(heap)\n        min_range = min(min_range, node.value)\n        result.append((node.list_num, node.index))\n\n        if len(heap) > 0:\n            next_node = heap[0]\n            if next_node.value > node.value:\n                heappush(heap, next_node)\n                next_node = heappop(heap)\n            node.value = next_node.value\n            node.index = next_node.index\n\n    return min_range, result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    return len(s)\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    diff_list = [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n    return diff_list\n"}
{"task_id": "MBPP/346", "completion": "\n    if n % (2 * k) < k:\n        return n % (2 * k)\n    else:\n        return 2 * k - n % (2 * k)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    return m * n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n < r:\n        return 0\n    if r == 0:\n        return 1\n    if r == 1:\n        return n - r + 1\n    if r == 2:\n        return n - r + 1\n    if r == 3:\n        return n - r + 1\n    if r == 4:\n        return n - r + 1\n    if r == 5:\n        return n - r + 1\n    if r == 6:\n        return n - r + 1\n    if r == 7:\n        return n - r + 1\n    if r == 8:\n        return n - r + 1\n    if r == 9:\n        return n - r + 1\n    if r == 10:\n        return n - r + 1\n    if r == 11:\n        return n - r + 1\n    if r == 12:\n        return n - r + 1\n    if r == 13:\n        return n - r + 1\n    if r == 14:\n        return n - r + 1\n    if r == 15:\n        return n - r + 1\n    if r == 16:\n        return n - r + 1\n    if r == 17:\n        return n - r + 1\n    if r == 18:\n        return n - r + 1\n    if r == 19:\n        return n - r + 1\n    if r == 20:\n        return n - r + 1\n    if r == 21:\n        return n - r + 1\n    if r == 22:\n        return n - r + 1\n    if r == 23:\n        return n - r + 1\n    if r == 24:\n        return n - r + 1\n    if r == 25:\n        return n - r + 1\n    if r == 26:\n        return n - r + 1\n    if r == 27:\n        return n - r + 1\n    if r == 28:\n        return n - r + 1\n    if r == 29:\n        return n - r + 1\n    if r == 30:\n        return n - r + 1\n    if r == 31:\n        return n - r + 1\n   "}
{"task_id": "MBPP/349", "completion": "\n    if string.count('0') == 0 or string.count('1') == 0:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)\n\n"}
{"task_id": "MBPP/351", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n        if count == k:\n            return arr[i]\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(set(str)) == len(str)\n"}
{"task_id": "MBPP/353", "completion": "\n    if n < len(list1[0]):\n        for i in list1:\n            del i[n]\n    return list1\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return tn_ap(a, n-1, d) + d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    def count_Rectangles_in_circle(r):\n        return 2 * math.pi * r\n\n    return count_Rectangles_in_circle(radius)\n\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - (a + b)\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return [(i, j) for i, j in zip(nums1, nums2)]\n\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [6, 7, 8, 9, 10]\n"}
{"task_id": "MBPP/359", "completion": "\n    import cmath\n\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # calculate the two roots\n    root1 = (-b - cmath.sqrt(D)) / (2 * a)\n    root2 = (-b + cmath.sqrt(D)) / (2 * a)\n\n    # check if roots are real\n    if D > 0:\n        return root1, root2\n    else:\n        return \"Roots are not real\"\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 1:\n        return \"Carol\"\n    else:\n        return \"Carol\" + get_carol(n-1)\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i != []]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    return max(list(count.values()))\n"}
{"task_id": "MBPP/363", "completion": "\n    return [tuple(i + K for i in test_list[n]) for n in range(len(test_list))]\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(len(ch) - 1):\n        if ch[i] != ch[i + 1]:\n            flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price)\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    else:\n        for i in range(1, len(A)):\n            if A[i] != A[i-1] + 1:\n                return A[i-1] + 1\n        return A[-1] + 1\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        first = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(first + p)\n    return perms\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    # Create a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # Convert the set back to a tuple\n    unique_tup = tuple(unique_set)\n\n    return unique_tup\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        return test_list[1:] + [test_list[0]]\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0]*colnum for _ in range(rownum)]\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def is_rotated(A, mid, A_min):\n        if A[mid] > A[mid + 1]:\n            return True\n        if mid == A_min:\n            return False\n        return is_rotated(A, mid - 1, A_min)\n\n    return is_rotated(A, len(A) - 1, 0)\n\n"}
{"task_id": "MBPP/383", "completion": "\n    # Convert the number to binary and toggle odd bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + get_perrin(n - 1)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    swap_count = 0\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swap_count += 1\n    return swap_count + len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while (2 ** i) <= n:\n        i += 1\n    return 2 ** (i - 1)\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = [2, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    list.insert(0, string)\n    return list\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1, d2, d3 in zip(l1, l2, l3):\n        result.append({**d1, **d2, **d3})\n    return result\n\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return max(n/2 + get_max_sum(n/2) + (n/5), n/4 + get_max_sum(n/4) + (n/5))\n\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    if len(string) == 0:\n        return False\n    first_char = string[0]\n    last_char = string[-1]\n    if first_char == last_char:\n        return False\n    return True\n\n"}
{"task_id": "MBPP/397", "completion": "\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n"}
{"task_id": "MBPP/398", "completion": "\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            sum_num += num % 10\n            num = num // 10\n        sum_list.append(sum_num)\n    return sum_list\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n\ntest_list = [(1,2), (2,3), (1,2), (3,4), (1,2), (1,2), (3,4)]"}
{"task_id": "MBPP/401", "completion": "\n    return test_tup1 + test_tup2\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n or r < 0:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    return numerator * pow(denominator, p - 2, p)\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # convert number to list of digits\n    digits = [int(d) for d in str(n)]\n    # find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # if no such pair is found, the number is already the largest\n    if i == -1:\n        return n\n    # find the second digit in the pair that is larger than the first digit\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    # swap the first and second digits\n    digits[i], digits[j] = digits[j], digits[i]\n    # reverse the digits after the first digit\n    digits[i+1:] = reversed(digits[i+1:])\n    # convert the list of digits back to a number\n    return int(''.join(map(str, digits)))\n\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2:\n        return []\n\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                pairs.append((num1, num2))\n            else:\n                break\n\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product_tuples = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            if list1[i] * list1[j] < list1[i] and list1[i] * list1[j] < list1[j]:\n                min_product_tuples.append((list1[i], list1[j]))\n    return min_product_tuples\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = [0]*n\n    min_product = [0]*n\n    result = [0]*n\n\n    max_product[0] = arr[0]\n    min_product[0] = arr[0]\n    result[0] = arr[0]\n\n    for i in range(1,n):\n        if arr[i]>0:\n            max_product[i] = max(arr[i], max_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], min_product[i-1]*arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], max_product[i-1]*arr[i])\n\n        result[i] = max(result[i-1], max_product[i])\n\n    return result[-1]\n\narr = [10, 20, 30, 40, 50]"}
{"task_id": "MBPP/416", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n\n    part1 = breakSum(n // 3)\n    part2 = breakSum(n // 2)\n    part3 = breakSum(n - 1)\n\n    return max(part1, part2, part3) + n\n\n"}
{"task_id": "MBPP/417", "completion": "\n    common_tuples = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_tuples.append(Input[i])\n    return common_tuples\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    return total_sum\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if gold[m][n] != -1:\n        return gold[m][n]\n    right = get_maxgold(gold, m, n-1)\n    down = get_maxgold(gold, m-1, n)\n    left = get_maxgold(gold, m, n+1)\n    up = get_maxgold(gold, m+1, n)\n    gold[m][n] = gold[m][n] + max(right, down, left, up)\n    return gold[m][n]\n\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    pattern = re.compile(r'\\b(?:(?:[0-2][0-9]|3[01])\\d|(?:(?:0[13578]|1[02]|2[0-9]|3[01]|4[0-9]|5[0-2])\\d)\\-((?:0[1-9]|1[0-2])\\d)\\-((?:19|20)\\d{2})\\b')\n    if pattern.match(dt):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n\n        for i in range(gap,n):\n\n            temp = my_list[i]\n\n            j = i\n            while  j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    import math\n\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    if disc < 0:\n        return \"No real solution\"\n    elif disc == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        x1 = (-b + math.sqrt(disc)) / (2*a)\n        x2 = (-b - math.sqrt(disc)) / (2*a)\n        return x1, x2\n"}
{"task_id": "MBPP/431", "completion": "\n    common_list = [value for value in list1 if value in list2]\n    if common_list:\n        return common_list[0]\n    else:\n        return False\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2 * height\n\n\nbase1 = float(input(\"Enter the first base of the trapezium: \"))\nbase2 = float(input(\"Enter the second base of the trapezium: \"))\nheight = float(input(\"Enter the height of the trapezium: \"))\n"}
{"task_id": "MBPP/433", "completion": "\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = re.compile(r'a+b+')\n    return pattern.search(text) is not None\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([i for i in str1 if i.isdigit()])\n\n\nstr1 = \"1234567890\""}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    return sum(L)\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = re.compile(r'\\b(?=\\w+\\b)\\badverb\\b')\n    matches = pattern.finditer(text)\n    positions = [match.start() for match in matches]\n    return positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = list1[0]\n    for num in list1:\n        if num < largest_neg:\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return test_list[-K:]\n"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(x*y for x, y in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return tup_count, lst_count\n"}
{"task_id": "MBPP/447", "completion": "\n    return [num ** 3 for num in nums]\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))\n\n    # check if the area is zero, if so, the points are on a line\n    if area == 0:\n        return \"The points are on a line\"\n    else:\n        return \"The points are not on a line\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(' ', '', text1)\n\ntext1 = \"This is a test string\""}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return None\n    else:\n        return actual_cost - sale_amount\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    return re.findall(r'\\bz\\b', text)\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    return sum(1 for c in str if c.isupper())\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remainingList = list1[:i] + list1[i+1:]\n            for subset in combinations_list(remainingList):\n                result.append([m] + subset)\n        return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return \"0\"\n\n    octalNum = \"\"\n\n    while deciNum != 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n\n    return octalNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    max_product = float('-inf')\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    profit = [0]*n\n    min_price = price[0]\n\n    for i in range(1, n):\n        min_price = min(min_price, price[i])\n        profit[i] = max(profit[i-1], price[i] - min_price)\n\n    max_profit = 0\n    max_price = price[-1]\n\n    for i in range(n-2, -1, -1):\n        max_price = max(max_price, price[i])\n        max_profit = max(max_profit, max_price - price[i] + profit[i])\n\n    return max_profit\n\n"}
{"task_id": "MBPP/470", "completion": "\n    return [a + b for a, b in test_tup]\n"}
{"task_id": "MBPP/471", "completion": "\n    result = []\n    for i in range(lens):\n        for j in range(i + 1, lens):\n            if arr[i] * arr[j] % n == 0:\n                result.append((arr[i], arr[j]))\n    return result\n\n"}
{"task_id": "MBPP/472", "completion": "\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list)):\n        if sorted_list[i] != sorted_list[i + 1] - 1:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    return [i for i in test_list1 if i in test_list2]\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (count[ord(i)] > max_count):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+[a-z]+')\n    return pattern.findall(text)\n"}
{"task_id": "MBPP/483", "completion": "\n    factorial = 1\n    i = 1\n    while factorial % x != 0:\n        factorial *= i\n        i += 1\n    return factorial\n"}
{"task_id": "MBPP/484", "completion": "\n    result = [i for i in test_list1 if i not in test_list2]\n    return result\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    i = n\n    while not is_palindrome(i):\n        i += 1\n    return i\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n or r < 0:\n        return 0\n    else:\n        return fact(n) / (fact(r) * fact(n - r))\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4\n"}
{"task_id": "MBPP/489", "completion": "\n    max_value = max(arr)\n    frequency = arr.count(max_value)\n    return frequency\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx)**2 + (endy - starty)**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between each side\n    angle = (360 / (2 * sides))\n\n    # Calculate the coordinates for each side\n    coordinates = []\n    for i in range(sides):\n        x = startx + radius * math.cos(math.radians(i * angle))\n        y = starty + radius * math.sin(math.radians(i * angle))\n        coordinates.append((x, y))\n\n    return coordinates\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(str(test_tup[0]) + str(test_tup[1]), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    return hq.nsmallest(n, nums)\n"}
{"task_id": "MBPP/497", "completion": "\n    # surface area of cone = 1/3 * pi * r^2 * h\n    return 1/3 * math.pi * r**2 * h\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    result = ''.join(list)\n    return result\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    return n, m\n\n\nn, m = find(10, 20)"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Initialize two pointers, one at the start of the array and the other at the end of the array.\n    start = 0\n    end = len(A) - 1\n\n    # Traverse the array from both ends, and swap elements at the start and end if they are not zero.\n    while start < end:\n        if A[start] != 0:\n            start += 1\n        elif A[end] == 0:\n            end -= 1\n        else:\n            A[start], A[end] = A[end], A[start]\n            start += 1\n            end -= 1\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    return factorial(n) / factorial(n - k)\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n\n"}
