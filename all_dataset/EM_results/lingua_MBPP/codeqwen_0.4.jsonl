{"task_id": "MBPP/11", "completion": "\n    s = s.replace(ch, '', 1)\n    s = s.rstrip(ch)\n    return s\n"}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=sum)\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_count = Counter(words)\n    return dict(word_count)\n\n"}
{"task_id": "MBPP/14", "completion": "\n    return (l * b * h) / 2\n\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/19", "completion": "\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 1:\n        return False\n    n = 1\n    while n * (2 ** n - 1) <= x:\n        if n * (2 ** n - 1) == x:\n            return True\n        n += 1\n    return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, n+1) if i % n == 0]\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if (arr[i] == arr[j]):\n                count += 1\n        if (count == 1):\n            product *= arr[i]\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    res = all(len(ele) == K for ele in test_list)\n    return res\n"}
{"task_id": "MBPP/27", "completion": "\n    result = []\n    for string in list:\n        result.append(re.sub(r'\\d', '', string))\n    return result\n\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(0, k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n"}
{"task_id": "MBPP/29", "completion": "\n    for i in range(arr_size):\n        count = 0\n        for j in range(arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a min heap\n    min_heap = []\n    # Create a set to store distinct integers\n    distinct_set = set()\n    # Iterate over the list of numbers\n    for num in nums:\n        # If the number is not in the set, add it to the set and the min heap\n        if num not in distinct_set:\n            distinct_set.add(num)\n            heapq.heappush(min_heap, num)\n        # If the size of the min heap is greater than k, pop the smallest number\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Return the k smallest numbers in the min heap\n    return sorted(min_heap)\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n = n / 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # initialize start and end index\n    start = 0\n    end = N - 1\n\n    # loop until start index is less than or equal to end index\n    while start <= end:\n        # calculate mid index\n        mid = start + (end - start) // 2\n\n        # if mid index is equal to mid value, search in right half\n        if ar[mid] == mid + 1:\n            start = mid + 1\n        # else search in left half\n        else:\n            end = mid - 1\n\n    # return the missing number\n    return start + 1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    if n < 1:\n        return None\n    else:\n        return n * (n + 1) // 2\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # Calculate the total number of digits in the fraction\n    total_digits = p.bit_length() + q.bit_length()\n\n    # If N is greater than the total number of digits, return -1\n    if N > total_digits:\n        return -1\n\n    # Calculate the position of the Nth digit in the fraction\n    position = N - 1\n\n    # If the position is less than the number of digits in the numerator,\n    # return the Nth digit of the numerator\n    if position < p.bit_length():\n        return (p >> (p.bit_length() - position - 1)) & 1\n\n    # Otherwise, return the Nth digit of the denominator\n    return (q >> (q.bit_length() - position + p.bit_length() - 1)) & 1\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate and sort the integers and strings\n    int_list = sorted([item for item in mixed_list if isinstance(item, int)])\n    str_list = sorted([item for item in mixed_list if isinstance(item, str)])\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    return sorted_list\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = [num for num in list1 if num % 2 == 0]\n    odd_num = [num for num in list1 if num % 2 != 0]\n    \n    if even_num:\n        first_even = min(even_num)\n    else:\n        first_even = None\n        \n    if odd_num:\n        first_odd = min(odd_num)\n    else:\n        first_odd = None\n        \n    return first_even, first_odd\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    char_count = Counter(S)\n    max_heap = []\n    for char, count in char_count.items():\n        heapq.heappush(max_heap, (-count, char))\n    \n    prev_char = None\n    prev_count = 0\n    result = []\n    \n    while max_heap or prev_count:\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        if not max_heap:\n            return \"\"\n        \n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_count = count + 1  # Increase count since it's stored as negative\n        \n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    return Counter(nums)\n\n"}
{"task_id": "MBPP/41", "completion": "\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n"}
{"task_id": "MBPP/42", "completion": "\n    # Initialize sum as 0\n    sum = 0\n    # Iterate over the array\n    for i in range(n):\n        # If the element is repeated, add it to the sum\n        if arr[i] == arr[i + 1]:\n            sum += arr[i]\n    # Return the sum\n    return sum\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = '^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/44", "completion": "\n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    # Your code here\n    return distinct_numbers\n"}
{"task_id": "MBPP/47", "completion": "\n    last_digit_A = A % 10\n    last_digit_B = B % 10\n    if last_digit_A == 0 or last_digit_B == 0:\n        return 0\n    elif last_digit_A == 1 or last_digit_B == 1:\n        return 1\n    elif last_digit_A == last_digit_B:\n        return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/48", "completion": "\n    count = 0\n    while n > 0:\n        if count % 2 == 0:\n            n |= (1 << count)\n        count += 1\n        n >>= 1\n    return n\n"}
{"task_id": "MBPP/49", "completion": "\n    if N < 0 or N >= len(nums):\n        return \"Error: Index out of range.\"\n    else:\n        return nums[N]\n"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(input_list, key=lambda x: len(x))\n    return min_length\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    if not my_list:\n        return []\n\n    # Find the maximum value in the list\n    max_value = max(my_list)\n\n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n\n    # Populate the count array\n    for number in my_list:\n        count_array[number] += 1\n\n    # Generate the sorted list\n    sorted_list = []\n    for number, count in enumerate(count_array):\n        sorted_list.extend([number] * count)\n\n    return sorted_list\n"}
{"task_id": "MBPP/55", "completion": "\n    tn = a * (math.pow(r, n - 1))\n    return tn\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    return n == 2 * rev(n) - 1\n  "}
{"task_id": "MBPP/57", "completion": "\n    # Your code here\n    arr.sort(reverse=True)\n    max_num = int(\"\".join(map(str, arr)))\n    return max_num\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n"}
{"task_id": "MBPP/59", "completion": "\n    return n == (3 * n - 2)\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # Initialize the maximum length to 1\n    max_len = 1\n\n    # Iterate over the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element, update the maximum length\n        if arr[i] > arr[i-1]:\n            max_len += 1\n        # If the current element is less than the previous element, reset the maximum length to 1\n        else:\n            max_len = 1\n\n    # Return the maximum length\n    return max_len\n"}
{"task_id": "MBPP/61", "completion": "\n    count = 0\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/62", "completion": "\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest\n\n"}
{"task_id": "MBPP/63", "completion": "\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference to 0\n    max_diff = 0\n    \n    # Iterate over the list and find the maximum difference\n    for i in range(len(test_list) - 1):\n        if test_list[i+1] - test_list[i] > max_diff:\n            max_diff = test_list[i+1] - test_list[i]\n    \n    return max_diff\n"}
{"task_id": "MBPP/64", "completion": "\n    # Sorting list of tuples using lambda function\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    # Create a 2D array to store subproblem solutions\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][i - 1]\n        for j in range(1, i + 1):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n\n    return dp[n][0]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n"}
{"task_id": "MBPP/69", "completion": "\n    if len(s) == 0:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            n = 1\n            while (n < len(s)) and (l[i+n] == s[n]):\n                n += 1\n            if n == len(s):\n                return True\n    return False\n"}
{"task_id": "MBPP/70", "completion": "\n    equal_tuples = [t for t in Input if len(t) == k]\n    return equal_tuples\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink_factor = 1.3\n    is_sorted = False\n\n    while not is_sorted or gap > 1:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        is_sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                is_sorted = False\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i*i - j*j == n):\n                return True\n    return False\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split('[,;: ]+', text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_to_color = {}\n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if pattern not in pattern_to_color and color not in color_to_pattern:\n            pattern_to_color[pattern] = color\n            color_to_pattern[color] = pattern\n        elif pattern_to_color.get(pattern) != color or color_to_pattern.get(color) != pattern:\n            return False\n    \n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    res = []\n    for sub in test_list:\n        if len(sub) == K:\n            res.append(sub)\n    return res\n\n"}
{"task_id": "MBPP/76", "completion": "\n    count = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if i * i <= m and j * j <= n:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n = n // 10\n    return abs(even_sum - odd_sum)\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    words = s.split()\n    for word in words:\n        if len(word) % 2 != 0:\n            return True\n    return False\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    res = tuple(zip(test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    \n    # Iterate over each character in the string\n    for char in strr:\n        # If the character is already in the dictionary, increment its count\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the dictionary to find the character with the highest frequency\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # If no unique character is found, return None\n    return None\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return 3 * n * (n - 1) + 1\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    n = N - 1\n    while str(n)[::-1] != str(n):\n        n -= 1\n    return n\n"}
{"task_id": "MBPP/90", "completion": "\n    if not list1:\n        return 0\n    else:\n        return len(max(list1, key=len))\n"}
{"task_id": "MBPP/91", "completion": "\n    return str1.find(sub_str) != -1\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3 or n[0] == n[1] == n[2]:\n        return False\n    for i in range(2, len(n)):\n        if i % 2 == 0 and n[i] != n[0]:\n            return False\n        elif i % 2 != 0 and n[i] != n[1]:\n            return False\n    return True\n"}
{"task_id": "MBPP/93", "completion": "\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a * power(a, b - 1)\n    else:\n        return 1 / power(a, -b)\n\n"}
{"task_id": "MBPP/94", "completion": "\n    min_val = min(test_list, key=itemgetter(1))\n    return test_list.index(min_val)\n\n"}
{"task_id": "MBPP/95", "completion": "\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"}
{"task_id": "MBPP/100", "completion": "\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return -1\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    return re.sub(r'(?<!^)_([a-zA-Z])', lambda match: match.group(1).upper(), word)\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))\n\n"}
{"task_id": "MBPP/104", "completion": "\n    # Sorting sublists in ascending order\n    sorted_list = sorted(input_list, key=lambda sublist: sublist[0])\n    return sorted_list\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True) + lst.count(False)\n"}
{"task_id": "MBPP/106", "completion": "\n    res = [sum(ele) for ele in zip(test_list, test_tup)]\n    return res\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'A' <= hex(i)[2].upper() <= 'F':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    # Create a heap queue from the three lists\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, num1))\n    heapq.heappush(heap, (num2[0], 1, num2))\n    heapq.heappush(heap, (num3[0], 2, num3))\n\n    # Merge the sorted lists\n    merged_list = []\n    while heap:\n        value, index, num = heapq.heappop(heap)\n        merged_list.append(value)\n        if len(num) > 1:\n            heapq.heappush(heap, (num[1], index, num[1:]))\n\n    return merged_list\n\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_ranges = []\n    current_start = strt_val\n\n    for num in test_list:\n        if num > current_start:\n            missing_ranges.append((current_start, num))\n        current_start = max(current_start, num + 1)\n\n    if current_start < stop_val:\n        missing_ranges.append((current_start, stop_val))\n\n    return missing_ranges\n"}
{"task_id": "MBPP/111", "completion": "\n    # Flatten the nested list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    \n    # Find the most common element\n    common_element = max(set(flat_list), key=flat_list.count)\n    \n    return common_element\n"}
{"task_id": "MBPP/112", "completion": "\n    return 2 * (diameter + height)\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    res = Counter(test_list)\n    return res\n\n"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except ValueError:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = low + (high - low) // 2\n\n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 2\n            else:\n                high = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    return arr[low]\n\n"}
{"task_id": "MBPP/120", "completion": "\n    # Check if list is empty\n    if not list1:\n        return None\n\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n\n    # Calculate the product of the first two elements\n    max_product = list1[0] * list1[1]\n\n    # Return the maximum product and the corresponding pair\n    return max_product, (list1[0], list1[1])\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    # Include the current element and check or\n    # Exclude the current element and check\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or \\\n           check_triplet(A, n - 1, sum, count)\n "}
{"task_id": "MBPP/122", "completion": "\n    # check if number is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    return False\n\n"}
{"task_id": "MBPP/123", "completion": "\n\n        Return sum of proper divisors of n\n        \"\"\"\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_proper_divisors(a)\n        if a != b and sum_proper_divisors(b) == a:\n            amicable_sum += a\n    return amicable_sum\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"}
{"task_id": "MBPP/126", "completion": "\n    sum_a = 0\n    sum_b = 0\n    for i in range(1, a + 1):\n        if a % i == 0:\n            sum_a += i\n    for i in range(1, b + 1):\n        if b % i == 0:\n            sum_b += i\n    return sum_a, sum_b\n\n"}
{"task_id": "MBPP/127", "completion": "\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n"}
{"task_id": "MBPP/128", "completion": "\n    # Split the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Iterate over the list of words\n    for word in words:\n        # If the length of the word is greater than n, add it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the long_words list\n    return long_words\n"}
{"task_id": "MBPP/129", "completion": "\n    # check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n    \n    # calculate sum of each row\n    row_sum = [sum(row) for row in my_matrix]\n    \n    # calculate sum of each column\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    \n    # calculate sum of main diagonal\n    main_diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # calculate sum of secondary diagonal\n    secondary_diag_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # check if all sums are equal\n    if all(sum == row_sum[0] for sum in row_sum):\n        if all(sum == col_sum[0] for sum in col_sum):\n            if sum == main_diag_sum:\n                if sum == secondary_diag_sum:\n                    return True\n    return False\n"}
{"task_id": "MBPP/130", "completion": "\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    return max(count.values())\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] in vowels and str1[right] in vowels:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n        elif str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        arr = [arr[-1]] + arr[:-1]\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 2.60\n    elif units <= 100:\n        bill = 130 + ((units - 50) * 3.25)\n    elif units <= 200:\n        bill = 130 + 162.50 + ((units - 100) * 5.26)\n    else:\n        bill = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    return bill\n\n"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count\n\n"}
{"task_id": "MBPP/138", "completion": "\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n            if n % 2 != 0:\n                return False\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference\n\n"}
{"task_id": "MBPP/140", "completion": "\n    res = [ele for sub in test_list for ele in sub]\n    return res\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 1, -1):\n        # Find index of the maximum element in nums[0..i-1]\n        max_index = nums.index(max(nums[:i]))\n        \n        # Flip the array from 0 to max_index\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Flip the array from 0 to i-1\n        nums[:i] = reversed(nums[:i])\n    \n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum_diff = 0\n    for i in range(n):\n        sum_diff += abs(arr[i] - arr[n - i - 1])\n    return sum_diff\n"}
{"task_id": "MBPP/145", "completion": "\n    # Initialize minimum and maximum element as first element of array\n    min_element = arr[0]\n    max_element = arr[0]\n\n    # Traverse array from second element to last element\n    for i in range(1, n):\n        # Update minimum element if current element is smaller\n        min_element = min(min_element, arr[i])\n\n        # Update maximum element if current element is greater\n        max_element = max(max_element, arr[i])\n\n    # Return maximum difference\n    return max_element - min_element\n"}
{"task_id": "MBPP/146", "completion": "\n    ascii_sum = 0\n    for char in str1:\n        ascii_sum += ord(char)\n    return ascii_sum\n"}
{"task_id": "MBPP/147", "completion": "\n    if m == 0:\n        return tri[0][0]\n    if m == n:\n        return tri[m][n]\n    return max(max_path_sum(tri, m - 1, n), max_path_sum(tri, m - 1, n - 1)) + tri[m][n]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(abs(x)))\n"}
{"task_id": "MBPP/149", "completion": "\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "MBPP/150", "completion": "\n    if a == b:\n        return True\n    if a > b:\n        a, b = b, a\n    while a <= b:\n        if a == c:\n            return True\n        a += 1\n    return False\n"}
{"task_id": "MBPP/151", "completion": "\n    while q != 0:\n        p, q = q, p % q\n    return p\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 1:\n        return x\n    else:\n        mid = len(x) // 2\n        left = x[:mid]\n        right = x[mid:]\n        return merge(merge_sort(left), merge_sort(right))\n    \n    print(merge_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]))\n    # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\n    \n    print(merge_sort([10, 7, 8, 9, 1, 5]))\n    # Output: [1, 5, 7, 8, 9, 10]\n    \n    print(merge_sort([0, -1, 2, -3, 1]))\n    # Output: [-3, -1, 0, 1, 2]\n    \n    print(merge_sort([]))\n    # Output: []\n    \n    print(merge_sort([1]))\n    # Output: [1]\n    \n    print(merge_sort([1, 2]))\n    # Output: [1, 2]\n    \n    print(merge_sort([2, 1]))\n    # Output: [1, 2]\n    \n    print(merge_sort([1, 3, 2]))\n    # Output: [1, 2, 3]\n    \n    print(merge_sort([3, 2, 1]))\n    # Output: [1, 2, 3]\n    \n    print(merge_sort([1, 2, 3]))\n    # Output: [1, 2, 3]\n    \n    print(merge_sort([1, 2, 3, 4]))\n    # Output: [1, 2, 3, 4]\n    \n    print(merge_sort([4, 3, 2, 1]))\n    # Output: [1, 2, 3"}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = a * x_vertex ** 2 + b * x_vertex + c\n    return (x_vertex, y_vertex)\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        if i % N == 0:\n            result.append(nums[i])\n    return result\n"}
{"task_id": "MBPP/155", "completion": "\n    result = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        # Check if the bit position is even\n        if count % 2 == 0:\n            # Toggle the bit at the current even position\n            result = result | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ result\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(sum(1 for _ in group), key) for key, group in groupby(list1)]\n\n"}
{"task_id": "MBPP/158", "completion": "\n    # Your code here\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i] < k:\n            count += k - arr[i]\n        else:\n            break\n    return count\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ('January', 'February', 'March'):\n        print('Winter')\n    elif month in ('April', 'May', 'June'):\n        print('Spring')\n    elif month in ('July', 'August', 'September'):\n        print('Summer')\n    elif month in ('October', 'November', 'December'):\n        print('Autumn')\n    else:\n        print('Invalid month')\n\n    if days < 1 or days > 31:\n        print('Invalid day')\n    elif month in ('January', 'February', 'March') and days <= 19:\n        print('Winter')\n    elif month in ('April', 'May', 'June') and days <= 20:\n        print('Spring')\n    elif month in ('July', 'August', 'September') and days <= 22:\n        print('Summer')\n    elif month in ('October', 'November', 'December') and days <= 21:\n        print('Autumn')\n    else:\n        print('Invalid day')\n\n\nmonth_season('January', 15)\nmonth_season('March', 20)\nmonth_season('June', 21)\nmonth_season('August', 23)\nmonth_season('October', 22)\nmonth_season('December', 25)\nmonth_season('February', 29)\nmonth_season('April', 31)\nmonth_season('May', 0)\nmonth_season('November', 32)\nmonth_season('Invalid', 15)\nmonth_season('January', -5)\nmonth_season('February', 30)\nmonth_season('March', 31)\nmonth_season('April', 30)\nmonth_season('May', 31)\nmonth_season('June', 30)\nmonth_season('July', 31)\nmonth_season('August', 30)\nmonth_season('September', 31)\nmonth_season('October', 30)\nmonth_season('November', 31)\nmonth_season('December', 31)\nmonth_season('January"}
{"task_id": "MBPP/160", "completion": "\n    x = 0\n    y = 0\n    while a * x + b * y <= n:\n        if a * x + b * y == n:\n            return x, y\n        x += 1\n    return -1, -1\n\n"}
{"task_id": "MBPP/161", "completion": "\n    # Using list comprehension to filter out elements present in list2\n    result = [element for element in list1 if element not in list2]\n    return result\n"}
{"task_id": "MBPP/162", "completion": "\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    else:\n        return sum_series(n-1) + sum_series(n-2) + sum_series(n-3) + sum_series(n-4)\n"}
{"task_id": "MBPP/163", "completion": "\n    return s * (l ** 2) / (4 * tan(pi / s))\n\n"}
{"task_id": "MBPP/164", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == (n // i):\n                sum1 += i\n            else:\n                sum1 += (i + (n // i))\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == (n // i):\n                sum2 += i\n            else:\n                sum2 += (i + (n // i))\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/166", "completion": "\n    even_pairs = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"}
{"task_id": "MBPP/167", "completion": "\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 0\n        curr = 1\n        for _ in range(2, n + 1):\n            next_pell = 2 * curr + prev\n            prev = curr\n            curr = next_pell\n        return curr\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for char in s:\n        if char == 's' or char == 't' or char == 'd':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'\\W+', ' ', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    result = {}\n    for item in l:\n        key = item[0]\n        value = item[1]\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Your code here\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if (i*j) % (i+j) == 0:\n                return (i, j)\n    return (-1, -1)\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/179", "completion": "\n    # Initialize the list with the first n-1 digits of x\n    num_list = [int(digit) for digit in str(x)[:-1]]\n    \n    # Initialize the sum with the first n-1 digits of x\n    num_sum = sum(num_list)\n    \n    # Iterate until the sum is less than or equal to x\n    while num_sum < x:\n        # Append the next digit to the list\n        num_list.append(num_sum % 10)\n        \n        # Remove the first digit from the list\n        num_list.pop(0)\n        \n        # Calculate the new sum\n        num_sum = sum(num_list)\n    \n    # If the sum is equal to x, then x is a Keith number\n    return num_sum == x\n"}
{"task_id": "MBPP/180", "completion": "\n    R = 6371  # radius of the earth in kilometers\n    dLat = radians(elat - slat)\n    dLon = radians(elon - slon)\n    slat = radians(slat)\n    elat = radians(elat)\n\n    a = sin(dLat / 2) * sin(dLat / 2) + sin(dLon / 2) * sin(dLon / 2) * cos(slat) * cos(elat)\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    common_prefix = \"\"\n    length = min(len(str1), len(str2))\n    for i in range(length):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            break\n    return common_prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    pattern = re.compile(r'[a-z0-9_]')\n    match = pattern.search(string)\n    if match:\n        return match.group()\n    else:\n        return None\n\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    greater_specificnum = [i for i in list if i > num]\n    return greater_specificnum\n"}
{"task_id": "MBPP/185", "completion": "\n    x_focus = -b / (2 * a)\n    y_focus = (1 - (b ** 2) + (4 * a * c)) / (4 * a)\n    return (x_focus, y_focus)\n\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)"}
{"task_id": "MBPP/188", "completion": "\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*i * j*j == n:\n                return True\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = n + 1\n    for i in range(n):\n        index = abs(arr[i]) - 1\n        arr[index] = -abs(arr[index])\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    return n + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # Calculate the number of integral points inside the square\n    integral_points = (x2 - x1 - 1) * (y2 - y1 - 1)\n    return integral_points\n"}
{"task_id": "MBPP/191", "completion": "\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in months_with_30_days:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    for i in str:\n        if i.isdigit():\n            return True\n    return False\n"}
{"task_id": "MBPP/193", "completion": "\n    res = tuple(set(test_tup))\n    return res\n"}
{"task_id": "MBPP/194", "completion": "\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\n"}
{"task_id": "MBPP/195", "completion": "\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            res = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res\n\n"}
{"task_id": "MBPP/196", "completion": "\n    res = [ele for ele in test_list if len(ele) != K]\n    return res\n"}
{"task_id": "MBPP/197", "completion": "\n    res = tuple(pow(a, b) for a, b in zip(test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/198", "completion": "\n    if a <= 0 or b <= 0:\n        return None\n    else:\n        return (a * b) / 2\n\n"}
{"task_id": "MBPP/199", "completion": "\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    positions = [index for index, value in enumerate(list1) if value == max_value]\n    return positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/202", "completion": "\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 != 0:\n            result += char\n    return result\n\n"}
{"task_id": "MBPP/203", "completion": "\n    xor = n1 ^ n2\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    res = [test_tup[i] for i in range(len(test_tup)) if test_tup[i] < test_tup[i - 1]]\n    return len(res)\n\ntest_tup = (5, 3, 2, 4, 1)"}
{"task_id": "MBPP/206", "completion": "\n    res = ''.join([str(ele) + str(ele1) for ele, ele1 in zip(test_tup, test_tup[1:])])\n    return res\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\n    return dp[n][n]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = re.compile(r\"^\\d+(\\.\\d{2})?$\")\n    return bool(pattern.match(num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappushpop(heap, a)\n    return heap\n\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'[^a-z0-9]')\n    match = pattern.search(string)\n    return not bool(match)\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') == i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    total = 0\n    for i in range(1, n + 1):\n        total += math.pow(i, 4)\n    return int(total)\n\n"}
{"task_id": "MBPP/213", "completion": "\n    res = tuple(map(''.join, zip(test_tup1, test_tup2)))\n    return res\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for item in alist:\n        if isinstance(item, list):\n            decoded_list.extend([item[1]] * item[0])\n        else:\n            decoded_list.append(item)\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    for sublist in list1:\n        if sublist not in list2:\n            return False\n    return True\n"}
{"task_id": "MBPP/217", "completion": "\n    # Create an empty dictionary to store the frequency of each character\n    char_freq = {}\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is already in the dictionary, it is a repeated character\n        if char in char_freq:\n            return char\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # If no repeated character is found, return None\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Initialize the count of operations to 0\n    count = 0\n\n    # If A is greater than B, swap A and B\n    if A > B:\n        A, B = B, A\n\n    # While A is not equal to B, perform the following operations\n    while A < B:\n        # If B is even, divide B by 2\n        if B % 2 == 0:\n            B = B // 2\n        # If B is odd, subtract A from B\n        else:\n            B = B - A\n        # Increment the count of operations\n        count += 1\n\n    # Return the count of operations\n    return count\n\n"}
{"task_id": "MBPP/219", "completion": "\n    # sort the tuple in ascending order\n    test_tup = sorted(test_tup)\n    \n    # extract the first k elements\n    min_k = test_tup[:K]\n    \n    # extract the last k elements\n    max_k = test_tup[-K:]\n    \n    return min_k, max_k\n"}
{"task_id": "MBPP/220", "completion": "\n    # Create a list of special characters\n    special_chars = [' ', ',', '.', ':']\n    \n    # Create a dictionary to store the count of each special character\n    char_count = {char: 0 for char in special_chars}\n    \n    # Count the occurrences of each special character in the text\n    for char in text:\n        if char in special_chars:\n            char_count[char] += 1\n    \n    # Sort the special characters by their count in descending order\n    special_chars_sorted = sorted(special_chars, key=lambda x: char_count[x], reverse=True)\n    \n    # Replace the n occurrences of the most frequent special character with a space\n    for i in range(n):\n        if i < len(special_chars_sorted):\n            text = text.replace(special_chars_sorted[i], ' ', 1)\n    \n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    if not test_tuple:\n        return True\n    first_element_type = type(test_tuple[0])\n    return all(isinstance(element, first_element_type) for element in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    if (n == 0):\n        return False\n    if (arr[n // 2] == x):\n        return True\n    if (n % 2 == 0):\n        if (arr[n // 2 - 1] == x or arr[n // 2] == x):\n            return True\n        else:\n            return False\n    else:\n        if (arr[n // 2] == x):\n            return True\n        else:\n            return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    # Create a number with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply AND operation with n\n    result = n & mask\n    # If result is 0, all bits in the given range are unset\n    return result == 0\n"}
{"task_id": "MBPP/229", "completion": "\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos\n\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(' ', char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    return 2 * 3.1415 * r * h\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n"}
{"task_id": "MBPP/235", "completion": "\n    count = 0\n    while n > 0:\n        if count % 2 == 0:\n            n |= (1 << count)\n        count += 1\n        n >>= 1\n    return n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Your code here\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            for k in range(1, N+1):\n                if i + j + k == K:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/237", "completion": "\n    # Create a counter object\n    counter_obj = Counter(test_list)\n\n    # Iterate over the counter object\n    for key, value in counter_obj.items():\n        # If the value is not equal to the length of the list, return False\n        if value != len(test_list):\n            return False\n\n    # If the loop completes without returning False, return True\n    return True\n\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    # Initialize a 2D list to store the number of sequences for each pair of m and n\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Base case: There is 1 sequence of length 1 for any m\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for i in range(2, m + 1):\n        for j in range(2, n + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i // 2][j - 1]\n\n    # The total number of sequences is the sum of sequences of length n for all m\n    total_sequences = sum(dp[i][n] for i in range(1, m + 1))\n\n    return total_sequences\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to count the occurrences of each element\n    count_dict = {}\n    for tup in lst:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # Sort the list based on the occurrence of each element\n    lst.sort(key=lambda tup: min([count_dict[elem] for elem in tup]))\n\n    return lst\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.ceil(math.sqrt(N))\n    return root * root\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Create two arrays to store maximum sum increasing and decreasing subsequence ending at each index\n    inc = [0]*n\n    dec = [0]*n\n\n    # Initialize maximum sum increasing and decreasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n\n    # Compute maximum sum increasing subsequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Compute maximum sum decreasing subsequence ending at each index\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Compute maximum sum bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    if number == 0:\n        return 0\n    estimate = number / 2.0\n    while True:\n        next_estimate = (estimate + number / estimate) / 2\n        if abs(next_estimate - estimate) < 1e-10:  # precision of 10^-10\n            break\n        estimate = next_estimate\n    return estimate\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    L = [[0 for x in range(n)]for y in range(n)]\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. cl is length of substring\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n\n"}
{"task_id": "MBPP/250", "completion": "\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/251", "completion": "\n    return [element for i in list for element in (i, element)]\n"}
{"task_id": "MBPP/252", "completion": "\n    polar_coordinates = []\n    for number in numbers:\n        real_part = number.real\n        imaginary_part = number.imag\n        magnitude = cmath.polar(number)[0]\n        angle = cmath.polar(number)[1]\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[ae]\\w+', text, re.IGNORECASE)\n    return words\n\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n\ncolors = ['red', 'green', 'blue']\nn = 2"}
{"task_id": "MBPP/256", "completion": "\n    count = 0\n    for num in range(2, n):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    odd_nums = list(filter(lambda x: x % 2 != 0, array_nums))\n    return len(odd_nums)\n"}
{"task_id": "MBPP/259", "completion": "\n    res = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "MBPP/261", "completion": "\n    res = tuple(map(lambda x, y: x / y if y != 0 else 'Error', test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age < 0:\n        return \"Invalid age\"\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l ** 2\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"}
{"task_id": "MBPP/268", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 6*n - 5\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    # Check if the list is empty\n    if not test_list:\n        return \"The list is empty\"\n    \n    # Extract the last element from each tuple\n    result = [t[-1] for t in test_list]\n    \n    return result\n"}
{"task_id": "MBPP/273", "completion": "\n    res = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize result\n    res = 0\n\n    # Loop for all even numbers\n    for i in range(0, n + 1, 2):\n        # Calculate binomial coefficient\n        # and add it to the result\n        res += math.comb(n, i)\n\n    return res\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 1:\n        return 0\n    a = a[m:] + a[:m]\n    n -= 1\n    m = m % n\n    return get_Position(a, n, m)\n\n"}
{"task_id": "MBPP/276", "completion": "\n    pi = 3.14\n    volume = pi * r * r * h\n    return volume\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n"}
{"task_id": "MBPP/278", "completion": "\n    res = {}\n    for idx, ele in enumerate(test_tup):\n        if ele not in res:\n            res[ele] = idx\n    return res\n"}
{"task_id": "MBPP/279", "completion": "\n    if n < 1:\n        return \"Invalid input\"\n    return n * 9\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n\n"}
{"task_id": "MBPP/281", "completion": "\n    res = len(test_list) == len(set(test_list))\n    return res\n"}
{"task_id": "MBPP/282", "completion": "\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    return result\n\n"}
{"task_id": "MBPP/283", "completion": "\n    # Your code here\n    return True if all(n.count(str(i)) <= i for i in range(10)) else False\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/286", "completion": "\n    max_current = max_global = a[0]\n    for i in range(1, n * k):\n        max_current = max(a[i % n], max_current + a[i % n])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for i in range(N):\n        if (arr[i] * arr[i]) % P == 1:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/289", "completion": "\n    # Write your code here\n    return N % 7\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same, diff = k, k * (k - 1)\n    total = same + diff\n    for i in range(3, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        total = (same + diff) % 1000000007\n    return total\n"}
{"task_id": "MBPP/292", "completion": "\n    if n < m:\n        return \"Error\"\n    else:\n        return n // m\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"}
{"task_id": "MBPP/295", "completion": "\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a defaultdict to store the sum of elements for each key\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tup in stdata:\n        # Add the elements of the tuple to the sum_dict\n        for num in tup:\n            sum_dict[num] += num\n\n    # Find the maximum aggregate value\n    max_aggregate_value = max(sum_dict.values())\n\n    return max_aggregate_value\n\n"}
{"task_id": "MBPP/300", "completion": "\n    # Initialize a 2D array to store intermediate results\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: There is only one sequence of length 2n with all bits equal\n    dp[0][0] = 1\n    \n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            # If the first i bits are the same as the last i bits,\n            # then the number of sequences is the sum of the number of sequences\n            # with the first i-1 bits the same and the last i-1 bits the same,\n            # and the number of sequences with the first i-1 bits the same and the last i bits different.\n            if j == i:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    \n    # The answer is the number of sequences with the first n bits the same as the last n bits\n    return dp[n][n]\n"}
{"task_id": "MBPP/301", "completion": "\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max(dict_depth(value) for value in d.values())\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return 0\n    count = 0\n    while n > 0:\n        n = n & (n - 1)\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/303", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    for i in range(len(rotations)):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]\n"}
{"task_id": "MBPP/305", "completion": "\n    pattern = '^p.*p$'\n    result = [word for word in words if re.match(pattern, word)]\n    return result\n\n"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0] if k == 0 else 0\n\n    if k == 0:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index])\n\n    if a[index] > a[index - 1]:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n\n"}
{"task_id": "MBPP/307", "completion": "\n    tuplex = deepcopy(tuplex)\n    return tuplex[m:n]\n\n"}
{"task_id": "MBPP/308", "completion": "\n    # Check if the lists are empty\n    if not nums1 or not nums2:\n        return 0\n\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the N largest numbers in each list\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= nums1[i]\n        product2 *= nums2[i]\n\n    # Return the larger product\n    return max(product1, product2)\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1.split(','))\n"}
{"task_id": "MBPP/311", "completion": "\n    if n == 0:\n        return 1\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            return (1 << count) | n\n        count += 1\n        n >>= 1\n    return n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_nums = [num for num in list1 if num > 0]\n    return pos_nums\n"}
{"task_id": "MBPP/314", "completion": "\n    # Check if grid is valid\n    if not grid or len(grid) != 2 or len(grid[0]) != n:\n        return None\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the grid\n    for i in range(n):\n        current_sum += max(grid[0][i], grid[1][i])\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n\n"}
{"task_id": "MBPP/316", "completion": "\n    start, end = 0, len(A) - 1\n    last_found = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            last_found = mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return last_found\n"}
{"task_id": "MBPP/317", "completion": "\n    def encode_group(group):\n        count = len(group)\n        element = group[0]\n        if count == 1:\n            return element\n        else:\n            return (count, element)\n\n    # grouping and encoding\n    encoded_groups = [encode_group(list(group)) for _, group in groupby(alist)]\n    return encoded_groups\n\n"}
{"task_id": "MBPP/318", "completion": "\n    s.sort()\n    return s[-1] + s[-2] + s[-3]\n"}
{"task_id": "MBPP/319", "completion": "\n    return re.findall(r'\\b\\w{5}\\b', text)\n\n"}
{"task_id": "MBPP/320", "completion": "\n    # Calculate the sum of the first n natural numbers\n    sum_natural = n * (n + 1) // 2\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the difference between the square of the sum and the sum of the squares\n    difference = sum_natural ** 2 - sum_squares\n    \n    return difference\n"}
{"task_id": "MBPP/321", "completion": "\n    # Check if the input is a number\n    if not isinstance(s, (int, float)):\n        return \"Input must be a number\"\n    \n    # Check if the number is positive\n    if s <= 0:\n        return \"Input must be a positive number\"\n    \n    # Find the demlo number\n    demlo = 0\n    while s > 0:\n        s = s / 2\n        demlo += 1\n    \n    return demlo\n"}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    positions = [index for index, value in enumerate(list1) if value == min_value]\n    return positions\n"}
{"task_id": "MBPP/323", "completion": "\n    while out_of_place < n:\n        if cur % 2 == 0:\n            if arr[out_of_place] >= 0:\n                out_of_place += 1\n            else:\n                arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n                if out_of_place - 1 >= 0 and arr[out_of_place - 1] < 0:\n                    out_of_place += 1\n        else:\n            if arr[out_of_place] < 0:\n                out_of_place += 1\n            else:\n                arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n                if out_of_place - 1 >= 0 and arr[out_of_place - 1] >= 0:\n                    out_of_place += 1\n        cur += 1\n    return arr\n"}
{"task_id": "MBPP/324", "completion": "\n    result = 0\n    for i in range(0, len(test_tuple), 2):\n        result += test_tuple[i]\n    return result\n"}
{"task_id": "MBPP/325", "completion": "\n    # Base cases\n    if n <= 3:\n        return n\n\n    # This array will store minimum squares required for all numbers up to n\n    dp = [float('inf')] * (n + 1)\n\n    # Zero has zero squares\n    dp[0] = 0\n\n    # Precompute the minimum squares for all numbers up to n\n    for i in range(1, n + 1):\n        # Check squares of numbers 1 to i\n        for j in range(1, i + 1):\n            square = j * j\n            if square > i:\n                break\n            else:\n                dp[i] = min(dp[i], 1 + dp[i - square])\n\n    return dp[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_dict = defaultdict(int)\n    for word in test_list:\n        word_dict[word] += 1\n    return max(word_dict, key=word_dict.get)\n\n\ntest_list = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\"]"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/328", "completion": "\n    # Check if m and n are within the list length\n    if m < 0 or n < 0 or m + n > len(list1):\n        return \"Invalid input\"\n\n    # Perform rotation\n    rotated_list = list1[m:n+1] + list1[:m] + list1[n+1:]\n\n    return rotated_list\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    # getting length of sublist\n    n = len(sub_li)\n \n    # using bubble sort to sort the sublist\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            # swapping if the element found is greater\n            # than the next element\n            if sub_li[j][1] > sub_li[j + 1][1]:\n                sub_li[j], sub_li[j + 1] = sub_li[j + 1], sub_li[j]\n    return sub_li\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = 'world\\W*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # Initialize maximum divisor\n    max_divisor = 1\n\n    # Iterate over the range\n    for i in range(x, y + 1):\n        # Check if i is a divisor of y\n        if y % i == 0:\n            # Check if i is greater than max_divisor\n            if i > max_divisor:\n                # Update max_divisor\n                max_divisor = i\n\n    # Return the maximum divisor\n    return max_divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [num for num in lst if num > 0]\n    lst.sort()\n    return sum(lst[:3]) if len(lst) >= 3 else sum(lst)\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_value = float('-inf')\n    min_range = float('inf')\n    start = 0\n    end = 0\n\n    for i in range(len(list)):\n        heappush(min_heap, Node(list[i][0], i, 0))\n        max_value = max(max_value, list[i][0])\n\n    while True:\n        node = heappop(min_heap)\n        if max_value - node.value < min_range:\n            min_range = max_value - node.value\n            start = node.value\n            end = max_value\n\n        if node.index + 1 == len(list[node.list_num]):\n            break\n\n        next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n        heappush(min_heap, next_node)\n        max_value = max(max_value, next_node.value)\n\n    return [start, end]\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i**0.5 == int(i**0.5):\n            if i % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)\n"}
{"task_id": "MBPP/347", "completion": "\n    count = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if i * i <= m and j * j <= n:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/348", "completion": "\n    # Create a 2D array to store intermediate results\n    dp = [[0 for _ in range(r+1)] for _ in range(n+1)]\n\n    # Fill the dp array\n    for i in range(n+1):\n        for j in range(min(i, r)+1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + j * dp[i-1][j-1]\n\n    return dp[n][r]\n"}
{"task_id": "MBPP/349", "completion": "\n    if string.count('0') == len(string) or string.count('1') == len(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/350", "completion": "\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the character with the maximum frequency\n    max_freq = max(freq.values())\n\n    # Calculate the minimum length of the string after removing one occurrence of the character with the maximum frequency\n    min_length = len(s) - max_freq\n\n    return min_length\n"}
{"task_id": "MBPP/351", "completion": "\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if (arr[i] == arr[j]):\n                count += 1\n        if (count == k):\n            return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty dictionary\n    char_dict = {}\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is already in the dictionary, return False\n        if char in char_dict:\n            return False\n        # Otherwise, add the character to the dictionary\n        else:\n            char_dict[char] = 1\n\n    # If we get here, all characters were unique\n    return True\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    tn = a + (n - 1) * d\n    return tn\n\n"}
{"task_id": "MBPP/355", "completion": "\n    count = 0\n    for i in range(1, radius + 1):\n        for j in range(i, radius + 1):\n            if (i * j) <= radius:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list)\n    return max_val\n"}
{"task_id": "MBPP/358", "completion": "\n    result = list(map(lambda x, y: x % y if y != 0 else 'div by zero', nums1, nums2))\n    return result\n"}
{"task_id": "MBPP/359", "completion": "\n    import math\n    d = (b**2) - (4*a*c)\n    if d < 0:\n        return \"No real roots\"\n    elif d == 0:\n        return \"One real root\"\n    else:\n        return \"Two real roots\"\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n"}
{"task_id": "MBPP/362", "completion": "\n    max_count = 0\n    max_item = None\n    for item in nums:\n        count = nums.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"}
{"task_id": "MBPP/363", "completion": "\n    res = [ele + K for ele in test_list]\n    return (res)\n"}
{"task_id": "MBPP/364", "completion": "\n    if ch == '0':\n        return '1'\n    else:\n        return '0'\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return \"List must contain at least two elements\"\n    \n    max_product = list_nums[0] * list_nums[1]\n    \n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right):\n        return True\n    return False\n\n"}
{"task_id": "MBPP/368", "completion": "\n    res = tuple(ele for sub in test_tup for ele in sub*N)\n    return (res)\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (h * (l + w))\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return left_element\n    if left_element == right_element:\n        if A[left_element] == left_element + 1:\n            return left_element + 1\n        else:\n            return left_element\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element + 1:\n        return smallest_missing(A, mid_element + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_element)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    \n    permutations = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining_str = str[:i] + str[i+1:]\n        for perm in permute_string(remaining_str):\n            permutations.append(char + perm)\n    return permutations\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for ele in test_tup:\n        if ele not in res:\n            res.append(ele)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    # check if list is empty\n    if not test_list:\n        return []\n    # move last element to first position\n    test_list = [test_list[-1]] + test_list[:-1]\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n"}
{"task_id": "MBPP/382", "completion": "\n    start, end = 0, len(A) - 1\n    while start <= end:\n        if A[start] <= A[end]:\n            return start\n        mid = (start + end) // 2\n        next_index = (mid + 1) % len(A)\n        prev_index = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next_index] and A[mid] <= A[prev_index]:\n            return mid\n        elif A[mid] <= A[end]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n"}
{"task_id": "MBPP/383", "completion": "\n    result = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        # Check if the current bit position is even\n        if count % 2 == 0:\n            # Set the bit at the current position in result\n            result |= (1 << count)\n        count += 1\n        temp >>= 1\n    # XOR the original number with the result to toggle the even bits\n    return n ^ result\n"}
{"task_id": "MBPP/384", "completion": "\n    # Your code here\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_brackets = 0\n    close_brackets = 0\n    swaps = 0\n    imbalance = 0\n    for char in s:\n        if char == '(':\n            open_brackets += 1\n            if imbalance > 0:\n                swaps += imbalance\n                imbalance -= 1\n        elif char == ')':\n            close_brackets += 1\n            imbalance = close_brackets - open_brackets\n    return swaps\n"}
{"task_id": "MBPP/387", "completion": "\n    if N[-1] in '02468ACE':\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for i in range(len(l1)):\n        result.append({\n            \"name\": l1[i],\n            \"age\": l2[i],\n            \"city\": l3[i]\n        })\n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    # Initialize a dictionary to store the computed values\n    memo = {0: 0, 1: 1}\n\n    def helper(x):\n        # If the value has already been computed, return it\n        if x in memo:\n            return memo[x]\n\n        # Otherwise, compute the value using the recursive formula and store it in the dictionary\n        memo[x] = max(helper(x//2) + x//4 + x//5, x)\n        return memo[x]\n\n    # Call the helper function with the input n and return the result\n    return helper(n)\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = max(input_list, key=lambda x: len(x))\n    return max_length\n\n"}
{"task_id": "MBPP/394", "completion": "\n    res = len(test_tup) == len(set(test_tup))\n    return (res)\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    sum_digits = 0\n    for num in nums:\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n    return sum_digits\n"}
{"task_id": "MBPP/399", "completion": "\n    res = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/400", "completion": "\n    res = {}\n    for sub in test_list:\n        for ele in sub:\n            if ele not in res:\n                res[ele] = 1\n            else:\n                res[ele] += 1\n    res = dict(sorted(res.items(), key=lambda item: item[1], reverse=True))\n    return list(res.keys())\n"}
{"task_id": "MBPP/401", "completion": "\n    res = tuple(map(lambda x, y: (x[0] + y[0], x[1] + y[1]), test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/402", "completion": "\n    # initialize array\n    C = [0 for i in range(r+1)]\n    C[0] = 1  # nC0 is 1\n\n    # compute value of [nCr]%p using bottom-up approach\n    for i in range(1, n+1):\n        # Compute next row of pascal triangle using the previous row\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j-1]) % p\n\n    return C[r]\n\n"}
{"task_id": "MBPP/403", "completion": "\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n\ntuplex = (1, 2, 3, 4, 5)\ntuple1 = (1, 2, 3, 4, 5)"}
{"task_id": "MBPP/406", "completion": "\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    if count % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"}
{"task_id": "MBPP/407", "completion": "\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            right = digits[i:]\n            smallest_bigger = min(filter(lambda x: x > right[0], right))\n            right.remove(smallest_bigger)\n            right.sort()\n            digits[i:] = [smallest_bigger] + right\n            return int(\"\".join(digits))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\n\n"}
{"task_id": "MBPP/409", "completion": "\n    # Check if list is empty\n    if not list1:\n        return None\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Initialize minimum product and result tuple\n    min_product = float('inf')\n    result = ()\n\n    # Iterate over the list and find minimum product pairs\n    for i in range(len(list1) - 1):\n        product = list1[i] * list1[i + 1]\n        if product < min_product:\n            min_product = product\n            result = (list1[i], list1[i + 1])\n\n    return result\n"}
{"task_id": "MBPP/410", "completion": "\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r'(?<!^)_([a-zA-Z])', lambda match: match.group(1).upper(), word)\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    result = [t[n] for t in list1]\n    return result\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return \"Invalid Input\"\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    result = max_product\n    for i in range(2, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n\n    # Initialize the dp array\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n\n    # Fill dp array\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i // 2] + dp[i // 3] + dp[i // 4])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/417", "completion": "\n    result = []\n    for i in Input:\n        if i not in result:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/418", "completion": "\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"}
{"task_id": "MBPP/419", "completion": "\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/421", "completion": "\n    res = ''.join(map(str, test_tup))\n    return res\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        sum_of_cube += i**3\n    average = sum_of_cube / n\n    return average\n\nn = 5"}
{"task_id": "MBPP/423", "completion": "\n    # Create a table to store intermediate results\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Fill the table in bottom-up manner\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            # Gold at cell (i, j) can be obtained by taking gold from cell (i, j+1), (i+1, j+1), and (i-1, j+1)\n            # The maximum gold that can be obtained is the maximum of these three golds plus the gold at cell (i, j)\n            if j == n-1:\n                dp[i][j] = gold[i][j]\n            else:\n                dp[i][j] = gold[i][j] + max(dp[i][j+1], dp[i+1][j+1], dp[i-1][j+1]) if i >= 0 and i < m and j >= 0 and j < n else 0\n\n    # The maximum gold that can be obtained is the maximum value in the first column of the table\n    return max(dp[i][0] for i in range(m))\n"}
{"task_id": "MBPP/424", "completion": "\n    result = [item[-1] for item in test_tuple]\n    return result\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    return pattern.sub(r'\\3-\\2-\\1', dt)\n\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    res = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return (res)\n"}
{"task_id": "MBPP/430", "completion": "\n    directrix = c - ((b**2) + 1) * 4 * a\n    return directrix\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    return median\n"}
{"task_id": "MBPP/433", "completion": "\n    return all(number > i for i in arr)\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = 'ab+?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/435", "completion": "\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [num for num in list1 if num < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    even_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            even_str += str1[i]\n    return even_str\n\n"}
{"task_id": "MBPP/438", "completion": "\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                res += 1\n    return res\n\n"}
{"task_id": "MBPP/439", "completion": "\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n"}
{"task_id": "MBPP/440", "completion": "\n    adverb_positions = []\n    for match in re.finditer(r\"\\w+ly\", text):\n        adverb_positions.append((match.start(), match.end()))\n    return adverb_positions\n\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n"}
{"task_id": "MBPP/442", "completion": "\n    if not isinstance(nums, array):\n        raise ValueError(\"Input should be an array of integers\")\n\n    total_nums = len(nums)\n    positive_nums = sum(1 for num in nums if num > 0)\n\n    return positive_nums / total_nums\n\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    res = [sub[K:] for sub in test_list]\n    return tuple(res)\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return res\n"}
{"task_id": "MBPP/446", "completion": "\n    # Create a Counter object for the list\n    list_counter = Counter(lst)\n\n    # Create a Counter object for the tuple\n    tuple_counter = Counter(tup)\n\n    # Combine the two counters\n    combined_counter = list_counter + tuple_counter\n\n    return combined_counter\n\n"}
{"task_id": "MBPP/447", "completion": "\n    cube = lambda x: x ** 3\n    return list(map(cube, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate area of triangle formed by 3 points\n    area = 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n    \n    # If area is 0, then points are collinear and triangle is not valid\n    if area == 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/450", "completion": "\n    result = []\n    for i in range(0, len(str), l):\n        result.append(str[i:i+l])\n    return result\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s+', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n // i) % 2 == 0 and i != n // i:\n                sum += n // i\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    patterns = 'z'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n\n"}
{"task_id": "MBPP/460", "completion": "\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n\n"}
{"task_id": "MBPP/464", "completion": "\n    return all(value == n for value in dict.values())\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n            (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    return find_peak_util(arr, (mid + 1), high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    octalNum = 0\n    multiplier = 1\n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * multiplier\n        deciNum //= 8\n        multiplier *= 10\n    return octalNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    # Initialize the list to store maximum product till each index\n    max_prod = [0] * n\n    max_prod[0] = arr[0]\n\n    # Iterate over the array\n    for i in range(1, n):\n        # Initialize the maximum product till current index\n        max_prod[i] = arr[i]\n\n        # Iterate over the previous elements\n        for j in range(i):\n            # If the current element is greater than the previous element\n            if arr[i] > arr[j]:\n                # Update the maximum product till current index\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n\n    # Return the maximum product\n    return max(max_prod)\n"}
{"task_id": "MBPP/469", "completion": "\n    if not price or k <= 0:\n        return 0\n\n    n = len(price)\n    if k >= n // 2:\n        return quick_profit(price)\n\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    return dp[k][n - 1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = tuple(map(lambda x, y: x + y, test_tup, test_tup[1:]))\n    return res\n"}
{"task_id": "MBPP/471", "completion": "\n    remainder = 1\n    for i in range(lens):\n        remainder = (remainder * (arr[i] % n)) % n\n    return remainder\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l)+1))\n"}
{"task_id": "MBPP/473", "completion": "\n    res = tuple(set(test_list1) & set(test_list2))\n    return res\n"}
{"task_id": "MBPP/474", "completion": "\n    str1 = str1.replace(ch, newch)\n    return str1\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(sorted(nums)[:2])\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub('[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n / 10\n    return int(n)\n"}
{"task_id": "MBPP/480", "completion": "\n    max_count = 0\n    max_char = ''\n    for char in str1:\n        if str1.count(char) > max_count:\n            max_count = str1.count(char)\n            max_char = char\n    return max_char\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = '[A-Z][a-z]+'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    factorial = 1\n    number = 1\n    while True:\n        factorial *= number\n        if factorial % x == 0:\n            return number\n        number += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    res = [ele for ele in test_list1 if ele not in test_list2]\n    return tuple(res)\n"}
{"task_id": "MBPP/485", "completion": "\n    # Convert the number to a string\n    str_n = str(n)\n    \n    # Check if the string is equal to its reverse\n    if str_n == str_n[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return nCr(n-1, r-1) + nCr(n-1, r)\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4\n\n"}
{"task_id": "MBPP/489", "completion": "\n    # Your code here\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - math.pow(r, n)) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the side length of the hexagon\n    side_length = radius * math.sqrt(3)\n\n    # Calculate the horizontal distance between the centers of two adjacent hexagons\n    horizontal_distance = 1.5 * radius\n\n    # Calculate the vertical distance between the centers of two adjacent hexagons\n    vertical_distance = 0.75 * radius\n\n    # Calculate the number of hexagons in the grid\n    num_hexagons_x = int((endx - startx) / horizontal_distance)\n    num_hexagons_y = int((endy - starty) / vertical_distance)\n\n    # Calculate the starting and ending coordinates of the grid\n    startx -= horizontal_distance\n    starty -= vertical_distance\n    endx += horizontal_distance\n    endy += vertical_distance\n\n    # Initialize the list of hexagon coordinates\n    hexagon_coordinates = []\n\n    # Calculate the coordinates of the hexagons in the grid\n    for i in range(num_hexagons_y):\n        y = starty + i * vertical_distance\n        if i % 2 == 0:\n            x = startx\n        else:\n            x = startx + 0.75 * radius\n        for j in range(num_hexagons_x):\n            hexagon_coordinates.append((x, y))\n            x += horizontal_distance\n\n    return hexagon_coordinates\n\n"}
{"task_id": "MBPP/494", "completion": "\n    res = int(\"\".join(map(str, test_tup)), 2)\n    return res\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub('[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    hq.heapify(nums)\n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums\n\n"}
{"task_id": "MBPP/497", "completion": "\n    slant_height = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_surface_area = math.pi * r * slant_height\n    surface_area = base_area + lateral_surface_area\n    return surface_area\n\n"}
{"task_id": "MBPP/498", "completion": "\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    concatenated_string = ''.join(list)\n    return concatenated_string\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    for i in range(1, n):\n        for j in range(1, m):\n            if i + j == n and i * j == m:\n                return i, j\n    return None\n\n"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/505", "completion": "\n    count = 0\n    for i in range(len(A)):\n        if A[i] == 0:\n            count += 1\n    for i in range(count):\n        A.remove(0)\n        A.append(0)\n    return A\n\n"}
{"task_id": "MBPP/506", "completion": "\n    # Initialize a 2D array to store intermediate results\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Fill the dp array\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + j * dp[i-1][j-1]\n\n    return dp[n][k]\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n"}
{"task_id": "MBPP/509", "completion": "\n    if n % 2 == 0:\n        return \"Invalid Input\"\n    else:\n        sum = 0\n        count = 0\n        for i in range(1, n+1, 2):\n            sum += i\n            count += 1\n        return sum / count\n"}
{"task_id": "MBPP/510", "completion": "\n    arr.sort()\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > k:\n            break\n        else:\n            count += 1\n            j = i + 1\n            while j < n and arr[j] * arr[i] < k:\n                count += 1\n                j += 1\n    return count\n\n"}
