{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_cost += item * 1.5\n        if item > 5.0:\n            total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost_per_item = 5.0\n    additional_shipping_cost_per_kg = 10.0\n    local_factor = 1.0\n    international_factor = 1.5\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_shipping_cost += base_shipping_cost_per_item + (item - 1.0) * additional_shipping_cost_per_kg\n\n    if location == 'Local':\n        total_shipping_cost *= local_factor\n    elif location == 'International':\n        total_shipping_cost *= international_factor\n\n    return round(total_shipping_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str) -> List[str]:\n        if len(input_string) == 0:\n            return ['']\n        if len(input_string) == 1:\n            return [chr(ord('a') + int(input_string) - 1)]\n        result = []\n        for i in range(1, len(input_string) + 1):\n            prefix = input_string[:i]\n            suffix = input_string[i:]\n            for combination in get_combinations(suffix):\n                result.append(prefix + combination)\n        return result\n\n    return get_combinations(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_height:\n            max_height = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    elif grid[x][y] == -1:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for i in code_sequence:\r\n        if i == 0:\r\n            y += 1\r\n        elif i == 1:\r\n            x += 1\r\n        elif i == 2:\r\n            y -= 1\r\n        else:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\n<jupyter_output>\n<empty_output>\n<jupyter_text>\nTesting the function\n<jupyter_code>"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    new_canvas = ''\n    for char in canvas:\n        if char == 'P':\n            new_canvas += '*'\n        elif char == '#':\n            new_canvas += char\n        else:\n            return 'Invalid canvas'\n\n    return new_canvas\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.replace(',', '')\n    string = string.replace('.', '')\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_sounds = animal_string.split()\r\n    for sound in animal_sounds:\r\n        if sound[0] in animals:\r\n            animals[sound[0]] += 1\r\n    return list(animals.values())\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location} Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {', '.join(fruits)} from {location} Marvelous!\"\n    else:\n        return f\"Oh are those {', '.join(fruits[:-1])} and from {location} Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_all_elements = sum(flux_values)\n    result = max_occurrence * sum_all_elements\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count = Counter(elems)\n    rarest_element = min(count.values())\n\n    for elem in elems:\n        if count[elem] == rarest_element:\n            return elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            if char == 'a':\n                alias += 'e'\n            elif char == 'e':\n                alias += 'i'\n            elif char == 'i':\n                alias += 'o'\n            elif char == 'o':\n                alias += 'u'\n            elif char == 'u':\n                alias += 'a'\n        elif char in consonants:\n            if char == 'z':\n                alias += 'b'\n            else:\n                alias += chr(ord(char) + 1)\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    wizards_magic_power = [wizard[1] for wizard in wizards]\n    wizards_names = [wizard[0] for wizard in wizards]\n    for wizard in wizards:\n        wizard[1] = wizard[1] * 2\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards.pop(0)\n        if len(wizards) == 0:\n            return 'The dragon won!'\n    return wizards[0][0]\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_multiple_of_seven(n: int) -> bool:\n        return n % 7 == 0\n\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        if is_multiple_of_seven(i) and sum_of_digits(i) == 7:\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    def find_vampires(matrix):\n        vampire_positions = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 2:\n                    vampire_positions.append((i, j))\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if (i, j) in vampire_positions:\n                    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                        if 0 <= x < len(matrix) and 0 <= y < len(matrix[i]) and matrix[x][y] == 1:\n                            vampire_positions.append((x, y))\n        return len(vampire_positions)\n\n    return find_vampires(m)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        return [','.join(map(str, list(range(1, n+1)) + list(range(n, 0, -1)))) for _ in range(n)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    def is_word_in_diagonal(grid, word):\n        n = len(grid)\n        for i in range(n):\n            for j in range(n):\n                if i + len(word) <= n and j + len(word) <= n:\n                    if word == ''.join(grid[i+k][j+k] for k in range(len(word))):\n                        return True\n                if i - len(word) >= 0 and j + len(word) <= n:\n                    if word == ''.join(grid[i-k][j+k] for k in range(len(word))):\n                        return True\n                if i - len(word) >= 0 and j - len(word) >= 0:\n                    if word == ''.join(grid[i-k][j-k] for k in range(len(word))):\n                        return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word) and not is_word_in_diagonal(grid, word):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    # 1 light year = 9.461 x 10^12 km\n    # 1 year = 3.1556926 x 10^16 km\n    # 1 km = 3.2408 x 10^12 km/s\n    # 1 year = 0.3048 x 10^12 km\n    # 1 year = 0.262184 x 10^15 km\n    # 1 year = 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    prime_map = {chr(97 + i): primes[i] for i in range(26)}\n\n    return ''.join(str(prime_map.get(ch, ch)) for ch in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Create a dictionary to map English letters to their corresponding symbols\n    english_to_alien = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '^',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '<', 'p': '>', 'q': '?', 'r': ';', 's': '~', 't': '@', 'u': '$',\n        'v': '^', 'w': '&', 'x': '#', 'y': '(', 'z': ')', ' ': '='\n    }\n\n    # Translate the English word to the alien language\n    alien_word = ''.join(english_to_alien[char] for char in english_word.lower())\n\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\r\n    words = re.findall(r'\\b\\w+\\b', text)\r\n    word_count = words.count(word)\r\n    if word_count == 0:\r\n        return (0, \"Assume sentences end at period >>> \" + text)\r\n    else:\r\n        sentences = re.split(r'[.!\\?]', text)\r\n        max_sentence_length = max(len(s.strip()) for s in sentences)\r\n        max_sentence = next(s for s in sentences if len(s.strip()) == max_sentence_length)\r\n        return (word_count, max_sentence)\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupy"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(pos):\n        x, y = pos\n        if x < 0 or y < 0 or x >= len(maze) or y >= len(maze[0]):\n            return False\n        if maze[x][y] == 1:\n            return False\n        return True\n\n    def get_neighbors(pos):\n        x, y = pos\n        return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\n    def dfs(maze, start, end, path=[]):\n        x1, y1 = start\n        x2, y2 = end\n        path = path + ['right' if x1<x2 else 'left' if x1>x2 else 'down' if y1<y2 else 'up' ]\n        if len(path) == len(maze) * len(maze[0]):\n            return path\n        for pos in get_neighbors(start):\n            if is_valid(pos):\n                maze[pos[0]][pos[1]] = 1\n                newpath = dfs(maze, pos, end, path)\n                if newpath:\n                    return newpath\n        return []\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.20 + 2500\n    else:\n        return (income - 45000) * 0.30 + 13000\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n"}
{"task_id": "EvoEval/30", "completion": "\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    playlist = [song for song in playlist if 'Rock' not in song]\n    shuffled_playlist = []\n    np.random.seed(seed)\n    for i in range(playlist_length):\n        if 'Rock' not in playlist[i]:\n            shuffled_playlist.append(playlist[np.random.randint(0, playlist_length) % playlist_length])\n        else:\n            shuffled_playlist.append(playlist[i])\n    return shuffled_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    pass\n"}
{"task_id": "EvoEval/34", "completion": "\n    if n < 1 or m < 1 or m > n:\n        return \"Invalid input\"\n\n    transformation_percentages = []\n    for i in range(1, n + 1):\n        if i == m:\n            transformation_percentages.append(0)\n        elif i < m:\n            transformation_percentages.append(0)\n        else:\n            if i == m + 1:\n                transformation_percentages.append(10)\n            else:\n                transformation_percentages.append(10 + (i - m - 1) * 2)\n\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    if email.count(\".\") < 1:\n        return False\n    if email[0] == \"@\" or email[-1] == \".\":\n        return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    integral_coefficients = [0]*n\n    for i in range(n):\n        integral_coefficients[i] = xs[i]/(i+1)\n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n            else:\n                transformed_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd;)\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    if any(emoticon in sentence for emoticon in emoticons):\n        return sentence\n    else:\n        return \"No emoticons here\"\n"}
{"task_id": "EvoEval/39", "completion": "\n    def asciiArt(n, s):\n        if n <= 0 or not s:\n            return \"\"\n        s = s * n\n        rows = [s[i:i+len(s)//n] for i in range(0, len(s), len(s)//n)]\n        return \"\\n\".join([\"*\" + row + \"*\" for row in rows]) + \"\\n\"\n\n    print(asciiArt(1, \"abc\"))\n    print(asciiArt(2, \"xy\"))\n    print(asciiArt(3, \"123111222333\"))\n\nasciiArt(1, \"abc\")\nasciiArt(2, \"xy\")\nasciiArt(3, \"123111222333\")\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter"}
{"task_id": "EvoEval/40", "completion": "\n\n    def potion_mixing(potions, target):\n        potions = [p.strip().split() for p in potions]\n        potions = [[p[0], int(p[1])] for p in potions]\n        potions.sort(key=lambda x: (x[1], x[0]))\n        result = []\n        total = 0\n        for potion in potions:\n            if total + potion[1] > target:\n                break\n            result.append(potion[0])\n            total += potion[1]\n        return result\n\n    print(potion_mixing([\"Healing Potion 10 \"Strength Potion 5Invisibility Potion 7\"], 15))\n    print(potion_mixing([\"Luck Potion 3 \"Wisdom Potion 8 \"Fire Resistance Potion 12 20 ['Fire Resistance Potion 12 2 \"Water Breathing Potion 6 \"Night Vision Potion 5 10 [] Swiftness 3Potion Le"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\r\n        items.sort(reverse=True)\r\n        return items[1] if items and items[1] != None else -1\r\n\r\n    legendary_item_found = False\r\n    legendary_item_rarity = -1\r\n\r\n    for item in player_input:\r\n        if item == 5:\r\n            legendary_item_found = True\r\n            legendary_item_rarity = item\r\n\r\n    if legendary_item_found:\r\n        return (legendary_item_found, legendary_item_rarity)\r\n    else:\r\n        return (legendary_item_found, find_second_most_valuable_item(player_input))\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the remaining fuel\n    remaining_fuel = fuel - (spaceship_weight * planet_gravity)\n\n    # If the remaining fuel is less than 0, return 'Insufficient fuel'\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n\n    # Calculate the duration of the trip\n    duration = distance / speed\n\n    # Calculate the fuel consumption of the trip\n    trip_fuel = (spaceship_weight * planet_gravity) * duration\n\n    # If the trip fuel is more than the remaining fuel, return 'Insufficient fuel'\n    if trip_fuel > remaining_fuel:\n        return 'Insufficient fuel'\n\n    # Otherwise, return the remaining fuel after the trip\n    return round(remaining_fuel - trip_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    # sort the list in descending order\n    q.sort(reverse=True)\n    # check if the sum of the weights of the unicorns and dragons is less than or equal to the carrying capacity of dragons\n    if sum(q[:2]) <= e:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        max_height = arr[0]\n        count = 1\n        for i in range(1, len(arr)):\n            if arr[i] > max_height:\n                max_height = arr[i]\n                count += 1\n        return count\n\n    print(find_castle([1,2,3,2,5,3,6,4,8,2,7])) # 10\n    print(find_castle([9,8,7,8])) # 2\n    print(find_castle([5,5,5,5,5])) # 4\n\nfind_castle()\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def decrypt_message(test_case):\n        original_message = test_case[1]\n        decrypted_message = []\n        for word in original_message:\n            if \"Take the cannoli.\" in word.lower():\n                decrypted_message.append(\"Take the cannoli.\")\n            else:\n                decrypted_message.append(word)\n        return decrypted_message\n\n    return [decrypt_message(test_case) for test_case in test_cases]\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n\n    inventory = {}\n\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n\n    return inventory\n\n"}
{"task_id": "EvoEval/49", "completion": "\n\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', \n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '011111', \n        'K': '1010', 'L': '1100', 'M': '1110', 'N': '1001', 'O': '010011', \n        'P': '1111', 'Q': '0111011', 'R': '00011', 'S': '000', 'T': '1000', \n        'U': '001', 'V': '0001011', 'W': '1001101110', 'X': '1001100', \n        'Y': '100011', 'Z': '11110', '0': '01111', '1': '00111', '2': '00111', \n        '3': '0000110000100000', '4': '10001100', '5': '11001100', \n        '6': '1101100', '7': '111100', '8': '011111', '9': '001111'\n    }\n\n    morse_code_reverse_dict = {v: k for k, v in morse_code_dict.items()}\n\n    def decode_morse(msg):\n        decoded_msg = ''\n        word = ''\n        for char in msg:\n            if char == ' ':\n                decoded_msg += ' '\n                word = ''\n            else:\n                word += char\n                if word in morse_code_reverse_dict"}
{"task_id": "EvoEval/50", "completion": "\n\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', \n                       'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', \n                       'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', \n                       'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', \n                       'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', \n                       'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', \n                       '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', \n                       '8': '---..', '9': '----.', ' ': ' '}\n\n    morse_code = ''\n    for char in text.upper():\n        morse_code += morse_code_dict[char] + ' '\n\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        if string[i] in list_of_alphabets:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n        else:\n            result += string[i]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/53", "completion": "\n\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    trans_vowels = 'ejpmvnzJPRVSZ'\n    trans_consonants = 'gftthhklllmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    trans = ''\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i % 2 == 0:\n                trans += trans_vowels[vowels.index(s[i])]\n            else:\n                trans += trans_vowels[vowels.index(s[i])].upper()\n        elif s[i] in consonants:\n            if i % 2 == 0:\n                trans += trans_consonants[consonants.index(s[i])]\n            else:\n                trans += trans_consonants[consonants.index(s[i])].upper()\n        else:\n            if s[i] == '?':\n                if i % 2 == 0:\n                    trans += '!'\n                else:\n                    trans += '?'\n            else:\n                trans += s[i]\n\n    return trans\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_coordinates.append((i, j))\n    return star_coordinates\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    return ''.join(shift_char(c, shift) for c, shift in zip(message, (shift + i for i in range(len(message)))))\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b-...': '.-..', 'c-.-.': '.-..', 'd-..': '.-..', 'e': '.', 'f': '..-.', \n    'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', \n    'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', \n    'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' / '}\n\n    result = \"\"\n    for char in s:\n        if char in morse_code_dict:\n            result += morse_code_dict[char] + \" \"\n        else:\n            result += char + \" \"\n\n    return result.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        new_dish = ''\n        for i, char in enumerate(dish):\n            if char.isalpha():\n                new_dish += spell[i % len(spell)]\n            else:\n                new_dish += char\n        return new_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_menu[transform_dish(dish, magic_spell)] = price\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation_table = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:] + vowels[0] * 2 + consonants[0] * 2)\n    earth_phrase = earth_phrase.lower()\n    translated_phrase = earth_phrase.translate(translation_table)\n    words = translated_phrase.split()\n    translated_phrase = ' '.join(word.capitalize() if i == 0 else word for i, word in enumerate(words))\n    translated_phrase = translated_phrase.replace(' ', '@')\n    translated_phrase = translated_phrase.replace('x', 'y')\n    translated_phrase = translated_phrase.replace('z', 'b')\n    translated_phrase = translated_phrase.replace('b', 'z')\n    translated_phrase = translated_phrase.replace('@', '@')\n    translated_phrase = ' '.join(word.capitalize() if i == 0 else word for i, word in enumerate(translated_phrase.split()))\n    translated_phrase = translated_phrase.replace(' ', '@')\n    translated_phrase = translated_phrase.replace('x', 'y')\n    translated_phrase = translated_phrase.replace('z', 'b')\n    translated_phrase = translated_phrase.replace('b', 'z')\n    translated_phrase = translated_phrase.replace('@', '@')\n    translated_phrase = translated_phrase.replace('xy', 'zx')\n    translated_phrase = translated_phrase.replace('yz', 'cb')\n    translated_phrase = translated_phrase.replace('xz', 'dz')\n    translated_phrase = translated_phrase.replace('cz', 'ex')\n    translated_phrase = translated_phrase.replace('dz', 'fx')\n    translated_phrase = translated_phrase.replace('ex', 'gx')\n    translated_phrase = translated_phrase.replace('fx', 'hx')\n    translated_phrase = translated_phrase.replace('gx', 'ix')\n    translated_phrase = translated_phrase"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    result = []\n    for ingredient, recipes in ingredient_dict.items():\n        result.append((ingredient, recipes))\n\n    result.sort(key=lambda x: (-x[1], x[0]))\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def is_sugar(loc, sugar_locations):\n        return loc in sugar_locations\n\n    def move(ant, direction, sugar_locations):\n        if direction == \"right\":\n            return ant + 1, is_sugar(ant + 1, sugar_locations)\n        else:\n            return ant - 1, is_sugar(ant - 1, sugar_locations)\n\n    def is_valid(ant, sugar_locations):\n        return 0 <= ant < len(sugar_locations) and is_sugar(ant, sugar_locations)\n\n    def count_happy_ants(path_length, sugar_locations, ant_positions):\n        ants = [(pos, dir) for pos, dir in ant_positions]\n        count = 0\n        for ant in ants:\n            pos, dir = ant\n            if is_valid(pos, sugar_locations):\n                count += 1\n                pos, dir = move(pos, dir, sugar_locations)\n                while is_valid(pos, sugar_locations) and is_sugar(pos, sugar_locations):\n                    pos, dir = move(pos, dir, sugar_locations)\n        return count\n\n    return count_happy_ants(path_length, sugar_locations, ant_positions)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = list(s)\n\n    for i in range(len(new_s)):\n        if i % 2 != 0:\n            if new_s[i].isalpha():\n                if new_s[i].lower() in vowels:\n                    new_s[i] = new_s[i].lower().replace(new_s[i], chr(ord(new_s[i])+1))\n                else:\n                    new_s[i] = new_s[i].lower().replace(new_s[i], chr(ord(new_s[i])-1))\n            elif new_s[i] in vowels:\n                new_s[i] = chr(ord(new_s[i])+1)\n            elif new_s[i] in consonants:\n                new_s[i] = chr(ord(new_s[i])-1)\n\n    return ''.join(new_s)\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = str(conversion_factor * quantity)\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\r\n        if p == 0:\r\n            return []\r\n        else:\r\n            if p % 2 == 0:\r\n                return [p] + create_pyramid(p-2)\r\n            else:\r\n                return [p] + create_pyramid(p-3)\r\n\r\n    return create_pyramid(p)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    def add_ingredients(menu, order):\n        new_menu = {}\n        for food, ingredients in menu.items():\n            new_ingredients = []\n            for ingredient in ingredients:\n                if ingredient in order:\n                    new_ingredients.extend(order[ingredient])\n                else:\n                    new_ingredients.append(ingredient)\n            new_menu[food] = new_ingredients\n        return new_menu\n\n    def remove_ingredients(menu, order):\n        new_menu = {}\n        for food, ingredients in menu.items():\n            new_ingredients = []\n            for ingredient in ingredients:\n                if ingredient not in order:\n                    new_ingredients.append(ingredient)\n                else:\n                    for o_ingredient in order[ingredient]:\n                        if o_ingredient not in ingredients:\n                            new_ingredients.append(o_ingredient)\n            new_menu[food] = new_ingredients\n        return new_menu\n\n    if not order:\n        return menu\n    elif \"remove\" in order:\n        return remove_ingredients(menu, order)\n    elif \"add\" in order:\n        return add_ingredients(menu, order)\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    vowel_count = 0\n\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        j = sum(c.isdigit() for c in s)\n        result.append(f\"Once in a kingdom lived a magical creature with the name of '{s}' who was known for telling {j} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\r\n        # Your code here\r\n        pass\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    special_chars = '.,?! '\n    output_str = ''\n    for i, c in enumerate(input_str):\n        if c in vowels:\n            output_str += chr(ord(c) + 1)\n        elif c in consonants:\n            output_str += chr(ord(c) + 1)\n        elif c in digits:\n            output_str += str((int(c) + 1) % 10)\n        elif c in special_chars:\n            if i % 2 == 0:\n                output_str += c\n            else:\n                output_str += '!' if c == '?' else ' '\n        else:\n            output_str += c\n    return output_str\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    max_len = max(lst)\n    for i in range(max_len):\n        level = []\n        for j in lst:\n            if i < j:\n                level.append('#')\n            else:\n                level.append(' ')\n        pyramid.append(''.join(level))\n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(num):\n        points = 0\n        while num != 1:\n            num = num / k if num % k == 0 else num - 1\n            points += 1\n        return points\n\n    sequence.sort(reverse=True)\n    for i in range(len(sequence)):\n        sequence[i] = calculate_points(sequence[i])\n\n    sequence.sort(reverse=True)\n    return sequence\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = n // 2\n    res = []\n    for i in range(m):\n        for j in range(m):\n            res.extend([mat[i][j], mat[i][n-1-j], mat[n-1-i][j], mat[n-1-i][n-1-j]])\n    if n % 2 != 0:\n        res.append(mat[m][m])\n    return res\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            if prices[j] > prices[i]:\n                max_profit = max(max_profit, prices[j]-prices[i])\n    return max_profit if max_profit > 0 else 0\n\nprices = [1, 5, 2, 8, 7, 3]\ndays = 5"}
{"task_id": "EvoEval/80", "completion": "\n    start_row, start_column = 0, 0\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    path = [(start_row, start_column)]\n    for instruction in instructions:\n        dx, dy = directions[instruction]\n        new_row, new_column = start_row + dx, start_column + dy\n        if (0 <= new_row < len(map)) and (0 <= new_column < len(map[0])) and map[new_row][new_column] != 'X':\n            start_row, start_column = new_row, new_column\n            path.append((start_row, start_column))\n        elif map[start_row][start_column] == 'E':\n            return path\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list)-1):\n        for j in range(len(word_list[i])-1):\n            if word_list[i][j] not in alien_dictionary or word_list[i+1][j] not in alien_dictionary:\n                return \"INCORRECT\"\n            elif alien_dictionary.index(word_list[i][j]) > alien_dictionary.index(word_list[i+1][j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    def zodiac_sign(date):\n        month, day = map(int, date.split('-')[1].split(' ')[0].split('-'))\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            return 'Aries'\n        elif (month == 5 and day >= 20) or (month == 6 and day <= 20):\n            return 'Gemini'\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 21):\n            return 'Leo'\n        elif (month == 8 and day >= 22) or (month == 9 and day <= 19):\n            return 'Virgo'\n        elif (month == 10 and day >= 22) or (month == 11 and day <= 21):\n            return 'Libra'\n        elif (month == 12 and day >= 22) or (month == 1 and day <= 19):\n            return 'Scorpio'\n        elif (month == 2 and day >= 19) or (month == 3 and day <= 20):\n            return 'Sagittarius'\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            return 'Aquarius'\n        elif (month == 6 and day >= 21) or (month == 7 and day <= 21):\n            return 'Pisces'\n        else:\n            return 'Unknown'\n\n    def zodiac_element(birthdays):\n        result = {}\n        for date in birthdays:\n            sign = zodiac_sign(date)\n            if sign != 'Unknown':\n                if sign in result:\n                    result[sign] += 1\n                else:\n                    result[sign] = 1\n        return result\n\n    if not birthdays:\n        return None\n    return zodiac_element(birthdays)\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def dfs(tree, path, res):\n        if not tree:\n            return\n        if not tree.get('value'):\n            for sub_tree in [tree.get(key) for key in ('left', 'right') if key in tree]:\n                dfs(sub_tree, path, res)\n        else:\n            path.append(tree['value'])\n            if not tree.get('left') and not tree.get('right'):\n                res.append(path[:])\n            else:\n                for sub_tree in [tree.get(key) for key in ('left', 'right') if key in tree]:\n                    dfs(sub_tree, path, res)\n            path.pop()\n\n    res = []\n    dfs(tree, [], res)\n    return res\n\n\ntree = {1: {24}, 5: {}}"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        # Your code here\n\n    # Test cases\n    print(min_moves((2,2), [[]]))  # 4\n    print(min_moves((3,3), [[]]))  # 6\n    print(min_moves((3,3), [[]]))  # -1\n    print(min_moves((1,1), [[]]))  # 2\n    print(min_moves((2,2), [[]]))  # 4\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_key(movie):\n        return (-movies_dict[movie][0], movies_dict[movie][1])\n\n    return sorted(movies_dict, key=sort_key)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r','lovena!!!ritisieh']]))\n    print(word_spiral([['a','b','c'],['d','e','f'],['g','h','i']]))\n    print(word_spiral([]))\n\nword_spiral(arr)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def calculate_population_density(planet_population):\n        if planet_population is None:\n            return None\n        else:\n            planet, size, population = planet_population\n            if size is None:\n                return None\n            else:\n                return round(population / size, 2)\n\n    return {f\"{planet} {calculate_population_density(planet_population)}\" for planet, planet_population in dict_of_planets.items() if calculate_population_density(planet_population) is not None}\n\n"}
{"task_id": "EvoEval/89", "completion": "\n\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_target(a, b, c):\n        return a == b or is_adjacent(a, c) or (is_odd(a) and is_odd(b))\n\n    def is_alive(a):\n        return a != 0\n\n    def remove_alive(lst, val):\n        return [i for i in lst if i != val]\n\n    def remove_target(lst, val):\n        return [i for i in lst if not is_target(i, val, ray)]\n\n    def remove_adjacent(lst, val):\n        return [i for i in lst if not is_adjacent(i, val)]\n\n    def remove_odd(lst, val):\n        return [i for i in lst if not is_odd(i)]\n\n    def remove_zero(lst, val):\n        return [i for i in lst if i != val]\n\n    def remove_ray(lst, val):\n        return [i for i in lst if i != val and not is_target(i, val, ray)]\n\n    def remove_alive_except_ray(lst, val):\n        return [i for i in lst if i != val and not is_target(i, val, ray) and is_alive(i)]\n\n    def remove_adjacent_except_ray(lst, val):\n        return [i for i in lst if i != val and not is_target(i, val, ray) and not is_adjacent(i, ray)]\n\n    def remove_odd_except_ray(lst, val):\n        return [i for i in lst if i != val and not is_target(i, val, ray) and not is_odd(i)]\n\n    def remove_zero_except_ray(lst, val):\n        return [i for i in lst if i != val and not is_target(i, val, ray) and"}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s.strip()]\n\n    def get_combinations(lst):\n        if len(lst) == 1:\n            return [(lst,)]\n        result = []\n        for i in range(len(lst)):\n            m = lst[i]\n            remLst = lst[:i] + lst[i+1:]\n            for p in get_combinations(remLst):\n                result.append((m,) + p)\n        return result\n\n    num1 = get_digits(s1)\n    num2 = get_digits(s2)\n    all_combinations = get_combinations(num1 + num2)\n    return sum(sum(c) for c in all_combinations)\n"}
{"task_id": "EvoEval/91", "completion": "\n    def validate_action(action):\n        if action[0] == 'Launch':\n            return action[0] == 'Launch' and action[1] > 0\n        elif action[0] == 'Move':\n            return action[1] > 0\n        elif action[0] == 'Land':\n            return action[1] < 0\n        else:\n            return False\n\n    status = 'On Ground'\n    for action in spaceship_data:\n        if validate_action(action):\n            if action[0] == 'Launch':\n                status = 'In Space'\n            elif action[0] == 'Move':\n                status = 'On Ground' if action[1] > 0 else 'In Space'\n            elif action[0] == 'Land':\n                status = 'On Ground' if action[1] < 0 else 'In Space'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i):\n            layer += ' ' * (n - i - j - 1) + 'A' * (2 * i + 1) + ' ' * (n - i - j - 1)\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_string(s, n):\n        return ''.join(shift_char(c, n) for c in s)\n\n    n_values.sort()\n    return ''.join(shift_string(m, n) for m, n in zip(message, n_values))\n"}
{"task_id": "EvoEval/94", "completion": "\n    def spell_sort(spell):\n        return ' '.join(sorted(spell.split(), key=len))\n\n    return [spell_sort(spell) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n\n    def is_square(m):\n        return all(len(row) == len(m) for row in m)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_digits(n):\n        if n < 0:\n            return 0\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    def is_magic(index, value):\n        return value == index * value and get_product_digits(value) == index\n\n    magic_indices = []\n    for index, value in enumerate(lst):\n        if is_magic(index, value):\n            magic_indices.append(index)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = \"Asia\"\n    encountered_humans = []\n    continents_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n\n    for human in continents_order:\n        if human in humans:\n            if humans[human] == alien_continent:\n                encountered_humans.append(human)\n        if human in encountered_humans:\n            continue\n        if human in humans:\n            if humans[human] in continents_order[continents_order.index(alien_continent)+1:]:\n                encountered_humans.append(human)\n    return sorted(encountered_humans)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    music = music - 1\n    while len(players) > 1:\n        for i in range(len(players)):\n            if music % len(players) == i:\n                players.pop(i)\n        music = music // len(players)\n    return players\n\n"}
