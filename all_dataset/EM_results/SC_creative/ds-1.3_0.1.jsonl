{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n            total_cost += (1.5 * item) + 5\n        else:\n            total_cost += item + 5\n        if item > 5:\n            total_cost += 10\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    additional_weight_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        item_weight = item\n        if item > 5:\n            item_weight = 5\n        total_cost += base_shipping_cost + item_weight * additional_weight_cost\n\n    if location == 'Local':\n        total_cost *= local_factor\n    elif location == 'National':\n        total_cost *= national_factor\n    elif location == 'International':\n        total_cost *= international_factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str) -> List[str]:\n        if len(input_string) == 0:\n            return []\n        if len(input_string) == 1:\n            return [input_string]\n        result = []\n        for i in range(1, len(input_string) + 1):\n            first_digit = input_string[:i]\n            remaining_string = input_string[i:]\n            for combination in get_combinations(remaining_string):\n                result.append(first_digit + combination)\n        return result\n\n    return get_combinations(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    else:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    def is_shangri_la(code_sequence: list[int]) -> str:\r\n        x, y = 0, 0\r\n        for i in code_sequence:\r\n            if i == 0:\r\n                y += 1\r\n            elif i == 1:\r\n                x += 1\r\n            elif i == 2:\r\n                y -= 1\r\n            elif i == 3:\r\n                x -= 1\r\n            if x == 0 and y == 0:\r\n                return 'Shangri-La found'\r\n        return 'Shangri-La not found'\r\n\r\n    return is_shangri_la(code_sequence)\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    new_canvas = list(canvas)\n    count_p = 0\n    for i in range(len(canvas)):\n        if new_canvas[i] == 'P':\n            count_p += 1\n        elif new_canvas[i] == '-' and (i == 0 or new_canvas[i-1] == '#' or new_canvas[i-1] == 'P'):\n            new_canvas[i] = '*'\n\n    if count_p > 1:\n        return 'Invalid canvas'\n\n    return ''.join(new_canvas)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.replace('.', '')\n    string = string.replace(',', '')\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = animal_string.split()\r\n    count_dict = {}\r\n    for animal in animals:\r\n        if animal[0] in count_dict:\r\n            count_dict[animal[0]] += 1\r\n        else:\r\n            count_dict[animal[0]] = 1\r\n    count_list = [count_dict[i] for i in count_dict if i in ['C', 'D', 'B']]\r\n    return count_list\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_all_elements = sum(k * v for k, v in count.items())\n    return sum_all_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count_dict = Counter(elems)\n    min_count = min(count_dict.values())\n    rarest_elements = [k for k, v in count_dict.items() if v == min_count]\n\n    return rarest_elements[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower())+1)%5]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower())+1)%21]\n        else:\n            new_name += char\n    return new_name\n"}
{"task_id": "EvoEval/15", "completion": "\n    def count_card_values(hand: list):\n        counts = [0]*13\n        for card in hand:\n            value = int(card[0])\n            if value == 1:\n                counts[0] += 1\n            elif value == 11:\n                counts[10] += 1\n            elif value == 12:\n                counts[11] += 1\n            elif value == 13:\n                counts[12] += 1\n            else:\n                counts[value-1] += 1\n        return counts\n\n    def count_card_types(counts: list):\n        counts_sorted = sorted(counts, reverse=True)\n        quadruple = counts_sorted[0]\n        five_of_a_kind = quadruple if quadruple > 2 else 0\n        four_of_a_kind = five_of_a_kind if five_of_a_kind > 1 else 0\n        triple = four_of_a_kind if four_of_a_kind > 1 else 0\n        pair = triple if triple > 0 else 0\n        return quadruple, five_of_a_kind, four_of_a_kind, triple, pair\n\n    counts = count_card_values(hand)\n    quadruple, five_of_a_kind, four_of_a_kind, triple, pair = count_card_types(counts)\n    score = quadruple*10000 + five_of_a_kind*5000 + four_of_a_kind*4000 + triple*1000 + pair*100\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_multiple_of_seven(n: int) -> bool:\n        return n % 7 == 0\n\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        if is_multiple_of_seven(i) and sum_of_digits(i) == 7:\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = sum(row.count(2) for row in m)\n    humans = sum(row.count(1) for row in m)\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(str(i))\n        if i != n:\n            result.append(str(n - i + 1))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9.461 * 10**12\n    distance = t * v\n    return distance / light_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n\n    primes = [next_prime(i) for i in range(26)]\n    result = ''\n    for c in s:\n        if 'a' <= c <= 'z':\n            result += str(primes[ord(c) - ord('a')])\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Create a dictionary to map English alphabets to their corresponding symbols\n    english_to_alien = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?',\n        'p': ' ', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}',\n        'x': '[', 'y': ']', 'z': '|'\n    }\n\n    # Translate the English word to the alien language\n    alien_word = ''.join([english_to_alien[char] for char in english_word.lower()])\n\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('.')\n    sentences = [s.strip() for s in sentences]\n\n    # Initialize the word frequency and the sentence with max frequency\n    max_frequency = 0\n    max_sentence = \"\"\n\n    # Iterate over the sentences\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n        # Count the frequency of the word\n        frequency = words.count(word)\n        # Update the max frequency and the max sentence if necessary\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n\n    return (max_frequency, max_sentence) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(pos):\n        return 0 <= pos[0] < len(maze) and 0 <= pos[1] < len(maze[0]) and maze[pos[0]][pos[1]] == 0\n\n    def get_neighbors(pos):\n        return [(pos[0] - 1, pos[1]), (pos[0] + 1, pos[1]), (pos[0], pos[1] - 1), (pos[0], pos[1] + 1)]\n\n    def dfs(maze, pos, end, path):\n        if pos == end:\n            return path\n        for neighbor in get_neighbors(pos):\n            if is_valid(neighbor):\n                path.append('right' if neighbor[1] > pos[1] else 'left')\n                path.append('down' if neighbor[0] > pos[0] else 'up')\n                maze[neighbor[0]][neighbor[1]] = -1\n                path = dfs(maze, neighbor, end, path)\n                if path:\n                    return path\n                path.pop()\n        return []\n\n    maze = [row[:] for row in maze]\n    path = []\n    return dfs(maze, start, end, path)\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25\n    else:\n        return (income - 45000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Initialize the seed\n    seed = 7\n    # Create a new list to store the shuffled playlist\n    shuffled_playlist = []\n    # Get the length of the playlist\n    playlist_length = len(playlist)\n    # Loop through the playlist\n    for i in range(playlist_length):\n        # If the song title does not contain the word \"Rock\", add it to the shuffled playlist\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[i])\n        # If the song title contains the word \"Rock\", skip it\n        else:\n            continue\n    # Loop through the shuffled playlist\n    for i in range(playlist_length):\n        # If the song title does not contain the word \"Rock\", add it to the shuffled playlist\n        if \"Rock\" not in shuffled_playlist[i]:\n            # Swap the song title with the song title at the index `seed % playlist_length`\n            shuffled_playlist[i], shuffled_playlist[seed % playlist_length] = shuffled_playlist[seed % playlist_length], shuffled_playlist[i]\n        # Update the seed\n        seed = (seed * 16807) % 2147483647\n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # The base case: only one way to reach the top\n    ways[0] = 1\n    # For each magic stone, try to reach each step\n    for stone in magic_stones:\n        for i in range(stone, n + 1):\n            ways[i] += ways[i - stone]\n    # The result is the number of ways to reach the top\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    if m > n or m < 1:\n        return \"Invalid input\"\n\n    transformation_percentages = []\n    for i in range(1, n + 1):\n        if i == m:\n            transformation_percentages.append(0)\n        elif i < m:\n            transformation_percentages.append(0)\n        else:\n            if i == m + 1:\n                transformation_percentages.append(10)\n            else:\n                transformation_percentages.append(10 + (i - m) * 10)\n\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    at_position = email.find(\"@\")\n    if at_position == 0 or at_position == len(email) - 1:\n        return False\n    dot_position = email.rfind(\".\")\n    if dot_position == at_position + 1:\n        return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    integral_coefficients = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        integral_coefficients[i] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            new_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        else:\n            new_s += char\n    return new_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\" : \"\ufffd\ufffd\",\n    }\n\n    for emoticon, unicode_emo in emoticons.items():\n        sentence = sentence.replace(emoticon, unicode_emo)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    def asciiArt(n, s):\n        if n <= 0 or not s:\n            return \"\"\n        result = []\n        for i in range(n):\n            for j in range(len(s)):\n                result.append(s[j] * n)\n            result.append(\"\\n\")\n        return \"\".join(result)\n\n    print(asciiArt(1, \"abc\"))\n    print(asciiArt(2, \"xy\"))\n    print(asciiArt(3, \"123\"))\n\nasciiArt(1, \"abc\")\nasciiArt(2, \"xy\")\nasciiArt(3, \"123\")\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we need to sort the potions by their power level in descending order.\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n\n    # Then, we iterate over the sorted potions.\n    for potion in potions:\n        # If the current potion's power level is greater than or equal to the target,\n        # we return the potion.\n        if int(potion.split()[1]) >= target:\n            return [potion]\n\n    # If we've gone through all the potions and haven't returned, it means we can't reach the target.\n    # So, we return an empty list.\n    return []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\r\n        legendary_item_found = False\r\n        legendary_item_rarity = -1\r\n        if len(player_input) > 0:\r\n            legendary_item_rarity = max(player_input)\r\n            if legendary_item_rarity == 5:\r\n                legendary_item_found = True\r\n        return (legendary_item_found, legendary_item_rarity)\r\n\r\n    print(find_legendary_item([1, 2, 3, 4, 5]))\r\n    print(find_legendary_item([5]))\r\n    print(find_legendary_item([1, 3, 4]))\r\n    print(find_legendary_item([1, 2, 5]))\r\n    print(find_legendary_item([1, 1, 1, 1, 1]))\r\n    print(find_legendary_item([]))\r\n    print(find_legendary_item([4, 4, 4, 4, 4]))\r\n    print(find_legendary_item([5, 5, 5, 5, 5]))\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    else:\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\r\n        total_weight = sum(q)\r\n        if total_weight > w:\r\n            return False\r\n        elif total_weight > e:\r\n            return True\r\n        else:\r\n            return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        max_view = 0\n        current_view = 0\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                current_view += 1\n            else:\n                max_view = max(max_view, current_view)\n                current_view = 0\n        max_view = max(max_view, current_view)\n        return max_view\n\n    print(find_castle([1,2,3,2,5,3,6,4,8,2,7])) # 10\n    print(find_castle([1,2,3,5,6,7,8,9])) # 8\n    print(find_castle([9,8,7,6,5,4,3,2,1])) # 8\n    print(find_castle([5,5,5,5,5])) # 4\n\nfind_castle()\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            for word in test:\n                if word[0].lower() == word[0]:\n                    result.append(word[0:2].lower())\n        return result\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]), 'Take the cannoli.')\n    print(hidden_message([['This', 'is', 'a', 'test', 'case', '??']]), 'Take the cannoli.')\n\nhidden_message()\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n\n    inventory = {}\n\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n\n    return {k: v for k, v in inventory.items() if v > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', \n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', \n        'K': '101', 'L': '1001', 'M': '11', 'N': '10', 'O': '111', \n        'P': '0110', 'Q': '1101', 'R': '101', 'S': '000', 'T': '1', \n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', \n        'Z': '1100', '1': '01111', '2': '00111', '3': '00011', \n        '4': '00001', '5': '00000', '6': '10000', '7': '11000', \n        '8': '11100', '9': '11110', '0': '11111'\n    }\n\n    def decode_morse(morse_code):\n        decoded_string = ''\n        for character in morse_code.split(' '):\n            if character == '/':\n                decoded_string += ' '\n            else:\n                decoded_string += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(character)]\n        return decoded_string\n\n    return decode_morse(msg)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n    'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', \n    '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', \n    '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \n    ' ': ' ', '(': '-.--.', ')': '-.--.-'}\n\n    text = text.upper()\n    morse_code = ''\n    for char in text:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        elif char == ' ':\n            morse_code += ' '\n        else:\n            return 'Invalid character'\n    return morse_code\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n"}
{"task_id": "EvoEval/53", "completion": "\n\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    transformed = ''\n\n    for i, char in enumerate(s):\n        if char in vowels:\n            transformed += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            transformed += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif i % 2 == 0 and char == '?':\n            transformed += '!'\n        elif i % 2 == 1 and char == '?':\n            transformed += '!'\n        else:\n            transformed += char\n\n    return transformed\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    def shift_string(s, shift):\n        return ''.join(shift_char(c, shift) for c in s)\n\n    return shift_string(message, shift)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', \n                       'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', \n                       'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', \n                       's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n                       'y': '-.--', 'z': '--..', ' ': ' / '}\n\n    morse_code = \"\"\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for char in dish:\n            if char.isalpha():\n                transformed_dish += spell[ord(char) % len(spell)]\n            else:\n                transformed_dish += char\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation_table = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:])\n    translated_phrase = earth_phrase.translate(translation_table)\n    translated_phrase = translated_phrase.replace(' ', '@')\n    translated_phrase = translated_phrase.title()\n    translated_phrase = translated_phrase.replace('A', '@').replace('E', '@').replace('I', '@').replace('O', '@').replace('U', '@')\n    if earth_phrase[0] in vowels:\n        translated_phrase = translated_phrase.replace('@', 'xy')\n    else:\n        translated_phrase = translated_phrase.replace('@', 'yz')\n    return translated_phrase\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    result = []\n    for ingredient, count in ingredient_dict.items():\n        result.append((ingredient, count))\n\n    result.sort(key=lambda x: (-x[1], x[0]))\n\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def is_sugar_present(sugar_locations, ant_position):\n        return ant_position in sugar_locations\n\n    def move_ant(ant_position, ant_direction):\n        if ant_direction == \"right\":\n            return ant_position + 1\n        else:\n            return ant_position - 1\n\n    def is_valid_position(path_length, ant_position):\n        return 0 < ant_position < path_length\n\n    happy_ants_count = 0\n    for ant_position, ant_direction in ant_positions:\n        if is_sugar_present(sugar_locations, ant_position) and is_valid_position(path_length, move_ant(ant_position, ant_direction)):\n            happy_ants_count += 1\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += s[i].swapcase()\n            elif s[i] in consonants:\n                if i > 0 and s[i-1] in consonants:\n                    result += chr(ord(s[i-1])-1)\n                else:\n                    result += chr(ord(s[i])+2)\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\r\n        pyramid = [p]\r\n        while p > 0:\r\n            if p % 2 == 0:\r\n                p -= 2\r\n                pyramid.append(p)\r\n            else:\r\n                p -= 3\r\n                pyramid.append(p)\r\n        return pyramid[::-1]\r\n\r\n    print(create_pyramid(9))\r\n\r\n    # The function should return a list containing the number blocks in each layer from bottom to. \r\n    # The element at index i in the list represents the number of blocks in the (i+1)th layer from the bottom.\r\n    # Examples:\r\n    # create_pyramid(10)\r\n    # [10, 8, 6, 4, 2]\r\n    #\r\n    # create_pyramid(9)\r\n    # [9, 6, 4, 2]\r\n    #\r\n    # create_pyramid(1)\r\n    # [1]\r\n    #\r\n    # create_pyramid(2)\r\n    # [2]\r\n    #\r\n    # create_pyramid(3)\r\n    # [3]\r\n    #\r\n    # create_pyramid(4)\r\n    # [4]\r\n    #\r\n    # create_pyramid(5)\r\n    # [5]\r\n    #\r\n    # create_pyramid(6)\r\n    # [6]\r\n    #\r\n    # create_pyramid(7)\r\n    # [7]\r\n    #\r\n    # create_pyramid(8)\r\n    # [8]\r\n    #\r\n    # create_pyramid(9)\r\n    # [9, 6, 4, 2]\r\n    #\r\n    # create_pyramid(10)\r\n    # [10, 8, 6, 4, 2]\r\n    #\r\n    # create_pyramid(11)\r\n    # [11, 8"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    def add_ingredients(ingredients_to_add, ingredients_to_remove):\n        return list(set(ingredients_to_add) - set(ingredients_to_remove))\n\n    def remove_ingredients(ingredients_to_remove, ingredients_to_add):\n        return list(set(ingredients_to_remove) | set(ingredients_to_add))\n\n    def update_order(menu, order):\n        for dish, details in order.items():\n            if details.get(\"remove\"):\n                ingredients_to_remove = details.get(\"remove\")\n                ingredients_to_add = add_ingredients(menu[dish], ingredients_to_remove)\n                menu[dish] = remove_ingredients(menu[dish], ingredients_to_remove)\n            if details.get(\"add\"):\n                ingredients_to_add = details.get(\"add\")\n                menu[dish] = add_ingredients(menu[dish], ingredients_to_add)\n        return menu\n\n    return update_order(menu, order)\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(1, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n\n    def is_possible(arr):\n        if not arr:\n            return True\n\n        rotated = arr[1:] + [arr[0]]\n        swapped = [arr[0]]\n\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                if arr[i] in swapped:\n                    return False\n                swapped.append(arr[i])\n            else:\n                if arr[i] in rotated:\n                    return False\n                rotated.append(arr[i])\n\n        return True\n\n    return is_possible(arr)\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift_letter(c):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            new_c = chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n            return new_c\n        else:\n            return c\n\n    encrypted_s = ''.join(map(shift_letter, s))\n    vowels_count = sum(1 for c in encrypted_s if c.lower() in 'aeiou')\n    return (encrypted_s, vowels_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    new_str = ''\n    for char in s:\n        if char in cipher:\n            new_str += cipher[char]\n        else:\n            new_str += char\n    return new_str\n"}
{"task_id": "EvoEval/75", "completion": "\n\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    special_chars = '.,?! '\n    result = ''\n\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        elif input_str[i] in special_chars:\n            if i%2==0:\n                result += input_str[i]\n        else:\n            result += input_str[i]\n\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(max(lst), 0, -1):\n        row = ''.join('#' * (sum(lst) + i - 1))\n        pyramid.append(row)\n        lst.pop(0)\n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def calculate_points(n, k):\n        points = 0\n        while n != 1:\n            n = n // k\n            points += n\n        return points\n\n    sequence.sort(reverse=True)\n    result = []\n    for num in sequence:\n        result.append(calculate_points(num, k))\n    return result\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = n // 2\n    res = []\n    for i in range(m):\n        for j in range(m):\n            res.extend([mat[i][j], mat[i][n-1-j], mat[n-1-i][j], mat[n-1-i][n-1-j]])\n    if n % 2 != 0:\n        res.append(mat[m][m])\n    return res\n"}
{"task_id": "EvoEval/79", "completion": "\n    def maxProfit(self, prices):\n        if not prices:\n            return 0\n\n        min_price = prices[0]\n        max_profit = 0\n\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n\n        return max_profit\n\n    prices = [1, 5, 2, 8, 7, 3]\n    days = 5\n    print(maxProfit(prices, days))  # Output: 7\n\n    prices = [1, 2, 3, 4, 5]\n    days = 5\n    print(maxProfit(prices, days))  # Output: 4\n\n    prices = [7, 6, 4, 3, 1]\n    days = 5\n    print(maxProfit(prices, days))  # Output: 0\n\n    prices = [1, 2, 3, 4, 5]\n    days = 1\n    print(maxProfit(prices, days))  # Output: 0\n\n    prices = [5, 4, 3, 2, 1]\n    days = 1\n    print(maxProfit(prices, days))  # Output: 0\n\n    prices = [1, 2, 3, 4, 5]\n    days = 2\n    print(maxProfit(prices, days))  # Output: 4\n\n    prices = [5, 4, 3, 2, 1]\n    days = 2\n    print(maxProfit(prices, days))  # Output: 0\n\n    prices = [1, 2, 3, 4, 5]\n    days = 3\n    print(maxProfit(prices, days))  # Output: 4\n\n    prices = [5, 4, 3, 2, 1]\n    days = 3\n    print(maxProfit(prices, days))  # Output: "}
{"task_id": "EvoEval/80", "completion": "\n    start_row, start_column = 0, 0\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    path = [(start_row, start_column)]\n\n    for instruction in instructions:\n        dx, dy = directions[instruction]\n        new_row, new_column = start_row + dx, start_column + dy\n\n        if (new_row, new_column) in path:\n            return path\n\n        if new_row < 0 or new_column < 0 or new_row >= len(map) or new_column >= len(map[0]):\n            continue\n\n        if map[new_row][new_column] == 'X':\n            continue\n\n        path.append((new_row, new_column))\n        start_row, start_column = new_row, new_column\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dictionary = alien_dictionary.lower()\n    for i in range(len(word_list)-1):\n        if word_list[i] > word_list[i+1]:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aries\": [\"March 21 \u2013 April 19\", \"February 19 \u2013 March 20\"],\n        \"Taurus\": [\"April 20 \u2013 May 20\", \"May 21 \u2013 June 20\"],\n        \"Gemini\": [\"May 21 \u2013 June 20\"],\n        \"Cancer\": [\"June 21 \u2013 July 22\", \"July 23 \u2013 August 22\"],\n        \"Leo\": [\"July 23 \u2013 August 22\", \"August 23 \u2013 Sept 22\"],\n        \"Virgo\": [\"Sept 23 \u2013 October 22\"],\n        \"Libra\": [\"Sept 23 \u2013 October 22\"],\n        \"Scorpio\": [\"Oct 23 \u2013 November 21\"],\n        \"Sagittarius\": [\"Nov 22 \u2013 Dec 21\"],\n        \"Capricorn\": [\"Dec 22 \u2013 Jan 19\"]\n    }\n\n    result = {}\n\n    for birthday in birthdays:\n        for zodiac, dates in zodiac_signs.items():\n            if any(date in birthday for date in dates):\n                if zodiac in result:\n                    result[zodiac] += 1\n                else:\n                    result[zodiac] = 1\n\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n        if not tree:\n            return []\n        if not tree.get('left') and not tree.get('right'):\n            return [list(tree.keys())]\n        return tree_traversal(tree.get('left', {})) + tree_traversal(tree.get('right', {}))\n\n    # Test cases\n    tree1 = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    print(tree_traversal(tree1))\n\n    tree2 = {1: {247: {}}, 5: {8: {}}}\n    print(tree_traversal(tree2))\n\n    tree3 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {8: {}}}\n    print(tree_traversal(tree3))\n\n    tree4 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {7: {}}}\n    print(tree_traversal(tree4))\n\n    tree5 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {8: {}}}\n    print(tree_traversal(tree5))\n\n    tree6 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {7: {}}}\n    print(tree_traversal(tree6))\n\n    tree7 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {8: {}}}\n    print(tree_traversal(tree7))\n\n    tree8 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {7: {}}}\n    print(tree_traversal(tree8))\n\n    tree9 = {1: {2: {4: {}}, 3: {6: {}}}, 5: {8: {}}}\n    print(tree_traversal(tree9))\n\n    tree10 = {1: {2"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start = tuple(coord)\n        end = tuple(map(sum, zip((0,0), coord)))\n        moves = 0\n        visited = set()\n        queue = collections.deque([(start, moves)])\n        while queue:\n            current, moves = queue.popleft()\n            if current == end:\n                return moves\n            for direction in ((0,1), (1,0)):\n                next_coord = (current[0]+direction[0], current[1]+direction[1])\n                if 0<=next_coord[0]<len(grid) and 0<=next_coord[1]<len(grid[0]) and grid[next_coord[0]][next_coord[1]]==0 and next_coord not in visited:\n                    queue.append((next_coord, moves+1))\n                    visited.add(next_coord)\n        return -1\n\n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    # Sort the movies by ratings and then by release year\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n\n    # Extract the movie names and return them\n    return [movie for movie, rating in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]))\n    print(word_spiral([['a','b','c'],['d','e','f'],['g','h','i']]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\n\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['d','e','f'],['g','h','i']])\nword_spiral([['a','b','c'],['"}
{"task_id": "EvoEval/88", "completion": "\n    def calculate_population_density(planet, population, size):\n        if population and size:\n            return f\"{round(population / size, 2)},\"\n        else:\n            return None\n\n    return {f\"{planet} {calculate_population_density(planet, population, size)}\" for planet, (population, size) in dict_of_planets.items() if population and size}\n"}
{"task_id": "EvoEval/89", "completion": "\n\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_target(a, b, c):\n        return a == b or is_adjacent(a, c) or (is_odd(a) and is_odd(b)) or (is_odd(a) and is_odd(c)) or (is_odd(b) and is_odd(c))\n\n    def remove_target(a, b, c):\n        if is_target(a, b, c):\n            return [i for i in a if not (i == b or i == c)]\n        else:\n            return a\n\n    def remove_adjacent_targets(a, b):\n        return [remove_target(a, i, j) for i, j in [(a[i], a[i+1]) for i in range(len(a)-1)] if is_target(i, j, b)]\n\n    def remove_ray_gun(a, b):\n        return [remove_adjacent_targets(a, b) for i, j in [(a[i], a[i+1]) for i in range(len(a)-1)] if is_adjacent(i, b)]\n\n    return remove_ray_gun(aliens, ray)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(d) for d in s]\n\n    def get_combinations(lst):\n        if len(lst) == 1:\n            return lst\n        result = []\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if i != j:\n                    new_lst = lst[:]\n                    new_lst.remove(lst[i])\n                    new_lst.remove(lst[j])\n                    result.append((lst[i], lst[j]))\n                    result.extend(get_combinations(new_lst))\n        return result\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n    all_digits = s1_digits + s2_digits\n    result = 0\n    for c in get_combinations(all_digits):\n        result += c[0] * c[1]\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action in spaceship_data:\n        if action[0] == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action[0] == \"Move\" and status == \"In Space\":\n            status = \"In Space\"\n        elif action[0] == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n-i-1, 0, -1):\n            layer += ' '\n        layer += alphabet[i]\n        for j in range(2*i+1):\n            layer += alphabet[i]\n        result.append(layer)\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    def encode(message, n_values):\n        result = \"\"\n        for i in range(len(message)):\n            if message[i] == \" \" or message[i] == \".\" or message[i] == \",\":\n                result += \" \"\n            else:\n                result += chr((ord(message[i]) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n        return result\n\n    def decode(message, n_values):\n        result = \"\"\n        for i in range(len(message)):\n            if message[i] == \" \" or message[i] == \".\" or message[i] == \",\":\n                result += \" \"\n            else:\n                result += chr((ord(message[i]) - 97 - n_values[i % len(n_values)] + 26) % 26 + 97)\n        return result\n\n    return encode(message, n_values), decode(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(m):\n        return all(len(row) == len(m) for row in m)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        n = abs(n)\n        while n > 0:\n            digit = n % 10\n            product *= digit\n            n = n // 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] == i * get_product_of_digits(i):\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = {\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"}\n    if alien not in alien_continent:\n        return []\n\n    encountered_humans = []\n    for human, continent in humans.items():\n        if continent == alien:\n            encountered_humans.append(human)\n\n    return sorted(encountered_humans)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                eliminated = (j + music) % len(players)\n                players.pop(eliminated)\n    return players\n\n"}
