{"task_id": "EvoEval/0", "completion": "\n    # Define the base shipping cost\n    base_cost = 5.0\n    # Define the location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5,\n    }\n    # Get the location factor\n    location_factor = location_factors.get(location, 1.0)\n    # Initialize the total cost\n    total_cost = 0.0\n    # Iterate over the items\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            item = 1.0\n        # Calculate the item's shipping cost\n        item_cost = base_cost + (item - 5.0) * 10.0 if item > 5.0 else base_cost\n        # Add the item's cost to the total cost\n        total_cost += item_cost\n    # Multiply the total cost by the location factor\n    total_cost *= location_factors[location]\n    # Return the total cost rounded two decimal places as a string\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Define the base shipping cost\n    base_cost = 5.0\n    # Define the location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5,\n    }\n    # Initialize the total cost\n    total_cost = 0.0\n    # Iterate over the items\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            item = 1.0\n        # Calculate the additional cost if the item's weight is more than 5kg\n        additional_cost = 0.0\n        if item > 5.0:\n            additional_cost = 10.0\n        # Add the item's cost to the total cost\n        total_cost += base_cost + additional_cost\n    # Multiply the total cost by the location factor\n    total_cost *= location_factors.get(location, 1.0)\n    # Return the total cost rounded to two decimal places\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word.lower():\n            if not char.isalpha():\n                encrypted_word += char\n            else:\n                if isinstance(key, str):\n                    key = sum(ord(c) for c in key)\n                shift = key % 26\n                char_code = ord(char)\n                if char_code >= 97 and char_code <= 122:\n                    encrypted_word += chr((char_code - 97 + shift) % 26 + 97)\n                else:\n                    encrypted_word += chr((char_code - 65 + shift) % 26 + 65)\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Mapping from digits to corresponding characters\n    mapping = {\n        '1': 'a',\n        '2': 'b',\n        '3': 'c',\n        '4': 'd',\n        '5': 'e',\n        '6': 'f',\n        '7': 'g',\n        '8': 'h',\n        '9': 'i',\n        '10': 'j',\n        '11': 'k',\n        '12': 'l',\n        '13': 'm',\n        '14': 'n',\n        '15': 'o',\n        '16': 'p',\n        '17': 'q',\n        '18': 'r',\n        '19': 's',\n        '20': 't',\n        '21': 'u',\n        '22': 'v',\n        '23': 'w',\n        '24': 'x',\n        '25': 'y',\n        '26': 'z'\n    }\n\n    # Recursive function to generate all possible combinations\n    def generate_combinations(input_string: str, index: int) -> List[str]:\n        # Base case: if we've reached the end of the string, return an empty list\n        if index == len(input_string):\n            return ['']\n\n        # Recursive case: get all combinations for the rest of the string\n        combinations = generate_combinations(input_string, index + 1)\n        result = []\n\n        # For each combination, add the current character to the start and end\n        for combination in combinations:\n            for i in range(1, 27):\n                result.append(mapping[str(i)] + combination + mapping[str(i)])\n\n        return result\n\n    return generate_combinations(input_string, 0)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    lit_candles = 1\n\n    for candle in candles[1:]:\n        if candle > max_height:\n            lit_candles += 1\n            max_height = candle\n\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n\n    # going right\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row - 1 >= 0) and (col + 1 < cols):\n            row -= 1\n            col += 1\n        elif col + 1 < cols:\n            col += 1\n        elif row + 1 < rows:\n            row += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into a list of characters\n    canvas_list = list(canvas)\n\n    # Find the index of 'P'\n    painter_index = canvas.find('P')\n\n    # If 'P' is not found, return the canvas as it is\n    if painter_index == -1:\n        return canvas\n\n    # If there are more than one 'P' or the number of painted space divides the empty spaces evenly, return 'Invalid canvas'\n    if canvas.count('P') > 1 or canvas.count('P') * 2 != canvas.count(' '):\n        return 'Invalid canvas'\n\n    # Start painting from 'P'\n    for i in range(painter_index, len(canvas_list)):\n        # If the current character is a wall, break the loop\n        if canvas_list[i] == '#':\n            break\n        # If the current character is an empty space, paint it with '*'\n        elif canvas_list[i] == ' ':\n            canvas_list[i] = '*'\n\n    # Join the list of characters back into a string\n    updated_canvas = ''.join(canvas_list)\n\n    return updated_canvas\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    for p in st.punctuation:\n        string = string.replace(p, '')\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_counts = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_order = []\r\n    sound_order = []\r\n\r\n    animal_string = animal_string.split()\r\n\r\n    for i in animal_string:\r\n        if i[0] in animal_sounds:\r\n            animal_order.append(i[0])\r\n            sound_order.append(i[1:])\r\n\r\n    for j in range(len(animal_order)):\r\n        if animal_counts[animal_order[j]] < 2 and animal_counts['C'] + animal_counts['D'] + animal_counts['B'] < 5:\r\n            animal_sounds[animal_order[j]] = sound_order[j].count('|')\r\n            animal_counts[animal_order[j]] += 1\r\n\r\n    return list(animal_sounds.values())\r\n\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for key in count_dict:\n        if count_dict[key] == min_count:\n            return key\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    name = name.lower()\n    alias = \"\"\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n    return alias.upper()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n\n    for value, count in value_counts.items():\n        if count == 2:\n            score += int(value) * 2\n        elif count == 3:\n            score += int(value) * 3\n        elif count == 4:\n            score += int(value) * 4\n        elif count == 5:\n            score += int(value) * 5\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return sum(fib_seq)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % 7 == 0 or '7' in str(num):\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = []\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    count = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                count += 1\n                break\n    return count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n+1):\n            result.append(str(i) + ',' + ','.join(str(j) for j in range(i+1, n+1)) + ',' + ','.join(str(k) for k in range(i-1, 0, -1)))\n        return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        if direction == 'right':\n            if col + len(word) > len(grid):\n                return False\n            for i in range(len(word)):\n                if grid[row][col + i] != word[i]:\n                    return False\n            return True\n        elif direction == 'down':\n            if row + len(word) > len(grid):\n                return False\n            for i in range(len(word)):\n                if grid[row + i][col] != word[i]:\n                    return False\n            return True\n\n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            for word in words:\n                if check_word(word, row, col, 'right'):\n                    break\n                if check_word(word, row, col, 'down'):\n                    break\n    return False\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 10**-6\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '&',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '=',\n        'l': '(',\n        'm': ')',\n        'n': '~',\n        'o': '>',\n        'p': '<',\n        'q': '[',\n        'r': '{',\n        's': ']',\n        't': '}',\n        'u': '|',\n        'v': '1',\n        'w': '2',\n        'x': '3',\n        'y': '4',\n        'z': '5'\n    }\n\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    # Initialize the frequency and max_freq_sentence\n    frequency = 0\n    max_freq_sentence = ''\n    # Loop through each sentence\n    for sentence in sentences:\n        # Count the frequency of the word in the sentence\n        freq = sentence.split().count(word)\n        # If the frequency is greater than the current max frequency, update the max frequency and max frequency sentence\n        if freq > frequency:\n            frequency = freq\n            max_freq_sentence = sentence\n    # Return the frequency and the sentence with the max frequency\n    return (frequency, max_freq_sentence if frequency > 0 else 'Assume sentences end a period')\r\n\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code goes here\n    pass\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - min(deductions, income)\n    tax_brackets = [\n        (10000, 0, 0),\n        (25000, 0.15, 10000),\n        (45000, 0.25, 25000),\n        (None, 0.30, 45000),\n    ]\n\n    tax = 0\n    for i in range(1, len(tax_brackets)):\n        if taxable_income <= tax_brackets[i][0]:\n            tax += (taxable_income - tax_brackets[i - 1][0]) * tax_brackets[i - 1][1]\n            taxable_income = tax_brackets[i - 1][0]\n\n    tax += taxable_income * tax_brackets[-1][1]\n\n    deduction_tax_reduction = min(deductions, 1000)\n    tax -= deduction_tax_reduction * 0.5\n\n    deduction_tax_reduction = max(deductions - 1000, 0)\n    tax -= deduction_tax_reduction * 0.5\n\n    return tax\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                palindromes.add(substring)\n\n    return sorted(list(palindromes))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * n for _ in range(m)]\n\n    # Initialize the first row and first column to 1\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # Fill in the rest of the dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import re\n\n    def swap(playlist, i, seed):\n        if \"Rock\" not in playlist[i]:\n            while True:\n                j = seed % len(playlist)\n                if \"Rock\" not in playlist[j]:\n                    playlist[i], playlist[j] = playlist[j], playlist[i]\n                    return playlist\n                seed = (seed * 16807) % 2147483647\n        return playlist\n\n    playlist = [song.strip() for song in playlist]\n    for i in range(len(playlist)):\n        playlist = swap(playlist, i, seed)\n        seed = (seed * 16807) % 2147483647\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    for i in range(1, n + 1):\r\n        for stone in magic_stones:\r\n            if i - stone >= 0:\r\n                dp[i] += dp[i - stone]\r\n    return dp[n]\r\n\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    for i in range(n):\n        if i == m - 1:\n            transformation_percentages[i] = 20\n        elif i > m - 1:\n            transformation_percentages[i] = max(0, transformation_percentages[i - 1] - 10)\n        else:\n            transformation_percentages[i] = min(100, transformation_percentages[i - 1] + 10)\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email and \".\" in email[email.index(\"@\")+1:]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    next_vowels = 'eiouaEIOUA'\n    next_consonants = 'cdfghjklmnpqrstvwxyzbCDFGHJKLMNPQRSTVWXYZB'\n    transformed_string = ''\n    for char in s:\n        if char in vowels:\n            index = vowels.index(char)\n            transformed_string += next_vowels[index]\n        elif char in consonants:\n            index = consonants.index(char)\n            transformed_string += next_consonants[index]\n        else:\n            transformed_string += char\n    return transformed_string\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\n        \":)\": \"\ud83d\ude42\",\n        \":(\": \"\ud83d\ude41\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    words = sentence.split(\" \")\n    new_words = []\n    for word in words:\n        if word in emoticons_dict:\n            new_words.append(emoticons_dict[word])\n        else:\n            new_words.append(word)\n    return \" \".join(new_words)\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    s = s.replace(\" \", \"\")\n    if not s:\n        return \"Input string is empty\"\n\n    rows = [f\"*{'*'.join(c * n for c in row)}*\" for row in s]\n    max_len = max(len(row) for row in rows)\n    frame = \"*\" * max_len\n\n    return \"\\n\".join([frame, *rows, frame])\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions = sorted(potions, key=lambda x: (int(x[2]), x[0]))\n    potions_dict = {potion[0]: int(potion[1]) for potion in potions}\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    parent = [None] * (target + 1)\n    for i in range(1, target + 1):\n        for potion, power in potions_dict.items():\n            if power <= i:\n                if dp[i - power] + 1 < dp[i]:\n                    dp[i] = dp[i - power] + 1\n                    parent[i] = potion\n    if dp[-1] == float('inf'):\n        return []\n    result = []\n    while target > 0:\n        result.append(parent[target])\n        target -= potions_dict[parent[target]]\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy to the value of the first cell\n    min_energy = arr[0][0]\n    # Initialize the position of the spider to the first cell\n    spider_pos = (0, 0)\n    # Initialize the queue with the first cell\n    queue = [(spider_pos, min_energy)]\n    # Initialize the directions of the spider's jumps\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Initialize the visited set\n    visited = set()\n    # While the queue is not empty\n    while queue:\n        # Pop the cell with the minimum energy from the queue\n        cell, energy = queue.pop(0)\n        # If the cell is not visited\n        if cell not in visited:\n            # Add the cell to the visited set\n            visited.add(cell)\n            # If the cell is the safe cell\n            if arr[cell[0]][cell[1]] == 0:\n                # Return the energy required\n                return energy\n            # Otherwise, for each direction of the spider's jump\n            for direction in directions:\n                # Calculate the position of the next cell\n                next_cell = (cell[0] + direction[0], cell[1] + direction[1])\n                # If the next cell is within the array\n                if 0 <= next_cell[0] < len(arr) and 0 <= next_cell[1] < len(arr[0]):\n                    # Calculate the energy required for the spider to jump to the next cell\n                    next_energy = energy + arr[next_cell[0]][next_cell[1]]\n                    # Add the next cell and the energy required to the queue\n                    queue.append((next_cell, next_energy))\n    # If no path to the safe cell is found, return -1\n    return -1\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    legendary = False\r\n    second_most_valuable = -1\r\n    for item in player_input:\r\n        if item == 5:\r\n            legendary = True\r\n        elif item > second_most_valuable and item < 5:\r\n            second_most_valuable = item\r\n    return (legendary, second_most_valuable)\r\n\r\n\r"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n    # calculate the fuel consumption\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    # calculate the remaining fuel\n    remaining_fuel = fuel - (duration * fuel_consumption)\n    # check if the spaceship can reach the planet\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    total_view = min(left_max[i], right_max[i]) for i in range(n)]\n    return sum(total_view)\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test in test_cases:\n        message = \"\"\n        for word in test:\n            for char in word:\n                if char.isalpha():\n                    message += char\n        result.append(message.lower())\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {k: v for k, v in inventory.items() if v > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', \n        '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '01111': 'J', \n        '10111': 'K', '01000': 'L', '1110': 'M', '1100': 'N', '11111': '0', \n        '01111': '1', '00111': '2', '00011': '3', '00001': '4', '10000': '5', \n        '11000': '6', '11100': '7', '11110': '8', '11111': '9'\n    }\n\n    words = msg.split('/')\n    decoded_msg = ''\n\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += ' '\n\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n\n    return ' '.join(morse_code[i.upper()] for i in text)\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i].isupper():\n                transformed_s += vowels[(vowels.index(s[i])+1)%5].upper()\n            else:\n                transformed_s += vowels[(vowels.index(s[i])+1)%5]\n        elif s[i] in consonants:\n            if s[i].isupper():\n                transformed_s += consonants[(consonants.index(s[i])+1)%21].upper()\n            else:\n                transformed_s += consonants[(consonants.index(s[i])+1)%21]\n        elif s[i] == '?':\n            if i%2 == 0:\n                transformed_s += '!'\n            else:\n                transformed_s += '?'\n        else:\n            transformed_s += s[i]\n    return transformed_s\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    result = ''\n    shift_count = shift\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += alphabet[(alphabet.index(char) + shift_count) % 26]\n            else:\n                result += ALPHABET[(ALPHABET.index(char) + shift_count) % 26]\n            shift_count += 1\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', \n        'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', \n        'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', \n        'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', \n        'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', \n        'z': '--..'\n    }\n\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \"/ \"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            if letter.isalpha():\n                new_dish += chr(ord('a') + (ord(letter) - ord('a') + ord(magic_spell[spell_index]) - ord('a')) % 26)\n                spell_index = (spell_index + 1) % len(magic_spell)\n            else:\n                new_dish += letter\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    translated_phrase = \"\"\n    for word in earth_phrase.split(\" \"):\n        translated_word = \"\"\n        for char in word:\n            if char in vowels:\n                translated_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                translated_word += consonants[(consonants.index(char)+1)%26]\n            elif char == \" \":\n                translated_word += \"@\"\n        translated_word = translated_word.capitalize()\n        if word[0] in vowels:\n            translated_word += \"xy\"\n        elif word[0] in consonants:\n            translated_word += \"yz\"\n        translated_phrase += translated_word + \" \"\n    return translated_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_list = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return [(f'{item[0]} {item[1]}',) for item in sorted_list]\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the sugar locations\n    sugar_locations = set(sugar_locations)\n\n    # Initialize the ants\n    ants = []\n    for position, direction in ant_positions:\n        ants.append((position, direction))\n\n    # Initialize the happy ants\n    happy_ants = 0\n\n    # March the ants\n    for ant in ants:\n        position, direction = ant\n        while 0 < position < path_length:\n            if direction == \"right\":\n                position += 1\n            else:\n                position -= 1\n            if position in sugar_locations:\n                happy_ants += 1\n                sugar_locations.remove(position)\n                break\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            transformed_string += ' '\n        elif s[i].isalpha():\n            if i % 2 == 0:\n                transformed_string += s[i].swapcase()\n            else:\n                if s[i].lower() in vowels:\n                    index = vowels.index(s[i].lower())\n                    transformed_string += vowels[(index+1)%5].upper() if s[i].isupper() else vowels[(index+1)%5]\n                else:\n                    index = consonants.index(s[i].lower())\n                    transformed_string += consonants[(index-1)%21].upper() if s[i].isupper() else consonants[(index-1)%21]\n        else:\n            transformed_string += s[i]\n    return transformed_string\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient in recipe:\n        quantity = int(ingredient.split()[1]) * conversion_factor\n        new_recipe[ingredient.split()[0]] = quantity\n    return new_recipe\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        p = p - 2 if p % 2 == 0 else p - 3\r\n    return pyramid[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if is_prime(i) and i % divisor == 0]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    for food, changes in order.items():\n        if \"add\" in changes:\n            for ingredient in changes[\"add\"]:\n                menu[food].append(ingredient)\n        if \"remove\" in changes:\n            for ingredient in changes[\"remove\"]:\n                menu[food].remove(ingredient)\n\n    return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\r\n        return False\r\n    for i in range(len(path) - 1):\r\n        if path[i+1] not in planets[path[i]]:\r\n            return False\r\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted = \"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted[-1].lower() in vowels:\n                count += 1\n        else:\n            encrypted += char\n    return (encrypted, count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j.isdigit():\n                count += 1\n        result.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{i}' who was known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\r\n    trips = 0\r\n    chests = 0\r\n    rows = len(grid)\r\n    cols = len(grid[0])\r\n\r\n    # Loop through the grid\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            # If there is a chest\r\n            if grid[i][j] == 1:\r\n                # If the bag is full, start a new trip\r\n                if chests == bag_capacity:\r\n                    trips += 1\r\n                    chests = 0\r\n                # Add the chest to the bag\r\n                chests += 1\r\n\r\n    # If there are any chests left in the bag, start a new trip\r\n    if chests > 0:\r\n        trips += 1\r\n\r\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    digits = \"0123456789\"\n    special_chars = \".,;: \"\n    transformed_str = \"\"\n\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            transformed_str += vowels[(vowels.index(input_str[i]) + 1) % 5]\n        elif input_str[i] in consonants:\n            transformed_str += consonants[(consonants.index(input_str[i]) + 1) % 21]\n        elif input_str[i] in digits:\n            transformed_str += digits[(digits.index(input_str[i]) + 1) % 10]\n        elif input_str[i] in special_chars:\n            transformed_str += input_str[i]\n        elif input_str[i] == \"?\":\n            transformed_str += \"!\" if i % 2 != 0 else \"?\"\n\n    return transformed_str\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * (max(sequence) + 1)\n    for i in range(1, len(points)):\n        for j in range(i, len(points), i):\n            points[j] += i * (j // i)\n    return [points[i] for i in sequence]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n):\n        res.append(mat[i][i])\n        res.append(mat[i][n-i-1])\n    if n % 2 == 0:\n        res.append(mat[n//2][n//2])\n    return res\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days == 0:\r\n        return 0\r\n\r\n    min_price = prices[0]\r\n    max_profit = 0\r\n\r\n    for i in range(1, days):\r\n        if prices[i] < min_price:\r\n            min_price = prices[i]\r\n        elif prices[i] - min_price > max_profit:\r\n            max_profit = prices[i] - min_price\r\n\r\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the player's position and direction\n    pos = (0, 0)\n    direction = (0, 1)\n\n    # Initialize the path list\n    path = [pos]\n\n    # Get the map size\n    rows = len(map)\n    cols = len(map[0])\n\n    # Define the directions\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n\n    # Process the instructions\n    for instruction in instructions:\n        # Get the new direction\n        new_direction = directions[instruction]\n\n        # Calculate the new position\n        new_pos = (pos[0] + new_direction[0], pos[1] + new_direction[1])\n\n        # Check if the new position is within the map and not a wall\n        if 0 <= new_pos[0] < rows and 0 <= new_pos[1] < cols and map[new_pos[0]][new_pos[1]] != 'X':\n            # Update the position and add it to the path\n            pos = new_pos\n            path.append(pos)\n\n            # Check if the player has found the end\n            if map[pos[0]][pos[1]] == 'E':\n                return path\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {char: i for i, char in enumerate(alien_dictionary)}\n\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_dict = {\n        \"aries\": \"Fire\",\n        \"gemini\": \"Air\",\n        \"cancer\": \"Water\",\n        \"leo\": \"Fire\",\n        \"libra\": \"Air\",\n        \"aquarius\": \"Air\",\n        \"pisces\": \"Water\",\n        \"sagittarius\": \"Fire\",\n        \"scorpio\": \"Earth\",\n        \"taurus\": \"Earth\",\n        \"virgo\": \"Water\"\n    }\n    element_dict = {\"Fire\": 0, \"Air\": 0, \"Water\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        for zodiac in zodiac_dict:\n            if (month == 3 and day >= 21 and day <= 31) or (month == 4 and day <= 19):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 5 and day >= 21) or (month == 6 and day <= 21):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 6 and day >= 22) or (month == 7 and day <= 22):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 9 and day >= 23) or (month == 10 and day <= 21):\n                element_dict[zodiac_dict[zodiac]] += 1\n            elif (month == 10 and day >= 22"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.get('left') and not node.get('right'):\n            return [path + [node['value']]]\n        return dfs(node.get('left'), path + [node['value']]) + dfs(node.get('right'), path + [node['value']])\n\n    return dfs(tree, [])\n\n\ntree = {\n    'value': 1,\n    'left': {\n        'value': 2,\n        'left': {\n            'value': 4,\n            'left': None,\n            'right': None\n        },\n        'right': {\n            'value': 5,\n            'left': None,\n            'right': None\n        }\n    },\n    'right': {\n        'value': 3,\n        'left': {\n            'value': 6,\n            'left': None,\n            'right': None\n        },\n        'right': {\n            'value': 7,\n            'left': None,\n            'right': None\n        }\n    }\n}\n"}
{"task_id": "EvoEval/85", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    visited = [[0 for _ in range(cols)] for _ in range(rows)]\n    moves = [(0, 1), (1, 0)]\n    queue = [(0, 0, 0)]\n    visited[0][0] = 1\n\n    while queue:\n        x, y, step = queue.pop(0)\n        if (x, y) == coord:\n            return step\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and visited[nx][ny] == 0:\n                queue.append((nx, ny, step + 1))\n                visited[nx][ny] = 1\n    return -1\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014]}"}
{"task_id": "EvoEval/87", "completion": "\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr and arr[0]:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if len(data) == 2 and isinstance(data[0], int) and isinstance(data[1], int):\n            population, size = data\n            density = round(population / size, 2)\n            new_dict[planet] = density\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Your code here\n    aliens = [i for i in aliens if abs(i - ray) > 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Multiply the numbers\n    result = num1 * num2\n\n    # Convert the result to a string and return it\n    return str(result)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Motion'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Initialize the alphabet\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    # Initialize the result\n    result = []\n\n    # Loop through the layers\n    for i in range(n):\n        # Calculate the width of the current layer\n        width = 2 * i + 1\n\n        # Calculate the number of characters in the current layer\n        num_chars = width * width\n\n        # Calculate the number of characters in the previous layers\n        num_chars_prev = (2 * (i - 1) + 1) ** 2 if i > 0 else 1\n\n        # Calculate the number of characters in the current layer that are not in the previous layers\n        num_chars_curr = num_chars - num_chars_prev\n\n        # Calculate the number of characters per row in the current layer\n        num_chars_per_row = width\n\n        # Calculate the number of rows in the current layer\n        num_rows = num_chars_curr // num_chars_per_row\n\n        # Calculate the number of characters in the last row of the current layer\n        num_chars_last_row = num_chars_curr - (num_rows - 1) * num_chars_per_row\n\n        # Initialize the current layer\n        layer = []\n\n        # Loop through the rows in the current layer\n        for j in range(num_rows):\n            # Initialize the current row\n            row = []\n\n            # Loop through the characters in the current row\n            for k in range(num_chars_per_row):\n                # Calculate the index of the character in the alphabet\n                index = (k + j) % 26\n\n                # Add the character to the current row\n                row.append(alphabet[index])\n\n            # Add the current row to the current layer\n            layer.append(''.join(row))\n\n        # If the current layer is the last layer, adjust the last row\n        if i == n - 1:\n            layer[-1] = layer[-1][:num_chars_last_row]\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the encoded message\n    encoded_message = ''\n\n    # Iterate over the message\n    for i, char in enumerate(message):\n        # If the character is a letter, shift it by the corresponding n_value\n        if char.isalpha():\n            alphabet_cycle = alphabet if char.islower() else ALPHABET\n            encoded_message += alphabet_cycle[(alphabet_cycle.index(char) + n_values[i % len(n_values)]) % len(alphabet_cycle)]\n        # If the character is not a letter, add it to the encoded message as is\n        else:\n            encoded_message += char\n\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=len)\n        result.append(' '.join(words))\n    return result\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return the absolute difference\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] == i or lst[i] == -i:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = None\n    for name, info in humans.items():\n        if alien in info:\n            alien_continent = info.split()[-1]\n            break\n\n    if alien_continent is None:\n        return []\n\n    order = [\"Asia\", \"Africa\", \"South America\", \"Europe\", \"North America\"]\n    if alien_continent not in order:\n        return []\n\n    alien_order = order.index(alien_continent)\n    encountered = []\n    for name, info in humans.items():\n        for continent in info.split():\n            if continent in order and order.index(continent) >= alien_order:\n                encountered.append(name)\n                break\n\n    return encountered\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round in rounds:\n        current_position = (current_position + round) % len(players)\n        players.pop(current_position)\n    return players\n\n"}
