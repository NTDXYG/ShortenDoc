{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    factor = 1\n    has_string = False\n    for item in items:\n        if isinstance(item, str):\n            if not has_string:\n                factor *= 1.5\n                has_string = True\n            item = 1\n        total_cost += 5 + (item if item <= 5 else 10)\n    if location == 'National':\n        factor *= 1.5\n    elif location == 'International':\n        factor *= 2.5\n    return f\"{total_cost * factor:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0 + (10.0 if weight > 5 else 0)\n        total_cost += base_cost\n    \n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    \n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    encrypted_word += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    encrypted_word += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [s[0]]\n        if len(s) > 1 and 10 <= int(s[:2]) <= 26:\n            res.append(s[:2])\n        for i in range(1, len(s)):\n            for word in helper(s[i:]):\n                res.append(s[0:i+1] + word)\n        return res\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_candles = 1\n    max_height = candles[0]\n    \n    for height in candles[1:]:\n        if height > max_height:\n            lit_candles += 1\n            max_height = height\n    \n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0 and row < len(matrix) - 1:\n            row += 1\n        elif row == 0 and col < len(matrix[0]) - 1:\n            col += 1\n        elif col < len(matrix[0]) - 1 and row < len(matrix) - 1:\n            row += 1\n            col += 1\n        else:\n            if row < len(matrix) - 1:\n                row += 1\n            else:\n                col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    \n    painter_index = canvas.index('P')\n    empty_spaces = canvas.count('-')\n    painted_spaces = canvas.count('*')\n    \n    if (empty_spaces - painted_spaces) % 2 != 0:\n        return 'Invalid canvas'\n    \n    new_canvas = list(canvas)\n    for i in range(painter_index, len(canvas)):\n        if new_canvas[i] == '-':\n            new_canvas[i] = '*'\n        else:\n            break\n    \n    return ''.join(new_canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and animal_count.get(animal[0], 0) < 2:\r\n            sounds.append(animal.count('|'))\r\n            animal_count[animal[0]] = animal_count.get(animal[0], 0) + 1\r\n        if len(sounds) == 5:\r\n            break\r\n    return sounds\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]}, {fruits[1]} and from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_occurrence = Counter(flux_values).most_common(1)[0][0]\n    total_sum = sum(flux_values)\n    return total_sum * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # Initialize sum with 1 because the first number in the sequence is 1\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = sum(row.count(2) for row in m)\n    danger_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                if any(m[i][k] == 2 for k in range(len(m[0])) if k != j):\n                    danger_count += 1\n                if any(m[k][j] == 2 for k in range(len(m)) if k != i):\n                    danger_count += 1\n    return danger_count - vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = [str(i) for i in range(1, n+1)]\n    descending = [str(i) for i in range(n-1, 0, -1)]\n    return [','.join(ascending), *ascending, *descending, ','.join(descending)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_valid(word, row, col, dr, dc):\n        for i in range(len(word)):\n            if row + i * dr < 0 or row + i * dr >= len(grid) or col + i * dc < 0 or col + i * dc >= len(grid[0]) or grid[row + i * dr][col + i * dc] != word[i]:\n                return False\n        return True\n\n    for word in words:\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    if is_valid(word, i, j, 0, 1) or is_valid(word, i, j, 1, 0) or is_valid(word, i, j, 0, -1) or is_valid(word, i, j, -1, 0):\n                        break\n            else:\n                continue\n            break\n        else:\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year_in_km = 9461000000\n    return t * v / light_year_in_km\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split(\".\")\n    # Initialize variables to keep track of the word frequency and the sentence with the max frequency\n    max_frequency = 0\n    max_sentence = \"\"\n    # Loop through each sentence\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n        # Count the frequency of the given word in the sentence\n        frequency = words.count(word)\n        # If the frequency is greater than the current max frequency, update the max frequency and the sentence\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    # Return the frequency of the word and the sentence with the max frequency\n    return max_frequency, max_sentence.strip() if max_sentence else \"\"\r\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Initialize the queue with the start position\n    queue = [(start, [])]\n    # Initialize the visited set with the start position\n    visited = {start}\n    # Initialize the directions dictionary\n    directions = {(0, 1): \"right\", (0, -1): \"left\", (1, 0): \"down\", (-1, 0): \"up\"}\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position and the path to reach it\n        current, path = queue.pop(0)\n        # If the current position is the end, return the path\n        if current == end:\n            return path\n        # Get the neighbors of the current position\n        neighbors = [(current[0] + dx, current[1] + dy) for dx, dy in directions]\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # If the neighbor is not a wall and not visited, add it to the queue\n            if 0 <= neighbor[0] < len(maze) and 0 <= neighbor[1] < len(maze[0]) and maze[neighbor[0]][neighbor[1]] == 0 and neighbor not in visited:\n                queue.append((neighbor, path + [directions[tuple(map(operator.sub, neighbor, current))]]))\n                visited.add(neighbor)\n    # If the queue is empty, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    paths = [[0 for _ in range(n)] for _ in range(m)]\n\n    # The number of unique paths to the first cell is 1\n    paths[0][0] = 1\n\n    # Fill in the first row and first column with the number of unique paths to each cell\n    for i in range(1, m):\n        paths[i][0] = paths[i-1][0]\n    for j in range(1, n):\n        paths[0][j] = paths[0][j-1]\n\n    # Fill in the rest of the grid with the number of unique paths to each cell\n    for i in range(1, m):\n        for j in range(1, n):\n            paths[i][j] = paths[i-1][j] + paths[i][j-1]\n\n    # The number of unique paths to the bottom-right cell is the value in the last cell of the grid\n    return paths[m-1][n-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] * 2 if transformation_percentages else 20))\n        else:\n            transformation_percentages.append(min(100, max(0, transformation_percentages[-1] + (10 if day < m - 1 else -10))))\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\r\n        return False\r\n    at_index = email.index(\"@\")\r\n    dot_index = email.index(\".\")\r\n    if at_index == 0 or at_index == len(email) - 1 or dot_index < at_index:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coeffs = [0]  # Start with the constant of integration, which is 0.\n    for i, coeff in enumerate(xs):\n        integral_coeffs.append(coeff / (i + 1))\n    return integral_coeffs\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\",\n        \":(\": \"\ufffd\ufe0f\",\n        \":D\": \"\ufffd\",\n        \";)\": \"\ufffd\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    return \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*\" + \"\\n\" + \"*\" + \"*\" * n + \"*"}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/42", "completion": "\n    rarities = set(player_input)\r\n    if 5 in rarities:\r\n        legendary_rarity = 5\r\n        other_rarities = sorted([rarity for rarity in rarities if rarity != legendary_rarity])\r\n        if other_rarities:\r\n            return True, other_rarities[-1]\r\n        else:\r\n            return True, -1\r\n    else:\r\n        return False, None\r\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    if fuel >= fuel_consumption * distance / speed:\n        remaining_fuel = fuel - fuel_consumption * distance / speed\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\r\n    if total_weight <= w + e:\r\n        return True\r\n    else:\r\n        return False\r\n\r"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for string in test_case:\n            for word in string.split():\n                secret_message += word[0].lower()\n        result.append(secret_message)\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '10000': '5', '11000': '6', '11100': '7', '11110': '8', '11111': '0'\n    }\n    decoded_message = ''\n    word = ''\n    for char in msg:\n        if char == ' ':\n            decoded_message += morse_code[word]\n            word = ''\n        elif char == '/':\n            decoded_message += ' '\n        else:\n            word += char\n    decoded_message += morse_code[word]\n    return decoded_message.upper()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n                       'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n                       'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n                       'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n                       'Y': '-.--', 'Z': '--..', ' ': '  '}\n    \n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    encoded_string = ''\n    alphabet_index = 0\n    \n    for char in string:\n        encoded_string += list_of_alphabets[alphabet_index % len(list_of_alphabets)]\n        alphabet_index += 1\n    \n    return encoded_string\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Calculate the maximum number of cookies that can be baked in one batch\n    max_cookies = n * m\n    # Initialize the number of orders that can be fulfilled\n    fulfilled_orders = 0\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    # Iterate over the orders\n    for order in orders:\n        # If the order can be fulfilled with the remaining cookies, do so\n        if order <= max_cookies:\n            fulfilled_orders += 1\n            max_cookies -= order\n        # If the order cannot be fulfilled, stop iterating\n        else:\n            break\n    # Return the number of orders that can be fulfilled\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            shift_amount = (i + shift) % 26\n            if message[i].islower():\n                encrypted_message += chr((ord(message[i]) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                encrypted_message += chr((ord(message[i]) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            encrypted_message += message[i]\n    return encrypted_message\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',\n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',\n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n    morse_code = \"\"\n    for word in s.split(\" \"):\n        for letter in word:\n            morse_code += morse_code_dict[letter] + \" \"\n        morse_code += \"/ \"\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''.join([spell for dish_letter, spell in zip(dish, magic_spell * len(dish))])\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split(' '):\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n                if letter == 'z':\n                    new_word = 'b' + new_word\n            else:\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + ' '\n    return translated_phrase.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your implementation goes here.\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                result += char.swapcase()\n            else:\n                # Replace vowel with next vowel\n                if char.lower() in vowels:\n                    next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                    result += next_vowel.upper() if char.isupper() else next_vowel\n                else:\n                    # Replace consonant with preceding consonant\n                    next_consonant = consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n                    result += next_consonant.upper() if char.isupper() else next_consonant\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\r\n    current_layer = p\r\n    while current_layer > 0:\r\n        layers.append(current_layer)\r\n        if current_layer % 2 == 0:\r\n            current_layer -= 2\r\n        else:\r\n            current_layer -= 3\r\n    return layers[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, details in order.items():\n        if details:\n            ingredients = menu[food].copy()\n            if \"remove\" in details:\n                for ingredient in details[\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in details:\n                for ingredient in details[\"add\"]:\n                    ingredients.append(ingredient)\n            final_order[food] = ingredients\n        else:\n            final_order[food] = menu[food]\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal.get('calories', 0)\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    # Find the index where the array is not in ascending order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform the swap operation\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # Check if the array is sorted after the swap\n            if arr == sorted(arr):\n                return True\n            else:\n                # If the array is not sorted after the swap, return False\n                return False\n\n    # If the array is already sorted, return True\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_s += char\n    return encrypted_s, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        creature_name = string[:digit_count]\n        tales_count = string[digit_count:]\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{creature_name}' who was known for telling {digit_count} tales a day\"\n        result.append(story)\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\r\n    # Initialize variables\r\n    num_trips = 0\r\n    num_chests = 0\r\n    num_chambers = len(grid)\r\n    num_treasures = sum(sum(row) for row in grid)\r\n    \r\n    # Calculate the number of trips needed to collect all treasures\r\n    while num_chests < num_treasures:\r\n        # Enter the pyramid\r\n        num_trips += 1\r\n        \r\n        # Collect treasures in the current chamber\r\n        num_chests += sum(grid[0])\r\n        \r\n        # Move to the next chamber\r\n        for i in range(1, num_chambers):\r\n            # Exit the current chamber\r\n            num_trips += 1\r\n            \r\n            # Enter the next chamber\r\n            num_trips += 1\r\n            \r\n            # Collect treasures in the next chamber\r\n            num_chests += sum(grid[i])\r\n            \r\n            # Check if the bag is full\r\n            if num_chests >= bag_capacity:\r\n                break\r\n        \r\n        # Exit the pyramid\r\n        num_trips += 1\r\n    \r\n    return num_trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    return ''.join(cipher.get(char, char) for char in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    max_len = len(str(max(lst)))\n    pyramid = []\n    for num in lst:\n        level = '#' * num\n        pyramid.append(level.center(max_len * len(lst)))\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n, k):\n        points = 0\n        while n > 1:\n            if n % k == 0:\n                n //= k\n                points += 1\n            else:\n                break\n        return points\n\n    return sorted(sequence, key=lambda x: count_points(x, k), reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n // 2):\n        result.extend([mat[i][i], mat[n - 1 - i][n - 1 - i]])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(len(prices)):\r\n        for j in range(i + 1, len(prices)):\r\n            if prices[j] > prices[i]:\r\n                max_profit = max(max_profit, prices[j] - prices[i])\r\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {'Fire': 0, 'Earth': 0, 'Air': 0, 'Water': 0}\n    for date in birthdays:\n        month = int(date[5:7])\n        day = int(date[8:])\n        if 3 < month < 6:\n            zodiac_dict['Fire'] += 1\n        elif 6 < month < 9:\n            zodiac_dict['Air'] += 1\n        elif 9 < month < 12:\n            zodiac_dict['Water'] += 1\n        else:\n            zodiac_dict['Earth'] += 1\n    return {k: v for k, v in zodiac_dict.items() if v > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            density = round(population / size, 2)\n            result[f\"{planet} {density}\"] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to lists of digits\n    digits1 = list(s1)\n    digits2 = list(s2)\n    \n    # Initialize the product to 0\n    product = 0\n    \n    # Iterate over all unique combinations of digits from the two numbers\n    for digit1 in digits1:\n        for digit2 in digits2:\n            product += int(digit1) + int(digit2)\n    \n    return product\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        fountain += layer + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0:\n            product = 1\n            for digit in str(abs(lst[i])):\n                product *= int(digit)\n            if product == i:\n                magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]:\n        for human, home in humans.items():\n            if home == continent and alien in human:\n                encountered.append(human)\n    return encountered\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    next_num = 3\n    while len(sequence) < n:\n        next_sum = sum(sequence[-2:]) + next_num\n        sequence.append(next_sum)\n        next_num += 1\n\n    prime_indices = [i for i, num in enumerate(sequence) if is_prime(num)]\n    for index in prime_indices:\n        sequence[index] = 'prime'\n\n    return sequence[:n]\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Initialize the list of players\n    players = list(range(1, n + 1))\n    # Initialize the current position\n    position = 0\n    # Loop through each round\n    for round_duration in rounds:\n        # Move the current position forward by the round duration\n        position = (position + round_duration) % n\n        # Remove the player at the current position\n        players.pop(position)\n        # If there is only one player left, break the loop\n        if len(players) == 1:\n            break\n    # Return the list of players left\n    return players\n"}
