{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "EvoEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    open_braces = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            open_braces += 1\n            current_group += char\n        elif char == \")\":\n            open_braces -= 1\n            current_group += char\n            if open_braces == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n        else:\n            raise ValueError(\"Invalid character in input string\")\n\n    paren_groups.sort()\n    return paren_groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = statistics.median(numbers)\n    deviations = [abs(number - median) for number in numbers]\n    mad = statistics.median(deviations)\n    return mad"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(level, max_level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_numbers += number\n            product_numbers *= number\n    return sum_numbers, product_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(min(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = min(strings, key=len)\n    for s in strings:\n        if len(s) != len(shortest_str):\n            return shortest_str\n    return shortest_str\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = music_string.split()\n    music_dict = {}\n    for note in music_list:\n        if note in music_dict:\n            music_dict[note] += 1\n        else:\n            music_dict[note] = 1\n    music_dict = {k: v for k, v in sorted(music_dict.items(), key=lambda item: item[1], reverse=True)}\n    music_list = []\n    for key, value in music_dict.items():\n        if key == 'o':\n            music_list.append(4 * value)\n        elif key == 'o|':\n            music_list.append(2 * value)\n        elif key == '.|':\n            music_list.append(1 * value)\n    return music_list\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return len(string) - len(substring) + 1 - string.count(substring)"}
{"task_id": "EvoEval/19", "completion": "\n    # Create a dictionary to map each numeral to its corresponding integer value\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'three': 3,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n\n    # Convert each numeral to its integer value and sort the list in descending order\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_to_value[x], reverse=True)\n\n    # Join the sorted numerals back into a string\n    sorted_numbers = ' '.join(sorted_numerals)\n\n    return sorted_numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return sorted([(num - min_num) / (max_num - min_num) for num in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "EvoEval/32", "completion": "\n    # find the largest non zero coefficient\n    # this guarantees that the solution is in the interval [0, 1]\n    # we can use bisection method to find the zero\n    # bisection method is a root finding method that works by repeatedly dividing an interval in half\n    # until the interval is small enough\n    # the bisection method is guaranteed to find a zero if the function is continuous and the interval\n    # contains a zero\n    # the bisection method is also guaranteed to find a zero if the function is monotonic and the interval\n    # contains a zero\n    # in this case, the function is monotonic and the interval contains a zero\n    # so we can use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    # we start with the interval [0, 1]\n    # we then repeatedly divide the interval in half until the interval is small enough\n    # we then return the midpoint of the interval as the zero\n    # we use the bisection method to find the zero\n    #"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(str(i).count('8') for i in range(1, n+1) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n    count = 0\n    i = 1\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num) and fib_num % 2 != 0:\n            count += 1\n        i += 1\n\n    if count == n:\n        return fib_num\n    else:\n        return None"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 10:\n        return int(str(x), base)\n    else:\n        raise ValueError(\"Base must be less than 10\")\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Not a triangle\"\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + (n-3) + fib4(n-4)"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n        else:\n            return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]"}
{"task_id": "EvoEval/49", "completion": "\n    return 2 ** (n + q) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(set(s0)) == len(set(s1))\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    "}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return xs[1:] + [xs[0]]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # your code goes here\n    # split the string into two parts\n    # split the first part by space and get the number of apples\n    # split the second part by space and get the number of oranges\n    # add 1 to the total number of fruits\n    # subtract the number of apples and oranges from the total number of fruits\n    # return the result\n    # split the string into two parts\n    fruits = s.split(\", \")\n    # split the first part by space and get the number of apples\n    apples = int(fruits[0].split(\" \")[0])\n    # split the second part by space and get the number of oranges\n    oranges = int(fruits[1].split(\" \")[0])\n    # add 1 to the total number of fruits\n    total_fruits = n + 1\n    # subtract the number of apples and oranges from the total number of fruits\n    result = total_fruits - apples - oranges\n    return result"}
{"task_id": "EvoEval/68", "completion": "\n    # your code goes here\n    if not arr:\n        return []\n    odd_nodes = [(i, node) for i, node in enumerate(arr) if node % 2 != 0]\n    if not odd_nodes:\n        return []\n    odd_nodes.sort(key=lambda x: (x[1], x[0]))\n    return [odd_nodes[0][0], odd_nodes[0][1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # find the smallest integer with frequency greater than or equal to its value\n    for num in sorted(freq.keys()):\n        if freq[num] >= num:\n            return num\n\n    # if no such integer exists, return -1\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = [lst.pop()]\n    while lst:\n        result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if len(q) % 2 == 0:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        if sum(q) < w:\n            return True\n        else:\n            return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    # check if array is already palindromic\n    if arr == arr[::-1]:\n        return 0\n\n    # count the number of changes needed to make the array palindromic\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst2\n    elif len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 4:\n                return False\n    return len(factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return True, 1\n    if x == n:\n        return True, 1\n    if x % n != 0:\n        return False, None\n    if n == 2:\n        if x % 2 == 0:\n            return True, int(math.log(x, 2))\n        else:\n            return False, None\n    if n == 3:\n        if x % 3 == 0:\n            return True, int(math.log(x, 3))\n        else:\n            return False, None\n    if n == 5:\n        if x % 5 == 0:\n            return True, int(math.log(x, 5))\n        else:\n            return False, None\n    if n == 7:\n        if x % 7 == 0:\n            return True, int(math.log(x, 7))\n        else:\n            return False, None\n    if n == 11:\n        if x % 11 == 0:\n            return True, int(math.log(x, 11))\n        else:\n            return False, None\n    if n == 13:\n        if x % 13 == 0:\n            return True, int(math.log(x, 13))\n        else:\n            return False, None\n    if n == 17:\n        if x % 17 == 0:\n            return True, int(math.log(x, 17))\n        else:\n            return False, None\n    if n == 19:\n        if x % 19 == 0:\n            return True, int(math.log(x, 19))\n        else:\n            return False, None\n    if n == 23:\n        if x % 23 == 0:\n            return True, int(math.log(x, 23))\n        else:\n            return False, None\n    if n == 29:\n        if x % 29 == 0:\n            return True, int(math.log(x, 29))\n        else:\n            return False, None\n    if n == 31:\n        if x % 31 == 0:\n            return True, int(math.log(x, 31))\n        else:\n            return False, None\n    if n == 37:\n        if x % 37 == 0:\n            return True, int(math.log(x, 37))\n        else:\n            return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a**0.5**0.5**0.5 == int(a**0.5**0.5**0.5)\n"}
{"task_id": "EvoEval/78", "completion": "\n    # define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # define a list of hexadecimal digits\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    # define a list of non-prime hexadecimal digits\n    non_prime_hex_digits = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    # define a variable to store the count of non-prime hexadecimal digits\n    count = 0\n    # iterate over the characters in the input string\n    for char in num:\n        # check if the character is a non-prime hexadecimal digit\n        if char in non_prime_hex_digits:\n            # increment the count\n            count += 1\n    # return the count\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades)\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(' ', '')\n    if len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 0\n    return 10**(n-2)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(N)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i], reverse=True))\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    # your code here\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # create a copy of the array\n    array_copy = array.copy()\n    # sort the copy in ascending order\n    array_copy.sort()\n    # check if the first and last elements are odd\n    if array_copy[0] % 2 == 1 and array_copy[-1] % 2 == 1:\n        # return the sorted copy\n        return array_copy\n    else:\n        # sort the copy in descending order\n        array_copy.sort(reverse=True)\n        # return the sorted copy\n        return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += letter\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'\\bI\\b.*?\\bboredom\\b', S, re.I))\n"}
{"task_id": "EvoEval/92", "completion": "\n    return any(abs(x) + abs(y) == abs(z) for x, y, z in permutations([x, y, z]))\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                encoded_message += chr(ord(letter) + 3)\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [x for x in lst if is_prime(x)]\n    if primes:\n        return sum_digits(min(primes))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return sum(int(i) for i in str(a * b))\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper() and s.index(c) % 2 == 0)\n  \n  # test cases\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # 0\n  print(count_upper('abcdefg')) # 0\n  print(count_upper('dBBE')) # 1\n  print(count_upper('aBCdEf')) # "}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
