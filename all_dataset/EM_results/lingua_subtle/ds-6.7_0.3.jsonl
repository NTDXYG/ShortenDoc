{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    # remove spaces\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # initialize stack and result list\n    stack = []\n    result = []\n\n    # helper function to check if a string is balanced\n    def is_balanced(s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    # iterate over the string\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            start = stack.pop()\n            group = paren_string[start:i+1]\n            if is_balanced(group):\n                result.append(group)\n\n    # return the result in ascending alphabetical order\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_level += 1\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(current_level)\n                current_level = 0\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_numbers = []\n    min_value = numbers[0]\n    for num in numbers:\n        if num < min_value:\n            min_value = num\n        min_numbers.append(min_value)\n    return min_numbers\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a == 0 or b == 0:\n        return 0\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = music_string.split()\n    beats_list = []\n    for note in music_list:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    beats_list = list(set(beats_list))\n    beats_list.sort(reverse=True)\n    return beats_list\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_diff = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return sorted([(max_num - num) / range_num for num in numbers], reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(dict.fromkeys(numbers))\n    numbers.reverse()\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    else:\n        raise ValueError('exclusive_case must be \"lower\" or \"upper\"')\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b, c = xs[0], xs[1], xs[2]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div_by_three.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_by_three.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)], reverse=True)\n    l[::2] = even_index_values\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num) and fib_num % 2 == 0:\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x+2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (n + q) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Negative arguments are not allowed\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    else:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return [value for value in l1 if value in l2]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n+1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        sum += ord(char)\n    return sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    total_fruits = int(s.split()[4])\n    mangoes = total_fruits - (apples + oranges + 1)\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 1 and num < smallest_odd:\n            smallest_odd = num\n            smallest_index = i\n    return [smallest_index, smallest_odd] if smallest_index != -1 else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    i = 1\n    while True:\n        if i not in c.values():\n            return i\n        i += 1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val]\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) % 2 == 0 and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    len1 = sum(len(i) for i in lst1)\n    len2 = sum(len(i) for i in lst2)\n    return lst2 if len1 > len2 else lst1\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                for l in primes:\n                    if i * j * k * l == a:\n                        return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return x > 0, 0\n    elif n == 0:\n        return x == 1, 0\n    else:\n        i = 1\n        while i ** n < x:\n            i += 1\n        if i ** n == x:\n            return True, i - 1\n        else:\n            return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    x = int(a ** (1. / 3.))\n    return x * x * x == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_nums = ['A', 'B', 'C', 'D', 'E', 'F']\n    prime_nums = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in hex_nums and i not in prime_nums:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2] == s[i + 3]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', -1.0: 'E'}\n    grades.sort(reverse=True)\n    return [grade_scale[min(grade_scale.keys(), key=lambda k: (abs(k-grade), k))] for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # remove white spaces\n    string = string.replace(\" \", \"\")\n    # calculate length\n    length = len(string)\n    # check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # your code here\n    return 8**(n-2)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_hex = sum(int(digit, 16) for digit in hex_num)\n    # convert the sum to hexadecimal\n    result = hex(sum_hex)[2:]\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort(reverse=True)\n        result.append(''.join(chars))\n    return ' '.join(result)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    # your code here\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if array[0] % 2 == 0 and array[-1] % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) - 2) * 2\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if lst is None or len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    return max(lst)\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(s.startswith('I') and s.endswith('boredom') for s in S.split('.'))\n"}
{"task_id": "EvoEval/92", "completion": "\n    return abs(x) + abs(y) == abs(z) or abs(x) + abs(z) == abs(y) or abs(y) + abs(z) == abs(x)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += 'X' if char.islower() else 'x'\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(i) for i in str(min(primes)))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower = 0\n    upper = 0\n    for key in dict:\n        if key.islower():\n            lower += 1\n        elif key.isupper():\n            upper += 1\n        else:\n            return False\n    return lower == len(dict) or upper == len(dict)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    # convert to string\n    a = str(a)\n    b = str(b)\n\n    # initialize sum\n    sum_a = 0\n    sum_b = 0\n\n    # sum digits in a\n    for i in a:\n        sum_a += int(i)\n\n    # sum digits in b\n    for i in b:\n        sum_b += int(i)\n\n    # return sum of digits\n    return sum_a * sum_b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n\n"}
