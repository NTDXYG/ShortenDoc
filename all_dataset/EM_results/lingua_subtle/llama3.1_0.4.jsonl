{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize empty list to store groups\n    groups = []\n\n    # Initialize empty string to build current group\n    current_group = \"\"\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, add it to the current group\n        if char == \"(\":\n            current_group += char\n        # If the character is a close parenthesis, add it to the current group\n        elif char == \")\":\n            current_group += char\n            # If the current group is not empty, add it to the list of groups\n            if current_group:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, ignore it\n\n    # If the current group is not empty, add it to the list of groups\n    if current_group:\n        groups.append(current_group)\n\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            stack.pop()\n            depth -= 1\n        else:\n            continue\n    while stack:\n        result.append(max_depth)\n        max_depth -= 1\n        stack.pop()\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if number < 0:\n            return None, None\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    prefix = ''\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if is_palindrome(prefix):\n            break\n    return prefix + string[::-1] + prefix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '0' and b[i] == '1') or (a[i] == '1' and b[i] == '0') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = min(strings, key=len)\n    return shortest_str"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    lcm = a * b // gcd(a, b)\n    return lcm\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes[::-1]  # reverse the list to get longest to shortest\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # return the number of distinct characters in the string\n"}
{"task_id": "EvoEval/17", "completion": "\n    music = music_string.split('|')\n    music = [note for note in music if note]\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music:\n        result.append(beats[note])\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of numbers\n    numbers_list: List[str] = numbers.split()\n\n    # Define a dictionary to map the numbers to their integer values\n    num_dict: dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Sort the list of numbers based on their integer values in descending order\n    sorted_numbers: List[str] = sorted(numbers_list, key=lambda x: num_dict[x], reverse=True)\n\n    # Join the sorted list of numbers into a string separated by spaces\n    sorted_string: str = ' '.join(sorted_numbers)\n\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)  # Return the length of the string\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char for char in string])\n    else:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # join() function is used to concatenate all the strings in the list and return a single string\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    # find zero of polynomial\n    # xs coefficients\n    # x^0 + xs[0] * x^1 + xs[1] * x^2 + xs[2] * x^3 + ... + xs[n] * x^(2*n-1)\n    # find_zero poly(x) = 0\n    # find_zero takes xs two coefficients\n    # non zero coefficient guarantees solution\n    # round(find_zero([1, 2, 2]) f(x) = 1 + 2x\n    # (find_zero([-2, -3, 1, 2]) (x - 2) = -2 - 3x + x^3\n    # find_zero([-2, -3, 1, 2]) = 2.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    # find_zero([1, 2, 2]) = -1.0\n    #"}
{"task_id": "EvoEval/33", "completion": "\n    l' = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l'.append(l[i])\n    l'.sort(reverse=True)\n    return l'  # return l' instead of print l'"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    if n % 11 == 0 and n % 13 == 0:\n        return 8\n    else:\n        return 0\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else l[i] for i in range(len(l))] + \\\n           sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b if is_prime(b) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    # Check if the list has at least three elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate over the list with three nested loops\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                # Check if the sum of the three elements is equal to 10\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n\n    # If no triple sum is found, return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # Iterate over the range of n\n    for i in range(n):\n        # For each car moving left to right\n        for j in range(n):\n            # For each car moving right to left\n            if i != j:  # Check if the cars are not the same\n                # Calculate the distance between the two cars\n                distance = abs(i - j)\n                # If the distance is less than or equal to n/2, the cars collide\n                if distance <= n // 2:\n                    # Increment the number of collisions\n                    collisions += 1\n\n    # Return the total number of collisions\n    return collisions\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # Calculate the complement of the current number\n        complement = 1 - num\n        # If the complement is in the set, return True\n        if complement in seen:\n            return True\n        # Otherwise, add the current number to the set\n        seen.add(num)\n    # If we have iterated over the entire list and haven't found a pair that sums to 1, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < 0:\n        sign = -1\n        x = -x\n    else:\n        sign = 1\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    if not digits:\n        return 0\n    digits.reverse()\n    return sign * int(''.join(map(str, digits)))\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return fib4(n-1) + \"(\" + fib4(n-2) + \")\" + \"(\" + fib4(n-3) + \")\"\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(n, p, q)  # pow(a, b, c) returns a^b % c\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return string without consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    "}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return stack == []\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = False\n        if l[i] > l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return [value for value in l1 if value in l2]\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if stack and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return stack == []\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    derivative = [0] * n\n    for i in range(1, n):\n        derivative[i - 1] = i * xs[i]\n    return derivative\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 3) + fibfib(n - 2) - fibfib(n - 1)\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c.lower() in 'aeiouy')\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # sum of ASCII values of lower case letters in string s\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings\n    fruit_list = s.split()\n    # Initialize variables to store the total number of fruits and the number of each type of fruit\n    total_fruits = 0\n    apples = 0\n    oranges = 0\n    mango = 0\n    # Iterate over the list of strings\n    for i in range(0, len(fruit_list), 2):\n        # If the current string is 'apples', increment the apples counter\n        if fruit_list[i] == 'apples':\n            apples = int(fruit_list[i + 1])\n        # If the current string is 'oranges', increment the oranges counter\n        elif fruit_list[i] == 'oranges':\n            oranges = int(fruit_list[i + 1])\n        # If the current string is 'mango', increment the mango counter\n        elif fruit_list[i] == 'mango':\n            mango = int(fruit_list[i + 1])\n    # Calculate the total number of fruits\n    total_fruits = apples + oranges + mango\n    # Return the total number of fruits minus the number of oranges and minus the number of mangoes\n    return total_fruits - oranges - mango\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [node for node in arr if node % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_value = min(odd_values)\n    return [i for i, node in enumerate(arr) if node == smallest_value]  # return list of indices of smallest odd value\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    min_freq = min(freq.values())\n    if min_freq == 1:\n        return -1\n    else:\n        return min([num for num, freq in freq.items() if freq == min_freq])\n"}
{"task_id": "EvoEval/70", "completion": "\n    lst.sort(reverse=True)\n    return lst\n\\end{code}\n\nComment: I think you meant to write `lst.sort(reverse=True)` instead of `lst.sort(reverse=True)`.\n\nAnswer: You can use the `sorted` function with the `reverse` argument set to `True` to sort the list in descending order:\n\n\\begin{code}"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    if len(q) == 0:\n        return False\n    if len(q) == 1:\n        return q[0] % 2 == 0\n    if sum(q) > w:\n        return False\n    if sum(q) % 2 == 0:\n        return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if arr[0] != arr[1] else 0\n    arr.sort()\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            count += 1\n            left += 1\n    return count\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n    if len(lst1) == len(lst2):\n        return lst2\n    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst1) < len(lst2):\n        return lst2\n    return lst1\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return True, 0\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 3:\n        return False, None\n    if x == 4:\n        return True, 2\n    if x == 5:\n        return False, None\n    if x == 6:\n        return False, None\n    if x == 7:\n        return False, None\n    if x == 8:\n        return True, 3\n    if x == 9:\n        return False, None\n    if x == 10:\n        return False, None\n    if x == 11:\n        return False, None\n    if x == 12:\n        return False, None\n    if x == 13:\n        return False, None\n    if x == 14:\n        return False, None\n    if x == 15:\n        return False, None\n    if x == 16:\n        return False, None\n    if x == 17:\n        return False, None\n    if x == 18:\n        return False, None\n    if x == 19:\n        return False, None\n    if x == 20:\n        return False, None\n    if x == 21:\n        return False, None\n    if x == 22:\n        return False, None\n    if x == 23:\n        return False, None\n    if x == 24:\n        return False, None\n    if x == 25:\n        return False, None\n    if x == 26:\n        return False, None\n    if x == 27:\n        return False, None\n    if x == 28:\n        return False, None\n    if x == 29:\n        return False, None\n    if x == 30:\n        return False, None\n    if x == 31:\n        return False, None\n    if x == 32:\n        return False, None\n    if x == 33:\n        return False, None\n    if x == 34:\n        return False, None\n    if x == 35:\n        return False, None\n    if x == 36:\n        return False, None\n    if x == 37:\n        return False, None\n    if x == 38:\n        return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a ** (1. / 3.) % 1 == 0"}
{"task_id": "EvoEval/78", "completion": "\n    return sum(1 for c in num if c in '02468ACE')\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    return len(set(s)) == len(s) and len(s) == 4\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade boundaries\n    grade_boundaries = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.0,\n        'E': 0.0\n    }\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the GPAs in the input list\n    for gpa in grades:\n        # Initialize a variable to store the letter grade\n        letter_grade = ''\n        \n        # Iterate over the grade boundaries in descending order\n        for grade, boundary in sorted(grade_boundaries.items(), reverse=True):\n            # If the GPA is greater than or equal to the boundary, update the letter grade\n            if gpa >= boundary:\n                letter_grade = grade\n                break\n        \n        # Append the letter grade to the list\n        letter_grades.append(letter_grade)\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Calculate the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number\n    if length > 1:\n        for i in range(2, length):\n            if (length % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(1, 10 ** n):\n        if i >= 10 ** (n - 1) and i < 10 ** n and i % 10 == 2:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    hexa = \"0123456789abcdef\"\n    sum = 0\n    while N > 0:\n        sum += hexa[N % 16]\n        N //= 16\n    return sum\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # sum of odd elements at even indices\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    words.sort(key=lambda x: [ord(c) for c in x], reverse=True)\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not lst:\n        return []\n    if not isinstance(lst[0], list):\n        return [(x, 0)]\n    if x not in lst[0]:\n        return []\n    row = [i for i, x in enumerate(lst[0]) if x == x]\n    return [(i, j) for i, lst in enumerate(lst) for j, x in enumerate(lst) if x == x]\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array\n    array_copy = array.copy()\n    \n    # Remove duplicates by converting the array to a set\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order if the last element is odd\n    if array_copy and array_copy[-1] % 2 != 0:\n        array_copy.sort()\n    # Sort the array in descending order if the last element is even\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encrypted += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\" and words[i+1] == \"am\" and words[i+2] == \"bored\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return abs(x + y + z) == int(abs(x) + abs(y) + abs(z))\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = float('inf')\n    for num in lst:\n        if is_prime(num) and num < min_prime:\n            min_prime = num\n    return len(str(min_prime)) if min_prime != float('inf') else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(2, n + 1):\n        # Assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes[::-1]  # Return list in descending order\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Convert the input integers to strings\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Initialize the carry\n    carry = 0\n    \n    # Iterate over the digits of the two numbers from right to left\n    for i in range(max(len(str_a), len(str_b))):\n        # Get the current digits of the two numbers\n        digit_a = int(str_a[-1 - i]) if i < len(str_a) else 0\n        digit_b = int(str_b[-1 - i]) if i < len(str_b) else 0\n        \n        # Calculate the product of the current digits\n        product = digit_a * digit_b + carry\n        \n        # Update the carry\n        carry = product // 10\n        \n        # Append the last digit of the product to the result\n        result = str(product % 10) + result\n    \n    # If there is a remaining carry, append it to the result\n    if carry:\n        result = str(carry) + result\n    \n    # Return the result as an integer\n    return int(result) if result else 0\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(value)\n"}
