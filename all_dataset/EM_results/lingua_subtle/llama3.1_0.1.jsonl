{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over the characters in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n\n    # Sort the groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n    pass"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (\n        numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Calculate the absolute difference between each number and the median\n    absolute_diffs = [abs(num - median) for num in numbers]\n\n    # Sort the absolute differences\n    absolute_diffs.sort()\n\n    # Calculate the median of the absolute differences\n    mad = absolute_diffs[len(absolute_diffs) // 2] if len(absolute_diffs) % 2 else (\n        absolute_diffs[len(absolute_diffs) // 2 - 1] + absolute_diffs[len(absolute_diffs) // 2]) / 2\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the string into groups\n    groups = paren_string.split()\n    # Initialize a list to store the maximum depth of each group\n    max_depths = []\n    # Iterate over each group\n    for group in groups:\n        # Initialize the current depth and maximum depth\n        curr_depth = 0\n        max_depth = 0\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current depth\n            if char == '(':\n                curr_depth += 1\n                # Update the maximum depth if the current depth is greater\n                max_depth = max(max_depth, curr_depth)\n            # If the character is a closing parenthesis, decrement the current depth\n            elif char == ')':\n                curr_depth -= 1\n        # Append the maximum depth of the group to the list\n        max_depths.append(max_depth)\n    # Return the list of maximum depths in descending order\n    return sorted(max_depths, reverse=True)  # Changed here\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Find longest prefix of supplied string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            prefix = string[:i+1]\n    # Append to the start of string reverse of a string suffix comes after palindromic prefix\n    return prefix + string[::-1] + prefix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n    # min() function returns the smallest item in an iterable or the smallest of two or more arguments.\n    # key is a function that takes one argument and returns one value. It is used to determine the value to be used for sorting.\n    # In this case, we use len() as the key function to find the shortest string. The min() function will return the first shortest string it encounters in case of a tie.  # type: ignore\n[FILEPATH] chapter_10/section_10_3/shortest.py [/FILEPATH]\n[FILEPATH] chapter_10/section_10_3/shortest_test.py [/FILEPATH]\nimport unittest\nfrom shortest import shortest\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set to remove duplicates and count the number of elements in the set\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1, '.|.|': 1, '.|.|.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    return sorted(result, reverse=True)  # return list in descending order\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    numbers_list = numbers.split()\n    # Create a dictionary to map numbers to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Sort the list of numbers based on their integer values\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x], reverse=True)\n    # Join the sorted list into a string\n    sorted_string = ' '.join(sorted_numbers)\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Check if all numbers are the same\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    # Apply linear transform to the list\n    transformed = [(x - min_val) / (max_val - min_val) for x in numbers]\n\n    # Sort the list in descending order\n    transformed.sort(reverse=True)\n\n    return transformed\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the numbers that occur only once\n    unique_numbers = []\n    for num in numbers:\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n\n    # Return the list in the reverse order\n    return unique_numbers[::-1]  # Use slicing to reverse the list\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case should be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs[0] must be non zero\")\n    return -xs[1] / xs[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[j] for j in range(len(l)) if j % 2 == 0], reverse=True)[k] for i, k in enumerate(range(len(l) // 2))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    if b % 2 == 0:\n        return None\n    for i in range(2, int(b ** 0.5) + 1):\n        if b % i == 0:\n            return None\n    return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # sort the list\n    l.sort()\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # initialize two pointers\n        left, right = i + 1, len(l) - 1\n        # iterate until the two pointers meet\n        while left < right:\n            # calculate the sum of the three elements\n            total = l[i] + l[left] + l[right]\n            # if the sum is ten, return True\n            if total == 10:\n                return True\n            # if the sum is less than ten, move the left pointer to the right\n            elif total < 10:\n                left += 1\n            # if the sum is greater than ten, move the right pointer to the left\n            else:\n                right -= 1\n    # if no three elements sum to ten, return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    # Loop through each pair of cars\n    for i in range(n):\n        for j in range(n):\n            # If the cars are not the same and are not on the same side of the road\n            if i != j and (i < n and j >= n) or (i >= n and j < n):\n                # Increment the number of collisions\n                collisions += 1\n    # Return the total number of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set from the list to remove duplicates and improve lookup efficiency\n    num_set = set(l)\n    # Iterate over the set\n    for num in num_set:\n        # Check if one minus the current number is in the set\n        if 1 - num in num_set and 1 - num != num:\n            return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base. Base should be between 2 and 10.\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0 or n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib4_sequence = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib4_sequence.append(fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4])\n        return str(fib4_sequence[n])  # Return string representation of the number\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text.casefold()[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return string without consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)  # return common elements in descending order\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # sum of numbers from m to n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Convert the integer to a string to easily manipulate the digits\n    str_x = str(x)\n    # Calculate the effective shift, which is the remainder of shift divided by the number of digits\n    effective_shift = shift % len(str_x)\n    # If the effective shift is greater than the number of digits, it's equivalent to reversing the string\n    if effective_shift > len(str_x):\n        return str_x[::-1]\n    # Otherwise, shift the string to the left by the effective shift\n    else:\n        return str_x[-effective_shift:] + str_x[:-effective_shift]  # corrected the slicing\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method to filter out non-lowercase characters and sum their ASCII values\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into two parts: apples and oranges\n    apples, oranges = s.split(', ')\n    \n    # Extract the number of apples and oranges\n    num_apples = int(apples.split(' ')[0])\n    num_oranges = int(oranges.split(' ')[0])\n    \n    # Calculate the number of mangoes\n    num_mangoes = n + 1 - num_apples - num_oranges\n    \n    return num_mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, x in enumerate(arr):\n        if x % 2:\n            odd.append((i, x))\n    if not odd:\n        return []\n    return min(odd, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    result = []\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0 if arr[0] == arr[1] else 1\n    if n == 3:\n        return 0 if arr[0] == arr[2] else 1\n    if n == 4:\n        return 0 if arr[0] == arr[3] else 1\n    if n == 5:\n        return 0 if arr[0] == arr[4] else 1\n    if n == 6:\n        return 0 if arr[0] == arr[5] else 1\n    if n == 7:\n        return 0 if arr[0] == arr[6] else 1\n    if n == 8:\n        return 0 if arr[0] == arr[7] else 1\n    if n == 9:\n        return 0 if arr[0] == arr[8] else 1\n    if n == 10:\n        return 0 if arr[0] == arr[9] else 1\n    if n == 11:\n        return 0 if arr[0] == arr[10] else 1\n    if n == 12:\n        return 0 if arr[0] == arr[11] else 1\n    if n == 13:\n        return 0 if arr[0] == arr[12] else 1\n    if n == 14:\n        return 0 if arr[0] == arr[13] else 1\n    if n == 15:\n        return 0 if arr[0] == arr[14] else 1\n    if n == 16:\n        return 0 if arr[0] == arr[15] else 1\n    if n == 17:\n        return 0 if arr[0] == arr[16] else 1\n    if n == 18:\n        return 0 if arr[0] == arr[17] else 1\n    if n == 19:\n        return 0 if arr[0] == arr[18] else 1\n    if n == 20:\n        return 0 if arr[0] == arr[19] else 1\n    if n == 21:\n"}
{"task_id": "EvoEval/74", "completion": "\n    return lst1 if sum(len(i) for i in lst1) >= sum(len(i) for i in lst2) else lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)  # all factors are prime\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    # check if x is a power of n\n    if n ** int(math.log(x, n)) == x:\n        # check if x is a simple power of n\n        if n ** int(math.log(x, n)) == n ** int(math.log(x, n)) % 1 == 0:\n            return True, int(math.log(x, n))\n        else:\n            return False, None\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = set('2357')\n    # Initialize a counter for non-prime hexadecimal digits\n    count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a hexadecimal digit\n        if char in '0123456789ABCDEF':\n            # If it's not a prime hexadecimal digit, increment the counter\n            if char not in prime_hex_digits:\n                count += 1\n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # First, we sort the grades in ascending order\n    grades.sort()\n    # Then, we create a list of letter grades\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Calculate the length of the string\n    length = len(string)\n    # Check if the length is a prime number\n    if length > 1:\n        for i in range(2, length):\n            if (length % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**n:\n            count += 1\n        elif i % 10 == 2:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a hexadecimal string\n    hex_str = hex(N)[2:]\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the hexadecimal string\n    for char in hex_str:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(char, 16)\n    \n    # Convert the sum back to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # return the sum of odd elements at even indices\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)  # join words with space\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if len(array_copy) == 0:\n        return array_copy\n    \n    # Check if the sum of the first and last elements is odd or even\n    if (array_copy[0] + array_copy[-1]) % 2 == 0:\n        # Sort the array in descending order\n        array_copy.sort(reverse=True)\n    else:\n        # Sort the array in ascending order\n        array_copy.sort()\n    \n    # Remove duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order\n    array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + 2 * 2) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + 2 * 2) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('. ')\n    # Initialize a counter for boredom\n    boredom = 0\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" and ends with \"boredom\"\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            # If it does, increment the boredom counter\n            boredom += 1\n    # Return the total boredom count\n    return boredom\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)) and all(isinstance(i, int) for i in [x, y, z])  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers are integers. return true if condition is met, false otherwise.  # check if one of numbers equal to the sum of absolute values of other two, and all numbers"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += chr(ord('a') + (index + 3) % 5 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = float('inf')\n    for num in lst:\n        if num > 1 and is_prime(num):\n            min_prime = min(min_prime, num)\n    return sum(int(digit) for digit in str(min_prime)) if min_prime != float('inf') else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    return primes[::-1]  # reverse the list\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract unit digits from both numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n\n    # Multiply unit digits\n    product = unit_digit_a * unit_digit_b\n\n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))  # convert string to float and round it\n\n"}
