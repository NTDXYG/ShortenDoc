{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over the characters in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n\n    # Sort the groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the sorted list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n\n    # Calculate the median of the numbers\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Calculate the absolute deviations from the median\n    deviations = [abs(num - median) for num in numbers]\n\n    # Sort the deviations\n    deviations.sort()\n\n    # Calculate the median of the deviations\n    mad = deviations[len(deviations) // 2] if len(deviations) % 2 else (deviations[len(deviations) // 2 - 1] + deviations[len(deviations) // 2]) / 2\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            level = len(stack)\n            stack = stack[:-level]\n            result.append(level)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]  # filter by substring\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum += num\n            product *= num\n    return sum, product"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find longest prefix of string that is a palindrome\n    prefix = ''\n    for char in string:\n        if prefix == prefix[::-1] and char == prefix[-1]:\n            prefix += char\n        else:\n            break\n\n    # Find reverse of suffix after palindromic prefix\n    suffix = string[len(prefix):][::-1]\n\n    # Append suffix to start of string\n    return suffix + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '0' and b[i] == '1') or (a[i] == '1' and b[i] == '0') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len) "}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    lcm = a * b // gcd(a, b)\n    return lcm\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(map(str, range(1, n + 1)))  # map str to each number in the range, then join with space\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string)) * 2\n"}
{"task_id": "EvoEval/17", "completion": "\n    music = music_string.split()\n    beats = []\n    for note in music:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '||':\n            beats.append(1)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(beats, reverse=True)  # return list in descending order\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of strings\n    num_list: List[str] = numbers.split()\n\n    # Define a dictionary to map string numerals to their integer values\n    num_dict: dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Use a list comprehension to convert the list of string numerals to a list of integers\n    num_list: List[int] = [num_dict[num] for num in num_list]\n\n    # Sort the list of integers in descending order\n    num_list.sort(reverse=True)\n\n    # Use a list comprehension to convert the list of integers back to a list of string numerals\n    num_list: List[str] = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n\n    # Join the list of string numerals into a single string with spaces in between\n    sorted_str: str = ' '.join(num_list)\n\n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort(reverse=True)\n    return numbers[0], numbers[1]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return sorted([(x - min_val) / (max_val - min_val) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        return string.swapcase()\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # type: ignore"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    if len(xs) == 3:\n        return -xs[1] / xs[2]\n    if len(xs) == 4:\n        return -xs[2] / xs[3]\n    if len(xs) == 5:\n        return -xs[3] / xs[4]\n    if len(xs) == 6:\n        return -xs[4] / xs[5]\n    if len(xs) == 7:\n        return -xs[5] / xs[6]\n    if len(xs) == 8:\n        return -xs[6] / xs[7]\n    if len(xs) == 9:\n        return -xs[7] / xs[8]\n    if len(xs) == 10:\n        return -xs[8] / xs[9]\n    if len(xs) == 11:\n        return -xs[9] / xs[10]\n    if len(xs) == 12:\n        return -xs[10] / xs[11]\n    if len(xs) == 13:\n        return -xs[11] / xs[12]\n    if len(xs) == 14:\n        return -xs[12] / xs[13]\n    if len(xs) == 15:\n        return -xs[13] / xs[14]\n    if len(xs) == 16:\n        return -xs[14] / xs[15]\n    if len(xs) == 17:\n        return -xs[15] / xs[16]\n    if len(xs) == 18:\n        return -xs[16] / xs[17]\n    if len(xs) == 19:\n        return -xs[17] / xs[18]\n    if len(xs) == 20:\n        return -xs[18] / xs[19]\n    if len(xs) == 21:\n        return -xs[19] / xs[20]\n    if len(xs) == 22:\n        return -xs[20] / xs[21]\n    if len(xs) == 23:\n        return -xs[21] / xs[22]\n    if len(xs) == 24:\n        return -xs[22] / xs[23]\n    if len(xs) == 25:\n        return -xs"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted(l)[::-1][i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else l[i] for i in range(len(l))] + \\\n           sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)[:-1]  # +1 to exclude the last element which is the same as the first element in the sorted list\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a if is_prime(a) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    # sort the list\n    l.sort()\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # initialize two pointers\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            # calculate the sum\n            total = l[i] + l[left] + l[right]\n            # check if the sum is 10\n            if total == 10:\n                return True\n            # move the pointers\n            elif total < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # Calculate the complement of the current number\n        complement = 1 - num\n        # If the complement is in the set, return True\n        if complement in seen:\n            return True\n        # Otherwise, add the current number to the set\n        seen.add(num)\n    # If we have iterated over the entire list and haven't found a pair that sums to 1, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base. Base must be between 2 and 10.\")\n    if x < 0:\n        raise ValueError(\"Invalid number. Number must be non-negative.\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + (n-3) + int(fib4(n-4)))\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, (n + q) % p, p)  # pow(a, b, c) returns a^b % c\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return string without consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in bracket_map.values():\n            stack.append(bracket)\n        elif bracket in bracket_map.keys():\n            if stack == [] or bracket_map[bracket] != stack.pop():\n                return False\n    return stack == []\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return [value for value in l1 if value in l2]\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # range(m, n + 1) generates numbers from m to n (inclusive) and sum() adds them up\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs) if i > 0]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c in 'aeiou')\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # sum of ASCII values of lower case letters in the string\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    #split the string into list of strings\n    s = s.split()\n    #extract the number of fruits and the type of fruits\n    n_fruits = int(s[0])\n    fruits = s[1]\n    #extract the number of each type of fruit\n    n_fruits = int(s[0])\n    n_fruits = n_fruits + 1\n    n_fruits = n_fruits - int(s[1])\n    n_fruits = n_fruits - int(s[3])\n    return n_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd = [x for x in arr if x % 2]\n    if not odd:\n        return []\n    min_odd = min(odd)\n    return [arr.index(min_odd), min_odd]\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in range(1, max(freq.values()) + 1):\n        if i not in freq:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val] + strange_sort_list(lst)\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    # check if list is balanced\n    if len(q) % 2 != 0:\n        return False\n    # check if list is palindromic\n    if q != q[::-1]:\n        return False\n    # check if sum of elements is even\n    if sum(q) % 2 != 0:\n        return False\n    # check if sum of elements is less than or equal to maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    arr = [x for x in arr if x != 1]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 5\n    if n == 12:\n        return 5\n    if n == 13:\n        return 6\n    if n == 14:\n        return 6\n    if n == 15:\n        return 7\n    if n == 16:\n        return 7\n    if n == 17:\n        return 8\n    if n == 18:\n        return 8\n    if n == 19:\n        return 9\n    if n == 20:\n        return 9\n    if n == 21:\n        return 10\n    if n == 22:\n        return 10\n    if n == 23:\n        return 11\n    if n == 24:\n        return 11\n    if n == 25:\n        return 12\n    if n == 26:\n        return 12\n    if n == 27:\n        return 13\n    if n == 28:\n        return 13\n    if n == 29:\n        return 14\n    if n == 30:\n        return 14\n    if n == 31:\n        return 15\n    if n == 32:\n        return 15\n    if n == 33:\n        return 16\n    if n == 34:\n        return 16\n    if n == 35:\n        return 17\n    if n == 36:\n        return 17\n    if n == 37:\n        return 18\n    if n == 38:\n        return 18\n    if n == 39:\n        return 19\n    if n == 40:\n        return 19"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        lst1_len = len(lst1)\n        lst2_len = len(lst2)\n        if lst1_len > lst2_len:\n            return lst1\n        elif lst1_len < lst2_len:\n            return lst2\n        else:\n            return lst2"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 4 and all(is_prime(f) for f in factors)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return True, 0\n    if n < 0:\n        return False, None\n    if x == 1:\n        return True, 0\n    if x < 1:\n        return False, None\n    if x % n == 0:\n        return is_simple_power(x // n, n)\n    return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "EvoEval/78", "completion": "\n    count = 0\n    for i in num:\n        if i not in ['2', '3', '5', '7']:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade table\n    grade_table = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.0,\n        'E': 0.0\n    }\n    \n    # Sort the grades in ascending order\n    grades.sort()\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the sorted grades\n    for grade in grades:\n        # Initialize a variable to store the letter grade\n        letter_grade = ''\n        \n        # Iterate over the grade table in descending order of GPA\n        for letter, gpa in sorted(grade_table.items(), reverse=True):\n            # If the grade is greater than or equal to the GPA, update the letter grade\n            if grade >= gpa:\n                letter_grade = letter\n                break\n        \n        # Append the letter grade to the list\n        letter_grades.append(letter_grade)\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Calculate the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "EvoEval/83", "completion": "\n    return 9 * (10 ** (n - 2))  # 9 * 10^(n-2) = 9 * 10^(n-2) * 1 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1) / 10 = 9 * 10^(n-1"}
{"task_id": "EvoEval/84", "completion": "\n    hexa = hex(N)[2:]\n    return sum(int(digit, 16) for digit in hexa)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)  # sum odd elements at even indices\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)  # return the result as a string\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x], key=lambda x: (-x[1], x[0]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if len(array_copy) == 0:\n        return array_copy\n    \n    # Check if the first and last elements are odd\n    if array_copy[0] % 2 != 0 and array_copy[-1] % 2 != 0:\n        # Sort the array in ascending order\n        array_copy.sort()\n    else:\n        # Sort the array in descending order\n        array_copy.sort(reverse=True)\n    \n    # Remove duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order\n    array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                encrypted += alphabet[(alphabet.index(char) + shift) % 26]\n            else:\n                encrypted += alphabet[(alphabet.index(char.lower()) + shift) % 26].upper()\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if not lst:\n        return None\n    max_num = second_max = float('-inf')\n    for num in lst:\n        if num > max_num:\n            second_max = max_num\n            max_num = num\n        elif num > second_max and num != max_num:\n            second_max = num\n    return second_max if second_max != float('-inf') else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\" and words[i+1] == \"am\" and words[i+2] == \"bored\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (abs(x) + abs(y) == z or abs(x) + abs(z) == y or abs(y) + abs(z) == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))  # Check if the sum of the absolute values of two numbers is equal to the third number and all numbers are integers\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr((ord(char.lower()) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    min_prime = float('inf')\n    for num in lst:\n        if num > 0 and is_prime(num):\n            min_prime = min(min_prime, num)\n    return sum_digits(min_prime) if min_prime != float('inf') else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(2, n + 1):\n        # Assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes[::-1]  # Return list in descending order\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Convert the integers to strings to easily access each digit\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over each digit in the first number\n    for i in range(len(str_a)):\n        # Iterate over each digit in the second number\n        for j in range(len(str_b)):\n            # Multiply the current digits and add the result to the total\n            result += int(str_a[-1-i]) * int(str_b[-1-j])\n    \n    # Calculate the sum of the digits of the result\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    \n    # Return the sum of the digits\n    return sum_of_digits\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
