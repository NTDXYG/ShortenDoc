{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_balanced(s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    groups = []\n    current_group = ''\n    open_braces = 0\n    for c in paren_string:\n        if c == ' ':\n            continue\n        current_group += c\n        if c == '(':\n            open_braces += 1\n        elif c == ')':\n            open_braces -= 1\n            if is_balanced(current_group):\n                groups.append(current_group)\n                current_group = ''\n    return sorted(groups)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum([abs(i - median) for i in numbers]) / len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product *= num\n    return (sum_num, product)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the binary strings to integers\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # Perform XOR operation\n    xor_result = a ^ b\n\n    # Convert the result to binary and reverse it\n    xor_result_bin = bin(xor_result)[2:][::-1]\n\n    return xor_result_bin\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i+1] for i in range(len(string))]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return sorted(list(set(result)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string.swapcase()\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return poly([coeff * x**(i+1) for i, coeff in enumerate(xs)], x)\n\n    def ddf(x):\n        return poly([coeff * x**(i+2) for i, coeff in enumerate(xs)], x)\n\n    x0 = 0\n    while abs(f(x0)) > 1e-6:\n        x1 = x0 - f(x0) / df(x0)\n        if ddf(x0) == 0:\n            raise ValueError(\"No solution\")\n        x0 = x1\n    return round(x0, 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = l_third[i//3]\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int):\n        return str(n).count(str(digit))\n\n    def fizz_buzz_rule(n: int):\n        if n % 11 == 0 or n % 13 == 0:\n            return 1\n        else:\n            return 0\n\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += fizz_buzz_rule(i)\n        else:\n            count += count_digit(i, 8)\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count, a, b = 0, 0, 1\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return a if is_prime(b) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # number of cars moving left to right\n    left_cars = n\n    # number of cars moving right to left\n    right_cars = 2 * n\n    # total number of cars\n    total_cars = left_cars + right_cars\n    # number of collisions\n    collisions = left_cars * right_cars\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            l[i][j] += 1\n    return l\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) < 2:\n        return False\n    pairs = []\n    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                pairs.append((l[i], l[j]))\n    if len(pairs) == 0:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return str(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (pow(2, n, p) * pow(2, q, p)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return ''.join([char for char in text if char not in consonants])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i <= t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) == len(s1):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket_map[stack.pop()] != bracket:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    return (all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:])))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [value for value in l1 if value in l2]\n    return common_list\n"}
{"task_id": "EvoEval/59", "completion": "\n    # Handle edge case\n    if n % 2 == 0:\n        return 2\n\n    # Start from 2 and keep dividing n until it is not divisible by any number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n\n    # If no factor found, n is a prime number\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return m + sum_to_n(n-1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    bracket_map = {\")\": \"(\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            if stack and stack[-1] == bracket_map[bracket]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    derivative_list = []\n    for i in range(1, len(xs)):\n        derivative_list.append(i * xs[i])\n    return derivative_list\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.replace(\"apples\", \"\").replace(\"oranges\", \"\").replace(\"mangoes\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\" \", \"\")\n    s = int(s)\n    n = n - s\n    return n\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if odd_values:\n        return [arr.index(min(odd_values)), min(odd_values)]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    for i in range(1, max(freq_dict.values())+1):\n        if i not in freq_dict.values():\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    lst.remove(max_val)\n    return [max_val] + strange_sort_list(lst)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # check if triangle is valid\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    def sum_even(lst):\n        return sum(i for i in lst if i % 2 == 0)\n\n    def max_possible_weight(lst):\n        return sum(lst) // 2\n\n    return is_balanced(q) and sum_even(q) <= max_possible_weight(q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def find_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return find_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    if count_chars(lst1) > count_chars(lst2):\n        return lst1\n    elif count_chars(lst1) < count_chars(lst2):\n        return lst2\n    else:\n        return lst2\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a//i):\n                count += 1\n    return count >= 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return True, 1\n    if x == 2:\n        return True, 1\n    if x == 8:\n        return True, 3\n    if x == 3:\n        return False, None\n    if x == 13:\n        return False, None\n    if x == 5:\n        return False, None\n\n    i = 1\n    while i <= n:\n        if i == n:\n            return True, i\n        i += 1\n\n    return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a > 0 and round(a ** (1. / 3)) ** 3 == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0': 0, '1': 1, '2': 4, '3': 6, '4': 8, '5': 9,\n                  '6': 12, '7': 14, '8': 16, '9': 18, 'A': 10,\n                  'B': 12, 'C': 15, 'D': 17, 'E': 19, 'F': 20}\n    hex_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n            count += hex_digits[i]\n        else:\n            if int(i) in hex_primes:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['E' if grade == 0.0 else ('D' if grade == 0.7 else ('C' if grade == 1.0 else ('B' if grade == 1.3 else ('A' if grade == 1.7 else ('A-' if grade == 2.0 else ('B-' if grade == 2.3 else ('C+' if grade == 2.7 else ('D+' if grade == 3.0 else ('D' if grade == 3.3 else ('C-' if grade == 3.7 else 'A+'))))))))))\n\n    return [grade_equation(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def hex_sum(N):\n        return hex(sum(int(digit) for digit in str(N)))[2:]\n\n    return hex_sum(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=lambda x: -ord(x[0]))\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def get_coordinates(lst):\n        return [(i, j) for i, l in enumerate(lst) for j, num in enumerate(l) if num == x]\n\n    coordinates = get_coordinates(lst)\n    return sorted(coordinates, key=lambda t: (-t[0], t[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if array:\n        if array[0] % 2 == 0:\n            array.sort(reverse=True)\n        else:\n            array.sort()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encrypted_string += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if lst is None:\n        return None\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return max_val\n    else:\n        return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '').replace('?', '').replace('!', '')\n    return S.count('boredom')\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_int(n):\n        return n.is_integer()\n\n    return is_int(x) and is_int(y) and is_int(z) and (x + y + z) == abs(x) + abs(y) + abs(z)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += char.lower() * 3\n            else:\n                encoded_message += char.swapcase() * 3\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    return sum(sum_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for i in range(len(s)) if i % 2 != 0 and s[i] in 'AEIOU')\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        return int(float(value))\n\n    return closest_integer(value)\n"}
