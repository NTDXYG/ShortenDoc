{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    mad = [abs(x - median) for x in numbers]\n    return mad[len(mad) // 2]\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return sorted(depths, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return sum_num, product_num\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_so_far = float('inf')\n    result = []\n    for num in numbers:\n        min_so_far = min(min_so_far, num)\n        result.append(min_so_far)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    from math import gcd\n    return abs(a*b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "EvoEval/17", "completion": "\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(set(beats), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(sorted_nums)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(len(numbers) - 1):\n        current_diff = abs(numbers[i + 1] - numbers[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors[::-1]\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    else:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 0.01\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_copy = l.copy()\n    l_copy[::3] = sorted(l[::3], reverse=True)\n    return l_copy\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for num in l:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '8' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    even_index = 0\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[even_index]\n        even_index += 1\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    pass\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        return \"Invalid base\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result if result else \"0\"\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        half = modp(n // 2, p, q)\n        return (half * half) % q\n    else:\n        return (modp(n - 1, p, q) * p) % q\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [num for num in l if num <= t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == \"(\":\n            balance += 1\n        elif char == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    # Using set intersection to find common elements\n    result = list(set(l1) & set(l2))\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n == 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n - m, m)\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift == 0:\n        return str(x)\n    else:\n        shift = shift % len(str(x))\n        return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruit_dict = {\"apples\":0,\"oranges\":0,\"mango\":0}\n    for fruit in s.split():\n        if fruit.isdigit():\n            fruit_dict[\"apples\"] += int(fruit)\n        else:\n            fruit_dict[fruit] += 1\n    return n - sum(fruit_dict.values()) - fruit_dict[\"mango\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd_values = [(value, index) for index, value in enumerate(arr) if value % 2 != 0]\n    if not odd_values:\n        return []\n    return [min(odd_values, key=lambda x: x[0])[1], min(odd_values, key=lambda x: x[0])[0]]\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) <= w and sum(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    total1 = sum(len(i) for i in lst1)\n    total2 = sum(len(i) for i in lst2)\n    if total1 > total2:\n        return lst1\n    elif total2 > total1:\n        return lst2\n    else:\n        return lst2\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    power = 0\n    while x % n == 0:\n        x /= n\n        power += 1\n        if x == 1:\n            return True, power\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    if a == 0:\n        return True\n    a = abs(a)\n    b = round(a ** (1. / 3.))\n    return b ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # your code here\n    count = 0\n    for i in num:\n        if i in ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    pass\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * starts_one_ends(n - 1)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return hex(sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, reverse=True))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not lst:\n        return []\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    \n    sorted_array = sorted(set(array))\n    \n    if sorted_array[-1] % 2 == 0:\n        sorted_array.reverse()\n    \n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            encrypted_char = chr((ord(char) - base + shift) % 26 + base)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\" and words[-1] == \"boredom\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return abs(x) + abs(y) == abs(z)\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the vowel 3 places ahead\n                new_char = vowels[(vowels.index(char.lower()) + 3) % len(vowels)]\n                # Swap case\n                new_char = new_char.swapcase()\n            else:\n                new_char = char\n            # Replace with the new character\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for num in lst:\n        if is_prime(num):\n            return num\n    return None\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_case = upper_case = False\n    for key in dict.keys():\n        if key.islower():\n            lower_case = True\n        elif key.isupper():\n            upper_case = True\n        else:\n            return False\n        if lower_case and upper_case:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(value) if float(value) % 1 == 0 else int(value) - 1 if float(value) < 0 else int(value) + 1\n"}
