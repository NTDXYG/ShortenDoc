{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def balance_paren(s: str) -> str:\n        count = 0\n        result = \"\"\n        for char in s:\n            if char == \"(\":\n                count += 1\n                result += char\n            elif char == \")\":\n                count -= 1\n                result += char\n        return result * count\n\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = paren_string.split(\")\")\n    groups = [group.replace(\"(\", \"\") for group in groups]\n    groups = [balance_paren(group) for group in groups]\n    groups = sorted(groups)\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    int_part = int(number)\n    frac_part = number - int_part\n    return int_part, frac_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum([abs(num - median) for num in numbers]) / len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    non_negative_numbers = [num for num in numbers if num >= 0]\n    return (sum(non_negative_numbers), prod(non_negative_numbers))\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n    # Reverse the result\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    pass\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return sorted(list(set(result)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return (numbers[-1], numbers[-2])\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return -poly(xs[::-1], 1) / poly(xs, 1)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    l_third.sort(reverse=True)\n    for i in range(len(l)):\n        if (i+1) % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int) -> int:\n        return str(n).count(str(digit))\n\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_digit(i, 8)\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = list(l)\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i, count, fib_num = 0, 0, 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num if count == n else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n\n    fib_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n + 1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n\n    return str(fib_sequence[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l = sorted(l)\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (pow(2, n + q, p) - 1) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i <= t:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    else:\n        return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(common_list, reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] - fibfib_list[-3])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    length = len(digits)\n    shift %= length\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n    return sum(ord(c) for c in s if c.islower() and c.isdigit())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = int(fruits[-1].split(\" \")[0])\n    total_oranges = int(fruits[-2].split(\" \")[0])\n    return total_fruits + total_oranges - n\n"}
{"task_id": "EvoEval/68", "completion": "\n    def pluck(arr):\n        odd_values = [(i, node) for i, node in enumerate(arr) if node % 2 != 0]\n        if not odd_values:\n            return []\n        smallest_odd_value = min(odd_values, key=lambda x: (x[1], x[0]))\n        return list(smallest_odd_value)\n\n    print(pluck([4,3,5]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 1, 3, 0, 4, 2]))\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # return the area rounded to 3 decimal points\n    return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_less_than_max_weight(lst, w):\n        return sum_of_elements(lst) <= w\n\n    return is_balanced(q) and is_even(sum_of_elements(q)) and is_less_than_max_weight(q, w)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    if count_chars(lst1) > count_chars(lst2):\n        return lst1\n    elif count_chars(lst1) < count_chars(lst2):\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                for l in range(k + 1, len(primes)):\n                    if primes[i] * primes[j] * primes[k] * primes[l] == a:\n                        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    i = 0\n    while x % n == 0:\n        x /= n\n        i += 1\n    if x == 1:\n        return True, i\n    else:\n        return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n            if hex_digits[i] not in primes:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['E' if grade == 0.0 else 'D' if grade == 0.7 else 'C' if grade == 1.0 else 'B' if grade == 1.3 else 'A' if grade == 1.7 else 'A-' if grade > 1.7 else 'B-' if grade > 2.0 else 'C-' if grade > 2.3 else 'D-' if grade > 2.7 else 'F' for grade in sorted(grades, reverse=True)]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n\nnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<empty_output>\n<"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 90\n    else:\n        return 0\n"}
{"task_id": "EvoEval/84", "completion": "\n    def hex_sum(N):\n        return hex(sum(int(digit) for digit in str(N)))[2:]\n\n    return hex_sum(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=lambda x: -ord(x[0]))\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    array.sort()\n    if sum(array) % 2 == 0:\n        return array[::-1]\n    else:\n        return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return None\n    return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.split()\n    count = 0\n    for word in S:\n        if word.startswith('I') and word.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_int(n):\n        return n.is_integer()\n\n    def sum_abs(x, y, z):\n        return abs(x) + abs(y) + abs(z)\n\n    def all_int(x, y, z):\n        return is_int(x) and is_int(y) and is_int(z)\n\n    return all_int(x, y, z) and sum_abs(x, y, z) == x + y + z\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr(ord(char) + 3)\n            else:\n                encoded_message += chr(ord(char.lower()) + 3)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    return sum_of_digits(min(primes))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    result = 0\n    a_str = str(abs(a))\n    b_str = str(abs(b))\n    for i in range(len(a_str)):\n        for j in range(len(b_str)):\n            result += int(a_str[i]) * int(b_str[j]) * (10 ** (len(a_str) - i - 1)) * (10 ** (len(b_str) - j - 1))\n    return result\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def is_float(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def round_to_zero(n):\n        if n > 0:\n            return int(n + 0.5)\n        elif n < 0:\n            return int(n - 0.5)\n        else:\n            return 0\n\n    if is_float(value):\n        return round_to_zero(int(value))\n    else:\n        return int(value)\n"}
