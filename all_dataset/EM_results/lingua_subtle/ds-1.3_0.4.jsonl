{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = \"\"\n            else:\n                temp = \"\"\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = numbers[length//2]\n    mad = sum([abs(i - median) for i in numbers])/len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed.append(delimeter)\n    return interspersed\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            count += 1\n        elif char == ')':\n            stack.pop()\n            result.append(count)\n            count = 0\n    result.sort(reverse=True)\n    return result\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product *= num\n    return (sum_num, product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    min_num = numbers[0]\n    result = [min_num]\n\n    for num in numbers[1:]:\n        min_num = min(min_num, num)\n        result.append(min_num)\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter binary string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    # Reverse the result\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split('|')\n    beats = []\n    for note in notes:\n        if 'o' in note:\n            beats.append(4)\n        elif '.' in note:\n            beats.append(1)\n        elif '|' in note:\n            beats.append(2)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return [(number - min_val) / (max_val - min_val) for number in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return poly([coeff * x**i for i, coeff in enumerate(xs)], x)\n\n    def ddf(x):\n        return poly([(i+1) * coeff * x**(i+1) for i, coeff in enumerate(xs)], x)\n\n    x0 = 0\n    while abs(f(x0)) > 1e-6:\n        x1 = x0 - f(x0) / df(x0)\n        if ddf(x0) == 0:\n            raise ValueError(\"No solution found\")\n        x0 = x1\n\n    return round(x0, 6)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    def fizz_buzz_helper(n: int, divisor: int, count: int):\n        if n == 0:\n            return count\n        elif n % divisor == 0:\n            return fizz_buzz_helper(n // divisor, divisor, count + 1)\n        else:\n            return fizz_buzz_helper(n - 1, divisor, count)\n\n    return fizz_buzz_helper(n, 11, 0)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    count, a, b = 0, 0, 1\n    while count < n:\n        fib_num = fib(a)\n        if is_prime(fib_num):\n            count += 1\n        a += 1\n    return fib_num if count == n else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    collisions = 0\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        if x1 < x2 and y1 < y2:\n            collisions += 1\n    return collisions\n\n\nn = int(input())"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    def _sum_to_one(l):\n        l.sort()\n        left, right = 0, len(l) - 1\n        while left < right:\n            if l[left] + l[right] == 0:\n                return True\n            elif l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n        return False\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if _sum_to_one(l[i:j+1]):\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    # \u5c06n\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\n    n_bin = bin(n)[2:]\n    # \u8ba1\u7b97n_bin\u7684\u957f\u5ea6\n    n_len = len(n_bin)\n    # \u5982\u679cn\u5c0f\u4e8ep\uff0c\u5219\u8fd4\u56den\n    if n < p:\n        return n\n    # \u5982\u679cn\u7b49\u4e8ep\uff0c\u5219\u8fd4\u56de0\n    elif n == p:\n        return 0\n    # \u5982\u679cn\u5927\u4e8ep\uff0c\u5219\u8fd4\u56den - p\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u957f\u5ea6\n    else:\n        return n_len - n_bin.find('1')\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket_map[stack.pop()] != bracket:\n            return bracket\n    return None if len(stack) == 0 else stack[0]\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    diff = l[1] - l[0]\n    for i in range(2, len(l)):\n        if diff == 0:\n            return False\n        if diff > 0:\n            if l[i] - l[i-1] < 0:\n                return False\n        else:\n            if l[i] - l[i-1] > 0:\n                return False\n        diff = l[i] - l[i-1]\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return common_list\n"}
{"task_id": "EvoEval/59", "completion": "\n    # If n is even, then it's a composite number, so we can't find a prime factor\n    if n % 2 == 0:\n        return 2\n\n    # We start from 3 and only check odd numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    # If no factors found, then n is a prime number\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return m + sum_to_n(n-1, m)\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif stack and bracket_map[stack[-1]] == bracket:\n            stack.pop()\n        else:\n            return False\n\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) < 2:\n        return []\n    return [i*xs[i+1] for i in range(len(xs)-1)]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 1, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] - fibfib_list[-3])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiouy\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # convert integer to string\n    x_str = str(x)\n    # shift digits\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    # return result string\n    return shifted_str\n\n"}
{"task_id": "EvoEval/66", "completion": "\n\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split()\n    total_fruits = int(fruits[-1])\n    total_apples = int(fruits[0])\n    total_oranges = int(fruits[2])\n    total_mangoes = total_fruits - total_oranges - total_apples\n    return total_mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    def pluck(arr):\n        odd_values = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n        if not odd_values:\n            return []\n        odd_values.sort()\n        return [odd_values[0][0], odd_values[1][0]] if len(odd_values) > 1 else [odd_values[0][0]]\n\n    print(pluck([4,3,5]))\n    print(pluck([1,2,3]))\n    print(pluck([]))\n    print(pluck([5, 1, 3, 0, 4, 2]))\n\npluck()\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    count = Counter(lst)\n    for i in range(1, max(count)+1):\n        if i not in count:\n            return i\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    # your code here\n"}
{"task_id": "EvoEval/71", "completion": "\n    # check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_balanced(lst):\n        return sum(lst) <= w\n\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    return is_balanced(q) and is_palindrome(q)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count\n\n    def smallest_change_palindromic(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count + 1 if count%2 != 0 else count\n\n    return smallest_change_palindromic(arr)\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    if count_chars(lst1) > count_chars(lst2):\n        return lst1\n    elif count_chars(lst1) < count_chars(lst2):\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a//i):\n                count += 1\n    return count >= 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    elif n == 1:\n        return True, 0\n    elif x == 2:\n        return True, 1\n    elif x == 3:\n        return True, 1\n    elif x == 4:\n        return True, 2\n    elif x == 5:\n        return True, 2\n    else:\n        i = 0\n        while x != 1:\n            if x % n == 0:\n                x = x // n\n                i += 1\n            else:\n                return False, i\n        return True, i\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a > 0 and round(a ** (1. / 3)) ** 3 == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    hex_prime = [\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\"]\n    count = 0\n    for i in num:\n        if i in hex_dict:\n            count += hex_dict[i]\n        else:\n            return 0\n    if str(count) == num:\n        for i in num:\n            if i in hex_prime:\n                return len(num)\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else 'A' if grade > 3.7 else 'B+' if grade > 3.3 else 'B' if grade > 3.0 else 'B-' if grade > 2.7 else 'C+' if grade > 2.3 else 'C' if grade > 2.0 else 'C-' if grade > 1.7 else 'D+' if grade > 1.3 else 'D' if grade > 1.0 else 'D-' if grade > 0.7 else 'E' if grade > 0.0 else 'E-' for grade in grades]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 0\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    hex_num = hex(sum_of_digits(N))\n    return hex_num[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def _shuffle(s):\n        return ''.join(sorted(s, key=lambda c: ord(c)))\n\n    return ' '.join(_shuffle(s))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def get_row(lst, x):\n        result = []\n        for i in range(len(lst)):\n            if lst[i][x] not in result:\n                result.append(lst[i][x])\n        return sorted(result, reverse=True)\n\n    return [(i, lst[i].index(x)) for i in range(len(lst))]\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def sort_array(array):\n        if not array:\n            return array\n        array = list(set(array))\n        array.sort()\n        if array[-1] % 2 != 0:\n            return array[::-1]\n        else:\n            return array[::-1]\n\n    print(sort_array([]))\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 2, 4, 3, 0, 1, 5, 6]))\n\nsort_array()\nsort_array([5])\nsort_array([2, 4, 3, 0, 1, 5])\nsort_array([2, 4, 3, 0, 1, 5, 6])\nsort_array([2, 2, 4, 3, 0, 1, 5, 6])\n\nThe function sort_array() is defined to take an array as an argument. If the array is empty, it returns the array. If not, it removes the duplicate values from the array and sorts it in ascending order. If the last element of the sorted array is odd, it returns the array in descending order. Otherwise, it returns the array in ascending order.\n\nThe function sort_array() is then called with different test cases to check if the function is working as expected.\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index - 2) % len(alphabet)\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.lower()\n    words = S.split()\n    count = 0\n    for word in words:\n        if word == \"boredom\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def _int(x, y, z):\n        return (x == int(x) and y == int(y) and z == int(z))\n\n    return _int(x, y, z)\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += char.lower() * 3\n            else:\n                encoded_message += char.swapcase() * 3\n        else:\n            encoded_message += char * 3\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_prime(lst):\n        primes = [i for i in lst if is_prime(i)]\n        return min(primes) if primes else None\n\n    return smallest_prime(lst)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
