{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # remove spaces from string\n    paren_string = paren_string.replace(\" \", \"\")\n    # create empty list to store groups\n    groups = []\n    # create empty string to store current group\n    current_group = \"\"\n    # create empty string to store current open brace\n    current_open_brace = \"\"\n    # create empty string to store current closed brace\n    current_closed_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace = \"\"\n    # create empty string to store current nested brace\n    current_nested_brace ="}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    deviations = [abs(x - median) for x in numbers]\n    median_deviation = sorted(deviations)[len(deviations) // 2]\n    return median_deviation"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                start = stack.pop()\n                depth = i - start + 1\n                result.append(depth)\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum_ += num\n            product *= num\n    return sum_, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(min(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad shorter string with leading zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join('1' if a_bin[i] != b_bin[i] else '0' for i in range(max_len))\n\n    # Reverse result and convert to decimal\n    result = int(result[::-1], 2)\n\n    return result\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = min(strings, key=len)\n    return shortest_str\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = []\n    for i in music_string:\n        if i == 'o':\n            music_list.append(4)\n        elif i == 'o|':\n            music_list.append(2)\n        elif i == '.|':\n            music_list.append(1)\n    music_list = list(set(music_list))\n    music_list.sort(reverse=True)\n    return music_list\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return len(string) - len(substring) + 1"}
{"task_id": "EvoEval/19", "completion": "\n    # Create a dictionary to map each numeral to its corresponding integer value\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numerals\n    numerals = numbers.split()\n\n    # Convert each numeral to its integer value and sort the list in descending order\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_to_value[x], reverse=True)\n\n    # Join the sorted numerals back into a string\n    sorted_numbers = ' '.join(sorted_numerals)\n\n    return sorted_numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_diff = float(\"inf\")\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return sorted([(x - min_num) / (max_num - min_num) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(list(set(numbers)), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        return string.swapcase()\n    \n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    # TODO: implement\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 and i % 13 == 0)"}
{"task_id": "EvoEval/37", "completion": "\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even.pop(0)\n    return l"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    if count < n:\n        return None\n    else:\n        return fib(i-1)\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # TODO: implement\n    pass\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Not a triangle\""}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) * fib4(n-2) * fib4(n-3) + fib4(n-1) + fib4(n-2) + fib4(n-3)"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p, q) ** 2 % q\n    else:\n        return (modp(n // 2, p, q) ** 2 * p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return \"\".join([char for char in text if char not in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1"}
{"task_id": "EvoEval/54", "completion": "\n    return len(set(s0)) == len(set(s1))\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return list(set(l1) & set(l2))\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)"}
{"task_id": "EvoEval/64", "completion": "\n    return 0\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift == 0:\n        return str(x)\n    else:\n        return circular_shift(x // 10, shift - 1) + str(x % 10)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruit = s.split()\n    fruit_dict = {}\n    for i in range(0, len(fruit), 2):\n        fruit_dict[fruit[i]] = int(fruit[i+1])\n    return fruit_dict\n"}
{"task_id": "EvoEval/68", "completion": "\n    # your code goes here\n    if not arr:\n        return []\n    odd = []\n    for i, v in enumerate(arr):\n        if v % 2 == 1:\n            odd.append([i, v])\n    if not odd:\n        return []\n    odd.sort(key=lambda x: x[1])\n    return [odd[0][0], odd[0][1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(lst) + 1):\n        if c[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) % 2 == 0 and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) % 2 == 0:\n        return even(arr)\n    else:\n        return odd(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst2\n    elif len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return True, 1\n    if x == n:\n        return True, 1\n    if x % n != 0:\n        return False, None\n    while x % n == 0:\n        x //= n\n    if x == 1:\n        return True, 1\n    return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a**0.3333333333333333 == int(a**0.3333333333333333)\n"}
{"task_id": "EvoEval/78", "completion": "\n    # convert hexadecimal to decimal\n    decimal = int(num, 16)\n    # convert decimal to binary\n    binary = bin(decimal)[2:]\n    # count the number of 0s and 1s in the binary representation\n    count_0 = binary.count('0')\n    count_1 = binary.count('1')\n    # return the sum of the counts\n    return count_0 + count_1\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades)\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    if len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 2 * 10 ** (n - 2)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    return str(sum(int(i, 16) for i in str(hex(N))[2:]))\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ''.join(sorted(s, reverse=True))\n"}
{"task_id": "EvoEval/87", "completion": "\n    # create empty list to store coordinates\n    coordinates = []\n    # iterate through each row in the list\n    for i, row in enumerate(lst):\n        # iterate through each element in the row\n        for j, element in enumerate(row):\n            # if the element is equal to x, add the coordinates to the list\n            if element == x:\n                coordinates.append((i, j))\n    # sort the coordinates by descending order of rows and ascending order of columns\n    coordinates.sort(key=lambda x: (-x[0], x[1]))\n    # return the sorted coordinates\n    return coordinates\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # create a copy of the array\n    array_copy = array.copy()\n    # remove duplicates\n    array_copy = list(set(array_copy))\n    # sort the array\n    array_copy.sort()\n    # check if the last element is odd or even\n    if array_copy[-1] % 2 == 0:\n        # sort the array in descending order\n        array_copy.sort(reverse=True)\n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            new_index = (index + 2) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += letter\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'\\bI am (.*?) boredom\\b', S, re.I))\n"}
{"task_id": "EvoEval/92", "completion": "\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    return abs(x) + abs(y) == abs(x) + abs(z)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    smallest_prime = min(primes)\n    return int(str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    if len(dict) == 0:\n        return False\n    if all(key.islower() for key in dict.keys()):\n        return True\n    if all(key.isupper() for key in dict.keys()):\n        return True\n    return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return len(str(a * b))\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s[::2] if c in 'AEIOU')\n  \n  \n  \n  # Tests\n  \n  print(count_upper('aBCdEf'))  # 0\n  print(count_upper('abcdefg'))  # 0\n  print(count_upper('dBBE'))  # 1\n  print(count_upper('aBCdEfG'))  # 0\n  print(count_upper('aBCdEfGh'))  # 0\n  print(count_upper('aBCdEfGhI'))  # 1\n  print(count_upper('aBCdEfGhIJ'))  # 1\n  print(count_upper('aBCdEfGhIJk'))  # 1\n  print(count_upper('aBCdEfGhIJkl'))  # 1\n  print(count_upper('aBCdEfGhIJklm'))  # 1\n  print(count_upper('aBCdEfGhIJklmn'))  # 1\n  print(count_upper('aBCdEfGhIJklmno'))  # 1\n  print(count_upper('aBCdEfGhIJklmnop'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopq'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqr'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrs'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrst'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstu'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuv'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuvw'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuvwx'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuvwx'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuvwx'))  # 1\n  print(count_upper('aBCdEfGhIJklmnopqrstuvwx'))  # 1\n  print(count_upper('aBCdEfGhIJ"}
{"task_id": "EvoEval/99", "completion": "\n    return int(value) if value % 1 == 0 else int(value + 0.5 * (-1) ** int(value % 1))\n\n"}
