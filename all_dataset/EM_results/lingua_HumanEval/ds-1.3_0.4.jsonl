{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('')\n            else:\n                result.append(char)\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(x - mean) for x in numbers]\n    return sum(differences) / len(differences)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    stack = []\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            count += 1\n        elif char == ')':\n            stack.pop()\n            result.append(count)\n            count = 0\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_num = 0\n    product = 1\n    for num in numbers:\n        sum_num += num\n        product *= num\n    return (sum_num, product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort()\n\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(set(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return poly(xs[1:], x)\n\n    def find_zero(f, df, x0, eps=1e-6):\n        x = x0\n        while abs(f(x)) > eps:\n            dx = -f(x) / df(x)\n            x += dx\n        return round(x, 6)\n\n    return find_zero(f, df, 0)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    def fizz_buzz_number(n: int):\n        if n % 11 == 0 and n % 13 == 0:\n            return \"2\"\n        elif n % 11 == 0:\n            return \"1\"\n        elif n % 13 == 0:\n            return \"3\"\n        else:\n            return n\n\n    return [fizz_buzz_number(i) for i in range(1, n+1)]\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    count, a, b = 0, 0, 1\n    while count < n:\n        if is_prime(fib(a)):\n            count += 1\n        a += 1\n    return fib(a - 1)\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum == 0:\n                return True\n            elif sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    collisions = 0\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        if x1 < x2 and y1 < y2:\n            collisions += 1\n    return collisions\n\n\nn = int(input())"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            l[i][j] += 1\n    return l\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while left < right:\n        if l[left] + l[right] == 0:\n            return True\n        elif l[left] + l[right] < 0:\n            left += 1\n        else:\n            right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    # \uc785\ub825 \ubb38\uc790\uc5f4\uc774 \ud68c\ubb38\uc778\uc9c0 \ud655\uc778\ud558\ub294 \ud568\uc218\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return n % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_text = ''\n    for char in text:\n        if char not in vowels:\n            no_vowels_text += char\n    return no_vowels_text\n"}
{"task_id": "HumanEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    if set(s0) == set(s1):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return common_list\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket_map[stack.pop()] != bracket:\n            return bracket\n    return None if len(stack) == 0 else stack[0]\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) < 2:\n        return []\n    return [i*xs[i+1] for i in range(len(xs)-1)]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 1, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouyAEIOUY\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    # convert integer to string\n    x_str = str(x)\n    # shift digits\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    # return result string\n    return shifted_str\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    fruits = [int(i) for i in s if i.isdigit()]\n    fruits.sort()\n    return fruits[-1] - fruits[0] - n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(i, node) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        return min(even_values, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    count = Counter(lst)\n    for i in range(1, max(count)+1):\n        if i in count and count[i] > i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, max_weight):\n        return sum_elements(lst) <= max_weight\n\n    return is_palindrome(q) and is_balanced(q, w)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count\n\n    # test cases\n    print(smallest_change([1,2,3,5,4,7,9,6])) # 4\n    print(smallest_change([1, 2, 3])) # 1\n    print(smallest_change([1, 0])) # 1\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    if count_chars(lst1) < count_chars(lst2):\n        return lst1\n    elif count_chars(lst1) > count_chars(lst2):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, a//2 + 1):\n        if a % i == 0 and is_prime(i):\n            primes.append(i)\n            if len(primes) > 3:\n                return False\n    if len(primes) == 3 and all(is_prime(p) for p in primes):\n        return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1 or n == 1:\n        return True\n    if x == 0 or n == 0:\n        return False\n    if x == 2 or n == 2:\n        return True\n    if x == 3 or n == 3:\n        return True\n    if x == 4 or n == 4:\n        return True\n    if x == 5 or n == 5:\n        return True\n    if x == 6 or n == 6:\n        return True\n    if x == 7 or n == 7:\n        return True\n    if x == 8 or n == 8:\n        return True\n    if x == 9 or n == 9:\n        return True\n    if x == 10 or n == 10:\n        return True\n    if x == 11 or n == 11:\n        return True\n    if x == 12 or n == 12:\n        return True\n    if x == 13 or n == 13:\n        return True\n    if x == 14 or n == 14:\n        return True\n    if x == 15 or n == 15:\n        return True\n    if x == 16 or n == 16:\n        return True\n    if x == 17 or n == 17:\n        return True\n    if x == 18 or n == 18:\n        return True\n    if x == 19 or n == 19:\n        return True\n    if x == 20 or n == 20:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a == round(a ** (1. / 3)) ** 3\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_digits = \"0123456789ABCDEF\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n            count += hex_digits.index(i) % 2\n        else:\n            return 0\n    if count == len(num):\n        return 1\n    else:\n        return 2\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    binary = 'db' + binary + 'db'\n    return binary\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) != 3:\n        return False\n    return s[0] != s[1] and s[1] != s[2] and s[0] != s[2]\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else 'A' if grade > 3.7 else 'B+' if grade > 3.3 else 'B' if grade > 3.0 else 'B-' if grade > 2.7 else 'C+' if grade > 2.3 else 'C' if grade > 2.0 else 'C-' if grade > 1.7 else 'D+' if grade > 1.3 else 'D' if grade > 1.0 else 'D-' if grade > 0.7 else 'E' if grade > 0.0 else 'E-' for grade in grades]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # convert integer to binary\n    binary = bin(N)[2:]\n    \n    # count the number of digits in the binary number\n    count = len(binary)\n    \n    # return the count\n    return count\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    def shuffle(s):\n        return ''.join(sorted(s, key=ord))\n\n    return ' '.join(shuffle(s.split(' ')))\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    def get_row(lst, x):\n        result = []\n        for i, row in enumerate(lst):\n            if row[x] != 0:\n                result.append((i, x))\n        return sorted(result, key=lambda t: (t[0], -t[1]))\n\n    if isinstance(lst, list):\n        return get_row(lst, x)\n    else:\n        raise TypeError(\"Input should be a list of lists\")\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    def sort_array(array):\n        array.sort()\n        if array[-1] % 2 != 0:\n            array.sort(reverse=True)\n        return array\n\n    print(sort_array([]))\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n\nsort_array()\nsort_array([5])\nsort_array([2, 4, 3, 0, 1, 5])\nsort_array([2, 4, 3, 0, 1, 5, 6])\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, encrypted_alphabet)\n    return s.translate(table)\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if lst is None or len(lst) < 2:\n        return None\n\n    first, second = float('inf'), float('inf')\n\n    for num in lst:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.split('. ')\n    count = 0\n    for sentence in S:\n        if sentence.startswith('I am bored'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += char * 2\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(lst):\n        primes = [i for i in lst if is_prime(i)]\n        return max(primes) if primes else None\n\n    return largest_prime(lst)\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not key.islower():\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return a * b\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    if \".\" in str(value):\n        return round(float(value))\n    else:\n        return int(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    def make_a_pile(n):\n        pile = []\n        for i in range(n):\n            if n % 2 == 0:\n                pile.append(2 * (i + 1))\n            else:\n                pile.append(2 * (i + 1) - 1)\n        return pile\n\n    return make_a_pile(n)\n\n"}
{"task_id": "HumanEval/101", "completion": "\n\n    def words_string(s):\n        return s.split(\",\")\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three four five, six\"))\n    \"\"\"\n    def words_string(s):\n        return s.split()\n\n    print(words_string(\"Hi, my"}
{"task_id": "HumanEval/102", "completion": "\n    if x < y:\n        return x + 1\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n    avg = round(total / count)\n    return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def even_digit(n):\n        return [int(i) for i in str(n) if int(i) % 2 == 0]\n\n    return sorted(list(set(even_digit(x))))\n"}
{"task_id": "HumanEval/105", "completion": "\n    result = []\n    for num in arr:\n        if num > 0 and num < 10:\n            result.append([\"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"][num - 1])\n    return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_numbers(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) * sum_numbers(i) for i in range(1, n+1) if i % 2 == 0]\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def count_nums_helper(arr, index, count):\n        if index == len(arr):\n            return count\n        if arr[index] > 0:\n            count += 1\n        return count_nums_helper(arr, index + 1, count)\n\n    return count_nums_helper(arr, 0, 0)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    unique_elements = set(arr)\n    if len(unique_elements) != len(arr):\n        return False\n    for i in range(len(arr)):\n        if arr[i:] == sorted(arr[i:]):\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    lst1_even = all(is_even(x) for x in lst1)\n    lst2_even = all(is_even(x) for x in lst2)\n\n    if lst1_even and lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    def histogram(test):\n        hist = {}\n        for letter in test:\n            if letter in hist:\n                hist[letter] += 1\n            else:\n                hist[letter] = 1\n        return hist\n\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('a b c a 2'))\n    print(histogram('b b a 4'))\n    print(histogram(''))\n\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a b c a 2')\nhistogram('b b a 4')\nhistogram('')\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<"}
{"task_id": "HumanEval/112", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    palindrome = s[::-1]\n    result = (palindrome, is_palindrome(palindrome))\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\n    count = 0\n    for i in lst:\n        for j in i:\n            if int(j) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Your code here\n    def max_fill(grid, capacity):\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0]*m for _ in range(n)]\n        dp2 = [[0]*m for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, m):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        for i in range(n):\n            for j in range(m):\n                dp2[i][j] = dp[i][j] // capacity\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                res += dp2[i][j]\n        return res\n\n    print(max_fill([[0,0,1,0], [0,1,0,0]], 1))\n    print(max_fill([[0,0,0,0], [0,0,0,0]], 2))\n    print(max_fill([[0,0,0], [0,0,0]], 5))\n\nmax_fill(grid, capacity)\n\n\nThis is a Python solution for the problem. The function `max_fill` takes a 2D list `grid` and an integer `capacity` as input. It calculates the maximum number of wells that can be filled with the given capacity. The function uses dynamic programming to solve the problem. The dp array stores the maximum number of water that can be filled in a sub-grid. The dp2 array stores the number of wells filled in a sub-grid. The function iterates over the grid and calculates the maximum number of wells that"}
{"task_id": "HumanEval/116", "completion": "\n    def sort_array(arr):\n        arr.sort()\n        return arr\n\n    def sort_array_binary(arr):\n        arr.sort(key=lambda x: bin(x)[2:])\n        return arr\n\n    def sort_array_decimal(arr):\n        arr.sort(key=lambda x: x)\n        return arr\n\n    if isinstance(arr[0], int) and all(isinstance(i, int) for i in arr):\n        if all(i >= 0 for i in arr):\n            if all(i < 10 for i in arr):\n                return sort_array_decimal(arr)\n            else:\n                return sort_array_binary(arr)\n        else:\n            return \"Array should contain only non-negative integers\"\n    else:\n        return \"Array should contain only integers\"\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    word = word.lower()\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i-1] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def check_balance(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if all(check_balance(s) for s in lst) else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Your code here\n    return sum(arr[:k]) + sum(arr[k:])\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([i for i in sequence if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    date_format = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$')\n    if not date:\n        return False\n    if not re.fullmatch(date_format, date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        if day > 29:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [chr(ord('a') + i) for i in range(len(txt)) if ord(txt[i]) % 2 == 1]\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == 0:\n        return True\n    elif len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] < lst[1]\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection_length(interval1, interval2):\n        return max(0, min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]))\n\n    if not is_prime(intersection_length(interval1, interval2)):\n        return \"NO\"\n    else:\n        return \"YES\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if arr is None:\n        return None\n    if len(arr) == 0:\n        return 0\n    result = 0\n    for num in arr:\n        if num < 0:\n            result -= num\n        else:\n            result += num\n    return result\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    path = []\n    min_path = [float('inf')]*k\n    min_path_index = [-1]*k\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    \n    def dfs(x, y, k):\n        nonlocal min_path, min_path_index, path\n        if k == 0:\n            if len(path) == k and sum(path) < min_path[0]:\n                min_path[0] = sum(path)\n                min_path_index[0] = path[:]\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                path.append(grid[nx][ny])\n                dfs(nx, ny, k-1)\n                visited[nx][ny] = False\n                path.pop()\n    \n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path.append(grid[i][j])\n            dfs(i, j, k-1)\n            path.pop()\n            visited[i][j] = False\n    \n    return min_path_index[0]\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 8\n    else:\n        return tri(n-1) + tri(n-2) + tri(n-3)\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(i**0.5)+1 if i>=0 else int(i**0.5) for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    if not neg_lst:\n        return None\n    return (max(neg_lst), min(pos_lst))\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def _one(a, b):\n        try:\n            return max(a, b)\n        except ValueError:\n            return None\n\n    a = str(a)\n    b = str(b)\n\n    if a.replace('.', '', 1).isdigit() and b.replace('.', '', 1).isdigit():\n        return _one(float(a), float(b))\n    elif a.replace('.', '', 1).isdigit():\n        return _one(int(a), float(b))\n    elif b.replace('.', '', 1).isdigit():\n        return _one(float(a), int(b))\n    else:\n        return _one(a, b)\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    import re\n    text = re.sub(' +', '-', text)\n    text = re.sub(' ', '-', text)\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3 and file_name[-4:].lower() == '.txt' and file_name[0].isalpha():\n        return 'Yes'\n    return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(i**2 if i%3==0 else i**3 if i%4==0 else i for i in lst)\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    prime_words.sort()\n    return \" \".join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    def simplify(x, n):\n        numerator, denominator = map(int, x.split('/'))\n        return numerator/denominator == n/denominator\n\n    return simplify(x, n)\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=sum_digits)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n\n    def first_last_odd(nums):\n        return nums[0] % 10 % 2 == 1 or nums[-1] % 10 % 2 == 1\n\n    def greater_than_ten(nums):\n        return [num for num in nums if num > 10]\n\n    def sum_of_digits(nums):\n        return sum(map(int, str(nums)))\n\n    def sum_of_digits_greater_than_ten(nums):\n        return sum(map(int, str(greater_than_ten(nums))))\n\n    return sum_of_digits_greater_than_ten(nums)\n\n"}
{"task_id": "HumanEval/147", "completion": "\n    def is_multiple_of_3(n):\n        return n % 3 == 0\n\n    def is_sum_of_two_multiples_of_3(n):\n        for i in range(1, n):\n            for j in range(i, n):\n                for k in range(j, n):\n                    if is_multiple_of_3(i + j + k):\n                        return True\n        return False\n\n    result = []\n    for i in range(1, n + 1):\n        if is_sum_of_two_multiples_of_3(i):\n            result.append(i)\n    return result\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets_orbits = [(\"Mercury\", \"Venus\", \"Earth\"),\n                     (\"Venus\", \"Earth\", \"Mars\"),\n                     (\"Earth\", \"Mars\", \"Jupiter\"),\n                     (\"Jupiter\", \"Saturn\", \"Uranus\"),\n                     (\"Saturn\", \"Uranus\", \"Neptune\")]\n    planets_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets_names.index(planet1)\n    planet2_index = planets_names.index(planet2)\n    if planet1_index < planet2_index:\n        return planets_orbits[planet1_index:planet2_index]\n    else:\n        return planets_orbits[planet2_index:planet1_index]\n"}
{"task_id": "HumanEval/149", "completion": "\n\n    def sort_key(word):\n        return len(word), word\n\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=sort_key)\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0:\n            sum += num\n    return sum\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        elif game[i] > guess[i]:\n            result.append(-1)\n        else:\n            result.append(1)\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    # sort the extensions by strength\n    extensions.sort(key=lambda x: (x[0].count('C'), x[0].count('-'), x[0].isupper(), x[0].islower(), x[0]), reverse=True)\n\n    # return the first extension\n    return f'{class_name}.{extensions[0][1]}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    words.sort()\n    return words[-1]\n"}
{"task_id": "HumanEval/159", "completion": "\n    eaten = min(need, remaining)\n    remaining -= eaten\n    number -= eaten\n    return [number, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if operator == \"+\":\n        return sum(operand)\n    elif operator == \"-\":\n        return operand[0] - sum(operand[1:])\n    elif operator == \"*\":\n        result = 1\n        for num in operand:\n            result *= num\n        return result\n    elif operator == \"**\":\n        return operand[0] ** operand[1]\n    else:\n        return \"Invalid operator\"\n"}
{"task_id": "HumanEval/161", "completion": "\n    return s[::-1].swapcase()\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not isinstance(text, str):\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n"}
