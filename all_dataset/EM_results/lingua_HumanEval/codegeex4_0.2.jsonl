{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    open_braces = 0\n    for char in paren_string:\n        if char == \"(\":\n            open_braces += 1\n            current_group += char\n        elif char == \")\":\n            open_braces -= 1\n            current_group += char\n            if open_braces == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n    return paren_groups\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(level, max_level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), prod(numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s\n    return None\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        elif note == '.||':\n            result.append(0.5)\n    return result\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    return len([i for i in range(len(string)) if string[i:].startswith(substring)])\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Create a dictionary to map each word to its corresponding integer value\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its corresponding integer value and sort the list\n    sorted_numbers = sorted(words, key=lambda x: word_to_num[x])\n\n    # Join the sorted list of words back into a string\n    sorted_numbers_str = ' '.join(sorted_numbers)\n\n    return sorted_numbers_str\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have odd number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs[0] must be non zero\")\n    if len(xs) == 1:\n        return 0\n    if len(xs) == 3:\n        return (-xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[0] * xs[2])) / (2 * xs[0])\n    if len(xs) == 5:\n        a = xs[0]\n        b = xs[1]\n        c = xs[2]\n        d = xs[3]\n        e = xs[4]\n        p = (3 * c - b ** 2) / (3 * a)\n        q = (2 * b ** 3 - 9 * a * b * c + 27 * a ** 2 * e) / (27 * a ** 3)\n        delta = (q ** 2) / 4 + (p ** 3) / 27\n        if delta > 0:\n            u = (-q / 2 + math.sqrt(delta)) ** (1 / 3)\n            v = (-q / 2 - math.sqrt(delta)) ** (1 / 3)\n            return u + v - b / (3 * a)\n        elif delta == 0:\n            u = (-q / 2) ** (1 / 3)\n            return 2 * u - b / (3 * a)\n        else:\n            r = (-q / 2 + math.sqrt(-4 * delta)) / 2\n            s = r ** (1 / 3)\n            return 2 * s - b / (3 * a)\n    else:\n        raise ValueError(\"xs must have 3 or 5 coefficients\")\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 and str(i).count('7') > 0)"}
{"task_id": "HumanEval/37", "completion": "\n    even = sorted(l[::2])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i - 1)"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] > 0:\n            break\n        if l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n        return fib4_list[n]"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = text.replace(' ', '')\n    text = text.replace(',', '')\n    text = text.replace('.', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace(';', '')\n    text = text.replace(':', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('/', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('@', '')\n    text = text.replace('#', '')\n    text = text.replace('$', '')\n    text = text.replace('%', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('=', '')\n    text = text.replace('|', '')\n    text = text.replace('`', '')\n    text = text.replace('~', '')\n    text = text.replace('1', '')\n    text = text.replace('2', '')\n    text = text.replace('3', '')\n    text = text.replace('4', '')\n    text = text.replace('5', '')\n    text = text.replace('6', '')\n    text = text.replace('7', '')\n    text = text.replace('8', '')\n    text = text.replace('9', '')\n    text = text.replace('0', '')\n    text = text.replace('\u0430', '')\n    text = text.replace('\u0431', '')\n    text = text.replace('\u0432', '')\n    text = text.replace('\u0433', '')\n    text = text.replace('\u0434', '')\n    text = text.replace('\u0435', '')\n    text = text.replace('\u0451', '')\n    text = text.replace('\u0436', '')\n    text = text.replace('\u0437', '')\n    text = text.replace('\u0438', '')\n    text = text.replace('\u0439', '')\n    text = text.replace('\u043a', '')\n    text = text.replace('\u043b', '')\n    text = text.replace('\u043c', '')\n    text = text.replace('\u043d', '')\n    text = text.replace('\u043e', '')\n    text = text.replace('\u043f', '')\n    text = text.replace('"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return (modp(n // 2, p) ** 2 * 2) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))"}
{"task_id": "HumanEval/58", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return xs[1:] + [xs[-1] * i for i in range(len(xs) - 1, 0, -1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # your code goes here\n    # split the string into words\n    words = s.split()\n    # find the index of 'apples' and 'oranges'\n    apples_index = words.index('apples')\n    oranges_index = words.index('oranges')\n    # extract the number of apples and oranges from the string\n    apples = int(words[apples_index - 1])\n    oranges = int(words[oranges_index - 1])\n    # calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    even = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n            even.append([v, i])\n    if not even:\n        return []\n    even.sort()\n    return even[0]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    # create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # find the greatest integer with frequency greater than or equal to its value\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if freq >= num and num > max_num:\n            max_num = num\n\n    return max_num\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n            if arr[left] < arr[right]:\n                arr[right] = arr[left]\n            else:\n                arr[left] = arr[right]\n        left += 1\n        right -= 1\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    return lst1 if len(lst1) < len(lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    return x == n ** int(x)\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**0.3333333333333333 == int(a**0.3333333333333333)\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_digits = \"0123456789ABCDEF\"\n    primes = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 10**(n-1) + 10**(n-2)\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            encrypted += alphabet[index + 4]\n        else:\n            encrypted += letter\n    return encrypted\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            return lst[i]\n    return None\n"}
{"task_id": "HumanEval/91", "completion": "\n    return sum(1 for word in S.split() if word[0].lower() == 'i' and word[-1] in '.?!')\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    return any(int(x) == int(y) + int(z), int(y) == int(x) + int(z), int(z) == int(x) + int(y))\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max(filter(is_prime, lst))\n    return sum_digits(max_prime)\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')"}
{"task_id": "HumanEval/99", "completion": "\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if len(set(str(i))) == len(str(i))])\n"}
{"task_id": "HumanEval/105", "completion": "\n    # create a dictionary to map numbers to their names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # filter out any numbers not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # sort the array\n    sorted_arr = sorted(filtered_arr)\n    \n    # reverse the array\n    reversed_arr = sorted_arr[::-1]\n    \n    # map each number to its name\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr == sorted(arr):\n                return True\n            arr.append(arr.pop(0))\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    # check if lst1 contains only odd numbers\n    if all(x % 2 != 0 for x in lst1):\n        # check if lst2 contains at least one even number\n        if any(x % 2 == 0 for x in lst2):\n            return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n"}
{"task_id": "HumanEval/112", "completion": "\n    result = ''\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [\"the number of odd elements {}n str{}ng {} of {}nput.\".format(len([i for i in lst[j] if int(i)%2==1]),j+1,len([i for i in lst[j] if int(i)%2==1]),j+1) for j in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\n    # Write your code here\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # TODO: implement this function\n    # raise NotImplementedError\n    # return 0\n    # print(grid)\n    # print(capacity)\n    # print(len(grid))\n    # print(len(grid[0]))\n    # print(grid[0][0])\n    # print(grid[0][1])\n    # print(grid[0][2])\n    # print(grid[0][3])\n    # print(grid[1][0])\n    # print(grid[1][1])\n    # print(grid[1][2])\n    # print(grid[1][3])\n    # print(grid[2][0])\n    # print(grid[2][1])\n    # print(grid[2][2])\n    # print(grid[2][3])\n    # print(grid[3][0])\n    # print(grid[3][1])\n    # print(grid[3][2])\n    # print(grid[3][3])\n    # print(grid[4][0])\n    # print(grid[4][1])\n    # print(grid[4][2])\n    # print(grid[4][3])\n    # print(grid[5][0])\n    # print(grid[5][1])\n    # print(grid[5][2])\n    # print(grid[5][3])\n    # print(grid[6][0])\n    # print(grid[6][1])\n    # print(grid[6][2])\n    # print(grid[6][3])\n    # print(grid[7][0])\n    # print(grid[7][1])\n    # print(grid[7][2])\n    # print(grid[7][3])\n    # print(grid[8][0])\n    # print(grid[8][1])\n    # print(grid[8][2])\n    # print(grid[8][3])\n    # print(grid[9][0])\n    # print(grid[9][1])\n    # print(grid[9][2])\n    # print(grid[9][3])\n    # print(grid[10][0])\n    # print(grid[10][1])\n    # print(grid[10][2])\n    # print(grid[10][3])\n    # print(grid[11][0])\n    # print(grid[11][1])\n    # print(grid[11][2])\n    # print(grid[11][3])\n    # print(grid[12][0])\n    # print(grid[12][1])\n    # print(grid[12][2])\n    # print(grid[12][3])\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return sorted(arr)\n    if k == len(arr) - 1:\n        return sorted(arr)[1:]\n    if k == len(arr) - 2:\n        return sorted(arr)[2:]\n    if k == len(arr) - 3:\n        return sorted(arr)[3:]\n    if k == len(arr) - 4:\n        return sorted(arr)[4:]\n    if k == len(arr) - 5:\n        return sorted(arr)[5:]\n    if k == len(arr) - 6:\n        return sorted(arr)[6:]\n    if k == len(arr) - 7:\n        return sorted(arr)[7:]\n    if k == len(arr) - 8:\n        return sorted(arr)[8:]\n    if k == len(arr) - 9:\n        return sorted(arr)[9:]\n    if k == len(arr) - 10:\n        return sorted(arr)[10:]\n    if k == len(arr) - 11:\n        return sorted(arr)[11:]\n    if k == len(arr) - 12:\n        return sorted(arr)[12:]\n    if k == len(arr) - 13:\n        return sorted(arr)[13:]\n    if k == len(arr) - 14:\n        return sorted(arr)[14:]\n    if k == len(arr) - 15:\n        return sorted(arr)[15:]\n    if k == len(arr) - 16:\n        return sorted(arr)[16:]\n    if k == len(arr) - 17:\n        return sorted(arr)[17:]\n    if k == len(arr) - 18:\n        return sorted(arr)[18:]\n    if k == len(arr) - 19:\n        return sorted(arr)[19:]\n    if k == len(arr) - 20:\n        return sorted(arr)[20:]\n    if k == len(arr) - 21:\n        return sorted(arr)[21:]\n    if k == len(arr) - 22:\n        return sorted(arr)[22:]\n    if k == len(arr) - 23:\n        return sorted(arr)[23:]\n    if k == len(arr) - 24:\n        return sorted(arr)[24:]\n    if k == len(arr) - 25:\n        return sorted(arr)[25:]\n    if k == len(arr) - 26:\n        return sorted(arr)[26:]\n    if k == len(arr) - "}
{"task_id": "HumanEval/121", "completion": "\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    collatz = [i for i in collatz if i % 2 != 0]\n    return sorted(collatz)\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n    date = date.split('-')\n    if len(date) != 3:\n        return False\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return lst[0] <= lst[1]\n    if len(lst) > 2:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    return False\n"}
{"task_id": "HumanEval/127", "completion": "\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        else:\n            for i in range(2, int(length ** 0.5) + 1):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    else:\n        return sum([abs(i) for i in arr if i != 0]) * prod_signs([1 if i > 0 else -1 for i in arr if i != 0])\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = set()\n    min_path = []\n    min_length = float('inf')\n\n    def dfs(x, y, path, length):\n        nonlocal min_path, min_length\n        if length > k:\n            return\n        if length == k and len(path) < min_length:\n            min_path = path[:]\n            min_length = len(path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                dfs(nx, ny, path + [grid[nx][ny]], length + 1)\n                visited.remove((nx, ny))\n\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n            dfs(i, j, [grid[i][j]], 1)\n            visited.remove((i, j))\n\n    return min_path\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 1]\n    if n == 2:\n        return [3, 1, 2]\n    if n == 3:\n        return [3, 1, 2, 8]\n    if n > 3:\n        return tri(n - 1) + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n - 3)[-1]]\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    return eval('*'.join([str(i) for i in range(1, n+1) if i%2])) if sum([i%2 for i in range(1, n+1)]) else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(math.ceil(x))**2 for x in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha() and txt[-1] not in \"aeiouAEIOU\"\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return (None, None)\n    if len(lst) == 1:\n        if lst[0] > 0:\n            return (None, lst[0])\n        elif lst[0] < 0:\n            return (lst[0], None)\n        else:\n            return (None, None)\n    else:\n        negative = [i for i in lst if i < 0]\n        positive = [i for i in lst if i > 0]\n        if not negative:\n            return (None, min(positive))\n        elif not positive:\n            return (max(negative), None)\n        else:\n            return (max(negative), min(positive))\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    else:\n        if isinstance(a, str) and isinstance(b, str):\n            if float(a) > float(b):\n                return a\n            else:\n                return b\n        elif isinstance(a, str) and isinstance(b, int):\n            if float(a) > b:\n                return a\n            else:\n                return b\n        elif isinstance(a, int) and isinstance(b, str):\n            if a > float(b):\n                return a\n            else:\n                return b\n        else:\n            if a > b:\n                return a\n            else:\n                return b\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n % 4 == 0\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"_{2,}\", \"-\", text)\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3 and file_name.count('.') == 1:\n        if file_name[0].isalpha():\n            if file_name[-4:] == '.txt' or file_name[-4:] == '.exe' or file_name[-4:] == '.dll':\n                return 'Yes'\n    return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum([i**2 if (i%3==0) else i for i in lst]) + sum([i**3 if (i%4==0 and i%3!=0) else i for i in lst])\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    numerator_x, denominator_x = map(int, x.split(\"/\"))\n    numerator_n, denominator_n = map(int, n.split(\"/\"))\n    return (numerator_x * denominator_n) % denominator_x == 0 and (numerator_n * denominator_x) % denominator_n == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    return sum(1 for num in nums if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1)\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n    except ValueError:\n        return ()\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index + 1:planet2_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # delete strings odd lengths\n    lst = [i for i in lst if len(i) % 2 == 0]\n    # sort list by length of each word\n    lst.sort(key=len)\n    # sort list alphabetically\n    lst.sort()\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return y\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum([i**2 for i in lst if i > 0 and i%2 == 1 and i == int(i)])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = extensions[0]\n    for extension in extensions:\n        if extension[0].isupper():\n            cap = 1\n        else:\n            cap = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            else:\n                cap -= 1\n        if cap > 0:\n            strongest_extension = extension\n            break\n        elif cap == 0:\n            if len(extension) > len(strongest_extension):\n                strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    return b in a or b in a[1:] or b in a[:-1]\n"}
{"task_id": "HumanEval/155", "completion": "\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = ''\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    for key in roman_dict:\n        while number >= key:\n            roman += roman_dict[key]\n            number -= key\n    return roman\n"}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
