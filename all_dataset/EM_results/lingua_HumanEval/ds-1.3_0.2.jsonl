{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        sum_num += num\n        product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_val = numbers[0]\n    result = [max_val]\n    for num in numbers[1:]:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i+1] for i in range(len(string))]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[1])\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    xs = xs[::-1]\n    return -sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs[1:])])\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    third_elements = [l[i] for i in range(0, len(l), 3)]\n    third_elements.sort()\n    for i, val in enumerate(third_elements):\n        l[i*3] = val\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    def count_sevens(n: int):\n        return str(n).count('7')\n\n    def count_divisible(n: int, divisor: int):\n        return sum(1 for i in range(1, n) if i % divisor == 0)\n\n    return sum(count_sevens(i) for i in range(1, n) if count_divisible(i, 11) > 0 or count_divisible(i, 13) > 0)\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo the cycling in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i, count = 0, 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib(i - 1)\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    if sorted(s0) == sorted(s1):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_list = [value for value in l1 if value in l2]\n    return common_list\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    length = len(digits)\n    shift %= length\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split()\n    total_fruits = int(fruits[-2])\n    total_apples = int(fruits[-1].split(\" \")[0])\n    total_oranges = total_fruits - total_apples\n    return total_oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        smallest_even_value = min(even_values)\n        return [smallest_even_value[0], smallest_even_value[1]]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # return the area rounded to 2 decimal points\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, w):\n        return sum_of_elements(lst) <= w\n\n    return is_balanced(q, w) and is_palindrome(q)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def count_changes(arr, start, end):\n        changes = 0\n        while start < end:\n            if arr[start] != arr[end]:\n                changes += 1\n            start += 1\n            end -= 1\n        return changes\n\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += count_changes(arr, i+1, n-i-1)\n        else:\n            changes += count_changes(arr, i+1, n-i-1) // 2\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    return x**(1.0/n) == int(x**(1.0/n))\n"}
{"task_id": "HumanEval/77", "completion": "\n    import math\n    n = math.isqrt(a)\n    return n**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    dec_to_hex = {value: key for key, value in hex_to_dec.items()}\n    hex_num = num.upper()\n    dec_num = 0\n    for i in range(len(hex_num)):\n        dec_num = dec_num * 16 + hex_to_dec[hex_num[i]]\n    hex_num_prime = ''\n    for i in range(2, dec_num + 1):\n        if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n            hex_num_prime += dec_to_hex[i]\n    return len(hex_num_prime)\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 1:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else 'A' if grade > 3.7 else 'A-' if grade > 3.3 else 'B+' if grade > 3.0 else 'B' if grade > 2.7 else 'B-' if grade > 2.3 else 'C+' if grade > 2.0 else 'C' if grade > 1.7 else 'C-' if grade > 1.3 else 'D+' if grade > 1.0 else 'D' if grade > 0.7 else 'D-' if grade > 0.0 else 'E' for grade in grades]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n\nnumerical_letter_grade()\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_of_digits(N):\n        sum = 0\n        while N:\n            sum += N % 10\n            N //= 10\n        return sum\n\n    return bin(sum_of_digits(N))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=lambda x: [ord(c) for c in x])\n    return ' '.join(words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort()\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def sort_ascending(array):\n        return sorted(array)\n\n    def sort_descending(array):\n        return sorted(array, reverse=True)\n\n    if not array:\n        return array\n\n    sum_array = [sum_digits(n) for n in array]\n    odd_array = [n for n in array if is_odd(sum_array[array.index(n)])]\n    even_array = [n for n in array if is_even(sum_array[array.index(n)])]\n\n    if sum_array.count(min(sum_array)) > 1:\n        return sort_descending(odd_array + even_array)\n    else:\n        return sort_ascending(odd_array + even_array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                start_point = ord('A')\n            else:\n                start_point = ord('a')\n            char_code = ord(char) - start_point\n            char_code = (char_code - shift) % 26 + start_point\n            encrypted_string += chr(char_code)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first = second = float('inf')\n    for num in lst:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    if second == float('inf'):\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    return is_integer(x) and is_integer(y) and is_integer(z)\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += chr(ord(char.lower()) + 2)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n) if is_prime(i)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    product = a * b\n    product_str = str(product)\n    if product_str[0] == '-':\n        return int(product_str[1:])\n    else:\n        return int(product_str)\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    def is_float(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def round_to_nearest(n):\n        if n >= 0:\n            return int(n + 0.5)\n        else:\n            return int(n - 0.5)\n\n    if is_float(value):\n        return round_to_nearest(int(float(value)))\n    else:\n        return int(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    def next_level(n):\n        if n % 2 == 0:\n            return n + 1\n        else:\n            return n + 2\n\n    pile = [n]\n    for _ in range(n - 1):\n        n = next_level(n)\n        pile.append(n)\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    import re\n    words = re.split(', |,| ', s)\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total / count)\n    return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def is_even_digit(n):\n        return str(n)[-1] == '0' or str(n)[-1] == '2' or str(n)[-1] == '4' or str(n)[-1] == '6' or str(n)[-1] == '8'\n\n    return sorted([i for i in x if is_even_digit(i)])\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    sorted_arr = sorted(x for x in arr if 1 <= x <= 9)\n    return [name(x) for x in reversed(sorted_arr)]\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to(i) for i in range(1, n+1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        if n < 0:\n            n = -1 * n\n        return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "\n    # check if all elements in lst1 are odd\n    if all(x % 2 != 0 for x in lst1):\n        return \"NO\"\n\n    # check if all elements in lst2 are even\n    if all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n\n    # check if there is an odd number in lst2 that is not in lst1\n    if any(x % 2 != 0 for x in lst2):\n        return \"NO\"\n\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    def histogram(test):\n        hist = {}\n        for letter in test.split():\n            if letter in hist:\n                hist[letter] += 1\n            else:\n                hist[letter] = 1\n        return hist\n\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('a b c a b'))\n    print(histogram('b b b b a'))\n    print(histogram(''))\n\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a b c a b')\nhistogram('b b b b a')\nhistogram('')\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<"}
{"task_id": "HumanEval/112", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements in str{i}ng {i} of {i}nput.\" for i in range(1, len(lst) + 1)]\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_buckets(grid, capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    if i > 0:\n                        dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n                    if j > 0:\n                        dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n        return sum(sum(row) for row in dp)\n\n    return max_buckets(grid, capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    s1, s2 = lst\n    if is_balanced(s1) and is_balanced(s2):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # return the first k elements of the sorted array\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    arr.sort()\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1,3,5,7,8,10,12] and day > 31:\n        return False\n    if month in [4,6,9,11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    path = []\n    min_path = [float('inf')]*n\n    min_path_index = [-1]*n\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n\n    def dfs(x, y, k):\n        nonlocal min_path, min_path_index, path\n        if k == 0:\n            return True\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                if min_path[nx][ny] > min_path_index[nx][ny] + grid[nx][ny]:\n                    min_path[nx][ny] = min_path_index[nx][ny] + grid[nx][ny]\n                    if dfs(nx, ny, k-1):\n                        path.append(grid[nx][ny])\n                        return True\n        visited[x][y] = False\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            min_path[i][j] = grid[i][j]\n            min_path_index[i][j] = i\n            path.append(grid[i][j])\n            if dfs(i, j, k-1):\n                return path\n            path.pop()\n        path.clear()\n    return []\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n        if n == 0:\n            return [3]\n        elif n == 1:\n            return [3, 2]\n        elif n == 2:\n            return [3, 2, 8]\n        else:\n            sequence = [3, 2, 8]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    sequence.append(1 + i / 2)\n                else:\n                    sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n            return sequence\n\n    return tri(n)\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product else 0\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    return (max(neg_lst) if neg_lst else None, min(pos_lst) if pos_lst else None)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(n):\n        try:\n            return float(n)\n        except ValueError:\n            return None\n\n    def compare(a, b):\n        if a is None or b is None:\n            return None\n        if isinstance(a, str) and isinstance(b, str):\n            return max(a, b, key=convert_to_float)\n        if isinstance(a, str):\n            return max(a, key=convert_to_float)\n        if isinstance(b, str):\n            return max(b, key=convert_to_float)\n        return max(a, b)\n\n    return compare(a, b)\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\").replace(\"__+\", \"-\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if len(file_name) > 3 and file_name[-4:] == \".txt\" and file_name[0].isalpha() and re.match(\"^[a-zA-Z]*$\", file_name[1:-4]):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x**3 if i%3==0 else x**4 for i,x in enumerate(lst))\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def simplify_fraction(x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n        return x_num * n_num == x_den * n_den\n\n    return simplify_fraction(x, n)\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(n):\n        if n < 0:\n            n = -n\n        str_n = str(n)\n        if len(str_n) > 1 and str_n[0] in '13579' and str_n[-1] in '13579':\n            return True\n        return False\n\n    return sum(is_special(n) for n in nums)\n\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets_order.index(planet1)\n    planet2_index = planets_order.index(planet2)\n\n    if planet1_index < planet2_index:\n        return planets_order[planet1_index+1 : planet2_index]\n    else:\n        return planets_order[planet2_index+1 : planet1_index]\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        lst = [i for i in lst if len(i) % 2 == 0]\n        lst.sort(key=lambda x: (len(x), x))\n        return lst\n\n    print(list_sort([\"aa\", \"a\", \"aaa\"]))\n    print(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]))\n\nlist_sort([\"aa\", \"a\", \"aaa\"])\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    # Your code here\n    class_name = class_name.replace(\" \", \"\")\n    extensions.sort(key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x), x), reverse=True)\n    for i, extension in enumerate(extensions):\n        if extension.startswith(class_name):\n            return f\"{class_name}.{extension}\"\n    return f\"{class_name}.{extensions[0]}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    def is_cyclic_rotation(a, b):\n        return b in a\n\n    return is_cyclic_rotation(a, b)\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if any side is zero\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Check if any side is equal to the sum of the other two\n    if a == b + c or b == a + c or c == a + b:\n        return True\n\n    return False\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if operator[0] == '+':\n        result = operand[0]\n    else:\n        result = operand[0]\n\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a % 2 != 0:\n        a += 1\n    if b % 2 != 0:\n        b -= 1\n    return list(range(a, b, 2))[::-1]\n\n"}
