{"task_id":"EvoEval\/0","prompt":"def compare_happiness(a, b):\n    \"\"\"\n    Create a function that takes two strings representing real numbers.The function should first check if each string is 'happy' or not.A string is 'happy' if its length is at least 3 and every 3 consecutive characters are distinct.If neither string is 'happy', return None.If only one string is 'happy', return that string.If both strings are 'happy', compare them as real numbers (the floating point might be.or,) and return the larger number as a string.If they are equal, return None.Note: If a real number is represented as a string, the floating point might be.or, compare_happiness(\"1,234\", \"5,678\") is \"5,678\" compareh(\"1,112\",3344 is None compareh(\"11231,123\") is None compare12341112\") is \"1234\n    \"\"\"\n","raw":"Create a function that takes two strings representing real numbers. \n    The function should first check if each string is 'happy' or not. \n    A string is 'happy' if its length is at least 3 and every 3 consecutive characters are distinct.\n    If neither string is 'happy', return None. \n    If only one string is 'happy', return that string.\n    If both strings are 'happy', compare them as real numbers (the floating point might be . or ,) \n    and return the larger number as a string. If they are equal, return None.\n\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_happiness(\"1,234\", \"5,678\") is \"5,678\"\n    compare_happiness(\"1,112\", \"3,344\") is None\n    compare_happiness(\"1,123\", \"1,123\") is None\n    compare_happiness(\"1,234\", \"1,112\") is \"1,234\"","reduced":"Create a function that takes two strings representing real numbers.The function should first check if each string is 'happy' or not.A string is 'happy' if its length is at least 3 and every 3 consecutive characters are distinct.If neither string is 'happy', return None.If only one string is 'happy', return that string.If both strings are 'happy', compare them as real numbers (the floating point might be.or,) and return the larger number as a string.If they are equal, return None.Note: If a real number is represented as a string, the floating point might be.or, compare_happiness(\"1,234\", \"5,678\") is \"5,678\" compareh(\"1,112\",3344 is None compareh(\"11231,123\") is None compare12341112\") is \"1234"}
{"task_id":"EvoEval\/1","prompt":"\"\"\"\n    def round_andflip(value: str) -> str: ''' Create a function that takes a value representing two parts (number and string) and returns a string with two parts: 1) The closest integer to the number, and 2 The string with its case flipped.If the number is equid from two integers, round it away from zero.Between these two parts, add a space.Examples >>> round_andflip(\"10.5abc\") '11 ABC' >>> round(\"15.3ABC '15 ab' Note: Rounding away from zero means that if the given number is equid from two integers, the one you should return is the one that is the fart from zero.For example round_andflip(\"14.5abc\") should return '15 ABC' and roundfl(\"-14.ABC\") should '-15 ab'.'''\n    \"\"\"\n","raw":"def round_and_flip(value: str) -> str:\n    '''\n    Create a function that takes a value representing two parts (number and string)\n    and returns a string with two parts: 1) The closest integer to the number,\n    and 2) The string with its case flipped. If the number is equidistant from two integers,\n    round it away from zero. Between these two parts, add a space. \n\n    Examples\n    >>> round_and_flip(\"10.5abc\")\n    '11 ABC'\n    >>> round_and_flip(\"15.3ABC\")\n    '15 abc'\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example round_and_flip(\"14.5abc\") should\n    return '15 ABC' and round_and_flip(\"-14.5ABC\") should return '-15 abc'.\n    '''","reduced":"def round_andflip(value: str) -> str: ''' Create a function that takes a value representing two parts (number and string) and returns a string with two parts: 1) The closest integer to the number, and 2 The string with its case flipped.If the number is equid from two integers, round it away from zero.Between these two parts, add a space.Examples >>> round_andflip(\"10.5abc\") '11 ABC' >>> round(\"15.3ABC '15 ab' Note: Rounding away from zero means that if the given number is equid from two integers, the one you should return is the one that is the fart from zero.For example round_andflip(\"14.5abc\") should return '15 ABC' and roundfl(\"-14.ABC\") should '-15 ab'.'''"}
{"task_id":"EvoEval\/2","prompt":"from typing import List\n\ndef modp_intersperse(numbers: List[int], n: int, p: int) -> List[int]:\n    \"\"\"\n    Insert the result of 2^n modulo p between every two consecutive elements of input list `numbers' >>> modp_intersperse([], 3, 5) [] >>> modp_inters([1, 2, 3], 3, 5) [1, 3, 2, 3, 3] >>> modinters10 20, 30], 1101, 101) [10 2 20 2 30]\n    \"\"\"\n","raw":"Insert the result of 2^n modulo p between every two consecutive elements of input list `numbers'\n    >>> modp_intersperse([], 3, 5)\n    []\n    >>> modp_intersperse([1, 2, 3], 3, 5)\n    [1, 3, 2, 3, 3]\n    >>> modp_intersperse([10, 20, 30], 1101, 101)\n    [10, 2, 20, 2, 30]","reduced":"Insert the result of 2^n modulo p between every two consecutive elements of input list `numbers' >>> modp_intersperse([], 3, 5) [] >>> modp_inters([1, 2, 3], 3, 5) [1, 3, 2, 3, 3] >>> modinters10 20, 30], 1101, 101) [10 2 20 2 30]"}
{"task_id":"EvoEval\/3","prompt":"\"\"\"\n    from typing import List def sort_parentheses(lst: List[str]) -> str: ''' You are given a list of strings, each string consist of open parentheses '(' or close ')' and numberals from 'zero' to 'nine' in text form.Your job is to sort the numbers from smallest to largest and then check if it is possible conc the strings in this order so that the resulting string will be good.A string S is considered to be good if and all parentheses in S are balanced.For example: the string '(three)(one)(five)' is good, while the stringthreeone(five)' is not.Return 'Yes' if there's a way to make a good string after sorting, and return 'No' otherwiseExamples: sort_parentheses(['(three)(', '(five)', '(one)']) == 'No' sortparent(five)three) ==Yes '''\n    \"\"\"\n","raw":"from typing import List\n\ndef sort_parentheses(lst: List[str]) -> str:\n    '''\n    You are given a list of strings, each string consist of open parentheses '(' or close parentheses ')' \n    and numberals from 'zero' to 'nine' in text form.\n    Your job is to sort the numbers from smallest to largest and then check if it is possible to concatenate \n    the strings in this order so that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S are balanced. \n    For example: the string '(three)(one)(five)' is good, while the string '(three)(one(five)' is not.\n    Return 'Yes' if there's a way to make a good string after sorting, and return 'No' otherwise.\n\n    Examples:\n    sort_parentheses(['(three)(', '(five)', '(one)']) == 'No'\n    sort_parentheses(['(five)', '(three)', '(one)']) == 'Yes'\n    '''","reduced":"from typing import List def sort_parentheses(lst: List[str]) -> str: ''' You are given a list of strings, each string consist of open parentheses '(' or close ')' and numberals from 'zero' to 'nine' in text form.Your job is to sort the numbers from smallest to largest and then check if it is possible conc the strings in this order so that the resulting string will be good.A string S is considered to be good if and all parentheses in S are balanced.For example: the string '(three)(one)(five)' is good, while the stringthreeone(five)' is not.Return 'Yes' if there's a way to make a good string after sorting, and return 'No' otherwiseExamples: sort_parentheses(['(three)(', '(five)', '(one)']) == 'No' sortparent(five)three) ==Yes '''"}
{"task_id":"EvoEval\/4","prompt":"def largest_prime_divisor_digit_sum(lst: list) -> int:\n    \"\"\"\n    You are given a list of integers.For each number in the list, find the largest prime number that divides it evenly, smaller than the number itself.If the number is a prime itself, consider the number.If there are no prime divisors, consider the number to be 0.From these prime divisors, find the one with the largest value and return the sum of its digits.Examples: For lst = [15, 21, 25, 49, 77] the output should be 2 (11 is the largest prime divisor of 77, and the sum of its digits is 2) For lst = [11, 13, 17, 19, 23] the output should 5 (23 is the largest prime number, and the sum its digits 5) For l = [4, 6, 8, 9, 10] the 5 (5 is the largest prime div of 10, and the sum 5 For l = [84, 91, 97, 101, 105] the 2 (101 is the largest prime number, and the 2\n    \"\"\"\n","raw":"You are given a list of integers. \n    For each number in the list, find the largest prime number that divides it evenly, smaller than the number itself. \n    If the number is a prime itself, consider the number. If there are no prime divisors, consider the number to be 0.\n    From these prime divisors, find the one with the largest value and return the sum of its digits.\n    \n    Examples:\n    For lst = [15, 21, 25, 49, 77] the output should be 2 (11 is the largest prime divisor of 77, and the sum of its digits is 2)\n    For lst = [11, 13, 17, 19, 23] the output should be 5 (23 is the largest prime number, and the sum of its digits is 5)\n    For lst = [4, 6, 8, 9, 10] the output should be 5 (5 is the largest prime divisor of 10, and the sum of its digits is 5)\n    For lst = [84, 91, 97, 101, 105] the output should be 2 (101 is the largest prime number, and the sum of its digits is 2)","reduced":"You are given a list of integers.For each number in the list, find the largest prime number that divides it evenly, smaller than the number itself.If the number is a prime itself, consider the number.If there are no prime divisors, consider the number to be 0.From these prime divisors, find the one with the largest value and return the sum of its digits.Examples: For lst = [15, 21, 25, 49, 77] the output should be 2 (11 is the largest prime divisor of 77, and the sum of its digits is 2) For lst = [11, 13, 17, 19, 23] the output should 5 (23 is the largest prime number, and the sum its digits 5) For l = [4, 6, 8, 9, 10] the 5 (5 is the largest prime div of 10, and the sum 5 For l = [84, 91, 97, 101, 105] the 2 (101 is the largest prime number, and the 2"}
{"task_id":"EvoEval\/5","prompt":"from typing import List\n\ndef sort_and_check(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\"\n    Given an array of numbers, check if any two numbers in the array are closer to each than the given threshold.If yes, sort the array according to the following rules: - If the sum of the first and last numbers in the array is even, sort the array in descending order.- If the sum of the first and last numbers in the array is odd, sort the array in ascending order.If no two numbers are closer than the threshold, return the array as it is.Note: Consider the sum as even or odd after rounding off to the nearest integer.Examples: * sort_and_check([1.0, 2.0, 30], 0.5) => [1.0, 2, 3] * sort_andcheck([1.0, 28, 30, 4.0, 5.0, 2.0], 0.3) [10, 20, 28, 30,0,0] * sortandcheck([4.0, 20, 30, 0.0], 2.0) [40, 30, 20, 0.0]\n    \"\"\"\n","raw":"Given an array of numbers, check if any two numbers in the array are closer to each other \n    than the given threshold. If yes, sort the array according to the following rules:\n\n    - If the sum of the first and last numbers in the array is even, sort the array in descending order.\n    - If the sum of the first and last numbers in the array is odd, sort the array in ascending order.\n    \n    If no two numbers are closer than the threshold, return the array as it is.\n    \n    Note: Consider the sum as even or odd after rounding off to the nearest integer.\n\n    Examples:\n    * sort_and_check([1.0, 2.0, 3.0], 0.5) => [1.0, 2.0, 3.0]\n    * sort_and_check([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) => [1.0, 2.0, 2.8, 3.0, 4.0, 5.0]\n    * sort_and_check([4.0, 2.0, 3.0, 0.0], 2.0) => [4.0, 3.0, 2.0, 0.0]","reduced":"Given an array of numbers, check if any two numbers in the array are closer to each than the given threshold.If yes, sort the array according to the following rules: - If the sum of the first and last numbers in the array is even, sort the array in descending order.- If the sum of the first and last numbers in the array is odd, sort the array in ascending order.If no two numbers are closer than the threshold, return the array as it is.Note: Consider the sum as even or odd after rounding off to the nearest integer.Examples: * sort_and_check([1.0, 2.0, 30], 0.5) => [1.0, 2, 3] * sort_andcheck([1.0, 28, 30, 4.0, 5.0, 2.0], 0.3) [10, 20, 28, 30,0,0] * sortandcheck([4.0, 20, 30, 0.0], 2.0) [40, 30, 20, 0.0]"}
{"task_id":"EvoEval\/6","prompt":"def pile_median(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile n levels of stones.The first level has n stones.The number stones in the next level is: - the next odd number if n is odd.- the next even number if n is even.Return the median number stones in all levels in the pile.You should return the answer as a float if the number of levels is even, and as an integer if the oddExamples: >>> pile_median(3) 5 >>> pilemed4 7.0\n    \"\"\"\n","raw":"Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the median number of stones in all levels in the pile.\n\n    You should return the answer as a float if the number of levels is even,\n    and as an integer if the number of levels is odd.\n\n    Examples:\n    >>> pile_median(3)\n    5\n    >>> pile_median(4)\n    7.0","reduced":"Given a positive integer n, you have to make a pile n levels of stones.The first level has n stones.The number stones in the next level is: - the next odd number if n is odd.- the next even number if n is even.Return the median number stones in all levels in the pile.You should return the answer as a float if the number of levels is even, and as an integer if the oddExamples: >>> pile_median(3) 5 >>> pilemed4 7.0"}
{"task_id":"EvoEval\/7","prompt":"def sum_square_cube_to_n(n: int):\n    \"\"\"\n    This function takes an integer n.The function generates a list of integers from 1 to n inclusive.For all entries in the list, the function shall square the integer entry if its index is a multiple 3 and will cube the integer entry if its a multiple 4 and not a multiple 3.The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.The function shall then return the sum of all entries.Examples: For n = 3 the output should be 12 For n = 1 the output 1 For n = 5 the 81 For n 10 the 727\n    \"\"\"\n","raw":"This function takes an integer n. The function generates a list of integers from 1 to n inclusive. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For n = 3 the output should be 12\n    For n = 1 the output should be 1\n    For n = 5 the output should be 81\n    For n = 10 the output should be 727","reduced":"This function takes an integer n.The function generates a list of integers from 1 to n inclusive.For all entries in the list, the function shall square the integer entry if its index is a multiple 3 and will cube the integer entry if its a multiple 4 and not a multiple 3.The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.The function shall then return the sum of all entries.Examples: For n = 3 the output should be 12 For n = 1 the output 1 For n = 5 the 81 For n 10 the 727"}
{"task_id":"EvoEval\/8","prompt":"def correct_bracket_sequence_and_count(string: str, bracket: str) -> tuple:\n    \"\"\"\n    This function checks if a given string has correctly paired opening and closing brackets and counts how many times a specific bracket appears in the string, including overlapping cases.The function takes a string of \"<\" and \">\" characters and a specific bracket (\"<\" or \">\") as inputs, and returns a tuple with a boolean value and an integer.The boolean value represents whether every opening bracket has a corresponding closing bracket.The integer represents the count of the specific bracket in the string.>>> correct_bracket_sequence_and_count('<<><>>', '<') (True, 3) >>> correct_br_sequence_andcount('<<><>>', '>') (True 3) >>> correctbrsequencecount('<>', '<') (True 1) >>> correctbracketsequencecount('><<>', '>') (False, 2) >>> correctbracketsequencecount('', '>')True 0)\n    \"\"\"\n","raw":"This function checks if a given string has correctly paired opening and closing brackets and \n    counts how many times a specific bracket appears in the string, including overlapping cases.\n    \n    The function takes a string of \"<\" and \">\" characters and a specific bracket (\"<\" or \">\") \n    as inputs, and returns a tuple with a boolean value and an integer. The boolean value represents \n    whether every opening bracket has a corresponding closing bracket. The integer represents the \n    count of the specific bracket in the string.\n\n    >>> correct_bracket_sequence_and_count('<<><>>', '<')\n    (True, 3)\n    >>> correct_bracket_sequence_and_count('<<><>>', '>')\n    (True, 3)\n    >>> correct_bracket_sequence_and_count('<>', '<')\n    (True, 1)\n    >>> correct_bracket_sequence_and_count('><<>', '>')\n    (False, 2)\n    >>> correct_bracket_sequence_and_count('', '>')\n    (True, 0)","reduced":"This function checks if a given string has correctly paired opening and closing brackets and counts how many times a specific bracket appears in the string, including overlapping cases.The function takes a string of \"<\" and \">\" characters and a specific bracket (\"<\" or \">\") as inputs, and returns a tuple with a boolean value and an integer.The boolean value represents whether every opening bracket has a corresponding closing bracket.The integer represents the count of the specific bracket in the string.>>> correct_bracket_sequence_and_count('<<><>>', '<') (True, 3) >>> correct_br_sequence_andcount('<<><>>', '>') (True 3) >>> correctbrsequencecount('<>', '<') (True 1) >>> correctbracketsequencecount('><<>', '>') (False, 2) >>> correctbracketsequencecount('', '>')True 0)"}
{"task_id":"EvoEval\/9","prompt":"def planet_to_roman_distance(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and planet.The function should return a dictionary where the key is each planet (in lowercase) whose orbit is located between the orbit of planet1 and planet2, sorted by the proximity to the sun, and the value is the roman numeral representation of its position from the sun in lowercase.If planet1 or planet2 are not planet names or no planet lies between them, return an empty dictionary.Each planet's position from the sun is as follows: Mercury: 1 Venus: 2 Earth: 3 Mars: 4 Jupiter: 5 Saturn 6 Uran: 7 Neptune 8 Examples: >>> planet_to_roman_distance(\"Earth\", \"Uran\") {'mars': 'iv', 'jupiter': 'v', 'sat 'vi'} >>> planet_toromandistance(\"Mars\", \"J\") {} >>> planetto(\"Merc\",Nept\") {'venus': 'ii',earth 'iii',mars': 'iv',jupiter':v',sat':vi', 'uranus':vii'}\n    \"\"\"\n","raw":"There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a dictionary where the key is each planet (in lowercase) whose \n    orbit is located between the orbit of planet1 and planet2, sorted by \n    the proximity to the sun, and the value is the roman numeral representation \n    of its position from the sun in lowercase. \n    If planet1 or planet2 are not planet names or no planet lies between them, \n    return an empty dictionary.\n    \n    Each planet's position from the sun is as follows:\n    Mercury: 1\n    Venus: 2\n    Earth: 3\n    Mars: 4\n    Jupiter: 5\n    Saturn: 6\n    Uranus: 7\n    Neptune: 8\n\n    Examples:\n    >>> planet_to_roman_distance(\"Earth\", \"Uranus\")\n    {'mars': 'iv', 'jupiter': 'v', 'saturn': 'vi'}\n    >>> planet_to_roman_distance(\"Mars\", \"Jupiter\")\n    {}\n    >>> planet_to_roman_distance(\"Mercury\", \"Neptune\")\n    {'venus': 'ii', 'earth': 'iii', 'mars': 'iv', 'jupiter': 'v', 'saturn': 'vi', 'uranus': 'vii'}","reduced":"There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and planet.The function should return a dictionary where the key is each planet (in lowercase) whose orbit is located between the orbit of planet1 and planet2, sorted by the proximity to the sun, and the value is the roman numeral representation of its position from the sun in lowercase.If planet1 or planet2 are not planet names or no planet lies between them, return an empty dictionary.Each planet's position from the sun is as follows: Mercury: 1 Venus: 2 Earth: 3 Mars: 4 Jupiter: 5 Saturn 6 Uran: 7 Neptune 8 Examples: >>> planet_to_roman_distance(\"Earth\", \"Uran\") {'mars': 'iv', 'jupiter': 'v', 'sat 'vi'} >>> planet_toromandistance(\"Mars\", \"J\") {} >>> planetto(\"Merc\",Nept\") {'venus': 'ii',earth 'iii',mars': 'iv',jupiter':v',sat':vi', 'uranus':vii'}"}
{"task_id":"EvoEval\/10","prompt":"def class_grades_with_flip(name_grade_list):\n    \"\"\"\n    A teacher has to give the grades to students.The teacher has a list of students with their GPAs. The teacher wants to convert these GP into letter grades.However, due an administrative error, some students' names have been input in the wrong case (all caps or all lowercase).To fix this, their names need to be converted to proper case i.., only the first letter of the name should be in u and the rest in lowercase.Additionally, the teacher has her own algorithm for grading.Write a function that will output a list of tu where each tuple contains the student's name in proper case and the corresponding letter grade using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 30 B+ > 27 B > 23 B- > 20 C+ 17 > 13 C- 10 D+ 07 D > 00 D- 00 E Example: class_grades_with_flip([('JOHN', 4.0), ('sarah', 30), ('ALICE', 1.7), ('BOB', 20),linda 35)]) ==> [('John', 'A+'), ('Sarah', 'B'),Alice 'C-'),Bob 'C'),Linda 'A-')]\n    \"\"\"\n","raw":"A teacher has to give the grades to students. The teacher has a list of students with their GPAs.\n    The teacher wants to convert these GPAs into letter grades. However, due to an administrative error, \n    some students' names have been input in the wrong case (all caps or all lowercase). \n    To fix this, their names need to be converted to proper case i.e., only the first letter of the name \n    should be in uppercase and the rest in lowercase.\n\n    Additionally, the teacher has her own algorithm for grading. Write a function that will output a list\n    of tuples where each tuple contains the student's name in proper case and the corresponding letter grade \n    using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Example: \n    class_grades_with_flip([('JOHN', 4.0), ('sarah', 3.0), ('ALICE', 1.7), ('BOB', 2.0), ('linda', 3.5)]) \n    ==> [('John', 'A+'), ('Sarah', 'B'), ('Alice', 'C-'), ('Bob', 'C'), ('Linda', 'A-')]","reduced":"A teacher has to give the grades to students.The teacher has a list of students with their GPAs. The teacher wants to convert these GP into letter grades.However, due an administrative error, some students' names have been input in the wrong case (all caps or all lowercase).To fix this, their names need to be converted to proper case i.., only the first letter of the name should be in u and the rest in lowercase.Additionally, the teacher has her own algorithm for grading.Write a function that will output a list of tu where each tuple contains the student's name in proper case and the corresponding letter grade using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 30 B+ > 27 B > 23 B- > 20 C+ 17 > 13 C- 10 D+ 07 D > 00 D- 00 E Example: class_grades_with_flip([('JOHN', 4.0), ('sarah', 30), ('ALICE', 1.7), ('BOB', 20),linda 35)]) ==> [('John', 'A+'), ('Sarah', 'B'),Alice 'C-'),Bob 'C'),Linda 'A-')]"}
{"task_id":"EvoEval\/11","prompt":"\"\"\"\n    def planet_vowel_count(planet1, planet2): ''' There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and planet.The function should return an integer representing the number of vow in the names of the planets whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun.Vowels in this case are 'a', 'e', 'i', 'o', 'u'.Here, 'y' is also a vowel, but only when it is at the end of the given planet name.If planet1 or planet2 are not correct planet names, the function should return 0.Examples planet_vowel_count(\"Jupiter\", \"Neptune\") ==> 5 # (Sat = 2, Uran = 3) planet_vcount(\"Earth\", \"Merc\") == 2 # (Ven 2) planetMerc\",Uus\") 10 # (Ven = 2, Earth 2, Mars = 1, Jupiter = 3, Saturn = 2) '''\n    \"\"\"\n","raw":"def planet_vowel_count(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return an integer representing the number of vowels \n    in the names of the planets whose orbits are located between the orbit of \n    planet1 and the orbit of planet2, sorted by the proximity to the sun. \n\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given planet name.\n\n    If planet1 or planet2 are not correct planet names, the function should return 0.\n\n    Examples\n    planet_vowel_count(\"Jupiter\", \"Neptune\") ==> 5  # (Saturn = 2, Uranus = 3)\n    planet_vowel_count(\"Earth\", \"Mercury\") ==> 2  # (Venus = 2)\n    planet_vowel_count(\"Mercury\", \"Uranus\") ==> 10  # (Venus = 2, Earth = 2, Mars = 1, Jupiter = 3, Saturn = 2)\n    '''","reduced":"def planet_vowel_count(planet1, planet2): ''' There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and planet.The function should return an integer representing the number of vow in the names of the planets whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun.Vowels in this case are 'a', 'e', 'i', 'o', 'u'.Here, 'y' is also a vowel, but only when it is at the end of the given planet name.If planet1 or planet2 are not correct planet names, the function should return 0.Examples planet_vowel_count(\"Jupiter\", \"Neptune\") ==> 5 # (Sat = 2, Uran = 3) planet_vcount(\"Earth\", \"Merc\") == 2 # (Ven 2) planetMerc\",Uus\") 10 # (Ven = 2, Earth 2, Mars = 1, Jupiter = 3, Saturn = 2) '''"}
{"task_id":"EvoEval\/12","prompt":"def grade_students(student_info, n):\n    \"\"\"\n    You are a programming teacher and the semester is ending.You have a list of diction, each containing the name and GPA of a student.Additionally, you have a special grading system.Each student's name contributes to their final grade based on the number of consonants in their name.If their name contains exactly n consonants, their final grade gets bumped up one level according to the grading scale below: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 23 B- > 20 C+ > 1.7 C > 13 C- > 10 D+ > 0.7 D > 00 D- 0.0 E Write a function that takes the list of students and the number n and returns a list of diction with each student's name and their final letter grade.If the student name does not contain exactly n consonants, the grade is not bumped up.Example: grade_students([{'name': 'Alice', 'GPA': 3.0}, {name 'Bob',G 2.3}, {Charlie',G 3.3}], 2) ==> [{'name 'Alice', 'grade': 'B+'}, {'Bob',grade 'B-'}, {Charlie',grade 'B+'}]\n    \"\"\"\n","raw":"You are a programming teacher and the semester is ending. You have a list of dictionaries, each containing \n    the name and GPA of a student. Additionally, you have a special grading system. Each student's name contributes \n    to their final grade based on the number of consonants in their name. If their name contains exactly n consonants,\n    their final grade gets bumped up one level according to the grading scale below:\n\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Write a function that takes the list of students and the number n and returns a list of dictionaries with each \n    student's name and their final letter grade. If the student name does not contain exactly n consonants, the grade \n    is not bumped up.\n\n    Example:\n    grade_students([{'name': 'Alice', 'GPA': 3.0}, {'name': 'Bob', 'GPA': 2.3}, {'name': 'Charlie', 'GPA': 3.3}], 2) \n    ==> [{'name': 'Alice', 'grade': 'B+'}, {'name': 'Bob', 'grade': 'B-'}, {'name': 'Charlie', 'grade': 'B+'}]","reduced":"You are a programming teacher and the semester is ending.You have a list of diction, each containing the name and GPA of a student.Additionally, you have a special grading system.Each student's name contributes to their final grade based on the number of consonants in their name.If their name contains exactly n consonants, their final grade gets bumped up one level according to the grading scale below: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 23 B- > 20 C+ > 1.7 C > 13 C- > 10 D+ > 0.7 D > 00 D- 0.0 E Write a function that takes the list of students and the number n and returns a list of diction with each student's name and their final letter grade.If the student name does not contain exactly n consonants, the grade is not bumped up.Example: grade_students([{'name': 'Alice', 'GPA': 3.0}, {name 'Bob',G 2.3}, {Charlie',G 3.3}], 2) ==> [{'name 'Alice', 'grade': 'B+'}, {'Bob',grade 'B-'}, {Charlie',grade 'B+'}]"}
{"task_id":"EvoEval\/13","prompt":"def filter_exchange(arr, lst1):\n    \"\"\"\n    Write a function `filter_exchange` that takes three parameters: an array of integers `arr` and a list numbers `lst1`.The function should first filter the `arr` array to keep only the numbers which have a sum of digits > 0.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.After filtering the array, the function should determine whether it is possible perform an exchange of elements between the filtered array and `lst1` to make `l1` a list of only even numbers.There is no limit on the number exchanged elements between the filtered array and `lst1`.If it is possible to exchange elements between the filtered array and `lst1` to make all the elements of `l1 to be even, return \"YES\".Otherwise, return \"NO\".For example: filter_exchange([-1, 11, -11, 6], [1, 2, 3, 4]) => NO filterex1 1 2 2],1 2 3]) YES filter], [1 2 3,]) NO\n    \"\"\"\n","raw":"Write a function `filter_exchange` that takes three parameters: an array of integers `arr` and a list of numbers `lst1`.\n    The function should first filter the `arr` array to keep only the numbers which have a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    After filtering the array, the function should determine whether it is possible to perform an exchange of elements \n    between the filtered array and `lst1` to make `lst1` a list of only even numbers. \n    There is no limit on the number of exchanged elements between the filtered array and `lst1`.\n\n    If it is possible to exchange elements between the filtered array and `lst1` to make all the elements of `lst1` to be even, \n    return \"YES\". Otherwise, return \"NO\".\n\n    For example:\n    filter_exchange([-1, 11, -11, 6], [1, 2, 3, 4]) => NO\n    filter_exchange([1, 1, 2, 2], [1, 2, 3, 4]) => YES\n    filter_exchange([], [1, 2, 3, 4]) => NO","reduced":"Write a function `filter_exchange` that takes three parameters: an array of integers `arr` and a list numbers `lst1`.The function should first filter the `arr` array to keep only the numbers which have a sum of digits > 0.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.After filtering the array, the function should determine whether it is possible perform an exchange of elements between the filtered array and `lst1` to make `l1` a list of only even numbers.There is no limit on the number exchanged elements between the filtered array and `lst1`.If it is possible to exchange elements between the filtered array and `lst1` to make all the elements of `l1 to be even, return \"YES\".Otherwise, return \"NO\".For example: filter_exchange([-1, 11, -11, 6], [1, 2, 3, 4]) => NO filterex1 1 2 2],1 2 3]) YES filter], [1 2 3,]) NO"}
{"task_id":"EvoEval\/14","prompt":"def prime_avg_range(n, m):\n    \"\"\"\n    You are given two positive integers n and m.Your task is to create a list of all prime numbers between n and m (inclusive), compute the average of these prime numbers, round the answer to the nearest integer, and convert that to binary.If there are no prime numbers in the range or if n is greater than m, return -1.Example: prime_avg_range(1, 5) => \"0b11\" prime_av_range(7, 11) => \"0b1001\" primeavrange(20 30) \"0b11010\" primeav(15 10) -1 primeavrange(10, 10) -1\n    \"\"\"\n","raw":"You are given two positive integers n and m. Your task is to create a list of all \n    prime numbers between n and m (inclusive), compute the average of these prime numbers, \n    round the answer to the nearest integer, and convert that to binary. \n    If there are no prime numbers in the range or if n is greater than m, return -1.\n    Example:\n    prime_avg_range(1, 5) => \"0b11\"\n    prime_avg_range(7, 11) => \"0b1001\"\n    prime_avg_range(20, 30) => \"0b11010\"\n    prime_avg_range(15, 10) => -1\n    prime_avg_range(10, 10) => -1","reduced":"You are given two positive integers n and m.Your task is to create a list of all prime numbers between n and m (inclusive), compute the average of these prime numbers, round the answer to the nearest integer, and convert that to binary.If there are no prime numbers in the range or if n is greater than m, return -1.Example: prime_avg_range(1, 5) => \"0b11\" prime_av_range(7, 11) => \"0b1001\" primeavrange(20 30) \"0b11010\" primeav(15 10) -1 primeavrange(10, 10) -1"}
{"task_id":"EvoEval\/15","prompt":"from typing import List\n\ndef balance_triples(operations: List[int]) -> bool:\n    \"\"\"\n    balance_triples takes a list of deposit and withdrawal operations on a bank account that starts with zero balance.It returns True if there are at three distinct points in time where the balance of account sums to zero (excluding the initial balance), and False otherwise.If at any point the balance of account falls below zero, function should immediately return False.>>> balance_triples([1, -1, 2, -2, 3, -3]) True >>> balance_tri([1, 2, 3, -6]) False >>> balancetri([1, 2, -4, 5]) False >>> balance2 -2 3, -3, 4, -4]) True >>> balance1 -1 2]) False\n    \"\"\"\n","raw":"balance_triples takes a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. It returns True if there are at least three distinct points in time where the balance of account sums to zero (excluding the initial balance), \n    and False otherwise. If at any point the balance of account falls below zero, function should immediately return False.\n    \n    >>> balance_triples([1, -1, 2, -2, 3, -3])\n    True\n    >>> balance_triples([1, 2, 3, -6])\n    False\n    >>> balance_triples([1, 2, -4, 5])\n    False\n    >>> balance_triples([2, -2, 3, -3, 4, -4])\n    True\n    >>> balance_triples([1, -1, 2])\n    False","reduced":"balance_triples takes a list of deposit and withdrawal operations on a bank account that starts with zero balance.It returns True if there are at three distinct points in time where the balance of account sums to zero (excluding the initial balance), and False otherwise.If at any point the balance of account falls below zero, function should immediately return False.>>> balance_triples([1, -1, 2, -2, 3, -3]) True >>> balance_tri([1, 2, 3, -6]) False >>> balancetri([1, 2, -4, 5]) False >>> balance2 -2 3, -3, 4, -4]) True >>> balance1 -1 2]) False"}
{"task_id":"EvoEval\/16","prompt":"def get_music_notes(word: str, music_string: str):\n    \"\"\"\n    You are given two inputs: a word and a music string.Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive) and then find the corresponding beats in the music string up to the closest vowel (inclusive).Vowels in the beginning and ending doesn count.Return empty list if you didn find any vowel met the above condition.The music string represents musical notes in a special ASCII format.Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat Each letter in the word corresponds to a note in the music string, from left to.You may assume that the given string contains English letter only.Example: get_music_notes(\"yogurt\", \"o o|.| o| o|.|.|.|.| o o\") ==> [4, 2, 1, 2] get_musicnotes(\"FULL\", \"o o|.| o| o|.... o o\") == [4, 2] getmusic(\"quick\", \"o o|. o| o.... o o\") [] getmusic(\"ab\", \"o o|. o| o.... o o\") []\n    \"\"\"\n","raw":"You are given two inputs: a word and a music string. Your task is to find the closest vowel that stands\n    between two consonants from the right side of the word (case sensitive) and then find the corresponding\n    beats in the music string up to the closest vowel (inclusive).\n\n    Vowels in the beginning and ending doesn't count. Return empty list if you didn't find any vowel met the\n    above condition.\n\n    The music string represents musical notes in a special ASCII format.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    Each letter in the word corresponds to a note in the music string, from left to right.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_music_notes(\"yogurt\", \"o o| .| o| o| .| .| .| .| o o\") ==> [4, 2, 1, 2]\n    get_music_notes(\"FULL\", \"o o| .| o| o| .| .| .| .| o o\") ==> [4, 2]\n    get_music_notes(\"quick\", \"o o| .| o| o| .| .| .| .| o o\") ==> []\n    get_music_notes(\"ab\", \"o o| .| o| o| .| .| .| .| o o\") ==> []","reduced":"You are given two inputs: a word and a music string.Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive) and then find the corresponding beats in the music string up to the closest vowel (inclusive).Vowels in the beginning and ending doesn count.Return empty list if you didn find any vowel met the above condition.The music string represents musical notes in a special ASCII format.Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat Each letter in the word corresponds to a note in the music string, from left to.You may assume that the given string contains English letter only.Example: get_music_notes(\"yogurt\", \"o o|.| o| o|.|.|.|.| o o\") ==> [4, 2, 1, 2] get_musicnotes(\"FULL\", \"o o|.| o| o|.... o o\") == [4, 2] getmusic(\"quick\", \"o o|. o| o.... o o\") [] getmusic(\"ab\", \"o o|. o| o.... o o\") []"}
{"task_id":"EvoEval\/17","prompt":"def fibfib_search(n: int, lst: list) -> int:\n    \"\"\"\n    Implement a function that computes the n-th element of the FibFib sequence as defined by: fibfib(0) == 0 fibfib(1) == 0 fib2 1 fibn) fibf(n-1) + fibfn-2) + fibn-3 The function should then evaluate a non-empty list of positive integers, and return the greatest integer in the list that is greater than zero, and has a frequency equal to or greater the value of the calculated n-th FibF element.The frequency of an integer is the number of times it appears in the list.If no such value exists, return -1.Examples: fibfib_search(5, [4, 1, 2, 2, 3, 1, 1, 1, 1]) == 1 fibf_search(3, [1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4 fibsearch6 [5 5, 4, 4, 4, 1, 1, 1, 1, 1]) == -1\n    \"\"\"\n","raw":"Implement a function that computes the n-th element of the FibFib sequence as defined by:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \n    The function should then evaluate a non-empty list of positive integers, and return the greatest \n    integer in the list that is greater than zero, and has a frequency equal to or greater than the value\n    of the calculated n-th FibFib element. The frequency of an integer is the number of times it appears \n    in the list.\n\n    If no such value exists, return -1.\n\n    Examples:\n        fibfib_search(5, [4, 1, 2, 2, 3, 1, 1, 1, 1]) == 1\n        fibfib_search(3, [1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4\n        fibfib_search(6, [5, 5, 4, 4, 4, 1, 1, 1, 1, 1]) == -1","reduced":"Implement a function that computes the n-th element of the FibFib sequence as defined by: fibfib(0) == 0 fibfib(1) == 0 fib2 1 fibn) fibf(n-1) + fibfn-2) + fibn-3 The function should then evaluate a non-empty list of positive integers, and return the greatest integer in the list that is greater than zero, and has a frequency equal to or greater the value of the calculated n-th FibF element.The frequency of an integer is the number of times it appears in the list.If no such value exists, return -1.Examples: fibfib_search(5, [4, 1, 2, 2, 3, 1, 1, 1, 1]) == 1 fibf_search(3, [1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4 fibsearch6 [5 5, 4, 4, 4, 1, 1, 1, 1, 1]) == -1"}
{"task_id":"EvoEval\/18","prompt":"def min_triplets_sum(nums: list):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array of size three.If no such sub-array exists, return 0.A sub-array is a contiguous part of an array.Examples: min_triplets_sum([2, 3, 4, 1, -7, 4]) == -2 # The sub-array is [1, -7, 4] mintri_sum([1, 2, 3, -6, 5, 1, 2]) == -1 # The sub is [2 3, -6] min2 3]) == 0 # No such sub- exists mintrisum([-1, -2, -3]) == -6 # The sub is [-1, -2, -3]\n    \"\"\"\n","raw":"Given an array of integers nums, find the minimum sum of any non-empty sub-array of size three. \n\n    If no such sub-array exists, return 0. A sub-array is a contiguous part of an array.\n\n    Examples:\n    min_triplets_sum([2, 3, 4, 1, -7, 4]) == -2   # The sub-array is [1, -7, 4]\n    min_triplets_sum([1, 2, 3, -6, 5, 1, 2]) == -1  # The sub-array is [2, 3, -6]\n    min_triplets_sum([2, 3]) == 0   # No such sub-array exists\n    min_triplets_sum([-1, -2, -3]) == -6   # The sub-array is [-1, -2, -3]","reduced":"Given an array of integers nums, find the minimum sum of any non-empty sub-array of size three.If no such sub-array exists, return 0.A sub-array is a contiguous part of an array.Examples: min_triplets_sum([2, 3, 4, 1, -7, 4]) == -2 # The sub-array is [1, -7, 4] mintri_sum([1, 2, 3, -6, 5, 1, 2]) == -1 # The sub is [2 3, -6] min2 3]) == 0 # No such sub- exists mintrisum([-1, -2, -3]) == -6 # The sub is [-1, -2, -3]"}
{"task_id":"EvoEval\/19","prompt":"from typing import List, Tuple, Optional\n\ndef account_operations(operations: List[int]) -> Tuple[Optional[int], Optional[int], bool]:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance.Deposit are positive numberss and withdrawal are negative numbers Your task is to: - Detect if at any point the balance of account falls below zero, and at that point return True.Otherwise, return False.- Find the largest valid withdrawal and smallest valid deposit operation.If balance falls below zero then the current operation and all later operations are invalid.If there is no withdrawal or deposit operation, return them as None.The function should return a tuple (a, b, c), where 'a' is the largest withdrawal operation, ' is the smallest deposit operation, and ' is a boolean that checks if the balance ever falls below zero.Examples: account_operations([1, 2, 3]) == (None, 1, False) account_oper([1 2, -4, 5]) == (None 1 True) account1 2 -3 2, -3, 5]) (-3, 1, True) account]) == (None, None, False accountoper([0]) == (None None False\n    \"\"\"\n","raw":"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. \n    Deposit are positive numberss and withdrawal are negative numbers\n\n    Your task is to:\n    - Detect if at any point the balance of account falls below zero, and at that point return True. \n    Otherwise, return False.\n    - Find the largest valid withdrawal and smallest valid deposit operation. If balance falls below zero then the current operation and all later operations are invalid.\n    If there is no withdrawal or deposit \n    operation, return them as None.\n\n    The function should return a tuple (a, b, c), where 'a' is the largest withdrawal operation, \n    'b' is the smallest deposit operation, and 'c' is a boolean that checks if the balance ever \n    falls below zero.\n\n    Examples: \n    account_operations([1, 2, 3]) == (None, 1, False)\n    account_operations([1, 2, -4, 5]) == (None, 1, True)\n    account_operations([1, 2, -3, 2, -3, 5]) == (-3, 1, True)\n    account_operations([]) == (None, None, False)\n    account_operations([0]) == (None, None, False)","reduced":"You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance.Deposit are positive numberss and withdrawal are negative numbers Your task is to: - Detect if at any point the balance of account falls below zero, and at that point return True.Otherwise, return False.- Find the largest valid withdrawal and smallest valid deposit operation.If balance falls below zero then the current operation and all later operations are invalid.If there is no withdrawal or deposit operation, return them as None.The function should return a tuple (a, b, c), where 'a' is the largest withdrawal operation, ' is the smallest deposit operation, and ' is a boolean that checks if the balance ever falls below zero.Examples: account_operations([1, 2, 3]) == (None, 1, False) account_oper([1 2, -4, 5]) == (None 1 True) account1 2 -3 2, -3, 5]) (-3, 1, True) account]) == (None, None, False accountoper([0]) == (None None False"}
{"task_id":"EvoEval\/20","prompt":"def grade_and_case(s, grades):\n    \"\"\"\n    You are a teacher at the end the semester who has to give out grades and also checking the format of students' names.The teacher has given you a list student names in string format 's' and a corresponding list of GPAs for these students 'grades'.You need to write a function that will: 1.Output the student name in reverse case (from lower to upper or vise versa).2.Assign a letter grade to the student based their GPA using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 33 A- > 30 B+ > 27 B > 23 B- 20 C+ 17 > 13 C- 10 D+ 07 >0 D- 00 E The function should return a list of tu, where each tuple contains the reversed case student name and their corresponding letter.Example: grade_andcase(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7]) ==> [('aMY', 'A+'), ('bob',B'),MIleS',C-')]\n    \"\"\"\n","raw":"You are a teacher at the end of the semester who has to give out grades and also checking the format of students' names. \n\n    The teacher has given you a list of student names in string format 's' and a corresponding list of GPAs for these students 'grades'. \n\n    You need to write a function that will:\n    1. Output the student name in reverse case (from lower to upper or vise versa).\n    2. Assign a letter grade to the student based on their GPA using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    The function should return a list of tuples, where each tuple contains the reversed case student name and their corresponding letter grade.\n\n    Example:\n    grade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7]) ==> [('aMY', 'A+'), ('bob', 'B'), ('MIleS', 'C-')]","reduced":"You are a teacher at the end the semester who has to give out grades and also checking the format of students' names.The teacher has given you a list student names in string format 's' and a corresponding list of GPAs for these students 'grades'.You need to write a function that will: 1.Output the student name in reverse case (from lower to upper or vise versa).2.Assign a letter grade to the student based their GPA using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 33 A- > 30 B+ > 27 B > 23 B- 20 C+ 17 > 13 C- 10 D+ 07 >0 D- 00 E The function should return a list of tu, where each tuple contains the reversed case student name and their corresponding letter.Example: grade_andcase(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7]) ==> [('aMY', 'A+'), ('bob',B'),MIleS',C-')]"}
{"task_id":"EvoEval\/21","prompt":"from typing import List\n\ndef base_change_prefixes(x: int, base: int) -> List[str]:\n    \"\"\"\n    For a given number x and a base less than 10, first change the numerical base of x to the given base.Then return a list of all prefixes from the shortest to the longest of the new base representation of x.>>> base_change_prefixes(8, 3) ['2', '22'] >>> basechange_prefix(8, 2) ['1',10', '100', '1000'] >>> basechange(7, 21',11',111']\n    \"\"\"\n","raw":"For a given number x and a base less than 10, first change the numerical base of x to the given base.\n    Then return a list of all prefixes from the shortest to the longest of the new base representation of x.\n    \n    >>> base_change_prefixes(8, 3)\n    ['2', '22']\n    >>> base_change_prefixes(8, 2)\n    ['1', '10', '100', '1000']\n    >>> base_change_prefixes(7, 2)\n    ['1', '11', '111']","reduced":"For a given number x and a base less than 10, first change the numerical base of x to the given base.Then return a list of all prefixes from the shortest to the longest of the new base representation of x.>>> base_change_prefixes(8, 3) ['2', '22'] >>> basechange_prefix(8, 2) ['1',10', '100', '1000'] >>> basechange(7, 21',11',111']"}
{"task_id":"EvoEval\/22","prompt":"\"\"\"\n    def binary_planet_distance(planet1, planet): ''' There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and.The function should compute all planets whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun.The number of planets is then converted to binary format and returned as a string, with each character representing a binary number.Each character in the string will be '0' or '1'.There will be an extra couple of characters 'bd' at the beginning and at the end of the string.The extra characters are there to help with the format.The function should return an empty string if planet1 or planet are not correct planet names.Examples binary_planet_distance(\"Jupiter\", \"Ne\") ==> \"bd10bd\" (2 planets: Saturn, Uran) binaryplanetdistance(\"Earth\", \"Merc\") == \"bd1bd\" (1 planet: Venus) binaryMercuryU\")bd101bd5 planets Venus, Earth, Mars, Jupiter, Saturn) '''\n    \"\"\"\n","raw":"def binary_planet_distance(planet1, planet2):\r\n    '''\r\n    There are eight planets in our solar system: the closest to the Sun \r\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \r\n    Uranus, Neptune.\r\n    Write a function that takes two planet names as strings planet1 and planet2. \r\n    The function should compute all planets whose orbits are \r\n    located between the orbit of planet1 and the orbit of planet2, sorted by \r\n    the proximity to the sun. The number of planets is then converted to binary\r\n    format and returned as a string, with each character representing a binary\r\n    number. Each character in the string will be '0' or '1'.\r\n    \r\n    There will be an extra couple of characters 'bd' at the beginning and at the end of the string.\r\n    The extra characters are there to help with the format.\r\n    \r\n    The function should return an empty string if planet1 or planet2\r\n    are not correct planet names.\r\n    \r\n    Examples\r\n    binary_planet_distance(\"Jupiter\", \"Neptune\") ==> \"bd10bd\" (2 planets: Saturn, Uranus)\r\n    binary_planet_distance(\"Earth\", \"Mercury\") ==> \"bd1bd\" (1 planet: Venus)\r\n    binary_planet_distance(\"Mercury\", \"Uranus\") ==> \"bd101bd\" (5 planets: Venus, Earth, Mars, Jupiter, Saturn)\r\n    '''","reduced":"def binary_planet_distance(planet1, planet): ''' There are eight planets in our solar: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.Write a function that takes two planet names as strings planet1 and.The function should compute all planets whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun.The number of planets is then converted to binary format and returned as a string, with each character representing a binary number.Each character in the string will be '0' or '1'.There will be an extra couple of characters 'bd' at the beginning and at the end of the string.The extra characters are there to help with the format.The function should return an empty string if planet1 or planet are not correct planet names.Examples binary_planet_distance(\"Jupiter\", \"Ne\") ==> \"bd10bd\" (2 planets: Saturn, Uran) binaryplanetdistance(\"Earth\", \"Merc\") == \"bd1bd\" (1 planet: Venus) binaryMercuryU\")bd101bd5 planets Venus, Earth, Mars, Jupiter, Saturn) '''"}
{"task_id":"EvoEval\/23","prompt":"def special_stone_factorial(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile n levels of stones.The first level has n stones.The number stones in the next level is: - the next odd if n is odd.- the next even number if n is even.For each level, calculate Brazilian fact (defined: brazilian_(n) = n! * (n-)! * (2 *...* 1!), where n is the number stones in the level.Return the list Brazilian factorial for each level.For example: >>> special_stone_factorial(3) [12, 34560, 125411328000]\n    \"\"\"\n","raw":"Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n\n    For each level, calculate the Brazilian factorial (defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!), \n    where n is the number of stones in the level.\n\n    Return the list of Brazilian factorials for each level.\n\n    For example:\n    >>> special_stone_factorial(3)\n    [12, 34560, 125411328000]","reduced":"Given a positive integer n, you have to make a pile n levels of stones.The first level has n stones.The number stones in the next level is: - the next odd if n is odd.- the next even number if n is even.For each level, calculate Brazilian fact (defined: brazilian_(n) = n! * (n-)! * (2 *...* 1!), where n is the number stones in the level.Return the list Brazilian factorial for each level.For example: >>> special_stone_factorial(3) [12, 34560, 125411328000]"}
{"task_id":"EvoEval\/24","prompt":"from typing import List\n\ndef sort_happy_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delim string of numerals from 'zero' to 'nine'.Valid choices are 'zero', 'one', 'two', 'three', '', '', '', '', '' and ''.This function has two main operations: 1) It checks if the string of numbers is 'happy'.A string is happy if, after removing spaces from the string, every 3 consecutive letters are distinct.For instance, 'one two three' is not happy, but 'one one two' is happy.If the string is not happy, return 'Not a happy string'.2) If the string is happy, it sorts the string with numbers from smallest to largest and returns the sorted string.>>> sort_happy_numbers('three one five') 'Not a happy string' >>> sortn('three two two') 'Not string >>> sortfive two eight')two five eight'\n    \"\"\"\n","raw":"Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', \n    'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. This function has two main operations:\n    \n    1) It checks if the string of numbers is 'happy'. A string is happy if, after removing spaces from the string, every 3 consecutive letters are distinct.\n    For instance, 'one two three' is not happy, but 'one one two' is happy. If the string is not happy, return 'Not a happy string'.\n    \n    2) If the string is happy, it sorts the string with numbers from smallest to largest and returns the sorted string.\n    \n    >>> sort_happy_numbers('three one five')\n    'Not a happy string'\n    \n    >>> sort_happy_numbers('three two two')\n    'Not a happy string'\n    \n    >>> sort_happy_numbers('five two eight')\n    'two five eight'","reduced":"Input is a space-delim string of numerals from 'zero' to 'nine'.Valid choices are 'zero', 'one', 'two', 'three', '', '', '', '', '' and ''.This function has two main operations: 1) It checks if the string of numbers is 'happy'.A string is happy if, after removing spaces from the string, every 3 consecutive letters are distinct.For instance, 'one two three' is not happy, but 'one one two' is happy.If the string is not happy, return 'Not a happy string'.2) If the string is happy, it sorts the string with numbers from smallest to largest and returns the sorted string.>>> sort_happy_numbers('three one five') 'Not a happy string' >>> sortn('three two two') 'Not string >>> sortfive two eight')two five eight'"}
{"task_id":"EvoEval\/25","prompt":"from typing import List, Tuple\n\ndef sum_product_triples(n: int) -> Tuple[int, int]:\n    \"\"\"\n    You are given a positive integer n.You have to create an integer array a of length n.For each i (from 1 to n), the value of a[] = i * i - i + 1.Find the triples (a[i], a[j], ak]) of a where i < j < k, and ai] + aj] +] is a multiple 3.From these triples, return a tuple consisting the sum and the product of all the first elements of these tri.Empty sum should be equal 0 and empty product should 1 if there are no valid tri.Example : Input: n = 5 Output (1, 1) Explan: a = [1 3, 7, 13, 21] The only valid triple is (1 7,).The sum and product of the first element is 1.\n    \"\"\"\n","raw":"You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (from 1 to n), the value of a[i] = i * i - i + 1.\n    Find the triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    From these triples, return a tuple consisting of the sum and the product of all the first elements of these triples.\n    \n    Empty sum should be equal to 0 and empty product should be equal to 1 if there are no valid triples.\n    \n    Example :\n        Input: n = 5\n        Output: (1, 1)\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13). The sum and product of the first element is 1.","reduced":"You are given a positive integer n.You have to create an integer array a of length n.For each i (from 1 to n), the value of a[] = i * i - i + 1.Find the triples (a[i], a[j], ak]) of a where i < j < k, and ai] + aj] +] is a multiple 3.From these triples, return a tuple consisting the sum and the product of all the first elements of these tri.Empty sum should be equal 0 and empty product should 1 if there are no valid tri.Example : Input: n = 5 Output (1, 1) Explan: a = [1 3, 7, 13, 21] The only valid triple is (1 7,).The sum and product of the first element is 1."}
{"task_id":"EvoEval\/26","prompt":"from typing import List, Tuple\n\ndef sort_and_pluck(values: List[str]) -> Tuple[str, int]:\n    \"\"\"\n    Given a list space-delim strings representing numerals from 'zero' 'nine', your task is first sort each string of numer from smallest and then pl one num from the sorted.The plucked numeral should be the num with the smallest even value.If multiple numerals with the smallest even value are found return the numeral that has the smallest index in its original string (before sorting).The plucked numeral should be returned in a tuple, (\"numeral\", its original index in the list), If there are no even values or the given list is empty, return an empty tuple.Example 1: Input: ['three two one',nine eight seven'] Output ('two', 1) Explan After sorting we get ['one two three',seven eight nine'].'two' and 'eight' are the only even numer.Example 2: Input: ['five four three',one zero nine'] Output ('zero', 1) Explan After sorting we get ['three four five',nine one zero'].'four' and 'zero are the only even numerals.Example 3: Input: [] Output () Example 4 Input ['three two one', 'five four zero',six nine eight'] Output ('zero', 2) Explan: After sorting we get ['one two three',four five zero',eight six nine'].'two', 'zero', 'four',eight' andsix' are the even numer.Constraints: * 0 <= len(values) <= 10000 * 0 <= lenvalue) <= 50 ( for each value in values list)\n    \"\"\"\n","raw":"Given a list of space-delimited strings representing numerals from 'zero' to 'nine', \n    your task is to first sort each string of numerals from smallest to largest and then \n    pluck one numeral from the sorted list.\n\n    The plucked numeral should be the numeral with the smallest even value. If multiple numerals \n    with the same smallest even value are found return the numeral that has the smallest index in its \n    original string (before sorting). The plucked numeral should be returned in a tuple, \n    (\"numeral\", its original index in the list), If there are no even values or the given list \n    is empty, return an empty tuple.\n\n    Example 1:\n        Input: ['three two one', 'nine eight seven']\n        Output: ('two', 1)\n        Explanation: After sorting we get ['one two three', 'seven eight nine']. \n                     'two' and 'eight' are the only even numerals.\n\n    Example 2:\n        Input: ['five four three', 'one zero nine']\n        Output: ('zero', 1)\n        Explanation: After sorting we get ['three four five', 'nine one zero']. \n                     'four' and 'zero' are the only even numerals.\n\n    Example 3:\n        Input: []\n        Output: ()\n        \n    Example 4:\n        Input: ['three two one', 'five four zero', 'six nine eight']\n        Output: ('zero', 2)\n        Explanation: After sorting we get ['one two three', 'four five zero', 'eight six nine']. \n                     'two', 'zero', 'four', 'eight' and 'six' are the even numerals.\n\n    Constraints:\n        * 0 <= len(values) <= 10000\n        * 0 <= len(value) <= 50 ( for each value in values list)","reduced":"Given a list space-delim strings representing numerals from 'zero' 'nine', your task is first sort each string of numer from smallest and then pl one num from the sorted.The plucked numeral should be the num with the smallest even value.If multiple numerals with the smallest even value are found return the numeral that has the smallest index in its original string (before sorting).The plucked numeral should be returned in a tuple, (\"numeral\", its original index in the list), If there are no even values or the given list is empty, return an empty tuple.Example 1: Input: ['three two one',nine eight seven'] Output ('two', 1) Explan After sorting we get ['one two three',seven eight nine'].'two' and 'eight' are the only even numer.Example 2: Input: ['five four three',one zero nine'] Output ('zero', 1) Explan After sorting we get ['three four five',nine one zero'].'four' and 'zero are the only even numerals.Example 3: Input: [] Output () Example 4 Input ['three two one', 'five four zero',six nine eight'] Output ('zero', 2) Explan: After sorting we get ['one two three',four five zero',eight six nine'].'two', 'zero', 'four',eight' andsix' are the even numer.Constraints: * 0 <= len(values) <= 10000 * 0 <= lenvalue) <= 50 ( for each value in values list)"}
{"task_id":"EvoEval\/27","prompt":"def list_prime_exchange(lst1, lst2, x, y):\n    \"\"\"\n    The function takes two lists of numbers lst1 and, and two integers x and y.The task is to determine whether it is possible to perform an exchange of elements between lst1 and l2 to make lst1 a list of only prime numbers.If it is possible, return the value of x.If it is not possible, return the value of y.There is no limit on the number exchanged elements between lst1 and l2.For example: list_prime_exchange([1, 2, 3, 4], [5, 7, 11, 13], 10, 20) => 10 listprimeex([1 2],6 8 10, 12], 30, 40) 40 It is assumed that the input lists will be non-empty and the integers x and y will be nonzero.\n    \"\"\"\n","raw":"The function takes two lists of numbers lst1 and lst2, and two integers x and y. The task is to \n    determine whether it is possible to perform an exchange of elements between lst1 and lst2 to \n    make lst1 a list of only prime numbers. \n\n    If it is possible, return the value of x. If it is not possible, return the value of y. \n\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n\n    For example:\n    list_prime_exchange([1, 2, 3, 4], [5, 7, 11, 13], 10, 20) => 10\n    list_prime_exchange([1, 2, 3, 4], [6, 8, 10, 12], 30, 40) => 40\n\n    It is assumed that the input lists will be non-empty and the integers x and y will be non-zero.","reduced":"The function takes two lists of numbers lst1 and, and two integers x and y.The task is to determine whether it is possible to perform an exchange of elements between lst1 and l2 to make lst1 a list of only prime numbers.If it is possible, return the value of x.If it is not possible, return the value of y.There is no limit on the number exchanged elements between lst1 and l2.For example: list_prime_exchange([1, 2, 3, 4], [5, 7, 11, 13], 10, 20) => 10 listprimeex([1 2],6 8 10, 12], 30, 40) 40 It is assumed that the input lists will be non-empty and the integers x and y will be nonzero."}
{"task_id":"EvoEval\/28","prompt":"def grade_with_same_chars(grades: list, s0: str, s1: str):\n    \"\"\"\n    A teacher has a special grading system where she assigns her students letter grades based on their GPA according to the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 23 B- > 20 C+ > 17 C > 13 C- > 10 D+ > 0.7 D > 00 D- 0.0 E However, this year she adds an extra condition: the students can only receive a grade if their name (s0) and the course title (s1) have the same characters.The function receives a list of GPAs and two strings (s0 and s1) and returns a list of grades for the students that pass the condition, or an empty list if no student passes.Example: grade_with_same_chars([4.0, 3, 1.7, 2, 3.5], 'abcd', 'dcba') ==> ['A+', 'B', 'C-', 'C', 'A-'] grade_withsame_ch([4.0, 3, 17 2 35], 'aaabcd', 'dddcba') == ['A+',B', 'C- '', 'A-'] gradewithsamech([4 3 1 3],abcd',dcbae') ==> []\n    \"\"\"\n","raw":"A teacher has a special grading system where she assigns her students letter grades \n    based on their GPA according to the following table:\n\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    However, this year she adds an extra condition: the students can only receive a grade \n    if their name (s0) and the course title (s1) have the same characters. The function \n    receives a list of GPAs and two strings (s0 and s1) and returns a list of grades \n    for the students that pass the condition, or an empty list if no student passes.\n\n    Example:\n    grade_with_same_chars([4.0, 3, 1.7, 2, 3.5], 'abcd', 'dcba') ==> ['A+', 'B', 'C-', 'C', 'A-']\n    grade_with_same_chars([4.0, 3, 1.7, 2, 3.5], 'aaabcd', 'dddcba') ==> ['A+', 'B', 'C-', 'C', 'A-']\n    grade_with_same_chars([4.0, 3, 1.7, 2, 3.5], 'abcd', 'dcbae') ==> []","reduced":"A teacher has a special grading system where she assigns her students letter grades based on their GPA according to the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 23 B- > 20 C+ > 17 C > 13 C- > 10 D+ > 0.7 D > 00 D- 0.0 E However, this year she adds an extra condition: the students can only receive a grade if their name (s0) and the course title (s1) have the same characters.The function receives a list of GPAs and two strings (s0 and s1) and returns a list of grades for the students that pass the condition, or an empty list if no student passes.Example: grade_with_same_chars([4.0, 3, 1.7, 2, 3.5], 'abcd', 'dcba') ==> ['A+', 'B', 'C-', 'C', 'A-'] grade_withsame_ch([4.0, 3, 17 2 35], 'aaabcd', 'dddcba') == ['A+',B', 'C- '', 'A-'] gradewithsamech([4 3 1 3],abcd',dcbae') ==> []"}
{"task_id":"EvoEval\/29","prompt":"def largest_prime_factor_or_value(n, x, y):\n    \"\"\"\n    A program which should return the largest prime factor of n if n is not a prime number, should return the value of x if n is a prime number and y if n is 1.Examples: for largest_prime_factor_or_value(13195, 34, 12) == 29 for largestprimefactor_orvalue(7, 8, 5) == 8 for largestprimefactor(1, 8, 5) 5\n    \"\"\"\n","raw":"A program which should return the largest prime factor of n if n is not a prime number, should return the value of x if n is a prime number and y if n is 1. \n\n    Examples:\n    for largest_prime_factor_or_value(13195, 34, 12) == 29\n    for largest_prime_factor_or_value(7, 8, 5) == 8\n    for largest_prime_factor_or_value(1, 8, 5) == 5","reduced":"A program which should return the largest prime factor of n if n is not a prime number, should return the value of x if n is a prime number and y if n is 1.Examples: for largest_prime_factor_or_value(13195, 34, 12) == 29 for largestprimefactor_orvalue(7, 8, 5) == 8 for largestprimefactor(1, 8, 5) 5"}
{"task_id":"EvoEval\/30","prompt":"from typing import List\n\ndef parse_music_simplify(x: str, music_string: str) -> List[bool]:\n    \"\"\"\n    Input to this function is a string, x, which is a fraction in the format of <numerator>\/<denomin> where both numerator are positive whole and a string, music_string, representing musical notes in a special ASCII format.Your task is to parse the music_string and return a list bo corresponding whether the beats of each note simpl the fraction x.If x * beats evaluates to a whole number, add True to the list, otherwise add False.Here is the legend for music_string: 'o' - whole note, lasts four beats 'o|' - half, two '.|' quater note, one beat Example: parse_musicsimplify(\"1\/4\", 'o o|.| o| o|.... o o') [True, False, False, False, False, False, False, False, False, True True]\n    \"\"\"\n","raw":"Input to this function is a string, x, which is a fraction in the format of <numerator>\/<denominator> where both numerator \n    and denominator are positive whole numbers and a string, music_string, representing musical notes in a special ASCII format.\n    \n    Your task is to parse the music_string and return a list of booleans corresponding to whether the beats of each note simplifies \n    the fraction x. \n\n    If x * beats evaluates to a whole number, add True to the list, otherwise add False. \n\n    Here is the legend for music_string:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    Example:\n    parse_music_simplify(\"1\/4\", 'o o| .| o| o| .| .| .| .| o o')\n    [True, False, False, False, False, False, False, False, False, True, True]","reduced":"Input to this function is a string, x, which is a fraction in the format of <numerator>\/<denomin> where both numerator are positive whole and a string, music_string, representing musical notes in a special ASCII format.Your task is to parse the music_string and return a list bo corresponding whether the beats of each note simpl the fraction x.If x * beats evaluates to a whole number, add True to the list, otherwise add False.Here is the legend for music_string: 'o' - whole note, lasts four beats 'o|' - half, two '.|' quater note, one beat Example: parse_musicsimplify(\"1\/4\", 'o o|.| o| o|.... o o') [True, False, False, False, False, False, False, False, False, True True]"}
{"task_id":"EvoEval\/31","prompt":"from typing import List\n\ndef special_prime_factorial(n: int) -> int:\n    \"\"\"\n    This function first factorizes the input 'n' into its prime factors and then calculates a special factorial.The 'special factorial' is defined as the product of factorials of all the prime factors of 'n'.The factors should be calculated number of times corresponding to how many times they appear in the factorization.The function should return the product of these factorials.For instance, >>> special_prime_factorial(8) 8 # because 8 = 2*2*2; 2! * 2! * 2! = 2 * 2 * 2 = 8 >>> special_fact(25) 14400 # because 25 5*5; 5! * 5 = 120 * 120 = 14400 >>>70 1209600 70 2 * 5 * 7; 2! 5 * 7! 2 * 120 * 5040 = 1209\n    \"\"\"\n","raw":"This function first factorizes the input 'n' into its prime factors and then calculates a special factorial.\n    The 'special factorial' is defined as the product of factorials of all the prime factors of 'n'.\n    The factors should be calculated number of times corresponding to how many times they appear in the factorization.\n    The function should return the product of these factorials.\n    \n    For instance,\n    >>> special_prime_factorial(8)\n    8  # because 8 = 2*2*2; 2! * 2! * 2! = 2 * 2 * 2 = 8\n    >>> special_prime_factorial(25)\n    14400 # because 25 = 5*5; 5! * 5! = 120 * 120 = 14400\n    >>> special_prime_factorial(70)\n    1209600 # because 70 = 2 * 5 * 7; 2! * 5! * 7! = 2 * 120 * 5040 = 1209600","reduced":"This function first factorizes the input 'n' into its prime factors and then calculates a special factorial.The 'special factorial' is defined as the product of factorials of all the prime factors of 'n'.The factors should be calculated number of times corresponding to how many times they appear in the factorization.The function should return the product of these factorials.For instance, >>> special_prime_factorial(8) 8 # because 8 = 2*2*2; 2! * 2! * 2! = 2 * 2 * 2 = 8 >>> special_fact(25) 14400 # because 25 5*5; 5! * 5 = 120 * 120 = 14400 >>>70 1209600 70 2 * 5 * 7; 2! 5 * 7! 2 * 120 * 5040 = 1209"}
{"task_id":"EvoEval\/32","prompt":"from typing import List\n\ndef circular_shift_nested_parens(input: List[str], shift: int) -> List[int]:\n    \"\"\"\n    The input to this function is a list of strings.Each string represents multiple groups for nested parentheses separated spaces.For each group, calculate the deepest level of nesting of parentheses.After that, concatenate the list of nesting depths as a single number and apply a circular shift on that number.Shift the digits of the number right by the provided shift value.If shift > number of digits, return digits reversed.Return the result as a list of individual digits after the circular shift.>>> circular_shift_nested_parens(['(()())', '((()))', '()', '((())()())'], 2) [1, 3, 2, 3] >>> circularshiftn(['(()())((()((())()) 1) [3 2, 3, 1]\n    \"\"\"\n","raw":"The input to this function is a list of strings. Each string represents multiple groups for nested parentheses \n    separated by spaces. For each group, calculate the deepest level of nesting of parentheses.\n    \n    After that, concatenate the list of nesting depths as a single number and apply a circular shift on that number. Shift \n    the digits of the number right by the provided shift value. If shift > number of digits, return digits reversed.\n    \n    Return the result as a list of individual digits after the circular shift.\n\n    >>> circular_shift_nested_parens(['(()())', '((()))', '()', '((())()())'], 2)\n    [1, 3, 2, 3]\n    >>> circular_shift_nested_parens(['(()())', '((()))', '()', '((())()())'], 1)\n    [3, 2, 3, 1]","reduced":"The input to this function is a list of strings.Each string represents multiple groups for nested parentheses separated spaces.For each group, calculate the deepest level of nesting of parentheses.After that, concatenate the list of nesting depths as a single number and apply a circular shift on that number.Shift the digits of the number right by the provided shift value.If shift > number of digits, return digits reversed.Return the result as a list of individual digits after the circular shift.>>> circular_shift_nested_parens(['(()())', '((()))', '()', '((())()())'], 2) [1, 3, 2, 3] >>> circularshiftn(['(()())((()((())()) 1) [3 2, 3, 1]"}
{"task_id":"EvoEval\/33","prompt":"def roman_happiness(s):\n    \"\"\"\n    Given a string s of Roman numerals in lowercase, your task is to check if the roman numeral string is happy or not.Definition: A Roman numeral string is happy if: 1.Its length is at least 3.2.It represents a positive integer less than or equal to 1000.3.Every 3 consecutive letters are distinct.If the string does not meet the criteria, return False.If the string is happy, return the integer that it represents.For example: roman_happiness('i') => False r_h('ii') => False rh('xiv') => 14 rh('iiv') => False rh('xiv') => 14 rh('xxxi') False rh('xliv') => 44\n    \"\"\"\n","raw":"Given a string s of Roman numerals in lowercase, your task is to check if the roman numeral string is happy or not.\n\n    Definition:\n    A Roman numeral string is happy if:\n    1. Its length is at least 3.\n    2. It represents a positive integer less than or equal to 1000.\n    3. Every 3 consecutive letters are distinct.\n\n    If the string does not meet the criteria, return False. If the string is happy, return the integer that it represents.\n\n    For example:\n    roman_happiness('i') => False\n    roman_happiness('ii') => False\n    roman_happiness('xiv') => 14\n    roman_happiness('iiv') => False\n    roman_happiness('xiv') => 14\n    roman_happiness('xxxi') => False\n    roman_happiness('xliv') => 44","reduced":"Given a string s of Roman numerals in lowercase, your task is to check if the roman numeral string is happy or not.Definition: A Roman numeral string is happy if: 1.Its length is at least 3.2.It represents a positive integer less than or equal to 1000.3.Every 3 consecutive letters are distinct.If the string does not meet the criteria, return False.If the string is happy, return the integer that it represents.For example: roman_happiness('i') => False r_h('ii') => False rh('xiv') => 14 rh('iiv') => False rh('xiv') => 14 rh('xxxi') False rh('xliv') => 44"}
{"task_id":"EvoEval\/34","prompt":"from typing import List\n\ndef md5_nested_parens(paren_string: str) -> List[str]:\n    \"\"\"\n    Given a string 'paren_string' that represents multiple groups of nested parentheses separated spaces, compute the md5 hash of the string that represents the deepest level of nesting of parentheses for each group.For example '(()())' has deepest level string of '2'.Each deepest level is converted to a string before hashing.If a group is not balanced (balanced means each open brace is properly closed), return an md5 hash of the string 'None'.If 'paren_string' is an empty, return an empty list.An md5 hash is a 32-character hexade number.>>> md5_nested_parens('(()()) ((())) () ((())()())') ['c81e728d9d4c2f636f067f89cc14862c', 'eccbc87e4b5ce2fe28308fd9f2a7baf3',c4ca4238a0b923820dcc509a6f75849b',eccbc87']\n    \"\"\"\n","raw":"Given a string 'paren_string' that represents multiple groups of nested parentheses separated by spaces,\n    compute the md5 hash of the string that represents the deepest level of nesting of parentheses for each group.\n    For example '(()())' has deepest level string of '2'.\n    Each deepest level is converted to a string before hashing.\n\n    If a group is not balanced (balanced means each open brace is properly closed), return an md5 hash of the string 'None'.\n    If 'paren_string' is an empty string, return an empty list.\n\n    An md5 hash is a 32-character hexadecimal number.\n\n    >>> md5_nested_parens('(()()) ((())) () ((())()())')\n    ['c81e728d9d4c2f636f067f89cc14862c', 'eccbc87e4b5ce2fe28308fd9f2a7baf3', 'c4ca4238a0b923820dcc509a6f75849b', 'eccbc87e4b5ce2fe28308fd9f2a7baf3']","reduced":"Given a string 'paren_string' that represents multiple groups of nested parentheses separated spaces, compute the md5 hash of the string that represents the deepest level of nesting of parentheses for each group.For example '(()())' has deepest level string of '2'.Each deepest level is converted to a string before hashing.If a group is not balanced (balanced means each open brace is properly closed), return an md5 hash of the string 'None'.If 'paren_string' is an empty, return an empty list.An md5 hash is a 32-character hexade number.>>> md5_nested_parens('(()()) ((())) () ((())()())') ['c81e728d9d4c2f636f067f89cc14862c', 'eccbc87e4b5ce2fe28308fd9f2a7baf3',c4ca4238a0b923820dcc509a6f75849b',eccbc87']"}
{"task_id":"EvoEval\/35","prompt":"def check_dict_happiness(dict):\n    \"\"\"\n    Given a dictionary, where all keys strings return True if the following conditions met 1.All keys are either all lower case or all.2.Each key is a happy string.A string is happy if its length at 3 and every 3 consecutive letters are distinct.The function should return False if the given dictionary is empty or if any of conditions are not metExamples: check_dict_happiness({\"abc\":\"apple\",def\":\"banana\"}) should return True.check_dict_happiness({\"abc\":\"apple\",ABDban\"}) should return False.check_dict_happiness({\"aab\":\"apple\",abcbanana\"}) should return False.check_dict_happiness({\"aab\":\"apple\", 8:\"ban \"a\":\"apple\"}) should return False.check_dict_happiness({\"ABC\":\"John\",DEF36GHIHouston\"}) should return True.check_dict_happiness({\"STATE\":\"NC\",ZIP\":\"12345\" }) should return False.\n    \"\"\"\n","raw":"Given a dictionary, where all keys are strings, return True if the following conditions are met:\n    1. All keys are either all lower case or all upper case.\n    2. Each key is a happy string. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    The function should return False if the given dictionary is empty or if any of the conditions are not met.\n    Examples:\n    check_dict_happiness({\"abc\":\"apple\", \"def\":\"banana\"}) should return True.\n    check_dict_happiness({\"abc\":\"apple\", \"ABD\":\"banana\"}) should return False.\n    check_dict_happiness({\"aab\":\"apple\", \"abc\":\"banana\"}) should return False.\n    check_dict_happiness({\"aab\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_happiness({\"ABC\":\"John\", \"DEF\":\"36\", \"GHI\":\"Houston\"}) should return True.\n    check_dict_happiness({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.","reduced":"Given a dictionary, where all keys strings return True if the following conditions met 1.All keys are either all lower case or all.2.Each key is a happy string.A string is happy if its length at 3 and every 3 consecutive letters are distinct.The function should return False if the given dictionary is empty or if any of conditions are not metExamples: check_dict_happiness({\"abc\":\"apple\",def\":\"banana\"}) should return True.check_dict_happiness({\"abc\":\"apple\",ABDban\"}) should return False.check_dict_happiness({\"aab\":\"apple\",abcbanana\"}) should return False.check_dict_happiness({\"aab\":\"apple\", 8:\"ban \"a\":\"apple\"}) should return False.check_dict_happiness({\"ABC\":\"John\",DEF36GHIHouston\"}) should return True.check_dict_happiness({\"STATE\":\"NC\",ZIP\":\"12345\" }) should return False."}
{"task_id":"EvoEval\/36","prompt":"def mod_shift_sort(arr, n: int, p: int):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr..., arrN].The numbers in the array will be randomly ordered.Your task is to determine if it is possible get an array sorted in nondecreasing order by performing the operation on the given array: You are allowed perform right shift operation any number.However the number times you can perform the shift operation is limited by the result 2^n modulo p (modp(n, p)).One right shift operation means shifting all elements of the array by one position in the right direction.The last element of the array will be moved to starting position in the array i. 0th index.If it is possible obtain the sorted array by performing the above operation within the determined limit then return True else.If the given array is empty then return True.Note The given list is guaranteed have unique elements and the values of n and p are positive.For Example: mod_shift_sort([3, 4,, 1, 2], 3 5) ==> True Explan By performing 2 right shift operations, nondecre order can achieved for the given array and 2 is less 3 (2^3 mod 5).mod_shift_sort([3, 5, 4, 1, 2], 2, 3) ==> False Explan: It is not possible get nondecreasing order for the given array by performing any number right shift operations.mod_shift_sort([3, 4,, 1, 2], 2, 3) ==> False Explan: Although it is possible get nondecreasing order for the array by performing enough right shift operations, the number operations required is more than the limit (2^3 mod 5).\n    \"\"\"\n","raw":"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n        However, the number of times you can perform the shift operation is \n        limited by the result of 2^n modulo p (modp(n, p)).\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    within the determined limit then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements and the values of n \n    and p are positive integers.\n\n    For Example:\n    \n    mod_shift_sort([3, 4, 5, 1, 2], 3, 5) ==> True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array and 2 is less than 3 (2^3 mod 5).\n    mod_shift_sort([3, 5, 4, 1, 2], 2, 3) ==> False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    mod_shift_sort([3, 4, 5, 1, 2], 2, 3) ==> False\n    Explanation: Although it is possible to get non-decreasing order for the array \n                by performing enough right shift operations, the number of operations \n                required is more than the limit (2^3 mod 5).","reduced":"We have an array 'arr' of N integers arr[1], arr..., arrN].The numbers in the array will be randomly ordered.Your task is to determine if it is possible get an array sorted in nondecreasing order by performing the operation on the given array: You are allowed perform right shift operation any number.However the number times you can perform the shift operation is limited by the result 2^n modulo p (modp(n, p)).One right shift operation means shifting all elements of the array by one position in the right direction.The last element of the array will be moved to starting position in the array i. 0th index.If it is possible obtain the sorted array by performing the above operation within the determined limit then return True else.If the given array is empty then return True.Note The given list is guaranteed have unique elements and the values of n and p are positive.For Example: mod_shift_sort([3, 4,, 1, 2], 3 5) ==> True Explan By performing 2 right shift operations, nondecre order can achieved for the given array and 2 is less 3 (2^3 mod 5).mod_shift_sort([3, 5, 4, 1, 2], 2, 3) ==> False Explan: It is not possible get nondecreasing order for the given array by performing any number right shift operations.mod_shift_sort([3, 4,, 1, 2], 2, 3) ==> False Explan: Although it is possible get nondecreasing order for the array by performing enough right shift operations, the number operations required is more than the limit (2^3 mod 5)."}
{"task_id":"EvoEval\/37","prompt":"import math\n\ndef minSubArraySumEvenOdd(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array of num.Then, return a tuple that has the number of even and odd digits in this minimum sum respectively.Example: minSubArraySumEvenOdd([2, 3, 4, 1, 2, 4]) == (0, 1) # minimum sum is 1 which has 0 even digit and 1 odd digit minSubArrayEven([-1 -2, -3]) == (1 0 # minimum -6 which 1 even and 0\n    \"\"\"\n","raw":"Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. Then, return a tuple that has the number of even and odd digits in \n    this minimum sum respectively.\n\n    Example:\n    minSubArraySumEvenOdd([2, 3, 4, 1, 2, 4]) == (0, 1)  # minimum sum is 1 which has 0 even digit and 1 odd digit\n    minSubArraySumEvenOdd([-1, -2, -3]) == (1, 0)  # minimum sum is -6 which has 1 even digit and 0 odd digit","reduced":"Given an array of integers nums, find the minimum sum of any non-empty sub-array of num.Then, return a tuple that has the number of even and odd digits in this minimum sum respectively.Example: minSubArraySumEvenOdd([2, 3, 4, 1, 2, 4]) == (0, 1) # minimum sum is 1 which has 0 even digit and 1 odd digit minSubArrayEven([-1 -2, -3]) == (1 0 # minimum -6 which 1 even and 0"}
{"task_id":"EvoEval\/38","prompt":"def even_odd_zero_sum(l, n):\n    \"\"\"\n    even_odd_zero_sum takes a list integers `l` and a positive integer `n` as inputs.It first calculates the number even and odd integer pales that fall within the range(1, n), inclusive.It then checks if there are two distinct elements in the list `l` that sum to either of the two numbers obtained from the previous step.The function should return a tuple of two bo.The first boolean indicates whether there are two distinct elements in the list `l` that sum to the number of even palindes, and the second boolean the same for odd palExample: Input: l = [1, 3, -2, -3, -1, 5, -2], n = 10 Output (True, False) Explan Integer palindromes within the range (1, 10 are 1, 2 3 4 5 6,,,.There are 4 even palindes and 5 odd pal.In the list `l`, there are two distinct elements that sum to 4 (3, 1) but there are no two distinct elements that sum 5.Note: 1.1 <= n <= 10^3 2.List `l` can contain both positive integers.3.Distinct elements mean that the same element cannot be used twice to make the sum.\n    \"\"\"\n","raw":"even_odd_zero_sum takes a list of integers `l` and a positive integer `n` as inputs.\n    \n    It first calculates the number of even and odd integer palindromes that fall within the range(1, n), inclusive.\n    \n    It then checks if there are two distinct elements in the list `l` that sum to either of the two numbers obtained from the previous step.\n    \n    The function should return a tuple of two booleans. The first boolean indicates whether there are two distinct elements in the list `l` that sum to the number of even palindromes, and the second boolean indicates the same for odd palindromes.\n \n    Example:\n        Input: l = [1, 3, -2, -3, -1, 5, -2], n = 10\n        Output: (True, False)\n        Explanation:\n        Integer palindromes within the range (1, 10) are 1, 2, 3, 4, 5, 6, 7, 8, 9. There are 4 even palindromes and 5 odd palindromes.\n        In the list `l`, there are two distinct elements that sum to 4 (3, 1) but there are no two distinct elements that sum to 5.\n        \n    Note:\n        1. 1 <= n <= 10^3\n        2. List `l` can contain both positive and negative integers.\n        3. Distinct elements mean that the same element cannot be used twice to make the sum.","reduced":"even_odd_zero_sum takes a list integers `l` and a positive integer `n` as inputs.It first calculates the number even and odd integer pales that fall within the range(1, n), inclusive.It then checks if there are two distinct elements in the list `l` that sum to either of the two numbers obtained from the previous step.The function should return a tuple of two bo.The first boolean indicates whether there are two distinct elements in the list `l` that sum to the number of even palindes, and the second boolean the same for odd palExample: Input: l = [1, 3, -2, -3, -1, 5, -2], n = 10 Output (True, False) Explan Integer palindromes within the range (1, 10 are 1, 2 3 4 5 6,,,.There are 4 even palindes and 5 odd pal.In the list `l`, there are two distinct elements that sum to 4 (3, 1) but there are no two distinct elements that sum 5.Note: 1.1 <= n <= 10^3 2.List `l` can contain both positive integers.3.Distinct elements mean that the same element cannot be used twice to make the sum."}
{"task_id":"EvoEval\/39","prompt":"def smallest_change_and_sum(arr, x, y):\r\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindrom.A palindromic array is an array that is read the same backwards and forwards.In one change, you can change one element to any other element.After finding the minimum changes, add the value of x and y to it.For example: smallest_change_andsum([1, 2, 3, 5, 4, 7, 9, 6], 2, 3) == 9 smallestchange_andsum([1, 2, 3, 4, 3, 2, 2], 1, 2) == 4 smallest1 2, 2, 1], 3, 2 5\n    \"\"\"\n","raw":"Given an array arr of integers, find the minimum number of elements that\r\n    need to be changed to make the array palindromic. A palindromic array is an array that\r\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\r\n    After finding the minimum changes, add the value of x and y to it.\r\n\r\n    For example:\r\n    smallest_change_and_sum([1, 2, 3, 5, 4, 7, 9, 6], 2, 3) == 9\r\n    smallest_change_and_sum([1, 2, 3, 4, 3, 2, 2], 1, 2) == 4\r\n    smallest_change_and_sum([1, 2, 3, 2, 1], 3, 2) == 5","reduced":"Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindrom.A palindromic array is an array that is read the same backwards and forwards.In one change, you can change one element to any other element.After finding the minimum changes, add the value of x and y to it.For example: smallest_change_andsum([1, 2, 3, 5, 4, 7, 9, 6], 2, 3) == 9 smallestchange_andsum([1, 2, 3, 4, 3, 2, 2], 1, 2) == 4 smallest1 2, 2, 1], 3, 2 5"}
{"task_id":"EvoEval\/40","prompt":"def largest_prime_odd_ends(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns the largest prime factor of the elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).Assume all numbers in the array are integers and are greater than 1.If no prime factor satisfies the condition, return None.For example: largest_prime_odd_ends([15, -73, 14, -15]) => 5 largestprimeodd_ends([33 -2 -3, 45, 21, 109]) 109 largestends10 -2 -3 5, 21, 4]) None\n    \"\"\"\n","raw":"Write a function that takes an array of numbers as input and returns \n    the largest prime factor of the elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9). \n    Assume all numbers in the array are integers and are greater than 1.\n    If no prime factor satisfies the condition, return None.\n    For example:\n    largest_prime_odd_ends([15, -73, 14, -15]) => 5 \n    largest_prime_odd_ends([33, -2, -3, 45, 21, 109]) => 109\n    largest_prime_odd_ends([10, -2, -3, 5, 21, 4]) => None","reduced":"Write a function that takes an array of numbers as input and returns the largest prime factor of the elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).Assume all numbers in the array are integers and are greater than 1.If no prime factor satisfies the condition, return None.For example: largest_prime_odd_ends([15, -73, 14, -15]) => 5 largestprimeodd_ends([33 -2 -3, 45, 21, 109]) 109 largestends10 -2 -3 5, 21, 4]) None"}
{"task_id":"EvoEval\/41","prompt":"def shifted_upper_count(s, shift):\n    \"\"\"\n    Given a string s and an integer shift, perform a circular shift on the ASCII values of the characters in string by the shift value.Return the count of uppercase vow in even indices after the shift.If shift > length of string, reverse the string before counting.For example: shifted_upper_count('aBCdEf', 1) returns 0 shiftedupper('abcdefg', 2 returns 0 shiftedupperdBBE', 3 1\n    \"\"\"\n","raw":"Given a string s and an integer shift, perform a circular shift on the ASCII values of the characters in string \n    by the shift value. Return the count of uppercase vowels in even indices after the shift.\n\n    If shift > length of string, reverse the string before counting.\n\n    For example:\n    shifted_upper_count('aBCdEf', 1) returns 0\n    shifted_upper_count('abcdefg', 2) returns 0\n    shifted_upper_count('dBBE', 3) returns 1","reduced":"Given a string s and an integer shift, perform a circular shift on the ASCII values of the characters in string by the shift value.Return the count of uppercase vow in even indices after the shift.If shift > length of string, reverse the string before counting.For example: shifted_upper_count('aBCdEf', 1) returns 0 shiftedupper('abcdefg', 2 returns 0 shiftedupperdBBE', 3 1"}
{"task_id":"EvoEval\/42","prompt":"def check_expression(expression: str):\n    \"\"\"\n    In this task, your job is to implement a function that will check each mathematical expression contained within a string of \"<\" and \">\", and determine if they are valid.A mathematical expression is valid if the product of the fractions within the brackets results in a whole number and every opening bracket \"<\" has a corresponding closing \">\".Otherwise, the expression is invalid.Each fraction is a string representation with the following format, <numerator>\/<denomin> where both numerator and denomin are positive whole numbers.You can assume that the fractions are valid and do not have zero as denominator.An expression begins with \"<\" and ends with \">\", and contains fractions separated comm \",\".Each expression can contain more than one fraction.>>> check_expression(\"<1\/5,5\/1>\") True >>> checkexpression(\"<1\/6,2\/1> False >>> check<7\/10,102,2\/1> True >>> check1\/2,21><2\/3,32> True >>> check(\"><1\/2,21><23,>\") False\n    \"\"\"\n","raw":"In this task, your job is to implement a function that will check each mathematical expression contained within a string of \"<\" and \">\", and determine if they are valid. A mathematical expression is valid if the product of the fractions within the brackets results in a whole number and every opening bracket \"<\" has a corresponding closing bracket \">\". Otherwise, the expression is invalid.\n\n    Each fraction is a string representation with the following format, <numerator>\/<denominator> where both numerator and denominator are positive whole numbers. You can assume that the fractions are valid and do not have zero as denominator.\n\n    An expression begins with \"<\" and ends with \">\", and contains fractions separated by commas \",\". Each expression can contain more than one fraction.\n\n    >>> check_expression(\"<1\/5,5\/1>\")\n    True\n    >>> check_expression(\"<1\/6,2\/1>\")\n    False\n    >>> check_expression(\"<7\/10,10\/2,2\/1>\")\n    True\n    >>> check_expression(\"<1\/2,2\/1><2\/3,3\/2>\")\n    True\n    >>> check_expression(\"><1\/2,2\/1><2\/3,3\/2>\")\n    False","reduced":"In this task, your job is to implement a function that will check each mathematical expression contained within a string of \"<\" and \">\", and determine if they are valid.A mathematical expression is valid if the product of the fractions within the brackets results in a whole number and every opening bracket \"<\" has a corresponding closing \">\".Otherwise, the expression is invalid.Each fraction is a string representation with the following format, <numerator>\/<denomin> where both numerator and denomin are positive whole numbers.You can assume that the fractions are valid and do not have zero as denominator.An expression begins with \"<\" and ends with \">\", and contains fractions separated comm \",\".Each expression can contain more than one fraction.>>> check_expression(\"<1\/5,5\/1>\") True >>> checkexpression(\"<1\/6,2\/1> False >>> check<7\/10,102,2\/1> True >>> check1\/2,21><2\/3,32> True >>> check(\"><1\/2,21><23,>\") False"}
{"task_id":"EvoEval\/43","prompt":"def sorted_fib4_sequence(n: int):\n    \"\"\"\n    The sorted Fib4 sequence is a sequence similar to the Fib4 sequence that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2 2 fib3 0 fibn) -> fib4(n-1) + fib4n-2 +n-3 + fibn-4).However, for the sorted Fib4 sequence we are not just interested in a single element but rather the entire sequence up to the n-th element.Furthermore, depending on the sum of the first and last elements of the sequence, you will sort the sequence in ascending order if the sum is odd, or sort it in descending if the sum is even.Please write a function to efficiently compute the sorted Fib4 sequence.Do not use recursion.Examples: >>> sorted_fib4_sequence(5) [0, 0, 0, 2, 2] >>> sorted_f4_sequence(6) [4, 2, 2, 0, 0, 0] >>> sortedf4sequence7 [8, 4, 2 2 0, 0, 0]\n    \"\"\"\n","raw":"The sorted Fib4 sequence is a sequence similar to the Fib4 sequence \n    that's defined as follows:\n\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \n    However, for the sorted Fib4 sequence we are not just interested in a single element but rather \n    the entire sequence up to the n-th element.\n    Furthermore, depending on the sum of the first and last elements of the sequence, \n    you will sort the sequence in ascending order if the sum is odd, \n    or sort it in descending order if the sum is even.\n    Please write a function to efficiently compute the sorted Fib4 sequence.  Do not use recursion.\n\n    Examples:\n    >>> sorted_fib4_sequence(5)\n    [0, 0, 0, 2, 2]\n    >>> sorted_fib4_sequence(6)\n    [4, 2, 2, 0, 0, 0]\n    >>> sorted_fib4_sequence(7)\n    [8, 4, 2, 2, 0, 0, 0]","reduced":"The sorted Fib4 sequence is a sequence similar to the Fib4 sequence that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2 2 fib3 0 fibn) -> fib4(n-1) + fib4n-2 +n-3 + fibn-4).However, for the sorted Fib4 sequence we are not just interested in a single element but rather the entire sequence up to the n-th element.Furthermore, depending on the sum of the first and last elements of the sequence, you will sort the sequence in ascending order if the sum is odd, or sort it in descending if the sum is even.Please write a function to efficiently compute the sorted Fib4 sequence.Do not use recursion.Examples: >>> sorted_fib4_sequence(5) [0, 0, 0, 2, 2] >>> sorted_f4_sequence(6) [4, 2, 2, 0, 0, 0] >>> sortedf4sequence7 [8, 4, 2 2 0, 0, 0]"}
{"task_id":"EvoEval\/44","prompt":"from typing import List\n\ndef roman_prefixes(number: int) -> List[str]:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string in lowercase.Afterwards, return a list of all prefixes of the roman num from shortest to longest.Restrictions: 1 <= num <= 1000 Examples: >>> roman_prefixes(19) == ['x', 'xi', 'xix'] >>> r_prefix(152) == ['c', 'cl',cli', 'clii'] >>> rprefix(426) ['c',cd',cdx',cdxx',cdxxv',cdxxvi']\n    \"\"\"\n","raw":"Given a positive integer, obtain its roman numeral equivalent as a string in lowercase.\n    Afterwards, return a list of all prefixes of the roman numeral from shortest to longest.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_prefixes(19) == ['x', 'xi', 'xix']\n    >>> roman_prefixes(152) == ['c', 'cl', 'cli', 'clii']\n    >>> roman_prefixes(426) == ['c', 'cd', 'cdx', 'cdxx', 'cdxxv', 'cdxxvi']","reduced":"Given a positive integer, obtain its roman numeral equivalent as a string in lowercase.Afterwards, return a list of all prefixes of the roman num from shortest to longest.Restrictions: 1 <= num <= 1000 Examples: >>> roman_prefixes(19) == ['x', 'xi', 'xix'] >>> r_prefix(152) == ['c', 'cl',cli', 'clii'] >>> rprefix(426) ['c',cd',cdx',cdxx',cdxxv',cdxxvi']"}
{"task_id":"EvoEval\/45","prompt":"from typing import List, Tuple\n\ndef primes_sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting a sum and a product of all the prime numbers in a list.Empty sum should be equal to 0 and empty product should be equal 1.Non-prime numbers should be ignored.>>> primes_sum_product([]) (0, 1) >>> pr_sum_product([1, 2, 3, 4]) (5, 6) >>> pr5 6, 7, 101, 11])124, 38885)\n    \"\"\"\n","raw":"For a given list of integers, return a tuple consisting of a sum and a product of all the prime numbers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1. Non-prime numbers should be ignored.\n    >>> primes_sum_product([])\n    (0, 1)\n    >>> primes_sum_product([1, 2, 3, 4])\n    (5, 6)\n    >>> primes_sum_product([5, 6, 7, 101, 11])\n    (124, 38885)","reduced":"For a given list of integers, return a tuple consisting a sum and a product of all the prime numbers in a list.Empty sum should be equal to 0 and empty product should be equal 1.Non-prime numbers should be ignored.>>> primes_sum_product([]) (0, 1) >>> pr_sum_product([1, 2, 3, 4]) (5, 6) >>> pr5 6, 7, 101, 11])124, 38885)"}
{"task_id":"EvoEval\/46","prompt":"def get_max_even_positive(l: list):\n    \"\"\"\n    This function takes a list of positive and numbers, filters out the negative numbers, and returns the largest even number among the remaining elements.If there are no positive even numbers in the list, the function should return -.For example: get_max_even_positive([-1, 2, -4, 5, 6]) = 6 getmaxevenpositive([1 3 5 7]) -1\n    \"\"\"\n","raw":"This function takes a list of positive and negative numbers, filters \n    out the negative numbers, and returns the largest even number among the \n    remaining elements. If there are no positive even numbers in the list, \n    the function should return -1.\n\n    For example:\n    get_max_even_positive([-1, 2, -4, 5, 6]) = 6\n    get_max_even_positive([1, 3, 5, 7]) = -1","reduced":"This function takes a list of positive and numbers, filters out the negative numbers, and returns the largest even number among the remaining elements.If there are no positive even numbers in the list, the function should return -.For example: get_max_even_positive([-1, 2, -4, 5, 6]) = 6 getmaxevenpositive([1 3 5 7]) -1"}
{"task_id":"EvoEval\/47","prompt":"def count_odd_upper(s, lst):\n    \"\"\"\n    Given a string 's' and a list of strings 'lst', where 's' consists of only uppercase and lowercase English letters and each string in 'lst' consists of digits only, return a list the same length as 'lst'.The function should firstly count the number of uppercase vow in even indices in 's'.Let's denote this count by 'n'.Then, for each string in 'lst', count the number of odd digits in that string.Let's denote this count by 'm'.Each element i of the output list should be: \"In the string, the number of uppercase vow in even indices is 'n', and the number of odd digits is 'm'.\" For example: count_odd_upper('aBCdEf', ['1234567']) should return [\"In the string, the number uase vowels in even indices is 1, and the number odd digits 4.\"] count_odd_upper('dBBE', ['3',\"11111111\"]) should return [\"In the string the number uase vow even indices 0, and odd digits 1.\", \"In string uase vow even indices 0, and the odd digits 8.\"]\n    \"\"\"\n","raw":"Given a string 's' and a list of strings 'lst', where 's' consists of only uppercase and lowercase English letters and each string in 'lst' consists of digits only, return a list the same length as 'lst'.\n\n    The function should firstly count the number of uppercase vowels in even indices in 's'. Let's denote this count by 'n'.\n\n    Then, for each string in 'lst', count the number of odd digits in that string. Let's denote this count by 'm'.\n\n    Each element i of the output list should be:\n    \"In the string, the number of uppercase vowels in even indices is 'n', and the number of odd digits is 'm'.\"\n\n    For example:\n\n    count_odd_upper('aBCdEf', ['1234567'])\n    should return [\"In the string, the number of uppercase vowels in even indices is 1, and the number of odd digits is 4.\"]\n    \n    count_odd_upper('dBBE', ['3',\"11111111\"])\n    should return [\"In the string, the number of uppercase vowels in even indices is 0, and the number of odd digits is 1.\",\n                   \"In the string, the number of uppercase vowels in even indices is 0, and the number of odd digits is 8.\"]","reduced":"Given a string 's' and a list of strings 'lst', where 's' consists of only uppercase and lowercase English letters and each string in 'lst' consists of digits only, return a list the same length as 'lst'.The function should firstly count the number of uppercase vow in even indices in 's'.Let's denote this count by 'n'.Then, for each string in 'lst', count the number of odd digits in that string.Let's denote this count by 'm'.Each element i of the output list should be: \"In the string, the number of uppercase vow in even indices is 'n', and the number of odd digits is 'm'.\" For example: count_odd_upper('aBCdEf', ['1234567']) should return [\"In the string, the number uase vowels in even indices is 1, and the number odd digits 4.\"] count_odd_upper('dBBE', ['3',\"11111111\"]) should return [\"In the string the number uase vow even indices 0, and odd digits 1.\", \"In string uase vow even indices 0, and the odd digits 8.\"]"}
{"task_id":"EvoEval\/48","prompt":"from typing import List\n\ndef prime_prefixed_strings(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Write a function that takes a list of strings and a prefix, it should return a list of strings from the input list which start with the given prefix and their lengths are prime numbers.Examples prime_prefixed_strings([], 'a') == [] prime_prefixed_strings(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array'] primeprestrings(['abcd', 'bcd',cde',array'], 'a') == ['array'] primeprestrings(['apple',avocado',banana',apricot'], 'a') == ['apple',av',ap']\n    \"\"\"\n","raw":"Write a function that takes a list of strings and a prefix, it should return a list of \n    strings from the input list which start with the given prefix and their lengths are prime numbers.\n    \n    Examples\n    prime_prefixed_strings([], 'a') == []\n    prime_prefixed_strings(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']\n    prime_prefixed_strings(['abcd', 'bcd', 'cde', 'array'], 'a') == ['array']\n    prime_prefixed_strings(['apple', 'avocado', 'banana', 'apricot'], 'a') == ['apple', 'avocado', 'apricot']","reduced":"Write a function that takes a list of strings and a prefix, it should return a list of strings from the input list which start with the given prefix and their lengths are prime numbers.Examples prime_prefixed_strings([], 'a') == [] prime_prefixed_strings(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array'] primeprestrings(['abcd', 'bcd',cde',array'], 'a') == ['array'] primeprestrings(['apple',avocado',banana',apricot'], 'a') == ['apple',av',ap']"}
{"task_id":"EvoEval\/49","prompt":"def modp_count(arr, n: int, p: int):\n    \"\"\"\n    Write a function modp_count which takes an array of integers and two integers n and p as inputs.The function should first calculate 2^n modulo p.It then counts the number elements in the array which has a sum of digits > the result of 2^n modulo p.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.>>> modp_count([], 2, 5) == 0 >>> modcount([-1, 11, -11], 4, 5) 1 >>> mod1, 1, 2], 0, 101) 1 >>> mod12 15, 20], 11 3) 2\n    \"\"\"\n","raw":"Write a function modp_count which takes an array of integers and two integers n and p as inputs.\n    The function should first calculate 2^n modulo p. \n    It then counts the number of elements in the array which has a sum of digits > the result of 2^n modulo p.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> modp_count([], 2, 5) == 0\n    >>> modp_count([-1, 11, -11], 4, 5) == 1\n    >>> modp_count([1, 1, 2], 0, 101) == 1\n    >>> modp_count([12, 15, 20], 11, 3) == 2","reduced":"Write a function modp_count which takes an array of integers and two integers n and p as inputs.The function should first calculate 2^n modulo p.It then counts the number elements in the array which has a sum of digits > the result of 2^n modulo p.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.>>> modp_count([], 2, 5) == 0 >>> modcount([-1, 11, -11], 4, 5) 1 >>> mod1, 1, 2], 0, 101) 1 >>> mod12 15, 20], 11 3) 2"}
{"task_id":"EvoEval\/50","prompt":"def get_closest_upper_vowel(word):\n    \"\"\"\n    You are given a word.Your task is to find the closest uppercase vowel that stands between two consonants from the right side of the word (case sensitive).Vowels in the beginning and ending doesn count.Return empty string if you didn find any uppercase vowel met the above condition.Additionally, the vowel must stand at an even index in the string.You may assume that the given string contains English letter only.Example: get_closest_upper_vowel(\"yoUgUrt\") ==> \"U\" get_clos_upper_v(\"FULL\") ==> \"\" getclosupperv(\"quick\") ==> \"\" getclosupperv(\"ab\") ==> \"\"\n    \"\"\"\n","raw":"You are given a word. Your task is to find the closest uppercase vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any uppercase vowel met the above condition. \n\n    Additionally, the vowel must stand at an even index in the string.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_upper_vowel(\"yoUgUrt\") ==> \"U\"\n    get_closest_upper_vowel(\"FULL\") ==> \"\"\n    get_closest_upper_vowel(\"quick\") ==> \"\"\n    get_closest_upper_vowel(\"ab\") ==> \"\"","reduced":"You are given a word.Your task is to find the closest uppercase vowel that stands between two consonants from the right side of the word (case sensitive).Vowels in the beginning and ending doesn count.Return empty string if you didn find any uppercase vowel met the above condition.Additionally, the vowel must stand at an even index in the string.You may assume that the given string contains English letter only.Example: get_closest_upper_vowel(\"yoUgUrt\") ==> \"U\" get_clos_upper_v(\"FULL\") ==> \"\" getclosupperv(\"quick\") ==> \"\" getclosupperv(\"ab\") ==> \"\""}
{"task_id":"EvoEval\/51","prompt":"def modify_and_compare(a, b):\n    \"\"\"\n    Create a function that takes two inputs: 'a' and 'b'.Both inputs can be integers, floats, or strings (containing either characters or numbers).If 'a' or 'b' are strings that contain alphab, convert the strings to lower case if they are upper case, and vice.If they contain no alphab, reverse the string.Then, compare 'a' and 'b'.If they represent real numbers (either as a number or a string), return the larger in its original type.If they are equal, return None.If at least one of them does not represent a real numbers, the function returns 'b'.Note: Real numbers represented as strings can use either '.' or ',' as the decimal point.Examples: modify_and_compare(\"1234\", \"#a@C\") \ufffd\ufffd\ufffd \"#A@c\" modify_(\"AB\", \"ab\") \ufffd \"AB\" modify5,1\", 6) \ufffd 6 modify(1, \"1\") \ufffd None\n    \"\"\"\n","raw":"Create a function that takes two inputs: 'a' and 'b'. \n    Both inputs can be integers, floats, or strings (containing either characters or numbers).\n\n    If 'a' or 'b' are strings that contain alphabets, convert the strings to lower case if they\n    are upper case, and vice versa. If they contain no alphabets, reverse the string.\n\n    Then, compare 'a' and 'b'. If they represent real numbers (either as a number or a string), \n    return the larger in its original type. If they are equal, return None. If at least one of\n    them does not represent a real numbers, the function returns 'b'.\n\n    Note: Real numbers represented as strings can use either '.' or ',' as the decimal point.\n    \n    Examples:\n    modify_and_compare(\"1234\", \"#a@C\") \u279e \"#A@c\"\n    modify_and_compare(\"AB\", \"ab\") \u279e \"AB\"\n    modify_and_compare(\"5,1\", 6) \u279e 6\n    modify_and_compare(1, \"1\") \u279e None","reduced":"Create a function that takes two inputs: 'a' and 'b'.Both inputs can be integers, floats, or strings (containing either characters or numbers).If 'a' or 'b' are strings that contain alphab, convert the strings to lower case if they are upper case, and vice.If they contain no alphab, reverse the string.Then, compare 'a' and 'b'.If they represent real numbers (either as a number or a string), return the larger in its original type.If they are equal, return None.If at least one of them does not represent a real numbers, the function returns 'b'.Note: Real numbers represented as strings can use either '.' or ',' as the decimal point.Examples: modify_and_compare(\"1234\", \"#a@C\") \ufffd\ufffd\ufffd \"#A@c\" modify_(\"AB\", \"ab\") \ufffd \"AB\" modify5,1\", 6) \ufffd 6 modify(1, \"1\") \ufffd None"}
{"task_id":"EvoEval\/52","prompt":"def pluck_and_prod(arr):\n    \"\"\"\n    You are given an array arr that represents a branch of a tree with nonnegative integer nodes.First, you need pluck one of nodes with the smallest even value in the array.If multiple nodes with the smallest even value are found, return the node that has the smallest index.If there are no even values or the given array is empty, return [].Then, from the remaining nodes of tree return the sum magn of the remaining integers multiplied the product the signs of each number, represented 1, -1 or 0.Note return None for an empty array after plucking the node.Your function should return a tuple of two elements: - the first element should be a list representing the plucked node: [smallest_value, its index] - the computed sum the remaining nodes Constraints: * 1 <= nodes.length <= 10000 * 0 nodevalue Example 1: Input: [4,23] Output ([2 1], 7) Explan 2 has the smallest even value, and 1 is its indexThe sum of the magnitude the remaining nodes [4, 3] is 7.The product of signs is 1.Example 2: Input: [1,2,] Output ([2 1], 4) Explan 2 has the smallest even value, and 1 is its index.The sum of the magnitude the remaining nodes [1, 3] is 4.The product of signs is 1.Example 3: Input: [] Output ([], None) Example 4 Input [-5, -2, 3, 0, -4] Output ([-4 4], 0) Explan: -4 has the smallest value, and 4 is its index.The sum of the magnitude the remaining nodes [-5, -2, 3, 0] is 10.The product of signs is 0\n    \"\"\"\n","raw":"You are given an array arr that represents a branch of a tree with non-negative integer nodes.\n    First, you need to pluck one of the nodes with the smallest even value in the array.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n    If there are no even values or the given array is empty, return [].\n\n    Then, from the remaining nodes of the tree, return the sum of magnitudes \n    of the remaining integers multiplied by the product of the signs of each number, \n    represented by 1, -1 or 0. Note: return None for an empty array after plucking the node.\n\n    Your function should return a tuple of two elements:\n    - the first element should be a list representing the plucked node: [smallest_value, its index]\n    - the second element should be the computed sum of the remaining nodes\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\n    Example 1:\n        Input: [4,2,3]\n        Output: ([2, 1], 7)\n        Explanation: 2 has the smallest even value, and 1 is its index. \n                     The sum of the magnitude of the remaining nodes [4, 3] is 7.\n                     The product of signs is 1.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: ([2, 1], 4)\n        Explanation: 2 has the smallest even value, and 1 is its index. \n                     The sum of the magnitude of the remaining nodes [1, 3] is 4.\n                     The product of signs is 1.\n\n    Example 3:\n        Input: []\n        Output: ([], None)\n\n    Example 4:\n        Input: [-5, -2, 3, 0, -4]\n        Output: ([-4, 4], 0)\n        Explanation: -4 has the smallest value, and 4 is \n            its index.\n                     The sum of the magnitude of the remaining nodes [-5, -2, 3, 0] is 10.\n                     The product of signs is 0.","reduced":"You are given an array arr that represents a branch of a tree with nonnegative integer nodes.First, you need pluck one of nodes with the smallest even value in the array.If multiple nodes with the smallest even value are found, return the node that has the smallest index.If there are no even values or the given array is empty, return [].Then, from the remaining nodes of tree return the sum magn of the remaining integers multiplied the product the signs of each number, represented 1, -1 or 0.Note return None for an empty array after plucking the node.Your function should return a tuple of two elements: - the first element should be a list representing the plucked node: [smallest_value, its index] - the computed sum the remaining nodes Constraints: * 1 <= nodes.length <= 10000 * 0 nodevalue Example 1: Input: [4,23] Output ([2 1], 7) Explan 2 has the smallest even value, and 1 is its indexThe sum of the magnitude the remaining nodes [4, 3] is 7.The product of signs is 1.Example 2: Input: [1,2,] Output ([2 1], 4) Explan 2 has the smallest even value, and 1 is its index.The sum of the magnitude the remaining nodes [1, 3] is 4.The product of signs is 1.Example 3: Input: [] Output ([], None) Example 4 Input [-5, -2, 3, 0, -4] Output ([-4 4], 0) Explan: -4 has the smallest value, and 4 is its index.The sum of the magnitude the remaining nodes [-5, -2, 3, 0] is 10.The product of signs is 0"}
{"task_id":"EvoEval\/53","prompt":"def hex_grade_calculator(grades):\n    \"\"\"\n    A professor in computer has a unique way of grading his students.He evaluates the students based their scores and assigns a hexade grade.However, the professor is interested in knowing how many students have received prime hexade grades.He uses the following table to assign grades: GPA | Hexade grade 4.0 F > 3.7 E > 33 D > 30 C > 27 B > 23 A > 20 9 > 17 8 > 13 7 > 10 6 > 07 5 > 00 4 0.0 3 The prime numbers in hex are 2, 3, 5, 7, B (=dec 11), D (=dec 13).So from the above table, the prime grades are 'D', 'B', '7', '5', '3'.You are required write a function that takes a list of GPAs as input and return the count of students who have received prime grades.Example: hex_grade_calculator([4.0, 3, 2.75, 1.9, 3.5]) ==> 3 Explan: Based the GPA the grades would be ['F',B',B',8',D'].Out of these grades, 'D' and 'B' are prime grades.So, the function returns 3.\n    \"\"\"\n","raw":"A professor in computer science has a unique way of grading his students. He evaluates the students based on their scores and assigns a hexadecimal grade. However, the professor is interested in knowing how many students have received prime hexadecimal grades. \n    \n    He uses the following table to assign grades:\n             GPA        |    Hexadecimal grade\n              4.0                     F\n            > 3.7                     E \n            > 3.3                     D \n            > 3.0                     C\n            > 2.7                     B \n            > 2.3                     A\n            > 2.0                     9\n            > 1.7                     8\n            > 1.3                     7\n            > 1.0                     6\n            > 0.7                     5 \n            > 0.0                     4\n              0.0                     3\n              \n    The prime numbers in hexadecimal are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    So from the above table, the prime grades are 'D', 'B', '7', '5', '3'.\n\n    You are required to write a function that takes a list of GPAs as input and return the count of students who have received prime grades. \n\n    Example:\n    hex_grade_calculator([4.0, 3, 2.75, 1.9, 3.5]) ==> 3\n    Explanation: Based on the GPA the grades would be ['F', 'B', 'B', '8', 'D']. Out of these grades, 'D' and 'B' are prime grades. So, the function returns 3.","reduced":"A professor in computer has a unique way of grading his students.He evaluates the students based their scores and assigns a hexade grade.However, the professor is interested in knowing how many students have received prime hexade grades.He uses the following table to assign grades: GPA | Hexade grade 4.0 F > 3.7 E > 33 D > 30 C > 27 B > 23 A > 20 9 > 17 8 > 13 7 > 10 6 > 07 5 > 00 4 0.0 3 The prime numbers in hex are 2, 3, 5, 7, B (=dec 11), D (=dec 13).So from the above table, the prime grades are 'D', 'B', '7', '5', '3'.You are required write a function that takes a list of GPAs as input and return the count of students who have received prime grades.Example: hex_grade_calculator([4.0, 3, 2.75, 1.9, 3.5]) ==> 3 Explan: Based the GPA the grades would be ['F',B',B',8',D'].Out of these grades, 'D' and 'B' are prime grades.So, the function returns 3."}
{"task_id":"EvoEval\/54","prompt":"import math\n\ndef max_sum_of_prime_subarray(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array of prime num.If no prime subarray exists, return 0.A prime number is a number that has exactly two distinct positive div: 1 and itself.You may assume that all numbers in the array are greater 0.Example max_sum_of_prime_subarray([1, 2, 3, 4, 5,]) == 5 # The subarray [2, 3] is a subarray with primes, and it has the maximum sum, so their sum, 5, is returned max_sum__sub([4, 6, 8, 10]) == 0 # There are no pr in the list maxsumsub2 3, 5, 7, 11, 13]) == 41 # All numbers in this list are pr, so their sum, 41, is returned\n    \"\"\"\n","raw":"Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of prime nums. If no prime subarray exists, return 0.\n    A prime number is a number that has exactly two distinct positive divisors: 1 and itself.\n    You may assume that all numbers in the array are greater than 0.\n    \n    Example\n    max_sum_of_prime_subarray([1, 2, 3, 4, 5, 6]) == 5  # The subarray [2, 3] is a subarray with primes, and it has the maximum sum, so their sum, 5, is returned\n    max_sum_of_prime_subarray([4, 6, 8, 10]) == 0 # There are no primes in the list\n    max_sum_of_prime_subarray([2, 3, 5, 7, 11, 13]) == 41 # All numbers in this list are primes, so their sum, 41, is returned","reduced":"Given an array of integers nums, find the maximum sum of any non-empty sub-array of prime num.If no prime subarray exists, return 0.A prime number is a number that has exactly two distinct positive div: 1 and itself.You may assume that all numbers in the array are greater 0.Example max_sum_of_prime_subarray([1, 2, 3, 4, 5,]) == 5 # The subarray [2, 3] is a subarray with primes, and it has the maximum sum, so their sum, 5, is returned max_sum__sub([4, 6, 8, 10]) == 0 # There are no pr in the list maxsumsub2 3, 5, 7, 11, 13]) == 41 # All numbers in this list are pr, so their sum, 41, is returned"}
{"task_id":"EvoEval\/55","prompt":"import hashlib\r\n\r\ndef mini_roman_to_md5(number):\r\n    \"\"\"\n    Given a positive integer 'number', convert it to its roman numeral equivalent as a string in lowercase.Return the md5 hash of the roman num string.If 'number' is zero or negative, return None.Restrictions: 0 <= num <= 1000 Examples: >>> mini_roman_to_md5(19) == 'deecbfa00b6b28500a8a2b0d2cd484f2' >>> minitomd(152) 'e63c5e3bfe23f38e0550b1aa0602d67b' >>> mini426)47863739f1551f4cfb83b7d0101a1d0b'\n    \"\"\"\n","raw":"Given a positive integer 'number', convert it to its roman numeral equivalent as a string in lowercase.\r\n    Return the md5 hash of the roman numeral string. If 'number' is zero or negative, return None.\r\n    Restrictions: 0 <= num <= 1000\r\n\r\n    Examples:\r\n    >>> mini_roman_to_md5(19) == 'deecbfa00b6b28500a8a2b0d2cd484f2'\r\n    >>> mini_roman_to_md5(152) == 'e63c5e3bfe23f38e0550b1aa0602d67b'\r\n    >>> mini_roman_to_md5(426) == '47863739f1551f4cfb83b7d0101a1d0b'","reduced":"Given a positive integer 'number', convert it to its roman numeral equivalent as a string in lowercase.Return the md5 hash of the roman num string.If 'number' is zero or negative, return None.Restrictions: 0 <= num <= 1000 Examples: >>> mini_roman_to_md5(19) == 'deecbfa00b6b28500a8a2b0d2cd484f2' >>> minitomd(152) 'e63c5e3bfe23f38e0550b1aa0602d67b' >>> mini426)47863739f1551f4cfb83b7d0101a1d0b'"}
{"task_id":"EvoEval\/56","prompt":"def product_of_odd_prime_factors(n):\n    \"\"\"\n    Given a positive integer n, return the product of its unique odd prime factors.If all prime factors are even, return 0.Assume n > 1 and is not a prime.For example: product_of_odd_prime_factors(9) == 3 product_ofodd_prime_fact(15) == 15 productodd_prime_fact(20) == 5 product_odd_primefact(32) == 0\n    \"\"\"\n","raw":"Given a positive integer n, return the product of its unique odd prime factors.\n    If all prime factors are even, return 0.\n    Assume n > 1 and is not a prime.\n    For example:\n    product_of_odd_prime_factors(9) == 3\n    product_of_odd_prime_factors(15) == 15\n    product_of_odd_prime_factors(20) == 5\n    product_of_odd_prime_factors(32) == 0","reduced":"Given a positive integer n, return the product of its unique odd prime factors.If all prime factors are even, return 0.Assume n > 1 and is not a prime.For example: product_of_odd_prime_factors(9) == 3 product_ofodd_prime_fact(15) == 15 productodd_prime_fact(20) == 5 product_odd_primefact(32) == 0"}
{"task_id":"EvoEval\/57","prompt":"def palindromic_and_odd_digit_array(arr):\r\n    \"\"\"\n    Given a list of positive integers 'arr', return the minimum number of elements that need to be changed to make the array both palindromic and containing only odd digits.A palindromic array is an array that is read the same backwards and forwards.An array containing only odd digits is an array where every digit in every element is an odd number.In one change, you can change one element to any other positive integer.For example: >>> palindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6]) 4 >>> palandodddigit_array([1, 2, 3, 4, 3, 6, 2]) 4 >>> palandodd([1, 2 3 2 1]) 2\n    \"\"\"\n","raw":"Given a list of positive integers 'arr', return the minimum number of elements\r\n    that need to be changed to make the array both palindromic and containing only odd digits. \r\n    A palindromic array is an array that is read the same backwards and forwards. \r\n    An array containing only odd digits is an array where every digit in every element is an odd number. \r\n    In one change, you can change one element to any other positive integer.\r\n    \r\n    For example:\r\n    >>> palindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6])\r\n    4\r\n    >>> palindromic_and_odd_digit_array([1, 2, 3, 4, 3, 6, 2])\r\n    4\r\n    >>> palindromic_and_odd_digit_array([1, 2, 3, 2, 1])\r\n    2","reduced":"Given a list of positive integers 'arr', return the minimum number of elements that need to be changed to make the array both palindromic and containing only odd digits.A palindromic array is an array that is read the same backwards and forwards.An array containing only odd digits is an array where every digit in every element is an odd number.In one change, you can change one element to any other positive integer.For example: >>> palindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6]) 4 >>> palandodddigit_array([1, 2, 3, 4, 3, 6, 2]) 4 >>> palandodd([1, 2 3 2 1]) 2"}
{"task_id":"EvoEval\/58","prompt":"\"\"\"\n    def max_freq_and_sum_check(lst, a, b): ''' You are given a non-empty list of positive integers and two additional integers a and.The function should first find the greatest integer in the list that has a frequency greater than or the value of the integer itself.Let's call this value 'max_freq'.If there's no such element in the list, 'max_freq' is -1.After finding 'max_freq', the function should check if either a or b is equal to the sum of 'max_fre' and the other integer.If this is true, return a tuple: (max_freq, True) If this is not true, return a tuple: (max_fre, False) If 'max_fre' is -1, return (-1, False) Examples: max_fre_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0) \ufffd\ufffd\ufffd (2, True) maxfre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2) \ufffd (3 True) maxfreand5, 5, 4, 4, 4], 8, 3) \ufffd (-1, False) maxfre_and([5, 5, 4, 4, 4], 10, 5) \ufffd (-1 False '''\n    \"\"\"\n","raw":"def max_freq_and_sum_check(lst, a, b):\n    '''\n    You are given a non-empty list of positive integers and two additional integers a and b.\n    The function should first find the greatest integer in the list that has a frequency greater than or equal \n    to the value of the integer itself. Let's call this value 'max_freq'.\n    If there's no such element in the list, 'max_freq' is -1.\n    After finding 'max_freq', the function should check if either a or b is equal to the sum of 'max_freq' and the other integer.\n    If this is true, return a tuple: (max_freq, True)\n    If this is not true, return a tuple: (max_freq, False)\n    If 'max_freq' is -1, return (-1, False)\n\n    Examples:\n        max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0) \u279e (2, True)\n        max_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2) \u279e (3, True)\n        max_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3) \u279e (-1, False)\n        max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5) \u279e (-1, False)\n    '''","reduced":"def max_freq_and_sum_check(lst, a, b): ''' You are given a non-empty list of positive integers and two additional integers a and.The function should first find the greatest integer in the list that has a frequency greater than or the value of the integer itself.Let's call this value 'max_freq'.If there's no such element in the list, 'max_freq' is -1.After finding 'max_freq', the function should check if either a or b is equal to the sum of 'max_fre' and the other integer.If this is true, return a tuple: (max_freq, True) If this is not true, return a tuple: (max_fre, False) If 'max_fre' is -1, return (-1, False) Examples: max_fre_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0) \ufffd\ufffd\ufffd (2, True) maxfre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2) \ufffd (3 True) maxfreand5, 5, 4, 4, 4], 8, 3) \ufffd (-1, False) maxfre_and([5, 5, 4, 4, 4], 10, 5) \ufffd (-1 False '''"}
{"task_id":"EvoEval\/59","prompt":"def odd_count_base_change(lst, base):\n    \"\"\"\n    Given a list of strings and a base number, where each string consists only digits, return a list where each element k of the output should be \"the number of odd elements in the string i of the input.\" where all the i's are replaced by the number of odd digits in the k'th string of the input after changing the base of each digit to the given base.>>> odd_count_base_change(['1234567'], 2) [\"the number of odd elements 12n the str12ng 12 of the 12nput.\"] >>> odd_count_basechange(3',\"11111111\"], 3 [\"the number elements 1n str1ng 1 1nput.\", \"the number odd 8n str8ng 8.\"]\n    \"\"\"\n","raw":"Given a list of strings and a base number, \n    where each string consists of only digits, \n    return a list where each element k of the output should be \n    \"the number of odd elements in the string i of the input.\" \n    where all the i's are replaced by the number of odd digits in the k'th string \n    of the input after changing the base of each digit to the given base.\n\n    >>> odd_count_base_change(['1234567'], 2)\n    [\"the number of odd elements 12n the str12ng 12 of the 12nput.\"]\n    >>> odd_count_base_change(['3',\"11111111\"], 3)\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]","reduced":"Given a list of strings and a base number, where each string consists only digits, return a list where each element k of the output should be \"the number of odd elements in the string i of the input.\" where all the i's are replaced by the number of odd digits in the k'th string of the input after changing the base of each digit to the given base.>>> odd_count_base_change(['1234567'], 2) [\"the number of odd elements 12n the str12ng 12 of the 12nput.\"] >>> odd_count_basechange(3',\"11111111\"], 3 [\"the number elements 1n str1ng 1 1nput.\", \"the number odd 8n str8ng 8.\"]"}
{"task_id":"EvoEval\/60","prompt":"def smallest_even_triple(arr, n):\n    \"\"\"\n    Given an array representing a branch of a tree with nonnegative integer nodes and a positive n, first create an integer array a of length n where for each i (1 \u2264 i \u2264), the value a[ = i * i - i + 1.Then, find the smallest triple (a[i], a[j], ak]) of a where i < j < k, and ai] + aj + is a multiple 3.The smallest triple should be the one with smallest value of a[i].If multiple triples with the smallest value are found, return the triple that has smallest index for i.Finally, add the a[i of the smallest triple to array.If the updated array has a node with an even value, return the node with the smallest even and its index in a list, [ smallest_value, its index ].If there are no even values or the array is empty return [].Example : Input: arr = [423], n = 5 Output [2 1] Explan: a = [1 3, 7, 13, 21] The only valid triple is (1, 7,).1 is the smallest a[i in the triple and is added to arr.The updated arr = [4, 2 3 1].The smallest even value in arr is 2 and it is at index 1.Constr: * 1 <= arr.length <= 10000 * 0 <= arr[i] <= 10000 1 <= n <= 10000\n    \"\"\"\n","raw":"Given an array representing a branch of a tree with non-negative integer nodes and a positive integer n, \n    first create an integer array a of length n where for each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Then, find the smallest triple (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k]\n    is a multiple of 3. The smallest triple should be the one with the smallest value of a[i].\n    If multiple triples with the same smallest value are found, return the triple that has the smallest index for i.\n\n    Finally, add the a[i] of the smallest triple to the array. If the updated array has a node with an even value, \n    return the node with the smallest even value and its index in a list, [ smallest_value, its index ].\n    If there are no even values or the array is empty, return [].\n\n    Example :\n        Input: arr = [4,2,3], n = 5\n        Output: [2, 1]\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13). 1 is the smallest a[i] in the triple and is added to arr. \n        The updated arr = [4, 2, 3, 1]. The smallest even value in arr is 2 and it is at index 1.\n\n    Constraints:\n        * 1 <= arr.length <= 10000\n        * 0 <= arr[i] <= 10000\n        * 1 <= n <= 10000","reduced":"Given an array representing a branch of a tree with nonnegative integer nodes and a positive n, first create an integer array a of length n where for each i (1 \u2264 i \u2264), the value a[ = i * i - i + 1.Then, find the smallest triple (a[i], a[j], ak]) of a where i < j < k, and ai] + aj + is a multiple 3.The smallest triple should be the one with smallest value of a[i].If multiple triples with the smallest value are found, return the triple that has smallest index for i.Finally, add the a[i of the smallest triple to array.If the updated array has a node with an even value, return the node with the smallest even and its index in a list, [ smallest_value, its index ].If there are no even values or the array is empty return [].Example : Input: arr = [423], n = 5 Output [2 1] Explan: a = [1 3, 7, 13, 21] The only valid triple is (1, 7,).1 is the smallest a[i in the triple and is added to arr.The updated arr = [4, 2 3 1].The smallest even value in arr is 2 and it is at index 1.Constr: * 1 <= arr.length <= 10000 * 0 <= arr[i] <= 10000 1 <= n <= 10000"}
{"task_id":"EvoEval\/61","prompt":"\"\"\"\n    from typing import List, Optional, Tuple def longest_planet_chain(planet1: str, planet2 str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]: ''' There are eight planets in our solar: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.A list of planet chains, represented as tu, is given where each chain consists of a sequence of planet names.Write a function that takes a starting planet name as string planet1 and ending planet name as string planet2, and list of chains.The function should return the longest chain that starts with planet1 and ends with planet2.If there are multiple chains of the same length that starts with planet1 and ends with planet2, return the first one.If there is no chain that starts with planet1 and ends with planet2, or if planet1 or planet2 are not correct planet names, return None.Examples longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"J\", \"Sat\"), (\"Earth\", \"Ven\", \"Merc\", \"Mars\", \"J\", \"Sat\")]) => (\"Earth\", \"Venus\", \"Merc\", \"Mars\", \"J\", \"Sat\") longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"Earth\",Ven\",Mars\")]) => (\"Earth\",VenMars\") longestplanet(\"Earth\", \"Pl\", [(\"EarthMars\", \"Jupiter\")]) None '''\n    \"\"\"\n","raw":"from typing import List, Optional, Tuple\n\ndef longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n\n    A list of planet chains, represented as tuples, is given where each chain consists of \n    a sequence of planet names.\n\n    Write a function that takes a starting planet name as string planet1 and ending planet name \n    as string planet2, and list of chains. The function should return the longest chain that starts \n    with planet1 and ends with planet2. \n\n    If there are multiple chains of the same length that starts with planet1 and ends with planet2,\n    return the first one. \n\n    If there is no chain that starts with planet1 and ends with planet2, or if planet1 or planet2 \n    are not correct planet names, return None.\n\n    Examples\n    longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\")]) => (\"Earth\", \"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\")\n    longest_planet_chain(\"Earth\", \"Mars\", [(\"Earth\", \"Mars\"), (\"Earth\", \"Venus\", \"Mercury\", \"Mars\")]) => (\"Earth\", \"Venus\", \"Mercury\", \"Mars\")\n    longest_planet_chain(\"Earth\", \"Pluto\", [(\"Earth\", \"Mars\", \"Jupiter\")]) => None\n    '''","reduced":"from typing import List, Optional, Tuple def longest_planet_chain(planet1: str, planet2 str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]: ''' There are eight planets in our solar: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uran, Neptune.A list of planet chains, represented as tu, is given where each chain consists of a sequence of planet names.Write a function that takes a starting planet name as string planet1 and ending planet name as string planet2, and list of chains.The function should return the longest chain that starts with planet1 and ends with planet2.If there are multiple chains of the same length that starts with planet1 and ends with planet2, return the first one.If there is no chain that starts with planet1 and ends with planet2, or if planet1 or planet2 are not correct planet names, return None.Examples longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"J\", \"Sat\"), (\"Earth\", \"Ven\", \"Merc\", \"Mars\", \"J\", \"Sat\")]) => (\"Earth\", \"Venus\", \"Merc\", \"Mars\", \"J\", \"Sat\") longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"Earth\",Ven\",Mars\")]) => (\"Earth\",VenMars\") longestplanet(\"Earth\", \"Pl\", [(\"EarthMars\", \"Jupiter\")]) None '''"}
{"task_id":"EvoEval\/62","prompt":"def strange_word_sort(text):\n    \"\"\"\n    Given a string text where words are separated by one or more spaces, create a new string where the words are sorted in a strange order.Strange sorting, is when you start with the minimum value, then maximum of the remaining words, then minimum and so on.The comparison of words is case-ins.If there are more than 2 consecutive spaces between words, replace them with -.If there is one space, replace it with underscore.Examples: strange_word_sort(\"apple Banana APPLE BANANA\") == 'apple_BANANA_AP_Ban' strangewordsort(\" cat dog bird \") == '__bird__dog-cat__' strangeHouse car\")car-House' strange\") == \"\"\n    \"\"\"\n","raw":"Given a string text where words are separated by one or more spaces,\n    create a new string where the words are sorted in a strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining words, then minimum and so on.\n    The comparison of words is case-insensitive. \n    If there are more than 2 consecutive spaces between words, replace them with -.\n    If there is one space, replace it with underscore.\n\n    Examples:\n    strange_word_sort(\"apple Banana APPLE BANANA\") == 'apple_BANANA_APPLE_Banana'\n    strange_word_sort(\"  cat  dog   bird  \") == '__bird__dog-cat__'\n    strange_word_sort(\"House   car\") == 'car-House'\n    strange_word_sort(\"\") == \"\"","reduced":"Given a string text where words are separated by one or more spaces, create a new string where the words are sorted in a strange order.Strange sorting, is when you start with the minimum value, then maximum of the remaining words, then minimum and so on.The comparison of words is case-ins.If there are more than 2 consecutive spaces between words, replace them with -.If there is one space, replace it with underscore.Examples: strange_word_sort(\"apple Banana APPLE BANANA\") == 'apple_BANANA_AP_Ban' strangewordsort(\" cat dog bird \") == '__bird__dog-cat__' strangeHouse car\")car-House' strange\") == \"\""}
{"task_id":"EvoEval\/63","prompt":"\"\"\"\n    def sort_planets(planet1: str, planet str, order: str) -> str: ''' There are eight planets in our solar, each represented by a number from 'zero' to 'seven' where 'zero corresponds to Mercury (the closest to the Sun), 'one corresponds Venus, and so on, up to 'seven' which corresponds to Neptune (the fart from the Sun).Write a function that takes two planet names as strings planet1 and, and an order as a string.The order string is a space-del string of numerals from 'zero' to 'seven' representing the planets.The function should return a string containing all planets (represented by numerals) whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun according the given order.The function should return 'Invalid' if planet1 or planet2 are not correct planet names or the order string contains numbers outside the range 'zero' to 'seven' or contains duplicates.Examples sort_planets(\"Jupiter\", \"Ne\", \"zero one two three four five six seven\") ==> \"five six\" sortplan(\"Earth\",Merc\",seven six five four three two one zero\") == \"one\" sortMerc\",Uran\",zero one two three four five six seven\")one two three four five\" '''\n    \"\"\"\n","raw":"def sort_planets(planet1: str, planet2: str, order: str) -> str:\n    '''\n    There are eight planets in our solar system, each represented by a number from 'zero' to 'seven' \n    where 'zero' corresponds to Mercury (the closest to the Sun), 'one' corresponds to Venus,\n    and so on, up to 'seven' which corresponds to Neptune (the farthest from the Sun).\n    Write a function that takes two planet names as strings planet1 and planet2, and an order as a string.\n    The order string is a space-delimited string of numerals from 'zero' to 'seven' representing the planets. \n\n    The function should return a string containing all planets (represented by numerals) whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun according \n    to the given order. \n\n    The function should return 'Invalid' if planet1 or planet2 are not correct planet names or the order string \n    contains numbers outside the range 'zero' to 'seven' or contains duplicates.\n\n    Examples\n    sort_planets(\"Jupiter\", \"Neptune\", \"zero one two three four five six seven\") ==> \"five six\"\n    sort_planets(\"Earth\", \"Mercury\", \"seven six five four three two one zero\") ==> \"one\"\n    sort_planets(\"Mercury\", \"Uranus\", \"zero one two three four five six seven\") ==> \"one two three four five\"\n    '''","reduced":"def sort_planets(planet1: str, planet str, order: str) -> str: ''' There are eight planets in our solar, each represented by a number from 'zero' to 'seven' where 'zero corresponds to Mercury (the closest to the Sun), 'one corresponds Venus, and so on, up to 'seven' which corresponds to Neptune (the fart from the Sun).Write a function that takes two planet names as strings planet1 and, and an order as a string.The order string is a space-del string of numerals from 'zero' to 'seven' representing the planets.The function should return a string containing all planets (represented by numerals) whose orbits are located between the orbit of planet1 and the orbit planet2, sorted by the proximity to the sun according the given order.The function should return 'Invalid' if planet1 or planet2 are not correct planet names or the order string contains numbers outside the range 'zero' to 'seven' or contains duplicates.Examples sort_planets(\"Jupiter\", \"Ne\", \"zero one two three four five six seven\") ==> \"five six\" sortplan(\"Earth\",Merc\",seven six five four three two one zero\") == \"one\" sortMerc\",Uran\",zero one two three four five six seven\")one two three four five\" '''"}
{"task_id":"EvoEval\/64","prompt":"def modp_prime_numbers(n: int, p: int):\n    \"\"\"\n    Implement a function that takes two non-negative integers n and p, first calculate 2^n modulo p, then return an array of the first calculated modulo result integers that are prime numbers and less than the calculated modulo result.If no prime numbers are found within the range, return an empty array.For example: modp_prime_numbers(5, 11) => [2,3,5,7] modp_prime_n(3, 5) => [2] modprimen(0, 101) => [] modpprimen(3, 11) [2,3,5,7] mod(100, 101) []\n    \"\"\"\n","raw":"Implement a function that takes two non-negative integers n and p, first calculate 2^n modulo p, \n    then return an array of the first calculated modulo result integers that are prime numbers and less than the calculated modulo result.\n    If no prime numbers are found within the range, return an empty array.\n    For example:\n    modp_prime_numbers(5, 11) => [2,3,5,7]\n    modp_prime_numbers(3, 5) => [2]\n    modp_prime_numbers(0, 101) => []\n    modp_prime_numbers(3, 11) => [2,3,5,7]\n    modp_prime_numbers(100, 101) => []","reduced":"Implement a function that takes two non-negative integers n and p, first calculate 2^n modulo p, then return an array of the first calculated modulo result integers that are prime numbers and less than the calculated modulo result.If no prime numbers are found within the range, return an empty array.For example: modp_prime_numbers(5, 11) => [2,3,5,7] modp_prime_n(3, 5) => [2] modprimen(0, 101) => [] modpprimen(3, 11) [2,3,5,7] mod(100, 101) []"}
{"task_id":"EvoEval\/65","prompt":"def modp_largest_divisor(n: int, p: int) -> int:\n    \"\"\"\n    Return the largest number smaller than 'p' which divides (2^n modulo p) evenly.If no such number exists, return 1.>>> modp_largest_divisor(3, 5) 3 >>> modp_largest_divor(1101, 101) 2 >>> modlargest_div(0, 101) 1 >>> modlargest_div(3, 11) 8\n    \"\"\"\n","raw":"Return the largest number smaller than 'p' which divides (2^n modulo p) evenly. \n    If no such number exists, return 1.\n    \n    >>> modp_largest_divisor(3, 5)\n    3\n    >>> modp_largest_divisor(1101, 101)\n    2\n    >>> modp_largest_divisor(0, 101)\n    1\n    >>> modp_largest_divisor(3, 11)\n    8","reduced":"Return the largest number smaller than 'p' which divides (2^n modulo p) evenly.If no such number exists, return 1.>>> modp_largest_divisor(3, 5) 3 >>> modp_largest_divor(1101, 101) 2 >>> modlargest_div(0, 101) 1 >>> modlargest_div(3, 11) 8"}
{"task_id":"EvoEval\/66","prompt":"def find_max_triple_sum(x, y, n):\n    \"\"\"\n    This function takes two positive numbers x and, and a positive integer n.It first identifies the largest even integer in the range [x, y] inclusive, if there's no such number, it should return -.Then the function should create an integer array a of length n.For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.The function then finds and returns the sum the largest triple (a[i], aj], ak]) in array a where i < j < k, and a[i] + aj] +] is a multiple 3.If no such triple exists, the function returns -.If the largest even integer in the range [x, y] inclusive is found, it should be added to the sum of the largest triple.Examples: find_max_triple_sum(12, 15, 5) = 14 + 21 = 35 findmaxtri13 17 6 16 28 67\n    \"\"\"\n","raw":"This function takes two positive numbers x and y, and a positive integer n. It first identifies the\n    largest even integer in the range [x, y] inclusive, if there's no such number, it should return -1. \n\n    Then the function should create an integer array a of length n. For each i (1 \u2264 i \u2264 n), \n    the value of a[i] = i * i - i + 1. \n\n    The function then finds and returns the sum of the largest triple (a[i], a[j], a[k]) in array a \n    where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3. \n\n    If no such triple exists, the function returns -1. If the largest even integer in the range [x, y] \n    inclusive is found, it should be added to the sum of the largest triple. \n\n    Examples:\n    find_max_triple_sum(12, 15, 5) = 14 + 21 = 35\n    find_max_triple_sum(13, 17, 6) = 16 + 28 = 67","reduced":"This function takes two positive numbers x and, and a positive integer n.It first identifies the largest even integer in the range [x, y] inclusive, if there's no such number, it should return -.Then the function should create an integer array a of length n.For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.The function then finds and returns the sum the largest triple (a[i], aj], ak]) in array a where i < j < k, and a[i] + aj] +] is a multiple 3.If no such triple exists, the function returns -.If the largest even integer in the range [x, y] inclusive is found, it should be added to the sum of the largest triple.Examples: find_max_triple_sum(12, 15, 5) = 14 + 21 = 35 findmaxtri13 17 6 16 28 67"}
{"task_id":"EvoEval\/67","prompt":"from typing import List\n\ndef max_close_element_difference(numbers: List[float], threshold: float) -> float:\n    \"\"\"\n    Given a list of numbers and a threshold, find two elements that are closer to each other than the threshold and return their difference.If multiple pairs meet the criteria, return the maximum difference.If no such pairs exist, return 0.>>> max_close_element_difference([1.0, 2.0, 3.], 0.5) 0 >>> maxcloseelementdiff([1.0 28, 30, 40, 5.0, 2.0], 0.3) 0.2 >>> maxclose5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5) 4\n    \"\"\"\n","raw":"Given a list of numbers and a threshold, find two elements that are closer to each other than the threshold and return their difference. If multiple pairs meet the criteria, return the maximum difference. If no such pairs exist, return 0.\n    >>> max_close_element_difference([1.0, 2.0, 3.0], 0.5)\n    0\n    >>> max_close_element_difference([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    0.2\n    >>> max_close_element_difference([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n    4","reduced":"Given a list of numbers and a threshold, find two elements that are closer to each other than the threshold and return their difference.If multiple pairs meet the criteria, return the maximum difference.If no such pairs exist, return 0.>>> max_close_element_difference([1.0, 2.0, 3.], 0.5) 0 >>> maxcloseelementdiff([1.0 28, 30, 40, 5.0, 2.0], 0.3) 0.2 >>> maxclose5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5) 4"}
{"task_id":"EvoEval\/68","prompt":"def minOddDigitsProductSubArray(nums):\n    \"\"\"\n    Given an array positive integers nums, find the minimum product of odd digits of any non-empty sub-array of num.For each integer in the sub-array, you need calculate the product of its odd digits.If all digits are even in an integer, consider its product as 0.You need to return the minimum sum of these products.Example: minOddDigitsProductSubArray([2 3, 4, 1, 2, 4]) == 0 minO235 912 43]) 3 (as 235 -> 15, 912 9, 43 -> 3) Note: A sub-array is a contiguous part an.And you should calculate the products for each integer in the sub-array independently.\n    \"\"\"\n","raw":"Given an array of positive integers nums, find the minimum product of odd digits of any \n    non-empty sub-array of nums. For each integer in the sub-array, you need to calculate \n    the product of its odd digits. If all digits are even in an integer, consider its product as 0.\n    You need to return the minimum sum of these products.\n    \n    Example:\n    minOddDigitsProductSubArray([2, 3, 4, 1, 2, 4]) == 0\n    minOddDigitsProductSubArray([235, 912, 43]) == 3 (as 235 -> 15, 912 -> 9, 43 -> 3)\n\n    Note: \n    A sub-array is a contiguous part of an array. And you should calculate the products for \n    each integer in the sub-array independently.","reduced":"Given an array positive integers nums, find the minimum product of odd digits of any non-empty sub-array of num.For each integer in the sub-array, you need calculate the product of its odd digits.If all digits are even in an integer, consider its product as 0.You need to return the minimum sum of these products.Example: minOddDigitsProductSubArray([2 3, 4, 1, 2, 4]) == 0 minO235 912 43]) 3 (as 235 -> 15, 912 9, 43 -> 3) Note: A sub-array is a contiguous part an.And you should calculate the products for each integer in the sub-array independently."}
{"task_id":"EvoEval\/69","prompt":"def sorted_happy_strings(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter, delet the strings that are not happy or have odd lengths from it, and returns the resulted list in a sorted order.A string is considered happy if its length is at 3 and every 3 consecutive letters are distinct.For example: \"abcd\" and \"adb\" are happy strings, but \"a\",aa\", \"aabb\", andxyy\" are not.The list is always a list of strings and never an array of numbers, and it may contain dupl.The function should return a list of strings in sorted by ascending length and alphabetically for words with same length.For example: assert sorted_happy_strings([\"abc\", \"a\",aaabcd\", \"abcd\"]) => [\"abcd\"] assert[\"abcd\",aaa\",abc\",abccba\",cd\"]abcd\"]\n    \"\"\"\n","raw":"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that are not happy or have odd lengths from it,\n    and returns the resulted list in a sorted order.\n    \n    A string is considered happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example: \"abcd\" and \"adb\" are happy strings, but \"a\", \"aa\", \"aabb\", and \"xyy\" are not.\n\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n\n    The function should return a list of strings in sorted order by ascending length and alphabetically for words with same length.\n    \n    For example:\n    assert sorted_happy_strings([\"abc\", \"a\", \"aaabcd\", \"abcd\"]) => [\"abcd\"]\n    assert sorted_happy_strings([\"abcd\", \"aaa\", \"abc\", \"abccba\", \"cd\"]) => [\"abcd\"]","reduced":"Write a function that accepts a list of strings as a parameter, delet the strings that are not happy or have odd lengths from it, and returns the resulted list in a sorted order.A string is considered happy if its length is at 3 and every 3 consecutive letters are distinct.For example: \"abcd\" and \"adb\" are happy strings, but \"a\",aa\", \"aabb\", andxyy\" are not.The list is always a list of strings and never an array of numbers, and it may contain dupl.The function should return a list of strings in sorted by ascending length and alphabetically for words with same length.For example: assert sorted_happy_strings([\"abc\", \"a\",aaabcd\", \"abcd\"]) => [\"abcd\"] assert[\"abcd\",aaa\",abc\",abccba\",cd\"]abcd\"]"}
{"task_id":"EvoEval\/70","prompt":"from typing import List, Tuple\nimport math\n\n\ndef closest_special_factorial(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function will receive a list integers as input and should return a tuple of two integers that have closest special factorials.The special factorial is defined: special_fact(n) = n! * (n-)! *...* 1! where n > 0 The function should return the two numbers whose special factorials are the closest to each.The result should be in ascending.For example: >>> closest_special_factorial([4 5,]) (4,) The special fact of 4 is 288, of is 34560, and of 24883200.The closest pair is (4, 5).\n    \"\"\"\n","raw":"This function will receive a list of integers as input and should return a tuple of two integers \n    that have the closest special factorials. The special factorial is defined as:\n    special_factorial(n) = n! * (n-1)! * ... * 1! where n > 0\n\n    The function should return the two numbers whose special factorials are the closest to each other. \n    The result should be in ascending order.\n\n    For example:\n    >>> closest_special_factorial([4, 5, 6])\n    (4, 5)\n\n    The special factorial of 4 is 288, of 5 is 34560, and of 6 is 24883200. The closest pair is (4, 5).","reduced":"This function will receive a list integers as input and should return a tuple of two integers that have closest special factorials.The special factorial is defined: special_fact(n) = n! * (n-)! *...* 1! where n > 0 The function should return the two numbers whose special factorials are the closest to each.The result should be in ascending.For example: >>> closest_special_factorial([4 5,]) (4,) The special fact of 4 is 288, of is 34560, and of 24883200.The closest pair is (4, 5)."}
{"task_id":"EvoEval\/71","prompt":"import math\n\ndef special_brazilian_balloon(n, w):\n    \"\"\"\n    A Brazilian balloon is special.The maximum weight it can carry is given by Brazilian factorial.Brazilian factorial is defined: brazil_fact(n) = n! * (n-)! *2 *...* 1! where n > 0 The balloon will fly if the sum the weights of the load (given as a list) is less or the maximum possible weight (brazil_factorial(n)), and the load is balanced (it is a palrom list).The function receives two inputs: an integer n which is the maximum possible load before Brazilian factorial is applied and a list w which represents weights load.It should return True if the balloon will fly and False otherwiseExample: special_brazilballoon(4, [1 2, 1]) \ufffd\ufffd\ufffd True # After Brazilian factorial, maximum possible weight = 288.The sum weights is 4 which is less the maximum possible weight, and the weights are balanced.special_brazilballoon(3, [1, 2,]) \ufffd\ufffd\ufffd False # After Brazilian factorial, maximum possible weight = 12.The sum weights is 6 which is less the maximum possible weight, but the weights are not balanced.special_brazilballoon(3, [3, 2, 3]) \ufffd\ufffd\ufffd True # After Brazilian factorial, maximum possible weight = 12.The sum weights is 8 which is less the maximum possible weight, and the weights are balanced.\n    \"\"\"\n","raw":"A Brazilian balloon is special. The maximum weight it can carry is given by the Brazilian factorial.\n    Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The balloon will fly if the sum of the weights of the load (given as a list) is less than or equal the maximum possible weight (brazilian_factorial(n)),\n    and the load is balanced (it is a palindromic list).\n\n    The function receives two inputs: an integer n which is the maximum possible load before Brazilian factorial is applied and a list w which represents the weights of the load.\n    It should return True if the balloon will fly and False otherwise.\n\n    Example:\n    special_brazilian_balloon(4, [1, 2, 1]) \u279e True\n    # After Brazilian factorial, maximum possible weight = 288. The sum of weights is 4 which is less than the maximum possible weight, and the weights are balanced.\n\n    special_brazilian_balloon(3, [1, 2, 3]) \u279e False\n    # After Brazilian factorial, maximum possible weight = 12. The sum of weights is 6 which is less than the maximum possible weight, but the weights are not balanced.\n\n    special_brazilian_balloon(3, [3, 2, 3]) \u279e True\n    # After Brazilian factorial, maximum possible weight = 12. The sum of weights is 8 which is less than the maximum possible weight, and the weights are balanced.","reduced":"A Brazilian balloon is special.The maximum weight it can carry is given by Brazilian factorial.Brazilian factorial is defined: brazil_fact(n) = n! * (n-)! *2 *...* 1! where n > 0 The balloon will fly if the sum the weights of the load (given as a list) is less or the maximum possible weight (brazil_factorial(n)), and the load is balanced (it is a palrom list).The function receives two inputs: an integer n which is the maximum possible load before Brazilian factorial is applied and a list w which represents weights load.It should return True if the balloon will fly and False otherwiseExample: special_brazilballoon(4, [1 2, 1]) \ufffd\ufffd\ufffd True # After Brazilian factorial, maximum possible weight = 288.The sum weights is 4 which is less the maximum possible weight, and the weights are balanced.special_brazilballoon(3, [1, 2,]) \ufffd\ufffd\ufffd False # After Brazilian factorial, maximum possible weight = 12.The sum weights is 6 which is less the maximum possible weight, but the weights are not balanced.special_brazilballoon(3, [3, 2, 3]) \ufffd\ufffd\ufffd True # After Brazilian factorial, maximum possible weight = 12.The sum weights is 8 which is less the maximum possible weight, and the weights are balanced."}
{"task_id":"EvoEval\/72","prompt":"from typing import List\nfrom math import factorial\n\ndef special_close_factorials(numbers: List[int], threshold: int) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two special factorials closer to each than given threshold.The special factorial (Brazilian fact) is defined as n! * (n-)! * (n-2 *...* 1! where n > 0.For example: >>> special_close_factorials([2, 3], 10) False >>> specialfact([1 2, 3, 4], 100) True\n    \"\"\"\n","raw":"Check if in given list of numbers, are any two special factorials closer to each other than \n    given threshold. The special factorial (Brazilian factorial) is defined as n! * (n-1)! * (n-2)! * ... * 1! \n    where n > 0.\n\n    For example:\n    >>> special_close_factorials([2, 3], 10)\n    False\n    >>> special_close_factorials([1, 2, 3, 4], 100)\n    True","reduced":"Check if in given list of numbers, are any two special factorials closer to each than given threshold.The special factorial (Brazilian fact) is defined as n! * (n-)! * (n-2 *...* 1! where n > 0.For example: >>> special_close_factorials([2, 3], 10) False >>> specialfact([1 2, 3, 4], 100) True"}
{"task_id":"EvoEval\/73","prompt":"from typing import List\nfrom fractions import Fraction\n\ndef filter_and_simplify(fractions: List[str], n: str) -> List[bool]:\n    \"\"\"\n    Filter an input list of fractions only for ones that, when multiplied by n, simplify to a whole number.Both, fractions in the list and n, are string representation of a fraction, and have the following format, <numerator>\/<denomin> where both numerator and denomin are positive whole numbers.You can assume that the fractions, and n are valid fractions, and do not have zero as denominator.filter_and_simplify([\"1\/5\", \"1\/6\", \"7\/10\"], \"5\/1\") = [True, False, False] filter_and([\"1\/3\",21\",32\"],21\") [False True True\n    \"\"\"\n","raw":"Filter an input list of fractions only for ones that, when multiplied by n, simplify to a whole number. Both, fractions in the list and n, are string representation of a fraction, and have the following format, <numerator>\/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that the fractions, and n are valid fractions, and do not have zero as denominator.\n\n    filter_and_simplify([\"1\/5\", \"1\/6\", \"7\/10\"], \"5\/1\") = [True, False, False]\n    filter_and_simplify([\"1\/3\", \"2\/1\", \"3\/2\"], \"2\/1\") = [False, True, True]","reduced":"Filter an input list of fractions only for ones that, when multiplied by n, simplify to a whole number.Both, fractions in the list and n, are string representation of a fraction, and have the following format, <numerator>\/<denomin> where both numerator and denomin are positive whole numbers.You can assume that the fractions, and n are valid fractions, and do not have zero as denominator.filter_and_simplify([\"1\/5\", \"1\/6\", \"7\/10\"], \"5\/1\") = [True, False, False] filter_and([\"1\/3\",21\",32\"],21\") [False True True"}
{"task_id":"EvoEval\/74","prompt":"def sum_exchange(lst1, lst2, x, y, z):\r\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible perform an exchange of elements between them to make lst1 a list of only even numbers.There is no limit on the number exchanged elements between lst1 and l2.If it is possible to exchange elements between the lst1 and l2 to make all the elements of l1 to be even, the answer is \"YES\".Otherwise, the answer is \"NO\".After that, the function also takes in three more integers, x, and z.It will check if one of these integers is equal to the sum of the other two.If this is true, append \"SUM\" to the front of the answer string.Otherwise, append \"NO_SUM\" to the front of the answer string.For example: sum_exchange([1, 2, 3, 4], [1 2 3,], 5, 2, 2) => \"NO_SUM YES\" sumex([1 5 3 4], 4 2, 2 \"SUM NO\" It is assumed that the input lists will be non-empty.\n    \"\"\"\n","raw":"In this problem, you will implement a function that takes two lists of numbers,\r\n    and determines whether it is possible to perform an exchange of elements\r\n    between them to make lst1 a list of only even numbers.\r\n    There is no limit on the number of exchanged elements between lst1 and lst2.\r\n    If it is possible to exchange elements between the lst1 and lst2 to make\r\n    all the elements of lst1 to be even, the answer is \"YES\".\r\n    Otherwise, the answer is \"NO\".\r\n    After that, the function also takes in three more integers, x, y and z.\r\n    It will check if one of these integers is equal to the sum of the other two.\r\n    If this is true, append \"SUM\" to the front of the answer string.\r\n    Otherwise, append \"NO_SUM\" to the front of the answer string.\r\n    For example:\r\n    sum_exchange([1, 2, 3, 4], [1, 2, 3, 4], 5, 2, 2) => \"NO_SUM YES\"\r\n    sum_exchange([1, 2, 3, 4], [1, 5, 3, 4], 4, 2, 2) => \"SUM NO\"\r\n    It is assumed that the input lists will be non-empty.","reduced":"In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible perform an exchange of elements between them to make lst1 a list of only even numbers.There is no limit on the number exchanged elements between lst1 and l2.If it is possible to exchange elements between the lst1 and l2 to make all the elements of l1 to be even, the answer is \"YES\".Otherwise, the answer is \"NO\".After that, the function also takes in three more integers, x, and z.It will check if one of these integers is equal to the sum of the other two.If this is true, append \"SUM\" to the front of the answer string.Otherwise, append \"NO_SUM\" to the front of the answer string.For example: sum_exchange([1, 2, 3, 4], [1 2 3,], 5, 2, 2) => \"NO_SUM YES\" sumex([1 5 3 4], 4 2, 2 \"SUM NO\" It is assumed that the input lists will be non-empty."}
{"task_id":"EvoEval\/75","prompt":"\"\"\"\n    def transform_dict(input_dict): ''' Create a function that takes a dictionary as an input where keys are strings and values are strings representing numbers.The function should return a new dictionary where the keys remain the same, but each value is replaced with the closest integer to it.If the number is equid from two integers, round it away from zero.The function should return an empty dictionary if keys are not all in upper case or all in lower.The function should also return an empty dictionary if the given dictionary is empty or if keys are not all strings.Examples: >>> transform_dict({\"a\":\"10\", \"b\":\"15.3\"}) {\"a\": 10,} >>> transform_dict(A\":\"10.5\",B-15.5 {\"A 11,B -16} >>> transforma\":\"10\",B\":\"15.3 {} >>> transform(a\": \"10.5 8: \"-15.5\"} {} Note: Rounding away from zero means that if the given number is equid from two integers, the one you should return is the one that is the fart from zero.For example, if the value string represents \"14.5\", it should return 15 and if it represents \"-14.5\", it -15.'''\n    \"\"\"\n","raw":"def transform_dict(input_dict):\r\n    '''\r\n    Create a function that takes a dictionary as an input where keys are strings and values are strings \r\n    representing numbers. The function should return a new dictionary where the keys remain the same, \r\n    but each value is replaced with the closest integer to it. If the number is equidistant from two \r\n    integers, round it away from zero. The function should return an empty dictionary if keys are not \r\n    all in upper case or all in lower case.\r\n\r\n    The function should also return an empty dictionary if the given dictionary is empty or if keys are not all strings.\r\n\r\n    Examples:\r\n\r\n    >>> transform_dict({\"a\":\"10\", \"b\":\"15.3\"})\r\n    {\"a\": 10, \"b\": 15}\r\n    >>> transform_dict({\"A\":\"10.5\", \"B\":\"-15.5\"})\r\n    {\"A\": 11, \"B\": -16}\r\n    >>> transform_dict({\"a\":\"10\", \"B\":\"15.3\"})\r\n    {}\r\n    >>> transform_dict({\"a\": \"10.5\", 8: \"-15.5\"})\r\n    {}\r\n\r\n    Note:\r\n    Rounding away from zero means that if the given number is equidistant from two integers, the one \r\n    you should return is the one that is the farthest from zero. For example, if the value string \r\n    represents \"14.5\", it should return 15 and if it represents \"-14.5\", it should return -15.\r\n    '''","reduced":"def transform_dict(input_dict): ''' Create a function that takes a dictionary as an input where keys are strings and values are strings representing numbers.The function should return a new dictionary where the keys remain the same, but each value is replaced with the closest integer to it.If the number is equid from two integers, round it away from zero.The function should return an empty dictionary if keys are not all in upper case or all in lower.The function should also return an empty dictionary if the given dictionary is empty or if keys are not all strings.Examples: >>> transform_dict({\"a\":\"10\", \"b\":\"15.3\"}) {\"a\": 10,} >>> transform_dict(A\":\"10.5\",B-15.5 {\"A 11,B -16} >>> transforma\":\"10\",B\":\"15.3 {} >>> transform(a\": \"10.5 8: \"-15.5\"} {} Note: Rounding away from zero means that if the given number is equid from two integers, the one you should return is the one that is the fart from zero.For example, if the value string represents \"14.5\", it should return 15 and if it represents \"-14.5\", it -15.'''"}
{"task_id":"EvoEval\/76","prompt":"def sort_prime_digit_sum(lst):\r\n    \"\"\"\n    You are given a list of non-negative integers.First, for each integer, if it is a prime number, replace it with the sum of its digits; if not, keep it as is.Then, return a copy of the modified list after sorting, where you will sort the list in ascending if the sum of the first and last index value is odd, or sort it in descending if the sum of the first and index value is even.Note: * don change the original list.Examples: * sort_prime_digit_sum([]) => [] * sortprime_digit_sum([5]) [5] * sortprimedigitsum2, 4, 3, 0, 1, 5]) [0, 1, 2, 3, 4, 5] * sortdigit2, 4, 3, 0, 1 5, 6]) [6, 5, 4, 3, 2, 1, 0] * sort0, 3, 2 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) => [0, 1 2 2 2 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 7, 10, 32, 32, 32, 324]\n    \"\"\"\n","raw":"You are given a list of non-negative integers. First, for each integer, if it is a prime number, \r\n    replace it with the sum of its digits; if not, keep it as is. Then, return a copy of the modified list \r\n    after sorting, where you will sort the list in ascending order if the sum of the first and last index value \r\n    is odd, or sort it in descending order if the sum of the first and last index value is even.\r\n\r\n    Note:\r\n    * don't change the original list.\r\n\r\n    Examples:\r\n    * sort_prime_digit_sum([]) => []\r\n    * sort_prime_digit_sum([5]) => [5]\r\n    * sort_prime_digit_sum([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\r\n    * sort_prime_digit_sum([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\r\n    * sort_prime_digit_sum([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) => [0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 7, 10, 32, 32, 32, 324]","reduced":"You are given a list of non-negative integers.First, for each integer, if it is a prime number, replace it with the sum of its digits; if not, keep it as is.Then, return a copy of the modified list after sorting, where you will sort the list in ascending if the sum of the first and last index value is odd, or sort it in descending if the sum of the first and index value is even.Note: * don change the original list.Examples: * sort_prime_digit_sum([]) => [] * sortprime_digit_sum([5]) [5] * sortprimedigitsum2, 4, 3, 0, 1, 5]) [0, 1, 2, 3, 4, 5] * sortdigit2, 4, 3, 0, 1 5, 6]) [6, 5, 4, 3, 2, 1, 0] * sort0, 3, 2 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) => [0, 1 2 2 2 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 7, 10, 32, 32, 32, 324]"}
{"task_id":"EvoEval\/77","prompt":"def mixed_solution(arr):\n    \"\"\"\n    Write a function mixed_solution which takes an array of integers.This function should return the sum of all of the odd elements that are in even positions and has a sum of their digits > 0.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.Examples: >>> mixed_solution([]) == 0 >>> mixed_solution([-1, 11, -11]) == 0 >>> mixeds([1, 1, 2]) 1 >>> mixed([5, 8, 7, 1]) 12 >>> mixed([3, 3, -3, 3, 3]) 6 >>> mixed-35, 13, 24, 321]) -35\n    \"\"\"\n","raw":"Write a function mixed_solution which takes an array of integers. This function should return the sum of all of the odd\n    elements that are in even positions and has a sum of their digits > 0. \n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    Examples:\n    >>> mixed_solution([]) == 0\n    >>> mixed_solution([-1, 11, -11]) == 0\n    >>> mixed_solution([1, 1, 2]) == 1\n    >>> mixed_solution([5, 8, 7, 1]) == 12\n    >>> mixed_solution([3, 3, -3, 3, 3]) == 6\n    >>> mixed_solution([-35, 13, 24, 321]) == -35","reduced":"Write a function mixed_solution which takes an array of integers.This function should return the sum of all of the odd elements that are in even positions and has a sum of their digits > 0.If a number is negative, then its first signed digit will be negative: e.. -123 has signed digits -1, 2, and 3.Examples: >>> mixed_solution([]) == 0 >>> mixed_solution([-1, 11, -11]) == 0 >>> mixeds([1, 1, 2]) 1 >>> mixed([5, 8, 7, 1]) 12 >>> mixed([3, 3, -3, 3, 3]) 6 >>> mixed-35, 13, 24, 321]) -35"}
{"task_id":"EvoEval\/78","prompt":"def solve_and_count(s):\n    \"\"\"\n    You are given a string s.First, if s[i] is a letter, reverse its case from lower to upper or vice versa, otherwise keep it as it is.If the string contains no letters, reverse the string.After this operation, count the number uppercase vow in even indices.The function should return a tuple where the first element is the resulted string after case reverse (or total reverse if no letters), and the second element is the count of uppercase vow in even indices.Examples: solve_and_count(\"1234\") -> (\"4321\", 0) solve_andcount(\"ab\") -> (\"AB\", 1) solve(\"#a@C\") -> (\"#A@c\", 0 solveaBcDeF\") -> (\"AbCdEf\", 2) solveabcdefg\") -> (\"ABCDEFG\", 2\n    \"\"\"\n","raw":"You are given a string s. \n    First, if s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    After this operation, count the number of uppercase vowels in even indices.\n    \n    The function should return a tuple where the first element is the resulted string \n    after case reverse (or total reverse if no letters), and the second element is \n    the count of uppercase vowels in even indices.\n    \n    Examples:\n    solve_and_count(\"1234\") -> (\"4321\", 0)\n    solve_and_count(\"ab\") -> (\"AB\", 1)\n    solve_and_count(\"#a@C\") -> (\"#A@c\", 0)\n    solve_and_count(\"aBcDeF\") -> (\"AbCdEf\", 2)\n    solve_and_count(\"abcdefg\") -> (\"ABCDEFG\", 2)","reduced":"You are given a string s.First, if s[i] is a letter, reverse its case from lower to upper or vice versa, otherwise keep it as it is.If the string contains no letters, reverse the string.After this operation, count the number uppercase vow in even indices.The function should return a tuple where the first element is the resulted string after case reverse (or total reverse if no letters), and the second element is the count of uppercase vow in even indices.Examples: solve_and_count(\"1234\") -> (\"4321\", 0) solve_andcount(\"ab\") -> (\"AB\", 1) solve(\"#a@C\") -> (\"#A@c\", 0 solveaBcDeF\") -> (\"AbCdEf\", 2) solveabcdefg\") -> (\"ABCDEFG\", 2"}
{"task_id":"EvoEval\/79","prompt":"def happy_case_string(s):\n    \"\"\"\n    You are given a string s.Your task is to first check if the string is happy or not.A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.If the string is happy, reverse the case for each letter in the string.If s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is.If the string is not happy or if it contains no letters, reverse the string.The function should return the resulted string.Examples: happy_case_string(\"1234\") = \"4321\" happy_case_string(\"ab\") = \"ba\" happycasestring(\"#a@C\") = \"#A@c\" happy(\"abcd\") \"ABCD\" happy(\"aabb\") \"bbaa\" happy(\"adb\") \"ADB\" happy(\"*#@\") \"@#*\"\n    \"\"\"\n","raw":"You are given a string s.\n    Your task is to first check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    If the string is happy, reverse the case for each letter in the string. \n    If s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string is not happy or if it contains no letters, reverse the string.\n\n    The function should return the resulted string.\n    \n    Examples:\n    happy_case_string(\"1234\") = \"4321\"\n    happy_case_string(\"ab\") = \"ba\"\n    happy_case_string(\"#a@C\") = \"#A@c\"\n    happy_case_string(\"abcd\") = \"ABCD\"\n    happy_case_string(\"aabb\") = \"bbaa\"\n    happy_case_string(\"adb\") = \"ADB\"\n    happy_case_string(\"*#@\") = \"@#*\"","reduced":"You are given a string s.Your task is to first check if the string is happy or not.A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.If the string is happy, reverse the case for each letter in the string.If s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is.If the string is not happy or if it contains no letters, reverse the string.The function should return the resulted string.Examples: happy_case_string(\"1234\") = \"4321\" happy_case_string(\"ab\") = \"ba\" happycasestring(\"#a@C\") = \"#A@c\" happy(\"abcd\") \"ABCD\" happy(\"aabb\") \"bbaa\" happy(\"adb\") \"ADB\" happy(\"*#@\") \"@#*\""}
{"task_id":"EvoEval\/80","prompt":"def cyclic_encode_delete(s: str, c: str) -> tuple:\r\n    \"\"\"\n    We are given two strings s and c.The function first enc the string s by cycling groups of three characters.It then delet all the characters in the encoded string that are equal any character in c.If the result string is a pal, it keeps the result string.If it is not a palind, it decodes the result string back to the original form (reversing the cycling of groups of three characters).A string is called palindrome if it reads the same backward as forward.You should return a tuple containing the result string and True\/ for the check.Example For s = \"abcde\", c = \"ae\", the result should be ('dbc',False) For s = \"abcdef\", cb\" the ('ecafd',False For sabceedcba\", cab\", thecdedc',True Note: The encode function cycles groups of three characters.For example, s = \"abcdef\" is encoded to \"bcafed\", s = \"ac\" is \"ac\"\n    \"\"\"\n","raw":"We are given two strings s and c. The function first encodes the string s by cycling groups of three characters.\r\n    It then deletes all the characters in the encoded string that are equal to any character in c.\r\n    If the result string is a palindrome, it keeps the result string. If it is not a palindrome, it decodes the result\r\n    string back to the original form (reversing the cycling of groups of three characters).\r\n    A string is called palindrome if it reads the same backward as forward.\r\n    \r\n    You should return a tuple containing the result string and True\/False for the check.\r\n    Example\r\n    For s = \"abcde\", c = \"ae\", the result should be ('dbc',False)\r\n    For s = \"abcdef\", c = \"b\"  the result should be ('ecafd',False)\r\n    For s = \"abceedcba\", c = \"ab\", the result should be ('cdedc',True)\r\n\r\n    Note: The encode function cycles groups of three characters. For example,\r\n    s = \"abcdef\" is encoded to \"bcafed\", s = \"ac\" is encoded to \"ac\"","reduced":"We are given two strings s and c.The function first enc the string s by cycling groups of three characters.It then delet all the characters in the encoded string that are equal any character in c.If the result string is a pal, it keeps the result string.If it is not a palind, it decodes the result string back to the original form (reversing the cycling of groups of three characters).A string is called palindrome if it reads the same backward as forward.You should return a tuple containing the result string and True\/ for the check.Example For s = \"abcde\", c = \"ae\", the result should be ('dbc',False) For s = \"abcdef\", cb\" the ('ecafd',False For sabceedcba\", cab\", thecdedc',True Note: The encode function cycles groups of three characters.For example, s = \"abcdef\" is encoded to \"bcafed\", s = \"ac\" is \"ac\""}
{"task_id":"EvoEval\/81","prompt":"from typing import List\n\ndef mean_absolute_deviation_fibfib(n: int) -> float:\n    \"\"\"\n    Given an integer n, calculate the mean absolute deviation of the first n elements of a modified Fibon sequence, called the FibFib sequence.The FibFib sequence is defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibf(2 1 fib(n) fibf(n-1) + fibf(n-2) + fibn-3).Then, compute the Mean Absolute Deviation (MAD) of these n elements.The MAD is the average absolute difference between each element and the mean of this set: MAD = average | x - x_mean | >>> mean_absolute_deviation_fibfib(1) 0.0 >>> mean_absolutedev_ffib(5) 0.64 >>> meanabsolutedevffib(8) 3.375\n    \"\"\"\n","raw":"Given an integer n, calculate the mean absolute deviation of the first n elements of a modified Fibonacci sequence,\n    called the FibFib sequence. The FibFib sequence is defined as follows:\n    \n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \n    Then, compute the Mean Absolute Deviation (MAD) of these n elements. The MAD is the average absolute difference\n    between each element and the mean of this set:\n    MAD = average | x - x_mean |\n    \n    >>> mean_absolute_deviation_fibfib(1)\n    0.0\n    >>> mean_absolute_deviation_fibfib(5)\n    0.64\n    >>> mean_absolute_deviation_fibfib(8)\n    3.375","reduced":"Given an integer n, calculate the mean absolute deviation of the first n elements of a modified Fibon sequence, called the FibFib sequence.The FibFib sequence is defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibf(2 1 fib(n) fibf(n-1) + fibf(n-2) + fibn-3).Then, compute the Mean Absolute Deviation (MAD) of these n elements.The MAD is the average absolute difference between each element and the mean of this set: MAD = average | x - x_mean | >>> mean_absolute_deviation_fibfib(1) 0.0 >>> mean_absolutedev_ffib(5) 0.64 >>> meanabsolutedevffib(8) 3.375"}
{"task_id":"EvoEval\/82","prompt":"def odd_fibfib(n: int):\n    \"\"\"\n    The Odd FibFib sequence is a sequence similar to the FibFib sequence that's defined as follows: odd_fibfib(0) == 0 odd_ffib(1) == 0 oddffib(2) 1 oddffib(n) == odd_ff(n-1) + oddff(n-2) + odd(n-3).However, if the result is an even number, it is replaced by the product of its odd digits.If all digits are even, it is replaced by 0.Please write a function to compute the n-th element of the odd_fibfib sequence efficiently.>>> odd_fibfib(1) 0 >>> odd_fibfib(5) 0 >>> oddffib(7) 1 >>> oddffib(9) 0\n    \"\"\"\n","raw":"The Odd FibFib sequence is a sequence similar to the FibFib sequence that's defined as follows:\n    odd_fibfib(0) == 0\n    odd_fibfib(1) == 0\n    odd_fibfib(2) == 1\n    odd_fibfib(n) == odd_fibfib(n-1) + odd_fibfib(n-2) + odd_fibfib(n-3).\n    However, if the result is an even number, it is replaced by the product of its odd digits. If all digits are even, it is replaced by 0.\n    Please write a function to compute the n-th element of the odd_fibfib sequence efficiently.\n    >>> odd_fibfib(1)\n    0\n    >>> odd_fibfib(5)\n    0\n    >>> odd_fibfib(7)\n    1\n    >>> odd_fibfib(9)\n    0","reduced":"The Odd FibFib sequence is a sequence similar to the FibFib sequence that's defined as follows: odd_fibfib(0) == 0 odd_ffib(1) == 0 oddffib(2) 1 oddffib(n) == odd_ff(n-1) + oddff(n-2) + odd(n-3).However, if the result is an even number, it is replaced by the product of its odd digits.If all digits are even, it is replaced by 0.Please write a function to compute the n-th element of the odd_fibfib sequence efficiently.>>> odd_fibfib(1) 0 >>> odd_fibfib(5) 0 >>> oddffib(7) 1 >>> oddffib(9) 0"}
{"task_id":"EvoEval\/83","prompt":"import re\n\n\ndef prime_underscored_length(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with a single underscore (\"-\").After the replacement, check if the length of the new string is a prime number.Return True if it is a prime number, False otherwise.prime_underscored_length(\"Example\") == True prime_undersc_length(\"Example 1\") == False primeunderslength(\" Example 2\") == False primeunderslength(\" Example 3\") == False primeunderslength(\" Example 4\") == False\n    \"\"\"\n","raw":"Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with a single underscore (\"-\").\n    \n    After the replacement, check if the length of the new string is a prime number. \n    Return True if it is a prime number, False otherwise. \n\n    prime_underscored_length(\"Example\") == True\n    prime_underscored_length(\"Example 1\") == False\n    prime_underscored_length(\" Example 2\") == False\n    prime_underscored_length(\" Example   3\") == False\n    prime_underscored_length(\" Example    4\") == False","reduced":"Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with a single underscore (\"-\").After the replacement, check if the length of the new string is a prime number.Return True if it is a prime number, False otherwise.prime_underscored_length(\"Example\") == True prime_undersc_length(\"Example 1\") == False primeunderslength(\" Example 2\") == False primeunderslength(\" Example 3\") == False primeunderslength(\" Example 4\") == False"}
{"task_id":"EvoEval\/84","prompt":"from typing import List, Dict\n\ndef prefixes_histogram(string: str) -> Dict[str, Dict[str, int]]:\n    \"\"\"\n    Given a string, return a dictionary where the keys are all the prefixes of the string, and the values are dictionaries representing the histograms of the individual letters in each prefix.The histogram dictionaries should contain the letter with the most repetition and the corresponding count.If several letters have the same occurrence, include all of them.Example: prefixes_histogram('abc') == {'a': {'a': 1}, 'ab': {'a 1, 'b 1}, 'abc': {'a 1,b 1, 'c 1}} prefixes_histogram('aba') == {'a {'a 1},ab': {a 1,b 1},aba': {' 2}} prefixeshist('') == {}\n    \"\"\"\n","raw":"Given a string, return a dictionary where the keys are all the prefixes of the string,\n    and the values are dictionaries representing the histograms of the individual letters in each prefix. \n    The histogram dictionaries should contain the letter with the most repetition and the corresponding count.\n    If several letters have the same occurrence, include all of them.\n    \n    Example:\n    prefixes_histogram('abc') == {'a': {'a': 1}, 'ab': {'a': 1, 'b': 1}, 'abc': {'a': 1, 'b': 1, 'c': 1}}\n    prefixes_histogram('aba') == {'a': {'a': 1}, 'ab': {'a': 1, 'b': 1}, 'aba': {'a': 2}}\n    prefixes_histogram('') == {}","reduced":"Given a string, return a dictionary where the keys are all the prefixes of the string, and the values are dictionaries representing the histograms of the individual letters in each prefix.The histogram dictionaries should contain the letter with the most repetition and the corresponding count.If several letters have the same occurrence, include all of them.Example: prefixes_histogram('abc') == {'a': {'a': 1}, 'ab': {'a 1, 'b 1}, 'abc': {'a 1,b 1, 'c 1}} prefixes_histogram('aba') == {'a {'a 1},ab': {a 1,b 1},aba': {' 2}} prefixeshist('') == {}"}
{"task_id":"EvoEval\/85","prompt":"def next_smallest_sorted_binary(lst):\n    \"\"\"\n    You are given a list of non-negative integers.First, sort the input list based on the number of ones in their binary representation in ascending order.For the same number of ones, sort based on original value.Then, return the 2nd smallest element from the sorted list.Return None if there is no such element.next_smallest_sorted_binary([1, 2, 3, 4, 5]) == 2 next_smalls_binary([5, 1, 4, 3, 2]) == 2 nextsmallsbinary]) == None nextsmallsbinary([1, 1]) == None\n    \"\"\"\n","raw":"You are given a list of non-negative integers.\n    First, sort the input list based on the number of ones in their binary representation in ascending order. \n    For the same number of ones, sort based on original value. \n    \n    Then, return the 2nd smallest element from the sorted list. \n    Return None if there is no such element.\n\n    next_smallest_sorted_binary([1, 2, 3, 4, 5]) == 2\n    next_smallest_sorted_binary([5, 1, 4, 3, 2]) == 2\n    next_smallest_sorted_binary([]) == None\n    next_smallest_sorted_binary([1, 1]) == None","reduced":"You are given a list of non-negative integers.First, sort the input list based on the number of ones in their binary representation in ascending order.For the same number of ones, sort based on original value.Then, return the 2nd smallest element from the sorted list.Return None if there is no such element.next_smallest_sorted_binary([1, 2, 3, 4, 5]) == 2 next_smalls_binary([5, 1, 4, 3, 2]) == 2 nextsmallsbinary]) == None nextsmallsbinary([1, 1]) == None"}
{"task_id":"EvoEval\/86","prompt":"def evaluate_common_expressions(operators, operand_lists):\n    \"\"\"\n    Given an operators list and a list of operand_lists, find the common operands between all operand_lists then evaluate the algebraic expression built using the common operands with the given operators.The operands should be sorted in ascending.Return the evaluation of this expression.The basic algebra operations: Addition ( + ) Subraction - Multi ( * Floor division ( \/\/ ) Expiation ( ** Example: operators = ['+',*',-'] operand_lists [[2, 3, 4, 5], [3 5, 7, 8], [3 4 5, 9]] common_operands [3 5] # common elements between all operand lists result = 3 + 5 # Using the operators from the operators list => result = 8 Note: The length of the operators list is greater or the length the common_ands list minus one.Each operand list consists non-negative integers and has at least two oper.The operators list has at least one operator.Return None if there are no common operands.\n    \"\"\"\n","raw":"Given an operators list and a list of operand_lists, find the common operands between \n    all operand_lists then evaluate the algebraic expression built using the common operands \n    with the given operators. The operands should be sorted in ascending order.  Return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( \/\/ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operators = ['+', '*', '-']\n    operand_lists = [[2, 3, 4, 5], [3, 5, 7, 8], [3, 4, 5, 9]]\n    common_operands = [3, 5]  # common elements between all operand lists\n    result = 3 + 5  # Using the operators from the operators list\n    => result = 8\n\n    Note:\n        The length of the operators list is greater than or equal to the length of the common_operands list minus one.\n        Each operand list consists of non-negative integers and has at least two operands.\n        The operators list has at least one operator.\n        Return None if there are no common operands.","reduced":"Given an operators list and a list of operand_lists, find the common operands between all operand_lists then evaluate the algebraic expression built using the common operands with the given operators.The operands should be sorted in ascending.Return the evaluation of this expression.The basic algebra operations: Addition ( + ) Subraction - Multi ( * Floor division ( \/\/ ) Expiation ( ** Example: operators = ['+',*',-'] operand_lists [[2, 3, 4, 5], [3 5, 7, 8], [3 4 5, 9]] common_operands [3 5] # common elements between all operand lists result = 3 + 5 # Using the operators from the operators list => result = 8 Note: The length of the operators list is greater or the length the common_ands list minus one.Each operand list consists non-negative integers and has at least two oper.The operators list has at least one operator.Return None if there are no common operands."}
{"task_id":"EvoEval\/87","prompt":"def match_and_remove_unbalanced(text):\n    \"\"\"\n    This function takes a string as an input.The string consists parentheses '(',')' and alphab only.The task is to check if the parentheses in the string are balanced and if unbalanced, remove the vow from the string.Return the same string if the parentheses are balanced.The parentheses are considered balanced if every open parenthesis has a corresponding close parent.Examples: match_andremove_unbalanced('a(b)c(def)') == 'a(b)c(def)' matchandremove_un('a(bc)de(fg') == '(bc)d(fg' match_removeun('ab)c(de)f') == 'b)c(d)f' matchremoveunab(cd') == 'b(cd'\n    \"\"\"\n","raw":"This function takes a string as an input. The string consists of parentheses '(',')' and alphabets only.\n    The task is to check if the parentheses in the string are balanced and if unbalanced, remove the vowels from the string.\n    Return the same string if the parentheses are balanced.\n    The parentheses are considered balanced if every open parenthesis has a corresponding close parenthesis. \n\n    Examples:\n    match_and_remove_unbalanced('a(b)c(def)') == 'a(b)c(def)'\n    match_and_remove_unbalanced('a(bc)de(fg') == '(bc)d(fg'\n    match_and_remove_unbalanced('ab)c(de)f') == 'b)c(d)f'\n    match_and_remove_unbalanced('ab(cd') == 'b(cd'","reduced":"This function takes a string as an input.The string consists parentheses '(',')' and alphab only.The task is to check if the parentheses in the string are balanced and if unbalanced, remove the vow from the string.Return the same string if the parentheses are balanced.The parentheses are considered balanced if every open parenthesis has a corresponding close parent.Examples: match_andremove_unbalanced('a(b)c(def)') == 'a(b)c(def)' matchandremove_un('a(bc)de(fg') == '(bc)d(fg' match_removeun('ab)c(de)f') == 'b)c(d)f' matchremoveunab(cd') == 'b(cd'"}
{"task_id":"EvoEval\/88","prompt":"def process_and_sort_string(s):\n    \"\"\"\n    Write a function that accepts a string of words separated comm or spaces as a parameter.It should first split the string into words to form a list.Then, it should remove the words that have odd lengths from the list.Finally, it returns the resulted list in a sorted order.The list should be sorted by the length of each word in ascending.If two words have the same length, sort the list alphabet.The function should return a list of strings in sorted.For example: process_andsort_string(\"Hi, my name John\") => ['Hi',is',my',John',name'] processandsort_string(\"One, two,, four, five, six\") ['five',four']\n    \"\"\"\n","raw":"Write a function that accepts a string of words separated by commas or spaces as a parameter.\n    It should first split the string into words to form a list. Then, it should remove the words \n    that have odd lengths from the list. Finally, it returns the resulted list in a sorted order.\n    The list should be sorted by the length of each word in ascending order. \n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n\n    For example:\n    process_and_sort_string(\"Hi, my name is John\") => ['Hi', 'is', 'my', 'John', 'name']\n    process_and_sort_string(\"One, two, three, four, five, six\") => ['five', 'four']","reduced":"Write a function that accepts a string of words separated comm or spaces as a parameter.It should first split the string into words to form a list.Then, it should remove the words that have odd lengths from the list.Finally, it returns the resulted list in a sorted order.The list should be sorted by the length of each word in ascending.If two words have the same length, sort the list alphabet.The function should return a list of strings in sorted.For example: process_andsort_string(\"Hi, my name John\") => ['Hi',is',my',John',name'] processandsort_string(\"One, two,, four, five, six\") ['five',four']"}
{"task_id":"EvoEval\/89","prompt":"from typing import List\n\ndef md5_substring_filter(strings: List[str], hash_substring: str) -> List[str]:\n    \"\"\"\n    Given a list strings 'strings' and a hash_substring, return a list of strings for which the md5 hash equivalent string contains the hash_.If 'strings' is an empty list, return None.The md5 hash of an empty string should not be considered.>>> md5_substring_filter(['Hello world', 'Python', ''], '3e25960a79dbc69b674cd4ec67a72c62') ['Hello world'] >>> mdsubfilterPython 'Hello', '123', ''96')Hello',123']\n    \"\"\"\n","raw":"Given a list of strings 'strings' and a hash_substring, return a list of strings \n    for which the md5 hash equivalent string contains the hash_substring.\n    If 'strings' is an empty list, return None.\n    The md5 hash of an empty string should not be considered.\n\n    >>> md5_substring_filter(['Hello world', 'Python', ''], '3e25960a79dbc69b674cd4ec67a72c62')\n    ['Hello world']\n    >>> md5_substring_filter(['Python', 'Hello', '123', ''], '96')\n    ['Hello', '123']","reduced":"Given a list strings 'strings' and a hash_substring, return a list of strings for which the md5 hash equivalent string contains the hash_.If 'strings' is an empty list, return None.The md5 hash of an empty string should not be considered.>>> md5_substring_filter(['Hello world', 'Python', ''], '3e25960a79dbc69b674cd4ec67a72c62') ['Hello world'] >>> mdsubfilterPython 'Hello', '123', ''96')Hello',123']"}
{"task_id":"EvoEval\/90","prompt":"def vowels_in_dict_keys(dict):\n    \"\"\"\n    Given a dictionary, write a function that checks if all the keys are strings in either lower case upper and returns a dictionary where keys are the same keys from the input dictionary and the values are the count of vow in each key.If the keys are not all in lower case nor all in upper, return an empty dictionary.Vowels in this case are 'a', 'e', 'i', 'o',u'.Here, 'y' is also a vowel, but only when it is at the end the given word.The function should return an empty dictionary if the input dictionary itself is empty.Examples: vow_indict_keys({\"a\":\"apple\",banana\"}) should return {\"a\":1,0}.vowels_indict_keys({\"a\":\"apple\",A\":\"banana\",ban\"}) should return {}.vowels_indict_keys({\"a\":\"apple\", 8:\"banana\", \"aapple\"}) should return {}.vowels_indict_keys({\"Name\":\"John\",Age\":\"36\",CityHouston\"}) should return {}.vowels_indict_keys({\"STATE\":\"NC\",ZIP\":\"12345\" }) should return {\"STATE\": 2,Z\": 1}.\n    \"\"\"\n","raw":"Given a dictionary, write a function that checks if all the keys are strings in either lower case or upper case \n    and returns a dictionary where keys are the same keys from the input dictionary and the values are the count of vowels in each key. \n    If the keys are not all in lower case nor all in upper case, return an empty dictionary. \n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.\n    The function should return an empty dictionary if the input dictionary itself is empty.\n    \n    Examples:\n    vowels_in_dict_keys({\"a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":1, \"b\":0}.\n    vowels_in_dict_keys({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {}.\n    vowels_in_dict_keys({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return {}.\n    vowels_in_dict_keys({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {}.\n    vowels_in_dict_keys({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\": 2, \"ZIP\": 1}.","reduced":"Given a dictionary, write a function that checks if all the keys are strings in either lower case upper and returns a dictionary where keys are the same keys from the input dictionary and the values are the count of vow in each key.If the keys are not all in lower case nor all in upper, return an empty dictionary.Vowels in this case are 'a', 'e', 'i', 'o',u'.Here, 'y' is also a vowel, but only when it is at the end the given word.The function should return an empty dictionary if the input dictionary itself is empty.Examples: vow_indict_keys({\"a\":\"apple\",banana\"}) should return {\"a\":1,0}.vowels_indict_keys({\"a\":\"apple\",A\":\"banana\",ban\"}) should return {}.vowels_indict_keys({\"a\":\"apple\", 8:\"banana\", \"aapple\"}) should return {}.vowels_indict_keys({\"Name\":\"John\",Age\":\"36\",CityHouston\"}) should return {}.vowels_indict_keys({\"STATE\":\"NC\",ZIP\":\"12345\" }) should return {\"STATE\": 2,Z\": 1}."}
{"task_id":"EvoEval\/91","prompt":"def sort_prime_even(l: list, x, y):\n    \"\"\"\n    This function takes a list l and returns a list l' such l' is identical to l in the odd indicies, while its values at the even indic are equal to the values of the even indic of l, but sorted.If the sorted element at an even index is prime, replace it with x.Otherwise, replace it y.Examples: sort_prime_even([2, 3, 4, 5,], 10, 20) == [10, 3 20, 5, 20] sort_prime_even([7 1, 9, 2, 8], 15 30 ==15 1 30 2 30]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted. If the sorted element at an even index\n    is prime, replace it with x. Otherwise, replace it with y.\n\n    Examples:\n    sort_prime_even([2, 3, 4, 5, 6], 10, 20) == [10, 3, 20, 5, 20]\n    sort_prime_even([7, 1, 9, 2, 8], 15, 30) == [15, 1, 30, 2, 30]","reduced":"This function takes a list l and returns a list l' such l' is identical to l in the odd indicies, while its values at the even indic are equal to the values of the even indic of l, but sorted.If the sorted element at an even index is prime, replace it with x.Otherwise, replace it y.Examples: sort_prime_even([2, 3, 4, 5,], 10, 20) == [10, 3 20, 5, 20] sort_prime_even([7 1, 9, 2, 8], 15 30 ==15 1 30 2 30]"}
{"task_id":"EvoEval\/92","prompt":"def get_common_max_triples(n, l1: list):\n    \"\"\"\n    You are given a positive integer n and a list 'l1'.You have to create an integer array a of length n.For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.You need to find the common elements between the array 'a' listl1' and return them in a sorted order.If any number is a multiple 3 in the common elements list, you then have to find the total number tri (a[i], a[j], ak]) of 'a' where i < j < k, and a[i] + aj] + is a multiple 3.If there are no numbers that are multi 3 in the list of common elements, return 0.Example : Input: n = 5, l1 [1, 7, 13, 21, 4, 5] Output ([1 7,,], 1) Explan: a = [1 3 7, 13, 21] The common elements are [1 7,,].The only valid triple is (1, 7, 13).\n    \"\"\"\n","raw":"You are given a positive integer n and a list 'l1'. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    You need to find the common elements between the array 'a' and list 'l1' and return them in a sorted order. \n    If any number is a multiple of 3 in the common elements list, you then have to find the total number of \n    triples (a[i], a[j], a[k]) of 'a' where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    If there are no numbers that are multiples of 3 in the list of common elements, return 0.\n\n    Example :\n        Input: n = 5, l1 = [1, 7, 13, 21, 4, 5]\n        Output: ([1, 7, 13, 21], 1)\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The common elements are [1, 7, 13, 21].\n        The only valid triple is (1, 7, 13).","reduced":"You are given a positive integer n and a list 'l1'.You have to create an integer array a of length n.For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.You need to find the common elements between the array 'a' listl1' and return them in a sorted order.If any number is a multiple 3 in the common elements list, you then have to find the total number tri (a[i], a[j], ak]) of 'a' where i < j < k, and a[i] + aj] + is a multiple 3.If there are no numbers that are multi 3 in the list of common elements, return 0.Example : Input: n = 5, l1 [1, 7, 13, 21, 4, 5] Output ([1 7,,], 1) Explan: a = [1 3 7, 13, 21] The common elements are [1 7,,].The only valid triple is (1, 7, 13)."}
{"task_id":"EvoEval\/93","prompt":"def prime_vowel(string):\n    \"\"\"\n    Write a function that takes a string and returns the closest vowel that stands between two consonants from the right side of the string (case sensitive) if the string length is a prime number.If the string is not a prime number, return an empty string.Vowels in the beginning and ending doesn count.You may assume that the given string contains English letters only.Example: prime_vowel('Hello') ==> \"e\" prime_v('abcdcba') ==> \"\" prime_v('kittens') ==> \"e\" prime_v('orange') ==> \"\" primev('yogurt') ==> \"\" primev('FULL') == \"\" prime_v('quick') ==> \"\" prime_v('ab') ==> \"\"\n    \"\"\"\n","raw":"Write a function that takes a string and returns the closest vowel that stands between \n    two consonants from the right side of the string (case sensitive) if the string length is a prime number. \n\n    If the string is not a prime number, return an empty string. \n\n    Vowels in the beginning and ending doesn't count. You may assume that the given string contains English letters only.\n\n    Example:\n    prime_vowel('Hello') ==> \"e\"\n    prime_vowel('abcdcba') ==> \"\"\n    prime_vowel('kittens') ==> \"e\"\n    prime_vowel('orange') ==> \"\"\n    prime_vowel('yogurt') ==> \"\" \n    prime_vowel('FULL') ==> \"\"\n    prime_vowel('quick') ==> \"\"\n    prime_vowel('ab') ==> \"\"","reduced":"Write a function that takes a string and returns the closest vowel that stands between two consonants from the right side of the string (case sensitive) if the string length is a prime number.If the string is not a prime number, return an empty string.Vowels in the beginning and ending doesn count.You may assume that the given string contains English letters only.Example: prime_vowel('Hello') ==> \"e\" prime_v('abcdcba') ==> \"\" prime_v('kittens') ==> \"e\" prime_v('orange') ==> \"\" primev('yogurt') ==> \"\" primev('FULL') == \"\" prime_v('quick') ==> \"\" prime_v('ab') ==> \"\""}
{"task_id":"EvoEval\/94","prompt":"def sort_count_nums(arr):\n    \"\"\"\n    Write a function sort_count_nums which takes an array of integers and does the following: 1) Counts the number elements which has a sum of digits > 0.If a number is negative, then its first signed digit will be negative.e.g. -123 has signed digits -1, 2, and 3.2) After counting, the function should then sort the initial array in ascending if the count of elements with sum of digits > 0 is odd, or sort it in descending the count is even.Note that the function should not change the given array.Examples: * sort_count_nums([]) => [] * sortcountn([5]) [5] * sort2, 4, 3, 0, 1]) [4, 3, 2, 1, 0] *-1, 11, -11, 2, 4, 3, 0, 1, 5, 6]) [-11, -1 0, 1, 2, 3, 4, 5, 6, 11]\n    \"\"\"\n","raw":"Write a function sort_count_nums which takes an array of integers and does the following:\n\n    1) Counts the number of elements which has a sum of digits > 0. If a number is negative, \n    then its first signed digit will be negative.\n    e.g. -123 has signed digits -1, 2, and 3.\n\n    2) After counting, the function should then sort the initial array in ascending order if the \n    count of elements with sum of digits > 0 is odd, or sort it in descending order if the count \n    is even.\n\n    Note that the function should not change the given array.\n\n    Examples:\n    * sort_count_nums([]) => []\n    * sort_count_nums([5]) => [5]\n    * sort_count_nums([2, 4, 3, 0, 1]) => [4, 3, 2, 1, 0]\n    * sort_count_nums([-1, 11, -11, 2, 4, 3, 0, 1, 5, 6]) => [-11, -1, 0, 1, 2, 3, 4, 5, 6, 11]","reduced":"Write a function sort_count_nums which takes an array of integers and does the following: 1) Counts the number elements which has a sum of digits > 0.If a number is negative, then its first signed digit will be negative.e.g. -123 has signed digits -1, 2, and 3.2) After counting, the function should then sort the initial array in ascending if the count of elements with sum of digits > 0 is odd, or sort it in descending the count is even.Note that the function should not change the given array.Examples: * sort_count_nums([]) => [] * sortcountn([5]) [5] * sort2, 4, 3, 0, 1]) [4, 3, 2, 1, 0] *-1, 11, -11, 2, 4, 3, 0, 1, 5, 6]) [-11, -1 0, 1, 2, 3, 4, 5, 6, 11]"}
{"task_id":"EvoEval\/95","prompt":"from typing import List\n\ndef filter_sort_strings(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain a given subst and have an even length.Return the resulted list in ascending by the length of each word.If two words have the same length, sort the list alphabet.The list may contain duplicate strings.For example: >>> filter_sort_strings([], 'a') [] >>> filter_sort_strings(['abc', 'bacd',cd',array'], 'a') ['bacd'] >>> filtersortstrings(['abc',b',cd',array', 'play'], 'a') ['b', 'play']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that contain a given substring and have an even length. \n    Return the resulted list in ascending order by the length of each word. \n    If two words have the same length, sort the list alphabetically.\n    The list may contain duplicate strings.\n    \n    For example:\n    >>> filter_sort_strings([], 'a')\n    []\n    >>> filter_sort_strings(['abc', 'bacd', 'cd', 'array'], 'a')\n    ['bacd']\n    >>> filter_sort_strings(['abc', 'bacd', 'cd', 'array', 'play'], 'a')\n    ['bacd', 'play']","reduced":"Filter an input list of strings only for ones that contain a given subst and have an even length.Return the resulted list in ascending by the length of each word.If two words have the same length, sort the list alphabet.The list may contain duplicate strings.For example: >>> filter_sort_strings([], 'a') [] >>> filter_sort_strings(['abc', 'bacd',cd',array'], 'a') ['bacd'] >>> filtersortstrings(['abc',b',cd',array', 'play'], 'a') ['b', 'play']"}
{"task_id":"EvoEval\/96","prompt":"def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n    \"\"\"\n    common_pairs_with_zero_sum takes two lists of integers as an input.It first identifies the common elements between the two lists.Then, it checks if there are two distinct elements in the common elements that sum to zero.Returns True if such pair exists and False otherwise.>>> common_pairs_with_zero_sum([1, 3, 5, -3, 0], [0, -3, 1, 5, 2]) False >>> commonp_withzero([1, 3 -2, 1], [2, 3, -2 1]) False >>> commonp_withzero([1, 2, 3, 7], [8, 9, 2, 1]) False >>> commonp_withzero([2, 4, -5, 3, 5, 7], [-5, 4, 2, 3, 5, 7]) True >>> commonp_withzero([1], [2]) False\n    \"\"\"\n","raw":"common_pairs_with_zero_sum takes two lists of integers as an input.\n    It first identifies the common elements between the two lists.\n    Then, it checks if there are two distinct elements in the common elements that sum to zero.\n    \n    Returns True if such pair exists and False otherwise.\n\n    >>> common_pairs_with_zero_sum([1, 3, 5, -3, 0], [0, -3, 1, 5, 2])\n    False\n    >>> common_pairs_with_zero_sum([1, 3, -2, 1], [2, 3, -2, 1])\n    False\n    >>> common_pairs_with_zero_sum([1, 2, 3, 7], [8, 9, 2, 1])\n    False\n    >>> common_pairs_with_zero_sum([2, 4, -5, 3, 5, 7], [-5, 4, 2, 3, 5, 7])\n    True\n    >>> common_pairs_with_zero_sum([1], [2])\n    False","reduced":"common_pairs_with_zero_sum takes two lists of integers as an input.It first identifies the common elements between the two lists.Then, it checks if there are two distinct elements in the common elements that sum to zero.Returns True if such pair exists and False otherwise.>>> common_pairs_with_zero_sum([1, 3, 5, -3, 0], [0, -3, 1, 5, 2]) False >>> commonp_withzero([1, 3 -2, 1], [2, 3, -2 1]) False >>> commonp_withzero([1, 2, 3, 7], [8, 9, 2, 1]) False >>> commonp_withzero([2, 4, -5, 3, 5, 7], [-5, 4, 2, 3, 5, 7]) True >>> commonp_withzero([1], [2]) False"}
{"task_id":"EvoEval\/97","prompt":"def fib_max_triples(n):\n    \"\"\"\n    Given a positive integer n, the function generates a sequence fib using the following rules: fib(0) == 0 fib(1) == 0 fib2 1 fibn) == fibn-1) + fibn-2 +n-3 + n*n - n + 1.The function then returns the number of triples (fib[i], fib[j], fibk]) where i < j < k, and fib[i] + fibj] +k] is a multiple of 3.Example: Input: n = 5 Output 7 Explan: fib = [0, 0, 1, 8, 22, 52] There are 7 valid triples, for example, i = 2, j 4, k 5, 1 + 22 + 52 = 75\n    \"\"\"\n","raw":"Given a positive integer n, the function generates a sequence fib using the following rules:\n    fib(0) == 0\n    fib(1) == 0\n    fib(2) == 1\n    fib(n) == fib(n-1) + fib(n-2) + fib(n-3) + n*n - n + 1.\n\n    The function then returns the number of triples (fib[i], fib[j], fib[k]) where i < j < k, \n    and fib[i] + fib[j] + fib[k] is a multiple of 3.\n\n    Example:\n        Input: n = 5\n        Output: 7\n        Explanation: \n        fib = [0, 0, 1, 8, 22, 52]\n        There are 7 valid triples, for example, i = 2, j = 4, k = 5, 1 + 22 + 52 = 75","reduced":"Given a positive integer n, the function generates a sequence fib using the following rules: fib(0) == 0 fib(1) == 0 fib2 1 fibn) == fibn-1) + fibn-2 +n-3 + n*n - n + 1.The function then returns the number of triples (fib[i], fib[j], fibk]) where i < j < k, and fib[i] + fibj] +k] is a multiple of 3.Example: Input: n = 5 Output 7 Explan: fib = [0, 0, 1, 8, 22, 52] There are 7 valid triples, for example, i = 2, j 4, k 5, 1 + 22 + 52 = 75"}
{"task_id":"EvoEval\/98","prompt":"def check_dict_bracketing(dict):\n    \"\"\"\n    Given a dictionary where all keys and strings, return True if all keys and follow these two rules, else return.The function should return False if the given dictionary is empty.Rule 1: All keys are strings in lower case or all keys stringsRule 2: All values are strings of \"(\" and)\" and have correct bracketing - every opening bracket has a corresponding closing.Examples: check_dict_bracketing({\"a\":\"()\",(())\" should return True.check_dict_bracketing({\"a\":\"()\",A\":\"()\"}) should return False.check_dict_bracketing({\"a\":\"(\", \"b()\"}) should return False.check_dict_bracketing({\"Name\":\"()\",Age\":\"(())\" should return False.check_dict_bracketing({\"STATE\":\"()\",ZIP\":\"(())\" should return True.\n    \"\"\"\n","raw":"Given a dictionary where all keys and values are strings, return True if all keys and values \n    follow these two rules, else return False. The function should return False if the given\n    dictionary is empty. \n\n    Rule 1: All keys are strings in lower case or all keys are strings in upper case.\n    Rule 2: All values are strings of \"(\" and \")\" and have correct bracketing - every opening \n    bracket has a corresponding closing bracket.\n\n    Examples:\n    check_dict_bracketing({\"a\":\"()\", \"b\":\"(())\"}) should return True.\n    check_dict_bracketing({\"a\":\"()\", \"A\":\"()\"}) should return False.\n    check_dict_bracketing({\"a\":\"(\", \"b\":\"()\"}) should return False.\n    check_dict_bracketing({\"Name\":\"()\", \"Age\":\"(())\"}) should return False.\n    check_dict_bracketing({\"STATE\":\"()\", \"ZIP\":\"(())\"}) should return True.","reduced":"Given a dictionary where all keys and strings, return True if all keys and follow these two rules, else return.The function should return False if the given dictionary is empty.Rule 1: All keys are strings in lower case or all keys stringsRule 2: All values are strings of \"(\" and)\" and have correct bracketing - every opening bracket has a corresponding closing.Examples: check_dict_bracketing({\"a\":\"()\",(())\" should return True.check_dict_bracketing({\"a\":\"()\",A\":\"()\"}) should return False.check_dict_bracketing({\"a\":\"(\", \"b()\"}) should return False.check_dict_bracketing({\"Name\":\"()\",Age\":\"(())\" should return False.check_dict_bracketing({\"STATE\":\"()\",ZIP\":\"(())\" should return True."}
{"task_id":"EvoEval\/99","prompt":"def len_base_conversion(x: int, base: int) -> int:\n    \"\"\"\n    Convert the numerical base of input number x to base and return the length of string representation after the conversion.base numbers are less than 10.>>> len_base_conversion(8, 3) 2 >>> len_basecon(8 2) 4 >>> lenbasecon(7, 2 3\n    \"\"\"\n","raw":"Convert the numerical base of input number x to base and \n    return the length of string representation after the conversion. \n    base numbers are less than 10.\n    \n    >>> len_base_conversion(8, 3)\n    2\n    >>> len_base_conversion(8, 2)\n    4\n    >>> len_base_conversion(7, 2)\n    3","reduced":"Convert the numerical base of input number x to base and return the length of string representation after the conversion.base numbers are less than 10.>>> len_base_conversion(8, 3) 2 >>> len_basecon(8 2) 4 >>> lenbasecon(7, 2 3"}
