{"task_id":"HumanEval\/0","prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check list numbers two numbers closer\n   threshold\n   has_close_elements([1.0, 2.0, 3.0], 0.5)\n  \n   has_close_elements([1.0,, 3.0, 4.0, 5.0, 2.0], 0.3)\n  \n    \"\"\"\n","raw":"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True","reduced":"Check list numbers two numbers closer\n   threshold\n   has_close_elements([1.0, 2.0, 3.0], 0.5)\n  \n   has_close_elements([1.0,, 3.0, 4.0, 5.0, 2.0], 0.3)\n  "}
{"task_id":"HumanEval\/1","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input function is string containing multiple groups of nested parentheses goal to\n   separate group into separate strings return list.\n   Separate groups balanced (each open brace closed not nested within each other\n   Ignore spaces in input string.\n   >>> separate_paren_groups('( ) (( )) ))')\n   ['()',']\n    \"\"\"\n","raw":"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']","reduced":"Input function is string containing multiple groups of nested parentheses goal to\n   separate group into separate strings return list.\n   Separate groups balanced (each open brace closed not nested within each other\n   Ignore spaces in input string.\n   >>> separate_paren_groups('( ) (( )) ))')\n   ['()',']"}
{"task_id":"HumanEval\/2","prompt":"def truncate_number(number: float) -> float:\n    \"\"\"\n    positive floating point number decomposed into\n   integer part smaller than number decimals\n   (leftover part smaller than 1)\n   Return decimal part of number\n   >>> truncate_number(3.5)\n   0.5\n    \"\"\"\n","raw":"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5","reduced":"positive floating point number decomposed into\n   integer part smaller than number decimals\n   (leftover part smaller than 1)\n   Return decimal part of number\n   >>> truncate_number(3.5)\n   0.5"}
{"task_id":"HumanEval\/3","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    given list of deposit withdrawal operations bank account starts with\n   zero balance task detect if balance account fallls below zero\n   function return True Otherwise return False.\n   >>> below_zero([1, 2, 3])\n   False\n   >>> below_zero([1, 2, -4, 5])\n   True\n    \"\"\"\n","raw":"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True","reduced":"given list of deposit withdrawal operations bank account starts with\n   zero balance task detect if balance account fallls below zero\n   function return True Otherwise return False.\n   >>> below_zero([1, 2, 3])\n   False\n   >>> below_zero([1, 2, -4, 5])\n   True"}
{"task_id":"HumanEval\/4","prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    list input numbers calculate Mean Absolute Deviation\n   around mean dataset\n   Mean Absolute Deviation average difference between each\n   element centerpoint (mean\n   = average x - x_mean\n   >>> mean_absolute_deviation([1.0, 2.0 3.0 4.0])\n  \n    \"\"\"\n","raw":"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0","reduced":"list input numbers calculate Mean Absolute Deviation\n   around mean dataset\n   Mean Absolute Deviation average difference between each\n   element centerpoint (mean\n   = average x - x_mean\n   >>> mean_absolute_deviation([1.0, 2.0 3.0 4.0])\n  "}
{"task_id":"HumanEval\/5","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert number 'delimeter two consecutive elements input list `numbers\n   intersperse( 4)\n  \n   intersperse([1, 2, 3] 4)\n   [1 4, 2\n    \"\"\"\n","raw":"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]","reduced":"Insert number 'delimeter two consecutive elements input list `numbers\n   intersperse( 4)\n  \n   intersperse([1, 2, 3] 4)\n   [1 4, 2"}
{"task_id":"HumanEval\/6","prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input function string multiple groups nested parentheses separated spaces.\n   each group output deepest level nesting parentheses.\n   (()()) has maximum two levels nesting ((())) has three.\n   >>> parse_nested_parens('(()()) ((())))')\n   [2, 3, 1, 3]\n    \"\"\"\n","raw":"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]","reduced":"Input function string multiple groups nested parentheses separated spaces.\n   each group output deepest level nesting parentheses.\n   (()()) has maximum two levels nesting ((())) has three.\n   >>> parse_nested_parens('(()()) ((())))')\n   [2, 3, 1, 3]"}
{"task_id":"HumanEval\/7","prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter input list strings substring\n   filter_by_substring([] 'a')\n  \n   filter_by_substring(['abc' 'bacd' 'cde' 'array'] 'a')\n   ['abc' 'bacd' 'array']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']","reduced":"Filter input list strings substring\n   filter_by_substring([] 'a')\n  \n   filter_by_substring(['abc' 'bacd' 'cde' 'array'] 'a')\n   ['abc' 'bacd' 'array']"}
{"task_id":"HumanEval\/8","prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    given list of integers return tuple sum product all integers list\n   Empty sum equal to 0 empty product equal 1.\n   >>> sum_product([])\n   (0, 1)\n   >>> sum_product([1, 2, 3, 4])\n   (10, 24)\n    \"\"\"\n","raw":"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)","reduced":"given list of integers return tuple sum product all integers list\n   Empty sum equal to 0 empty product equal 1.\n   >>> sum_product([])\n   (0, 1)\n   >>> sum_product([1, 2, 3, 4])\n   (10, 24)"}
{"task_id":"HumanEval\/9","prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    given list integers generate rolling maximum element found until moment\n   sequence\n   >>> rolling_max([1, 2, 3 4, 2])\n   [1, 2, 3 3 4, 4]\n    \"\"\"\n","raw":"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]","reduced":"given list integers generate rolling maximum element found until moment\n   sequence\n   >>> rolling_max([1, 2, 3 4, 2])\n   [1, 2, 3 3 4, 4]"}
{"task_id":"HumanEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Find shortest palindrome begins with supplied string\n   Algorithm simple:\n   Find longest postfix supplied string palindrome.\n   Append end string reverse prefix before palindromic suffix.\n   >>> make_palindrome('')\n  \n   >>> make_palindrome('cat')\n   'catac'\n   >>> make_palindrome('cata')\n   'catac'\n    \"\"\"\n","raw":"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'","reduced":"Find shortest palindrome begins with supplied string\n   Algorithm simple:\n   Find longest postfix supplied string palindrome.\n   Append end string reverse prefix before palindromic suffix.\n   >>> make_palindrome('')\n  \n   >>> make_palindrome('cat')\n   'catac'\n   >>> make_palindrome('cata')\n   'catac'"}
{"task_id":"HumanEval\/11","prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input two strings a b 1s 0s.\n   Perform binary XOR inputs return result string.\n   >>> string_xor('010', '110')\n   '100'\n    \"\"\"\n","raw":"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'","reduced":"Input two strings a b 1s 0s.\n   Perform binary XOR inputs return result string.\n   >>> string_xor('010', '110')\n   '100'"}
{"task_id":"HumanEval\/12","prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    list strings return longest one Return first multiple\n   strings same length Return None input list empty.\n   >>> longest([])\n   >>> longest(['a', 'b', 'c'])\n  \n   >>> longest(['a', 'bb' 'ccc'])\n   'ccc'\n    \"\"\"\n","raw":"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'","reduced":"list strings return longest one Return first multiple\n   strings same length Return None input list empty.\n   >>> longest([])\n   >>> longest(['a', 'b', 'c'])\n  \n   >>> longest(['a', 'bb' 'ccc'])\n   'ccc'"}
{"task_id":"HumanEval\/13","prompt":"def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  \n    \"\"\"\n","raw":"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5","reduced":"Return greatest common divisor integers b\n   greatest_common_divisor(3, 5)\n  \n   greatest_common_divisor(25, 15)\n  "}
{"task_id":"HumanEval\/14","prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return prefixes shortest to longest input string\n   all_prefixes('abc')\n   ['a' 'ab' 'abc'\n    \"\"\"\n","raw":"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']","reduced":"Return prefixes shortest to longest input string\n   all_prefixes('abc')\n   ['a' 'ab' 'abc'"}
{"task_id":"HumanEval\/15","prompt":"def string_sequence(n: int) -> str:\n    \"\"\"\n    Return string space-delimited numbers 0 n\n   string_sequence(0)\n   '0\n  _sequence(5)\n   '0 1 2 3 4 5'\n    \"\"\"\n","raw":"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'","reduced":"Return string space-delimited numbers 0 n\n   string_sequence(0)\n   '0\n  _sequence(5)\n   '0 1 2 3 4 5'"}
{"task_id":"HumanEval\/16","prompt":"def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given string find distinct characters (regardless case consist\n   count_distinct_characters('xyzXYZ')\n   3\n   count_distinct_characters('Jerry')\n   4\n    \"\"\"\n","raw":"Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4","reduced":"Given string find distinct characters (regardless case consist\n   count_distinct_characters('xyzXYZ')\n   3\n   count_distinct_characters('Jerry')\n   4"}
{"task_id":"HumanEval\/17","prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input function is string representing musical notes special ASCII format.\n   task parse string return list of integers corresponding many beats each\n   last.\n   legend:\n   'o' - whole note lasts four beats\n   'o|' - half note lasts two beats\n   '.|' - quater note lasts one beat\n   >>> parse_music('o o| .| o| ')\n   [4, 2, 1, 2, 4, 4]\n    \"\"\"\n","raw":"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]","reduced":"Input function is string representing musical notes special ASCII format.\n   task parse string return list of integers corresponding many beats each\n   last.\n   legend:\n   'o' - whole note lasts four beats\n   'o|' - half note lasts two beats\n   '.|' - quater note lasts one beat\n   >>> parse_music('o o| .| o| ')\n   [4, 2, 1, 2, 4, 4]"}
{"task_id":"HumanEval\/18","prompt":"def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find times substring found original string overlaping cases.\n   >>>_many_times('', 'a')\n   0\n   >>>_many_times('aaa', 'a')\n   3\n   >>>_times('aaaa' 'aa')\n   3\n    \"\"\"\n","raw":"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3","reduced":"Find times substring found original string overlaping cases.\n   >>>_many_times('', 'a')\n   0\n   >>>_many_times('aaa', 'a')\n   3\n   >>>_times('aaaa' 'aa')\n   3"}
{"task_id":"HumanEval\/19","prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input space-delimited string numberals 'zero to 'nine'\n   Valid choices 'zero 'one 'two 'four 'five 'six 'seven 'eight 'nine'\n   Return string numbers sorted smallest to largest\n   sort_numbers('three one five'\n   three five'\n    \"\"\"\n","raw":"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'","reduced":"Input space-delimited string numberals 'zero to 'nine'\n   Valid choices 'zero 'one 'two 'four 'five 'six 'seven 'eight 'nine'\n   Return string numbers sorted smallest to largest\n   sort_numbers('three one five'\n   three five'"}
{"task_id":"HumanEval\/20","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    supplied list numbers two select return two closest\n   return order (smaller larger\n   find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n   (2.0, 2.2)\n   find_closest_elements([1.0 2.0, 3.0 4.0 5.0 2.0]\n   (2.0, 2.0\n    \"\"\"\n","raw":"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)","reduced":"supplied list numbers two select return two closest\n   return order (smaller larger\n   find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n   (2.0, 2.2)\n   find_closest_elements([1.0 2.0, 3.0 4.0 5.0 2.0]\n   (2.0, 2.0"}
{"task_id":"HumanEval\/21","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    list numbers two elements), apply linear transform\n   smallest number become 0 largest become 1\n   rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n   [0.0, 0.25, 0.5, 0, 1.0]\n    \"\"\"\n","raw":"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]","reduced":"list numbers two elements), apply linear transform\n   smallest number become 0 largest become 1\n   rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n   [0.0, 0.25, 0.5, 0, 1.0]"}
{"task_id":"HumanEval\/22","prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]\n    \"\"\"\n","raw":"Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]","reduced":"Filter python values integers\n   filter_integers(['a' 3.14, 5]\n  \n   filter_integers([1, 2, 3 'abc' {} []]\n   [1, 2 3]"}
{"task_id":"HumanEval\/23","prompt":"def strlen(string: str) -> int:\n    \"\"\"\n    Return length string\n   strlen('')\n   0\n   strlen('abc'\n   3\n    \"\"\"\n","raw":"Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3","reduced":"Return length string\n   strlen('')\n   0\n   strlen('abc'\n   3"}
{"task_id":"HumanEval\/24","prompt":"def largest_divisor(n: int) -> int:\n    \"\"\"\n    given number n find largest number divides n evenly smaller\n   largest_divisor(15)\n   5\n    \"\"\"\n","raw":"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5","reduced":"given number n find largest number divides n evenly smaller\n   largest_divisor(15)\n   5"}
{"task_id":"HumanEval\/25","prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list prime factors given integer order smallest to largest.\n   Each listed number times corresponding times factorization\n   Input number equal product all factors\n   >>> factorize(8)\n   [2, 2, 2]\n   >>> factorize(25)\n   [5, 5]\n   >>> factorize(70)\n   [2, 5, 7]\n    \"\"\"\n","raw":"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]","reduced":"Return list prime factors given integer order smallest to largest.\n   Each listed number times corresponding times factorization\n   Input number equal product all factors\n   >>> factorize(8)\n   [2, 2, 2]\n   >>> factorize(25)\n   [5, 5]\n   >>> factorize(70)\n   [2, 5, 7]"}
{"task_id":"HumanEval\/26","prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    list integers remove elements more than once.\n   Keep order elements same as input.\n   remove_duplicates([1, 2 3 2, 4])\n   [1, 3, 4]\n    \"\"\"\n","raw":"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]","reduced":"list integers remove elements more than once.\n   Keep order elements same as input.\n   remove_duplicates([1, 2 3 2, 4])\n   [1, 3, 4]"}
{"task_id":"HumanEval\/27","prompt":"def flip_case(string: str) -> str:\n    \"\"\"\n    given string flip lowercase characters uppercase uppercase lowercase\n   flip_case('Hello')\n  '\n    \"\"\"\n","raw":"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'","reduced":"given string flip lowercase characters uppercase uppercase lowercase\n   flip_case('Hello')\n  '"}
{"task_id":"HumanEval\/28","prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list strings single string\n  ([])\n  \n   concatenate(['a' 'b' 'c'])\n   'abc'\n    \"\"\"\n","raw":"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'","reduced":"Concatenate list strings single string\n  ([])\n  \n   concatenate(['a' 'b' 'c'])\n   'abc'"}
{"task_id":"HumanEval\/29","prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter input list strings start prefix\n   filter_by_prefix([], 'a')\n  \n   filter_by_prefix(['abc', 'bcd' 'cde', 'array'] 'a')\n   ['abc', 'array']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']","reduced":"Filter input list strings start prefix\n   filter_by_prefix([], 'a')\n  \n   filter_by_prefix(['abc', 'bcd' 'cde', 'array'] 'a')\n   ['abc', 'array']"}
{"task_id":"HumanEval\/30","prompt":"def get_positive(l: list):\n    \"\"\"\n    Return positive numbers list\n   get_positive([-1, 2 -4 5, 6]\n   5 6\n   get_positive([5, 3, -5 2 -3 3 9, 0, 123, 1,]\n   3 2 9 123 1\n    \"\"\"\n","raw":"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]","reduced":"Return positive numbers list\n   get_positive([-1, 2 -4 5, 6]\n   5 6\n   get_positive([5, 3, -5 2 -3 3 9, 0, 123, 1,]\n   3 2 9 123 1"}
{"task_id":"HumanEval\/31","prompt":"def is_prime(n):\n    \"\"\"\n    Return true given number prime false otherwise.\n   >>>_prime(6)\n   False\n   >>>_prime(101)\n   True\n   >>>_prime(11)\n   True\n   >>>_prime(13441)\n   True\n  _prime(61)\n   True\n   >>>_prime(4)\n   False\n  _prime(1)\n   False\n    \"\"\"\n","raw":"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False","reduced":"Return true given number prime false otherwise.\n   >>>_prime(6)\n   False\n   >>>_prime(101)\n   True\n   >>>_prime(11)\n   True\n   >>>_prime(13441)\n   True\n  _prime(61)\n   True\n   >>>_prime(4)\n   False\n  _prime(1)\n   False"}
{"task_id":"HumanEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs coefficients polynomial\n   find_zero x poly(x) = 0.\n   find_zero returns zero point\n   find_zero takes xs even coefficients\n   largest non zero coefficient guarantees\n   solution\n   round(find_zero([1, 2]), 2) f(x) = 1 + 2x\n  \n   round(find_zero([-6, 11, -6, 1]), 2) (x - 1) * (x - 2) - 3) = -6 + 11x - 6x^2 + x^3\n  \n    \"\"\"\n","raw":"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0","reduced":"xs coefficients polynomial\n   find_zero x poly(x) = 0.\n   find_zero returns zero point\n   find_zero takes xs even coefficients\n   largest non zero coefficient guarantees\n   solution\n   round(find_zero([1, 2]), 2) f(x) = 1 + 2x\n  \n   round(find_zero([-6, 11, -6, 1]), 2) (x - 1) * (x - 2) - 3) = -6 + 11x - 6x^2 + x^3\n  "}
{"task_id":"HumanEval\/33","prompt":"def sort_third(l: list):\n    \"\"\"\n    function takes list l returns list l'\n   identical to l in indicies not divisible by three values at indicies divisible three equal\n   to values corresponding indicies l sorted.\n   >>> sort_third([1, 2, 3])\n  \n   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n   [2, 6 3 4 8 9 5]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]","reduced":"function takes list l returns list l'\n   identical to l in indicies not divisible by three values at indicies divisible three equal\n   to values corresponding indicies l sorted.\n   >>> sort_third([1, 2, 3])\n  \n   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n   [2, 6 3 4 8 9 5]"}
{"task_id":"HumanEval\/34","prompt":"def unique(l: list):\n    \"\"\"\n    Return unique elements list\n   unique([5, 3,, 2 9, 0, 123]\n   [0, 2, 3 5 9 123\n    \"\"\"\n","raw":"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]","reduced":"Return unique elements list\n   unique([5, 3,, 2 9, 0, 123]\n   [0, 2, 3 5 9 123"}
{"task_id":"HumanEval\/35","prompt":"def max_element(l: list):\n    \"\"\"\n    Return maximum element list.\n   max_element([1, 2 3]\n  \n   max_element([5, 3, -5 2, -3 9, 0 123, 1,]\n  \n    \"\"\"\n","raw":"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123","reduced":"Return maximum element list.\n   max_element([1, 2 3]\n  \n   max_element([5, 3, -5 2, -3 9, 0 123, 1,]\n  "}
{"task_id":"HumanEval\/36","prompt":"def fizz_buzz(n: int):\n    \"\"\"\n    Return number times digit 7 appears integers divisible 11 or 13.\n   fizz_buzz(50)\n   0\n   >>> fizz_buzz(78)\n   2\n   fizz_buzz(79)\n   3\n    \"\"\"\n","raw":"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3","reduced":"Return number times digit 7 appears integers divisible 11 or 13.\n   fizz_buzz(50)\n   0\n   >>> fizz_buzz(78)\n   2\n   fizz_buzz(79)\n   3"}
{"task_id":"HumanEval\/37","prompt":"def sort_even(l: list):\n    \"\"\"\n    function takes list l returns list l'\n   identical to l odd indicies values even indicies equal\n   even indicies l sorted\n   >>> sort_even([1, 2, 3])\n   [1, 2 3\n   >>> sort_even([5, 6, 3, 4])\n   [3, 6, 5, 4]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]","reduced":"function takes list l returns list l'\n   identical to l odd indicies values even indicies equal\n   even indicies l sorted\n   >>> sort_even([1, 2, 3])\n   [1, 2 3\n   >>> sort_even([5, 6, 3, 4])\n   [3, 6, 5, 4]"}
{"task_id":"HumanEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    input string encoded_cyclic function Returns decoded string\n    \"\"\"\n","raw":"takes as input string encoded with encode_cyclic function. Returns decoded string.","reduced":"input string encoded_cyclic function Returns decoded string"}
{"task_id":"HumanEval\/39","prompt":"def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number Fibonacci number\n   prime_fib(1)\n   2\n   prime_fib(2)\n   3\n   prime_fib(3)\n   5\n   prime_fib(4)\n   13\n   prime_fib(5)\n   89\n    \"\"\"\n","raw":"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89","reduced":"prime_fib returns n-th number Fibonacci number\n   prime_fib(1)\n   2\n   prime_fib(2)\n   3\n   prime_fib(3)\n   5\n   prime_fib(4)\n   13\n   prime_fib(5)\n   89"}
{"task_id":"HumanEval\/40","prompt":"def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes list integers input\n   returns True three distinct elements list\n   False\n   triples_sum_to_zero([1, 3, 5, 0])\n   False\n   triples_sum_to_zero([1, 3, -2,]\n  \n   triples_sum_to_zero([1, 2, 3, 7]\n  \n   triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  \n   triples_sum_to_zero([1])\n  \n    \"\"\"\n","raw":"triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False","reduced":"triples_sum_to_zero takes list integers input\n   returns True three distinct elements list\n   False\n   triples_sum_to_zero([1, 3, 5, 0])\n   False\n   triples_sum_to_zero([1, 3, -2,]\n  \n   triples_sum_to_zero([1, 2, 3, 7]\n  \n   triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  \n   triples_sum_to_zero([1])\n  "}
{"task_id":"HumanEval\/41","prompt":"def car_race_collision(n: int):\n    \"\"\"\n    Imagine road perfectly straight long line.\n   n cars driving left to right;   simultaneously different set cars\n   driving right to left.   two sets cars start far from\n   each other.   All cars move same speed.   Two cars said to collide\n   when car moving left to right hits car moving right to left.\n   cars infinitely sturdy and strong; continue moving\n   trajectory as if not collide.\n   function outputs number of collisions.\n    \"\"\"\n","raw":"Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.","reduced":"Imagine road perfectly straight long line.\n   n cars driving left to right;   simultaneously different set cars\n   driving right to left.   two sets cars start far from\n   each other.   All cars move same speed.   Two cars said to collide\n   when car moving left to right hits car moving right to left.\n   cars infinitely sturdy and strong; continue moving\n   trajectory as if not collide.\n   function outputs number of collisions."}
{"task_id":"HumanEval\/42","prompt":"def incr_list(l: list):\n    \"\"\"\n    Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]\n    \"\"\"\n","raw":"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]","reduced":"Return list elements 1.\n   incr_list([1, 2, 3]\n   [2, 3, 4\n  _list([5, 3, 2 3 9, 0, 123]\n   [6, 4, 3 10, 1, 124]"}
{"task_id":"HumanEval\/43","prompt":"def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes list integers input\n   returns True two distinct elements\n   False\n   pairs_sum_to_zero([1, 3, 5, 0]\n   False\n   pairs_sum_to_zero([1, 3, -2, 1]\n  \n   pairs_sum_to_zero([1, 2, 3, 7]\n   False\n   pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  \n   pairs_sum_to_zero([1]\n  \n    \"\"\"\n","raw":"pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False","reduced":"pairs_sum_to_zero takes list integers input\n   returns True two distinct elements\n   False\n   pairs_sum_to_zero([1, 3, 5, 0]\n   False\n   pairs_sum_to_zero([1, 3, -2, 1]\n  \n   pairs_sum_to_zero([1, 2, 3, 7]\n   False\n   pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  \n   pairs_sum_to_zero([1]\n  "}
{"task_id":"HumanEval\/44","prompt":"def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base input number x\n   return string conversion\n   numbers less 10.\n   change_base(8, 3)\n   '22\n   change_base(8, 2)\n   '1000'\n   change_base(7, 2)\n   '111\n    \"\"\"\n","raw":"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'","reduced":"Change numerical base input number x\n   return string conversion\n   numbers less 10.\n   change_base(8, 3)\n   '22\n   change_base(8, 2)\n   '1000'\n   change_base(7, 2)\n   '111"}
{"task_id":"HumanEval\/45","prompt":"def triangle_area(a, h):\n    \"\"\"\n    length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5\n    \"\"\"\n","raw":"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5","reduced":"length side high return area triangle\n   >>> triangle_area(5, 3)\n   7.5"}
{"task_id":"HumanEval\/46","prompt":"def fib4(n: int):\n    \"\"\"\n    Fib4 number sequence similar Fibbonacci\n   fib4(0) -> 0\n   fib4(1) -> 0\n   fib4(2) -> 2\n   fib4(3) -> 0\n   fib4(n) -> fib4(n-1) + fib4(n-2) +(n-3) + fib4(n-4).\n   write function compute n-th element fib4 number sequence   use recursion\n   fib4(5)\n  \n   fib4(6)\n  \n   fib4(7)\n  \n    \"\"\"\n","raw":"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14","reduced":"Fib4 number sequence similar Fibbonacci\n   fib4(0) -> 0\n   fib4(1) -> 0\n   fib4(2) -> 2\n   fib4(3) -> 0\n   fib4(n) -> fib4(n-1) + fib4(n-2) +(n-3) + fib4(n-4).\n   write function compute n-th element fib4 number sequence   use recursion\n   fib4(5)\n  \n   fib4(6)\n  \n   fib4(7)\n  "}
{"task_id":"HumanEval\/47","prompt":"def median(l: list):\n    \"\"\"\n    Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, 4, 6, 1000, 10, 20]\n  \n    \"\"\"\n","raw":"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0","reduced":"Return median elements list\n   median([3, 1 2 4, 5])\n  \n   median([-10, 4, 6, 1000, 10, 20]\n  "}
{"task_id":"HumanEval\/48","prompt":"def is_palindrome(text: str):\n    \"\"\"\n    Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  \n    \"\"\"\n","raw":"Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False","reduced":"Checks given string palindrome\n   >>> is_palindrome('')\n  \n   is_palindrome('aba')\n  \n   is_palindrome('aaaaa')\n  \n   is_palindrome('zbcd')\n  "}
{"task_id":"HumanEval\/49","prompt":"def modp(n: int, p: int):\n    \"\"\"\n    Return 2 modulo\n   modp(3, 5)\n   3\n   modp(1101, 101)\n   2\n   modp(0, 101)\n   1\n   modp(3, 11)\n   8\n   modp(100, 101)\n   1\n    \"\"\"\n","raw":"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1","reduced":"Return 2 modulo\n   modp(3, 5)\n   3\n   modp(1101, 101)\n   2\n   modp(0, 101)\n   1\n   modp(3, 11)\n   8\n   modp(100, 101)\n   1"}
{"task_id":"HumanEval\/50","prompt":"def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    input string encoded_shift function Returns decoded string\n    \"\"\"\n","raw":"takes as input string encoded with encode_shift function. Returns decoded string.","reduced":"input string encoded_shift function Returns decoded string"}
{"task_id":"HumanEval\/51","prompt":"def remove_vowels(text):\n    \"\"\"\n    remove_vowels function string returns without vowels\n   remove_vowels\n  \n   remove_vowels\"abcdef\\nghijklm\")\n   'bcdf\\nghjklm'\n   remove_vowels('abcdef')\n  \n   remove_vowels('aaaaa')\n  \n   remove_vowels('aaBAA')\n  \n   remove_vowels('zbcd')\n   'zbcd'\n    \"\"\"\n","raw":"remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'","reduced":"remove_vowels function string returns without vowels\n   remove_vowels\n  \n   remove_vowels\"abcdef\\nghijklm\")\n   'bcdf\\nghjklm'\n   remove_vowels('abcdef')\n  \n   remove_vowels('aaaaa')\n  \n   remove_vowels('aaBAA')\n  \n   remove_vowels('zbcd')\n   'zbcd'"}
{"task_id":"HumanEval\/52","prompt":"def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False\n    \"\"\"\n","raw":"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False","reduced":"Return True numbers below threshold\n   below_threshold([1, 2, 4, 10], 100)\n  \n   below_threshold([1, 20, 4, 10], 5)\n   False"}
{"task_id":"HumanEval\/53","prompt":"def add(x: int, y: int):\n    \"\"\"\n    Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  \n    \"\"\"\n","raw":"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12","reduced":"Add two numbers\n   add(2, 3)\n   5\n   add(5, 7)\n  "}
{"task_id":"HumanEval\/54","prompt":"def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check two words same characters\n  _chars'eabcdzzzz' 'dddzzzzzzzddeddabc'\n   True\n  _chars('abcd' 'dddddddabc')\n   True\n  _chars'dddddddabc'\n   True\n  _chars'eabcd' 'dddddddabc')\n   False\n  _chars'abcd' 'dddddddabce')\n   False\n  _chars'eabcdzzzz' 'dddzzzzzzzddddabc')\n   False\n    \"\"\"\n","raw":"Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False","reduced":"Check two words same characters\n  _chars'eabcdzzzz' 'dddzzzzzzzddeddabc'\n   True\n  _chars('abcd' 'dddddddabc')\n   True\n  _chars'dddddddabc'\n   True\n  _chars'eabcd' 'dddddddabc')\n   False\n  _chars'abcd' 'dddddddabce')\n   False\n  _chars'eabcdzzzz' 'dddzzzzzzzddddabc')\n   False"}
{"task_id":"HumanEval\/55","prompt":"def fib(n: int):\n    \"\"\"\n    Return Fibonacci number\n   fib(10)\n   55\n   fib(1)\n  \n   fib(8)\n   21\n    \"\"\"\n","raw":"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21","reduced":"Return Fibonacci number\n   fib(10)\n   55\n   fib(1)\n  \n   fib(8)\n   21"}
{"task_id":"HumanEval\/56","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets string \"<\"\n   return True if opening bracket corresponding closing bracket.\n   correct_bracketing(\"<\")\n   False\n   correct_bracketing<>\")\n   True\n   correct_bracketing<<><>>\")\n   True\n   correct_bracketing<>\")\n   False\n    \"\"\"\n","raw":"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False","reduced":"brackets string \"<\"\n   return True if opening bracket corresponding closing bracket.\n   correct_bracketing(\"<\")\n   False\n   correct_bracketing<>\")\n   True\n   correct_bracketing<<><>>\")\n   True\n   correct_bracketing<>\")\n   False"}
{"task_id":"HumanEval\/57","prompt":"def monotonic(l: list):\n    \"\"\"\n    Return True elements increasing decreasing\n   >>> monotonic([1, 2, 4, 20]\n  \n   monotonic([1, 20, 4, 10]\n  \n   monotonic([4, 1, 0,]\n  \n    \"\"\"\n","raw":"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True","reduced":"Return True elements increasing decreasing\n   >>> monotonic([1, 2, 4, 20]\n  \n   monotonic([1, 20, 4, 10]\n  \n   monotonic([4, 1, 0,]\n  "}
{"task_id":"HumanEval\/58","prompt":"def common(l1: list, l2: list):\n    \"\"\"\n    Return elements two lists\n   common([1, 4, 3, 34, 2, 5 7 5 9 121\n   [1, 5, 653]\n   common([5, 3, 2, 8] [3, 2\n   [2, 3\n    \"\"\"\n","raw":"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]","reduced":"Return elements two lists\n   common([1, 4, 3, 34, 2, 5 7 5 9 121\n   [1, 5, 653]\n   common([5, 3, 2, 8] [3, 2\n   [2, 3"}
{"task_id":"HumanEval\/59","prompt":"def largest_prime_factor(n: int):\n    \"\"\"\n    Return largest prime factor n Assume n > 1 not prime\n   largest_prime_factor(13195)\n  \n   largest_prime_factor(2048)\n  \n    \"\"\"\n","raw":"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2","reduced":"Return largest prime factor n Assume n > 1 not prime\n   largest_prime_factor(13195)\n  \n   largest_prime_factor(2048)\n  "}
{"task_id":"HumanEval\/60","prompt":"def sum_to_n(n: int):\n    \"\"\"\n    sum_to_n function numbers 1 to n\n  _to_n(30)\n  \n   sum_to_n(100)\n   5050\n   sum_to_n(5)\n   15\n   sum_to_n(10)\n   55\n   sum_to_n(1)\n   1\n    \"\"\"\n","raw":"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1","reduced":"sum_to_n function numbers 1 to n\n  _to_n(30)\n  \n   sum_to_n(100)\n   5050\n   sum_to_n(5)\n   15\n   sum_to_n(10)\n   55\n   sum_to_n(1)\n   1"}
{"task_id":"HumanEval\/61","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets string \"(\" \")\".\n   return opening bracket corresponding closing bracket\n   correct_bracketing(\"(\")\n   False\n   correct_bracketing(\"()\")\n  \n   correct_bracketing(\"(()())\")\n  \n   correct_bracketing(\")(()\")\n   False\n    \"\"\"\n","raw":"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False","reduced":"brackets string \"(\" \")\".\n   return opening bracket corresponding closing bracket\n   correct_bracketing(\"(\")\n   False\n   correct_bracketing(\"()\")\n  \n   correct_bracketing(\"(()())\")\n  \n   correct_bracketing(\")(()\")\n   False"}
{"task_id":"HumanEval\/62","prompt":"def derivative(xs: list):\n    \"\"\"\n    xs coefficients polynomial\n   xs[0 + xs[1] xs[2] x^2 +\n   Return derivative polynomial\n   derivative([3, 1, 2 4 5]\n   [1, 4, 12, 20]\n   derivative([1, 2 3]\n   [2, 6]\n    \"\"\"\n","raw":"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]","reduced":"xs coefficients polynomial\n   xs[0 + xs[1] xs[2] x^2 +\n   Return derivative polynomial\n   derivative([3, 1, 2 4 5]\n   [1, 4, 12, 20]\n   derivative([1, 2 3]\n   [2, 6]"}
{"task_id":"HumanEval\/63","prompt":"def fibfib(n: int):\n    \"\"\"\n    FibFib number sequence similar to Fibbonacci defined\n   fibfib(0) == 0\n   fibfib(1) == 0\n   fibfib(2) 1\n   fibfib(n) fibfib(n-1) +(n-2) +(n-3).\n   write function compute n-th element fibfib number sequence\n   >>> fibfib(1)\n  \n   >>> fibfib(5)\n  \n   >>> fibfib(8)\n  \n    \"\"\"\n","raw":"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24","reduced":"FibFib number sequence similar to Fibbonacci defined\n   fibfib(0) == 0\n   fibfib(1) == 0\n   fibfib(2) 1\n   fibfib(n) fibfib(n-1) +(n-2) +(n-3).\n   write function compute n-th element fibfib number sequence\n   >>> fibfib(1)\n  \n   >>> fibfib(5)\n  \n   >>> fibfib(8)\n  "}
{"task_id":"HumanEval\/64","prompt":"def vowels_count(s):\n    \"\"\"\n    Write function vowels_count takes string representing\n   word input returns number of vowels string.\n   Vowels are 'a' 'e' 'i' 'o' 'u' 'y' is\n   vowel only end of given word.\n   Example:\n   >>> vowels_count(\"abcde\")\n   2\n   >>> vowels_count(\"ACEDY\")\n   3\n    \"\"\"\n","raw":"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3","reduced":"Write function vowels_count takes string representing\n   word input returns number of vowels string.\n   Vowels are 'a' 'e' 'i' 'o' 'u' 'y' is\n   vowel only end of given word.\n   Example:\n   >>> vowels_count(\"abcde\")\n   2\n   >>> vowels_count(\"ACEDY\")\n   3"}
{"task_id":"HumanEval\/65","prompt":"def circular_shift(x, shift):\n    \"\"\"\n    Circular shift digits integer x right shift\n   return result string.\n   shift number digits return digits reversed.\n   >>> circular_shift(12, 1)\n   \"21\"\n   >>> circular_shift(12, 2)\n   \"12\"\n    \"\"\"\n","raw":"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"","reduced":"Circular shift digits integer x right shift\n   return result string.\n   shift number digits return digits reversed.\n   >>> circular_shift(12, 1)\n   \"21\"\n   >>> circular_shift(12, 2)\n   \"12\""}
{"task_id":"HumanEval\/66","prompt":"def digitSum(s):\n    \"\"\"\n    Task\n   Write function takes string input returns sum upper characters\n   ASCII codes\n  \n   digitSum(\"\") 0\n   digitSum(\"abAB\") => 131\n   digitSum(\"abcCd\") => 67\n   digitSum(\"helloE\") => 69\n   digitSum(\"woArBld\") => 131\n   digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n","raw":"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153","reduced":"Task\n   Write function takes string input returns sum upper characters\n   ASCII codes\n  \n   digitSum(\"\") 0\n   digitSum(\"abAB\") => 131\n   digitSum(\"abcCd\") => 67\n   digitSum(\"helloE\") => 69\n   digitSum(\"woArBld\") => 131\n   digitSum(\"aAaaaXa\") => 153"}
{"task_id":"HumanEval\/67","prompt":"def fruit_distribution(s,n):\n    \"\"\"\n    task given string represents number apples oranges\n   distributed basket fruit basket contains\n   apples oranges mango fruits string represents total number\n   oranges apples integer total number fruits\n   basket return number mango fruits\n  \n   fruit_distribution(\"5 apples 6 oranges\", 19) ->19 - 5 - 6 = 8\n   fruit_distribution(\"0 apples 1 oranges\",3) -> 3 - 0 - 1 = 2\n   fruit_distribution(\"2 apples 3 oranges\", 100) -> 100 - 2 - 3 = 95\n   fruit_distribution(\"100 apples 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n","raw":"In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19","reduced":"task given string represents number apples oranges\n   distributed basket fruit basket contains\n   apples oranges mango fruits string represents total number\n   oranges apples integer total number fruits\n   basket return number mango fruits\n  \n   fruit_distribution(\"5 apples 6 oranges\", 19) ->19 - 5 - 6 = 8\n   fruit_distribution(\"0 apples 1 oranges\",3) -> 3 - 0 - 1 = 2\n   fruit_distribution(\"2 apples 3 oranges\", 100) -> 100 - 2 - 3 = 95\n   fruit_distribution(\"100 apples 1 oranges\",120) -> 120 - 100 - 1 = 19"}
{"task_id":"HumanEval\/68","prompt":"def pluck(arr):\n    \"\"\"\n    \"Given array representing branch tree non-negative integer nodes\n   task pluck one nodes return it.\n   plucked node be node smallest even value\n   If multiple nodes same smallest even value found return node smallest index.\n   plucked node returned in list, [ smalest_value, its index ]\n   If no even values given array empty return [].\n   Example 1:\n   Input: [4,2,3]\n   Output: [2, 1]\n   Explanation: 2 has smallest even value, 2 has smallest index.\n   Example 2:\n   Input: [1,2,3]\n   Output: [2, 1]\n   Explanation: 2 has smallest even value, 2 has smallest index.\n   Example 3:\n   Input: []\n   Output: []\n  \n   Example 4:\n   Input: [5, 0, 3, 0, 4, 2]\n   Output: [0, 1]\n   Explanation: 0 smallest value,   two zeros,\n   choose first zero, smallest index.\n   Constraints:\n   * 1 <= nodes.length <= 10000\n   * 0 <= node.value\n    \"\"\"\n","raw":"\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value","reduced":"\"Given array representing branch tree non-negative integer nodes\n   task pluck one nodes return it.\n   plucked node be node smallest even value\n   If multiple nodes same smallest even value found return node smallest index.\n   plucked node returned in list, [ smalest_value, its index ]\n   If no even values given array empty return [].\n   Example 1:\n   Input: [4,2,3]\n   Output: [2, 1]\n   Explanation: 2 has smallest even value, 2 has smallest index.\n   Example 2:\n   Input: [1,2,3]\n   Output: [2, 1]\n   Explanation: 2 has smallest even value, 2 has smallest index.\n   Example 3:\n   Input: []\n   Output: []\n  \n   Example 4:\n   Input: [5, 0, 3, 0, 4, 2]\n   Output: [0, 1]\n   Explanation: 0 smallest value,   two zeros,\n   choose first zero, smallest index.\n   Constraints:\n   * 1 <= nodes.length <= 10000\n   * 0 <= node.value"}
{"task_id":"HumanEval\/69","prompt":"def search(lst):\n    \"\"\"\n    given non-empty list of positive integers Return greatest integer greater than\n   zero frequency greater than or equal to value integer.\n   frequency of integer is number of times appears in list.\n   If no value return -1.\n   Examples:\n   search([4, 1, 2, 2 3 1]) == 2\n   search([1, 2 2 3 3 4 4]) 3\n   search([5, 5, 4, 4, 4]) -1\n    \"\"\"\n","raw":"You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1","reduced":"given non-empty list of positive integers Return greatest integer greater than\n   zero frequency greater than or equal to value integer.\n   frequency of integer is number of times appears in list.\n   If no value return -1.\n   Examples:\n   search([4, 1, 2, 2 3 1]) == 2\n   search([1, 2 2 3 3 4 4]) 3\n   search([5, 5, 4, 4, 4]) -1"}
{"task_id":"HumanEval\/70","prompt":"def strange_sort_list(lst):\n    \"\"\"\n    Given list integers return list strange order.\n   Strange sorting start minimum value\n   maximum remaining integers minimum.\n   Examples\n   strange_sort_list([1, 2, 3, 4]) [1, 4, 2 3]\n   strange_sort_list([5, 5, 5, 5]) [5,\n   strange_sort_list([]) [\n    \"\"\"\n","raw":"Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []","reduced":"Given list integers return list strange order.\n   Strange sorting start minimum value\n   maximum remaining integers minimum.\n   Examples\n   strange_sort_list([1, 2, 3, 4]) [1, 4, 2 3]\n   strange_sort_list([5, 5, 5, 5]) [5,\n   strange_sort_list([]) ["}
{"task_id":"HumanEval\/71","prompt":"def triangle_area(a, b, c):\n    \"\"\"\n    lengths three sides triangle Return area\n   triangle rounded to 2 decimal points if form valid triangle.\n   return -1\n   Three sides make valid triangle when sum two sides greater\n   than third side.\n   Example\n   triangle_area(3, 4, 5) ==\n   triangle_area(1, 2, 10) -1\n    \"\"\"\n","raw":"Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1","reduced":"lengths three sides triangle Return area\n   triangle rounded to 2 decimal points if form valid triangle.\n   return -1\n   Three sides make valid triangle when sum two sides greater\n   than third side.\n   Example\n   triangle_area(3, 4, 5) ==\n   triangle_area(1, 2, 10) -1"}
{"task_id":"HumanEval\/72","prompt":"def will_it_fly(q,w):\n    \"\"\"\n    Write function returns True if object q fly False otherwise.\n   object q fly if balanced palindromic list sum elements less than or equal maximum possible weight\n   Example\n   will_it_fly([1, 2], 5) False\n   # 1+2 less than maximum possible weight unbalanced.\n   will_it_fly([3, 2, 3], 1) False\n   # balanced 3+2+3 more than maximum possible weight.\n   will_it_fly([3, 2, 3], 9) True\n   3+2+3 less than maximum possible weight balanced.\n   will_it_fly([3], 5) True\n   # 3 less than maximum possible weight balanced.\n    \"\"\"\n","raw":"Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.","reduced":"Write function returns True if object q fly False otherwise.\n   object q fly if balanced palindromic list sum elements less than or equal maximum possible weight\n   Example\n   will_it_fly([1, 2], 5) False\n   # 1+2 less than maximum possible weight unbalanced.\n   will_it_fly([3, 2, 3], 1) False\n   # balanced 3+2+3 more than maximum possible weight.\n   will_it_fly([3, 2, 3], 9) True\n   3+2+3 less than maximum possible weight balanced.\n   will_it_fly([3], 5) True\n   # 3 less than maximum possible weight balanced."}
{"task_id":"HumanEval\/73","prompt":"def smallest_change(arr):\n    \"\"\"\n    array integers find minimum number elements\n   need changed make array palindromic palindromic array\n   read same backwards and forwards one change change one element to any other element.\n   example\n   smallest_change([1,2,3,5,4,7,9,6]) == 4\n   smallest_change([1, 2, 3, 4 2]) 1\n   smallest_change([1, 2 3 2 1]) 0\n    \"\"\"\n","raw":"Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0","reduced":"array integers find minimum number elements\n   need changed make array palindromic palindromic array\n   read same backwards and forwards one change change one element to any other element.\n   example\n   smallest_change([1,2,3,5,4,7,9,6]) == 4\n   smallest_change([1, 2, 3, 4 2]) 1\n   smallest_change([1, 2 3 2 1]) 0"}
{"task_id":"HumanEval\/74","prompt":"def total_match(lst1, lst2):\n    \"\"\"\n    Write function accepts two lists strings returns list\n   number chars less than other list.\n   if two lists same number chars return first list.\n   Examples\n   total_match([], [])\n   total_match(['hi', 'admin'], ['hI', 'Hi']) ['hI'']\n   total_match(['hi' 'admin']'hi 'project']) ['hi' 'admin']\n   total_match(['hi' 'admin'] ['hI' 'hi' 'hi']) ['hI' 'hi'']\n   total_match(['4'], ['1', '2', '3', '4', '5']) ['4']\n    \"\"\"\n","raw":"Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']","reduced":"Write function accepts two lists strings returns list\n   number chars less than other list.\n   if two lists same number chars return first list.\n   Examples\n   total_match([], [])\n   total_match(['hi', 'admin'], ['hI', 'Hi']) ['hI'']\n   total_match(['hi' 'admin']'hi 'project']) ['hi' 'admin']\n   total_match(['hi' 'admin'] ['hI' 'hi' 'hi']) ['hI' 'hi'']\n   total_match(['4'], ['1', '2', '3', '4', '5']) ['4']"}
{"task_id":"HumanEval\/75","prompt":"def is_multiply_prime(a):\n    \"\"\"\n    Write function returns true given number multiplication 3 prime numbers\n   false otherwise.\n   (a) less 100.\n   Example:\n  _multiply_prime(30) True\n   30 = 2 * 3 * 5\n    \"\"\"\n","raw":"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5","reduced":"Write function returns true given number multiplication 3 prime numbers\n   false otherwise.\n   (a) less 100.\n   Example:\n  _multiply_prime(30) True\n   30 = 2 * 3 * 5"}
{"task_id":"HumanEval\/76","prompt":"def is_simple_power(x, n):\n    \"\"\"\n    task write function returns true number x simple\n   power n false other cases\n   x simple power n n**int=x\n   example\n  _simple_power(1, 4) => true\n  _simple_power(2, 2) => true\n  _simple_power(8, 2) => true\n  _simple_power(3, 2) false\n  _simple_power(3, 1) false\n  _simple_power(5, 3) => false\n    \"\"\"\n","raw":"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false","reduced":"task write function returns true number x simple\n   power n false other cases\n   x simple power n n**int=x\n   example\n  _simple_power(1, 4) => true\n  _simple_power(2, 2) => true\n  _simple_power(8, 2) => true\n  _simple_power(3, 2) false\n  _simple_power(3, 1) false\n  _simple_power(5, 3) => false"}
{"task_id":"HumanEval\/77","prompt":"def iscube(a):\n    \"\"\"\n    Write function takes integer returns True\n   if ingeger cube integer number.\n   Note assume input always valid.\n   Examples:\n   iscube(1) == True\n   iscube(2) == False\n   iscube(-1) == True\n   iscube(64) True\n   iscube(0) True\n   iscube(180) False\n    \"\"\"\n","raw":"Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False","reduced":"Write function takes integer returns True\n   if ingeger cube integer number.\n   Note assume input always valid.\n   Examples:\n   iscube(1) == True\n   iscube(2) == False\n   iscube(-1) == True\n   iscube(64) True\n   iscube(0) True\n   iscube(180) False"}
{"task_id":"HumanEval\/78","prompt":"def hex_key(num):\n    \"\"\"\n    tasked to write function receives\n   hexadecimal number string counts number hexadecimal\n   digits primes (prime number natural number\n   greater than 1 not product of two smaller natural numbers).\n   Hexadecimal digits are 0, 1, 2, 3 4 5 6 7 8 9 A B C D E F.\n   Prime numbers are 2, 3, 5, 7 11 13, 17,...\n   determine number of digits: 2 3 5 7\n   B (=decimal 11), D (=decimal 13).\n   assume input correct or empty string\n   symbols A,B,C,D,E,F uppercase.\n   Examples\n   For num = \"AB\" output 1.\n   num = \"1077E\" output 2.\n   num = \"ABED1A33\" output 4.\n   num = \"123456789ABCDEF0\" output 6.\n   num = \"2020\" output 2.\n    \"\"\"\n","raw":"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.","reduced":"tasked to write function receives\n   hexadecimal number string counts number hexadecimal\n   digits primes (prime number natural number\n   greater than 1 not product of two smaller natural numbers).\n   Hexadecimal digits are 0, 1, 2, 3 4 5 6 7 8 9 A B C D E F.\n   Prime numbers are 2, 3, 5, 7 11 13, 17,...\n   determine number of digits: 2 3 5 7\n   B (=decimal 11), D (=decimal 13).\n   assume input correct or empty string\n   symbols A,B,C,D,E,F uppercase.\n   Examples\n   For num = \"AB\" output 1.\n   num = \"1077E\" output 2.\n   num = \"ABED1A33\" output 4.\n   num = \"123456789ABCDEF0\" output 6.\n   num = \"2020\" output 2."}
{"task_id":"HumanEval\/79","prompt":"def decimal_to_binary(decimal):\n    \"\"\"\n    given number in decimal form task convert to\n   binary format function return string each character representing binary\n   number. Each character in string '0' or '1'.\n   extra couple of characters 'db' at beginning and end of string.\n   extra characters help with format.\n   Examples:\n   decimal_to_binary(15)   # returns \"db1111db\"\n   decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n","raw":"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"","reduced":"given number in decimal form task convert to\n   binary format function return string each character representing binary\n   number. Each character in string '0' or '1'.\n   extra couple of characters 'db' at beginning and end of string.\n   extra characters help with format.\n   Examples:\n   decimal_to_binary(15)   # returns \"db1111db\"\n   decimal_to_binary(32)   # returns \"db100000db\""}
{"task_id":"HumanEval\/80","prompt":"def is_happy(s):\n    \"\"\"\n    given string s\n   task check string happy or not\n   string happy if length least 3 3 consecutive letters distinct\n   example\n   is_happy(a) => False\n   is_happy(aa) => False\n  _happy(abcd) => True\n  _happy(aabb) => False\n   is_happy(adb) => True\n  _happy(xyy) => False\n    \"\"\"\n","raw":"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False","reduced":"given string s\n   task check string happy or not\n   string happy if length least 3 3 consecutive letters distinct\n   example\n   is_happy(a) => False\n   is_happy(aa) => False\n  _happy(abcd) => True\n  _happy(aabb) => False\n   is_happy(adb) => True\n  _happy(xyy) => False"}
{"task_id":"HumanEval\/81","prompt":"def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n   to students. The teacher has been making her own algorithm for grading.\n   The only problem is, she has lost the code she used for grading.\n   She has given you a list of GPAs for some students and you have to write\n   a function that can output a list of letter grades using the following table:\n   GPA   | Letter grade\n   4.0 A+\n   > 3.7 A\n   > 3.3 A-\n   > 3.0 B+\n   > 2.7   B\n   > 2.3 B-\n   > 2.0 C+\n   > 1.7 C\n   > 1.3   C-\n   > 1.0 D+\n   > 0.7 D\n   > 0.0 D-\n   0.0 E\n  \n   Example:\n   grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n","raw":"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']","reduced":"It is the last week of the semester and the teacher has to give the grades\n   to students. The teacher has been making her own algorithm for grading.\n   The only problem is, she has lost the code she used for grading.\n   She has given you a list of GPAs for some students and you have to write\n   a function that can output a list of letter grades using the following table:\n   GPA   | Letter grade\n   4.0 A+\n   > 3.7 A\n   > 3.3 A-\n   > 3.0 B+\n   > 2.7   B\n   > 2.3 B-\n   > 2.0 C+\n   > 1.7 C\n   > 1.3   C-\n   > 1.0 D+\n   > 0.7 D\n   > 0.0 D-\n   0.0 E\n  \n   Example:\n   grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id":"HumanEval\/82","prompt":"def prime_length(string):\n    \"\"\"\n    Write function takes string returns True\n   length prime number False otherwise\n   Examples\n   prime_length('Hello') == True\n   prime_length('abcdcba')\n   prime_length('kittens')\n   prime_length('orange') False\n    \"\"\"\n","raw":"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False","reduced":"Write function takes string returns True\n   length prime number False otherwise\n   Examples\n   prime_length('Hello') == True\n   prime_length('abcdcba')\n   prime_length('kittens')\n   prime_length('orange') False"}
{"task_id":"HumanEval\/83","prompt":"def starts_one_ends(n):\n    \"\"\"\n    Given positive integer n return count numbers n-digit\n   positive integers start end 1.\n    \"\"\"\n","raw":"Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.","reduced":"Given positive integer n return count numbers n-digit\n   positive integers start end 1."}
{"task_id":"HumanEval\/84","prompt":"def solve(N):\n    \"\"\"\n    Given positive integer N return total sum of digits in binary.\n  \n   Example\n   For N = 1000, sum of digits be 1 output \"1\".\n   For N = 150, sum of digits 6 output \"110\".\n   For N = 147, sum of digits 12 output \"1100\".\n  \n   Variables:\n   @N integer\n   Constraints: 0 \u2264 N \u2264 10000.\n   Output:\n   string of binary number\n    \"\"\"\n","raw":"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number","reduced":"Given positive integer N return total sum of digits in binary.\n  \n   Example\n   For N = 1000, sum of digits be 1 output \"1\".\n   For N = 150, sum of digits 6 output \"110\".\n   For N = 147, sum of digits 12 output \"1100\".\n  \n   Variables:\n   @N integer\n   Constraints: 0 \u2264 N \u2264 10000.\n   Output:\n   string of binary number"}
{"task_id":"HumanEval\/85","prompt":"def add(lst):\n    \"\"\"\n    non-empty list of integers add even elements at odd indices.\n   Examples:\n   add([4, 2, 6, 7])> 2\n    \"\"\"\n","raw":"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2","reduced":"non-empty list of integers add even elements at odd indices.\n   Examples:\n   add([4, 2, 6, 7])> 2"}
{"task_id":"HumanEval\/86","prompt":"def anti_shuffle(s):\n    \"\"\"\n    Write function takes string returns ordered version\n   Ordered version string words (separated by space\n   replaced by new word characters arranged\n   ascending order based on ascii value\n   Note keep order words blank spaces sentence.\n   example\n   anti_shuffle('Hi') returns 'Hi'\n   anti_shuffle('hello') returns 'ehllo'\n   anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n","raw":"Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'","reduced":"Write function takes string returns ordered version\n   Ordered version string words (separated by space\n   replaced by new word characters arranged\n   ascending order based on ascii value\n   Note keep order words blank spaces sentence.\n   example\n   anti_shuffle('Hi') returns 'Hi'\n   anti_shuffle('hello') returns 'ehllo'\n   anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'"}
{"task_id":"HumanEval\/87","prompt":"def get_row(lst, x):\n    \"\"\"\n    given 2 dimensional data nested lists\n   similar to matrix unlike matrices\n   each row contain different number columns\n   lst integer x find integers x list\n   return list tuples(x1, y1) (x2 y2)\n   each tuple coordinate (row columns), starting with 0.\n   Sort coordinates by rows ascending order\n   sort coordinates by columns descending order\n  \n   Examples\n   get_row(\n   [1,2,3,4,5,6]\n   [1,2,3,4,1,6]\n   [1,2,3,4,5,1]\n   1) [(0, 0), (1, 4) (1, (2, 5) (2, 0)\n   get_row( 1)\n   get_row( [1], [1, 2, 3]] 3) [(2, 2)\n    \"\"\"\n","raw":"You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]","reduced":"given 2 dimensional data nested lists\n   similar to matrix unlike matrices\n   each row contain different number columns\n   lst integer x find integers x list\n   return list tuples(x1, y1) (x2 y2)\n   each tuple coordinate (row columns), starting with 0.\n   Sort coordinates by rows ascending order\n   sort coordinates by columns descending order\n  \n   Examples\n   get_row(\n   [1,2,3,4,5,6]\n   [1,2,3,4,1,6]\n   [1,2,3,4,5,1]\n   1) [(0, 0), (1, 4) (1, (2, 5) (2, 0)\n   get_row( 1)\n   get_row( [1], [1, 2, 3]] 3) [(2, 2)"}
{"task_id":"HumanEval\/88","prompt":"def sort_array(array):\n    \"\"\"\n    array non-negative integers return copy array after sorting\n   sort array ascending order if first last odd\n   sort descending order if even.\n   Note\n   don't change array.\n   Examples:\n   * sort_array([]) => []\n   * sort_array([5]) =>\n   * sort_array([2, 4, 3, 0, 1, 5]) => [0 1, 2, 3, 4, 5]\n   * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","raw":"Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]","reduced":"array non-negative integers return copy array after sorting\n   sort array ascending order if first last odd\n   sort descending order if even.\n   Note\n   don't change array.\n   Examples:\n   * sort_array([]) => []\n   * sort_array([5]) =>\n   * sort_array([2, 4, 3, 0, 1, 5]) => [0 1, 2, 3, 4, 5]\n   * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id":"HumanEval\/89","prompt":"def encrypt(s):\n    \"\"\"\n    Create function encrypt takes string argument\n   returns string encrypted rotated.\n   alphabet rotated letters\n   shift down two multiplied two places.\n   example\n   encrypt('hi') returns 'lm'\n   encrypt('asdfghjkl') returns 'ewhjklnop'\n   encrypt('gf') returns 'kj'\n   encrypt('et') returns 'ix'\n    \"\"\"\n","raw":"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'","reduced":"Create function encrypt takes string argument\n   returns string encrypted rotated.\n   alphabet rotated letters\n   shift down two multiplied two places.\n   example\n   encrypt('hi') returns 'lm'\n   encrypt('asdfghjkl') returns 'ewhjklnop'\n   encrypt('gf') returns 'kj'\n   encrypt('et') returns 'ix'"}
{"task_id":"HumanEval\/90","prompt":"def next_smallest(lst):\n    \"\"\"\n    given list integers.\n   Write function next_smallest( returns 2nd smallest element\n   Return None no element\n  \n   next_smallest([1, 2 3 4, 5]) == 2\n   next_smallest([5, 1, 4 3, 2])\n   next_smallest( None\n   next_smallest([1, 1]) None\n    \"\"\"\n","raw":"You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None","reduced":"given list integers.\n   Write function next_smallest( returns 2nd smallest element\n   Return None no element\n  \n   next_smallest([1, 2 3 4, 5]) == 2\n   next_smallest([5, 1, 4 3, 2])\n   next_smallest( None\n   next_smallest([1, 1]) None"}
{"task_id":"HumanEval\/91","prompt":"def is_bored(S):\n    \"\"\"\n    given string of words task count number\n   of boredoms boredom sentence starts with word \"I\".\n   Sentences delimited by '.', '?' or '!'.\n  \n   example:\n   >>> is_bored(\"Hello world\")\n   0\n  _bored( sky blue. sun shining. love this weather\")\n   1\n    \"\"\"\n","raw":"You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1","reduced":"given string of words task count number\n   of boredoms boredom sentence starts with word \"I\".\n   Sentences delimited by '.', '?' or '!'.\n  \n   example:\n   >>> is_bored(\"Hello world\")\n   0\n  _bored( sky blue. sun shining. love this weather\")\n   1"}
{"task_id":"HumanEval\/92","prompt":"def any_int(x, y, z):\n    \"\"\"\n    Create function takes 3 numbers.\n   Returns true if one numbers equal sum other two all numbers integers.\n   Returns false other cases.\n  \n   Examples\n   any_int(5, 2, 7) True\n  \n  _int(3, 2, 2) False\n  _int(3, -2, 1) True\n  \n  _int(3.6, -2.2, 2) False\n    \"\"\"\n","raw":"Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False","reduced":"Create function takes 3 numbers.\n   Returns true if one numbers equal sum other two all numbers integers.\n   Returns false other cases.\n  \n   Examples\n   any_int(5, 2, 7) True\n  \n  _int(3, 2, 2) False\n  _int(3, -2, 1) True\n  \n  _int(3.6, -2.2, 2) False"}
{"task_id":"HumanEval\/93","prompt":"def encode(message):\n    \"\"\"\n    Write function takes message encodes\n   swaps case letters replaces vowels\n   message with letter appears 2 places ahead\n   vowel english alphabet.\n   Assume only letters.\n  \n   Examples:\n   >>> encode('test')\n   'TGST'\n   >>> encode('This is message')\n   'tHKS KS C MGSSCGG'\n    \"\"\"\n","raw":"Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'","reduced":"Write function takes message encodes\n   swaps case letters replaces vowels\n   message with letter appears 2 places ahead\n   vowel english alphabet.\n   Assume only letters.\n  \n   Examples:\n   >>> encode('test')\n   'TGST'\n   >>> encode('This is message')\n   'tHKS KS C MGSSCGG'"}
{"task_id":"HumanEval\/94","prompt":"def skjkasdkd(lst):\n    \"\"\"\n    given list integers\n   find largest prime value return sum digits\n   Examples\n   lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output 10\n   = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output 25\n   [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output 13\n   lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output 11\n   [0,81,12,3,1,21] output 3\n   = [0,8,1,2,1,7] output 7\n    \"\"\"\n","raw":"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7","reduced":"given list integers\n   find largest prime value return sum digits\n   Examples\n   lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output 10\n   = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output 25\n   [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output 13\n   lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output 11\n   [0,81,12,3,1,21] output 3\n   = [0,8,1,2,1,7] output 7"}
{"task_id":"HumanEval\/95","prompt":"def check_dict_case(dict):\n    \"\"\"\n    dictionary return True if all keys strings lower\n   or upper case else return False.\n   function return False is dictionary empty.\n   Examples\n   check_dict_case({\"a\":\"apple\", \"b:\"banana\" return True.\n   check_dict_case({\"a:\"apple\",\"banana\", return False.\n   check_dict_case({\"a:\"apple\",\"banana\",\"apple return False.\n   check_dict_case({\"Name:\"John\", \"Age:\"36\", \"City:\"Houston\"} return False.\n   check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" return True\n    \"\"\"\n","raw":"Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.","reduced":"dictionary return True if all keys strings lower\n   or upper case else return False.\n   function return False is dictionary empty.\n   Examples\n   check_dict_case({\"a\":\"apple\", \"b:\"banana\" return True.\n   check_dict_case({\"a:\"apple\",\"banana\", return False.\n   check_dict_case({\"a:\"apple\",\"banana\",\"apple return False.\n   check_dict_case({\"Name:\"John\", \"Age:\"36\", \"City:\"Houston\"} return False.\n   check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" return True"}
{"task_id":"HumanEval\/96","prompt":"def count_up_to(n):\n    \"\"\"\n    Implement function takes non-negative integer returns array first n\n   integers prime numbers less n\n  \n   count_up_to(5) [2,3]\n   count_up_to(11) [2,3,5,7]\n   count_up_to(0)\n   count_up_to(20) [2,3,5,7,11,13,17,19]\n   count_up_to(1)\n   count_up_to(18) [2,3,13,17]\n    \"\"\"\n","raw":"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]","reduced":"Implement function takes non-negative integer returns array first n\n   integers prime numbers less n\n  \n   count_up_to(5) [2,3]\n   count_up_to(11) [2,3,5,7]\n   count_up_to(0)\n   count_up_to(20) [2,3,5,7,11,13,17,19]\n   count_up_to(1)\n   count_up_to(18) [2,3,13,17]"}
{"task_id":"HumanEval\/97","prompt":"def multiply(a, b):\n    \"\"\"\n    function two integers returns\n   product unit digits\n   Assume input valid\n   Examples\n   multiply(148, 412) return 16.\n   multiply(19, 28) return 72\n   multiply(2020, 1851) return 0\n   multiply(14,-15) return 20.\n    \"\"\"\n","raw":"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.","reduced":"function two integers returns\n   product unit digits\n   Assume input valid\n   Examples\n   multiply(148, 412) return 16.\n   multiply(19, 28) return 72\n   multiply(2020, 1851) return 0\n   multiply(14,-15) return 20."}
{"task_id":"HumanEval\/98","prompt":"def count_upper(s):\n    \"\"\"\n    string s count uppercase vowels indices\n  \n   example\n   count_upper('aBCdEf') returns 1\n  ('abcdefg') returns 0\n  _upper('dBBE') returns 0\n    \"\"\"\n","raw":"Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0","reduced":"string s count uppercase vowels indices\n  \n   example\n   count_upper('aBCdEf') returns 1\n  ('abcdefg') returns 0\n  _upper('dBBE') returns 0"}
{"task_id":"HumanEval\/99","prompt":"def closest_integer(value):\n    \"\"\"\n    Create function takes value representing number\n   returns closest integer If number equidistant\n   from two integers round away from zero.\n   Examples\n   >>> closest_integer(\"10\")\n   10\n   >>> closest_integer(\"15.3\")\n   15\n   Note\n   Rounding away from zero means if given number equidistant\n   from two integers one return\n   farthest from zero. example closest_integer(\"14.5\")\n   return 15 closest_integer(\"-14.5\") return.\n    \"\"\"\n","raw":"Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.","reduced":"Create function takes value representing number\n   returns closest integer If number equidistant\n   from two integers round away from zero.\n   Examples\n   >>> closest_integer(\"10\")\n   10\n   >>> closest_integer(\"15.3\")\n   15\n   Note\n   Rounding away from zero means if given number equidistant\n   from two integers one return\n   farthest from zero. example closest_integer(\"14.5\")\n   return 15 closest_integer(\"-14.5\") return."}
{"task_id":"HumanEval\/100","prompt":"def make_a_pile(n):\n    \"\"\"\n    positive integer n make pile of n levels stones\n   first level has n stones.\n   number of stones next level\n   - next odd number if n is odd.\n   next even number if n is even.\n   Return number stones each level list element at index\n   i represents number stones level (i+1).\n   Examples\n   >>> make_a_pile(3)\n   [3, 5, 7]\n    \"\"\"\n","raw":"Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]","reduced":"positive integer n make pile of n levels stones\n   first level has n stones.\n   number of stones next level\n   - next odd number if n is odd.\n   next even number if n is even.\n   Return number stones each level list element at index\n   i represents number stones level (i+1).\n   Examples\n   >>> make_a_pile(3)\n   [3, 5, 7]"}
{"task_id":"HumanEval\/101","prompt":"def words_string(s):\n    \"\"\"\n    given string of words separated by commas or spaces task is\n   split string into words return array words.\n  \n   example\n   words_string(\"Hi, my name is John\") [\"Hi\", \"my\", \"John\"]\n   words_string(\"One, two, three, four five, six\") [\"One\", \"two\", \"six\"]\n    \"\"\"\n","raw":"You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]","reduced":"given string of words separated by commas or spaces task is\n   split string into words return array words.\n  \n   example\n   words_string(\"Hi, my name is John\") [\"Hi\", \"my\", \"John\"]\n   words_string(\"One, two, three, four five, six\") [\"One\", \"two\", \"six\"]"}
{"task_id":"HumanEval\/102","prompt":"def choose_num(x, y):\n    \"\"\"\n    function takes positive numbers x y returns\n   biggest integer number range [x, y] inclusive If\n   no such number return -1.\n   example\n   choose_num(12, 15) = 14\n   choose_num(13, 12) = -1\n    \"\"\"\n","raw":"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1","reduced":"function takes positive numbers x y returns\n   biggest integer number range [x, y] inclusive If\n   no such number return -1.\n   example\n   choose_num(12, 15) = 14\n   choose_num(13, 12) = -1"}
{"task_id":"HumanEval\/103","prompt":"def rounded_avg(n, m):\n    \"\"\"\n    given two positive integers n m compute\n   average integers n through m\n   Round answer nearest integer convert to binary\n   If n greater than m return -1.\n   Example\n   rounded_avg(1, 5) => \"0b11\"\n   rounded_avg(7, 5) => -1\n   rounded_avg(10, 20) => \"0b1111\n  _avg(20, 33) \"0b11010\n    \"\"\"\n","raw":"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"","reduced":"given two positive integers n m compute\n   average integers n through m\n   Round answer nearest integer convert to binary\n   If n greater than m return -1.\n   Example\n   rounded_avg(1, 5) => \"0b11\"\n   rounded_avg(7, 5) => -1\n   rounded_avg(10, 20) => \"0b1111\n  _avg(20, 33) \"0b11010"}
{"task_id":"HumanEval\/104","prompt":"def unique_digits(x):\n    \"\"\"\n    list positive integers return sorted list\n   elements even digit\n   Returned list sorted increasing order\n  \n   example\n   >>> unique_digits([15, 33, 1422, 1])\n   [1, 15, 33]\n   >>> unique_digits([152, 323, 1422, 10])\n  \n    \"\"\"\n","raw":"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []","reduced":"list positive integers return sorted list\n   elements even digit\n   Returned list sorted increasing order\n  \n   example\n   >>> unique_digits([15, 33, 1422, 1])\n   [1, 15, 33]\n   >>> unique_digits([152, 323, 1422, 10])\n  "}
{"task_id":"HumanEval\/105","prompt":"def by_length(arr):\n    \"\"\"\n    array integers sort between 1 and 9\n   reverse array replace each digit corresponding name\n   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n  \n   arr = [2, 1, 1, 4, 5, 8, 2, 3]  \n   sort arr -> [1, 1, 2, 3, 4, 5, 8]\n   reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\n  \n   array empty return empty array\n   arr = []\n   return [\n  \n   array strange number ignore\n   arr = [1, -1, 55]\n   sort arr -> [-1, 1, 55]\n   reverse arr -> [55, 1, -1]\n   return = ['One']\n    \"\"\"\n","raw":"Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']","reduced":"array integers sort between 1 and 9\n   reverse array replace each digit corresponding name\n   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n  \n   arr = [2, 1, 1, 4, 5, 8, 2, 3]  \n   sort arr -> [1, 1, 2, 3, 4, 5, 8]\n   reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\n  \n   array empty return empty array\n   arr = []\n   return [\n  \n   array strange number ignore\n   arr = [1, -1, 55]\n   sort arr -> [-1, 1, 55]\n   reverse arr -> [55, 1, -1]\n   return = ['One']"}
{"task_id":"HumanEval\/106","prompt":"def f(n):\n    \"\"\"\n    Implement function f takes n parameter\n   returns list size n value element index i factorial i if even\n   sum of numbers from 1 to i otherwise\n   i starts from 1.\n   factorial i multiplication numbers from 1 to i (1 * 2 * ... * i).\n   Example\n   f(5) [1, 2, 6, 24, 15]\n    \"\"\"\n","raw":"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]","reduced":"Implement function f takes n parameter\n   returns list size n value element index i factorial i if even\n   sum of numbers from 1 to i otherwise\n   i starts from 1.\n   factorial i multiplication numbers from 1 to i (1 * 2 * ... * i).\n   Example\n   f(5) [1, 2, 6, 24, 15]"}
{"task_id":"HumanEval\/107","prompt":"def even_odd_palindrome(n):\n    \"\"\"\n    Given positive integer n return tuple number even odd\n   integer palindromes range(1, n), inclusive\n   Example 1:\n   Input: 3\n   Output: (1, 2)\n   Explanation:\n   Integer palindrome are 1, 2, 3. one even two odd.\n   Example 2:\n   Input: 12\n   Output: (4, 6)\n   Explanation:\n   Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four them even, 6 odd.\n   Note:\n   1. 1 <= n <= 10^3\n   2. returned tuple number even odd integer palindromes respectively.\n    \"\"\"\n","raw":"Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.","reduced":"Given positive integer n return tuple number even odd\n   integer palindromes range(1, n), inclusive\n   Example 1:\n   Input: 3\n   Output: (1, 2)\n   Explanation:\n   Integer palindrome are 1, 2, 3. one even two odd.\n   Example 2:\n   Input: 12\n   Output: (4, 6)\n   Explanation:\n   Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four them even, 6 odd.\n   Note:\n   1. 1 <= n <= 10^3\n   2. returned tuple number even odd integer palindromes respectively."}
{"task_id":"HumanEval\/108","prompt":"def count_nums(arr):\n    \"\"\"\n    Write function count_nums takes array integers returns\n   number elements sum digits > 0.\n   number negative first signed digit negative\n   e.g -123 signed digits -1, 2 3.\n   >>> count_nums([]) == 0\n   count_nums([-1, 11]) 1\n   >>> count_nums([1, 1, 2]) 3\n    \"\"\"\n","raw":"Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3","reduced":"Write function count_nums takes array integers returns\n   number elements sum digits > 0.\n   number negative first signed digit negative\n   e.g -123 signed digits -1, 2 3.\n   >>> count_nums([]) == 0\n   count_nums([-1, 11]) 1\n   >>> count_nums([1, 1, 2]) 3"}
{"task_id":"HumanEval\/109","prompt":"def move_one_ball(arr):\n    \"\"\"\n    array 'arr of N integers arr[1] ...[N]\n   numbers in randomly ordered task to determine if\n   possible to get array sorted in non-decreasing order by performing\n   following operation on given array:\n   allowed to perform right shift operation any number times.\n  \n   right shift operation means shifting all elements array by one\n   position in right direction last element moved to\n   starting position in array 0th index.\n   If possible to obtain sorted array by performing above operation\n   return True else return False.\n   If array empty return True.\n   given list guaranteed have unique elements.\n   Example\n  \n   move_one_ball([3, 4, 5, 1, 2])==>True\n   By performin 2 right shift operations non-decreasing order\n   achieved for given array.\n   move_one_ball([3, 5, 4, 1, 2])==>False\n   not possible to get non-decreasing order for given\n   array by performing number right shift operations\n    \"\"\"\n","raw":"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.","reduced":"array 'arr of N integers arr[1] ...[N]\n   numbers in randomly ordered task to determine if\n   possible to get array sorted in non-decreasing order by performing\n   following operation on given array:\n   allowed to perform right shift operation any number times.\n  \n   right shift operation means shifting all elements array by one\n   position in right direction last element moved to\n   starting position in array 0th index.\n   If possible to obtain sorted array by performing above operation\n   return True else return False.\n   If array empty return True.\n   given list guaranteed have unique elements.\n   Example\n  \n   move_one_ball([3, 4, 5, 1, 2])==>True\n   By performin 2 right shift operations non-decreasing order\n   achieved for given array.\n   move_one_ball([3, 5, 4, 1, 2])==>False\n   not possible to get non-decreasing order for given\n   array by performing number right shift operations"}
{"task_id":"HumanEval\/110","prompt":"def exchange(lst1, lst2):\n    \"\"\"\n    problem implement function takes two lists of numbers\n   determines possible exchange of elements\n   between make lst1 list even numbers.\n   no limit on number of exchanged elements between lst1 and lst2.\n   If possible to exchange elements between lst1 and lst2 make\n   all elements of lst1 even return \"YES\".\n   Otherwise return \"NO\".\n   example\n   exchange([1, 2, 3, 4],) => \"YES\"\n   exchange([1, 2, 3, 4], [1 5 3, 4]) => \"NO\"\n   assumed input lists non-empty\n    \"\"\"\n","raw":"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.","reduced":"problem implement function takes two lists of numbers\n   determines possible exchange of elements\n   between make lst1 list even numbers.\n   no limit on number of exchanged elements between lst1 and lst2.\n   If possible to exchange elements between lst1 and lst2 make\n   all elements of lst1 even return \"YES\".\n   Otherwise return \"NO\".\n   example\n   exchange([1, 2, 3, 4],) => \"YES\"\n   exchange([1, 2, 3, 4], [1 5 3, 4]) => \"NO\"\n   assumed input lists non-empty"}
{"task_id":"HumanEval\/111","prompt":"def histogram(test):\n    \"\"\"\n    string space separated lowercase letters return dictionary\n   letter most repetition corresponding count.\n   several letters same occurrence return all\n  \n   Example\n   histogram('a b c') == {'a': 1 'b' 1 1}\n   histogram('a b b a') 2 'b' 2}\n   histogram('a b c b') {'a' 2 'b' 2}\n   histogram('b b a') == {'b' 4}\n   histogram('')\n    \"\"\"\n","raw":"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}","reduced":"string space separated lowercase letters return dictionary\n   letter most repetition corresponding count.\n   several letters same occurrence return all\n  \n   Example\n   histogram('a b c') == {'a': 1 'b' 1 1}\n   histogram('a b b a') 2 'b' 2}\n   histogram('a b c b') {'a' 2 'b' 2}\n   histogram('b b a') == {'b' 4}\n   histogram('')"}
{"task_id":"HumanEval\/112","prompt":"def reverse_delete(s,c):\n    \"\"\"\n    Task\n   given two strings s and c characters in s equal to c\n   check if result string palindrome.\n   string called palindrome if reads same backward as forward\n   return tuple containing result string True\/False for check.\n   Example\n   s = \"abcde\", c = \"ae\", result be ('bcd',False)\n   s = \"abcdef\", c = \"b\"   result ('acdef',False)\n   s = \"abcdedcba\", c = \"ab\", result ('cdedc',True)\n    \"\"\"\n","raw":"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True\/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)","reduced":"Task\n   given two strings s and c characters in s equal to c\n   check if result string palindrome.\n   string called palindrome if reads same backward as forward\n   return tuple containing result string True\/False for check.\n   Example\n   s = \"abcde\", c = \"ae\", result be ('bcd',False)\n   s = \"abcdef\", c = \"b\"   result ('acdef',False)\n   s = \"abcdedcba\", c = \"ab\", result ('cdedc',True)"}
{"task_id":"HumanEval\/113","prompt":"def odd_count(lst):\n    \"\"\"\n    list of strings each string digits return list.\n   Each element i output number of odd elements in\n   string i input.\" i's replaced by number\n   odd digits in i'th string input.\n   >>> odd_count(['1234567'])\n   [ number of odd elements 4n str4ng 4 4nput.\"]\n   >>> odd_count(['3',\"11111111\"])\n   [ number of odd elements 1n str1ng 1 1nput\n   number of odd elements 8n str8ng 8 8nput.\"]\n    \"\"\"\n","raw":"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]","reduced":"list of strings each string digits return list.\n   Each element i output number of odd elements in\n   string i input.\" i's replaced by number\n   odd digits in i'th string input.\n   >>> odd_count(['1234567'])\n   [ number of odd elements 4n str4ng 4 4nput.\"]\n   >>> odd_count(['3',\"11111111\"])\n   [ number of odd elements 1n str1ng 1 1nput\n   number of odd elements 8n str8ng 8 8nput.\"]"}
{"task_id":"HumanEval\/114","prompt":"def minSubArraySum(nums):\n    \"\"\"\n    array integers nums find minimum sum non sub-array\n   nums\n  \n   minSubArraySum([2, 3, 4,]) == 1\n   minSubArraySum([-1, -2, -3]) -6\n    \"\"\"\n","raw":"Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6","reduced":"array integers nums find minimum sum non sub-array\n   nums\n  \n   minSubArraySum([2, 3, 4,]) == 1\n   minSubArraySum([-1, -2, -3]) -6"}
{"task_id":"HumanEval\/115","prompt":"def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    given rectangular grid of wells Each row represents single well\n   each 1 represents single unit of water\n   Each well has corresponding bucket extract water\n   all buckets have same capacity\n   task use buckets to empty wells\n   Output number times lower buckets\n   Example 1:\n   Input:\n   grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n   bucket_capacity : 1\n   Output 6\n   Example 2:\n   Input:\n   grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1] [0,1,1,1]]\n   bucket_capacity : 2\n   Output: 5\n  \n   Example 3:\n   Input\n   grid : [[0,0,0], [0,0,0]]\n   bucket_capacity : 5\n   Output: 0\n   Constraints:\n   all wells have same length\n   1 <= grid.length <= 10^2\n   * 1 <=[:,1].length <= 10^2\n   grid[i][j] -> 0 | 1\n   * 1 <= capacity <= 10\n    \"\"\"\n","raw":"You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10","reduced":"given rectangular grid of wells Each row represents single well\n   each 1 represents single unit of water\n   Each well has corresponding bucket extract water\n   all buckets have same capacity\n   task use buckets to empty wells\n   Output number times lower buckets\n   Example 1:\n   Input:\n   grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n   bucket_capacity : 1\n   Output 6\n   Example 2:\n   Input:\n   grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1] [0,1,1,1]]\n   bucket_capacity : 2\n   Output: 5\n  \n   Example 3:\n   Input\n   grid : [[0,0,0], [0,0,0]]\n   bucket_capacity : 5\n   Output: 0\n   Constraints:\n   all wells have same length\n   1 <= grid.length <= 10^2\n   * 1 <=[:,1].length <= 10^2\n   grid[i][j] -> 0 | 1\n   * 1 <= capacity <= 10"}
{"task_id":"HumanEval\/116","prompt":"def sort_array(arr):\n    \"\"\"\n    sort array non-negative integers according\n   number ones binary representation ascending order\n   similar number sort based decimal value\n   implemented\n   sort_array([1, 5, 2, 3, 4]) [1, 2, 3, 4, 5]\n   sort_array([-2, -3, -4, -5, -6] [-6, -5, -4, -3, -2]\n   sort_array([1, 0, 2, 3, 4] 1, 2 3 4]\n    \"\"\"\n","raw":"In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]","reduced":"sort array non-negative integers according\n   number ones binary representation ascending order\n   similar number sort based decimal value\n   implemented\n   sort_array([1, 5, 2, 3, 4]) [1, 2, 3, 4, 5]\n   sort_array([-2, -3, -4, -5, -6] [-6, -5, -4, -3, -2]\n   sort_array([1, 0, 2, 3, 4] 1, 2 3 4]"}
{"task_id":"HumanEval\/117","prompt":"def select_words(s, n):\n    \"\"\"\n    Given string s natural number n tasked implement\n   function returns list words string s contain\n   n consonants order appear string.\n   If string s empty function return empty list.\n   Note assume input string contains only letters spaces.\n   Examples:\n   select_words(\"Mary had little lamb\", 4) [\"little\"]\n   select_words(\"Mary had little lamb\", 3) [\"Mary\", \"lamb\"]\n   select_words(\"simple white space\", 2)\n   select_words(\"Hello world\", 4) == [\"world\"]\n   select_words(\"Uncle sam\", 3) [\"Uncle\"]\n    \"\"\"\n","raw":"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]","reduced":"Given string s natural number n tasked implement\n   function returns list words string s contain\n   n consonants order appear string.\n   If string s empty function return empty list.\n   Note assume input string contains only letters spaces.\n   Examples:\n   select_words(\"Mary had little lamb\", 4) [\"little\"]\n   select_words(\"Mary had little lamb\", 3) [\"Mary\", \"lamb\"]\n   select_words(\"simple white space\", 2)\n   select_words(\"Hello world\", 4) == [\"world\"]\n   select_words(\"Uncle sam\", 3) [\"Uncle\"]"}
{"task_id":"HumanEval\/118","prompt":"def get_closest_vowel(word):\n    \"\"\"\n    given word. task find closest vowel between\n   two consonants right side word (case sensitive).\n  \n   Vowels beginning ending doesn't count Return empty string if didn't\n   find vowel met above condition.\n   assume given string contains English letter only.\n   Example:\n   get_closest_vowel(\"yogurt\")> \"u\"\n   get_closest_vowel(\"FULL\")>\"\n   get_closest_vowel(\"quick\")\"\n   get_closest_vowel(\"ab\")>\"\n    \"\"\"\n","raw":"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"","reduced":"given word. task find closest vowel between\n   two consonants right side word (case sensitive).\n  \n   Vowels beginning ending doesn't count Return empty string if didn't\n   find vowel met above condition.\n   assume given string contains English letter only.\n   Example:\n   get_closest_vowel(\"yogurt\")> \"u\"\n   get_closest_vowel(\"FULL\")>\"\n   get_closest_vowel(\"quick\")\"\n   get_closest_vowel(\"ab\")>\""}
{"task_id":"HumanEval\/119","prompt":"def match_parens(lst):\n    \"\"\"\n    given list of two strings both open\n   parentheses '(' or close parentheses ')' only.\n   job check if possible to concatenate two strings in\n   order resulting string good.\n   string S considered good if all parentheses in S\n   balanced. example string '(())()' good string\n   '())' not.\n   Return 'Yes' if make good string return 'No' otherwise.\n   Examples:\n   match_parens(['()(', ')']) == 'Yes'\n   match_parens([')', ')']) == 'No'\n    \"\"\"\n","raw":"You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'","reduced":"given list of two strings both open\n   parentheses '(' or close parentheses ')' only.\n   job check if possible to concatenate two strings in\n   order resulting string good.\n   string S considered good if all parentheses in S\n   balanced. example string '(())()' good string\n   '())' not.\n   Return 'Yes' if make good string return 'No' otherwise.\n   Examples:\n   match_parens(['()(', ')']) == 'Yes'\n   match_parens([')', ')']) == 'No'"}
{"task_id":"HumanEval\/120","prompt":"def maximum(arr, k):\n    \"\"\"\n    array arr integers positive integer k return sorted list\n   length k maximum numbers arr\n   Example 1:\n   Input arr = [-3, -4, 5] k = 3\n   Output: [-4, -3, 5]\n   Example 2:\n   Input arr = [4, -4, 4] k = 2\n   Output: [4, 4]\n   Example 3:\n   Input arr = [-3, 2, 1, 2, -1, -2, 1] k = 1\n   Output [2]\n   Note\n   1. length array range [1, 1000]\n   2. elements array range [-1000, 1000]\n   3. 0 <= k < len(arr)\n    \"\"\"\n","raw":"Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)","reduced":"array arr integers positive integer k return sorted list\n   length k maximum numbers arr\n   Example 1:\n   Input arr = [-3, -4, 5] k = 3\n   Output: [-4, -3, 5]\n   Example 2:\n   Input arr = [4, -4, 4] k = 2\n   Output: [4, 4]\n   Example 3:\n   Input arr = [-3, 2, 1, 2, -1, -2, 1] k = 1\n   Output [2]\n   Note\n   1. length array range [1, 1000]\n   2. elements array range [-1000, 1000]\n   3. 0 <= k < len(arr)"}
{"task_id":"HumanEval\/121","prompt":"def solution(lst):\n    \"\"\"\n    non-empty list integers return sum odd elements even positions.\n  \n   Examples\n   solution([5, 8, 7, 1]) ==> 12\n   solution([3, 3, 3]) 9\n   solution([30, 13, 24, 321])>0\n    \"\"\"\n","raw":"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0","reduced":"non-empty list integers return sum odd elements even positions.\n  \n   Examples\n   solution([5, 8, 7, 1]) ==> 12\n   solution([3, 3, 3]) 9\n   solution([30, 13, 24, 321])>0"}
{"task_id":"HumanEval\/122","prompt":"def add_elements(arr, k):\n    \"\"\"\n    non-empty array integers arr integer k return\n   sum elements two digits first k elements arr\n   Example\n   Input arr = [111,21,3,4000,5,6,7,8,9] k = 4\n   Output 24 # sum 21 + 3\n   Constraints\n   1. 1 < len(arr) < 100\n   2. 1 < k len(arr)\n    \"\"\"\n","raw":"Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)","reduced":"non-empty array integers arr integer k return\n   sum elements two digits first k elements arr\n   Example\n   Input arr = [111,21,3,4000,5,6,7,8,9] k = 4\n   Output 24 # sum 21 + 3\n   Constraints\n   1. 1 < len(arr) < 100\n   2. 1 < k len(arr)"}
{"task_id":"HumanEval\/123","prompt":"def get_odd_collatz(n):\n    \"\"\"\n    positive integer n return sorted list odd numbers in collatz sequence.\n   Collatz conjecture in mathematics sequence defined\n   start with positive integer n each term obtained from\n   previous term if previous term even next term one half of\n   previous term If previous term odd next term 3 times previous\n   term plus 1. conjecture no matter value of n sequence always reach 1.\n   Note\n   1. Collatz(1) is [1].\n   2. returned list sorted in increasing order.\n   example\n   get_odd_collatz(5) returns [1, 5] collatz sequence for 5 is [5, 16, 8, 4, 2, 1] odd numbers only 1, 5.\n    \"\"\"\n","raw":"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.","reduced":"positive integer n return sorted list odd numbers in collatz sequence.\n   Collatz conjecture in mathematics sequence defined\n   start with positive integer n each term obtained from\n   previous term if previous term even next term one half of\n   previous term If previous term odd next term 3 times previous\n   term plus 1. conjecture no matter value of n sequence always reach 1.\n   Note\n   1. Collatz(1) is [1].\n   2. returned list sorted in increasing order.\n   example\n   get_odd_collatz(5) returns [1, 5] collatz sequence for 5 is [5, 16, 8, 4, 2, 1] odd numbers only 1, 5."}
{"task_id":"HumanEval\/124","prompt":"def valid_date(date):\n    \"\"\"\n    write function validates date string\n   returns True if date valid otherwise False.\n   date valid if rules satisfied:\n   1. date string not empty\n   2. number days not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. not less than 1 or higher than 30 days for months 4,6,9,11 not less than 1 higher than 29 for month 2.\n   3. months not less than 1 or higher than 12.\n   4. date format mm-dd-yyyy\n   example\n   valid_date('03-11-2000') => True\n  _date('15-01-2012') => False\n   valid_date('04-0-2040') False\n  _date('06-04-2020') True\n  _date('06\/04\/2020') False\n    \"\"\"\n","raw":"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06\/04\/2020') => False","reduced":"write function validates date string\n   returns True if date valid otherwise False.\n   date valid if rules satisfied:\n   1. date string not empty\n   2. number days not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. not less than 1 or higher than 30 days for months 4,6,9,11 not less than 1 higher than 29 for month 2.\n   3. months not less than 1 or higher than 12.\n   4. date format mm-dd-yyyy\n   example\n   valid_date('03-11-2000') => True\n  _date('15-01-2012') => False\n   valid_date('04-0-2040') False\n  _date('06-04-2020') True\n  _date('06\/04\/2020') False"}
{"task_id":"HumanEval\/125","prompt":"def split_words(txt):\n    \"\"\"\n    string of words return list words split on whitespace if no whitespaces in text\n   split on commas if no commas exists return number of lower-case letters odd order in\n   alphabet ord('a') = 0 ord('b') = 1 ... ord('z') = 25\n   Examples\n   split_words(\"Hello world!\")\n   split_words(\"Hello!\"\n   split_words(\"abcdef\") 3\n    \"\"\"\n","raw":"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3","reduced":"string of words return list words split on whitespace if no whitespaces in text\n   split on commas if no commas exists return number of lower-case letters odd order in\n   alphabet ord('a') = 0 ord('b') = 1 ... ord('z') = 25\n   Examples\n   split_words(\"Hello world!\")\n   split_words(\"Hello!\"\n   split_words(\"abcdef\") 3"}
{"task_id":"HumanEval\/126","prompt":"def is_sorted(lst):\n    \"\"\"\n    list numbers return sorted\n   ascending order If list more than 1 duplicate same\n   number return False Assume no negative numbers only integers.\n   Examples\n  _sorted([5]) True\n  _sorted([1, 2, 3 4, 5]) True\n  _sorted([1, 3 2 4 5]) False\n  _sorted([1, 2 3 4 5, 6]) True\n  _sorted([1, 2 3 4 5 6, 7]) True\n  _sorted([1, 3 2 4 5 6, 7]) False\n  _sorted([1, 2 2 3 3, 4]) True\n  _sorted([1, 2 3, 4]) False\n    \"\"\"\n","raw":"Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False","reduced":"list numbers return sorted\n   ascending order If list more than 1 duplicate same\n   number return False Assume no negative numbers only integers.\n   Examples\n  _sorted([5]) True\n  _sorted([1, 2, 3 4, 5]) True\n  _sorted([1, 3 2 4 5]) False\n  _sorted([1, 2 3 4 5, 6]) True\n  _sorted([1, 2 3 4 5 6, 7]) True\n  _sorted([1, 3 2 4 5 6, 7]) False\n  _sorted([1, 2 2 3 3, 4]) True\n  _sorted([1, 2 3, 4]) False"}
{"task_id":"HumanEval\/127","prompt":"def intersection(interval1, interval2):\n    \"\"\"\n    given two intervals\n   each pair of integers example interval = (start, end) = (1, 2).\n   intervals closed (start, end)\n   includes both start and end.\n   each interval assumed start less or equal end.\n   task determine length of intersection of two\n   intervals prime number.\n   intersection of intervals (1, 3), (2, 4) (2, 3)\n   length 1 not prime number.\n   If length intersection prime number return \"YES\",\n   otherwise return \"NO\".\n   If two intervals don't intersect return \"NO\".\n   [input\/output] samples\n   intersection((1, 2), (2, 3))> \"NO\"\n   intersection((-1, 1), (0, 4)) \"NO\"\n   intersection((-3,, (-5, 5)) \"YES\"\n    \"\"\"\n","raw":"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input\/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"","reduced":"given two intervals\n   each pair of integers example interval = (start, end) = (1, 2).\n   intervals closed (start, end)\n   includes both start and end.\n   each interval assumed start less or equal end.\n   task determine length of intersection of two\n   intervals prime number.\n   intersection of intervals (1, 3), (2, 4) (2, 3)\n   length 1 not prime number.\n   If length intersection prime number return \"YES\",\n   otherwise return \"NO\".\n   If two intervals don't intersect return \"NO\".\n   [input\/output] samples\n   intersection((1, 2), (2, 3))> \"NO\"\n   intersection((-1, 1), (0, 4)) \"NO\"\n   intersection((-3,, (-5, 5)) \"YES\""}
{"task_id":"HumanEval\/128","prompt":"def prod_signs(arr):\n    \"\"\"\n    given array of integers return\n   sum magnitudes multiplied by product signs\n   each number represented by 1 -1 or 0\n   return None for empty arr.\n   Example\n   >>> prod_signs([1, 2, -4]) -9\n   >>> prod_signs([0, 1]) == 0\n   >>> prod_signs([]) None\n    \"\"\"\n","raw":"You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None","reduced":"given array of integers return\n   sum magnitudes multiplied by product signs\n   each number represented by 1 -1 or 0\n   return None for empty arr.\n   Example\n   >>> prod_signs([1, 2, -4]) -9\n   >>> prod_signs([0, 1]) == 0\n   >>> prod_signs([]) None"}
{"task_id":"HumanEval\/129","prompt":"def minPath(grid, k):\n    \"\"\"\n    grid with N rows N columns (N >= 2) positive integer k\n   each cell contains value Every integer in range [1, N * N]\n   appears once on cells grid.\n   find minimum path of length k in grid start\n   from any cell move to neighbor cells\n   go to cells share edge with current\n   cell\n   path of length k means visiting k cells (not\n   distinct).\n   CANNOT go off grid.\n   path A (of length k) less than path B (of length k) if\n   after ordered lists of values on cells A and B\n   through lst_A and lst_B), lst_A lexicographically less\n   than lst_B integer index i (1 <= i <= k)\n   lst_A[i] < lst_B[i] for any j (1 <= j < i)\n   lst_A[j] = lst_B[j].\n   answer unique.\n   Return ordered list of values on cells minimum path go through.\n   Examples:\n   Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n   Output: [1, 2, 1]\n   Input: grid = [ [5,9,3], [4,1,6], [7,8,2]] k = 1\n   Output: [1]\n    \"\"\"\n","raw":"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]","reduced":"grid with N rows N columns (N >= 2) positive integer k\n   each cell contains value Every integer in range [1, N * N]\n   appears once on cells grid.\n   find minimum path of length k in grid start\n   from any cell move to neighbor cells\n   go to cells share edge with current\n   cell\n   path of length k means visiting k cells (not\n   distinct).\n   CANNOT go off grid.\n   path A (of length k) less than path B (of length k) if\n   after ordered lists of values on cells A and B\n   through lst_A and lst_B), lst_A lexicographically less\n   than lst_B integer index i (1 <= i <= k)\n   lst_A[i] < lst_B[i] for any j (1 <= j < i)\n   lst_A[j] = lst_B[j].\n   answer unique.\n   Return ordered list of values on cells minimum path go through.\n   Examples:\n   Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n   Output: [1, 2, 1]\n   Input: grid = [ [5,9,3], [4,1,6], [7,8,2]] k = 1\n   Output: [1]"}
{"task_id":"HumanEval\/130","prompt":"def tri(n):\n    \"\"\"\n    knows Fibonacci sequence studied by mathematicians\n   centuries people don't know\n   defined by recurrence\n   tri(1) = 3\n   tri(n) = 1 + n \/ 2 if even\n   tri(n) =  (n - 1) +(n - 2) +(n + 1) odd\n  \n   tri(2) = 1 + (2 \/ 2) = 2\n   tri(4) = 3\n   tri(3) = tri(2) + tri(1) + tri(4)\n   = 2 + 3 + 3 = 8\n   non integer number n return list\n   first n + 1 numbers Tribonacci sequence\n   Examples\n   tri(3) = [1, 3, 2, 8]\n    \"\"\"\n","raw":"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n \/ 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 \/ 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]","reduced":"knows Fibonacci sequence studied by mathematicians\n   centuries people don't know\n   defined by recurrence\n   tri(1) = 3\n   tri(n) = 1 + n \/ 2 if even\n   tri(n) =  (n - 1) +(n - 2) +(n + 1) odd\n  \n   tri(2) = 1 + (2 \/ 2) = 2\n   tri(4) = 3\n   tri(3) = tri(2) + tri(1) + tri(4)\n   = 2 + 3 + 3 = 8\n   non integer number n return list\n   first n + 1 numbers Tribonacci sequence\n   Examples\n   tri(3) = [1, 3, 2, 8]"}
{"task_id":"HumanEval\/131","prompt":"def digits(n):\n    \"\"\"\n    positive integer n return product odd digits\n   Return 0 if digits even\n  \n   digits(1)   == 1\n   digits(4)   0\n   digits(235) 15\n    \"\"\"\n","raw":"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15","reduced":"positive integer n return product odd digits\n   Return 0 if digits even\n  \n   digits(1)   == 1\n   digits(4)   0\n   digits(235) 15"}
{"task_id":"HumanEval\/132","prompt":"def is_nested(string):\n    \"\"\"\n    Create function takes string input contains square brackets.\n   function return True if valid subsequence of brackets\n   where least one bracket nested.\n   is_nested('[[]]') \u279e True\n   is_nested('[]]]]]]][[[[[]') False\n   is_nested('[][]') False\n   is_nested('[]') False\n   is_nested([[][]]') True\n   is_nested('[[]][[') True\n    \"\"\"\n","raw":"Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True","reduced":"Create function takes string input contains square brackets.\n   function return True if valid subsequence of brackets\n   where least one bracket nested.\n   is_nested('[[]]') \u279e True\n   is_nested('[]]]]]]][[[[[]') False\n   is_nested('[][]') False\n   is_nested('[]') False\n   is_nested([[][]]') True\n   is_nested('[[]][[') True"}
{"task_id":"HumanEval\/133","prompt":"def sum_squares(lst):\n    \"\"\"\n    given list of numbers.\n   return sum of squared numbers given list\n   round each element list to upper int(Ceiling) first.\n   Examples:\n   For lst = [1,2,3] output 14\n   lst = [1,4,9] output 98\n   lst = [1,3,5,7] output 84\n   lst = [1.4,4.2,0] output 29\n   lst = [-2.4,1,1] output 6\n    \"\"\"\n","raw":"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6","reduced":"given list of numbers.\n   return sum of squared numbers given list\n   round each element list to upper int(Ceiling) first.\n   Examples:\n   For lst = [1,2,3] output 14\n   lst = [1,4,9] output 98\n   lst = [1,3,5,7] output 84\n   lst = [1.4,4.2,0] output 29\n   lst = [-2.4,1,1] output 6"}
{"task_id":"HumanEval\/134","prompt":"def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create function returns True if last character\n   string character not\n   part word False otherwise.\n   Note \"word\" group characters separated by space.\n   Examples\n   check_if_last_char_is_a_letter(\"apple pie\") False\n   check_last_char_is_letter(\"apple pi e\") True\n   check_if_last_char_is_a_letter(\"apple pi e \") False\n   check_if_last_char_is_a_letter(\"\") False\n    \"\"\"\n","raw":"Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False","reduced":"Create function returns True if last character\n   string character not\n   part word False otherwise.\n   Note \"word\" group characters separated by space.\n   Examples\n   check_if_last_char_is_a_letter(\"apple pie\") False\n   check_last_char_is_letter(\"apple pi e\") True\n   check_if_last_char_is_a_letter(\"apple pi e \") False\n   check_if_last_char_is_a_letter(\"\") False"}
{"task_id":"HumanEval\/135","prompt":"def can_arrange(arr):\n    \"\"\"\n    Create function returns largest index element\n   not greater or equal element preceding If\n   no element exists return -1. array contain\n   duplicate values\n   Examples\n   can_arrange([1,2,4,3,5]) = 3\n   can_arrange([1,2,3]) = -1\n    \"\"\"\n","raw":"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1","reduced":"Create function returns largest index element\n   not greater or equal element preceding If\n   no element exists return -1. array contain\n   duplicate values\n   Examples\n   can_arrange([1,2,4,3,5]) = 3\n   can_arrange([1,2,3]) = -1"}
{"task_id":"HumanEval\/136","prompt":"def largest_smallest_integers(lst):\n    \"\"\"\n    Create function returns tuple (a, 'a'\n   largest negative integers 'b' smallest\n   positive integers list.\n   no negative positive integers return None.\n   Examples\n   largest_smallest_integers([2, 4 1 3 5, 7]) (None, 1)\n   largest_smallest_integers([]) (None, None)\n   largest_smallest_integers([0]) (None, None)\n    \"\"\"\n","raw":"Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)","reduced":"Create function returns tuple (a, 'a'\n   largest negative integers 'b' smallest\n   positive integers list.\n   no negative positive integers return None.\n   Examples\n   largest_smallest_integers([2, 4 1 3 5, 7]) (None, 1)\n   largest_smallest_integers([]) (None, None)\n   largest_smallest_integers([0]) (None, None)"}
{"task_id":"HumanEval\/137","prompt":"def compare_one(a, b):\n    \"\"\"\n    Create function takes integers floats strings representing\n   numbers returns larger variable type\n   Return None if values equal\n   If real number represented string floating point might be .\n   compare_one(1, 2.5) 2.5\n   compare_one(1, \"2,3\") \u279e \"2,3\"\n   compare_one(\"5,1\", \"6\") \"6\"\n   compare_one(\"1\", 1) None\n    \"\"\"\n","raw":"Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None","reduced":"Create function takes integers floats strings representing\n   numbers returns larger variable type\n   Return None if values equal\n   If real number represented string floating point might be .\n   compare_one(1, 2.5) 2.5\n   compare_one(1, \"2,3\") \u279e \"2,3\"\n   compare_one(\"5,1\", \"6\") \"6\"\n   compare_one(\"1\", 1) None"}
{"task_id":"HumanEval\/138","prompt":"def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate given number n written sum 4 positive even numbers\n   Example\n  _equal_to_sum_even(4) == False\n  _equal_to_sum_even(6) False\n  _equal_to_sum_even(8) True\n    \"\"\"\n","raw":"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True","reduced":"Evaluate given number n written sum 4 positive even numbers\n   Example\n  _equal_to_sum_even(4) == False\n  _equal_to_sum_even(6) False\n  _equal_to_sum_even(8) True"}
{"task_id":"HumanEval\/139","prompt":"def special_factorial(n):\n    \"\"\"\n    Brazilian factorial defined:\n   brazilian_factorial(n) = n! * (n-1)! (n-2)! * ... * 1!\n   n > 0\n   example\n   >>> special_factorial(4)\n  \n   function receive integer input return special\n   factorial integer\n    \"\"\"\n","raw":"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.","reduced":"Brazilian factorial defined:\n   brazilian_factorial(n) = n! * (n-1)! (n-2)! * ... * 1!\n   n > 0\n   example\n   >>> special_factorial(4)\n  \n   function receive integer input return special\n   factorial integer"}
{"task_id":"HumanEval\/140","prompt":"def fix_spaces(text):\n    \"\"\"\n    string text replace spaces with underscores\n   if string more than 2 consecutive spaces\n   replace consecutive spaces with -\n  \n   fix_spaces(\"Example\") ==\"\n   fix_spaces 1\") \"Example_1\"\n   fix_spaces Example 2\")_2\"\n   fix_spaces Example   3\")_Example-3\"\n    \"\"\"\n","raw":"Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"","reduced":"string text replace spaces with underscores\n   if string more than 2 consecutive spaces\n   replace consecutive spaces with -\n  \n   fix_spaces(\"Example\") ==\"\n   fix_spaces 1\") \"Example_1\"\n   fix_spaces Example 2\")_2\"\n   fix_spaces Example   3\")_Example-3\""}
{"task_id":"HumanEval\/141","prompt":"def file_name_check(file_name):\n    \"\"\"\n    Create function takes string file's name returns\n   'Yes' if name valid returns 'No' otherwise.\n   file's name valid if conditions\n   met:\n   not more than three digits ('0'-'9') in file's name.\n   file's name contains one dot '.\n   substring before dot not empty starts with letter from\n   latin alphapet ('a'-'z' and 'A'-'Z').\n   substring after dot be one of these: ['txt', 'exe', 'dll']\n   Examples:\n   file_name_check(\"example.txt\") # => 'Yes'\n   file_name_check(\"1example.dll\") # => 'No' name should start with latin alphapet letter)\n    \"\"\"\n","raw":"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)","reduced":"Create function takes string file's name returns\n   'Yes' if name valid returns 'No' otherwise.\n   file's name valid if conditions\n   met:\n   not more than three digits ('0'-'9') in file's name.\n   file's name contains one dot '.\n   substring before dot not empty starts with letter from\n   latin alphapet ('a'-'z' and 'A'-'Z').\n   substring after dot be one of these: ['txt', 'exe', 'dll']\n   Examples:\n   file_name_check(\"example.txt\") # => 'Yes'\n   file_name_check(\"1example.dll\") # => 'No' name should start with latin alphapet letter)"}
{"task_id":"HumanEval\/142","prompt":"def sum_squares(lst):\n    \"\"\"\n    \n   function take list of integers. all entries list square integer entry if index\n   multiple of 3 cube integer entry if index multiple of 4 not multiple 3. function not\n   change entries indexes not multiple of 3 or 4. function return sum of all entries.\n  \n   Examples:\n   For lst = [1,2,3] output should be 6\n   For lst = []   output should be 0\n   For lst = [-1,-5,2,-1,-5]   output should be -126\n    \"\"\"\n","raw":"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126","reduced":"\n   function take list of integers. all entries list square integer entry if index\n   multiple of 3 cube integer entry if index multiple of 4 not multiple 3. function not\n   change entries indexes not multiple of 3 or 4. function return sum of all entries.\n  \n   Examples:\n   For lst = [1,2,3] output should be 6\n   For lst = []   output should be 0\n   For lst = [-1,-5,2,-1,-5]   output should be -126"}
{"task_id":"HumanEval\/143","prompt":"def words_in_sentence(sentence):\n    \"\"\"\n    given string representing sentence\n   sentence contains words separated by space\n   return string contains words from original sentence\n   lengths prime numbers\n   order of words in new string be same as original one\n   Example 1:\n   Input: sentence = \"This is test\"\n   Output: \"is\"\n   Example 2:\n   Input: sentence = \"lets go for swimming\"\n   Output: \"go for\"\n   Constraints:\n   * 1 <= len(sentence) <= 100\n   * sentence contains letters\n    \"\"\"\n","raw":"You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters","reduced":"given string representing sentence\n   sentence contains words separated by space\n   return string contains words from original sentence\n   lengths prime numbers\n   order of words in new string be same as original one\n   Example 1:\n   Input: sentence = \"This is test\"\n   Output: \"is\"\n   Example 2:\n   Input: sentence = \"lets go for swimming\"\n   Output: \"go for\"\n   Constraints:\n   * 1 <= len(sentence) <= 100\n   * sentence contains letters"}
{"task_id":"HumanEval\/144","prompt":"def simplify(x, n):\n    \"\"\"\n    task implement function simplify expression\n   x * n function returns True if x * n evaluates whole number False\n   otherwise x n string representation fraction format\n   <numerator>\/<denominator> numerator denominator positive whole numbers\n   assume x, n valid fractions have zero denominator.\n   simplify(\"1\/5\", \"5\/1\") = True\n   simplify(\"1\/6\", \"2\/1\") = False\n   simplify(\"7\/10\", \"10\/2\") = False\n    \"\"\"\n","raw":"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>\/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1\/5\", \"5\/1\") = True\n    simplify(\"1\/6\", \"2\/1\") = False\n    simplify(\"7\/10\", \"10\/2\") = False","reduced":"task implement function simplify expression\n   x * n function returns True if x * n evaluates whole number False\n   otherwise x n string representation fraction format\n   <numerator>\/<denominator> numerator denominator positive whole numbers\n   assume x, n valid fractions have zero denominator.\n   simplify(\"1\/5\", \"5\/1\") = True\n   simplify(\"1\/6\", \"2\/1\") = False\n   simplify(\"7\/10\", \"10\/2\") = False"}
{"task_id":"HumanEval\/145","prompt":"def order_by_points(nums):\n    \"\"\"\n    Write function sorts list integers\n   ascending order according sum digits.\n   if several items similar sum digits\n   order based on index original list.\n   example\n   >>> order_by_points([1, 11, -1,, -12]) == [-1, -11, -12 11]\n   >>> order_by_points([]) == []\n    \"\"\"\n","raw":"Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []","reduced":"Write function sorts list integers\n   ascending order according sum digits.\n   if several items similar sum digits\n   order based on index original list.\n   example\n   >>> order_by_points([1, 11, -1,, -12]) == [-1, -11, -12 11]\n   >>> order_by_points([]) == []"}
{"task_id":"HumanEval\/146","prompt":"def specialFilter(nums):\n    \"\"\"\n    Write function takes array numbers input returns\n   number elements greater than 10 both\n   first last digits odd (1, 3, 5 7 9).\n   example\n   specialFilter([15, -73, 14,]) => 1\n   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","raw":"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2","reduced":"Write function takes array numbers input returns\n   number elements greater than 10 both\n   first last digits odd (1, 3, 5 7 9).\n   example\n   specialFilter([15, -73, 14,]) => 1\n   specialFilter([33, -2, -3, 45, 21, 109]) => 2"}
{"task_id":"HumanEval\/147","prompt":"def get_max_triples(n):\n    \"\"\"\n    given positive integer n. create integer array length n.\n   each i (1 i n), value a[i] = i * i - i + 1.\n   Return number triples (a[i], a[j] a[k]) i < j < k\n   a[i] + a[j] + a[k] multiple 3.\n   Example :\n   Input: n = 5\n   Output: 1\n   Explanation:\n   = [1, 3, 7, 13, 21]\n   valid triple (1, 7, 13).\n    \"\"\"\n","raw":"You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).","reduced":"given positive integer n. create integer array length n.\n   each i (1 i n), value a[i] = i * i - i + 1.\n   Return number triples (a[i], a[j] a[k]) i < j < k\n   a[i] + a[j] + a[k] multiple 3.\n   Example :\n   Input: n = 5\n   Output: 1\n   Explanation:\n   = [1, 3, 7, 13, 21]\n   valid triple (1, 7, 13)."}
{"task_id":"HumanEval\/148","prompt":"def bf(planet1, planet2):\n    \"\"\"\n    eight planets in solar system closerst to Sun\n   Mercury next Venus Earth Mars Jupiter Saturn\n   Uranus Neptune.\n   Write function takes two planet names planet1 and planet2.\n   function should return tuple containing all planets orbits\n   located between orbit planet1 and planet2 sorted by\n   proximity to sun.\n   function return empty tuple if planet1 or planet2\n   not correct planet names.\n   Examples\n  (\"Jupiter\", \"Neptune\") (\"Saturn\", \"Uranus\")\n  (\"Earth\", \"Mercury\") (\"Venus\")\n  (\"Mercury\", \"Uranus\") \"Jupiter\", \"Saturn\")\n    \"\"\"\n","raw":"There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")","reduced":"eight planets in solar system closerst to Sun\n   Mercury next Venus Earth Mars Jupiter Saturn\n   Uranus Neptune.\n   Write function takes two planet names planet1 and planet2.\n   function should return tuple containing all planets orbits\n   located between orbit planet1 and planet2 sorted by\n   proximity to sun.\n   function return empty tuple if planet1 or planet2\n   not correct planet names.\n   Examples\n  (\"Jupiter\", \"Neptune\") (\"Saturn\", \"Uranus\")\n  (\"Earth\", \"Mercury\") (\"Venus\")\n  (\"Mercury\", \"Uranus\") \"Jupiter\", \"Saturn\")"}
{"task_id":"HumanEval\/149","prompt":"def sorted_list_sum(lst):\n    \"\"\"\n    Write function accepts list of strings parameter\n   deletes strings odd lengths\n   returns resulted list with sorted order\n   list always list of strings never array of numbers\n   may contain duplicates.\n   order list ascending by length each word\n   return list sorted by rule.\n   If two words same length sort list alphabetically.\n   function return list of strings in sorted order.\n   assume all words same length.\n   example\n   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n","raw":"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]","reduced":"Write function accepts list of strings parameter\n   deletes strings odd lengths\n   returns resulted list with sorted order\n   list always list of strings never array of numbers\n   may contain duplicates.\n   order list ascending by length each word\n   return list sorted by rule.\n   If two words same length sort list alphabetically.\n   function return list of strings in sorted order.\n   assume all words same length.\n   example\n   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]"}
{"task_id":"HumanEval\/150","prompt":"def x_or_y(n, x, y):\n    \"\"\"\n    simple program return value x if n\n   prime number return value y otherwise.\n   Examples:\n   x_or_y(7, 34, 12) == 34\n   x_or_y(15, 8, 5) 5\n    \"\"\"\n","raw":"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5","reduced":"simple program return value x if n\n   prime number return value y otherwise.\n   Examples:\n   x_or_y(7, 34, 12) == 34\n   x_or_y(15, 8, 5) 5"}
{"task_id":"HumanEval\/151","prompt":"def double_the_difference(lst):\n    \"\"\"\n    list numbers return sum squares numbers\n   odd Ignore numbers negative integers.\n  \n   double_difference([1, 3, 2, 0]) 1 + 9 + 0 + 0 = 10\n  _difference([-1, -2, 0]) 0\n  _difference([9, -2]) == 81\n  _difference([0]) == 0  \n  \n   If input list empty return 0.\n    \"\"\"\n","raw":"Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.","reduced":"list numbers return sum squares numbers\n   odd Ignore numbers negative integers.\n  \n   double_difference([1, 3, 2, 0]) 1 + 9 + 0 + 0 = 10\n  _difference([-1, -2, 0]) 0\n  _difference([9, -2]) == 81\n  _difference([0]) == 0  \n  \n   If input list empty return 0."}
{"task_id":"HumanEval\/152","prompt":"def compare(game,guess):\n    \"\"\"\n    we remember feeling when result of long-awaited\n   event known feelings thoughts\n   worth noting comparing.\n   task to determine if person correctly guessed results of number matches.\n   given two arrays of scores guesses equal length each index shows match.\n   Return array same length denoting far each guess If guessed correctly\n   value is 0 if not value absolute difference between guess and score.\n  \n  \n   example:\n   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n","raw":"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]","reduced":"we remember feeling when result of long-awaited\n   event known feelings thoughts\n   worth noting comparing.\n   task to determine if person correctly guessed results of number matches.\n   given two arrays of scores guesses equal length each index shows match.\n   Return array same length denoting far each guess If guessed correctly\n   value is 0 if not value absolute difference between guess and score.\n  \n  \n   example:\n   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"}
{"task_id":"HumanEval\/153","prompt":"def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    given name of class string) list of extensions.\n   extensions used load additional classes class.\n   strength of extension: Let CAP be number uppercase\n   letters in extension's name SM number lowercase letters\n   extension name strength given by fraction CAP - SM.\n   find strongest extension return string in\n   format: ClassName.StrongestExtensionName.\n   If two or more extensions with same strength\n   choose one comes first in list.\n   example if given \"Slices\" as class list of\n   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\n   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' strongest extension\n   (its strength is -1).\n   Example:\n   for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n","raw":"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'","reduced":"given name of class string) list of extensions.\n   extensions used load additional classes class.\n   strength of extension: Let CAP be number uppercase\n   letters in extension's name SM number lowercase letters\n   extension name strength given by fraction CAP - SM.\n   find strongest extension return string in\n   format: ClassName.StrongestExtensionName.\n   If two or more extensions with same strength\n   choose one comes first in list.\n   example if given \"Slices\" as class list of\n   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\n   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' strongest extension\n   (its strength is -1).\n   Example:\n   for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"}
{"task_id":"HumanEval\/154","prompt":"def cycpattern_check(a , b):\n    \"\"\"\n    given 2 words return True if second word substring in first word\n   cycpattern_check(\"abcd\",\"abd\") => False\n  _check(\"hello\",\"ell\") => True\n  _check(\"whassup\",\"psus\") => False\n  _check(\"abab\",\"baa\") => True\n  _check(\"efef\",\"eeff\") => False\n  _check(\"himenss\",\"simen\") => True\n    \"\"\"\n","raw":"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True","reduced":"given 2 words return True if second word substring in first word\n   cycpattern_check(\"abcd\",\"abd\") => False\n  _check(\"hello\",\"ell\") => True\n  _check(\"whassup\",\"psus\") => False\n  _check(\"abab\",\"baa\") => True\n  _check(\"efef\",\"eeff\") => False\n  _check(\"himenss\",\"simen\") => True"}
{"task_id":"HumanEval\/155","prompt":"def even_odd_count(num):\n    \"\"\"\n    Given integer return tuple number even odd digits.\n   Example:\n   even_odd_count(-12) ==> (1, 1)\n   even_odd_count(123)> (1, 2)\n    \"\"\"\n","raw":"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)","reduced":"Given integer return tuple number even odd digits.\n   Example:\n   even_odd_count(-12) ==> (1, 1)\n   even_odd_count(123)> (1, 2)"}
{"task_id":"HumanEval\/156","prompt":"def int_to_mini_roman(number):\n    \"\"\"\n    positive integer obtain roman numeral equivalent string\n   return lowercase.\n   Restrictions 1 <= num < 1000\n   Examples\n   >>> int_to_mini_roman(19) 'xix'\n   int_mini_roman(152) 'clii'\n  _mini_roman(426) 'cdxxvi'\n    \"\"\"\n","raw":"Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'","reduced":"positive integer obtain roman numeral equivalent string\n   return lowercase.\n   Restrictions 1 <= num < 1000\n   Examples\n   >>> int_to_mini_roman(19) 'xix'\n   int_mini_roman(152) 'clii'\n  _mini_roman(426) 'cdxxvi'"}
{"task_id":"HumanEval\/157","prompt":"def right_angle_triangle(a, b, c):\n    \"\"\"\n    lengths three sides triangle Return True if three\n   sides form right-angled triangle False otherwise\n   right-angled triangle one angle right angle\n   90 degree.\n   Example\n   right_angle_triangle(3, 4, 5) True\n   right_angle_triangle(1, 2, 3) False\n    \"\"\"\n","raw":"Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False","reduced":"lengths three sides triangle Return True if three\n   sides form right-angled triangle False otherwise\n   right-angled triangle one angle right angle\n   90 degree.\n   Example\n   right_angle_triangle(3, 4, 5) True\n   right_angle_triangle(1, 2, 3) False"}
{"task_id":"HumanEval\/158","prompt":"def find_max(words):\n    \"\"\"\n    Write function accepts list strings.\n   list contains different words Return word maximum number\n   unique characters multiple strings maximum number unique\n   characters return one first lexicographical order.\n   find_max([\"name\", \"string\"]) == \"string\"\n   find_max([\"name\", == \"enam\"\n   find_max([\"aaaaaaa\", \"bb\"cc\"])\"aaaaaaa\"\n    \"\"\"\n","raw":"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"","reduced":"Write function accepts list strings.\n   list contains different words Return word maximum number\n   unique characters multiple strings maximum number unique\n   characters return one first lexicographical order.\n   find_max([\"name\", \"string\"]) == \"string\"\n   find_max([\"name\", == \"enam\"\n   find_max([\"aaaaaaa\", \"bb\"cc\"])\"aaaaaaa\""}
{"task_id":"HumanEval\/159","prompt":"def eat(number, need, remaining):\n    \"\"\"\n    You're hungry rabbit eaten certain number of carrots\n   need eat more carrots complete day's meals\n   return array total number of eaten carrots after meals\n   number of carrots left after meals\n   not enough remaining carrots eat all remaining carrots be hungry\n  \n   Example\n   * eat(5, 6, 10) -> [11, 4]\n   * eat(4, 8, 9) -> [12, 1]\n   * eat(1, 10, 10) -> [11, 0]\n   * eat(2, 11, 5) -> [7, 0]\n  \n   Variables\n   @number : integer\n   number of carrots eaten\n   @need integer\n   number of carrots need to eat\n   @remaining : integer\n   number of remaining carrots stock\n  \n   Constrain\n   * 0 <= number <= 1000\n   * 0 <= need <= 1000\n   * 0 <= remaining <= 1000\n   fun\n    \"\"\"\n","raw":"You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)","reduced":"You're hungry rabbit eaten certain number of carrots\n   need eat more carrots complete day's meals\n   return array total number of eaten carrots after meals\n   number of carrots left after meals\n   not enough remaining carrots eat all remaining carrots be hungry\n  \n   Example\n   * eat(5, 6, 10) -> [11, 4]\n   * eat(4, 8, 9) -> [12, 1]\n   * eat(1, 10, 10) -> [11, 0]\n   * eat(2, 11, 5) -> [7, 0]\n  \n   Variables\n   @number : integer\n   number of carrots eaten\n   @need integer\n   number of carrots need to eat\n   @remaining : integer\n   number of remaining carrots stock\n  \n   Constrain\n   * 0 <= number <= 1000\n   * 0 <= need <= 1000\n   * 0 <= remaining <= 1000\n   fun"}
{"task_id":"HumanEval\/160","prompt":"def do_algebra(operator, operand):\n    \"\"\"\n    two lists operator operand first list basic algebra operations\n   second list integers Use two lists build algebric\n   expression return evaluation\n   basic algebra operations:\n   Addition ( + )\n   Subtraction ( - )\n   Multiplication ( * )\n   Floor division ( \/\/ )\n   Exponentiation ( ** )\n   Example:\n   operator['+', '*' '-']\n   array = [2, 3, 4, 5]\n   result = 2 + 3 * 4 - 5\n   result = 9\n   Note\n   length operator list equal to length operand list minus one\n   Operand non-negative integers\n   Operator list one operator operand list two operands\n    \"\"\"\n","raw":"Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( \/\/ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.","reduced":"two lists operator operand first list basic algebra operations\n   second list integers Use two lists build algebric\n   expression return evaluation\n   basic algebra operations:\n   Addition ( + )\n   Subtraction ( - )\n   Multiplication ( * )\n   Floor division ( \/\/ )\n   Exponentiation ( ** )\n   Example:\n   operator['+', '*' '-']\n   array = [2, 3, 4, 5]\n   result = 2 + 3 * 4 - 5\n   result = 9\n   Note\n   length operator list equal to length operand list minus one\n   Operand non-negative integers\n   Operator list one operator operand list two operands"}
{"task_id":"HumanEval\/161","prompt":"def solve(s):\n    \"\"\"\n    given string s.\n   if s letter reverse case lower to upper\n   keep as is.\n   If string no letters reverse string.\n   function return resulted string.\n   Examples\n   solve(\"1234\") = \"4321\"\n   solve(\"ab\") = \"AB\"\n   solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n","raw":"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"","reduced":"given string s.\n   if s letter reverse case lower to upper\n   keep as is.\n   If string no letters reverse string.\n   function return resulted string.\n   Examples\n   solve(\"1234\") = \"4321\"\n   solve(\"ab\") = \"AB\"\n   solve(\"#a@C\") = \"#A@c\""}
{"task_id":"HumanEval\/162","prompt":"def string_to_md5(text):\n    \"\"\"\n    string 'text' return md5 hash equivalent string\n   empty return None.\n   string_to_md5('Hello world' '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n","raw":"Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'","reduced":"string 'text' return md5 hash equivalent string\n   empty return None.\n   string_to_md5('Hello world' '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id":"HumanEval\/163","prompt":"def generate_integers(a, b):\n    \"\"\"\n    two positive integers a b return even digits between\n   ascending order\n   example\n   generate_integers(2, 8) [2, 4, 6, 8]\n  _integers(8, 2) [2, 4, 6, 8]\n  _integers(10, 14)\n    \"\"\"\n","raw":"Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []","reduced":"two positive integers a b return even digits between\n   ascending order\n   example\n   generate_integers(2, 8) [2, 4, 6, 8]\n  _integers(8, 2) [2, 4, 6, 8]\n  _integers(10, 14)"}
