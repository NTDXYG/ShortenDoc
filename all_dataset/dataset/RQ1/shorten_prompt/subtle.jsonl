{"task_id":"EvoEval\/0","prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are two adjacent numbers closer each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True >>> has_close_elements([], 0.3) False\n    \"\"\"\n","entry_point":"has_close_elements","raw":"Check if in given list of numbers, are any two adjacent numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 0.3)\n    False","reduced":"Check if in given list of numbers, are two adjacent numbers closer each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True >>> has_close_elements([], 0.3) False"}
{"task_id":"EvoEval\/1","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input this function a string containing multiple groups nested parentheses. Your goal is to separate those group into separate strings return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore spaces the input string. Return the list in ascending alphabetical order >>> separate_paren_groups('( ) (( )) (( )( ))') ['(()())', '(())', '()']\n    \"\"\"\n","entry_point":"separate_paren_groups","raw":"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string. \n    Return the list in ascending alphabetical order \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['(()())', '(())', '()']","reduced":"Input this function a string containing multiple groups nested parentheses. Your goal is to separate those group into separate strings return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore spaces the input string. Return the list in ascending alphabetical order >>> separate_paren_groups('( ) (( )) (( )( ))') ['(()())', '(())', '()']"}
{"task_id":"EvoEval\/2","prompt":"def truncate_number(number: float) -> float:\n    \"\"\"\n    Given positive floating point number, can be decomposed into integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return integer and decimal part the number. >>> truncate_number(3.5) (3, 0.5)\n    \"\"\"\n","entry_point":"truncate_number","raw":"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer and decimal part of the number.\n    >>> truncate_number(3.5)\n    (3, 0.5)","reduced":"Given positive floating point number, can be decomposed into integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return integer and decimal part the number. >>> truncate_number(3.5) (3, 0.5)"}
{"task_id":"EvoEval\/3","prompt":"from typing import List\n\n\ndef below_one(operations: List[int]) -> bool:\n    \"\"\"\n    You're given list deposit withdrawal operations on a bank account starts with one. Your task detect if at point balance of account falls below one, and at that point function should return True. Otherwise should return False. >>> below_one([1, 2, 3]) False >>> below_one([1, 2, -4, 5]) True\n    \"\"\"\n","entry_point":"below_one","raw":"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    one balance. Your task is to detect if at any point the balance of account falls below one, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_one([1, 2, 3])\n    False\n    >>> below_one([1, 2, -4, 5])\n    True","reduced":"You're given list deposit withdrawal operations on a bank account starts with one. Your task detect if at point balance of account falls below one, and at that point function should return True. Otherwise should return False. >>> below_one([1, 2, 3]) False >>> below_one([1, 2, -4, 5]) True"}
{"task_id":"EvoEval\/4","prompt":"from typing import List\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For given list input numbers, calculate Median Absolute Deviation around median of this dataset. Median Absolute Deviation the median absolute difference between each element a centerpoint (median this case): MAD = median | x - x_median | >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0]) 1.0\n    \"\"\"\n","entry_point":"median_absolute_deviation","raw":"For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0","reduced":"For given list input numbers, calculate Median Absolute Deviation around median of this dataset. Median Absolute Deviation the median absolute difference between each element a centerpoint (median this case): MAD = median | x - x_median | >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0]) 1.0"}
{"task_id":"EvoEval\/5","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list numbers' and add 'delimeter' at the end of the list >>> intersperse([], 4) [4] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3, 4]\n    \"\"\"\n","entry_point":"intersperse","raw":"Insert a number 'delimeter' between every two consecutive elements of input list `numbers' and add 'delimeter' at the end of the list\n    >>> intersperse([], 4)\n    [4]\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3, 4]","reduced":"Insert a number 'delimeter' between every two consecutive elements of input list numbers' and add 'delimeter' at the end of the list >>> intersperse([], 4) [4] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3, 4]"}
{"task_id":"EvoEval\/6","prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input this function a string represented multiple groups for nested parentheses separated by spaces. For each of group, output the deepest level of nesting of parentheses. Additionally, return the list descending order. E.g. (()()) has maximum two levels of nesting while ((())) has three. >>> parse_nested_parens('(()()) ((())) () ((())()())') [3, 3, 2, 1]\n    \"\"\"\n","entry_point":"parse_nested_parens","raw":"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses. Additionally, return the list in descending order.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [3, 3, 2, 1]","reduced":"Input this function a string represented multiple groups for nested parentheses separated by spaces. For each of group, output the deepest level of nesting of parentheses. Additionally, return the list descending order. E.g. (()()) has maximum two levels of nesting while ((())) has three. >>> parse_nested_parens('(()()) ((())) () ((())()())') [3, 3, 2, 1]"}
{"task_id":"EvoEval\/7","prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter input list strings only for ones that do not contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['cde']\n    \"\"\"\n","entry_point":"filter_by_substring","raw":"Filter an input list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['cde']","reduced":"Filter input list strings only for ones that do not contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['cde']"}
{"task_id":"EvoEval\/8","prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For given list of integers, return a tuple consisting of a sum and a product of all non-negative integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\n    \"\"\"\n","entry_point":"sum_product","raw":"For a given list of integers, return a tuple consisting of a sum and a product of all the non-negative integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)","reduced":"For given list of integers, return a tuple consisting of a sum and a product of all non-negative integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)"}
{"task_id":"EvoEval\/9","prompt":"from typing import List, Tuple\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From given list integers, generate a list of rolling minimum element found until given moment sequence. >>> rolling_min([1, 2, 3, 2, 3, 4, 2]) [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n","entry_point":"rolling_min","raw":"From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]","reduced":"From given list integers, generate a list of rolling minimum element found until given moment sequence. >>> rolling_min([1, 2, 3, 2, 3, 4, 2]) [1, 1, 1, 1, 1, 1, 1]"}
{"task_id":"EvoEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome ends with supplied string. Algorithm idea simple: - Find the longest prefix supplied string that is a palindrome. - Append the start of the string reverse of a string suffix that comes after the palindromic prefix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'tacat' >>> make_palindrome('cata') 'atacata'\n    \"\"\"\n","entry_point":"make_palindrome","raw":"Find the shortest palindrome that ends with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of supplied string that is a palindrome.\n    - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'atacata'","reduced":"Find the shortest palindrome ends with supplied string. Algorithm idea simple: - Find the longest prefix supplied string that is a palindrome. - Append the start of the string reverse of a string suffix that comes after the palindromic prefix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'tacat' >>> make_palindrome('cata') 'atacata'"}
{"task_id":"EvoEval\/11","prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input two strings a b consisting only 1s and 0s. Perform binary XOR on these inputs and return result also as a string but reversed. >>> string_xor('010', '110') '001'\n    \"\"\"\n","entry_point":"string_xor","raw":"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string but reversed.\n    >>> string_xor('010', '110')\n    '001'","reduced":"Input two strings a b consisting only 1s and 0s. Perform binary XOR on these inputs and return result also as a string but reversed. >>> string_xor('010', '110') '001'"}
{"task_id":"EvoEval\/12","prompt":"from typing import List, Optional\n\n\ndef shortest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out list of strings, return the shortest one. Return the first one case of multiple strings of the same length. Return None in case the input list is empty. >>> shortest([]) >>> shortest(['a', 'b', 'c']) 'a' >>> shortest(['a', 'bb', 'ccc']) 'a'\n    \"\"\"\n","entry_point":"shortest","raw":"Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> shortest([])\n\n    >>> shortest(['a', 'b', 'c'])\n    'a'\n    >>> shortest(['a', 'bb', 'ccc'])\n    'a'","reduced":"Out list of strings, return the shortest one. Return the first one case of multiple strings of the same length. Return None in case the input list is empty. >>> shortest([]) >>> shortest(['a', 'b', 'c']) 'a' >>> shortest(['a', 'bb', 'ccc']) 'a'"}
{"task_id":"EvoEval\/13","prompt":"def least_common_multiple(a: int, b: int) -> int:\n    \"\"\"\n    Return least common multiple two integers b >>> least_common_multiple(3, 5) 15 >>> least_common_multiple(25, 15) 75\n    \"\"\"\n","entry_point":"least_common_multiple","raw":"Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75","reduced":"Return least common multiple two integers b >>> least_common_multiple(3, 5) 15 >>> least_common_multiple(25, 15) 75"}
{"task_id":"EvoEval\/14","prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list all prefixes from longest to shortest of input string >>> all_prefixes('abc') ['abc', 'ab', 'a']\n    \"\"\"\n","entry_point":"all_prefixes","raw":"Return list of all prefixes from longest to shortest of the input string\n    >>> all_prefixes('abc')\n    ['abc', 'ab', 'a']","reduced":"Return list all prefixes from longest to shortest of input string >>> all_prefixes('abc') ['abc', 'ab', 'a']"}
{"task_id":"EvoEval\/15","prompt":"def string_sequence(n: int) -> str:\n    \"\"\"\n    Return string containing space-delimited numbers starting from 1 upto n inclusive. >>> string_sequence(1) '1' >>> string_sequence(5) '1 2 3 4 5'\n    \"\"\"\n","entry_point":"string_sequence","raw":"Return a string containing space-delimited numbers starting from 1 upto n inclusive.\n    >>> string_sequence(1)\n    '1'\n    >>> string_sequence(5)\n    '1 2 3 4 5'","reduced":"Return string containing space-delimited numbers starting from 1 upto n inclusive. >>> string_sequence(1) '1' >>> string_sequence(5) '1 2 3 4 5'"}
{"task_id":"EvoEval\/16","prompt":"def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (case-sensitive) does it consist of. >>> count_distinct_characters('xyzXYZ') 6 >>> count_distinct_characters('Jerry') 4\n    \"\"\"\n","entry_point":"count_distinct_characters","raw":"Given a string, find out how many distinct characters (case-sensitive) does it consist of.\n    >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4","reduced":"Given a string, find out how many distinct characters (case-sensitive) does it consist of. >>> count_distinct_characters('xyzXYZ') 6 >>> count_distinct_characters('Jerry') 4"}
{"task_id":"EvoEval\/17","prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input this function string representing musical notes a special ASCII format. Your task is to parse this string and return a list unique integers corresponding to how many beats does each note last. Return list in descending order. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat >>> parse_music('o o| .| o| o| .| .| .| .| o o') [4, 2, 1]\n    \"\"\"\n","entry_point":"parse_music","raw":"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of unique integers corresponding to how many beats does each\n    note last. Return the list in descending order.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1]","reduced":"Input this function string representing musical notes a special ASCII format. Your task is to parse this string and return a list unique integers corresponding to how many beats does each note last. Return list in descending order. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat >>> parse_music('o o| .| o| o| .| .| .| .| o o') [4, 2, 1]"}
{"task_id":"EvoEval\/18","prompt":"def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times given substring can found the original string. Do not count overlapping cases. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 2\n    \"\"\"\n","entry_point":"how_many_times","raw":"Find how many times a given substring can be found in the original string. Do not count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2","reduced":"Find how many times given substring can found the original string. Do not count overlapping cases. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 2"}
{"task_id":"EvoEval\/19","prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input a space-delimited string numerals from 'zero' 'nine'. Valid choices 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' 'nine'. Return string with numbers sorted from largest to smallest >>> sort_numbers('three one five') 'five three one'\n    \"\"\"\n","entry_point":"sort_numbers","raw":"Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers('three one five')\n    'five three one'","reduced":"Input a space-delimited string numerals from 'zero' 'nine'. Valid choices 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' 'nine'. Return string with numbers sorted from largest to smallest >>> sort_numbers('three one five') 'five three one'"}
{"task_id":"EvoEval\/20","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list numbers (of length at least two) select return two adjacent numbers that the closest each other and return them reverse order (larger number, smaller number). >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 1.0) >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5]) (5.0, 4.5)\n    \"\"\"\n","entry_point":"find_closest_elements","raw":"From a supplied list of numbers (of length at least two) select and return two adjacent numbers that are the closest to each\n    other and return them in reverse order (larger number, smaller number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 1.0)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5])\n    (5.0, 4.5)","reduced":"From a supplied list numbers (of length at least two) select return two adjacent numbers that the closest each other and return them reverse order (larger number, smaller number). >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 1.0) >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5]) (5.0, 4.5)"}
{"task_id":"EvoEval\/21","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply linear transform list, such that smallest number will become 0 the largest will become 1. Return the list in descending order. >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [1.0, 0.75, 0.5, 0.25, 0.0]\n    \"\"\"\n","entry_point":"rescale_to_unit","raw":"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1. Return the list in descending order.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0, 0.75, 0.5, 0.25, 0.0]","reduced":"Given list of numbers (of at least two elements), apply linear transform list, such that smallest number will become 0 the largest will become 1. Return the list in descending order. >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [1.0, 0.75, 0.5, 0.25, 0.0]"}
{"task_id":"EvoEval\/22","prompt":"from typing import List, Any\n\n\ndef filter_even_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list python values for integers >>> filter_even_integers(['a', 3.14, 5, 6]) [6] >>> filter_even_integers([1, 2, 3, 'abc', {}, []]) [2]\n    \"\"\"\n","entry_point":"filter_even_integers","raw":"Filter given list of any python values only for even integers\n    >>> filter_even_integers(['a', 3.14, 5, 6])\n    [6]\n    >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n    [2]","reduced":"Filter given list python values for integers >>> filter_even_integers(['a', 3.14, 5, 6]) [6] >>> filter_even_integers([1, 2, 3, 'abc', {}, []]) [2]"}
{"task_id":"EvoEval\/23","prompt":"def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string plus 1 >>> strlen('') 1 >>> strlen('abc') 4\n    \"\"\"\n","entry_point":"strlen","raw":"Return length of given string plus 1\n    >>> strlen('')\n    1\n    >>> strlen('abc')\n    4","reduced":"Return length of given string plus 1 >>> strlen('') 1 >>> strlen('abc') 4"}
{"task_id":"EvoEval\/24","prompt":"def smallest_divisor(n: int) -> int:\n    \"\"\"\n    For given number n, find smallest number divides n evenly, larger than 1 >>> smallest_divisor(15) 3\n    \"\"\"\n","entry_point":"smallest_divisor","raw":"For a given number n, find the smallest number that divides n evenly, larger than 1\n    >>> smallest_divisor(15)\n    3","reduced":"For given number n, find smallest number divides n evenly, larger than 1 >>> smallest_divisor(15) 3"}
{"task_id":"EvoEval\/25","prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in order from largest smallest. Each of the factors should listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors >>> factorize(8) [2, 2, 2] >>> factorize(25) [5, 5] >>> factorize(70) [7, 5, 2]\n    \"\"\"\n","entry_point":"factorize","raw":"Return list of prime factors of given integer in the order from largest to smallest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [7, 5, 2]","reduced":"Return list of prime factors of given integer in order from largest smallest. Each of the factors should listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors >>> factorize(8) [2, 2, 2] >>> factorize(25) [5, 5] >>> factorize(70) [7, 5, 2]"}
{"task_id":"EvoEval\/26","prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list integers, remove all elements occur more than once. Return list the reverse order of the input. >>> remove_duplicates([1, 2, 3, 2, 4]) [4, 3, 1]\n    \"\"\"\n","entry_point":"remove_duplicates","raw":"From a list of integers, remove all elements that occur more than once.\n    Return the list in the reverse order of the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [4, 3, 1]","reduced":"From a list integers, remove all elements occur more than once. Return list the reverse order of the input. >>> remove_duplicates([1, 2, 3, 2, 4]) [4, 3, 1]"}
{"task_id":"EvoEval\/27","prompt":"def flip_case(string: str, exclusive_case: str = 'lower') -> str:\n    \"\"\"\n    For given string, flip lowercase characters to uppercase uppercase to lowercase, unless they are exclusive_case can be either 'lower' or 'upper'. If exclusive_case 'lower', lowercase letters will remain as they are. If exclusive_case is 'upper', uppercase letters will remain as they are. >>> flip_case('Hello', 'lower') 'hello'\n    \"\"\"\n","entry_point":"flip_case","raw":"For a given string, flip lowercase characters to uppercase and uppercase to lowercase, unless they are in exclusive_case which can be either 'lower' or 'upper'.\n    If exclusive_case is 'lower', lowercase letters will remain as they are.\n    If exclusive_case is 'upper', uppercase letters will remain as they are.\n    >>> flip_case('Hello', 'lower')\n    'hello'","reduced":"For given string, flip lowercase characters to uppercase uppercase to lowercase, unless they are exclusive_case can be either 'lower' or 'upper'. If exclusive_case 'lower', lowercase letters will remain as they are. If exclusive_case is 'upper', uppercase letters will remain as they are. >>> flip_case('Hello', 'lower') 'hello'"}
{"task_id":"EvoEval\/28","prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list strings into single string, separated by a comma. >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'a,b,c'\n    \"\"\"\n","entry_point":"concatenate","raw":"Concatenate list of strings into a single string, separated by a comma.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'a,b,c'","reduced":"Concatenate list strings into single string, separated by a comma. >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'a,b,c'"}
{"task_id":"EvoEval\/29","prompt":"from typing import List\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\"\n    Filter input list of strings only for ones end with given suffix. >>> filter_by_suffix([], 'a') [] >>> filter_by_suffix(['abc', 'bcd', 'cde', ''], 'c') ['']\n    \"\"\"\n","entry_point":"filter_by_suffix","raw":"Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'c')\n    ['abc']","reduced":"Filter input list of strings only for ones end with given suffix. >>> filter_by_suffix([], 'a') [] >>> filter_by_suffix(['abc', 'bcd', 'cde', ''], 'c') ['']"}
{"task_id":"EvoEval\/30","prompt":"def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers list in ascending order. >>> get_positive([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n","entry_point":"get_positive","raw":"Return only positive numbers in the list in ascending order.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]","reduced":"Return only positive numbers list in ascending order. >>> get_positive([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) [1, 2, 3, 3, 5, 9, 123]"}
{"task_id":"EvoEval\/31","prompt":"def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise. If number is less than 2, return 'Invalid Input'. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) 'Invalid Input'\n    \"\"\"\n","entry_point":"is_prime","raw":"Return true if a given number is prime, and false otherwise. If the number is less than 2, return 'Invalid Input'.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    'Invalid Input'","reduced":"Return true if a given number is prime, and false otherwise. If number is less than 2, return 'Invalid Input'. >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) 'Invalid Input'"}
{"task_id":"EvoEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 +.... xs[n] * x^(2*n-1) find_zero find x such that poly(x) = 0. find_zero returns only zero point, even if are many. Moreover, find_zero only takes xs having at least two coefficients and largest non zero coefficient as guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3 -1.0\n    \"\"\"\n","entry_point":"find_zero","raw":"xs are coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + .... xs[n] * x^(2*n-1)\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having at least two coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n    -1.0","reduced":"xs coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 +.... xs[n] * x^(2*n-1) find_zero find x such that poly(x) = 0. find_zero returns only zero point, even if are many. Moreover, find_zero only takes xs having at least two coefficients and largest non zero coefficient as guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3 -1.0"}
{"task_id":"EvoEval\/33","prompt":"def sort_third(l: list):\n    \"\"\"\n    This function takes list l returns a list l' such l' identical to l indicies that not divisible by three, while its values at the indicies that are divisible by three are equal to the values the corresponding indicies of l, but sorted in descending order. >>> sort_third([1, 2, 3]) [1, 2, 3] >>> sort_third([5, 6, 3, 4, 8, 9, 2]) [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n","entry_point":"sort_third","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in descending order.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]","reduced":"This function takes list l returns a list l' such l' identical to l indicies that not divisible by three, while its values at the indicies that are divisible by three are equal to the values the corresponding indicies of l, but sorted in descending order. >>> sort_third([1, 2, 3]) [1, 2, 3] >>> sort_third([5, 6, 3, 4, 8, 9, 2]) [5, 6, 3, 4, 8, 9, 2]"}
{"task_id":"EvoEval\/34","prompt":"def unique(l: list):\n    \"\"\"\n    Return sorted unique elements list in descending order >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) [123, 9, 5, 3, 2, 0]\n    \"\"\"\n","entry_point":"unique","raw":"Return sorted unique elements in a list in descending order\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 0]","reduced":"Return sorted unique elements list in descending order >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) [123, 9, 5, 3, 2, 0]"}
{"task_id":"EvoEval\/35","prompt":"def min_element(l: list):\n    \"\"\"\n    Return minimum element list. >>> min_element([1, 2, 3]) 1 >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) -10\n    \"\"\"\n","entry_point":"min_element","raw":"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10","reduced":"Return minimum element list. >>> min_element([1, 2, 3]) 1 >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) -10"}
{"task_id":"EvoEval\/36","prompt":"def fizz_buzz(n: int):\n    \"\"\"\n    Return the number times the digit 8 appears integers less than n are divisible by 11 or 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 0 >>> fizz_buzz(79) 1\n    \"\"\"\n","entry_point":"fizz_buzz","raw":"Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    0\n    >>> fizz_buzz(79)\n    1","reduced":"Return the number times the digit 8 appears integers less than n are divisible by 11 or 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 0 >>> fizz_buzz(79) 1"}
{"task_id":"EvoEval\/37","prompt":"def sort_even(l: list):\n    \"\"\"\n    This function takes a list l returns a list l' such that l' identical l in the odd indicies, while its values at the even indicies equal to the values the even indicies of l, but sorted in descending order. >>> sort_even([1, 2, 3]) [1, 2, 3] >>> sort_even([5, 6, 3, 4]) [5, 6, 3, 4]\n    \"\"\"\n","entry_point":"sort_even","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted in descending order.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 6, 3, 4]","reduced":"This function takes a list l returns a list l' such that l' identical l in the odd indicies, while its values at the even indicies equal to the values the even indicies of l, but sorted in descending order. >>> sort_even([1, 2, 3]) [1, 2, 3] >>> sort_even([5, 6, 3, 4]) [5, 6, 3, 4]"}
{"task_id":"EvoEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of four characters.\n    \"\"\"\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) \/\/ n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[1:] + group[0]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string with encode_cyclic. Returns decoded string.\n    \"\"\"\n","entry_point":"decode_cyclic","raw":"takes as input string encoded with encode_cyclic function. Returns decoded string.","reduced":"takes as input string with encode_cyclic. Returns decoded string."}
{"task_id":"EvoEval\/39","prompt":"def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th a Fibonacci number it's also. If the number is even, return None. >>> prime_fib(1) None >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89\n    \"\"\"\n","entry_point":"prime_fib","raw":"prime_fib returns n-th number that is a Fibonacci number and it's also prime. If the number is even, return None.\n    >>> prime_fib(1)\n    None\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89","reduced":"prime_fib returns n-th a Fibonacci number it's also. If the number is even, return None. >>> prime_fib(1) None >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89"}
{"task_id":"EvoEval\/40","prompt":"def triples_sum_to_ten(l: list):\n    \"\"\"\n    triples_sum_to_ten takes list integers as input. it returns True if three distinct elements in list that sum ten, False otherwise. >>> triples_sum_to_ten([1, 3, 5, 0]) False >>> triples_sum_to_ten([1, 3, -2, 1]) False >>> triples_sum_to_ten([1, 2, 3, 7]) True >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7]) False >>> triples_sum_to_ten([1]) False\n    \"\"\"\n","entry_point":"triples_sum_to_ten","raw":"triples_sum_to_ten takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to ten, and False otherwise.\n\n    >>> triples_sum_to_ten([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_ten([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_ten([1, 2, 3, 7])\n    True\n    >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7])\n    False\n    >>> triples_sum_to_ten([1])\n    False","reduced":"triples_sum_to_ten takes list integers as input. it returns True if three distinct elements in list that sum ten, False otherwise. >>> triples_sum_to_ten([1, 3, 5, 0]) False >>> triples_sum_to_ten([1, 3, -2, 1]) False >>> triples_sum_to_ten([1, 2, 3, 7]) True >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7]) False >>> triples_sum_to_ten([1]) False"}
{"task_id":"EvoEval\/41","prompt":"def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. n cars are driving left right; simultaneously, a different set of 2*n cars are driving right to left. two sets of cars start out being very far from each other. All cars move in same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.\n    \"\"\"\n","entry_point":"car_race_collision","raw":"Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of 2*n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.","reduced":"Imagine a road that's a perfectly straight infinitely long line. n cars are driving left right; simultaneously, a different set of 2*n cars are driving right to left. two sets of cars start out being very far from each other. All cars move in same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions."}
{"task_id":"EvoEval\/42","prompt":"def incr_list(l: list):\n    \"\"\"\n    Return list with elements incremented by 2. >>> incr_list([1, 2, 3]) [3, 4, 5] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [7, 5, 7, 4, 5, 5, 11, 2, 125]\n    \"\"\"\n","entry_point":"incr_list","raw":"Return list with elements incremented by 2.\n    >>> incr_list([1, 2, 3])\n    [3, 4, 5]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [7, 5, 7, 4, 5, 5, 11, 2, 125]","reduced":"Return list with elements incremented by 2. >>> incr_list([1, 2, 3]) [3, 4, 5] >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [7, 5, 7, 4, 5, 5, 11, 2, 125]"}
{"task_id":"EvoEval\/43","prompt":"def pairs_sum_to_one(l):\n    \"\"\"\n    pairs_sum_to_one takes a list integers as input. returns True if two distinct elements list sum one, False otherwise. >>> pairs_sum_to_one([1, 3, 5, 0]) True >>> pairs_sum_to_one([1, 3, -2, 1]) True >>> pairs_sum_to_one([1, 2, 3, 7]) False >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7]) False >>> pairs_sum_to_one([1]) False\n    \"\"\"\n","entry_point":"pairs_sum_to_one","raw":"pairs_sum_to_one takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to one, and False otherwise.\n    >>> pairs_sum_to_one([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_one([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_one([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n    False\n    >>> pairs_sum_to_one([1])\n    False","reduced":"pairs_sum_to_one takes a list integers as input. returns True if two distinct elements list sum one, False otherwise. >>> pairs_sum_to_one([1, 3, 5, 0]) True >>> pairs_sum_to_one([1, 3, -2, 1]) True >>> pairs_sum_to_one([1, 2, 3, 7]) False >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7]) False >>> pairs_sum_to_one([1]) False"}
{"task_id":"EvoEval\/44","prompt":"def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical number x to base return integer after conversion. base numbers less than 10. >>> change_base(8, 3) 22 >>> change_base(8, 2) 1000 >>> change_base(7, 2)\n    \"\"\"\n","entry_point":"change_base","raw":"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    22\n    >>> change_base(8, 2)\n    1000\n    >>> change_base(7, 2)\n    111","reduced":"Change numerical number x to base return integer after conversion. base numbers less than 10. >>> change_base(8, 3) 22 >>> change_base(8, 2) 1000 >>> change_base(7, 2)"}
{"task_id":"EvoEval\/45","prompt":"def triangle_perimeter(a, b, c):\n    \"\"\"\n    Given length of three sides return perimeter for a triangle. >>> triangle_perimeter(5, 3, 3) 11\n    \"\"\"\n","entry_point":"triangle_perimeter","raw":"Given length of three sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 3)\n    11","reduced":"Given length of three sides return perimeter for a triangle. >>> triangle_perimeter(5, 3, 3) 11"}
{"task_id":"EvoEval\/46","prompt":"def fib4(n: int):\n    \"\"\"\n    Fib4 number sequence sequence similar Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element the fib4 number sequence. Do not use recursion. Return string representation. >>> fib4(5) '4' >>> fib4(6) '8' >>> fib4(7) '14'\n    \"\"\"\n","entry_point":"fib4","raw":"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion. Return string representation.\n    >>> fib4(5)\n    '4'\n    >>> fib4(6)\n    '8'\n    >>> fib4(7)\n    '14'","reduced":"Fib4 number sequence sequence similar Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element the fib4 number sequence. Do not use recursion. Return string representation. >>> fib4(5) '4' >>> fib4(6) '8' >>> fib4(7) '14'"}
{"task_id":"EvoEval\/47","prompt":"def median(l: list):\n    \"\"\"\n    Return median of elements in the list l, but if the list is empty, return 0 instead. >>> median([3, 1, 2, 4, 5]) 3 >>> median([-10, 4, 6, 1000, 10, 20]) 15.0 >>> median([]) 0\n    \"\"\"\n","entry_point":"median","raw":"Return median of elements in the list l, but if the list is empty, return 0 instead.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    0","reduced":"Return median of elements in the list l, but if the list is empty, return 0 instead. >>> median([3, 1, 2, 4, 5]) 3 >>> median([-10, 4, 6, 1000, 10, 20]) 15.0 >>> median([]) 0"}
{"task_id":"EvoEval\/48","prompt":"def is_palindrome(text: str, case_sensitive: bool = True):\n    \"\"\"\n    Checks if given string is a palindrome considering case sensitivity according to provided parameter >>> is_palindrome('', True) True >>> is_palindrome('aba', True) True >>> is_palindrome('Aba', False) True >>> is_palindrome('aaaaa', True) True >>> is_palindrome('zbcd', True) False\n    \"\"\"\n","entry_point":"is_palindrome","raw":"Checks if given string is a palindrome considering case sensitivity according to the provided parameter\n    >>> is_palindrome('', True)\n    True\n    >>> is_palindrome('aba', True)\n    True\n    >>> is_palindrome('Aba', False)\n    True\n    >>> is_palindrome('aaaaa', True)\n    True\n    >>> is_palindrome('zbcd', True)\n    False","reduced":"Checks if given string is a palindrome considering case sensitivity according to provided parameter >>> is_palindrome('', True) True >>> is_palindrome('aba', True) True >>> is_palindrome('Aba', False) True >>> is_palindrome('aaaaa', True) True >>> is_palindrome('zbcd', True) False"}
{"task_id":"EvoEval\/49","prompt":"def modp(n: int, p: int, q: int):\n    \"\"\"\n    Return 2^(n+q) modulo p (be aware numerics). >>> modp(3, 5, 1) 1 >>> modp(1101, 101, 2) 8 >>> modp(0, 101, 1) 2 >>> modp(3, 11, 2) 10 >>> modp(100, 101, 1) 2\n    \"\"\"\n","entry_point":"modp","raw":"Return 2^(n+q) modulo p (be aware of numerics).\n    >>> modp(3, 5, 1)\n    1\n    >>> modp(1101, 101, 2)\n    8\n    >>> modp(0, 101, 1)\n    2\n    >>> modp(3, 11, 2)\n    10\n    >>> modp(100, 101, 1)\n    2","reduced":"Return 2^(n+q) modulo p (be aware numerics). >>> modp(3, 5, 1) 1 >>> modp(1101, 101, 2) 8 >>> modp(0, 101, 1) 2 >>> modp(3, 11, 2) 10 >>> modp(100, 101, 1) 2"}
{"task_id":"EvoEval\/50","prompt":"def encode_shift(s: str, shift: int = 5):\n    \"\"\"\n    returns encoded string by shifting every character by 'shift' in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str, shift: int = 5):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift.\n    \"\"\"\n","entry_point":"decode_shift","raw":"takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift.","reduced":"takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift."}
{"task_id":"EvoEval\/51","prompt":"def remove_consonants(text):\n    \"\"\"\n    remove_consonants is function that takes string and returns string without consonants. >>> remove_consonants('') '' >>> remove_consonants(\"abcdef\\nghijklm\") 'ae\\ni' >>> remove_consonants('abcdef') 'ae' >>> remove_consonants('aaaaa') 'aaaaa' >>> remove_consonants('aaBAA') 'aaAA' >>> remove_consonants('zbcd') ''\n    \"\"\"\n","entry_point":"remove_consonants","raw":"remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\\nghijklm\")\n    'ae\\ni'\n    >>> remove_consonants('abcdef')\n    'ae'\n    >>> remove_consonants('aaaaa')\n    'aaaaa'\n    >>> remove_consonants('aaBAA')\n    'aaAA'\n    >>> remove_consonants('zbcd')\n    ''","reduced":"remove_consonants is function that takes string and returns string without consonants. >>> remove_consonants('') '' >>> remove_consonants(\"abcdef\\nghijklm\") 'ae\\ni' >>> remove_consonants('abcdef') 'ae' >>> remove_consonants('aaaaa') 'aaaaa' >>> remove_consonants('aaBAA') 'aaAA' >>> remove_consonants('zbcd') ''"}
{"task_id":"EvoEval\/52","prompt":"def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if all numbers the list l below or equal to threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 20) True\n    \"\"\"\n","entry_point":"below_threshold","raw":"Return True if all numbers in the list l are below or equal to threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 20)\n    True","reduced":"Return True if all numbers the list l below or equal to threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 20) True"}
{"task_id":"EvoEval\/53","prompt":"def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y and return result increased by 1 >>> add(2, 3) 6 >>> add(5, 7) 13\n    \"\"\"\n","entry_point":"add","raw":"Add two numbers x and y and return the result increased by 1\n    >>> add(2, 3)\n    6\n    >>> add(5, 7)\n    13","reduced":"Add two numbers x and y and return result increased by 1 >>> add(2, 3) 6 >>> add(5, 7) 13"}
{"task_id":"EvoEval\/54","prompt":"def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters the same length. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') False >>> same_chars('aaaaaaabcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') False >>> same_chars('eabcd', 'ddabc') False\n    \"\"\"\n","entry_point":"same_chars","raw":"Check if two words have the same characters and the same length.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> same_chars('aaaaaaabcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'ddabc')\n    False","reduced":"Check if two words have the same characters the same length. >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') False >>> same_chars('aaaaaaabcd', 'dddddddabc') True >>> same_chars('dddddddabc', 'abcd') False >>> same_chars('eabcd', 'ddabc') False"}
{"task_id":"EvoEval\/55","prompt":"def fib(n: int):\n    \"\"\"\n    Return (n+1)-th Fibonacci number. >>> fib(10) 89 >>> fib(1) 1 >>> fib(8) 34\n    \"\"\"\n","entry_point":"fib","raw":"Return (n+1)-th Fibonacci number.\n    >>> fib(10)\n    89\n    >>> fib(1)\n    1\n    >>> fib(8)\n    34","reduced":"Return (n+1)-th Fibonacci number. >>> fib(10) 89 >>> fib(1) 1 >>> fib(8) 34"}
{"task_id":"EvoEval\/56","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"()\") True >>> correct_bracketing(\"(()())\") True >>> correct_bracketing(\")(()\") False\n    \"\"\"\n","entry_point":"correct_bracketing","raw":"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False","reduced":"brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"()\") True >>> correct_bracketing(\"(()())\") True >>> correct_bracketing(\")(()\") False"}
{"task_id":"EvoEval\/57","prompt":"def monotonic(l: list):\n    \"\"\"\n    Return True if list elements monotonically increasing or decreasing. If the list empty, return False. >>> monotonic([1, 2, 4, 20]) True >>> monotonic([1, 20, 4, 10]) False >>> monotonic([4, 1, 0, -10]) True >>> monotonic([]) False\n    \"\"\"\n","entry_point":"monotonic","raw":"Return True if list elements are monotonically increasing or decreasing. If the list is empty, return False.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    False","reduced":"Return True if list elements monotonically increasing or decreasing. If the list empty, return False. >>> monotonic([1, 2, 4, 20]) True >>> monotonic([1, 20, 4, 10]) False >>> monotonic([4, 1, 0, -10]) True >>> monotonic([]) False"}
{"task_id":"EvoEval\/58","prompt":"def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists descending order. >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [653, 5, 1] >>> common([5, 3, 2, 8], [3, 2]) [3, 2]\n    \"\"\"\n","entry_point":"common","raw":"Return sorted unique common elements for two lists in descending order.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]","reduced":"Return sorted unique common elements for two lists descending order. >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) [653, 5, 1] >>> common([5, 3, 2, 8], [3, 2]) [3, 2]"}
{"task_id":"EvoEval\/59","prompt":"def smallest_prime_factor(n: int):\n    \"\"\"\n    Return smallest prime factor n. Assume n > 1 not prime. >>> smallest_prime_factor(13195) 5 >>> smallest_prime_factor(2048) 2\n    \"\"\"\n","entry_point":"smallest_prime_factor","raw":"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    5\n    >>> smallest_prime_factor(2048)\n    2","reduced":"Return smallest prime factor n. Assume n > 1 not prime. >>> smallest_prime_factor(13195) 5 >>> smallest_prime_factor(2048) 2"}
{"task_id":"EvoEval\/60","prompt":"def sum_to_n(n: int, m: int = 1):\n    \"\"\"\n    sum_to_n is function sums numbers from m to n. >>> sum_to_n(30, 10) 420 >>> sum_to_n(100, 50) 3825 >>> sum_to_n(5, 2) 14 >>> sum_to_n(10, 5) 45 >>> sum_to_n(1, 1) 1\n    \"\"\"\n","entry_point":"sum_to_n","raw":"sum_to_n is a function that sums numbers from m to n.\n    >>> sum_to_n(30, 10)\n    420\n    >>> sum_to_n(100, 50)\n    3825\n    >>> sum_to_n(5, 2)\n    14\n    >>> sum_to_n(10, 5)\n    45\n    >>> sum_to_n(1, 1)\n    1","reduced":"sum_to_n is function sums numbers from m to n. >>> sum_to_n(30, 10) 420 >>> sum_to_n(100, 50) 3825 >>> sum_to_n(5, 2) 14 >>> sum_to_n(10, 5) 45 >>> sum_to_n(1, 1) 1"}
{"task_id":"EvoEval\/61","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string \"[\" and \"]\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"[\") False >>> correct_bracketing(\"[]\") True >>> correct_bracketing(\"[[][]]\") True >>> correct_bracketing(\"][][\") False\n    \"\"\"\n","entry_point":"correct_bracketing","raw":"brackets is a string of \"[\" and \"]\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"[\")\n    False\n    >>> correct_bracketing(\"[]\")\n    True\n    >>> correct_bracketing(\"[[][]]\")\n    True\n    >>> correct_bracketing(\"][][\")\n    False","reduced":"brackets is a string \"[\" and \"]\". return True if every opening bracket has a corresponding closing bracket. >>> correct_bracketing(\"[\") False >>> correct_bracketing(\"[]\") True >>> correct_bracketing(\"[[][]]\") True >>> correct_bracketing(\"][][\") False"}
{"task_id":"EvoEval\/62","prompt":"def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 Return derivative of polynomial in form, but in descending order of the power of x. >>> derivative([3, 1, 2, 4, 5]) [20, 12, 4, 1] >>> derivative([1, 2, 3]) [6, 2]\n    \"\"\"\n","entry_point":"derivative","raw":"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form, but in descending order of the power of x.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]","reduced":"xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 Return derivative of polynomial in form, but in descending order of the power of x. >>> derivative([3, 1, 2, 4, 5]) [20, 12, 4, 1] >>> derivative([1, 2, 3]) [6, 2]"}
{"task_id":"EvoEval\/63","prompt":"def fibfib(n: int):\n    \"\"\"\n    FibFib number sequence sequence similar Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1). Please write a function to efficiently compute the n-th element the fibfib number sequence. >>> fibfib(1) 0 >>> fibfib(5) -2 >>> fibfib(8) 4\n    \"\"\"\n","entry_point":"fibfib","raw":"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    -2\n    >>> fibfib(8)\n    4","reduced":"FibFib number sequence sequence similar Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-3) + fibfib(n-2) - fibfib(n-1). Please write a function to efficiently compute the n-th element the fibfib number sequence. >>> fibfib(1) 0 >>> fibfib(5) -2 >>> fibfib(8) 4"}
{"task_id":"EvoEval\/64","prompt":"FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"\n    Write function vowels_count takes a string representing a word as input returns number vowels the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when is at the end of the given word. Only count the lowercase vowels. Example: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"YACED\") 0\n    \"\"\"\n","entry_point":"vowels_count","raw":"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Only count the lowercase vowels.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"YACED\")\n    0","reduced":"Write function vowels_count takes a string representing a word as input returns number vowels the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when is at the end of the given word. Only count the lowercase vowels. Example: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"YACED\") 0"}
{"task_id":"EvoEval\/65","prompt":"def circular_shift(x, shift):\n    \"\"\"\n    Circular shift, shift the by shift return the result as string. If shift > number of digits, return. >>> circular_shift(21, 1) \"12\" >>> circular_shift(21, 2) \"21\"\n    \"\"\"\n","entry_point":"circular_shift","raw":"Circular shift the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(21, 1)\n    \"12\"\n    >>> circular_shift(21, 2)\n    \"21\"","reduced":"Circular shift, shift the by shift return the result as string. If shift > number of digits, return. >>> circular_shift(21, 1) \"12\" >>> circular_shift(21, 2) \"21\""}
{"task_id":"EvoEval\/66","prompt":"def digitSum(s):\n    \"\"\"\n    Task Write a function that takes a string as input returns sum the lower characters only' ASCII codes. Examples: digitSum(\"\") => 0 digitSum(\"abAB\") => 195 digitSum(\"abcCd\") => 394 digitSum(\"helloE\") => 532 digitSum(\"woArBld\") => 652 digitSum(\"aAaaaXa\") => 485\n    \"\"\"\n","entry_point":"digitSum","raw":"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 195\n        digitSum(\"abcCd\") => 394\n        digitSum(\"helloE\") => 532\n        digitSum(\"woArBld\") => 652\n        digitSum(\"aAaaaXa\") => 485","reduced":"Task Write a function that takes a string as input returns sum the lower characters only' ASCII codes. Examples: digitSum(\"\") => 0 digitSum(\"abAB\") => 195 digitSum(\"abcCd\") => 394 digitSum(\"helloE\") => 532 digitSum(\"woArBld\") => 652 digitSum(\"aAaaaXa\") => 485"}
{"task_id":"EvoEval\/67","prompt":"def fruit_distribution(s,n):\n    \"\"\"\n    In this task, will given string represents a number apples and oranges that distributed a basket of fruit this basket contains apples, oranges, and mango fruits. Given string that represents the total number of the oranges and apples and integer that represent the total number of the fruits in the basket minus one return the number of the mango fruits in the basket. for examble: fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1 - 5 - 6 = 9 fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3 fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96 fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20\n    \"\"\"\n","entry_point":"fruit_distribution","raw":"In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket minus one return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1  - 5 - 6 = 9\n    fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3\n    fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96\n    fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20","reduced":"In this task, will given string represents a number apples and oranges that distributed a basket of fruit this basket contains apples, oranges, and mango fruits. Given string that represents the total number of the oranges and apples and integer that represent the total number of the fruits in the basket minus one return the number of the mango fruits in the basket. for examble: fruit_distribution(\"5 apples, 6 oranges\", 19) ->19 +1 - 5 - 6 = 9 fruit_distribution(\"0 apples, 1 oranges\",3) -> 3 + 1 - 0 - 1 = 3 fruit_distribution(\"2 apples, 3 oranges\", 100) -> 100 + 1- 2 - 3 = 96 fruit_distribution(\"100 apples, 1 oranges\",120) -> 120 + 1- 100 - 1 = 20"}
{"task_id":"EvoEval\/68","prompt":"def pluck(arr):\n    \"\"\"\n    \"Given array representing branch a tree has non-negative integer nodes your task pluck one of nodes return it. The plucked node should the node with the smallest odd value. If multiple nodes with the same smallest odd value found return the node that has smallest index. The plucked node should be returned a list, [ its index, smalest_value ], If are no odd values or the given array is empty, return []. Example 1: Input: [4,3,5] Output: [1, 3] Explanation: 3 has the smallest odd value, and 3 has the smallest index. Example 2: Input: [1,2,3] Output: [0, 1] Explanation: 1 has the smallest odd value, and 1 has the smallest index. Example 3: Input: [] Output: [] Example 4: Input: [5, 1, 3, 0, 4, 2] Output: [1, 1] Explanation: 1 is the smallest value, but there are two ones, so we will choose the first one, has the smallest index. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value\n    \"\"\"\n","entry_point":"pluck","raw":"\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest odd value.\n    If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ its index, smalest_value ],\n    If there are no odd values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,3,5]\n        Output: [1, 3]\n        Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [0, 1]\n        Explanation: 1 has the smallest odd value, and 1 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 1, 3, 0, 4, 2]\n        Output: [1, 1]\n        Explanation: 1 is the smallest value, but  there are two ones,\n                     so we will choose the first one, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value","reduced":"\"Given array representing branch a tree has non-negative integer nodes your task pluck one of nodes return it. The plucked node should the node with the smallest odd value. If multiple nodes with the same smallest odd value found return the node that has smallest index. The plucked node should be returned a list, [ its index, smalest_value ], If are no odd values or the given array is empty, return []. Example 1: Input: [4,3,5] Output: [1, 3] Explanation: 3 has the smallest odd value, and 3 has the smallest index. Example 2: Input: [1,2,3] Output: [0, 1] Explanation: 1 has the smallest odd value, and 1 has the smallest index. Example 3: Input: [] Output: [] Example 4: Input: [5, 1, 3, 0, 4, 2] Output: [1, 1] Explanation: 1 is the smallest value, but there are two ones, so we will choose the first one, has the smallest index. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value"}
{"task_id":"EvoEval\/69","prompt":"def search(lst):\n    \"\"\"\n    given non-empty list positive integers. Return smallest integer is greater than zero, has a frequency greater than or equal the value of the integer itself. The frequency of an integer is the number of times it appears the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 1 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1 search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n","entry_point":"search","raw":"You are given a non-empty list of positive integers. Return the smallest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 1\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1\n        search([5, 5, 4, 4, 4]) == -1\n","reduced":"given non-empty list positive integers. Return smallest integer is greater than zero, has a frequency greater than or equal the value of the integer itself. The frequency of an integer is the number of times it appears the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 1 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1 search([5, 5, 4, 4, 4]) == -1"}
{"task_id":"EvoEval\/70","prompt":"def strange_sort_list(lst):\n    \"\"\"\n    Given list integers, return list strange order. Strange sorting, is when start with maximum value, minimum of the remaining integers, then maximum and so on. Examples: strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2] strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list([]) == []\n    \"\"\"\n","entry_point":"strange_sort_list","raw":"Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the maximum value,\n    then minimum of the remaining integers, then maximum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []","reduced":"Given list integers, return list strange order. Strange sorting, is when start with maximum value, minimum of the remaining integers, then maximum and so on. Examples: strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2] strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list([]) == []"}
{"task_id":"EvoEval\/71","prompt":"def triangle_area(a, b, c):\n    \"\"\"\n    Given lengths the three sides of a triangle. Return the area of the triangle rounded to 3 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides greater than the third side. Example: triangle_area(3, 4, 5) == 6.000 triangle_area(1, 2, 10) == -1\n    \"\"\"\n","entry_point":"triangle_area","raw":"Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 3 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.000\n    triangle_area(1, 2, 10) == -1","reduced":"Given lengths the three sides of a triangle. Return the area of the triangle rounded to 3 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides greater than the third side. Example: triangle_area(3, 4, 5) == 6.000 triangle_area(1, 2, 10) == -1"}
{"task_id":"EvoEval\/72","prompt":"def will_it_fly(q,w):\n    \"\"\"\n    Write function returns True if object q will fly, False otherwise. object q will fly if it's balanced (it a palindromic list), the sum its elements is an even number and is less than or equal the maximum possible weight w. Example: will_it_fly([1, 2], 5) \u279e False # 1+2 is less than the maximum possible weight, but it's unbalanced. will_it_fly([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than the maximum possible weight. will_it_fly([3, 2, 3], 9) \u279e True # 3+2+3 is less than the maximum possible weight, and it's balanced. will_it_fly([3], 5) \u279e False # 3 is less than the maximum possible weight, and it's balanced, but the sum 3 is odd.\n    \"\"\"\n","entry_point":"will_it_fly","raw":"Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list), the sum of its elements is an even number and is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e False\n    # 3 is less than the maximum possible weight, and it's balanced, but the sum 3 is odd.","reduced":"Write function returns True if object q will fly, False otherwise. object q will fly if it's balanced (it a palindromic list), the sum its elements is an even number and is less than or equal the maximum possible weight w. Example: will_it_fly([1, 2], 5) \u279e False # 1+2 is less than the maximum possible weight, but it's unbalanced. will_it_fly([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than the maximum possible weight. will_it_fly([3, 2, 3], 9) \u279e True # 3+2+3 is less than the maximum possible weight, and it's balanced. will_it_fly([3], 5) \u279e False # 3 is less than the maximum possible weight, and it's balanced, but the sum 3 is odd."}
{"task_id":"EvoEval\/73","prompt":"def smallest_change(arr):\n    \"\"\"\n    Given array arr of integers, find minimum number of elements need changed to make the array palindromic. A palindromic array an array that is read the same backwards forwards. In one change, can change one element to other element. For example: smallest_change([1,2,3,5,4,7,9,6]) == 4 smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","entry_point":"smallest_change","raw":"Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0","reduced":"Given array arr of integers, find minimum number of elements need changed to make the array palindromic. A palindromic array an array that is read the same backwards forwards. In one change, can change one element to other element. For example: smallest_change([1,2,3,5,4,7,9,6]) == 4 smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id":"EvoEval\/74","prompt":"def total_match(lst1, lst2):\n    \"\"\"\n    Write function accepts two lists of strings returns list that has total number of chars in the all strings of the list greater than the other list. if the two lists have the same number of chars, return the second list. Examples total_match([], []) \u279e [] total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin'] total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'hi', 'admin', 'project'] total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin'] total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']\n    \"\"\"\n","entry_point":"total_match","raw":"Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list greater than the other list.\n\n    if the two lists have the same number of chars, return the second list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'hi', 'admin', 'project']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']","reduced":"Write function accepts two lists of strings returns list that has total number of chars in the all strings of the list greater than the other list. if the two lists have the same number of chars, return the second list. Examples total_match([], []) \u279e [] total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hi', 'admin'] total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'hi', 'admin', 'project'] total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hi', 'admin'] total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['1', '2', '3', '4', '5']"}
{"task_id":"EvoEval\/75","prompt":"def is_multiply_prime(a):\n    \"\"\"\n    Write function returns true if given number the multiplication 4 prime numbers and false otherwise. Knowing that (a) is less 100. Example: is_multiply_prime(90) == True 90 = 2 * 3 * 3 * 5\n    \"\"\"\n","entry_point":"is_multiply_prime","raw":"Write a function that returns true if the given number is the multiplication of 4 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(90) == True\n    90 = 2 * 3 * 3 * 5","reduced":"Write function returns true if given number the multiplication 4 prime numbers and false otherwise. Knowing that (a) is less 100. Example: is_multiply_prime(90) == True 90 = 2 * 3 * 3 * 5"}
{"task_id":"EvoEval\/76","prompt":"def is_simple_power(x, n):\n    \"\"\"\n    Your task to write a function that returns true if a number x is a simple power n false in other cases. Additionally, return smallest power that makes x a simple power of n. x is a simple power of n if n**int=x For example: is_simple_power(1, 4) => (true, 0) is_simple_power(2, 2) => (true, 1) is_simple_power(8, 2) => (true, 3) is_simple_power(3, 2) => (false, None) is_simple_power(3, 1) => (false, None) is_simple_power(5, 3) => (false, None)\n    \"\"\"\n","entry_point":"is_simple_power","raw":"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. Additionally, return the smallest power that makes x a simple power of n.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => (true, 0)\n    is_simple_power(2, 2) => (true, 1)\n    is_simple_power(8, 2) => (true, 3)\n    is_simple_power(3, 2) => (false, None)\n    is_simple_power(3, 1) => (false, None)\n    is_simple_power(5, 3) => (false, None)","reduced":"Your task to write a function that returns true if a number x is a simple power n false in other cases. Additionally, return smallest power that makes x a simple power of n. x is a simple power of n if n**int=x For example: is_simple_power(1, 4) => (true, 0) is_simple_power(2, 2) => (true, 1) is_simple_power(8, 2) => (true, 3) is_simple_power(3, 2) => (false, None) is_simple_power(3, 1) => (false, None) is_simple_power(5, 3) => (false, None)"}
{"task_id":"EvoEval\/77","prompt":"def iscube(a):\n    \"\"\"\n    Write a function takes integer a and returns True if this integer a cube some positive integer number. Note: may assume the input is always valid. Examples: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> False iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False\n    \"\"\"\n","entry_point":"iscube","raw":"Write a function that takes an integer a and returns True \n    if this integer is a cube of some positive integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> False\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False","reduced":"Write a function takes integer a and returns True if this integer a cube some positive integer number. Note: may assume the input is always valid. Examples: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> False iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False"}
{"task_id":"EvoEval\/78","prompt":"def hex_key(num):\n    \"\"\"\n    You have been tasked write function that receives a hexadecimal number as a string counts number hexadecimal digits that not primes (prime number, or a prime, a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 0, 1, 4, 6, 8, 9, A (=decimal 10), C (=decimal 12), E (=decimal 15). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should 1. For num = \"1077E\" the output should be 3. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 9. For num = \"2020\" the output should be 2.\n    \"\"\"\n","entry_point":"hex_key","raw":"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are not primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 0, 1, 4, 6, 8, 9, \n    A (=decimal 10), C (=decimal 12), E (=decimal 15).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 3.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 9.\n    For num = \"2020\" the output should be 2.","reduced":"You have been tasked write function that receives a hexadecimal number as a string counts number hexadecimal digits that not primes (prime number, or a prime, a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 0, 1, 4, 6, 8, 9, A (=decimal 10), C (=decimal 12), E (=decimal 15). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should 1. For num = \"1077E\" the output should be 3. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 9. For num = \"2020\" the output should be 2."}
{"task_id":"EvoEval\/79","prompt":"def decimal_to_binary(decimal):\n    \"\"\"\n    will be given number in decimal form your to convert it to binary. function should return a string, with each character representing a binary number. Each character in string will be '0' or '1'. will be couple of characters 'db' at the beginning and 'bd' at the end of the string. The extra characters help with the format. Examples: decimal_to_binary(15) # returns \"db1111bd\" decimal_to_binary(32) # returns \"db100000bd\"\n    \"\"\"\n","entry_point":"decimal_to_binary","raw":"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and 'bd' at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111bd\"\n    decimal_to_binary(32)   # returns \"db100000bd\"","reduced":"will be given number in decimal form your to convert it to binary. function should return a string, with each character representing a binary number. Each character in string will be '0' or '1'. will be couple of characters 'db' at the beginning and 'bd' at the end of the string. The extra characters help with the format. Examples: decimal_to_binary(15) # returns \"db1111bd\" decimal_to_binary(32) # returns \"db100000bd\""}
{"task_id":"EvoEval\/80","prompt":"def is_happy(s):\n    \"\"\"\n    are given string s. Your task check if string is happy or not. A string is happy if its length is at least 4 every 4 consecutive letters are distinct For example: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adbc) => True is_happy(xyyx) => False\n    \"\"\"\n","entry_point":"is_happy","raw":"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 4 and every 4 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adbc) => True\n    is_happy(xyyx) => False","reduced":"are given string s. Your task check if string is happy or not. A string is happy if its length is at least 4 every 4 consecutive letters are distinct For example: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adbc) => True is_happy(xyyx) => False"}
{"task_id":"EvoEval\/81","prompt":"def numerical_letter_grade(grades):\n    \"\"\"\n    It the last week the semester and the teacher has to give the grades to students. teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given list of GPAs for some students and you have to write a function can output a list of letter grades ascending order of GPA using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']\n    \"\"\"\n","entry_point":"numerical_letter_grade","raw":"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades in ascending order of GPA using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']","reduced":"It the last week the semester and the teacher has to give the grades to students. teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given list of GPAs for some students and you have to write a function can output a list of letter grades ascending order of GPA using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['C-', 'C', 'B', 'A-', 'A+']"}
{"task_id":"EvoEval\/82","prompt":"def prime_length(string):\n    \"\"\"\n    Write function takes a string and returns True if string a prime number or False otherwise. function ignore white spaces the string length. prime_length('') == True prime_length(' a b c d ') == True prime_length('kittens') == True prime_length('orange') == False\n    \"\"\"\n","entry_point":"prime_length","raw":"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise. The function should ignore white spaces in the string length calculation.\n    Examples\n    prime_length('Hello') == True\n    prime_length(' a b c d c b a ') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False","reduced":"Write function takes a string and returns True if string a prime number or False otherwise. function ignore white spaces the string length. prime_length('') == True prime_length(' a b c d ') == True prime_length('kittens') == True prime_length('orange') == False"}
{"task_id":"EvoEval\/83","prompt":"def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit positive integers start with 1 or end with 2.\n    \"\"\"\n","entry_point":"starts_one_ends","raw":"Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start with 1 or end with 2.","reduced":"Given a positive integer n, return the count of the numbers of n-digit positive integers start with 1 or end with 2."}
{"task_id":"EvoEval\/84","prompt":"def solve(N):\n    \"\"\"\n    Given positive integer N, return total sum its digits represented as a hexadecimal number. Example For N = 1000, the sum of digits will 1 the output should be \"1\". For N = 150, the sum of digits will be 6 the output should be \"6\". For N = 147, the sum of digits will be 12 the output should be \"c\". Variables: @N integer Constraints: 0 \u2264 N \u2264 10000. Output: a string of hexadecimal number\n    \"\"\"\n","entry_point":"solve","raw":"Given a positive integer N, return the total sum of its digits represented as a hexadecimal number.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"6\".\n        For N = 147, the sum of digits will be 12 the output should be \"c\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of hexadecimal number","reduced":"Given positive integer N, return total sum its digits represented as a hexadecimal number. Example For N = 1000, the sum of digits will 1 the output should be \"1\". For N = 150, the sum of digits will be 6 the output should be \"6\". For N = 147, the sum of digits will be 12 the output should be \"c\". Variables: @N integer Constraints: 0 \u2264 N \u2264 10000. Output: a string of hexadecimal number"}
{"task_id":"EvoEval\/85","prompt":"def add(lst):\n    \"\"\"\n    Given non-empty list integers lst, add odd elements at even indices. Examples: add([4, 2, 5, 7]) ==> 5\n    \"\"\"\n","entry_point":"add","raw":"Given a non-empty list of integers lst, add the odd elements that are at even indices.\n\n\n    Examples:\n        add([4, 2, 5, 7]) ==> 5","reduced":"Given non-empty list integers lst, add odd elements at even indices. Examples: add([4, 2, 5, 7]) ==> 5"}
{"task_id":"EvoEval\/86","prompt":"def anti_shuffle(s):\n    \"\"\"\n    Write function takes a string returns ordered version it. Ordered version of string, a string where all words (separated by space) are replaced by a new word where all characters arranged in descending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. For example: anti_shuffle('Hi') returns 'iH' anti_shuffle('hello') returns 'ollhe' anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'\n    \"\"\"\n","entry_point":"anti_shuffle","raw":"Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'iH'\n    anti_shuffle('hello') returns 'ollhe'\n    anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'","reduced":"Write function takes a string returns ordered version it. Ordered version of string, a string where all words (separated by space) are replaced by a new word where all characters arranged in descending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. For example: anti_shuffle('Hi') returns 'iH' anti_shuffle('hello') returns 'ollhe' anti_shuffle('Hello World!!!') returns 'olleH roldW!!!'"}
{"task_id":"EvoEval\/87","prompt":"def get_row(lst, x):\n    \"\"\"\n    You given a 2 dimensional data, as a nested lists, is similar matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, integer x, find integers x the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in descending order. Also, sort coordinates of the row by columns in ascending order. Examples: get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)] get_row([], 1) == [] get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n","entry_point":"get_row","raw":"You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in descending order.\n    Also, sort coordinates of the row by columns in ascending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]","reduced":"You given a 2 dimensional data, as a nested lists, is similar matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, integer x, find integers x the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in descending order. Also, sort coordinates of the row by columns in ascending order. Examples: get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)] get_row([], 1) == [] get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id":"EvoEval\/88","prompt":"def sort_array(array):\n    \"\"\"\n    Given non-negative integers, return of the given array after sorting, sort the given array ascending if the sum( first index value, last index value) odd, or in descending order if the sum( first index value, last index value) is even. In addition, remove any duplicate values from the array. Note: don't change the given array. Examples: * sort_array([]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0] * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","entry_point":"sort_array","raw":"Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    In addition, remove any duplicate values from the array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]","reduced":"Given non-negative integers, return of the given array after sorting, sort the given array ascending if the sum( first index value, last index value) odd, or in descending order if the sum( first index value, last index value) is even. In addition, remove any duplicate values from the array. Note: don't change the given array. Examples: * sort_array([]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0] * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id":"EvoEval\/89","prompt":"def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as argument returns a string encrypted with alphabet rotated. alphabet should rotated a manner such that the letters shift up by two multiplied to two places. For example: encrypt('lm') returns 'hi' encrypt('hjklnop') returns 'asdfghjkl' encrypt('kj') returns 'gf' encrypt('') returns 'et'\n    \"\"\"\n","entry_point":"encrypt","raw":"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'","reduced":"Create a function encrypt that takes a string as argument returns a string encrypted with alphabet rotated. alphabet should rotated a manner such that the letters shift up by two multiplied to two places. For example: encrypt('lm') returns 'hi' encrypt('hjklnop') returns 'asdfghjkl' encrypt('kj') returns 'gf' encrypt('') returns 'et'"}
{"task_id":"EvoEval\/90","prompt":"def next_largest(lst):\n    \"\"\"\n    given a list integers. Write a function next_largest() returns 2nd largest element of the list. Return None if no such element. next_largest([1, 2, 3, 4, 5]) == 4 next_largest([5, 1, 4, 3, 2]) == 4 next_largest([]) == None next_largest([1, 1]) == None\n    \"\"\"\n","entry_point":"next_largest","raw":"You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1, 4, 3, 2]) == 4\n    next_largest([]) == None\n    next_largest([1, 1]) == None","reduced":"given a list integers. Write a function next_largest() returns 2nd largest element of the list. Return None if no such element. next_largest([1, 2, 3, 4, 5]) == 4 next_largest([5, 1, 4, 3, 2]) == 4 next_largest([]) == None next_largest([1, 1]) == None"}
{"task_id":"EvoEval\/91","prompt":"def is_bored(S):\n    \"\"\"\n    You'll be given string words, your task to count number of boredoms. A boredom is a sentence starts with the word \"I\" and ends with the word \"boredom\". Sentences delimited by '.', '?' or '!'. For example: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. The sun is shining. I am experiencing boredom\") 1\n    \"\"\"\n","entry_point":"is_bored","raw":"You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\" and ends with the word \"boredom\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I am experiencing boredom\")\n    1","reduced":"You'll be given string words, your task to count number of boredoms. A boredom is a sentence starts with the word \"I\" and ends with the word \"boredom\". Sentences delimited by '.', '?' or '!'. For example: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. The sun is shining. I am experiencing boredom\") 1"}
{"task_id":"EvoEval\/92","prompt":"def any_int(x, y, z):\n    \"\"\"\n    Create function takes 3 numbers. Returns true if one numbers is equal the sum of the absolute values of other two, all numbers integers. Returns false any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n","entry_point":"any_int","raw":"def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the absolute values of other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''","reduced":"def any_int(x, y, z): ''' Create function takes 3 numbers. Returns true if one numbers is equal the sum of the absolute values of other two, all numbers integers. Returns false any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False '''"}
{"task_id":"EvoEval\/93","prompt":"def encode(message):\n    \"\"\"\n    Write a function takes a message, and encodes in such a way that it swaps case all letters, replaces all vowels in message with the letter that appears 3 places ahead of that vowel in the english alphabet. Assume only letters. Examples: >>> encode('test') 'THST' >>> encode('This is a message') 'tHLS LS D MHSSDGH'\n    \"\"\"\n","entry_point":"encode","raw":"Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 3 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'THST'\n    >>> encode('This is a message')\n    'tHLS LS D MHSSDGH'","reduced":"Write a function takes a message, and encodes in such a way that it swaps case all letters, replaces all vowels in message with the letter that appears 3 places ahead of that vowel in the english alphabet. Assume only letters. Examples: >>> encode('test') 'THST' >>> encode('This is a message') 'tHLS LS D MHSSDGH'"}
{"task_id":"EvoEval\/94","prompt":"def skjkasdkd(lst):\n    \"\"\"\n    You given list integers. You need find smallest prime value return the sum of its digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should 2 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5 For lst = [0,81,12,3,1,21] the output should be 3 For lst = [0,8,1,2,1,7] the output should be 2\n    \"\"\"\n","entry_point":"skjkasdkd","raw":"You are given a list of integers.\n    You need to find the smallest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2","reduced":"You given list integers. You need find smallest prime value return the sum of its digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should 2 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5 For lst = [0,81,12,3,1,21] the output should be 3 For lst = [0,8,1,2,1,7] the output should be 2"}
{"task_id":"EvoEval\/95","prompt":"def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. function should return False the given dictionary is empty or the number keys is less than 3. Examples: check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because it has less than 3 keys. check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True.\n    \"\"\"\n","entry_point":"check_dict_case","raw":"Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty or the number of keys is less than 3.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because it has less than 3 keys.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True.","reduced":"Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. function should return False the given dictionary is empty or the number keys is less than 3. Examples: check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False because it has less than 3 keys. check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"CITY\": \"New York\" }) should return True."}
{"task_id":"EvoEval\/96","prompt":"def count_up_to(n):\n    \"\"\"\n    Implement function takes non-negative integer returns an array first n integers that prime numbers and less than or equal n. Return the list descending order. for example: count_up_to(5) => [5,3,2] count_up_to(11) => [11,7,5,3,2] count_up_to(0) => [] count_up_to(20) => [19,17,13,11,7,5,3,2] count_up_to(1) => [] count_up_to(18) => [17,13,11,7,5,3,2]\n    \"\"\"\n","entry_point":"count_up_to","raw":"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than or equal to n. Return the list in descending order.\n    for example:\n    count_up_to(5) => [5,3,2]\n    count_up_to(11) => [11,7,5,3,2]\n    count_up_to(0) => []\n    count_up_to(20) => [19,17,13,11,7,5,3,2]\n    count_up_to(1) => []\n    count_up_to(18) => [17,13,11,7,5,3,2]","reduced":"Implement function takes non-negative integer returns an array first n integers that prime numbers and less than or equal n. Return the list descending order. for example: count_up_to(5) => [5,3,2] count_up_to(11) => [11,7,5,3,2] count_up_to(0) => [] count_up_to(20) => [19,17,13,11,7,5,3,2] count_up_to(1) => [] count_up_to(18) => [17,13,11,7,5,3,2]"}
{"task_id":"EvoEval\/97","prompt":"def multiply(a, b):\n    \"\"\"\n    Complete function takes two integers returns the sum their unit digits. Assume the input always valid. Examples: multiply(148, 412) should return 10. multiply(19, 28) should return 17. multiply(2020, 1851) should return 1. multiply(14,-15) should return 9.\n    \"\"\"\n","entry_point":"multiply","raw":"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 10.\n    multiply(19, 28) should return 17.\n    multiply(2020, 1851) should return 1.\n    multiply(14,-15) should return 9.","reduced":"Complete function takes two integers returns the sum their unit digits. Assume the input always valid. Examples: multiply(148, 412) should return 10. multiply(19, 28) should return 17. multiply(2020, 1851) should return 1. multiply(14,-15) should return 9."}
{"task_id":"EvoEval\/98","prompt":"def count_upper(s):\n    \"\"\"\n    Given a string s, count the number uppercase vowels odd indices. For example: count_upper('aBCdEf') returns 0 count_upper('abcdefg') returns 0 count_upper('dBBE') returns 1\n    \"\"\"\n","entry_point":"count_upper","raw":"Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 0\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 1","reduced":"Given a string s, count the number uppercase vowels odd indices. For example: count_upper('aBCdEf') returns 0 count_upper('abcdefg') returns 0 count_upper('dBBE') returns 1"}
{"task_id":"EvoEval\/99","prompt":"def closest_integer(value):\n    \"\"\"\n    Create a function takes a value (string) representing a number returns closest integer it. If the number equidistant from two integers, round it towards zero. Examples >>> closest_integer(\"10\") 10 >>> closest_integer(\"15.3\") 15 Note: Rounding towards zero means that if the given number is equidistant from two integers, the one you should return is the one that is the closest to zero. For example closest_integer(\"14.5\") should return 14 and closest_integer(\"-14.5\") should return -14. \n    \"\"\"\n","entry_point":"closest_integer","raw":"def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it towards zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding towards zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    closest to zero. For example closest_integer(\"14.5\") should\n    return 14 and closest_integer(\"-14.5\") should return -14.\n    '''","reduced":"def closest_integer(value): ''' Create a function takes a value (string) representing a number returns closest integer it. If the number equidistant from two integers, round it towards zero. Examples >>> closest_integer(\"10\") 10 >>> closest_integer(\"15.3\") 15 Note: Rounding towards zero means that if the given number is equidistant from two integers, the one you should return is the one that is the closest to zero. For example closest_integer(\"14.5\") should return 14 and closest_integer(\"-14.5\") should return -14. '''"}
